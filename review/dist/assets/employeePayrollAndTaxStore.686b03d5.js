import{J as y,K as i,L as p,N as c,O as s,R as d,j as m,Q as u}from"./index.611fe570.js";class A{employeePayrollAndTaxId;pHQClientId;employeeId;isActive;isDeleted;isDirectDeposit;isDirectDepositEnabled;lastSyncTimeUTC;updateEmployeeId;payPeriodId;isFutaSutaExempt;payTypeId;payRate;payPeriodsPerYear;isCertifiedPayroll;earnCodeId;payrollLocalTaxGroupId;isResidenceTax;isHoursRequiredForSalary;constructor(e){Object.assign(this,e)}}class P extends p{constructor(e){const t=c().ClientSide.WorkforceEmployeeManagement+"/api/v1";super(e,t,"employee payroll and tax")}async switchEmployeePaymentMethodAsync(e,t){try{return await this.PerformPatch(`/employees/${t}/directDeposit/switchpayment/${e}`,null)}catch(o){throw console.error(this.errormessage(s.Update),o),o}}async getEmployeePayrollAndTaxAsync(e){try{return await this.PerformFetch(`/EmployeePayrollAndTax/${e}`)}catch(t){throw console.error(this.errormessage(s.Update),t),t}}}const l=new P([y,i]),x=d("employeePayrollAndTaxStore",()=>{const a=m(new A),{notifyError:e}=u();async function t(r){try{a.value=await l.getEmployeePayrollAndTaxAsync(r)}catch{e("Failed to get employee payroll and tax settings")}}async function o(r,n){return await l.switchEmployeePaymentMethodAsync(n,r)}return{fetchEmployeePayrollAndTaxes:t,employeePayrollAndTaxSettings:a,switchEmployeePaymentMethod:o}});export{x as u};
