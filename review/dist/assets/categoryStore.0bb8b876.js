import{J as c,K as i,L as g,N as y,R as u,j as C}from"./index.611fe570.js";class l extends g{constructor(e){const t=y().ClientSide.WorkforceManagement+"/v1";super(e,t)}async getCategories(){let e=[];try{const t=await this.axiosInstance.get("PostCategories");t&&t.data&&t.status==200&&(e=t.data)}catch(t){console.log(t)}return e}async createCategory(e){const t={categoryName:e.categoryName,categoryColor:e.categoryColor};try{const a=await this.axiosInstance.post("PostCategories",t);if(a&&a.status==200)return a.data;throw new Error("Fail to add category")}catch(a){return a.response.data}}async editCategory(e){const t=e.postCategoryId,a={categoryName:e.categoryName,categoryColor:e.categoryColor};try{const r=await this.axiosInstance.put(`PostCategories/${t}`,a);if(r&&r.status==200)return r.data;throw new Error("Fail to edit category")}catch(r){return r.response.data}}async deleteCategory(e){try{const t=await this.axiosInstance.delete(`PostCategories/${e}`);if(t&&t.status==204)return!0}catch{return!1}}}const s=new l([c,i]),p=u("category",()=>{const n=C([]);async function e(){n.value=await s.getCategories()}async function t(o){return s.createCategory(o)}async function a(o){return s.editCategory(o)}async function r(o){return s.deleteCategory(o)}return{categoryList:n,fetchCategories:e,createCategory:t,editCategory:a,deleteCategory:r}});export{p as u};
