import{J as m,K as S,L as d,N as h,O as g,R as y,Q as C,j as o,T as W,b as f}from"./index.611fe570.js";import{P as A}from"./PaymentMethod.1e9311f3.js";class u{hRContactEmail;hRContactPhoneNumber;isPaperCheck;isDirectDeposit;isReminderForDirectDepositNotification;constructor(t){Object.assign(this,t)}}class F extends d{constructor(t){const e=h().ClientSide.WorkforceManagement+"/v1";super(t,e,"general client setting")}async getGeneralClientSettingAsync(){var t=new u;try{const e="/GeneralClientSettings",r=await this.PerformFetch(e);t=new u(r)}catch(e){throw console.error(this.errormessage(g.Fetch),e),e}return t}async upsertGeneralClientSettingAsync(t){try{const e="/GeneralClientSettings";return await this.PerformPut(e,t,!0)}catch(e){throw console.error(this.errormessage(g.Fetch),e),e}}}const p=new F([m,S]),D={DirectDepositRemainderDismissed:"IS_DIRECTDEPSOIT_REMINDER_DISMISSED"},I=y("GeneralClientSetting",()=>{C();const s=o({}),t=o(),e=W(),r=f(()=>`${e.activeUserGuid}_${D.DirectDepositRemainderDismissed}`);async function a(){try{s.value=await p.getGeneralClientSettingAsync();let n=s.value?.isReminderForDirectDepositNotification;n&&(n=localStorage.getItem(r.value)?.toLowerCase()!="true"),t.value={isDirectDeposit:s.value?.isDirectDeposit,isPaperCheck:s.value?.isPaperCheck,isReminded:n}}catch{s.value=new u,t.value=new A}}async function c(n){t.value=n}async function l(n){return await p.upsertGeneralClientSettingAsync(n)}return{fetchGeneralClientSetting:a,upsertGeneralClientSetting:l,savePaymentMethod:c,clientPaymentMethod:t,generalClientSetting:s}});class v extends d{constructor(t){const e=h().ClientSide.WorkforceManagement+"/v1";super(t,e)}async getW2FormsByEmployeeId(t,e){let r;try{const a=await this.axiosInstance.get(`W2FormSetting/myW2?year=${e}&employeeId=${t}`);if(a.status===200&&a.data)r=a.data;else throw new Error("Failed to parse w2-form list")}catch{console.error("An unexpected error occurred attempting to retrieve the W-2 Form List.")}return r}async getEmployeeConsentStatus(t){let e;try{const r=await this.axiosInstance.get(`ConsentHistories/${t}`);if(r.status===200&&r.data)e=r.data;else throw new Error("Failed to parse w2-consent status")}catch{console.error("An unexpected error occurred attempting to retrieve the W-2 Consent Status.")}return e}async getW2Settings(t){let e;try{const r=await this.axiosInstance.get(`W2FormSetting?year=${t}`);r.status===200&&r.data&&(e=r.data)}catch(r){console.error("An unexpected error occurred attempting to retrieve the W-2 Settings.",r)}return e}async updateW2Settings(t){try{await this.axiosInstance.post("W2FormSetting",t)}catch(e){console.error("An unexpected error occurred when update w2 settings.",e)}}}const i=new v([m,S]),R=y("w2Form",()=>{const s=o(new Array),t=o(null),e=o(null);async function r(n,w){s.value=await i.getW2FormsByEmployeeId(n,w)}async function a(n){t.value=await i.getEmployeeConsentStatus(n)}async function c(n){e.value=await i.getW2Settings(n)}async function l(n){await i.updateW2Settings(n)}return{w2FormList:s,isW2Consent:t,w2FormSetting:e,getW2SettingsByYear:c,getW2ConsentStatus:a,fetchW2FormList:r,updateW2Settings:l}});export{D as L,R as a,I as u};
