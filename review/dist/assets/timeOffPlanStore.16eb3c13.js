import{Q as $,J as y,K as g,L as h,N as d,R as L,j as p}from"./index.611fe570.js";const{notifyError:f,notifySuccess:S}=$();class b extends h{constructor(t){const e=d().ClientSide.WorkforceManagement+"/v1";super(t,e)}async getTimeOffPlan(t){let e;try{const a=await this.axiosInstance.get(`AssignedVacationPlans/${t}/`);if(a&&a.data&&a.status===200)e=a.data;else throw new Error("Failed to parse time-off plan list")}catch(a){console.error("An unexpected error occurred attempting to retrieve the time-off plan list.",a)}return e}async getAccrualPlans(t,e){let a;try{const r=await this.axiosInstance.get(`/employees/${t}/assignedPlans`,{params:{employeeId:t,hasPlanBeenAssigned:e}});if(r&&r.data&&r.status===200)a=r.data;else throw new Error("Failed to parse time-off plan list")}catch(r){console.error("An unexpected error occurred attempting to retrieve the time-off plan list.",r)}return a}async getAccrualCodes(t){let e;try{const a=await this.axiosInstance.get(`/employees/${t}/assignedPlans/types`);if(a&&a.data&&a.status===200)e=a.data;else throw new Error("Failed to parse time-off plan list")}catch(a){console.error("An unexpected error occurred attempting to retrieve the time-off plan list.",a)}return e}async addTimeOffPlanToEmployee(t){try{const e=await this.axiosInstance.post(`AssignedVacationPlans/${t.employeeId}`,t);if(e&&e.status===200)return e.data;throw new Error("Failed to add time-off plan to employee")}catch(e){console.error("An unexpected error occurred attempting to retrieve the time-off plan to employee",e)}}async updateTimeOffPlanToEmployee(t){try{const e=await this.axiosInstance.patch(`AssignedVacationPlans/${t.employeeId}/employeeAccrualPlan/${t.employeeAccrualPlanId}`,t);if(e&&e.status===200)return e.data;throw new Error("Failed to update time-off plan to employee")}catch(e){console.error("An unexpected error occurred attempting to retrieve the time-off plan to employee",e)}}async getVacationPlansByPlanId(t){let e;try{const a=await this.axiosInstance.get(`VacationPlans?planTypeId=${t}`);if(a&&a.data&&a.status===200)e=a.data;else throw new Error("Failed to parse time-off plan list")}catch(a){console.error("An unexpected error occurred attempting to retrieve the time-off plan list.",a),f("There was an error while fetching Vacation Plan.")}return e}async getFormVacation(t,e){const a=`/api/v1/employees/${t}/formFieldValue?formId=${e}`;let r;try{const s=await this.axiosInstance.get(d().ClientSide.WorkforceEmployeeManagement+a);if(s&&s.data&&s.status===200)r=s.data;else throw new Error("Failed to get Form Vacation data")}catch(s){console.error("An unexpected error occurred attempting to retrieve Form Vacation data.",s),f("There was an error while fetching Vacation form.")}return r}async updateOnboardingFormVacation(t,e){try{await this.axiosInstance.post(`${d().ClientSide.WorkforceEmployeeManagement}/api/v1/employees/${t}/formFieldValue`,e),S("Vacation updated.")}catch(a){throw console.error("An unexpected error occurred attempting to update the Onboarding Vacation",a),f("There was an error while updating Vacation."),a}}}const c=new b([y,g]);class W extends h{constructor(t){const e=d().ClientSide.WorkforceManagement+"/v1/employees";super(t,e)}async getAccrualUsages(t,e){try{const a=await this.axiosInstance.get(`/${t}/assignedPlans/accrualUsage`,{params:{accrualCodeFsNo:e}});if(a&&a.data&&a.status===200)return a.data;throw new Error("Failed to parse accrual usage")}catch(a){console.error("An unexpected error occurred attempting to retrieve accrual usage.",a)}}async getEmployeePlanTypes(t){try{const e=await this.axiosInstance.get(`/${t}/assignedPlans/historyPlanTypes`);if(e&&e.data&&e.status===200)return e.data;throw new Error("Failed to parse employee plan type")}catch(e){console.error("An unexpected error occurred attempting to retrieve employee plan type.",e)}}async hasActivePlanWithType(t,e){try{const a=await this.axiosInstance.get(`/${t}/assignedPlans/activePlan?accrualPlanId=${e}`);if(a&&a.data&&a.status===200)return a.data;throw new Error("Failed to check active plan")}catch(a){console.error("An unexpected error occurred attempting to check active plan.",a)}}}const m=new W([y,g]),C=L("useTimeOffPlan",()=>{const u=p(new Array),t=p(new Array),e=p(new Array),a=p(new Array),r=p(new Array),s=p();async function w(n,o){e.value=await c.getAccrualPlans(n,o),a.value=await c.getAccrualCodes(n)}async function P(n){if(t.value=[],u.value=[],t.value=await c.getTimeOffPlan(n),t.value.length){const o=[...new Set(t.value.map(i=>i.planType))];for(let i=0;i<o.length;i++){const O=t.value.filter(l=>l.planType===o[i]),F={id:i,isActive:null,startDate:"",planTypeId:null,vacationPlanId:null,planType:o[i],planName:o[i],employeeId:null,expanded:!0,children:O.map(l=>(l.parentId=i,l.startDate=l.startDate,l))};u.value.push(F)}}}async function A(n){e.value=await c.getVacationPlansByPlanId(n)}async function v(n,o){s.value=await c.getFormVacation(n,o)}async function T(n,o){await c.updateOnboardingFormVacation(n,o)}async function x(n){r.value=await m.getEmployeePlanTypes(n)}async function V(n){return await c.updateTimeOffPlanToEmployee(n)}async function E(n){return await c.addTimeOffPlanToEmployee(n)}async function I(n,o){return await m.hasActivePlanWithType(n,o)}return{fetchTimeOffPlantList:P,fetchVacationList:w,timeOffPlanList:t,timeOffPlanTree:u,vacationPlanName:e,vacationType:a,dataOnboardingVacation:s,updateListPlanOfEmployee:V,addListPlanOfEmployee:E,employeePlanType:r,fetchListOfEmployeePlanType:x,getListVacationPlan:A,fetchFormPayrollInformation:v,updateOnboardingVacation:T,hasActivePlanWithType:I}});export{m as e,C as u};
