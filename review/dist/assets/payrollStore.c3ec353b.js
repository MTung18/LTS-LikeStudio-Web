import{J as c,K as p,L as u,N as d,b8 as i,b9 as P,R as f,j as n}from"./index.611fe570.js";class h extends u{constructor(t){const r=d().ClientSide.WorkforceManagement+"/v1";super(t,r)}async getPayrollListByEmployeeId(t,r){let e;try{const o=await this.axiosInstance.get(`PayHistories/employees/${t}/years/${r}`);if(o.status===200&&o.data)e=o.data,e.forEach(a=>{a.filterPayDate=i(a.payDate),a.filterPayPeriod=P(a.payDate),a.filterAvailableToEmployeeOnDate=i(a.availableToEmployeeOnDate)});else throw new Error("Failed to parse payroll list")}catch{console.error("An unexpected error occurred attempting to retrieve the Payroll List.")}return e}async updateAvailablePayrollDateToEmployee(t){try{await this.axiosInstance.put("PayHistory",t)}catch(r){console.error("Error update available payroll date to employee:",r)}}async getPayrollDetails(t){let r;try{const e=await this.axiosInstance.get(`PayHistories/detail/employees/${t}`);if(e&&e.data&&e.status===200)r=e.data;else throw new Error("Failed to parse payroll details")}catch(e){console.error("An unexpected error occurred attempting to retrieve the payroll details.",e)}return r}}const s=new h([c,p]),D=f("payroll",()=>{const l=n(new Array),t=n(null);async function r(a,y){l.value=await s.getPayrollListByEmployeeId(a,y)}async function e(a){t.value=await s.getPayrollDetails(a)}async function o(a){s.updateAvailablePayrollDateToEmployee(a)}return{payrollList:l,fsPaystubDetail:t,fetchPayrollList:r,fetchPayrollDetails:e,updateAvailablePayrollDateToEmployee:o}});export{D as u};
