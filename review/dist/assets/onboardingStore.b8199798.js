import{E as F,J as b,K as S,L as w,N as l,O as u,P as N,Q as C,R as M,j as p}from"./index.611fe570.js";class y{id;name;description;assigneeCount;isActive;isDeleted;constructor(e){Object.assign(this,e)}}class k{aspNetUserId;clientId;driversLicenseExpirationDate;driversLicenseNumber;driversLicenseState;employeeStatusId;employeeType;employmentStatus;firstName;fsEmployeeId;fullName;hireDate;id;isActive;isDeleted;isFoundationSynced;isMultiracial;isNonBinaryTransgender;isNonResidentAlien;isVeteran;jobTitle;lastName;middleName;minorityCodeId;suffix;terminationDate;employeeStatusName;isFormSubmit;constructor(e){e?.hireDate&&(e.hireDate=new Date(e.hireDate)),e?.terminationDate&&(e.terminationDate=new Date(e.terminationDate)),Object.assign(this,e),this.employeeStatusName=F[this.employeeStatusId]}}class f{notStarted=0;inProgressLessThanSevenDays=0;inProgressGreaterThanSevenDays=0;completed=0;constructor(e){Object.assign(this,e)}}const h="onboarding",$="Employee";class L extends w{constructor(e){const t=l().ClientSide.WorkforceManagement+"/v1";super(e,t,"onboarding plan")}async getCurrentOnboard(){let e;try{e=(await this.PerformFetch($)).map(r=>new k(r))}catch(t){console.error(this.errormessage(u.Fetch),t)}return e}async getOnboardingPlans(){let e;try{const t=await this.PerformFetch(`${h}/plan`);if(e=t.map(r=>new y(r)),t)e=t.map(r=>new y(r));else throw new Error("Failed to parse current onboard list")}catch(t){console.error(this.errormessage(u.Fetch),t)}return e}async changeEmployeeStatus(e,t){try{await this.axiosInstance.put(`/Employee/Ids/status?statusId=${t}`,e)}catch(r){console.error("An unexpected error occurred attempting to cancel onboarding plan.",r)}}async fetchOnboardingProgress(){const e=new f;try{await this.PerformFetch(`${h}/progress`)}catch(t){console.error(this.errormessage(u.Fetch,"onboarding progress"),t)}return e}async getOnboardingPaymentMethodSetting(){let e={isPaperCheck:!1,isDirectDeposit:!1};try{const t=await this.axiosInstance.get("GeneralClientSettings");e={isPaperCheck:t.data.isPaperCheck,isDirectDeposit:t.data.isDirectDeposit}}catch(t){console.error("An unexpected error occurred attempting to get onboarding payment method setting.",t)}return e}async getEmployeeFormSubmit(e){let t=!1;try{t=!!(await this.axiosInstance.get(`/Employee/formsubmit?employeeId=${e}`)).data}catch(r){r&&r.response&&r.response.status=="404"?t=!1:console.error("An unexpected error occurred attempting to get employee form submit status.",r)}return t}async updateForm(e,t){let r;try{r=(await this.axiosInstance.post(l().ClientSide.WorkforceEmployeeManagement+`/api/v1/employees/${e}/skipOnboarding?isClearValue=${t}`)).data}catch(o){console.error("An unexpected error occurred attempting to update form.",o)}return r}async updateMultipleSidebar(e){let t;try{t=(await this.axiosInstance.put(l().ClientSide.WorkforceEmployeeManagement+"/api/v1/ProgressSidebars/employeeSelfServiceStatus",e)).data}catch(r){console.error("An unexpected error occurred attempting to update.",r)}return t}async downloadFinalReview(e){try{const t=await this.axiosInstance.get(l().ClientSide.WorkforceManagement+`/v1/employees/${e.employeeId}/FinalReviews/pdf?type=${e.type}`,{responseType:"blob",headers:{Accept:"application/octet-stream"}}),r=new Blob([t.data],{type:"application/pdf"});N.exports.saveAs(r,e.filename)}catch(t){throw console.error("An unexpected error occurred attempting to get employee form submit status.",t),t}}}const i=new L([b,S]);class T extends w{constructor(e){const t=l().ClientSide.WorkforceEmployeeManagement+"/api/v1";super(e,t,"onboarding plan")}async getOnboardingSideNavItems(e){let t;try{const r=await this.axiosInstance.get(`ProgressSidebars/onboardingSummaries/${e}`);if(r&&r.status===200)t=r.data;else throw new Error("Failed to parse onboarding sidenav items")}catch(r){throw console.error("An unexpected error occurred attempting to fetch onboarding sidenav items.",r),Promise.reject(r)}return t}async markOnboardingSideNavItemAsDone(e,t,r=null){try{await this.axiosInstance.put(`ProgressSidebars/${e}/progressBarEssStatus?employeeId=${r}`,t)}catch(o){throw console.error("An unexpected error occurred attempting to update onboarding sidenav items.",o),o}}async updateMultipleForm(e,t){let r;try{r=(await this.axiosInstance.post(`employees/skipOnboardingForEmployees?isClearValue=${t}`,e)).data}catch(o){console.error("An unexpected error occurred attempting to update form.",o)}return r}async updateMultipleSidebar(e){let t;try{t=(await this.axiosInstance.put("ProgressSidebars/employeeSelfServiceStatus",e)).data}catch(r){console.error("An unexpected error occurred attempting to update.",r)}return t}}const d=new T([b,S]),{notifyError:W}=C(),U=M("onboarding",()=>{const s=p(new Array),e=p(new f),t=p(new Array),r=p(new Array),o=p();async function v(){t.value=await i.getCurrentOnboard(),t.value.length&&await Promise.all(t.value.map(async a=>(await g(a.id).then(n=>{a.isFormSubmit=n}),a)))}async function O(){r.value=await i.getOnboardingPlans()}async function A(a,n){return await i.changeEmployeeStatus(a,n)}async function D(){e.value=await i.fetchOnboardingProgress()}async function m(a){try{const n=await i.getOnboardingPaymentMethodSetting();if(n||(W("There was an error while fetching payment method setting"),console.error("There was an error while fetching payment method setting"),s.value=await d.getOnboardingSideNavItems(a)),n?.isDirectDeposit)s.value=await d.getOnboardingSideNavItems(a);else{const c=await d.getOnboardingSideNavItems(a);s.value=c.filter(E=>E.progressSidebarUrl!=="onboardingDirectDeposit")}}catch(n){throw s.value=await d.getOnboardingSideNavItems(a),n}}async function P(a,n,c){await d.markOnboardingSideNavItemAsDone(a,n,c),await m(c)}async function g(a){return await i.getEmployeeFormSubmit(a)}async function x(a,n){await Promise.all(a.map(async c=>{await i.updateForm(c,n)}))}async function I(a){return await d.updateMultipleSidebar(a)}return{onboardingPlanList:r,fetchCurrentOnboards:v,fetchOnboardingList:O,currentOnboards:t,employeeOnboard:o,changeEmployeeStatus:A,fetchOnboardingProgress:D,onboardingProgress:e,getOnboardingSideNavItems:m,onboardingSideNavItem:s,markOnboardingSidenavItemAsDone:P,getEmployeeFormSubmit:g,updateForm:x,updateMultipleSidebar:I}});export{U as u,i as w};
