import{J as f,K as G,L as g,N as w,R as P,j as u}from"./index.611fe570.js";class N{id=0;name="";description="";userCount=0;constructor(e){e&&Object.assign(this,e)}}class y{id=0;name="";constructor(e){e&&Object.assign(this,e)}}class v{employeeId;name;lastFirstName;firstName;middleName;lastName;emailAddress;permissionGroup;isActive;status;selected;constructor(e){e.firstName||(e.firstName=""),e.lastName||(e.lastName=""),Object.assign(this,e),this.status=this.isActive?"Active":"Inactive",this.middleName&&this.middleName!==""?(this.name=`${this.firstName} ${this.middleName} ${this.lastName}`,this.lastFirstName=`${this.lastName} ${this.middleName} ${this.firstName}`):(this.name=`${this.firstName} ${this.lastName}`,this.lastFirstName=`${this.lastName} ${this.firstName}`)}}class c{id=0;name="";description="";isDefaultPermissionGroup=!1;isAdminGroup=!1;isSupervisorGroup=!1;permissionGroupPermissionItems=[];users=[];constructor(e){if(e){let s=e.users;delete e.users,Object.assign(this,e),s&&s.forEach(r=>this.users.push(new v(r)))}}}class x extends g{constructor(e){const s=`${w().ClientSide.WorkforceManagement}/v1/permissiongroups`;super(e,s)}async getPermissionGroups(){let e;try{const s=await this.axiosInstance.get("");if(s?.data?.length>0&&s.status===200)e=s.data.map(r=>new N(r));else throw new Error("Failed to parse permission group list")}catch(s){return console.error("An unexpected error occurred attempting to retrieve the permission group list.",s),Promise.reject(s)}return e}async createPermissionGroup(e){try{const s=await this.axiosInstance.post("",e);if(s&&s.status===201)return new c(s.data);throw new Error("Failed to create permission group.")}catch(s){return console.error("An unexpected error occurred attempting to create permission group.",s),Promise.reject(s)}}async editPermissionGroup(e,s){try{if((await this.axiosInstance.put(`${e}`,s)).status===200)return!0;throw new Error("Failed to edit permission group.")}catch(r){console.error("An unexpected error occurred attempting editting permission group.",r)}}async deletePermissionGroup(e){try{if((await this.axiosInstance.delete(`${e}`)).status===204)return!0;throw new Error("Failed to delete permission group.")}catch(s){console.error("An unexpected error occurred attempting to delete permission group.",s)}}async getPermissionGroupsLookup(e){let s,r={};e!=null&&(r.excludeAdminGroup=e);try{const t=await this.axiosInstance.get("lookup",{params:r});if(t?.data?.length>0&&t.status===200)s=t.data.map(n=>new y(n));else throw new Error("Failed to parse permission group lookup")}catch(t){console.error("An unexpected error occurred attempting to retrieve the permission group lookup.",t)}return s}async getPermissionGroupDetails(e){let s;try{const r=await this.axiosInstance.get(`${e}/details`);if(r?.data&&r.status===200)s=new c(r.data);else throw new Error("Failed to parse permission group details")}catch(r){return console.error("An unexpected error occurred attempting to retrieve the permission group details.",r),Promise.reject(r)}return s}async postMoveUsersToPermissionGroup(e,s){let r;try{const t=await this.axiosInstance.post(`moveUsers/${s}`,e);if(t?.data&&t.status===200)r=new c(t.data);else throw new Error("Failed to parse permission group details")}catch(t){console.error("An unexpected error occurred.",t)}return r}}const a=new x([f,G]),A=P("permissionGroup",()=>{const i=u(),e=u(),s=u();async function r(){i.value=await a.getPermissionGroups()}async function t(o){e.value=await a.getPermissionGroupsLookup(o)}async function n(o){s.value=await a.getPermissionGroupDetails(o)}async function m(o){return await a.createPermissionGroup(o)}async function l(o,p){return await a.editPermissionGroup(o,p)}async function d(o){return await a.deletePermissionGroup(o)}async function h(o,p){return await a.postMoveUsersToPermissionGroup(o,p)}return{permissionGroupList:i,permissionGroupLookup:e,permissionGroupDetails:s,fetchPermissionGroupList:r,fetchPermissionGroupLookup:t,fetchPermissionGroupDetails:n,createPermissionGroup:m,editPermissionGroup:l,deletePermissionGroup:d,moveUsersToPermissionGroup:h}});export{v as P,c as a,N as b,A as u};
