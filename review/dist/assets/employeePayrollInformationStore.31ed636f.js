import{J as i,K as y,L as c,N as m,O as n,R as p,j as u}from"./index.611fe570.js";var f=(r=>(r[r.Hourly=1]="Hourly",r[r.Salary=2]="Salary",r))(f||{});class l{employeeId;payTypeId;earnCodeId;payPeriodId;payType;earnCode;payPeriod;payRate;payPeriodsPerYear;isHoursRequiredforSalary;isCertifiedPayroll;isFutaSutaExempt;constructor(e){Object.assign(this,e)}}class I extends c{constructor(e){const o=m().ClientSide.WorkforceManagement+"/v1/employee";super(e,o)}async getPayrollInformation(e){let o=new l;try{o=await this.PerformFetch(`${e}/payroll`)}catch(a){console.error(this.errormessage(n.Fetch),a)}return o}async editPayrollInformation(e){try{return await this.PerformPost(`${e.employeeId}/payroll`,e)}catch(o){console.error(this.errormessage(n.Create),o)}return!1}}const s=new I([i,y]),d=p("employeePayrollInformation",()=>{const r=u(new l);async function e(a){const t=await s.getPayrollInformation(a);return r.value=t,r.value}async function o(a){const t=await s.editPayrollInformation(a);return t&&(r.value=a),t}return{payrollInformation:r,fetchPayrollInformation:e,editPayrollInformation:o}});export{f as P,l as a,d as u};
