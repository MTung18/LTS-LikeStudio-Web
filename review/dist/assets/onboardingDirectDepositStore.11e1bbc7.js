import{J as v,K as M,L as P,N as y,R as b,j as i,d1 as S}from"./index.611fe570.js";class w extends P{constructor(n){const t=`${y().ClientSide.WorkforceEmployeeManagement}/api/v1/`;super(n,t)}async getMetaData(n){const t=`employees/${n}/directDeposit/masterdata`;let o={};try{const a=await this.axiosInstance.get(t);if(a&&a.data&&a.status===200)o=a.data;else throw new Error("Failed to parse Direct Deposit master data")}catch(a){console.error("An unexpected error occurred attempting to retrieve the Direct Deposit master data.",a)}return o}async getAccounts(n){const t=`employees/${n}/directDeposit`;let o=[];try{const a=await this.axiosInstance.get(t);if(a&&a.data&&a.status===200)o=a.data.map(s=>s);else throw new Error("Failed to parse Direct Deposit Account list")}catch(a){console.error("An unexpected error occurred attempting to retrieve the Direct Deposit Account list.",a)}return o}async submitAccounts({updateAccountList:n,employeeId:t}){const o=`employees/${t}/directDeposit`,a=n.map(s=>{const{parentIndex:m,id:g,...p}=s;return p});try{await this.axiosInstance.put(o,a)}catch(s){console.error("An unexpected error occurred attempting to submit Direct Deposit Account list.",s)}}async updatePaymentMethod(n){const t="EmployeePayrollAndTax/updatePaymentMethod";try{return(await this.axiosInstance.put(t,n)).data}catch(o){console.error("An unexpected error occurred attempting to update payment method.",o)}}async getPaymentMethod(){const n="EmployeePayrollAndTax/getPaymentMethod";try{return(await this.axiosInstance.get(n)).data.isDirectDeposit}catch(t){console.error("An unexpected error occurred attempting to get payment method.",t)}}async getOnboardingPaymentMethodSetting(){let n={};try{const t=await this.axiosInstance.get(y().ClientSide.WorkforceManagement+"/v1/GeneralClientSettings");n={isPaperCheck:t.data.isPaperCheck,isDirectDeposit:t.data.isDirectDeposit}}catch(t){console.error("An unexpected error occurred attempting to get the onboarding payment setting.",t)}return n}}const d=new w([v,M]),_=b("onboardingDirectDeposit",()=>{const l=i(""),n=i(new Array),t=i(new Array),o=i(!1),a=i("edit"),s=i({}),m=i([]),g=i([]),p=i([]);async function A(e){s.value=await d.getMetaData(e),m.value=s.value.distributionMethodList,g.value=s.value.accountTypeList,p.value=s.value.approvalStatusList}const h=e=>{a.value=e};async function D(e){n.value=await d.getAccounts(e),o.value=n.value.some(u=>u.approvalStatusName===S.pendingHRM);const r=n.value.map(u=>{const c={};return Object.assign(c,u),c});t.value=[...r]}return{selectedAccountId:l,accountList:n,fetchAccount:D,curAccountList:t,updateCurAccountList:e=>{t.value=t.value.map(r=>r.id===e.id?e:r)},updateSelectedAccountId:e=>{l.value=e},deleteAccount:e=>{t.value=t.value.filter(r=>r.id!==e)},addAccount:e=>{const r=t.value.filter(c=>c.ordinalPosition===-1),u=t.value.filter(c=>c.ordinalPosition!==-1);t.value=[...u,e,...r]},isPending:o,updateCurAccountListOrder:e=>{const r=e.map(u=>{const c={};return Object.assign(c,u),c});t.value=[...r]},startAtMode:a,changeStartAtMode:h,submitAccounts:async({updateAccountList:e,employeeId:r})=>{await d.submitAccounts({updateAccountList:e,employeeId:r})},updatePaymentMethod:async e=>await d.updatePaymentMethod(e),getPaymentMethod:async()=>await d.getPaymentMethod(),getOnboardingPaymentMethodSetting:async()=>await d.getOnboardingPaymentMethodSetting(),getMetaData:A,approvalStatusOptions:p,bankAccountTypeOptions:g,distributionMethodOptions:m}});export{_ as u};
