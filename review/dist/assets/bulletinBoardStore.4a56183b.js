import{J as b,K as y,L as D,N as g,R as m,j as i,bc as v,b8 as u}from"./index.611fe570.js";class x extends D{constructor(t){const e=g().ClientSide.WorkforceManagement+"/v1";super(t,e)}async getListOfBulletins(t){let e;try{const a=await this.axiosInstance.get("Posts",{params:{Search:t}});if(a&&a.data&&a.status===200)e=a.data;else throw new Error("Failed to parse Bulletin board list")}catch(a){console.error("An unexpected error occurred attempting to retrieve the Bulletin board list.",a)}return e}async addBulletinBoard(t){try{const e=await this.axiosInstance.post("Posts",t);if(e&&e.status===200)return!0;throw new Error("Failed to add Bulletin board")}catch(e){return e.response.data}}async deleteBulletinBoard(t){try{const e=await this.axiosInstance.delete(`Posts/${t}`);if(e&&e.status===204)return!0;throw new Error("Failed to delete")}catch(e){console.error("Delete error.",e)}}async updateBulletinBoardDetail(t,e){try{const a=await this.axiosInstance.put(`Posts/${t}`,e);if(a&&a.status===200)return!0;throw new Error("Failed to update Bulletin board")}catch(a){return a.response.data}}async getBulletinBoardDetail(t){let e;try{const a=await this.axiosInstance.get(`Posts/${t}`);if(a&&a.data&&a.status===200)e=a.data;else throw new Error("Failed to get Bulletin board detail")}catch(a){console.error("An unexpected error occurred attempting to retrieve the Bulletin board list.",a)}return e}async getListPost(){let t;try{const e=await this.axiosInstance.get("Posts/getTopRecords");if(e&&e.data&&e.status===200)t=e.data;else throw new Error("Failed to parse Bulletin board list")}catch(e){console.error("An unexpected error occurred attempting to retrieve the Bulletin board list.",e)}return t}async checkPublish(){try{const t=await this.axiosInstance.get("Posts/checkIsPublish");if(t&&t.data&&t.status===200)return t.data;throw new Error("Failed to parse Bulletin board list")}catch(t){return t.response.data.detail}}}const l=new x([b,y]),I=m("bulletinBoard",()=>{const n=i([]),t=i(),e=i([]);async function a(r){const o=await l.getListOfBulletins(r);n.value=o.map(s=>({...s,createdDateUTC:v(s.createdDateUTC).format("MM/DD/YYYY")}))}async function d(r){t.value=await l.getBulletinBoardDetail(r),t.value.essDashboardPublishDate=u(t.value.essDashboardPublishDate),t.value.essDashboardExpirationDate=u(t.value.essDashboardExpirationDate)}async function c(r){await l.deleteBulletinBoard(r),n.value=n.value.filter(o=>o.postId!==r)}async function B(r,o){return await l.updateBulletinBoardDetail(r,o)}async function h(r){return await l.addBulletinBoard(r)}async function p(r){return await l.deleteBulletinBoard(r)}function f(r){return new Promise(o=>{const s=new FileReader;s.readAsDataURL(r),s.onloadend=async function(){o(s.result)}})}async function w(r){for(const s of r)s.value&&(s.base64=await f(s.value.data));const o=n.value.map(s=>({...s}));for(let s=0;s<o.length;s++)r[s].base64&&(o[s].thumbnailUrl=r[s].base64);e.value=o}return{fetchListOfBulletinBoards:a,listOfBulletinBoards:n,listOfBulletinBoardsWithImage:e,fetchBulletinBoardDetail:d,bulletinBoardDetail:t,deletePost:c,mapListBulletinWithImage:w,updateBulletinBoardDetail:B,addBulletinBoard:h,deleteBulletinBoard:p}});export{I as u};
