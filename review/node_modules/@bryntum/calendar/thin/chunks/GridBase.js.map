{"version":3,"file":"GridBase.js","sources":["../../../../Grid/lib/Grid/util/Location.js","../../../../Grid/lib/Grid/column/Column.js","../../../../Grid/lib/Grid/data/ColumnStore.js","../../../../Grid/lib/Grid/column/WidgetColumn.js","../../../../Grid/lib/Grid/column/CheckColumn.js","../../../../Grid/lib/Grid/column/RowNumberColumn.js","../../../../Grid/lib/Grid/feature/GridFeatureManager.js","../../../../Grid/lib/Grid/feature/CellEdit.js","../../../../Grid/lib/Grid/feature/CellMenu.js","../../../../Grid/lib/Grid/feature/ColumnDragToolbar.js","../../../../Grid/lib/Grid/feature/ColumnPicker.js","../../../../Grid/lib/Grid/feature/ColumnReorder.js","../../../../Grid/lib/Grid/feature/ColumnResize.js","../../../../Grid/lib/Grid/widget/GridFieldFilterPicker.js","../../../../Grid/lib/Grid/widget/GridFieldFilterPickerGroup.js","../../../../Grid/lib/Grid/feature/Filter.js","../../../../Grid/lib/Grid/feature/FilterBar.js","../../../../Grid/lib/Grid/feature/Group.js","../../../../Grid/lib/Grid/feature/HeaderMenu.js","../../../../Grid/lib/Grid/feature/Sort.js","../../../../Grid/lib/Grid/feature/Stripe.js","../../../../Grid/lib/Grid/row/Row.js","../../../../Grid/lib/Grid/view/Bar.js","../../../../Grid/lib/Grid/view/Footer.js","../../../../Grid/lib/Grid/row/RowManager.js","../../../../Grid/lib/Grid/util/GridScroller.js","../../../../Grid/lib/Grid/view/Header.js","../../../../Grid/lib/Grid/view/mixin/GridElementEvents.js","../../../../Grid/lib/Grid/view/mixin/GridFeatures.js","../../../../Grid/lib/Grid/view/mixin/GridNavigation.js","../../../../Grid/lib/Grid/view/mixin/GridResponsive.js","../../../../Grid/lib/Grid/view/mixin/GridSelection.js","../../../../Grid/lib/Grid/view/mixin/GridState.js","../../../../Grid/lib/Grid/util/SubGridScroller.js","../../../../Grid/lib/Grid/view/SubGrid.js","../../../../Grid/lib/Grid/view/mixin/GridSubGrids.js","../../../../Grid/lib/Grid/localization/En.js","../../../../Grid/lib/Grid/view/GridBase.js"],"sourcesContent":["import DomHelper from '../../Core/helper/DomHelper.js';\nimport Widget from '../../Core/widget/Widget.js';\n\n/**\n * @module Grid/util/Location\n */\n\n/**\n * This class encapsulates a reference to a specific navigable grid location.\n *\n * This encapsulates a grid cell based upon the record and column, but in addition, it could represent\n * an actionable location *within a cell** if the {@link #property-target} is not the grid cell in\n * question.\n *\n * A Location is immutable. That is, once instantiated, the record and column which it references\n * cannot be changed. The {@link #function-move} method returns a new instance.\n *\n * A `Location` that encapsulates a cell within the body of a grid will have the following\n * read-only properties:\n *\n *  - grid        : `Grid` The Grid that owns the Location.\n *  - record      : `Model` The record of the row that owns the Location. (`null` if the header).\n *  - rowIndex    : `Number` The zero-based index of the row that owns the Location. (-1 means the header).\n *  - column      : `Column` The Column that owns the Location.\n *  - columnIndex : `Number` The zero-based index of the column that owns the Location.\n *  - cell        : `HTMLElement` The referenced cell element.\n *  - target      : `HTMLElement` The focusable element. This may be the cell, or a child of the cell.\n *\n * If the location is a column *header*, the `record` will be `null` and the `rowIndex` will be `-1`.\n *\n */\nexport default class Location {\n    /**\n     * The grid which this Location references.\n     * @config {Grid.view.Grid} grid\n     */\n    /**\n     * The record which this Location references. (unless {@link #config-rowIndex} is used to configure)\n     * @config {Core.data.Model} record\n     */\n    /**\n     *\n     * The row index which this Location references. (unless {@link #config-record} is used to configure).\n     *\n     * `-1` means the header row, in which case the {@link #config-record} will be `null`.\n     * @config {Number} rowIndex\n     */\n    /**\n     * The Column which this location references. (unless {@link #config-columnIndex} or {@link #config-columnId} is used to configure)\n     * @config {Grid.column.Column} column\n     */\n    /**\n     * The column id which this location references. (unless {@link #config-column} or {@link #config-columnIndex} is used to configure)\n     * @config {String|Number} columnId\n     */\n    /**\n     * The column index which this location references. (unless {@link #config-column} or {@link #config-columnId} is used to configure)\n     * @config {Number} columnIndex\n     */\n    /**\n     * The field of the column index which this location references. (unless another column identifier is used to configure)\n     * @config {String} field\n     */\n\n    /**\n     * Initializes a new Location.\n     * @param {LocationConfig|HTMLElement} location A grid location specifier. This may be:\n     *  * An element inside a grid cell or a grid cell.\n     *  * An object identifying a cell location using the following properties:\n     *    * grid\n     *    * record\n     *    * rowIndex\n     *    * column\n     *    * columnIndex\n     * @function constructor\n     */\n    constructor(location) {\n        // Private usage of init means that we can create an un attached Location\n        // The move method does this.\n        if (location) {\n            // They passed us a Location, so they already know where to go.\n            if (location.isLocation) {\n                return location;\n            }\n\n            // Passed a DOM node.\n            if (location.nodeType === Node.ELEMENT_NODE) {\n                const\n                    grid = Widget.fromElement(location, 'gridbase'),\n                    cell = grid && location.closest(grid.focusableSelector);\n\n                // We are targeted on, or within a cell.\n                if (cell) {\n                    const { dataset } = cell.parentNode;\n\n                    this.init({\n                        grid,\n\n                        // A .b-grid-row will have a data-index\n                        // If it' a column header, we use rowIndex -1\n                        rowIndex : grid.store.includes(dataset.id) ? grid.store.indexOf(dataset.id) : (dataset.index || -1),\n                        columnId : cell.dataset.columnId\n                    });\n                    this.initialTarget = location;\n                }\n            }\n            else {\n                this.init(location);\n            }\n        }\n    }\n\n    init(config) {\n        const me = this;\n\n        //<debug>\n        if (!config.grid) {\n            throw new Error('Grid Location must include grid property');\n        }\n        //</debug>\n        const\n            grid               = me.grid = config.grid,\n            { store, columns } = grid,\n            { visibleColumns } = columns;\n\n        // If we have a target. This is usually only for actionable locations.\n        if (config.target) {\n            me.actionTargets = [me._target = config.target];\n        }\n\n        // Determine our record and rowIndex\n        if (config.record) {\n            me._id = config.record.id;\n        }\n        else if ('id' in config) {\n            me._id = config.id;\n\n            // Null means that the Location is in the grid header, so rowIndex -1\n            if (config.id == null) {\n                me._rowIndex = -1;\n            }\n        }\n        else {\n            const rowIndex = !isNaN(config.row) ? config.row : !isNaN(config.rowIndex) ? config.rowIndex : NaN;\n            //<debug>\n            if (isNaN(rowIndex)) {\n                throw new Error('Grid Location must include either record, or id or rowIndex property');\n            }\n            //</debug>\n            me._rowIndex = Math.max(Math.min(Number(rowIndex), store.count - 1), grid.hideHeaders ? 0 : -1);\n            me._id = store.getAt(me._rowIndex)?.id;\n        }\n        if (!('_rowIndex' in me)) {\n            me._rowIndex = store.indexOf(me.id);\n        }\n\n        // Cache value that we use now. We do not hold a reference to a record\n        me.isSpecialRow = me.record?.isSpecialRow;\n\n        // Determine our column and columnIndex\n        if ('columnId' in config) {\n            me._column = columns.getById(config.columnId);\n        }\n        else if ('field' in config) {\n            me._column = columns.get(config.field);\n        }\n        else {\n            const columnIndex = !isNaN(config.column) ? config.column : !isNaN(config.columnIndex) ? config.columnIndex : NaN;\n\n            if (!isNaN(columnIndex)) {\n                me._columnIndex = Math.min(Number(columnIndex), visibleColumns.length - 1);\n                me._column = visibleColumns[me._columnIndex];\n            }\n            // Fall back to using 'column' property either as index or the Column.\n            // If no column property, use column zero.\n            else {\n                me._column = ('column' in config) ? isNaN(config.column) ? config.column : visibleColumns[config.column] : visibleColumns[0];\n            }\n        }\n        if (!('_columnIndex' in me)) {\n            me._columnIndex = visibleColumns.indexOf(me._column);\n        }\n    }\n\n    // Class identity indicator. Usually added by extending Base, but we don't do that for perf.\n    get isLocation() {\n        return true;\n    }\n\n    equals(other, shallow = false) {\n        const me = this;\n\n        return other?.isLocation &&\n            other.grid   === me.grid &&\n            (\n                // For a more performant check, use the shallow param\n                shallow ? me.id === other.id && me._column === other._column\n                    : (other.record === me.record && other.column === me.column && other.target === me.target)\n            );\n    }\n\n    /**\n     * Yields the row index of this location.\n     * @property {Number}\n     * @readonly\n     */\n    get rowIndex() {\n        const\n            { _id }   = this,\n            { store } = this.grid;\n\n        // Return the up to date row index for our record\n        return store.includes(_id) ? store.indexOf(_id) : Math.min(this._rowIndex, store.count - 1);\n    }\n\n    /**\n     * Used by GridNavigation.\n     * @private\n     */\n    get visibleRowIndex() {\n        const\n            { rowManager } = this.grid,\n            { rowIndex }   = this;\n\n        return rowIndex === -1 ? rowIndex : Math.max(Math.min(rowIndex, rowManager.lastFullyVisibleTow.dataIndex), rowManager.firstFullyVisibleTow.dataIndex);\n    }\n\n    /**\n     * Yields `true` if the cell and row are selectable.\n     *\n     * That is if the record is present in the grid's store and it's not a group summary or group header record.\n     * @property {Boolean}\n     * @readonly\n     */\n    get isSelectable() {\n        return this.grid.store.includes(this._id) && !this.isSpecialRow;\n    }\n\n    get record() {\n        // -1 means the header row\n        if (this._rowIndex > -1) {\n            const { store } = this.grid;\n\n            // Location's record no longer in store; fall back to record at same index.\n            if (!store.includes(this._id)) {\n                return store.getAt(this._rowIndex);\n            }\n\n            return store.getById(this._id);\n        }\n    }\n\n    get id() {\n        return this._id;\n    }\n\n    get column() {\n        const { visibleColumns } = this.grid.columns;\n\n        // Location's column no longer visible; fall back to column at same index.\n        if (!visibleColumns?.includes(this._column)) {\n            return visibleColumns?.[this.columnIndex];\n        }\n\n        return this._column;\n    }\n\n    get columnId() {\n        return this.column?.id;\n    }\n\n    get columnIndex() {\n        return Math.min(this._columnIndex, this.grid.columns.visibleColumns?.length - 1);\n    }\n\n    /**\n     * Returns a __*new *__ `Location` instance having moved from the current location in the\n     * mode specified.\n     * @param {Number} where Where to move from this Location. May be:\n     *\n     *  - `Location.UP`\n     *  - `Location.NEXT_CELL`\n     *  - `Location.DOWN`\n     *  - `Location.PREV_CELL`\n     *  - `Location.FIRST_COLUMN`\n     *  - `Location.LAST_COLUMN`\n     *  - `Location.FIRST_CELL`\n     *  - `Location.LAST_CELL`\n     *  - `Location.PREV_PAGE`\n     *  - `Location.NEXT_PAGE`\n     * @returns {Grid.util.Location} A Location object encapsulating the target location.\n     */\n    move(where) {\n        const\n            me        = this,\n            {\n                record,\n                column,\n                grid\n            }         = me,\n            { store } = grid,\n            columns   = grid.columns.visibleColumns,\n            result    = new Location();\n\n        let rowIndex    = store.includes(record)   ? store.indexOf(record)   : me.rowIndex,\n            columnIndex = columns.includes(column) ? columns.indexOf(column) : me.columnIndex;\n\n        const\n            rowMin        = grid.hideHeaders ? 0 : -1,\n            rowMax        = store.count - 1,\n            colMax        = columns.length - 1,\n            atFirstRow    = rowIndex === rowMin,\n            atLastRow     = rowIndex === rowMax,\n            atFirstColumn = columnIndex === 0,\n            atLastColumn  = columnIndex === colMax;\n\n        switch (where) {\n            case Location.PREV_CELL:\n                if (atFirstColumn) {\n                    if (!atFirstRow) {\n                        columnIndex = colMax;\n                        rowIndex--;\n                    }\n                }\n                else {\n                    columnIndex--;\n                }\n                break;\n            case Location.NEXT_CELL:\n                if (atLastColumn) {\n                    if (!atLastRow) {\n                        columnIndex = 0;\n                        rowIndex++;\n                    }\n                }\n                else {\n                    columnIndex++;\n                }\n                break;\n            case Location.UP:\n                if (!atFirstRow) {\n                    rowIndex--;\n                }\n                break;\n            case Location.DOWN:\n                if (!atLastRow) {\n                    // From the col header, we drop to the topmost fully visible row.\n                    if (rowIndex === -1) {\n                        rowIndex = grid.rowManager.firstFullyVisibleRow.dataIndex;\n                    }\n                    else {\n                        rowIndex++;\n                    }\n                }\n                break;\n            case Location.FIRST_COLUMN:\n                columnIndex = 0;\n                break;\n            case Location.LAST_COLUMN:\n                columnIndex = colMax;\n                break;\n            case Location.FIRST_CELL:\n                rowIndex = rowMin;\n                columnIndex = 0;\n                break;\n            case Location.LAST_CELL:\n                rowIndex = rowMax;\n                columnIndex = colMax;\n                break;\n            case Location.PREV_PAGE:\n                rowIndex = Math.max(rowMin, rowIndex - Math.floor(grid.scrollable.clientHeight / grid.rowHeight));\n                break;\n            case Location.NEXT_PAGE:\n                rowIndex = Math.min(rowMax, rowIndex + Math.floor(grid.scrollable.clientHeight / grid.rowHeight));\n                break;\n        }\n\n        // Set the calculated coordinates in the result.\n        result.init({\n            grid,\n            rowIndex,\n            columnIndex\n        });\n\n        return result;\n    }\n\n    /**\n     * The cell DOM element which this Location references.\n     * @property {HTMLElement}\n     * @readonly\n     */\n    get cell() {\n        const\n            me = this,\n            {\n                grid,\n                id,\n                _cell\n            }  = me;\n\n        // Property value set\n        if (_cell) {\n            return _cell;\n        }\n\n        // On a header cell\n        if (id == null) {\n            return grid.columns.getById(me.columnId)?.element;\n        }\n        else {\n            const { row } = me;\n\n            if (row) {\n                return row.getCell(me.columnId) || row.getCell(grid.columns.getAt(me.columnIndex)?.id);\n            }\n        }\n    }\n\n    get row() {\n        // Use our record ID by preference, but fall back to our row index if not present\n        return this.grid.getRowById(this.id) || this.grid.getRow(this.rowIndex);\n    }\n\n    /**\n     * The DOM element which encapsulates the focusable target of this Location.\n     *\n     * This is usually the {@link #property-cell}, but if this is an actionable location, this\n     * may be another DOM element within the cell.\n     * @property {HTMLElement}\n     * @readonly\n     */\n    get target() {\n        const\n            { cell, _target }   = this,\n            { focusableFinder } = this.grid;\n\n        // We might be asked for our focusElement before we're fully rendered and painted.\n        if (cell) {\n            // Location was created in disableActionable mode with the target\n            // explicitly directed to the cell.\n            if (_target) {\n                return _target;\n            }\n            focusableFinder.currentNode = this.grid.focusableFinderCell = cell;\n\n            return focusableFinder.nextNode() || cell;\n        }\n    }\n\n    /**\n     * This property is `true` if the focus target is not the cell itself.\n     * @property {Boolean}\n     * @readonly\n     */\n    get isActionable() {\n        const\n            { cell, _target } = this,\n            containsFocus     = cell?.compareDocumentPosition(DomHelper.getActiveElement(cell)) & Node.DOCUMENT_POSITION_CONTAINED_BY;\n\n        // The actual target may be inside the cell, or just positioned to *appear* inside the cell\n        // such as event/task rendering.\n        return Boolean(containsFocus || (_target && _target !== this.cell));\n    }\n\n    /**\n     * This property is `true` if this location represents a column header.\n     * @property {Boolean}\n     * @readonly\n     */\n    get isColumnHeader() {\n        return this.cell && this.rowIndex === -1;\n    }\n\n    /**\n     * This property is `true` if this location represents a cell in the grid body.\n     * @property {Boolean}\n     * @readonly\n     */\n    get isCell() {\n        return this.cell && this.record;\n    }\n}\n\nLocation.UP           = 1;\nLocation.NEXT_CELL    = 2;\nLocation.DOWN         = 3;\nLocation.PREV_CELL    = 4;\nLocation.FIRST_COLUMN = 5;\nLocation.LAST_COLUMN  = 6;\nLocation.FIRST_CELL   = 7;\nLocation.LAST_CELL    = 8;\nLocation.PREV_PAGE    = 9;\nLocation.NEXT_PAGE    = 10;\n","import Model from '../../Core/data/Model.js';\nimport Localizable from '../../Core/localization/Localizable.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport Events from '../../Core/mixin/Events.js';\nimport Widget from '../../Core/widget/Widget.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\nimport Config from '../../Core/Config.js';\nimport Location from '../util/Location.js';\n\n/**\n * @module Grid/column/Column\n */\n\nconst validWidth = (value) => ((typeof value === 'number') || value?.endsWith('px'));\n\n/**\n * Base class for other column types, used if no type is specified on a column.\n *\n * Default editor is a {@link Core.widget.TextField}.\n *\n * ```javascript\n * const grid = new Grid({\n *   columns : [{\n *     field : 'name',\n *     text  : 'Name'\n *   }, {\n *     text  : 'Hobby',\n *     field : 'others.hobby', // reading nested field data\n *   }, {\n *     type  : 'number', // Will use NumberColumn\n *     field : 'age',\n *     text  : 'Age'\n *   }]\n * });\n * ```\n *\n * ## Column types\n *\n * Grid ships with multiple different column types. Which type to use for a column is specified by the `type` config.\n * The built-in types are:\n *\n * * {@link Grid.column.ActionColumn action} - displays actions (clickable icons) in the cell.\n * * {@link Grid.column.AggregateColumn aggregate} - a column, which, when used as part of a Tree, aggregates the values\n *   of this column's descendants using a configured function which defaults to `sum`.\n * * {@link Grid.column.CheckColumn check} - displays a checkbox in the cell.\n * * {@link Grid.column.DateColumn date} - displays a date in the specified format.\n * * {@link Grid.column.NumberColumn number} - a column for showing/editing numbers.\n * * {@link Grid.column.PercentColumn percent} - displays a basic progress bar.\n * * {@link Grid.column.RatingColumn rating} - displays a star rating.\n * * {@link Grid.column.RowNumberColumn rownumber} - displays the row number in each cell.\n * * {@link Grid.column.TemplateColumn template} - uses a template for cell content.\n * * {@link Grid.column.TimeColumn time} - displays a time in the specified format.\n * * {@link Grid.column.TreeColumn tree} - displays a tree structure when using the {@link Grid.feature.Tree tree}\n *   feature.\n * * {@link Grid.column.WidgetColumn widget} - displays widgets in the cells.\n *\n * ## Grouped columns / headers\n *\n * You can group headers by defining parent and children columns. A group can be dragged as a whole, or users can drag\n * individual columns between groups. The same applies to column visibility using the column picker in the header menu,\n * a group can be toggled as a whole or each column individually.\n *\n * ```javascript\n * const grid = new Grid({\n *     {\n *             text     : 'Parent',\n *             children : [\n *                 { text : 'Child 1', field : 'field1', flex : 1 },\n *                 { text : 'Child 2', field : 'field2', flex : 1 }\n *             ]\n *         },\n *         ...\n * }\n * ```\n *\n * {@inlineexample Grid/column/ColumnGrouped.js}\n *\n * ## Collapsible columns\n *\n * By configuring a parent column with `collapsible: true` it is made collapsible. When collapsing all child columns\n * except the first one are hidden. This behaviour is configurable using the {@link #config-collapseMode} config. To\n * make a column start collapsed, set the {@link #config-collapsed} config to `true`.\n *\n * {@inlineexample Grid/column/ColumnCollapse.js}\n *\n * ## Cell renderers\n *\n * You can affect the contents and styling of cells in a column using a\n * {@link Grid.column.Column#config-renderer} function.\n *\n * ```javascript\n * const grid = new Grid({\n *   columns : [\n *   ...\n *     {\n *       field      : 'approved',\n *       text       : 'Approved',\n *       htmlEncode : false, // allow to use HTML code\n *       renderer({ value }) {\n *         return value === true ? '<b>Yes</b>' : '<i>No</i>';\n *       }\n *     }\n *     ...\n *     ]\n * });\n * ```\n *\n * ## Menus\n *\n * You can add custom items to the context menu for a columns header and for its cells, using\n * {@link Grid.column.Column#config-headerMenuItems} and {@link Grid.column.Column#config-cellMenuItems}. Here is an\n * example:\n *\n * ```javascript\n * const grid = new Grid({\n *   columns : [\n *     ...\n *     {\n *       type  : 'number',\n *       field : 'age',\n *       text  : 'Age',\n *       headerMenuItems: [{\n *           text : 'My unique header item',\n *           icon : 'b-fa b-fa-paw',\n *           onItem() { console.log('item clicked'); }\n *       }],\n *       cellMenuItems: [{\n *           text : 'My unique cell item',\n *           icon : 'b-fa b-fa-plus',\n *           onItem() { console.log('item clicked'); }\n *       }]\n *     }\n *   ...\n *   ]\n * });\n * ```\n *\n * @extends Core/data/Model\n * @classType column\n * @mixes Core/mixin/Events\n * @mixes Core/localization/Localizable\n * @column\n */\nexport default class Column extends Model.mixin(Events, Localizable) {\n    static get $name() {\n        return 'Column';\n    }\n\n    /**\n     * Column name alias which you can use in the `columns` array of a Grid.\n     *\n     * ```javascript\n     * class MyColumn extends Column {\n     *     static get type() {\n     *        return 'mycolumn';\n     *     }\n     * }\n     * ```\n     *\n     * ```javascript\n     * const grid = new Grid({\n     *    columns : [\n     *       { type : 'mycolumn', text : 'The column', field : 'someField', flex : 1 }\n     *    ]\n     * });\n     * ```\n     *\n     * @static\n     * @member {String} type\n     */\n    static get type() {\n        return 'column';\n    }\n\n    //region Config\n\n    /**\n     * Default settings for the column, applied in constructor. None by default, override in subclass.\n     * @member {Object} defaults\n     * @returns {Object}\n     * @readonly\n     */\n\n    static get fields() {\n        return [\n            //region Common\n\n            'type',\n\n            /**\n             * Header text\n             * @prp {String} text\n             * @category Common\n             */\n            'text',\n\n            /**\n             * The {@link Core.data.field.DataField#config-name} of the {@link Core.data.Model data model} field to read\n             * data from.\n             * @config {String} field\n             * @category Common\n             */\n            'field',\n\n            // NOTE: This is duplicated in WidgetColumn and partly in TreeColumn so remember to change there too if\n            // changing the signature of this function\n            /**\n             * Renderer function, used to format and style the content displayed in the cell. Return the cell text you\n             * want to display. Can also affect other aspects of the cell, such as styling.\n             *\n             * **NOTE:** If you mutate `cellElement`, and you want to prevent cell content from being reset during\n             * rendering, please return `undefined` from the renderer (or just omit the `return` statement) and make\n             * sure that the {@link #config-alwaysClearCell} config is set to `false`.\n             *\n             * ```javascript\n             * new Grid({\n             *     columns : [\n             *         // Returns an empty string if status field value is undefined\n             *         { text : 'Status', renderer : ({ record }) => record.status ?? '' },\n             *\n             *         // From Grid v6.0 there is no need for the undefined check\n             *         // { text : 'Status', renderer : ({ record }) => record.status }\n             *     ]\n             * });\n             * ```\n             *\n             * You can also return a {@link Core.helper.DomHelper#typedef-DomConfig} object describing the markup\n             * ```javascript\n             * new Grid({\n             *     columns : [\n             *         {\n             *              text : 'Status',\n             *              renderer : ({ record }) => {\n             *                  return {\n             *                      class : 'myClass',\n             *                      children : [\n             *                          {\n             *                              tag : 'i',\n             *                              class : 'fa fa-pen'\n             *                          },\n             *                          {\n             *                              tag : 'span',\n             *                              html : record.name\n             *                          }\n             *                      ]\n             *                  };\n             *              }\n             *         }\n             *     ]\n             * });\n             * ```\n             *\n             * You can modify the row element too from inside a renderer to add custom CSS classes:\n             *\n             * ```javascript\n             * new Grid({\n             *     columns : [\n             *         {\n             *             text     : 'Name',\n             *             renderer : ({ record, row }) => {\n             *                // Add special CSS class to new rows that have not yet been saved\n             *               row.cls.newRow = record.isPhantom;\n             *\n             *               return record.name;\n             *         }\n             *     ]\n             * });\n             * ```\n             *\n             * @param {Object} renderData Object containing renderer parameters\n             * @param {HTMLElement} [renderData.cellElement] Cell element, for adding CSS classes, styling etc.\n             * Can be `null` in case of export\n             * @param {*} renderData.value Value to be displayed in the cell\n             * @param {Core.data.Model} renderData.record Record for the row\n             * @param {Grid.column.Column} renderData.column This column\n             * @param {Grid.view.Grid} renderData.grid This grid\n             * @param {Grid.row.Row} [renderData.row] Row object. Can be null in case of export. Use the\n             * {@link Grid.row.Row#function-assignCls row's API} to manipulate CSS class names.\n             * @param {Object} [renderData.size] Set `size.height` to specify the desired row height for the current\n             * row. Largest specified height is used, falling back to configured {@link Grid/view/Grid#config-rowHeight}\n             * in case none is specified. Can be null in case of export\n             * @param {Number} [renderData.size.height] Set this to request a certain row height\n             * @param {Number} [renderData.size.configuredHeight] Row height that will be used if none is requested\n             * @param {Boolean} [renderData.isExport] True if record is being exported to allow special handling during\n             * export.\n             * @param {Boolean} [renderData.isMeasuring] True if the column is being measured for a `resizeToFitContent`\n             * call. In which case an advanced renderer might need to take different actions.\n             * @config {Function} renderer\n             * @category Common\n             */\n            'renderer',\n\n            //'reactiveRenderer',\n\n            /**\n             * Column width. If value is Number then width is in pixels\n             * @config {Number|String} width\n             * @category Common\n             */\n            'width',\n\n            /**\n             * Column width as a flex weight. All columns with flex specified divide the available space (after\n             * subtracting fixed widths) between them according to the flex value. Columns that have flex 2 will be\n             * twice as wide as those with flex 1 (and so on)\n             * @prp {Number} flex\n             * @category Common\n             */\n            'flex',\n\n            /**\n             * This config sizes a column to fits its content. It is used instead of `width` or `flex`.\n             *\n             * This config requires the {@link Grid.feature.ColumnAutoWidth} feature which responds to changes in the\n             * grid's store and synchronizes the widths' of all `autoWidth` columns.\n             *\n             * If this config is not a Boolean value, it is passed as the only argument to the `resizeToFitContent`\n             * method to constrain the column's width.\n             *\n             * @config {Boolean|Number|Number[]} autoWidth\n             * @category Common\n             */\n            'autoWidth',\n\n            /**\n             * This config enables automatic height for all cells in this column. It is achieved by measuring the height\n             * a cell after rendering it to DOM, and then sizing the row using that height (if it is greater than other\n             * heights used for the row).\n             *\n             * Heads up if you render your Grid on page load, if measurement happens before the font you are using is\n             * loaded you might get slightly incorrect heights. For browsers that support it we detect that\n             * and remeasure when fonts are available.\n             *\n             * **NOTE:** Enabling this config comes with a pretty big performance hit. To maintain good performance,\n             * we recommend not using it. You can still set the height of individual rows manually, either through\n             * {@link Grid.data.GridRowModel#field-rowHeight data} or via {@link #config-renderer renderers}.\n             *\n             * Also note that this setting only works fully as intended with non-flex columns.\n             *\n             * Rows will always be at least {@link Grid.view.Grid#config-rowHeight} pixels tall\n             * even if an autoHeight cell contains no data.\n             *\n             * Manually setting a height from a {@link #config-renderer} in this column will take precedence over this\n             * config.\n             *\n             * @config {Boolean} autoHeight\n             * @category Common\n             */\n            'autoHeight',\n\n            /**\n             * Mode to use when measuring the contents of this column in calls to {@link #function-resizeToFitContent}.\n             * Available modes are:\n             *\n             * * 'exact'       - Most precise, renders and measures all cells (Default, slowest)\n             * * 'textContent' - Renders all cells but only measures the one with the longest `textContent`\n             * * 'value'       - Renders and measures only the cell with the longest data (Fastest)\n             * * 'none'/falsy  - Resize to fit content not allowed, a call does nothing\n             *\n             * @config {'exact'|'textContent'|'value'|'none'|null} fitMode\n             * @default 'exact'\n             * @category Common\n             */\n            { name : 'fitMode', defaultValue : 'exact' },\n\n            //endregion\n\n            //region Interaction\n\n            /**\n             * A config object used to create the input field which will be used for editing cells in the\n             * column. Used when {@link Grid.feature.CellEdit} feature is enabled. The Editor refers to\n             * {@link #config-field} for a data source.\n             *\n             * Configure this as `null` to prevent cell editing in this column.\n             *\n             * All subclasses of {@link Core.widget.Field} can be used as editors. The most popular are:\n             * - {@link Core.widget.TextField}\n             * - {@link Core.widget.NumberField}\n             * - {@link Core.widget.DateField}\n             * - {@link Core.widget.TimeField}\n             * - {@link Core.widget.Combo}\n             *\n             * If record has method set + capitalized field, method will be called, e.g. if record has method named\n             * `setFoobar` and the {@link #config-field} is `foobar`, then instead of `record.foobar = value`,\n             * `record.setFoobar(value)` will be called.\n             *\n             * @config {Boolean|String|InputFieldConfig|Core.widget.Field} editor\n             * @category Interaction\n             */\n            { name : 'editor', defaultValue : {} },\n\n            /**\n             * A config object used to configure an {@link Core.widget.Editor} which contains this Column's\n             * {@link #config-editor input field} if {@link Grid.feature.CellEdit} feature is enabled.\n             * @config {EditorConfig} cellEditor\n             * @category Interaction\n             */\n            'cellEditor',\n\n            /**\n             * A function which is called when a cell edit is requested to finish.\n             *\n             * This may be an `async` function which performs complex validation. The edit will not\n             * complete until it returns `false` to mean the edit cannot be finished, or `true` to go\n             * ahead and complete.\n             *\n             * @param {Object} context An object describing the state of the edit at completion request time.\n             * @param {Core.widget.Field} context.inputField The field configured as the column's `editor`.\n             * @param {Core.data.Model} context.record The record being edited.\n             * @param {*} context.oldValue The old value of the cell.\n             * @param {*} context.value The new value of the cell.\n             * @param {Grid.view.Grid} context.grid The host grid.\n             * @param {Object} context.editorContext The {@link Grid.feature.CellEdit} context object.\n             * @param {Grid.column.Column} context.editorContext.column The column being edited.\n             * @param {Core.data.Model} context.editorContext.record The record being edited.\n             * @param {HTMLElement} context.editorContext.cell The cell element hosting the editor.\n             * @param {Core.widget.Editor} context.editorContext.editor The floating Editor widget which is hosting the\n             * input field.\n             * @config {Function} finalizeCellEdit\n             * @category Interaction\n             */\n            'finalizeCellEdit',\n\n            /**\n             * Setting this option means that pressing the `ESCAPE` key after editing the field will\n             * revert the field to the value it had when the edit began. If the value is _not_ changed\n             * from when the edit started, the input field's {@link Core.widget.Field#config-clearable}\n             * behaviour will be activated. Finally, the edit will be canceled.\n             * @config {Boolean} revertOnEscape\n             * @default true\n             * @category Interaction\n             */\n            { name : 'revertOnEscape', defaultValue : true },\n\n            /**\n             * How to handle a request to complete a cell edit in this column if the field is invalid.\n             * There are three choices:\n             *  - `block` The default. The edit is not exited, the field remains focused.\n             *  - `allow` Allow the edit to be completed.\n             *  - `revert` The field value is reverted and the edit is completed.\n             * @config {'block'|'allow'|'revert'} invalidAction\n             * @default 'block'\n             * @category Interaction\n             */\n            { name : 'invalidAction', defaultValue : 'block' },\n\n            /**\n             * Allow sorting of data in the column. You can pass true/false to enable/disable sorting, or provide a\n             * custom sorting function, or a config object for a {@link Core.util.CollectionSorter}\n             *\n             * ```javascript\n             * const grid = new Grid({\n             *     columns : [\n             *          {\n             *              // Disable sorting for this column\n             *              sortable : false\n             *          },\n             *          {\n             *              field : 'name',\n             *              // Custom sorting for this column\n             *              sortable(user1, user2) {\n             *                  return user1.name < user2.name ? -1 : 1;\n             *              }\n             *          },\n             *          {\n             *              // A config object for a Core.util.CollectionSorter\n             *              sortable : {\n             *                  property         : 'someField',\n             *                  direction        : 'DESC',\n             *                  useLocaleCompare : 'sv-SE'\n             *              }\n             *          }\n             *     ]\n             * });\n             * ```\n             * When providing a custom sorting function, if the sort feature is configured with\n             * `prioritizeColumns : true` that function will also be used for programmatic sorting of the store:\n             *\n             * ```javascript\n             * const grid = new Grid({\n             *     features : {\n             *       sort : {\n             *           prioritizeColumns : true\n             *       }\n             *     },\n             *\n             *     columns : [\n             *          {\n             *              field : 'name',\n             *              // Custom sorting for this column\n             *              sortable(user1, user2) {\n             *                  return user1.name < user2.name ? -1 : 1;\n             *              }\n             *          }\n             *     ]\n             * });\n             *\n             * // Will use sortable() from the column definition above\n             * grid.store.sort('name');\n             * ```\n             *\n             * @config {Boolean|Function|CollectionSorterConfig} sortable\n             * @default true\n             * @category Interaction\n             */\n            {\n                name         : 'sortable',\n                defaultValue : true,\n                // Normalize function/object forms\n                convert(value, column) {\n                    if (!value) {\n                        return false;\n                    }\n\n                    if (value === true) {\n                        return true;\n                    }\n\n                    const sorter = {};\n\n                    if (typeof value === 'function') {\n                        sorter.originalSortFn = value;\n                        // Scope for sortable() expected to be the column\n                        sorter.sortFn = value.bind(column);\n                    }\n                    else if (typeof value === 'object') {\n                        Object.assign(sorter, value);\n\n                        if (sorter.fn) {\n                            sorter.sortFn = sorter.fn;\n                            delete sorter.fn;\n                        }\n                    }\n\n                    return sorter;\n                }\n            },\n\n            /**\n             * Allow searching in the column (respected by QuickFind and Search features)\n             * @config {Boolean} searchable\n             * @default true\n             * @category Interaction\n             */\n            { name : 'searchable', defaultValue : true },\n\n            /**\n             * If `true`, this column will show a collapse/expand icon in its header, only applicable for parent columns\n             * @config {Boolean} collapsible\n             * @default false\n             * @category Interaction\n             */\n            { name : 'collapsible', defaultValue : false },\n\n            /**\n             * The collapsed state of this column, only applicable for parent columns\n             * @config {Boolean} collapsed\n             * @default false\n             * @category Interaction\n             */\n            { name : 'collapsed', defaultValue : false },\n\n            /**\n             * The collapse behavior when collapsing a parent column. Specify \"toggleAll\" or \"showFirst\".\n             * * \"showFirst\" toggles visibility of all but the first columns.\n             * * \"toggleAll\" toggles all children, useful if you have a special initially hidden column which gets shown\n             * in collapsed state.\n             * @config {String} collapseMode\n             * @default 'showFirst'\n             * @category Interaction\n             */\n            { name : 'collapseMode' },\n\n            /**\n             * Allow filtering data in the column (if {@link Grid.feature.Filter} or {@link Grid.feature.FilterBar}\n             * feature is enabled).\n             *\n             * Also allows passing a custom filtering function that will be called for each record with a single\n             * argument of format `{ value, record, [operator] }`. Returning `true` from the function includes the\n             * record in the filtered set.\n             *\n             * Configuration object may be used for {@link Grid.feature.FilterBar} feature to specify `filterField`. See\n             * an example in the code snippet below or check {@link Grid.feature.FilterBar} page for more details.\n             *\n             * ```\n             * const grid = new Grid({\n             *     columns : [\n             *          {\n             *              field : 'name',\n             *              // Disable filtering for this column\n             *              filterable : false\n             *          },\n             *          {\n             *              field : 'age',\n             *              // Custom filtering for this column\n             *              filterable: ({ value, record }) => Math.abs(record.age - value) < 10\n             *          },\n             *          {\n             *              field : 'start',\n             *              // Changing default field type\n             *              filterable: {\n             *                  filterField : {\n             *                      type : 'datetime'\n             *                  }\n             *              }\n             *          },\n             *          {\n             *              field : 'city',\n             *              // Filtering for a value out of a list of values\n             *              filterable: {\n             *                  filterField : {\n             *                      type  : 'combo',\n             *                      value : '',\n             *                      items : [\n             *                          'Paris',\n             *                          'Dubai',\n             *                          'Moscow',\n             *                          'London',\n             *                          'New York'\n             *                      ]\n             *                  }\n             *              }\n             *          },\n             *          {\n             *              field : 'score',\n             *              filterable : {\n             *                  // This filter fn doesn't return 0 values as matching filter 'less than'\n             *                  filterFn : ({ record, value, operator, property }) => {\n             *                      switch (operator) {\n             *                          case '<':\n             *                              return record[property] === 0 ? false : record[property] < value;\n             *                          case '=':\n             *                              return record[property] == value;\n             *                          case '>':\n             *                              return record[property] > value;\n             *                      }\n             *                  }\n             *              }\n             *          }\n             *     ]\n             * });\n             * ```\n             *\n             * When providing a custom filtering function, if the filter feature is configured with\n             * `prioritizeColumns : true` that function will also be used for programmatic filtering of the store:\n             *\n             * ```javascript\n             * const grid = new Grid({\n             *     features : {\n             *         filter : {\n             *             prioritizeColumns : true\n             *         }\n             *     },\n             *\n             *     columns : [\n             *          {\n             *              field : 'age',\n             *              // Custom filtering for this column\n             *              filterable: ({ value, record }) => Math.abs(record.age - value) < 10\n             *          }\n             *     ]\n             * });\n             *\n             * // Will use filterable() from the column definition above\n             * grid.store.filter({\n             *     property : 'age',\n             *     value    : 50\n             * });\n             * ```\n             *\n             * To use custom `FilterField` combo `store` it should contain one of these\n             * {@link Core.data.Store#config-data} or {@link Core.data.AjaxStore#config-readUrl} configs.\n             * Otherwise combo will get data from owner Grid store.\n             *\n             * ```javascript\n             * const grid = new Grid({\n             *     columns : [\n             *          {\n             *              field : 'name',\n             *              filterable: {\n             *                  filterField {\n             *                      type  : 'combo',\n             *                      store : new Store({\n             *                          data : ['Adam', 'Bob', 'Charlie']\n             *                      })\n             *                  }\n             *              }\n             *          }\n             *     ]\n             * });\n             * ```\n             *\n             * or\n             *\n             * ```javascript\n             * const grid = new Grid({\n             *     columns : [\n             *          {\n             *              field : 'name',\n             *              filterable: {\n             *                  filterField : {\n             *                     type  : 'combo',\n             *                     store : new AjaxStore({\n             *                         readUrl  : 'data/names.json',\n             *                         autoLoad : true\n             *                     })\n             *                  }\n             *              }\n             *          }\n             *     ]\n             * });\n             * ```\n             *\n             * @config {Boolean|Function|Object} filterable\n             * @default true\n             * @category Interaction\n             */\n            {\n                name         : 'filterable',\n                defaultValue : true,\n                // Normalize function/object forms\n                convert(value) {\n                    if (!value) {\n                        return false;\n                    }\n\n                    if (value === true) {\n                        return true;\n                    }\n\n                    const filter = {\n                        columnOwned : true\n                    };\n\n                    if (typeof value === 'function') {\n                        filter.filterFn = value;\n                    }\n                    else if (typeof value === 'object') {\n                        Object.assign(filter, value);\n                    }\n\n                    return filter;\n                }\n            },\n\n            /**\n             * Setting this flag to `true` will prevent dropping child columns into a group column\n             * @config {Boolean} sealed\n             * @default false\n             * @category Interaction\n             */\n            { name : 'sealed' },\n\n            /**\n             * Allow column visibility to be toggled through UI\n             * @config {Boolean} hideable\n             * @default true\n             * @category Interaction\n             */\n            { name : 'hideable', defaultValue : true },\n\n            /**\n             * Set to false to prevent this column header from being dragged\n             * @config {Boolean} draggable\n             * @category Interaction\n             */\n            { name : 'draggable', defaultValue : true },\n\n            /**\n             * Set to false to prevent grouping by this column\n             * @config {Boolean} groupable\n             * @category Interaction\n             */\n            { name : 'groupable', defaultValue : true },\n\n            /**\n             * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.\n             * @config {Boolean} resizable\n             * @default true\n             * @category Interaction\n             */\n            { name : 'resizable', defaultValue : true },\n\n            //endregion\n\n            //region Rendering\n\n            /**\n             * Renderer function for group headers (when using Group feature).\n             * @param {Object} renderData\n             * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc.\n             * @param {*} renderData.groupRowFor Current group value\n             * @param {Core.data.Model} renderData.record Record for the row\n             * @param {Core.data.Model[]} renderData.groupRecords Records in the group\n             * @param {Grid.column.Column} renderData.column Current rendering column\n             * @param {Grid.column.Column} renderData.groupColumn Column that the grid is grouped by\n             * @param {Number} renderData.count Number of records in the group\n             * @param {Grid.view.Grid} renderData.grid This grid\n             * @config {Function} groupRenderer\n             * @returns {String} The header grouping text\n             * @category Rendering\n             */\n            'groupRenderer',\n\n            /**\n             * Renderer function for the column header.\n             * @param {Object} renderData\n             * @param {Grid.column.Column} renderData.column This column\n             * @param {HTMLElement} renderData.headerElement The header element\n             * @config {Function} headerRenderer\n             * @category Rendering\n             */\n            'headerRenderer',\n\n            /**\n             * A tooltip string to show when hovering the column header, or a config object which can\n             * reconfigure the shared tooltip by setting boolean, numeric and string config values.\n             * @config {String|TooltipConfig} tooltip\n             * @category Rendering\n             */\n            'tooltip',\n\n            /**\n             * Renderer function for the cell tooltip (used with {@link Grid.feature.CellTooltip} feature).\n             * Specify `false` to disable tooltip for this column.\n             * @param {HTMLElement} cellElement Cell element\n             * @param {Core.data.Model} record Record for cell row\n             * @param {Grid.column.Column} column Cell column\n             * @param {Grid.feature.CellTooltip} cellTooltip Feature instance, used to set tooltip content async\n             * @param {MouseEvent} event The event that triggered the tooltip\n             * @config {Function|Boolean} tooltipRenderer\n             * @category Rendering\n             */\n            'tooltipRenderer',\n\n            /**\n             * CSS class added to each cell in this column\n             * @prp {String} cellCls\n             * @category Rendering\n             */\n            'cellCls',\n\n            /**\n             * CSS class added to the header of this column\n             * @config {String} cls\n             * @category Rendering\n             */\n            'cls',\n\n            /**\n             * Icon to display in header. Specifying an icon will render a `<i>` element with the icon as value for the\n             * class attribute\n             * @prp {String} icon\n             * @category Rendering\n             */\n            'icon',\n\n            //endregion\n\n            //region Layout\n\n            /**\n             * Text align. Accepts `'left'`/`'center'`/`'right'` or direction neutral `'start'`/`'end'`\n             * @config {'left'|'center'|'right'|'start'|'end'} align\n             * @category Layout\n             */\n            'align',\n\n            /**\n             * Column minimal width. If value is `Number`, then minimal width is in pixels\n             * @config {Number|String} minWidth\n             * @default 60\n             * @category Layout\n             */\n            { name : 'minWidth', defaultValue : 60 },\n\n            /**\n             * Column maximal width. If value is Number, then maximal width is in pixels\n             * @config {Number|String} maxWidth\n             * @category Common\n             */\n            'maxWidth',\n\n            /**\n             * Columns hidden state. Specify `true` to hide the column, `false` to show it.\n             * @prp {Boolean} hidden\n             * @category Layout\n             */\n            { name : 'hidden', defaultValue : false },\n\n            /**\n             * Convenient way of putting a column in the \"locked\" region. Same effect as specifying region: 'locked'.\n             * If you have defined your own regions (using {@link Grid.view.Grid#config-subGridConfigs}) you should use\n             * {@link #config-region} instead of this one.\n             * @config {Boolean} locked\n             * @default false\n             * @category Layout\n             */\n            { name : 'locked' },\n\n            /**\n             * Region (part of the grid, it can be configured with multiple) where to display the column. Defaults to\n             * {@link Grid.view.Grid#config-defaultRegion}.\n             *\n             * A column under a grouped header automatically belongs to the same region as the grouped header.\n             *\n             * @config {String} region\n             * @category Layout\n             */\n            { name : 'region' },\n\n            /**\n             * Specify `true` to merge cells within the column whose value match between rows, making the first\n             * occurrence of the value span multiple rows.\n             *\n             * Only applies when using the {@link Grid/feature/MergeCells MergeCells feature}.\n             *\n             * This setting can also be toggled using the column header menu.\n             *\n             * @config {Boolean} mergeCells\n             * @category Merge cells\n             */\n            { name : 'mergeCells', type : 'boolean' },\n\n            /**\n             * Set to `false` to prevent merging cells in this column using the column header menu.\n             *\n             * Only applies when using the {@link Grid/feature/MergeCells MergeCells feature}.\n             *\n             * @config {Boolean} mergeable\n             * @default true\n             * @category Merge cells\n             */\n            { name : 'mergeable', type : 'boolean', defaultValue : true },\n\n            /**\n             * An empty function by default, but provided so that you can override it. This function is called each time\n             * a merged cell is rendered. It allows you to manipulate the DOM config object used before it is synced to\n             * DOM, thus giving you control over styling and contents.\n             *\n             * NOTE: The function is intended for formatting, you should not update records in it since updating records\n             * triggers another round of rendering.\n             *\n             * ```javascript\n             * const grid = new Grid({\n             *   columns : [\n             *     {\n             *       field      : 'project',\n             *       text       : 'Project',\n             *       mergeCells : 'true,\n             *       mergedRenderer({ domConfig, value, fromIndex, toIndex }) {\n             *         domConfig.className.highlight = value === 'Important project';\n             *       }\n             *    }\n             *  ]\n             * });\n             * ```\n             *\n             * @config {Function}\n             * @param {Object} detail An object containing the information needed to render a task.\n             * @param {*} detail.value Value that will be displayed in the merged cell\n             * @param {Number} detail.fromIndex Index in store of the first row of the merged cell\n             * @param {Number} detail.toIndex Index in store of the last row of the merged cell\n             * @param {Core.helper.DomHelper#typedef-DomConfig} detail.domConfig DOM config object for the merged cell\n             * element\n             * @category Merge cells\n             */\n            'mergedRenderer',\n\n            //endregion\n\n            // region Menu\n\n            /**\n             * Show column picker for the column\n             * @config {Boolean} showColumnPicker\n             * @default true\n             * @category Menu\n             */\n            { name : 'showColumnPicker', defaultValue : true },\n\n            /**\n             * false to prevent showing a context menu on the column header element\n             * @config {Boolean} enableHeaderContextMenu\n             * @default true\n             * @category Menu\n             */\n            { name : 'enableHeaderContextMenu', defaultValue : true },\n\n            /**\n             * Set to `false` to prevent showing a context menu on the cell elements in this column\n             * @config {Boolean} enableCellContextMenu\n             * @default true\n             * @category Menu\n             */\n            { name : 'enableCellContextMenu', defaultValue : true },\n\n            /**\n             * Extra items to show in the header context menu for this column.\n             *\n             * ```javascript\n             * headerMenuItems : {\n             *     customItem : { text : 'Custom item' }\n             * }\n             * ```\n             *\n             * @config {Object<String,MenuItemConfig|Boolean|null>} headerMenuItems\n             * @category Menu\n             */\n            'headerMenuItems',\n\n            /**\n             * Extra items to show in the cell context menu for this column, `null` or `false` to not show any menu items\n             * for this column.\n             *\n             * ```javascript\n             * cellMenuItems : {\n             *     customItem : { text : 'Custom item' }\n             * }\n             * ```\n             *\n             * @config {Object<String,MenuItemConfig|Boolean|null>} cellMenuItems\n             * @category Menu\n             */\n            'cellMenuItems',\n\n            //endregion\n\n            //region Summary\n\n            /**\n             * Summary type (when using Summary feature). Valid types are:\n             * <dl class=\"wide\">\n             * <dt>sum <dd>Sum of all values in the column\n             * <dt>add <dd>Alias for sum\n             * <dt>count <dd>Number of rows\n             * <dt>countNotEmpty <dd>Number of rows containing a value\n             * <dt>average <dd>Average of all values in the column\n             * <dt>function <dd>A custom function, used with store.reduce. Should take arguments (sum, record)\n             * </dl>\n             * @config {'sum'|'add'|'count'|'countNotEmpty'|'average'|Function} sum\n             * @category Summary\n             */\n            'sum',\n\n            /**\n             * Summary configs, use if you need multiple summaries per column. Replaces {@link #config-sum} and\n             * {@link #config-summaryRenderer} configs.\n             * @config {ColumnSummaryConfig[]} summaries\n             * @category Summary\n             */\n            'summaries',\n\n            /**\n             * Renderer function for summary (when using Summary feature). The renderer is called with an object having\n             * the calculated summary `sum` as only member.\n             * @config {Function} summaryRenderer\n             * @param {Number} summaryRenderer.sum The sum\n             * @category Summary\n             */\n            'summaryRenderer',\n\n            //endregion\n\n            //region Misc\n\n            /**\n             * Column settings at different responsive levels, see responsive demo under examples/\n             * @config {Object} responsiveLevels\n             * @category Misc\n             */\n            'responsiveLevels',\n\n            /**\n             * Tags, may be used by ColumnPicker feature for grouping columns by tag in the menu\n             * @config {String[]} tags\n             * @category Misc\n             */\n            'tags',\n\n            /**\n             * Column config to apply to normal config if viewed on a touch device\n             * @config {ColumnConfig} touchConfig\n             * @category Misc\n             */\n            'touchConfig',\n\n            /**\n             * When using the tree feature, exactly one column should specify { tree: true }\n             * @config {Boolean} tree\n             * @category Misc\n             */\n            'tree',\n\n            /**\n             * Determines which type of filtering to use for the column. Usually determined by the column type used,\n             * but may be overridden by setting this field.\n             * @config {'text'|'date'|'number'|'duration'} filterType\n             * @category Misc\n             */\n            'filterType',\n\n            /**\n             * By default, any rendered column cell content is HTML-encoded. Set this flag to `false` disable this and\n             * allow rendering html elements\n             * @config {Boolean} htmlEncode\n             * @default true\n             * @category Misc\n             */\n            { name : 'htmlEncode', defaultValue : true },\n\n            /**\n             * By default, the header text is HTML-encoded. Set this flag to `false` disable this and allow html\n             * elements in the column header\n             * @config {Boolean} htmlEncodeHeaderText\n             * @default true\n             * @category Misc\n             */\n            { name : 'htmlEncodeHeaderText', defaultValue : true },\n\n            /**\n             * Set to `true`to automatically call DomHelper.sync for html returned from a renderer. Should in most cases\n             * be more performant than replacing entire innerHTML of cell and also allows CSS transitions to work. Has\n             * no effect unless {@link #config-htmlEncode} is disabled. Returned html must contain a single root element\n             * (that can have multiple children). See PercentColumn for example usage.\n             * @config {Boolean} autoSyncHtml\n             * @default false\n             * @category Misc\n             */\n            { name : 'autoSyncHtml', defaultValue : false },\n\n            /**\n             * Set to `false` to not always clear cell content if the {@link #config-renderer} returns `undefined`\n             * or has no `return` statement. This is useful when you mutate the cellElement, and want to prevent\n             * cell content from being reset during rendering. **This is the default behaviour until 6.0.**\n             *\n             * Set to `true` to always clear cell content regardless of renderer return value. **This will be default\n             * behaviour from 6.0.**\n             * @config {Boolean} alwaysClearCell\n             * @default false\n             * @category Misc\n             */\n            { name : 'alwaysClearCell', defaultValue : false },\n            // TODO: Change to true for 6.0\n\n            /**\n             * An array of the widgets to append to the column header\n             * ```javascript\n             * columns : [\n             * {\n             *     text          : 'Name',\n             *     field         : 'name',\n             *     flex          : 1,\n             *     headerWidgets : [\n             *         {\n             *             type   : 'button',\n             *             text   : 'Add row',\n             *             cls    : 'b-raised b-blue',\n             *             async onAction() {\n             *                 const [newRecord] = grid.store.add({\n             *                     name : 'New user'\n             *                 });\n             *\n             *                 await grid.scrollRowIntoView(newRecord);\n             *\n             *                 await grid.features.cellEdit.startEditing({\n             *                     record : newRecord,\n             *                     field  : 'name'\n             *                 });\n             *             }\n             *         }\n             *     ]\n             * }]\n             * ```\n             * @config {ContainerItemConfig[]} headerWidgets\n             * @private\n             * @category Misc\n             */\n            { name : 'headerWidgets' },\n\n            /**\n             * Set to `true` to have the {@link Grid.feature.CellEdit} feature update the record being edited live upon\n             * field edit instead of when editing is finished by using `TAB` or `ENTER`\n             * @config {Boolean} instantUpdate\n             * @category Misc\n             */\n            { name : 'instantUpdate', defaultValue : false },\n\n            { name : 'repaintOnResize', defaultValue : false },\n\n            /**\n             * An optional query selector to select a sub element within the cell being\n             * edited to align a cell editor's `X` position and `width` to.\n             * @config {String} editTargetSelector\n             * @category Misc\n             */\n            'editTargetSelector',\n\n            //endregion\n\n            //region Export\n\n            /**\n             * Used by the Export feature. Set to `false` to omit a column from an exported dataset\n             * @config {Boolean} exportable\n             * @default true\n             * @category Export\n             */\n            { name : 'exportable', defaultValue : true },\n\n            /**\n             * Column type which will be used by {@link Grid.util.TableExporter}. See list of available types in\n             * TableExporter docs. Returns undefined by default, which means column type should be read from the record\n             * field.\n             * @config {String} exportedType\n             * @category Export\n             */\n            { name : 'exportedType' },\n\n            {\n                name         : 'ariaLabel',\n                defaultValue : 'L{Column.columnLabel}'\n            },\n\n            {\n                name         : 'cellAriaLabel',\n                defaultValue : 'L{cellLabel}'\n            }\n            //endregion\n        ];\n    }\n\n    // prevent undefined fields from being exposed, to simplify spotting errors\n    static get autoExposeFields() {\n        return false;\n    }\n\n    //endregion\n\n    //region Init\n\n    construct(data, store) {\n        const me = this;\n\n        me.masterStore = store;\n\n        // Store might be an array\n        if (store) {\n            me._grid = Array.isArray(store) ? store[0].grid : store.grid;\n        }\n\n        me.localizableProperties = Config.mergeMethods.distinct(data.localizableProperties, ['text', 'ariaLabel', 'cellAriaLabel']);\n\n        if (data.localeClass) {\n            me.localeClass = data.localeClass;\n        }\n\n        super.construct(...arguments);\n\n        // Default value for region is assigned by the ColumnStore in createRecord(), same for `locked`\n\n        // Allow field : null if the column does not rely on a record field.\n        // For example the CheckColumn when used by GridSelection.\n        if (me.isLeaf && !('field' in me.data)) {\n            me.field = '_' + (me.type || '') + (++Column.emptyCount);\n            me.noFieldSpecified = true;\n        }\n\n        // If our field is a dot separated path, we must use ObjectHelper.getPath to extract our value\n        me.hasComplexMapping = me.field?.includes('.');\n\n        if (!me.width && !me.flex && !me.children) {\n            // Set the width silently because we're in construction.\n            me.set({\n                width : Column.defaultWidth,\n                flex  : null\n            }, null, true);\n        }\n\n        me.headerWidgets && me.initHeaderWidgets(me.headerWidgets);\n\n        if (me.isParent) {\n            me.meta.visibleChildren = new Set();\n            // Trigger adding expand/collapse button\n            if (me.collapsible) {\n                me.collapsible = true;\n            }\n        }\n\n    }\n\n    get isCollapsible() {\n        return this.children?.length > 1 && this.collapsible;\n    }\n\n    get collapsed() {\n        return this.get('collapsed');\n    }\n\n    set collapsed(collapsed) {\n        // Avoid triggering redraw\n        this.set('collapsed', collapsed, true);\n        // This triggers redraw\n        this.onCollapseChange(!collapsed);\n        this.trigger('toggleCollapse', { collapsed });\n    }\n\n    onCellFocus(location) {\n        this.location = location;\n        this.updateHeaderAriaLabel(this.localizeProperty('ariaLabel'));\n\n        // Update cell if cell is in the grid\n        if (location.rowIndex !== -1) {\n            this.updateCellAriaLabel(this.localizeProperty('cellAriaLabel'));\n        }\n    }\n\n    updateHeaderAriaLabel(headerAriaLabel) {\n        DomHelper.setAttributes(this.element, {\n            'aria-label' : headerAriaLabel\n        });\n    }\n\n    updateCellAriaLabel(cellAriaLabel) {\n        if (!this.location?.isSpecialRow && this.location?.cell) {\n            if (!cellAriaLabel?.length) {\n                cellAriaLabel = this.location.column.text;\n            }\n            DomHelper.setAttributes(this.location.cell, {\n                'aria-label' : cellAriaLabel\n            });\n        }\n    }\n\n    doDestroy() {\n        this.data?.editor?.destroy?.();\n\n        this.destroyHeaderWidgets();\n\n        super.doDestroy();\n    }\n\n    //endregion\n\n    //region Header widgets\n\n    set headerWidgets(widgets) {\n        this.initHeaderWidgets(widgets);\n\n        this.set('headerWidgets', widgets);\n    }\n\n    get headerWidgets() {\n        return this.get('headerWidgets');\n    }\n\n    initHeaderWidgets(widgets) {\n        this.destroyHeaderWidgets();\n\n        const headerWidgetMap = this.headerWidgetMap = {};\n\n        for (const config of widgets) {\n            const widget = Widget.create({ owner : this, ...config });\n\n            headerWidgetMap[widget.ref || widget.id] = widget;\n        }\n    }\n\n    destroyHeaderWidgets() {\n        // Clean up any headerWidgets used\n        for (const widget of Object.values(this.headerWidgetMap || {})) {\n            widget.destroy?.();\n        }\n    }\n\n    //endregion\n\n    //region Fields\n\n    // Yields the automatic cell tagging class, eg b-number-cell from NumberColumn etc\n    static generateAutoCls() {\n        let columnAutoCls = '';\n\n        // Create the auto class for cells owned by this column class\n        // For example NumberColumn cells get b-number-cell\n        // DurationColumn cells get b-duration-cell b-number-cell\n        for (let c = this; c !== Column; c = c.superclass) {\n            c.type && (columnAutoCls += `b-${c.type.toLowerCase()}-cell `);\n        }\n        (Column.autoClsMap || (Column.autoClsMap = new Map())).set(this, columnAutoCls);\n        return columnAutoCls;\n    }\n\n    /**\n     * Returns the full CSS class set for a cell at the passed {@link Grid.util.Location}\n     * as an object where property keys with truthy values denote a class to be added\n     * to the cell.\n     * @param {Grid.util.Location} cellContext\n     * @returns {Object} An object in which property keys with truthy values are used as\n     * the class names on the cell element.\n     * @internal\n     */\n    getCellClass(cellContext) {\n        const\n            { record, column } = cellContext,\n            {\n                cellCls,\n                internalCellCls,\n                grid,\n                constructor,\n                align\n            }          = column,\n            autoCls    = Column.autoClsMap?.get(constructor) || constructor.generateAutoCls(),\n            isEditing  = cellContext.cell.classList.contains('b-editing'),\n            result     = {\n                [grid.cellCls]                 : grid.cellCls,\n                [autoCls]                      : autoCls,\n                [cellCls]                      : cellCls,\n                [internalCellCls]              : internalCellCls,\n                'b-cell-dirty'                 : record.isFieldModified(column.field) && (column.compositeField || record.fieldMap[column.field]?.persist !== false),\n                [`b-grid-cell-align-${align}`] : align,\n                'b-selected'                   : grid.selectionMode.cell && grid.isCellSelected(cellContext),\n                'b-focused'                    : grid.isFocused(cellContext),\n                'b-auto-height'                : column.autoHeight,\n                'b-editing'                    : isEditing\n            };\n\n        // Check cell CSS should not be applied to group header rows\n        if (record.isSpecialRow && result['b-checkbox-selection']) {\n            result['b-checkbox-selection'] = false;\n        }\n\n        return result;\n    }\n\n    get locked() {\n        return this.data.region === 'locked';\n    }\n\n    set locked(locked) {\n        this.region = locked ? 'locked' : 'normal';\n    }\n\n    // Children of grouped header always uses same region as the group\n    get region() {\n        if (!this.parent.isRoot) {\n            return this.parent.region;\n        }\n\n        return this.get('region');\n    }\n\n    set region(region) {\n        this.set('region', region);\n    }\n\n    // parent headers cannot be sorted by\n    get sortable() {\n        return this.isLeaf && this.data.sortable;\n    }\n\n    set sortable(sortable) {\n        this.set('sortable', sortable);\n    }\n\n    // parent headers cannot be grouped by\n    get groupable() {\n        return this.isLeaf && this.data.groupable;\n    }\n\n    set groupable(groupable) {\n        this.set('groupable', groupable);\n    }\n\n    /**\n     * The Field to use as editor for this column\n     * @private\n     * @readonly\n     */\n    get editor() {\n        const me = this;\n\n        let { editor } = me.data;\n\n        if (editor && !editor.isWidget) {\n            // Give frameworks a shot at injecting their own editor, wrapped as a widget\n            const result = me.grid.processCellEditor({ editor, field : me.field });\n\n            if (result) {\n                // Use framework editor\n                editor = me.data.editor = result.editor;\n            }\n            else {\n                if (typeof editor === 'string') {\n                    editor = {\n                        type : editor\n                    };\n                }\n\n                // The two configs, default and configured must be deep merged.\n                editor = me.data.editor = Widget.create(ObjectHelper.merge(me.defaultEditor, {\n                    owner : me.grid,\n\n                    // Field labels must be present for A11Y purposes, but are clipped out of visibility.\n                    // Screen readers will be able to access them and announce them.\n                    label : StringHelper.encodeHtml(me.text)\n                }, editor));\n            }\n        }\n\n        return editor;\n    }\n\n    set editor(editor) {\n        this.data.editor = editor;\n    }\n\n    /**\n     * A config object specifying the editor to use to edit this column.\n     * @private\n     * @readonly\n     */\n    get defaultEditor() {\n        return {\n            type : 'textfield',\n            name : this.field\n        };\n    }\n\n    //endregion\n\n    //region Grid, SubGrid & Element\n\n    /**\n     * Extracts the value from the record specified by this Column's {@link #config-field} specification\n     * in a format that can be used as a value to match by a {@link Grid.feature.Filter filtering} operation.\n     *\n     * The default implementation returns the {@link #function-getRawValue} value, but this may be\n     * overridden in subclasses.\n     * @param {Core.data.Model} record The record from which to extract the field value.\n     * @returns {*} The value of the referenced field if any.\n     */\n    getFilterableValue(record) {\n        return this.getRawValue(record);\n    }\n\n    // Create an ownership hierarchy which links columns up to their SubGrid if no owner injected.\n    get owner() {\n        return this._owner || this.subGrid;\n    }\n\n    set owner(owner) {\n        this._owner = owner;\n    }\n\n    get grid() {\n        return this._grid || this.parent?.grid;\n    }\n\n    // Private, only used in tests where standalone Headers are created with no grid\n    // from which to lookup the associate SubGrid.\n    set subGrid(subGrid) {\n        this._subGrid = subGrid;\n    }\n\n    /**\n     * Get the SubGrid to which this column belongs\n     * @property {Grid.view.SubGrid}\n     * @readonly\n     */\n    get subGrid() {\n        return this._subGrid || this.grid?.getSubGridFromColumn(this);\n    }\n\n    /**\n     * Get the element for the SubGrid to which this column belongs\n     * @property {HTMLElement}\n     * @readonly\n     * @private\n     */\n    get subGridElement() {\n        return this.subGrid.element;\n    }\n\n    /**\n     * The header element for this Column. *Only available after the grid has been rendered*.\n     *\n     * **Note that column headers are rerendered upon mutation of Column values, so this\n     * value is volatile and should not be cached, but should be read whenever needed.**\n     * @property {HTMLElement}\n     * @readonly\n     */\n    get element() {\n        return this.grid.getHeaderElement(this);\n    }\n\n    get nextVisibleSibling() {\n        // During move from one region to another, nextSibling might not be wired up to the new next sibling in region.\n        // (Because the order in master store did not change)\n        const region = this.region;\n\n        let next = this.nextSibling;\n        while (next && (next.hidden || next.region !== region)) {\n            next = next.nextSibling;\n        }\n        return next;\n    }\n\n    get isLastInSubGrid() {\n        return !this.nextVisibleSibling && (this.parent.isRoot || this.parent.isLastInSubGrid);\n    }\n\n    /**\n     * The text wrapping element for this Column. *Only available after the grid has been rendered*.\n     *\n     * This is the full-width element which *contains* the text-bearing element and any icons.\n     *\n     * **Note that column headers are rerendered upon mutation of Column values, so this\n     * value is volatile and should not be cached, but should be read whenever needed.**\n     * @property {HTMLElement}\n     * @readonly\n     */\n    get textWrapper() {\n        return DomHelper.getChild(this.element, '.b-grid-header-text');\n    }\n\n    /**\n     * The text containing element for this Column. *Only available after the grid has been rendered*.\n     *\n     * **Note that column headers are rerendered upon mutation of Column values, so this\n     * value is volatile and should not be cached, but should be read whenever needed.**\n     * @property {HTMLElement}\n     * @readonly\n     */\n    get textElement() {\n        return DomHelper.down(this.element, '.b-grid-header-text-content');\n    }\n\n    /**\n     * The child element into which content should be placed. This means where any\n     * contained widgets such as filter input fields should be rendered. *Only available after the grid has been\n     * rendered*.\n     *\n     * **Note that column headers are rerendered upon mutation of Column values, so this\n     * value is volatile and should not be cached, but should be read whenever needed.**\n     * @property {HTMLElement}\n     * @readonly\n     */\n    get contentElement() {\n        return DomHelper.down(this.element, '.b-grid-header-children');\n    }\n\n    //endregion\n\n    //region Misc properties\n\n    get isSorted() {\n        return this.grid.store.sorters.some(s => s.field === this.field);\n    }\n\n    get isFocusable() {\n        return this.isLeaf;\n    }\n\n    static get text() {\n        return this.$meta.fields.defaults.text;\n    }\n\n    /**\n     * Returns header text based on {@link #config-htmlEncodeHeaderText} config value.\n     * @returns {String}\n     * @internal\n     */\n    get headerText() {\n        return this.htmlEncodeHeaderText ? StringHelper.encodeHtml(this.text) : this.text;\n    }\n\n    /**\n     * An object which contains a map of the header widgets keyed by their {@link Core.widget.Widget#config-ref ref}.\n     * @property {Object<String,Core.widget.Widget>} headerWidgetMap\n     * @private\n     * @readonly\n     */\n    //endregion\n\n    //region Show/hide\n\n    get isVisible() {\n        return !this.hidden && (!this.parent || this.parent.isVisible);\n    }\n\n    /**\n     * Hides this column.\n     */\n    hide(silent = false, hidingParent = false) {\n        const\n            me         = this,\n            { parent } = me;\n\n        // Reject non-change\n        if (!me.hidden) {\n            me.hidden = true;\n\n            if (parent && !parent.isRoot && !parent.isTogglingAll) {\n                // check if all sub columns are hidden, if so hide parent\n                const anyVisible = parent.children.some(child => child.hidden !== true);\n                if (!anyVisible && !parent.hidden) {\n                    silent = true; // hiding parent will trigger event\n                    parent.hide();\n                }\n            }\n\n            if (me.isParent) {\n                me.children.forEach(child => child.hide(true, true));\n            }\n            // Keep state when hiding parent, to be able to restore when showing\n            else if (!parent.isRoot) {\n                parent.meta.visibleChildren[hidingParent ? 'add' : 'delete'](me);\n            }\n\n            if (!silent) {\n                me.stores.forEach(store => store.trigger('columnHide', { column : me }));\n            }\n        }\n    }\n\n    /**\n     * Shows this column.\n     */\n    show(silent = false) {\n        const\n            me         = this,\n            { parent } = me;\n\n        // Reject non-change\n        if (me.hidden) {\n            me.hidden = false;\n\n            if (parent?.hidden) {\n                parent.show();\n            }\n\n            if (me.isParent) {\n                // Only show children\n                me.meta.visibleChildren?.forEach(child => child.show(true));\n            }\n\n            // event is triggered on chained stores\n            if (!silent) {\n                me.stores.forEach(store => store.trigger('columnShow', { column : me }));\n            }\n        }\n    }\n\n    /**\n     * Toggles the column visibility.\n     * @param {Boolean} [force] Set to true (visible) or false (hidden) to force a certain state\n     */\n    toggle(forceVisible) {\n        if ((this.hidden && forceVisible === undefined) || forceVisible === true) {\n            return this.show();\n        }\n\n        if ((!this.hidden && forceVisible === undefined) || forceVisible === false) {\n            return this.hide();\n        }\n    }\n\n    /**\n     * Toggles the column visibility of all children of a parent column.\n     * @param {Grid.column.Column[]} [columns] The set of child columns to toggle, defaults to all children\n     * @param {Boolean} [force] Set to true (visible) or false (hidden) to force a certain state\n     */\n    toggleChildren(columns = this.children, force = undefined) {\n        const me = this;\n\n        me.grid.columns?.beginBatch();\n        me.isTogglingAll = true;\n        columns.forEach(childColumn => childColumn.toggle(force));\n        me.isTogglingAll = false;\n        me.grid.columns?.endBatch();\n    }\n\n    /**\n     * Toggles the collapsed state of the column. Based on the {@link #config-collapseMode}, this either hides all\n     * but the first child column, or toggles the visibility state of all children (if you want to have a special\n     * column shown in collapsed mode).\n     *\n     * Only applicable for columns with child columns.\n     * @private\n     * @param {Boolean} [force] Set to true (expanded) or false (collapsed) to force a certain state\n     */\n    onCollapseChange(force = undefined) {\n        const me = this;\n\n        if (me.collapseMode === 'toggleAll') {\n            me.toggleChildren();\n        }\n        else {\n            const { firstChild } = me;\n\n            // For flexed child column, stamp a width on it in collapsed state\n            if (firstChild.flex != null && me.collapsed) {\n                firstChild.oldFlex = firstChild.flex;\n                firstChild.width = firstChild.element.offsetWidth;\n            }\n            else if (!me.collapsed && firstChild.oldFlex) {\n                // For previously flexed child column, restore the flex value;\n                firstChild.flex = firstChild.oldFlex;\n                firstChild.oldFlex = null;\n            }\n\n            me.grid.columns?.beginBatch();\n            me.isTogglingAll = true;\n            me.children.slice(1).forEach(childColumn => childColumn.toggle(force));\n            me.isTogglingAll = false;\n            me.grid.columns?.endBatch();\n        }\n\n    }\n\n    set collapsible(collapsible) {\n        const me = this;\n\n        me.set('collapsible', collapsible);\n\n        if (me.isParent) {\n            const { headerWidgets = [] } = me;\n\n            if (collapsible) {\n                headerWidgets.push({\n                    type        : 'button',\n                    ref         : 'collapseExpand',\n                    toggleable  : true,\n                    pressed     : me.collapsed,\n                    icon        : `b-icon-collapse-${me.grid.rtl ? 'right' : 'left'}`,\n                    pressedIcon : `b-icon-collapse-${me.grid.rtl ? 'left' : 'right'}`,\n                    cls         : 'b-grid-header-collapse-button b-transparent',\n                    onToggle    : ({ pressed }) => me.collapsed = pressed\n                });\n            }\n            else {\n                const index = headerWidgets.findIndex(w => w.ref === 'collapseExpand');\n                index > -1 && headerWidgets.splice(index, 1);\n            }\n\n            me.headerWidgets = headerWidgets;\n\n            if (me.collapsed) {\n                me.onCollapseChange(false);\n            }\n        }\n    }\n\n    get collapsible() {\n        return this.get('collapsible');\n    }\n\n    //endregion\n\n    //region Index & id\n\n    /**\n     * Generates an id for the column when none is set. Generated ids are 'col1', 'col2' and so on. If a field is\n     * specified (as it should be in most cases) the field name is used instead: 'name1', 'age2' ...\n     * @private\n     * @returns {String}\n     */\n    generateId() {\n        if (!Column.generatedIdIndex) {\n            Column.generatedIdIndex = 0;\n        }\n\n        return (this.field ? this.field.replace(/\\./g, '-') : 'col') + (++Column.generatedIdIndex);\n    }\n\n    /**\n     * Index among all flattened columns\n     * @property {Number}\n     * @readOnly\n     * @internal\n     */\n    get allIndex() {\n        return this.masterStore.indexOf(this);\n    }\n\n    //endregion\n\n    //region Width\n\n    // Returns size in pixels for measured value\n    measureSize(value) {\n        return DomHelper.measureSize(value, this.subGrid?.element);\n    }\n\n    /**\n     * Returns minimal width in pixels for applying to style according to the current `width` and `minWidth`.\n     * @internal\n     */\n    get calcMinWidth() {\n        const { width, minWidth } = this.data;\n\n        if (validWidth(width) && validWidth(minWidth)) {\n            return Math.max(parseInt(width) || 0, parseInt(minWidth) || 0);\n        }\n        else {\n            return width;\n        }\n    }\n\n    /**\n     * Get/set columns width in px. If column uses flex, width will be undefined.\n     * Setting a width on a flex column cancels out flex.\n     *\n     * **NOTE:** Grid might be configured to always stretch the last column, in which case the columns actual width\n     * might deviate from the configured width.\n     *\n     * ```javascript\n     * let grid = new Grid({\n     *     appendTo : 'container',\n     *     height   : 200,\n     *     width    : 400,\n     *     columns  : [{\n     *         text  : 'First column',\n     *         width : 100\n     *     }, {\n     *         text  : 'Last column',\n     *         width : 100 // last column in the grid is always stretched to fill the free space\n     *     }]\n     * });\n     *\n     * grid.columns.last.element.offsetWidth; // 300 -> this points to the real element width\n     * ```\n     * @property {Number|String}\n     */\n    get width() {\n        return this.data.width;\n    }\n\n    set width(width) {\n        const data = { width };\n        if (width && ('flex' in this.data)) {\n            data.flex = null; // remove flex when setting width to enable resizing flex columns\n        }\n        this.set(data);\n    }\n\n    set flex(flex) {\n        const data = { flex };\n        if (flex && ('width' in this.data)) {\n            data.width = null; // remove width when setting flex\n        }\n        this.set(data);\n    }\n\n    get flex() {\n        return this.data.flex;\n    }\n\n    // This method is used to calculate minimum row width for edge and safari\n    // It calculates minimum width of the row taking column hierarchy into account\n    calculateMinWidth() {\n        const\n            me       = this,\n            width    = me.measureSize(me.width),\n            minWidth = me.measureSize(me.minWidth);\n\n        let minChildWidth = 0;\n\n        if (me.children) {\n            minChildWidth = me.children.reduce((result, column) => {\n                return result + column.calculateMinWidth();\n            }, 0);\n        }\n\n        return Math.max(width, minWidth, minChildWidth);\n    }\n\n    /**\n     * Resizes the column to match the widest string in it. By default it also measures the column header, this\n     * behaviour can be configured by setting {@link Grid.view.Grid#config-resizeToFitIncludesHeader}.\n     *\n     * Called internally when you double click the edge between\n     * column headers, but can also be called programmatically. For performance reasons it is limited to checking 1000\n     * rows surrounding the current viewport.\n     *\n     * @param {Number|Number[]} widthMin Minimum allowed width. If content width is less than this, this width is used\n     * instead. If this parameter is an array, the first element is `widthMin` and the seconds is `widthMax`.\n     * @param {Number} widthMax Maximum allowed width. If the content width is greater than this number, this width\n     * is used instead.\n     */\n    resizeToFitContent(widthMin, widthMax, batch = false) {\n        const\n            me                    = this,\n            {\n                grid,\n                element,\n                fitMode\n            } = me,\n            { rowManager, store } = grid,\n            { count }             = store;\n\n        if (count <= 0 || me.fitMode === 'none' || !me.fitMode) {\n            return;\n        }\n\n        const\n            [row]       = rowManager.rows,\n            {\n                rowElement,\n                cellElement\n            }           = grid.beginGridMeasuring(),\n            cellContext = new Location({\n                grid,\n                column : me,\n                id     : null\n            });\n\n        let maxWidth = 0,\n            start, end, i, record, value, length, longest = { length : 0, record : null };\n\n        // Fake element data to be able to use Row#renderCell()\n        cellElement._domData = {\n            columnId : me.id,\n            row,\n            rowElement\n        };\n\n        cellContext._cell             = cellElement;\n        cellContext.updatingSingleRow = true;\n        cellContext.isMeasuring       = true;\n\n        // Clear cellElement, since it is being reused between columns\n        cellElement.innerHTML = '';\n\n        // Measure header unless configured not to\n        if (grid.resizeToFitIncludesHeader) {\n            // Cache the padding\n            if (!grid.$headerPadding) {\n                const style = globalThis.getComputedStyle(element);\n                grid.$headerPadding = parseInt(style.paddingLeft);\n            }\n            // Grab the header text content element\n            const headerText = element.querySelector('.b-grid-header-text-content');\n            // Restyle it to shrinkwrap its text, measure and then restore\n            headerText.style.cssText = 'flex: none; width: auto';\n            maxWidth = headerText.offsetWidth + grid.$headerPadding * 2 + 2; // +2 to avoid overflow ellipsis\n            headerText.style.cssText = '';\n        }\n\n        // If it's a very large dataset, measure the maxWidth of the field in the 1000 rows\n        // surrounding the rendered block.\n        if (count > 1000) {\n            start = Math.max(Math.min(rowManager.topIndex + Math.round(rowManager.rowCount / 2) - 500, count - 1000), 0);\n            end = start + 1000;\n        }\n        else {\n            start = 0;\n            end = count;\n        }\n\n        for (i = start; i < end; i++) {\n            record = store.getAt(i);\n            value = me.getRawValue(record);\n\n            // In value mode we determine the record with the longest value, no rendering involved\n            if (fitMode === 'value') {\n                length = String(value).length;\n            }\n            // In exact and textContent modes we have to render the records\n            else {\n                cellContext._record   = longest.record;\n                cellContext._id       = record.id;\n                cellContext._rowIndex = i;\n\n                row.renderCell(cellContext);\n\n                // Reading textContent is \"cheap\", it does not require a layout\n                if (fitMode === 'textContent') {\n                    length = cellElement.textContent.length;\n                }\n                // Using exact mode, measure the cell = expensive\n                else {\n                    const width = cellElement.offsetWidth;\n                    if (width > maxWidth) {\n                        maxWidth = width;\n                    }\n                }\n            }\n\n            if (length > longest.length) {\n                longest = { record, length, rowIndex : i };\n            }\n        }\n\n        // value mode and textContent mode both required us to render and measure the record determined to be the\n        // longest above\n        if (longest.length > 0 && (fitMode === 'value' || fitMode === 'textContent')) {\n            cellContext._record = longest.record;\n            cellContext._id = longest.record.id;\n            cellContext._rowIndex = longest.rowIndex;\n            row.renderCell(cellContext);\n            maxWidth = Math.max(maxWidth, cellElement.offsetWidth);\n        }\n\n        if (Array.isArray(widthMin)) {\n            [widthMin, widthMax] = widthMin;\n        }\n\n        maxWidth = Math.max(maxWidth, widthMin || 0);\n        maxWidth = Math.min(maxWidth, widthMax || 1e6);  // 1 million px default max\n\n        // Batch mode saves a little time by not removing the measuring elements between columns\n        if (!batch) {\n            grid.endGridMeasuring();\n        }\n\n        me.width = me.maxWidth ? (maxWidth = Math.min(maxWidth, me.maxWidth)) : maxWidth;\n\n        return maxWidth;\n    }\n\n    //endregion\n\n    //region State\n\n    /**\n     * Get column state, used by State mixin\n     * @private\n     */\n    getState() {\n        const\n            me    = this,\n            state = {\n                id     : me.id,\n                // State should only store column attributes which user can modify via UI (except column index).\n                // User can hide column, resize or move it to neighbor region\n                hidden : me.hidden,\n                region : me.region,\n                locked : me.locked\n            };\n\n        if (!me.children) {\n            state[me.flex ? 'flex' : 'width'] = me.flex || me.width;\n        }\n\n        if (me.isCollapsible) {\n            state.collapsed = me.collapsed;\n        }\n\n        return state;\n    }\n\n    /**\n     * Apply state to column, used by State mixin\n     * @private\n     */\n    applyState(state) {\n        const me = this;\n\n        me.beginBatch();\n\n        if ('locked' in state) {\n            me.locked = state.locked;\n        }\n\n        if ('width' in state) {\n            me.width = state.width;\n        }\n\n        if ('flex' in state) {\n            me.flex = state.flex;\n        }\n\n        if ('width' in state && me.flex) {\n            me.flex = undefined;\n        }\n        else if ('flex' in state && me.width) {\n            me.width = undefined;\n        }\n\n        if ('region' in state) {\n            me.region = state.region;\n        }\n\n        me.endBatch();\n\n        if ('hidden' in state) {\n            me.toggle(state.hidden !== true);\n        }\n        if ('collapsed' in state) {\n            me.collapsed = state.collapsed;\n        }\n    }\n\n    //endregion\n\n    //region Other\n\n    remove() {\n        const\n            { subGrid, grid } = this,\n            focusedCell       = subGrid && grid?.focusedCell;\n\n        // Prevent errors when removing the column that the owning grid has registered as focused.\n        if (focusedCell?.columnId === this.id) {\n\n            // Focus is in the grid, navigate before column is removed\n            if (grid.owns(DomHelper.getActiveElement(grid))) {\n                grid.navigateRight();\n            }\n            // Focus not in the grid, bump the focused cell pointer to the next visible column\n            // for when focus returns so it can go as close as possible.\n            else {\n                grid._focusedCell = new Location({\n                    grid,\n                    rowIndex : focusedCell.rowIndex,\n                    column   : subGrid.columns.getAdjacentVisibleLeafColumn(this.id, true, true)\n                });\n            }\n        }\n        super.remove();\n    }\n\n    /**\n     * Extracts the value from the record specified by this Column's {@link #config-field} specification.\n     *\n     * This will work if the field is a dot-separated path to access fields in associated records, eg\n     *\n     * ```javascript\n     *  field : 'resource.calendar.name'\n     * ```\n     *\n     * **Note:** This is the raw field value, not the value returned by the {@link #config-renderer}.\n     * @param {Core.data.Model} record The record from which to extract the field value.\n     * @returns {*} The value of the referenced field if any.\n     */\n    getRawValue(record) {\n        if (this.hasComplexMapping) {\n            return ObjectHelper.getPath(record, this.field);\n        }\n\n        // Engine can change field value to null, in which case cell will render previous record value,\n        // before project commit\n        return record[this.field];\n    }\n\n    /**\n     * Refresh the cell for supplied record in this column, if that cell is rendered.\n     * @param {Core.data.Model} record Record used to get row to update the cell in\n     */\n    refreshCell(record) {\n        this.grid.rowManager.refreshCell(record, this.id);\n    }\n\n    /**\n     * Clear cell contents. Base implementation which just sets innerHTML to blank string.\n     * Should be overridden in subclasses to clean up for examples widgets.\n     * @param {HTMLElement} cellElement\n     * @internal\n     */\n    clearCell(cellElement) {\n        cellElement.innerHTML = '';\n\n        delete cellElement._content;\n    }\n\n    /**\n     * Override in subclasses to allow/prevent editing of certain rows.\n     * @param {Core.data.Model} record\n     * @internal\n     */\n    canEdit(record) {\n        // the record can decide which column is editable\n        if (record.isEditable) {\n            const isEditable = record.isEditable(this.field);\n            // returns undefined for unknown field\n            if (isEditable !== undefined) {\n                return isEditable;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Insert a child column(s) before an existing child column. Returns `null` if the parent column is\n     * {@link #config-sealed}\n     * @param {Core.data.Model|Core.data.Model[]} childColumn Column or array of columns to insert\n     * @param {Core.data.Model} [before] Optional column to insert before, leave out to append to the end\n     * @param {Boolean} [silent] Pass `true` to not trigger events during insert\n     * @returns {Core.data.Model|Core.data.Model[]|null}\n     * @category Parent & children\n     */\n    insertChild(childColumn, before = null, silent = false) {\n        childColumn = Array.isArray(childColumn) ? childColumn : [childColumn];\n\n        // If user dragged out only visible child of collapsed parent, make next sibling visible\n        childColumn.forEach(col => {\n            const { parent } = col;\n\n            if (parent?.collapsed && col === parent.firstChild && parent.children.length > 1 && parent.children.filter(child => !child.hidden).length === 1) {\n                col.nextSibling.hidden = false;\n            }\n        });\n\n        return (this.sealed && !this.inProcessChildren) ? null : super.insertChild(...arguments);\n    }\n\n    /**\n     * Override in subclasses to prevent this column from being filled with the {@link Grid.feature.FillHandle} feature\n     * @param {Object} data Object containing information about current cell and fill value\n     * @param {Grid.util.Location} data.cell Current cell data\n     * @param {Grid.util.Location[]} data.range Range from where to calculate values\n     * @param {Core.data.Model} data.record Current cell record\n     * @returns {Boolean}\n     * @internal\n     */\n    canFillValue() {\n        return true;\n    }\n\n    //endregion\n\n    // This function is not meant to be called by any code other than Base#getCurrentConfig().\n    // It extracts the current configs (fields) for the column, with special handling for sortable, editor, renderer and\n    // headerRenderer\n    getCurrentConfig(options) {\n        const result = super.getCurrentConfig(options);\n\n        // Use unbound sort fn\n        if (this.sortable?.originalSortFn) {\n            result.sortable = this.sortable.originalSortFn;\n        }\n\n        // Don't include internalRenderer in current config\n        if (result.renderer === this.internalRenderer) {\n            delete result.renderer;\n        }\n\n        // Same for headerRenderer\n        if (result.headerRenderer === this.internalHeaderRenderer) {\n            delete result.headerRenderer;\n        }\n\n        delete result.ariaLabel;\n        delete result.cellAriaLabel;\n\n        return result;\n    }\n}\n\n// Registered in ColumnStore as we can't have this in Column due to circular dependencies\n\nColumn.emptyCount = 0;\nColumn.defaultWidth = 100;\nColumn.exposeProperties();\n","import Store from '../../Core/data/Store.js';\nimport Column from '../column/Column.js';\nimport Localizable from '../../Core/localization/Localizable.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\nimport Objects from '../../Core/helper/util/Objects.js';\n\n/**\n * @module Grid/data/ColumnStore\n */\n\nconst\n    columnDefinitions = {\n        boolean : {\n            type : 'check'\n        },\n        date : {\n            type : 'date'\n        },\n        integer : {\n            type   : 'number',\n            format : {\n                maximumFractionDigits : 0\n            }\n        },\n        number : {\n            type : 'number'\n        }\n    },\n    lockedColumnSorters = [{\n        field : 'region'\n    }];\n\n/**\n * A store specialized in handling columns. Used by the Grid to hold its columns and used as a chained store by each SubGrid\n * to hold theirs. Should not be instanced directly, instead access it through `grid.columns` or `subGrid.columns`\n *\n * ```\n * // resize first column\n * grid.columns.first.width = 200;\n *\n * // remove city column\n * grid.columns.get('city').remove();\n *\n * // add new column\n * grid.columns.add({text : 'New column'});\n *\n * // add new column to specific region (SubGrid)\n * grid.columns.add({text : 'New column', region : 'locked'});\n *\n * // add new column to 'locked' region (SubGrid)\n * grid.columns.add({text : 'New column', locked : true});\n * ```\n *\n * @extends Core/data/Store\n */\nexport default class ColumnStore extends Localizable(Store) {\n\n    //region Events\n\n    /**\n     * Fires when a column is shown.\n     * @event columnShow\n     * @param {Grid.data.ColumnStore} source The store which triggered the event.\n     * @param {Grid.column.Column} column The column which status has been changed.\n     */\n\n    /**\n     * Fires when a column has been hidden.\n     * @event columnHide\n     * @param {Grid.data.ColumnStore} source The store which triggered the event.\n     * @param {Grid.column.Column} column The column which status has been changed.\n     */\n\n    //endregion\n\n    static get defaultConfig() {\n        return {\n            modelClass : Column,\n            tree       : true,\n\n            /**\n             * Automatically adds a field definition to the store used by the Grid when adding a new Column displaying a\n             * non-existing field.\n             *\n             * To enable this behaviour:\n             *\n             * ```javascript\n             * const grid = new Grid({\n             *     columns : {\n             *         autoAddField : true,\n             *         data         : [\n             *             // Column definitions here\n             *         ]\n             *     }\n             * }\n             *\n             * @config {Boolean}\n             * @default\n             */\n            autoAddField : false,\n\n            // Locked columns must sort to before non-locked\n            sorters : lockedColumnSorters\n        };\n    }\n\n    construct(config) {\n        const me = this;\n\n        // Consequences of ColumnStore construction can cause reading of grid.columns\n        // so set the property early.\n        if (config.grid) {\n            config.grid._columnStore = me;\n            me.id = `${config.grid.id}-columns`;\n\n            // Visible columns must be invalidated on expand/collapse\n            config.grid.ion({\n                subGridCollapse : 'clearSubGridCaches',\n                subGridExpand   : 'clearSubGridCaches',\n                thisObj         : me\n            });\n        }\n\n        super.construct(config);\n\n        // So that we can invalidate cached collections which take computing so that we compute them\n        // only when necessary. For example when asking for the visible leaf columns, we do not want\n        // to compute that each time.\n        me.ion({\n            change  : me.onStoreChange,\n            sort    : () => me.updateChainedStores(),\n            thisObj : me,\n            prio    : 1\n        });\n    }\n\n    get modelClass() {\n        return this._modelClass;\n    }\n\n    set modelClass(ClassDef) {\n        this._modelClass = ClassDef;\n    }\n\n    doDestroy() {\n        const allColumns = [];\n\n        if (!this.isChained) {\n            this.traverse(column => allColumns.push(column));\n        }\n\n        super.doDestroy();\n\n        // Store's destroy unjoins all records. Destroy all columns *after* that.\n        if (!this.isChained) {\n            allColumns.forEach(column => column.destroy());\n        }\n    }\n\n    // Overridden because the flat collection only contains top level columns,\n    // not leaves - group columns are *not* expanded.\n    /**\n     * Get column by id.\n     * @param {String|Number} id\n     * @returns {Grid.column.Column}\n     */\n    getById(id) {\n        return super.getById(id) || this.idRegister[id];\n    }\n\n    forEach(fn, thisObj = this) {\n        // Override to omit root\n        this.traverseWhile((n, i) => fn.call(thisObj, n, i), true);\n    }\n\n    get totalFixedWidth() {\n        let result = 0;\n\n        for (const col of this) {\n            if (!col.hidden) {\n                // if column has children (grouped header) use they to width increment\n                if (col.children) {\n                    col.children.forEach(childCol => result += this.calculateFixedWidth(childCol));\n                }\n                else {\n                    result += this.calculateFixedWidth(col);\n                }\n            }\n        }\n\n        return result;\n    }\n\n    get hasFlex() {\n        return this.visibleColumns.some(column => column.flex);\n    }\n\n    calculateFixedWidth(column) {\n        if (column.flex) {\n            return column.measureSize(Column.defaultWidth);\n        }\n        else {\n            return Math.max(column.measureSize(column.width), column.measureSize(column.minWidth));\n        }\n    }\n\n    /**\n     * Returns the top level columns. If using grouped columns, this is the top level columns. If no grouped\n     * columns are being used, this is the leaf columns.\n     * @property {Grid.column.Column[]}\n     * @readonly\n     */\n    get topColumns() {\n        return this.isChained ? this.masterStore.rootNode.children.filter(this.chainedFilterFn) : this.rootNode.children;\n    }\n\n    /**\n     * Returns the visible leaf headers which drive the rows' cell content.\n     * @property {Grid.column.Column[]}\n     * @readonly\n     */\n    get visibleColumns() {\n        const me = this;\n\n        if (!me._visibleColumns) {\n            me._visibleColumns = me.leaves.filter(column => column.isVisible && (!column.subGrid || !column.subGrid.collapsed));\n        }\n\n        return me._visibleColumns;\n    }\n\n    onStoreChange({ action, changes }) {\n        // no need to clear cache while resizing, or if column changes name\n        if (action === 'update' && !('hidden' in changes)) {\n            return;\n        }\n        this.clearCaches();\n    }\n\n    clearSubGridCaches({ subGrid }) {\n        subGrid.columns.clearCaches();\n        this.clearCaches();\n    }\n\n    clearCaches() {\n        this._visibleColumns = null;\n        this.masterStore?.clearCaches();\n    }\n\n    onMasterDataChanged(event) {\n        super.onMasterDataChanged(event);\n\n        // If master store has changes we also need to clear cached columns, in case a column was hidden\n        // no need to clear cache while resizing, or if column changes name\n        if (event.action !== 'update' || ('hidden' in event.changes)) {\n            this.clearCaches();\n        }\n    }\n\n    getAdjacentVisibleLeafColumn(columnOrId, next = true, wrap = false) {\n        const\n            columns = this.visibleColumns,\n            column  = (columnOrId instanceof Column) ? columnOrId : this.getById(columnOrId);\n        let idx = columns.indexOf(column) + (next ? 1 : -1);\n\n        // If we walked off either end, wrap if directed to do so,\n        // otherwise, return null;\n        if (!columns[idx]) {\n            if (wrap) {\n                idx = next ? 0 : columns.length - 1;\n            }\n            else {\n                return null;\n            }\n        }\n\n        return columns[idx];\n    }\n\n    /**\n     * Bottom columns are the ones displayed in the bottom row of a grouped header, or all columns if not using a grouped\n     * header. They are the columns that actually display any data.\n     * @property {Grid.column.Column[]}\n     * @readonly\n     */\n    get bottomColumns() {\n        return this.leaves;\n    }\n\n    /**\n     * Get column by field. To be sure that you are getting exactly the intended column, use {@link Core.data.Store#function-getById Store#getById()} with the\n     * columns id instead.\n     * @param {String} field Field name\n     * @returns {Grid.column.Column}\n     */\n    get(field) {\n        return this.findRecord('field', field, true);\n    }\n\n    /**\n     * Used internally to create a new record in the store. Creates a column of the correct type by looking up the\n     * specified type among registered columns.\n     * @private\n     */\n    createRecord(data) {\n        const\n            { grid = {} } = this, // Some ColumnStore tests lacks Grid\n            { store }     = grid,\n            dataField     = store?.modelClass?.fieldMap?.[data.field];\n\n        let columnClass = this.modelClass;\n\n        // Use the DataField's column definition as a default into which the incoming data is merged\n        if (dataField?.column) {\n            data = Objects.merge({}, dataField.column, data);\n        }\n\n        if (data.type) {\n            columnClass = ColumnStore.getColumnClass(data.type);\n            if (!columnClass) {\n                throw new Error(`Column type '${data.type}' not registered`);\n            }\n        }\n\n        if (data.locked) {\n            data.region = 'locked';\n            delete data.locked;\n        }\n\n        const column = new columnClass(data, this);\n\n        // Doing this after construction, in case the columnClass has a default value for region (Schedulers\n        // TimeAxisColumn has)\n        if (!column.data.region) {\n            column.data.region = grid.defaultRegion || 'normal';\n        }\n\n        // Add missing fields to Grids stores model\n        if (this.autoAddField && !column.noFieldSpecified && store && !dataField) {\n            let fieldDefinition = column.field;\n\n            // Some columns define the type to use for new fields (date, number etc)\n            if (column.constructor.fieldType) {\n                fieldDefinition = {\n                    name : column.field,\n                    type : column.constructor.fieldType\n                };\n            }\n\n            store.modelClass.addField(fieldDefinition);\n        }\n\n        return column;\n    }\n\n    /**\n     * indexOf extended to also accept a columns field, for backward compatibility.\n     * ```\n     * grid.columns.indexOf('name');\n     * ```\n     * @param {Core.data.Model|String} recordOrId\n     * @returns {Number}\n     */\n    indexOf(recordOrId) {\n        if (recordOrId == null) {\n            return -1;\n        }\n        // TODO: build the need for field away\n        const index = super.indexOf(recordOrId);\n        if (index > -1) return index;\n        // no record found by id, find by field since old code relies on that instead of id\n        // TODO: replace such cases with columns id\n        return this.records.findIndex(r => r.field === recordOrId);\n    }\n\n    /**\n     * Checks if any column uses autoHeight\n     * @internal\n     * @property {Boolean}\n     * @readonly\n     */\n    get usesAutoHeight() {\n        return this.find(column => column.autoHeight);\n    }\n\n    /**\n     * Checks if any flex column uses autoHeight\n     * @internal\n     * @property {Boolean}\n     * @readonly\n     */\n    get usesFlexAutoHeight() {\n        return this.find(column => column.autoHeight && column.flex != null);\n    }\n\n    //region Column types\n\n    /**\n     * Call from custom column to register it with ColumnStore. Required to be able to specify type in column config.\n     * @param {Function} columnClass The {@link Grid.column.Column} subclass to register.\n     * @param {Boolean} simpleRenderer Pass `true` if its default renderer does *not* use other fields from the passed\n     * record than its configured {@link Grid.column.Column#config-field}. This enables more granular cell updating\n     * upon record mutation.\n     * @example\n     * // create and register custom column\n     * class CustomColumn {\n     *  static get type() {\n     *      return 'custom';\n     *  }\n     * }\n     * ColumnStore.registerColumnType(CustomColumn, true);\n     * // now possible to specify in column config\n     * let grid = new Grid({\n     *   columns: [\n     *     { type: 'custom', field: 'id' }\n     *   ]\n     * });\n     */\n    static registerColumnType(columnClass, simpleRenderer = false) {\n        columnClass.simpleRenderer = simpleRenderer;\n        (ColumnStore.columnTypes || (ColumnStore.columnTypes = {}))[columnClass.type] = columnClass;\n    }\n\n    /**\n     * Returns registered column class for specified type.\n     * @param type Type name\n     * @returns {Grid.column.Column}\n     * @internal\n     */\n    static getColumnClass(type) {\n        return ColumnStore.columnTypes && ColumnStore.columnTypes[type];\n    }\n\n    /**\n     * Generates a <strong>new </strong> {@link Grid.column.Column} instance which may be subsequently added to this\n     * store to represent the passed {@link Core.data.field.DataField} of the owning Grid's store.\n     * @param {Core.data.field.DataField|String} dataField The {@link Core.data.field.DataField field}\n     * instance or field name to generate a new {@link Grid.column.Column} for.\n     * @param {Object} [defaults] Defaults to apply to the new column.\n     * @returns {Grid.column.Column} A new Column which will render and edit the field correctly.\n     * @example\n     * // Add column for the \"team\" field.\n     * grid.columns.add(grid.columns.generateColumnForField('team', {\n     *     width : 200\n     * }));\n     * @internal\n     */\n    generateColumnForField(dataField, defaults) {\n        if (typeof dataField === 'string' && this.grid) {\n            dataField = this.grid.store?.modelClass.fieldMap[dataField];\n        }\n        let column = dataField.column || columnDefinitions[dataField.type] || {};\n\n        // Upgrade string to be the column tyope\n        if (typeof column === 'string') {\n            column = { type : column };\n        }\n\n        // Configure over defaults\n        column = Object.assign({\n            text  : dataField.text || StringHelper.separate(dataField.name),\n            field : dataField.name\n        }, defaults, column);\n\n        // Special formatting for columns which represent number and integer fields.\n        if (dataField.precision != null) {\n            column.format.maximumFractionDigits = dataField.precision;\n        }\n        if (dataField.columnType) {\n            column.type = dataField.columnType;\n        }\n\n        // Upgrade object to a Column instance.\n        return this.createRecord(column);\n    }\n\n    //endregion\n}\n\n/**\n * Custom {@link Grid.data.ColumnStore} event which triggers when a column is resized, i.e. its width has been changed\n *\n * @param {Function} handler\n * @param {Object} [thisObj]\n */\nexport const columnResizeEvent = (handler, thisObj) => ({\n    update : ({ store, record, changes }) => {\n        let result = true;\n\n        if ('width' in changes || 'minWidth' in changes  || 'maxWidth' in changes || 'flex' in changes) {\n            result = handler.call(thisObj, { store, record, changes });\n        }\n\n        return result;\n    }\n});\n// Can't have this in Column due to circular dependencies\nColumnStore.registerColumnType(Column, true);\n","//TODO: Currently widgets reuse elements already in cell, but performance would improve if entire widget was reused\n\n//TODO: Leaking widget on rerender of row, since the old one is not destroyed\n\nimport WidgetHelper from '../../Core/helper/WidgetHelper.js';\nimport Column from './Column.js';\nimport ColumnStore from '../data/ColumnStore.js';\n\n/**\n * @module Grid/column/WidgetColumn\n */\n\n/**\n * A column that displays widgets in the grid cells.\n *\n * {@inlineexample Grid/column/WidgetColumn.js}\n *\n * ```javascript\n * new Grid({\n *     appendTo : document.body,\n *\n *     columns : [\n *         {\n *              type: 'widget',\n *              text: 'Name',\n *              widgets: [\n *                  { type: 'textfield', name : 'firstName' },\n *                  { type: 'textfield', name : 'lastName' }\n *               ]\n *         }\n *     ]\n * });\n * ```\n *\n * If you use {@link Core.widget.Field Fields} inside this column, the field widget can optionally bind its value to a\n * field in the data model using the {@link Core/widget/Field#config-name} (as shown in the snippet above). This will\n * provide two-way data binding and update the underlying row record as you make changes in the field.\n *\n * If you use a {@link Core.widget.Button} and want it to display the value from the cell as its text, set its\n * {@link Core/widget/Widget#config-defaultBindProperty} to `'text'`:\n *\n * ```javascript\n * new Grid({\n *     columns : [\n *         {\n *              type: 'widget',\n *              widgets: [\n *                  { type: 'button', name : 'age', defaultBindProperty : 'text' },\n *               ]\n *         }\n *     ]\n * });\n * ```\n *\n * There is no `editor` provided. It is the configured widget's responsibility to provide editing if needed.\n *\n * @extends Grid/column/Column\n * @classType widget\n * @column\n */\nexport default class WidgetColumn extends Column {\n\n    //region Config\n\n    static type = 'widget';\n\n    static fields = [\n        /**\n         * An array of {@link Core.widget.Widget} config objects\n         * @config {ContainerItemConfig[]} widgets\n         * @category Common\n         */\n        'widgets'\n    ];\n\n    /**\n     * A renderer function, which gives you access to render data like the current `record`, `cellElement` and the\n     * {@link #config-widgets} of the column. See {@link #config-renderer}\n     * for more information.\n     *\n     * ```javascript\n     * new Grid({\n     *     columns : [\n     *         {\n     *              type: 'check',\n     *              field: 'allow',\n     *              // In the column renderer, we get access to the record and column widgets\n     *              renderer({ record, widgets }) {\n     *                  // Hide checkboxes in certain rows\n     *                  widgets[0].hidden = record.readOnly;\n     *              }\n     *         }\n     *     ]\n     * });\n     * ```\n     *\n     * @param {Object} renderData Object containing renderer parameters\n     * @param {HTMLElement|null} [renderData.cellElement] Cell element, for adding CSS classes, styling etc.\n     *        Can be `null` in case of export\n     * @param {*} renderData.value Value to be displayed in the cell\n     * @param {Core.data.Model} renderData.record Record for the row\n     * @param {Grid.column.Column} renderData.column This column\n     * @param {Core.widget.Widget[]} renderData.widgets An array of the widgets rendered into this cell\n     * @param {Grid.view.Grid} renderData.grid This grid\n     * @param {Grid.row.Row} [renderData.row] Row object. Can be null in case of export. Use the\n     * {@link Grid.row.Row#function-assignCls row's API} to manipulate CSS class names.\n     * @param {Object} [renderData.size] Set `size.height` to specify the desired row height for the current row.\n     *        Largest specified height is used, falling back to configured {@link Grid/view/Grid#config-rowHeight}\n     *        in case none is specified. Can be null in case of export\n     * @param {Number} [renderData.size.height] Set this to request a certain row height\n     * @param {Number} [renderData.size.configuredHeight] Row height that will be used if none is requested\n     * @param {Boolean} [renderData.isExport] True if record is being exported to allow special handling during export\n     * @param {Boolean} [renderData.isMeasuring] True if the column is being measured for a `resizeToFitContent`\n     *        call. In which case an advanced renderer might need to take different actions.\n     * @config {Function} renderer\n     * @category Rendering\n     */\n\n    static get defaults() {\n        return {\n            filterable      : false,\n            sortable        : false,\n            editor          : false,\n            searchable      : false,\n            fitMode         : false,\n            alwaysClearCell : false\n        };\n    }\n\n    //endregion\n\n    //region Init / Destroy\n\n    construct(config, store) {\n        const me = this;\n\n        me.widgetMap = {};\n\n        super.construct(...arguments);\n\n        me.externalRenderer = me.renderer;\n        me.renderer = me.internalRenderer;\n    }\n\n    doDestroy() {\n        // Destroy all the widgets we created.\n        for (const widget of Object.values(this.widgetMap)) {\n            widget.destroy && widget.destroy();\n        }\n        super.doDestroy();\n    }\n\n    // Called by grid when its read-only state is toggled\n    updateReadOnly(readOnly) {\n        for (const widget of Object.values(this.widgetMap)) {\n            if (!widget.cellInfo.record.readOnly) {\n                widget.readOnly = readOnly;\n            }\n        }\n    }\n\n    //endregion\n\n    //region Render\n\n    /**\n     * Renderer that displays a widget in the cell.\n     * @param {Object} renderData Render data\n     * @param {Grid.column.Column} renderData.column Rendered column\n     * @param {Core.data.Model} renderData.record Rendered record\n     * @private\n     */\n    internalRenderer(renderData) {\n        const\n            me                                        = this,\n            { cellElement, column, record, isExport } = renderData,\n            { widgets }                               = column;\n\n        // This renderer might be called from subclasses by accident\n        // This condition saves us from investigating bug reports\n        if (!isExport && widgets) {\n            // If there is no widgets yet and we're going to add them,\n            // need to make sure there is no content left in the cell after its previous usage\n            // by grid features such as grouping feature or so.\n            if (!cellElement.widgets) {\n                // Reset cell content\n                me.clearCell(cellElement);\n            }\n            cellElement.widgets = renderData.widgets = widgets.map((widgetCfg, i) => {\n                let widget, widgetNextSibling;\n\n                // If cell element already has widgets, check if we need to destroy/remove one\n                if (cellElement.widgets) {\n                    // Current widget\n                    widget = cellElement.widgets[i];\n\n                    // Store next element sibling to insert widget to correct position later\n                    widgetNextSibling = widget.element.nextElementSibling;\n\n                    // If we are not syncing content for present widget, remove it from cell and render again later\n                    if (widgetCfg.recreate && widget) {\n                        // destroy widget and remove reference to it\n                        delete me.widgetMap[widget.id];\n                        widget.destroy();\n                        cellElement.widgets[i] = null;\n                    }\n                }\n\n                // Ensure widget is created if first time through\n                if (!widget) {\n                    me.onBeforeWidgetCreate(widgetCfg, renderData);\n                    widgetCfg.recomposeAsync = false;\n                    widget = WidgetHelper.append(widgetCfg, widgetNextSibling ? { insertBefore : widgetNextSibling } : cellElement)[0];\n                    me.widgetMap[widget.id] = widget;\n                    me.onAfterWidgetCreate(widget, renderData);\n\n                    if (widget.name) {\n                        widget.ion({\n                            change : ({ value }) => {\n                                widget.cellInfo.record[widget.name] = value;\n                            }\n                        });\n                    }\n                }\n\n                widget.cellInfo = {\n                    record,\n                    column\n                };\n\n                if (me.grid && !me.meta.isSelectionColumn) {\n                    widget.readOnly = me.grid.readOnly || record.readOnly;\n                }\n\n                if (me.onBeforeWidgetSetValue?.(widget, renderData) !== false) {\n                    const valueProperty = widgetCfg.valueProperty || ('value' in widget && 'value') || widget.defaultBindProperty;\n\n                    if (valueProperty) {\n                        const value = widget.name ? record[widget.name] : renderData.value;\n                        widget[valueProperty] = value;\n                    }\n                }\n\n                me.onAfterWidgetSetValue?.(widget, renderData);\n\n                return widget;\n            });\n        }\n\n        if (isExport) {\n            return null;\n        }\n\n        return this.externalRenderer?.(renderData);\n    }\n\n    //endregion\n\n    //region Other\n\n    /**\n     * Called before widget is created on rendering\n     * @param {ContainerItemConfig} widgetCfg Widget config\n     * @param {Object} renderData Render data\n     * @private\n     */\n    onBeforeWidgetCreate(widgetCfg, renderData) {}\n\n    /**\n     * Called after widget is created on rendering\n     * @param {Core.widget.Widget} widget Created widget\n     * @param {Object} renderData Render data\n     * @private\n     */\n    onAfterWidgetCreate(widget, renderData) {}\n\n    /**\n     * Called before the widget gets its value on rendering. Pass `false` to skip value setting while rendering\n     * @preventable\n     * @function onBeforeWidgetSetValue\n     * @param {Core.widget.Widget} widget Created widget\n     * @param {Object} renderData Render data\n     * @param {Grid.column.Column} renderData.column Rendered column\n     * @param {Core.data.Model} renderData.record Rendered record\n     */\n\n    /**\n     * Called after the widget gets its value on rendering.\n     * @function onAfterWidgetSetValue\n     * @param {Core.widget.Widget} widget Created widget\n     * @param {Object} renderData Render data\n     * @param {Grid.column.Column} renderData.column Rendered column\n     * @param {Core.data.Model} renderData.record Rendered record\n     */\n\n    // Overrides base implementation to cleanup widgets, for example when a cell is reused as part of group header\n    clearCell(cellElement) {\n        if (cellElement.widgets) {\n            cellElement.widgets.forEach(widget => {\n                // Destroy widget and remove reference to it\n                delete this.widgetMap[widget.id];\n                widget.destroy();\n            });\n            cellElement.widgets = null;\n        }\n\n        // Even if there is no widgets need to make sure there is no content left, for example after a cell has been reused as part of group header\n        super.clearCell(cellElement);\n    }\n\n    // Null implementation because there is no way of ascertaining whether the widgets get their width from\n    // the column, or the column shrinkwraps the Widget.\n    // Remember that the widget could have a width from a CSS rule which we cannot read.\n    // It might have width: 100%, or a flex which would mean it is sized by us, but we cannot read that -\n    // getComputedStyle would return the numeric width.\n    resizeToFitContent() {}\n\n    //endregion\n}\n\nColumnStore.registerColumnType(WidgetColumn);\nWidgetColumn.exposeProperties();\n","import StringHelper from '../../Core/helper/StringHelper.js';\nimport ColumnStore from '../data/ColumnStore.js';\nimport WidgetColumn from './WidgetColumn.js';\nimport Checkbox from '../../Core/widget/Checkbox.js';\n\n/**\n * @module Grid/column/CheckColumn\n */\n\n/**\n * A column that displays a checkbox in the cell. The value of the backing field is toggled by the checkbox.\n *\n * Toggling of the checkboxes is disabled if a record is readOnly or if the CellEdit feature is not enabled.\n *\n * This column renders a {@link Core.widget.Checkbox checkbox} into each cell, and it is not intended to be changed.\n * If you want to hide certain checkboxes, you can use the {@link #config-renderer} method to access the checkbox widget\n * as it is being rendered.\n *\n * <div class=\"note\">\n * It is <strong>not valid</strong> to use this column without a {@link #config-field} setting because the\n * checked/unchecked state needs to be backed up in a record because rows are recycled and the state will be lost when a\n * row is reused.\n * </div>\n *\n * @extends Grid/column/WidgetColumn\n *\n * @example\n * new Grid({\n *     appendTo : document.body,\n *\n *     columns : [\n *         {\n *              type: 'check',\n *              field: 'allow',\n *              // In the column renderer, we get access to the record and CheckBox widget\n *              renderer({ record, widgets }) {\n *                  // Hide checkboxes in certain rows\n *                  widgets[0].hidden = record.readOnly;\n *              }\n *         }\n *     ]\n * });\n *\n * @classType check\n * @inlineexample Grid/column/CheckColumn.js\n * @column\n */\nexport default class CheckColumn extends WidgetColumn {\n    //region Config\n\n    static $name = 'CheckColumn';\n\n    static type = 'check';\n\n    static fields = [\n        'checkCls',\n        'showCheckAll',\n        'onAfterWidgetSetValue',\n        'onBeforeWidgetSetValue',\n        'callOnFunctions',\n        'onBeforeToggle',\n        'onToggle',\n        'onToggleAll'\n    ];\n\n    static defaults = {\n        align : 'center',\n\n        /**\n         * CSS class name to add to checkbox\n         * @config {String}\n         * @category Rendering\n         */\n        checkCls : null,\n\n        /**\n         * True to show a checkbox in the column header to be able to select/deselect all rows\n         * @config {Boolean}\n         */\n        showCheckAll : false,\n\n        sortable : true,\n\n        filterable : true,\n\n        widgets : [{\n            type          : 'checkbox',\n            valueProperty : 'checked'\n        }]\n    };\n\n    construct(config, store) {\n        super.construct(...arguments);\n\n        const me = this;\n\n        Object.assign(me, {\n            externalHeaderRenderer         : me.headerRenderer,\n            externalOnBeforeWidgetSetValue : me.onBeforeWidgetSetValue,\n            externalOnAfterWidgetSetValue  : me.onAfterWidgetSetValue,\n\n            onBeforeWidgetSetValue : me.internalOnBeforeWidgetSetValue,\n            onAfterWidgetSetValue  : me.internalOnAfterWidgetSetValue,\n            headerRenderer         : me.internalHeaderRenderer\n        });\n\n        if (!me.meta.isSelectionColumn) {\n            const modelClass = me.grid?.store.modelClass;\n\n            if (!me.field) {\n                console.warn('CheckColumn MUST be configured with a field, otherwise the checked state will not be persistent. Widgets are recycled and reused');\n            }\n            else if (modelClass && !modelClass.fieldMap[me.field] && !me.constructor.suppressNoModelFieldWarning) {\n                console.warn(me.$$name + ' is configured with a field, but this is not part of your Model `fields` collection.');\n                modelClass.addField({ name : me.field, type : 'boolean' });\n            }\n        }\n    }\n\n    doDestroy() {\n        this.headerCheckbox?.destroy();\n        super.doDestroy();\n    }\n\n    internalHeaderRenderer({ headerElement, column }) {\n        let returnValue;\n\n        headerElement.classList.add('b-check-header');\n\n        if (column.showCheckAll) {\n            headerElement.classList.add('b-check-header-with-checkbox');\n\n            if (column.headerCheckbox) {\n                headerElement.appendChild(column.headerCheckbox.element);\n            }\n            else {\n                column.headerCheckbox = new Checkbox({\n                    appendTo          : headerElement,\n                    owner             : this.grid,\n                    ariaLabel         : 'L{Checkbox.toggleSelection}',\n                    internalListeners : {\n                        change  : 'onCheckAllChange',\n                        thisObj : column\n                    }\n                });\n            }\n        }\n        else {\n            returnValue = column.headerText;\n        }\n\n        returnValue = column.externalHeaderRenderer ? column.externalHeaderRenderer.call(this, ...arguments) : returnValue;\n\n        return column.showCheckAll ? undefined : returnValue;\n    }\n\n    updateCheckAllState(value) {\n        if (this.headerCheckbox) {\n            this.suspendEvents();\n            this.headerCheckbox.checked = value;\n            this.resumeEvents();\n        }\n    }\n\n    onCheckAllChange({ checked }) {\n        const me = this;\n\n        // If this column is bound to a field, update all records\n        if (me.field) {\n            const { store } = me.grid;\n\n            store.beginBatch();\n            store.forEach(record => me.updateRecord(record, me.field, checked));\n            store.endBatch();\n        }\n\n        /**\n         * Fired when the header checkbox is clicked to toggle its checked status.\n         * @event toggleAll\n         * @param {Grid.column.CheckColumn} source This Column\n         * @param {Boolean} checked The checked status of the header checkbox.\n         */\n        me.trigger('toggleAll', { checked });\n    }\n\n    //endregion\n\n    internalRenderer({ value, isExport, record, cellElement }) {\n        if (isExport) {\n            return value == null ? '' : value;\n        }\n\n        const result = super.internalRenderer(...arguments);\n\n        if (record.readOnly && !this.meta.isSelectionColumn) {\n            cellElement.widgets[0].readOnly = true;\n        }\n\n        return result;\n    }\n\n    //region Widget rendering\n\n    onBeforeWidgetCreate(widgetCfg, event) {\n        widgetCfg.cls = this.checkCls;\n    }\n\n    onAfterWidgetCreate(widget, event) {\n        event.cellElement.widget = widget;\n\n        widget.ion({\n            beforeChange : 'onBeforeCheckboxChange',\n            change       : 'onCheckboxChange',\n            thisObj      : this\n        });\n    }\n\n    internalOnBeforeWidgetSetValue(widget) {\n        widget.record     = widget.cellInfo.record;\n        this.isInitialSet = true;\n        this.externalOnBeforeWidgetSetValue?.(...arguments);\n    }\n\n    internalOnAfterWidgetSetValue(widget) {\n        this.isInitialSet = false;\n        this.externalOnAfterWidgetSetValue?.(...arguments);\n    }\n\n    //endregion\n\n    //region Events\n\n    onBeforeCheckboxChange({ source, checked, userAction }) {\n        const\n            me         = this,\n            { grid }   = me,\n            { record } = source.cellInfo;\n\n        // If we are bound to a data field, ensure we respect cellEdit setting\n        if ((userAction && me.field && (!grid.features.cellEdit || grid.features.cellEdit.disabled)) || (me.meta.isSelectionColumn && !grid.isSelectable(record) && checked)) {\n            return false;\n        }\n\n        if (!me.isInitialSet) {\n            /**\n             * Fired when a cell is clicked to toggle its checked status. Returning `false` will prevent status change.\n             * @event beforeToggle\n             * @param {Grid.column.Column} source This Column\n             * @param {Core.data.Model} record The record for the row containing the cell.\n             * @param {Boolean} checked The new checked status of the cell.\n             */\n            return me.trigger('beforeToggle', { record, checked });\n        }\n    }\n\n    onCheckboxChange({ source, checked }) {\n        if (!this.isInitialSet) {\n            const\n                me         = this,\n                { record } = source.cellInfo,\n                { field }  = me;\n\n            if (field) {\n                me.updateRecord(record, field, checked);\n\n                // Keep header checkbox in sync with reality.\n                if (checked) {\n                    // We check whether *all* records in the store are checked including filtered out ones.\n                    me.updateCheckAllState(me.grid.store.every(r => r[field], null, true));\n                }\n                else {\n                    me.updateCheckAllState(false);\n                }\n            }\n\n            /**\n             * Fired when a cell is clicked to toggle its checked status.\n             * @event toggle\n             * @param {Grid.column.Column} source This Column\n             * @param {Core.data.Model} record The record for the row containing the cell.\n             * @param {Boolean} checked The new checked status of the cell.\n             */\n            me.trigger('toggle', { record, checked });\n        }\n    }\n\n    updateRecord(record, field, checked) {\n        const setterName = `set${StringHelper.capitalize(field)}`;\n        if (record[setterName]) {\n            record[setterName](checked);\n        }\n        else {\n            record.set(field, checked);\n        }\n    }\n\n    //endregion\n\n    onCellKeyDown({ event, cellElement }) {\n\n        // SPACE key toggles the checkbox\n        if (event.key === ' ') {\n            const checkbox = cellElement.widget;\n\n            checkbox?.toggle();\n\n            // Prevent native browser scrolling\n            event.preventDefault();\n\n            // KeyMap and other features (like context menu) must not process this.\n            event.handled = true;\n        }\n    }\n\n    // This function is not meant to be called by any code other than Base#getCurrentConfig().\n    // It extracts the current configs (fields) for the column, with special handling for the hooks\n    getCurrentConfig(options) {\n        const result = super.getCurrentConfig(options);\n\n        delete result.onBeforeWidgetSetValue;\n        delete result.onAfterWidgetSetValue;\n\n        if (this.externalOnBeforeWidgetSetValue) {\n            result.onBeforeWidgetSetValue = this.externalOnBeforeWidgetSetValue;\n        }\n\n        if (this.externalOnAfterWidgetSetValue) {\n            result.onAfterWidgetSetValue = this.externalOnAfterWidgetSetValue;\n        }\n\n        return result;\n    }\n}\n\nColumnStore.registerColumnType(CheckColumn, true);\n","import Column from './Column.js';\nimport ColumnStore from '../data/ColumnStore.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\n\n/**\n * @module Grid/column/RowNumberColumn\n */\n\n/**\n * A column that displays the row number in each cell.\n *\n * There is no `editor`, since value is read-only.\n *\n * ```javascript\n * const grid = new Grid({\n *   appendTo : targetElement,\n *   width    : 300,\n *   columns  : [\n *     { type : 'rownumber' }\n *   ]\n * });\n *\n * @extends Grid/column/Column\n *\n * @classType rownumber\n * @inlineexample Grid/column/RowNumberColumn.js\n * @column\n */\nexport default class RowNumberColumn extends Column {\n\n    static $name = 'RowNumberColumn';\n\n    static type = 'rownumber';\n\n    static get defaults() {\n        return {\n            /**\n             * @config {Boolean} groupable\n             * @hide\n             */\n            groupable : false,\n\n            /**\n             * @config {Boolean} sortable\n             * @hide\n             */\n            sortable : false,\n\n            /**\n             * @config {Boolean} filterable\n             * @hide\n             */\n            filterable : false,\n\n            /**\n             * @config {Boolean} searchable\n             * @hide\n             */\n            searchable : false,\n\n            /**\n             * @config {Boolean} resizable\n             * @hide\n             */\n            resizable : false,\n\n            /**\n             * @config {Boolean} draggable\n             * @hide\n             */\n            draggable : false,\n\n            minWidth : 50,\n            width    : 50,\n            align    : 'center',\n            text     : '#',\n            editor   : false\n        };\n    }\n\n    construct(config) {\n        super.construct(...arguments);\n\n        const\n            me       = this,\n            { grid } = me;\n\n        me.internalCellCls        = 'b-row-number-cell';\n        me.externalHeaderRenderer = me.headerRenderer;\n        me.headerRenderer         = me.internalHeaderRenderer;\n\n        if (grid) {\n            // Update our width when the store mutates (tests test Columns in isolation with no grid, so we must handle that!)\n            grid.ion({\n                bindStore : 'bindStore',\n                thisObj   : me\n            });\n\n            me.bindStore({ store : grid.store, initial : true });\n\n            if (grid.store.count && !grid.rendered) {\n                grid.ion({\n                    paint   : 'resizeToFitContent',\n                    thisObj : me,\n                    once    : true\n                });\n            }\n        }\n    }\n\n    get groupHeaderReserved() {\n        return true;\n    }\n\n    bindStore({ store, initial }) {\n        const me = this;\n\n        me.detachListeners('grid');\n\n        store.ion({\n            name                                  : 'grid',\n            [`change${me.grid.asyncEventSuffix}`] : 'onStoreChange',\n            thisObj                               : me\n        });\n\n        if (!initial) {\n            me.resizeToFitContent();\n        }\n    }\n\n    onStoreChange({ action }) {\n        if (action === 'dataset' || action === 'add' || action === 'remove' || action === 'removeall') {\n            this.resizeToFitContent();\n        }\n    }\n\n    /**\n     * Renderer that displays the row number in the cell.\n     * @private\n     */\n    renderer({ record, grid }) {\n        return record.isSpecialRow ? '' : grid.store.indexOf(record, true) + 1;\n    }\n\n    /**\n     * Resizes the column to match the widest string in it. Called when you double click the edge between column\n     * headers\n     */\n    resizeToFitContent() {\n        const\n            { grid }  = this,\n            { store } = grid,\n            { count } = store;\n\n        if (count && !this.hidden) {\n            const cellElement = grid.element.querySelector(`.b-grid-cell[data-column-id=\"${this.id}\"]`);\n\n            // cellElement might not exist, e.g. when trial is expired\n            if (cellElement) {\n                const\n                    cellPadding = parseInt(DomHelper.getStyleValue(cellElement, 'padding-left')),\n                    maxWidth    = DomHelper.measureText(count, cellElement);\n\n                this.width = Math.max(this.minWidth, maxWidth + 2 * cellPadding);\n            }\n        }\n    }\n\n    set flex(f) {\n        //<debug>\n        if (f != null) {\n            throw new Error('RowNumberer column may not be flexed');\n        }\n        //</debug>\n    }\n\n    internalHeaderRenderer({ headerElement, column }) {\n        headerElement.classList.add('b-rownumber-header');\n        return column.externalHeaderRenderer?.call(this, ...arguments) || column.headerText;\n    }\n}\n\nColumnStore.registerColumnType(RowNumberColumn, true);\n","import StringHelper from '../../Core/helper/StringHelper.js';\n\n/**\n * @module Grid/feature/GridFeatureManager\n */\n\nconst\n    consumerToFeatureMap        = new Map(),\n    consumerToDefaultFeatureMap = new Map(),\n    DEFAULT_FOR_TYPE            = 'Grid',\n    remapToBase                 = {\n        Grid         : 'GridBase',\n        Scheduler    : 'SchedulerBase',\n        SchedulerPro : 'SchedulerProBase',\n        Gantt        : 'GanttBase'\n    },\n    classNameFix = /\\$\\d+$/;\n\n/**\n * Static class intended to register and query grid features (also applies to Scheduler, Scheduler Pro and Gantt).\n *\n * A feature for Grid, Scheduler, Scheduler Pro or Gantt must extend {@link Core/mixin/InstancePlugin}.\n *\n * <div class=\"note\"> Note that features for Calendar and TaskBoard differ, they should not be registered with\n * GridFeatureManager, and they use different base classes.\n * </div>\n *\n * ## Registering a custom feature\n *\n * First define a new feature, extending InstancePlugin:\n *\n * ```javascript\n * export default class MyFeature extends InstancePlugin {\n *    // Class name, needed since the actual class name might be mangled by the minifier\n *    static $name = 'MyFeature';\n *\n *    construct(client, config) {\n *        // Set things up here\n *    }\n * }\n * ```\n *\n * Then register it with GridFeatureManager:\n *\n * ```javascript\n * GridFeatureManager.registerFeature(MyFeature);\n * ```\n *\n * After that it is ready to use:\n *\n * ```javascript\n * const grid = new Grid({\n *    features : {\n *      myFeature : true\n *    }\n * });\n *\n * @class\n */\nexport default class GridFeatureManager {\n    /**\n     * Register a feature class with the Grid. Enables it to be created and configured using config Grid#features.\n     * @param {Function} featureClass The feature class constructor to register\n     * @param {Boolean} [onByDefault] Specify true to have the feature enabled per default\n     * @param {String|String[]} [forType] Specify a type to let the class applying the feature to determine if it should\n     * use it\n     */\n    static registerFeature(featureClass, onByDefault = false, forType = null, as = null) {\n        // Our built-in features should all define $name to survive minification/obfuscation, but user defined features might not\n        as = StringHelper.uncapitalize(as || (Object.prototype.hasOwnProperty.call(featureClass, '$name') && featureClass.$$name) || featureClass.name);\n\n        // Remove webpack's disambiguation suffix.\n        // For example ExcelExporter in Scheduler will be called ExcelExporter$1\n        // It must be found as ExcelExporter in the Scheduler's feature Map, so correct the name.\n        as = as.replace(classNameFix, '');\n\n        if (!Array.isArray(forType)) {\n            forType = [forType || DEFAULT_FOR_TYPE];\n        }\n\n        forType.forEach(forType => {\n            const\n                type                       = remapToBase[forType] || forType,\n                consumerFeaturesMap        = consumerToFeatureMap.get(type) || new Map(),\n                consumerDefaultFeaturesMap = consumerToDefaultFeatureMap.get(type) || new Map();\n\n            consumerFeaturesMap.set(as, featureClass);\n            consumerDefaultFeaturesMap.set(featureClass, onByDefault);\n\n            consumerToFeatureMap.set(type, consumerFeaturesMap);\n            consumerToDefaultFeatureMap.set(type, consumerDefaultFeaturesMap);\n        });\n    }\n\n    /**\n     * Get all the features registered for the given type name in an object where keys are feature names and values are\n     * feature constructors.\n     *\n     * @param {String} [forType]\n     * @returns {Object}\n     */\n    static getTypeNameFeatures(forType = DEFAULT_FOR_TYPE) {\n        const\n            type                = remapToBase[forType] || forType,\n            consumerFeaturesMap = consumerToFeatureMap.get(type),\n            features            = {};\n\n        if (consumerFeaturesMap) {\n            consumerFeaturesMap.forEach((featureClass, as) => features[as] = featureClass);\n        }\n\n        return features;\n    }\n\n    /**\n     * Get all the default features registered for the given type name in an object where keys are feature names and\n     * values are feature constructors.\n     *\n     * @param {String} [forType]\n     * @returns {Object}\n     */\n    static getTypeNameDefaultFeatures(forType = DEFAULT_FOR_TYPE) {\n        const\n            type                       = remapToBase[forType] || forType,\n            consumerFeaturesMap        = consumerToFeatureMap.get(type),\n            consumerDefaultFeaturesMap = consumerToDefaultFeatureMap.get(type);\n\n        const features = {};\n\n        if (consumerFeaturesMap && consumerDefaultFeaturesMap) {\n            consumerFeaturesMap.forEach((featureClass, as) => {\n                if (consumerDefaultFeaturesMap.get(featureClass)) {\n                    features[as] = featureClass;\n                }\n            });\n        }\n\n        return features;\n    }\n\n    /**\n     * Gets all the features registered for the given instance type name chain. First builds the type name chain then\n     * queries for features for each type name and combines them into one object, see\n     * {@link #function-getTypeNameFeatures-static}() for returned object description.\n     *\n     * If feature is registered for both parent and child type name then feature for child overrides feature for parent.\n     *\n     * @param {Object} instance\n     * @returns {Object}\n     */\n    static getInstanceFeatures(instance) {\n        return instance.$meta.names.reduce(\n            (features, typeName) => Object.assign(features, this.getTypeNameFeatures(typeName)),\n            {}\n        );\n    }\n\n    /**\n     * Gets all the *default* features registered for the given instance type name chain. First builds the type name\n     * chain then queries for features for each type name and combines them into one object, see\n     * {@link #function-getTypeNameFeatures-static}() for returned object description.\n     *\n     * If feature is registered for both parent and child type name then feature for child overrides feature for parent.\n     *\n     * @param {Object} instance\n     * @returns {Object}\n     */\n    static getInstanceDefaultFeatures(instance) {\n        return instance.$meta.names.reduce(\n            (features, typeName) => Object.entries(\n                this.getTypeNameFeatures(typeName)\n            ).reduce(\n                (features, [as, featureClass]) => {\n                    if (this.isDefaultFeatureForTypeName(featureClass, typeName)) {\n                        features[as] = featureClass;\n                    }\n                    else {\n                        delete features[as];\n                    }\n                    return features;\n                },\n                features\n            ),\n            {}\n        );\n    }\n\n    /**\n     * Checks if the given feature class is default for the type name\n     *\n     * @param {Core.mixin.InstancePlugin} featureClass Feature to check\n     * @param {String} [forType]\n     * @returns {Boolean}\n     */\n    static isDefaultFeatureForTypeName(featureClass, forType = DEFAULT_FOR_TYPE) {\n        const\n            type                       = remapToBase[forType] || forType,\n            consumerDefaultFeaturesMap = consumerToDefaultFeatureMap.get(type);\n        return consumerDefaultFeaturesMap && consumerDefaultFeaturesMap.get(featureClass) || false;\n    }\n\n    /**\n     * Checks if the given feature class is default for the given instance type name chain. If the feature is not\n     * default for the parent type name but it is for the child type name, then the child setting overrides the parent\n     * one.\n     *\n     * @param {Core.mixin.InstancePlugin} featureClass Feature to check\n     * @param {String} [forType]\n     * @returns {Boolean}\n     */\n    static isDefaultFeatureForInstance(featureClass, instance) {\n        //const typeChain = ObjectHelper.getTypeNameChain(instance);\n        const typeChain = instance.$meta.names.slice().reverse();\n\n        let result = null;\n\n        for (let i = 0, len = typeChain.length; i < len && result === null; ++i) {\n\n            const consumerDefaultFeaturesMap = consumerToDefaultFeatureMap.get(typeChain[i]);\n\n            if (consumerDefaultFeaturesMap && consumerDefaultFeaturesMap.has(featureClass)) {\n                result = consumerDefaultFeaturesMap.get(featureClass);\n            }\n        }\n\n        return result || false;\n    }\n\n    /**\n     * Resets feature registration date, used in tests to reset state after test\n     *\n     * @internal\n     */\n    static reset() {\n        consumerToFeatureMap.clear();\n        consumerToDefaultFeatureMap.clear();\n    }\n}\n","//TODO: Maybe some more way to stop editing in touch mode (in case grid fills entire page...)\n\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport Editor from '../../Core/widget/Editor.js';\nimport GlobalEvents from '../../Core/GlobalEvents.js';\nimport MessageDialog from '../../Core/widget/MessageDialog.js';\nimport Location from '../util/Location.js';\nimport '../../Core/widget/NumberField.js';\nimport '../../Core/widget/Combo.js';\nimport '../../Core/widget/DateField.js';\nimport '../../Core/widget/TimeField.js';\n\nconst editingActions = {\n    finishAndEditNextRow  : 1,\n    finishAndEditPrevRow  : 1,\n    finishEditing         : 1,\n    cancelEditing         : 1,\n    finishAndEditNextCell : 1,\n    finishAndEditPrevCell : 1\n};\n\n/**\n * @module Grid/feature/CellEdit\n */\n\n/**\n * Adding this feature to the grid and other Bryntum products which are based on the Grid (i.e. Scheduler, SchedulerPro, and Gantt)\n * enables cell editing. Any subclass of {@link Core.widget.Field Field} can be used\n * as editor for the {@link Grid.column.Column Column}. The most popular are:\n *\n * - {@link Core.widget.TextField TextField}\n * - {@link Core.widget.NumberField NumberField}\n * - {@link Core.widget.DateField DateField}\n * - {@link Core.widget.TimeField TimeField}\n * - {@link Core.widget.Combo Combo}\n *\n * Usage instructions:\n * ## Start editing\n * * Double click on a cell\n * * Press [ENTER] or [F2] with a cell selected (see {@link #keyboard-shortcuts Keyboard shortcuts} below)\n * * It is also possible to change double click to single click to start editing, using the {@link #config-triggerEvent} config\n *\n * ```javascript\n * new Grid({\n *    features : {\n *        cellEdit : {\n *            triggerEvent : 'cellclick'\n *        }\n *    }\n * });\n * ```\n *\n * ## Instant update\n * If {@link Grid.column.Column#config-instantUpdate} on the column is set to true, record will be\n * updated instantly as value in the editor is changed. In combination with {@link Core.data.Store#config-autoCommit} it\n * could result in excessive requests to the backend.\n * By default instantUpdate is false, but it is enabled for some special columns, such as Duration column in Scheduler\n * Pro and all date columns in Gantt.\n *\n * ## Keyboard shortcuts\n * ### While not editing\n * | Keys        | Action       | Action description                    |\n * |-------------|------------- |---------------------------------------|\n * | Enter       | startEditing | Starts editing currently focused cell |\n * | F2          | startEditing | Starts editing currently focused cell |\n *\n * ### While editing\n * | Keys        | Action                 | Action description                                                                        |\n * |-------------|------------------------|-------------------------------------------------------------------------------------------|\n * | Enter       | finishAndEditNextRow  | Finish editing and start editing the same cell in next row                                 |\n * | Shift+Enter | finishAndEditPrevRow  | Finish editing and start editing the same cell in previous row                             |\n * | F2          | finishEditing         | Finish editing                                                                             |\n * | Ctrl+Enter  | finishAllSelected     | If {@link #config-multiEdit} is active, this applies new value on all selected rows/cells  |\n * | Ctrl+Enter  | finishEditing         | Finish editing                                                                             |\n * | Escape      | cancelEditing         | By default, first reverts the value back to its original value, next press cancels editing |\n * | Tab         | finishAndEditNextCell | Finish editing and start editing the next cell                                             |\n * | Shift+Tab   | finishAndEditPrevCell | Finish editing and start editing the previous cell                                         |\n *\n *\n * For more information on how to customize keyboard shortcuts, please see\n * [our guide](#Grid/guides/customization/keymap.md).\n *\n * ## Editor configuration\n * Columns specify editor in their configuration. Editor can also by set by using a column type. Columns\n * may also contain these three configurations which affect how their cells are edited:\n * * {@link Grid.column.Column#config-invalidAction}\n * * {@link Grid.column.Column#config-revertOnEscape}\n * * {@link Grid.column.Column#config-finalizeCellEdit}\n *\n * ## Preventing editing of certain cells\n * You can prevent editing on a column by setting `editor` to false:\n *\n * ```javascript\n * new Grid({\n *    columns : [\n *       {\n *          type   : 'number',\n *          text   : 'Age',\n *          field  : 'age',\n *          editor : false\n *       }\n *    ]\n * });\n * ```\n * To prevent editing in a specific cell, listen to the {@link #event-beforeCellEditStart} and return false:\n *\n * ```javascript\n * grid.on('beforeCellEditStart', ({ editorContext }) => {\n *     return editorContext.column.field !== 'id';\n * });\n * ```\n\n * ## Choosing field on the fly\n * To use an alternative input field to edit a cell, listen to the {@link #event-beforeCellEditStart} and\n * set the `editor` property of the context to the input field you want to use:\n *\n * ```javascript\n * grid.on('beforeCellEditStart', ({ editorContext }) => {\n *     return editorContext.editor = myDateField;\n * });\n * ```\n *\n * ## Loading remote data into a combo box cell editor\n * If you need to prepare or modify the data shown by the cell editor, e.g. load remote data into the store used by a combo,\n * listen to the {@link #event-startCellEdit} event:\n * ```javascript\n * const employeeStore = new AjaxStore({ readUrl : '/cities' }); // A server endpoint returning data like:\n *                                                               // [{ id : 123, name : 'Bob Mc Bob' }, { id : 345, name : 'Lind Mc Foo' }]\n *\n * new Grid({\n *     // Example data including a city field which is an id used to look up entries in the cityStore above\n *     data : [\n *         { id : 1, name : 'Task 1', employeeId : 123 },\n *         { id : 2, name : 'Task 2', employeeId : 345 }\n *     ],\n *     columns : [\n *       {\n *          text   : 'Task',\n *          field  : 'name'\n *       },\n *       {\n *          text   : 'Assigned to',\n *          field  : 'employeeId',\n *          editor : {\n *               type : 'combo',\n *               store : employeeStore,\n *               // specify valueField'/'displayField' to match the data format in the employeeStore store\n *               valueField : 'id',\n *               displayField : 'name'\n *           },\n *           renderer : ({ value }) {\n *                // Use a renderer to show the employee name, which we find by querying employeeStore by the id of the grid record\n *                return employeeStore.getById(value)?.name;\n *           }\n *       }\n *    ],\n *    listeners : {\n *        // When editing, you might want to fetch data for the combo store from a remote resource\n *        startCellEdit({ editorContext }) {\n *            const { record, editor, column } = editorContext;\n *            if (column.field === 'employeeId') {\n *                // Load possible employees to assign to this particular task\n *                editor.inputField.store.load({ task : record.id });\n *            }\n *       }\n *    }\n * });\n * ```\n *\n * ## Editing on touch devices\n *\n * On touch devices, a single tap navigates and tapping an already selected cell after a short delay starts the editing.\n *\n * This feature is **enabled** by default.\n *\n * @extends Core/mixin/InstancePlugin\n *\n * @demo Grid/celledit\n * @classtype cellEdit\n * @inlineexample Grid/feature/CellEdit.js\n * @feature\n */\nexport default class CellEdit extends Delayable(InstancePlugin) {\n    //region Config\n\n    static $name = 'CellEdit';\n\n    // Default configuration\n    static get defaultConfig() {\n        return {\n            /**\n             * Set to true to select the field text when editing starts\n             * @config {Boolean}\n             * @default\n             */\n            autoSelect : true,\n\n            /**\n             * What action should be taken when focus moves leaves the cell editor, for example when clicking outside.\n             * May be `'complete'` or `'cancel`'.\n             * @config {'complete'|'cancel'}\n             * @default\n             */\n            blurAction : 'complete',\n\n            /**\n             * Set to `false` to stop editing when clicking another cell after a cell edit.\n             * @config {Boolean}\n             * @default\n             */\n            continueEditingOnCellClick : true,\n\n            /**\n             * Set to true to have TAB key on the last cell (and ENTER anywhere in the last row) in the data set create\n             * a new record and begin editing it at its first editable cell.\n             *\n             * If a customized {@link #config-keyMap} is used, this setting will affect the customized keys instead of\n             * ENTER and TAB.\n             *\n             * If this is configured as an object, it is used as the default data value set for each new record.\n             * @config {Boolean|Object}\n             */\n            addNewAtEnd : null,\n\n            /**\n             * Set to `true` to start editing when user starts typing text on a focused cell (as in Excel)\n             * @config {Boolean}\n             * @default false\n             */\n            autoEdit : null,\n\n            /**\n             * Set to `false` to not start editing next record when user presses enter inside a cell editor (or previous\n             * record if SHIFT key is pressed). This is set to `false` when {@link #config-autoEdit} is `true`. Please\n             * note that these key combinations could be different if a customized {@link #config-keyMap} is used.\n             * @config {Boolean}\n             * @default\n             */\n            editNextOnEnterPress : true,\n\n            /**\n             * Class to use as an editor. Default value: {@link Core.widget.Editor}\n             * @config {Core.widget.Widget}\n             * @typings {typeof Widget}\n             * @internal\n             */\n            editorClass : Editor,\n\n            /**\n             * The name of the grid event that will trigger cell editing. Defaults to\n             * {@link Grid.view.mixin.GridElementEvents#event-cellDblClick celldblclick} but can be changed to any other event,\n             * such as {@link Grid.view.mixin.GridElementEvents#event-cellClick cellclick}.\n             *\n             * ```javascript\n             * features : {\n             *     cellEdit : {\n             *         triggerEvent : 'cellclick'\n             *     }\n             * }\n             * ```\n             *\n             * @config {String}\n             * @default\n             */\n            triggerEvent : 'celldblclick',\n\n            // To edit a cell using a touch gesture, at least 300ms should have passed since last cell tap\n            touchEditDelay : 300,\n\n            focusCellAnimationDuration : false,\n\n            /**\n             * If set to `true` (which is default) this will make it possible to edit current column in multiple rows\n             * simultaneously.\n             *\n             * This is achieved by:\n             * 1. Select multiple rows or row's cells\n             * 2. Start editing simultaneously as selecting the last row or cell\n             * 3. When finished editing, press Ctrl+Enter to apply the new value to all selected rows.\n             *\n             * If a customized {@link #config-keyMap} is used, the Ctrl+Enter combination could map to something else.\n             *\n             * @config {Boolean}\n             * @default\n             */\n            multiEdit : true,\n\n            /**\n             * See {@link #keyboard-shortcuts Keyboard shortcuts} for details\n             * @config {Object<String,String>}\n             */\n            keyMap : {\n                Enter         : ['startEditing', 'finishAndEditNextRow'],\n                'Ctrl+Enter'  : ['finishAllSelected', 'finishEditing'],\n                'Shift+Enter' : 'finishAndEditPrevRow',\n                'Alt+Enter'   : 'finishEditing',\n                F2            : ['startEditing', 'finishEditing'],\n                Escape        : 'cancelEditing',\n                Tab           : 'finishAndEditNextCell',\n                'Shift+Tab'   : 'finishAndEditPrevCell'\n            }\n        };\n    }\n\n    // Plugin configuration. This plugin chains some of the functions in Grid.\n    static get pluginConfig() {\n        return {\n            assign : ['startEditing', 'finishEditing', 'cancelEditing'],\n            before : ['onElementKeyDown', 'onElementPointerUp'],\n            chain  : ['onElementClick', 'bindStore']\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    construct(grid, config) {\n        super.construct(grid, config);\n\n        const\n            me            = this,\n            gridListeners = {\n                renderRows : 'onGridRefreshed',\n                cellClick  : 'onCellClick',\n                thisObj    : me\n            };\n\n        me.grid = grid;\n\n        if (me.triggerEvent !== 'cellclick') {\n            gridListeners[me.triggerEvent] = 'onTriggerEditEvent';\n        }\n\n        if (me.autoEdit && !('editNextOnEnterPress' in config)) {\n            me.editNextOnEnterPress = false;\n        }\n\n        grid.ion(gridListeners);\n\n        grid.rowManager.ion({\n            changeTotalHeight : 'onGridRefreshed',\n            thisObj           : me\n        });\n        me.bindStore(grid.store);\n    }\n\n    bindStore(store) {\n        this.detachListeners('store');\n\n        store.ion({\n            name       : 'store',\n            update     : 'onStoreUpdate',\n            beforeSort : 'onStoreBeforeSort',\n            thisObj    : this\n        });\n    }\n\n    /**\n     * Displays an OK / Cancel confirmation dialog box owned by the current Editor. This is intended to be\n     * used by {@link Grid.column.Column#config-finalizeCellEdit} implementations. The returned promise resolves passing\n     * `true` if the \"OK\" button is pressed, and `false` if the \"Cancel\" button is pressed. Typing `ESC` rejects.\n     * @param {Object} options An options object for what to show.\n     * @param {String} [options.title] The title to show in the dialog header.\n     * @param {String} [options.message] The message to show in the dialog body.\n     * @param {String|Object} [options.cancelButton] A text or a config object to apply to the Cancel button.\n     * @param {String|Object} [options.okButton] A text or config object to apply to the OK button.\n     */\n    async confirm(options) {\n        let result = true;\n\n        if (this.editorContext) {\n            // The input field must not lose containment of focus during this confirmation\n            // so temporarily make the MessageDialog a descendant widget.\n            MessageDialog.owner = this.editorContext.editor.inputField;\n            options.rootElement = this.grid.rootElement;\n            result = await MessageDialog.confirm(options);\n            MessageDialog.owner = null;\n        }\n\n        return result === MessageDialog.yesButton;\n    }\n\n    doDestroy() {\n        // To kill timeouts\n        this.grid.columns.allRecords.forEach(column => {\n            column._cellEditor?.destroy();\n        });\n\n        super.doDestroy();\n    }\n\n    doDisable(disable) {\n        if (disable && !this.isConfiguring) {\n            this.cancelEditing(true);\n        }\n\n        super.doDisable(disable);\n    }\n\n    set disabled(disabled) {\n        super.disabled = disabled;\n    }\n\n    get disabled() {\n        const { grid } = this;\n\n        return Boolean(super.disabled || grid.disabled || grid.readOnly);\n    }\n\n    //endregion\n\n    //region Editing\n\n    /**\n     * Is any cell currently being edited?\n     * @readonly\n     * @property {Boolean}\n     */\n    get isEditing() {\n        return Boolean(this.editorContext);\n    }\n\n    /**\n     * Returns the record currently being edited, or `null`\n     * @readonly\n     * @property {Core.data.Model}\n     */\n    get activeRecord() {\n        return this.editorContext?.record || null;\n    }\n\n    /**\n     * Internal function to create or get existing editor for specified cell.\n     * @private\n     * @param cellContext Cell to get or create editor for\n     * @returns {Core.widget.Editor} An Editor container which displays the input field.\n     * @category Internal\n     */\n    getEditorForCell({ id, cell, column, columnId, editor }) {\n        const\n            me = this,\n            {\n                grid,\n                editorClass\n            }  = me;\n\n        // Reuse the Editor by caching it on the column.\n        let cellEditor = column.cellEditor,\n            leftOffset = 0; // Only applicable for tree cells to show editor right of the icons etc\n\n        // Help Editor match size and position\n        if (column.editTargetSelector) {\n            const editorTarget = cell.querySelector(column.editTargetSelector);\n\n            leftOffset = editorTarget.offsetLeft;\n        }\n\n        editor.autoSelect = me.autoSelect;\n\n        // Still a config\n        if (!cellEditor?.isEditor) {\n            cellEditor = column.data.cellEditor = editorClass.create(editorClass.mergeConfigs({\n                type          : editorClass.type,\n                constrainTo   : null,\n                cls           : 'b-cell-editor',\n                inputField    : editor,\n                blurAction    : 'none',\n                invalidAction : column.invalidAction,\n                completeKey   : false,\n                cancelKey     : false,\n                owner         : grid,\n                align         : {\n                    align  : 't0-t0',\n                    offset : [leftOffset, 0]\n                },\n                internalListeners : me.getEditorListeners(),\n\n                // Listen for cell edit control keys from the Editor\n                onInternalKeyDown : me.onEditorKeydown.bind(me),\n\n                // React editor wrapper code uses this flag to enable mouse events pass through to editor\n                allowMouseEvents : editor.allowMouseEvents\n            }, cellEditor));\n        }\n\n        // If matchSize auto heights it, ensure it at least covers the cell.\n        cellEditor.minHeight = grid.rowHeight;\n\n        // If the input field needs changing, change it.\n        if (cellEditor.inputField !== editor) {\n            cellEditor.remove(cellEditor.items[0]);\n            cellEditor.add(editor);\n        }\n\n        // Ensure the X offset is set to clear TreeCell furniture\n        cellEditor.align.offset[0] = leftOffset;\n\n        // Keep the record synced with the value\n        if (column.instantUpdate && !editor.cellEditValueSetter) {\n            ObjectHelper.wrapProperty(editor, 'value', null, value => {\n                const\n                    { editorContext } = me,\n                    inputField = editorContext?.editor.inputField;\n                // Only tickle the record if the value has changed.\n                if (editorContext?.editor.isValid &&\n                    !ObjectHelper.isEqual(editorContext.record[editorContext.column.field], value) &&\n                    // If editor is a dateField, only allow picker input as not to trigger change on each keystroke.\n                    (!inputField?.isDateField || inputField._isPickerInput)) {\n                    editorContext.record[editorContext.column.field] = value;\n                }\n            });\n            editor.cellEditValueSetter = true;\n        }\n\n        Object.assign(cellEditor.element.dataset, {\n            rowId    : id,\n            columnId : columnId,\n            field    : column.field\n        });\n\n        // First ESC press reverts\n        cellEditor.inputField.revertOnEscape = column.revertOnEscape;\n\n        return me.editor = cellEditor;\n    }\n\n    // Turned into function to allow overriding in Gantt, and make more configurable in general\n    getEditorListeners() {\n        return {\n            focusOut       : 'onEditorFocusOut',\n            focusIn        : 'onEditorFocusIn',\n            start          : 'onEditorStart',\n            beforeComplete : 'onEditorBeforeComplete',\n            complete       : 'onEditorComplete',\n            beforeCancel   : 'onEditorBeforeCancel',\n            cancel         : 'onEditorCancel',\n            beforeHide     : 'onBeforeEditorHide',\n            finishEdit     : 'onEditorFinishEdit',\n            thisObj        : this\n        };\n    }\n\n    onEditorStart({ source : editor }) {\n        const\n            me            = this,\n            editorContext = me.editorContext = editor.cellEditorContext;\n\n        if (editorContext) {\n            const { grid } = me;\n\n            // Should move editing to new cell on click, unless click is configured to start editing - in which case it\n            // will move anyway\n            if (me.triggerEvent !== 'cellclick') {\n                me.detachListeners('cellClickWhileEditing');\n                grid.ion({\n                    name      : 'cellClickWhileEditing',\n                    cellclick : 'onCellClickWhileEditing',\n                    thisObj   : me\n                });\n            }\n\n            me.removeEditingListeners?.();\n\n            // Handle tapping outside of the grid element. Use GlobalEvents\n            // because it uses a capture:true listener before any other handlers\n            // might stop propagation.\n            // Cannot use delegate here. A tapped cell will match :not(#body-container)\n            me.removeEditingListeners = GlobalEvents.addListener({\n                globaltap : 'onTapOut',\n                thisObj   : me\n            });\n\n            /**\n             * Fires on the owning Grid when editing starts\n             * @event startCellEdit\n             * @on-owner\n             * @param {Grid.view.Grid} source Owner grid\n             * @param {Grid.util.Location} editorContext Editing context\n             * @param {Core.widget.Editor} editorContext.editor The Editor being used.\n             * Will contain an `inputField` property which is the field being used to perform the editing.\n             * @param {Grid.column.Column} editorContext.column Target column\n             * @param {Core.data.Model} editorContext.record Target record\n             * @param {HTMLElement} editorContext.cell Target cell\n             * @param {*} editorContext.value Cell value\n             */\n            grid.trigger('startCellEdit', { grid, editorContext });\n        }\n    }\n\n    onEditorBeforeComplete(context) {\n        const\n            { grid }      = this,\n            editor        = context.source,\n            editorContext = editor.cellEditorContext;\n\n        context.grid = grid;\n        context.editorContext = editorContext;\n\n        /**\n         * Fires on the owning Grid before the cell editing is finished, return false to signal that the value is invalid and editing should not be finalized.\n         * @on-owner\n         * @event beforeFinishCellEdit\n         * @param {Grid.view.Grid} grid Target grid\n         * @param {Grid.util.Location} editorContext Editing context\n         * @param {Core.widget.Editor} editorContext.editor The Editor being used.\n         * Will contain an `inputField` property which is the field being used to perform the editing.\n         * @param {Grid.column.Column} editorContext.column Target column\n         * @param {Core.data.Model} editorContext.record Target record\n         * @param {HTMLElement} editorContext.cell Target cell\n         * @param {*} editorContext.value Cell value\n         */\n        return grid.trigger('beforeFinishCellEdit', context);\n    }\n\n    onEditorComplete({ source : editor }) {\n        const\n            { grid }      = this,\n            editorContext = editor.cellEditorContext;\n\n        // Ensure the docs below are accurate!\n        editorContext.value = editor.inputField.value;\n\n        /**\n         * Fires on the owning Grid when cell editing is finished\n         * @event finishCellEdit\n         * @on-owner\n         * @param {Grid.view.Grid} grid Target grid\n         * @param {Grid.util.Location} editorContext Editing context\n         * @param {Core.widget.Editor} editorContext.editor The Editor being used.\n         * Will contain an `inputField` property which is the field being used to perform the editing.\n         * @param {Grid.column.Column} editorContext.column Target column\n         * @param {Core.data.Model} editorContext.record Target record\n         * @param {HTMLElement} editorContext.cell Target cell\n         * @param {*} editorContext.value Cell value\n         */\n        grid.trigger('finishCellEdit', { grid, editorContext });\n    }\n\n    onEditorBeforeCancel() {\n        const { editorContext } = this;\n\n        /**\n         * Fires on the owning Grid before the cell editing is canceled, return `false` to prevent cancellation.\n         * @event beforeCancelCellEdit\n         * @preventable\n         * @on-owner\n         * @param {Grid.view.Grid} source Owner grid\n         * @param {Grid.util.Location} editorContext Editing context\n         */\n        return this.grid.trigger('beforeCancelCellEdit', { editorContext });\n    }\n\n    onEditorCancel({ event }) {\n        const { editorContext, muteEvents, grid } = this;\n\n        if (!muteEvents) {\n            /**\n             * Fires on the owning Grid when editing is cancelled\n             * @event cancelCellEdit\n             * @on-owner\n             * @param {Grid.view.Grid} source Owner grid\n             * @param {Grid.util.Location} editorContext Editing context\n             * @param {Event} event Included if the cancellation was triggered by a DOM event\n             */\n            grid.trigger('cancelCellEdit', { grid, editorContext, event });\n        }\n    }\n\n    onBeforeEditorHide({ source }) {\n        const\n            me = this,\n            {\n                row,\n                cell\n            }  = source.cellEditorContext;\n\n        // Clean up and restore cell to full visibility\n        // before we hide and attempt to revert focus to the cell.\n        cell?.classList.remove('b-editing');\n        row?.removeCls('b-editing');\n        me.detachListeners('cellClickWhileEditing');\n        me.removeEditingListeners();\n    }\n\n    onEditorFinishEdit({ source }) {\n        // Clean up context objects so we know we are not editing\n        source.cellEditorContext = this.editorContext = null;\n    }\n\n    /**\n     * Find the next succeeding or preceding cell which is editable (column.editor != false)\n     * @param {Object} cellInfo\n     * @param {Boolean} isForward\n     * @returns {Object}\n     * @private\n     * @category Internal\n     */\n    getAdjacentEditableCell(cellInfo, isForward) {\n        const\n            { grid }           = this,\n            { store, columns } = grid,\n            { visibleColumns } = columns;\n\n        let\n            rowId    = cellInfo.id,\n            column   = columns.getAdjacentVisibleLeafColumn(cellInfo.columnId, isForward);\n\n        while (rowId) {\n            if (column) {\n                if (column.editor && column.canEdit(store.getById(rowId))) {\n                    return { id : rowId, columnId : column.id };\n                }\n\n                column = columns.getAdjacentVisibleLeafColumn(column, isForward);\n            }\n            else {\n                const record = store.getAdjacent(cellInfo.id, isForward, false, true);\n\n                rowId = record?.id;\n\n                if (record) {\n                    column = isForward ? visibleColumns[0] : visibleColumns[visibleColumns.length - 1];\n                }\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Adds a new, empty record at the end of the TaskStore with the initial\n     * data specified by the {@link Grid.feature.CellEdit#config-addNewAtEnd} setting.\n     *\n     * @private\n     * @returns {Core.data.Model} Newly added record\n     */\n    doAddNewAtEnd() {\n        const\n            newRecordConfig = typeof this.addNewAtEnd === 'object' ? ObjectHelper.clone(this.addNewAtEnd) : {},\n            { grid }        = this,\n            record          = grid.store.add(newRecordConfig)[0];\n\n        // If the new record was not added due to it being off the end of the rendered block\n        // ensure we force it to be there before we attempt to edit it.\n        if (!grid.rowManager.getRowFor(record)) {\n            grid.rowManager.displayRecordAtBottom();\n        }\n\n        return record;\n    }\n\n    /**\n     * Creates an editing context object for the passed cell context (target cell must be in the DOM).\n     *\n     * If the referenced cell is editable, a {@link Grid.util.Location} will\n     * be returned containing the following extra properties:\n     *\n     *     - editor\n     *     - value\n     *\n     * If the referenced cell is _not_ editable, `false` will be returned.\n     * @param {Object} cellContext an object which encapsulates a cell.\n     * @param {String} cellContext.id The record id of the row to edit\n     * @param {String} cellContext.columnId The column id of the column to edit\n     * @returns {Grid.util.Location}\n     * @private\n     */\n    getEditingContext(cellContext) {\n        cellContext = this.grid.normalizeCellContext(cellContext);\n\n        const { column, record } = cellContext;\n\n        // Cell must be in the DOM to edit.\n        // Cannot edit hidden columns and columns without an editor.\n        // Cannot edit special rows (groups etc).\n        if (column?.isVisible && column.editor && record && !record.isSpecialRow && !record.readOnly && column.canEdit(record)) {\n            // If the field name is a complex mapping (instead of using a field name with a dataSource)\n            // set it correctly. Row#renderCell gets its contentValue in this way.\n            const value = record ? column.getRawValue(record) : record;\n\n            Object.assign(cellContext, {\n                value  : value === undefined ? null : value,\n                editor : column.editor\n            });\n            return cellContext;\n        }\n        else {\n            return false;\n        }\n    }\n\n    /**\n     * Start editing specified cell. If no cellContext is given it starts with the first cell in the first row.\n     * This function is exposed on Grid and can thus be called as `grid.startEditing(...)`\n     * @param {Object} cellContext Cell specified in format { id: 'x', columnId/column/field: 'xxx' }. See\n     * {@link Grid.view.Grid#function-getCell} for details.\n     * @fires startCellEdit\n     * @returns {Promise} Resolved promise returns`true` if editing has been started, `false` if an {@link Core.widget.Editor#event-beforeStart} listener\n     * has vetoed the edit.\n     * @category Editing\n     * @on-owner\n     */\n    async startEditing(cellContext = {}) {\n        const me = this;\n\n        // If disabled no can do.\n        if (!me.disabled) {\n            const { grid } = me;\n\n            // If we got here from keyMap, start editing currently focused cell instead\n            if (cellContext?.fromKeyMap) {\n                cellContext = me.grid.focusedCell;\n            }\n\n            // When cell context is not available add the first cell context\n            if (ObjectHelper.isEmpty(cellContext)) {\n                cellContext.id = grid.firstVisibleRow.id;\n            }\n\n            // Has to expand before normalizing to a Location, since Location only maps to visible rows\n            if (grid.store.isTree && grid.features.tree) {\n                const record = cellContext.id ? grid.store.getById(cellContext.id) : cellContext.record ?? grid.store.getAt(cellContext.row);\n\n                if (record) {\n                    await grid.expandTo(record);\n                }\n                else {\n                    return false;\n                }\n            }\n\n            const editorContext = me.getEditingContext(cellContext);\n\n            // Cannot edit hidden columns and columns without an editor\n            // Cannot edit special rows (groups etc).\n            if (!editorContext) {\n                return false;\n            }\n\n            if (me.editorContext) {\n                me.cancelEditing();\n            }\n\n            // Now that we know we can edit this cell, scroll the record into view and register it as last focusedCell\n            // While any potential scroll may be async, the desired cell will be rendered immediately.\n            if (!grid.focusedCell?.equals(editorContext)) {\n                grid.focusCell(editorContext);\n            }\n\n            /**\n             * Fires on the owning Grid before editing starts, return `false` to prevent editing\n             * @event beforeCellEditStart\n             * @on-owner\n             * @preventable\n             * @param {Grid.view.Grid} source Owner grid\n             * @param {Grid.util.Location} editorContext Editing context\n             * @param {Grid.column.Column} editorContext.column Target column\n             * @param {Core.data.Model} editorContext.record Target record\n             * @param {HTMLElement} editorContext.cell Target cell\n             * @param {Core.widget.Field} editorContext.editor The input field that the column is configured\n             * with (see {@link Grid.column.Column#config-field}). This property mey be replaced\n             * to be a different {@link Core.widget.Field field} in the handler, to take effect\n             * just for the impending edit.\n             * @param {Function} [editorContext.finalize] An async function may be injected into this property\n             * which performs asynchronous finalization tasks such as complex validation of confirmation. The\n             * value `true` or `false` must be returned.\n             * @param {Object} [editorContext.finalize.context] An object describing the editing context upon requested\n             * completion of the edit.\n             * @param {*} editorContext.value Cell value\n             */\n            if (grid.trigger('beforeCellEditStart', { grid, editorContext }) === false) {\n                return false;\n            }\n\n            const\n                editor = editorContext.editor = me.getEditorForCell(editorContext),\n                {\n                    row,\n                    cell,\n                    record\n                }      = editorContext;\n\n            // Prevent highlight when setting the value in the editor\n            editor.inputField.highlightExternalChange = false;\n\n            editor.cellEditorContext = editorContext;\n            editor.render(cell);\n\n            // CSS state must be set before the startEdit causes the Editor to align itself\n            // because if its target is overflow:hidden, it automatically constrains its size.\n            cell.classList.add('b-editing');\n            row.addCls('b-editing');\n\n            // Attempt to start edit.\n            // We will set up our context in onEditorStart *if* the start was successful.\n            if (!(await editor.startEdit({\n                target : cell,\n                field  : editor.inputField.name || editorContext.column.field,\n                value  : editorContext.value,\n                record\n            }))) {\n                // If the editor was vetoed, undo the CSS state.\n                cell.classList.remove('b-editing');\n                row.removeCls('b-editing');\n            }\n\n            me.onCellEditStart?.();\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Cancel editing, destroys the editor\n     * This function is exposed on Grid and can thus be called as `grid.cancelEditing(...)`\n     * @param {Boolean} silent Pass true to prevent method from firing event\n     * @fires cancelCellEdit\n     * @category Editing\n     * @on-owner\n     */\n    cancelEditing(silent = false, triggeredByEvent) {\n        const\n            me                              = this,\n            { editorContext, editor } = me;\n\n        // If called from keyMap, first argument is an event, ignore that\n        if (silent.fromKeyMap) {\n            triggeredByEvent = silent;\n            silent = false;\n        }\n\n        if (editorContext) {\n            me.muteEvents = silent;\n            editor.cancelEdit(triggeredByEvent);\n            me.muteEvents = false;\n        }\n\n        // In case editing is canceled while waiting for finishing promise\n        me.finishEditingPromise = false;\n\n        me.afterCellEdit?.();\n    }\n\n    /**\n     * Finish editing, update the underlying record and destroy the editor\n     * This function is exposed on Grid and can thus be called as `grid.finishEditing(...)`\n     * @fires finishCellEdit\n     * @category Editing\n     * @returns {Promise} Resolved promise returns `false` if the edit could not be finished due to the value being invalid or the\n     * Editor's `complete` event was vetoed.\n     * @on-owner\n     */\n    async finishEditing() {\n        const\n            me                      = this,\n            { editorContext, grid } = me;\n\n        let result = false;\n\n        // If already waiting for finishing promise, return that\n        if (me.finishEditingPromise) {\n            return me.finishEditingPromise;\n        }\n\n        if (editorContext) {\n            const { column } = editorContext;\n\n            // If completeEdit finds that the editor context has a finalize method in it,\n            // it will *await* the completion of that method before completing the edit\n            // so we must await completeEdit.\n            // We can override that finalize method by passing the column's own finalizeCellEdit.\n            // Set a flag (promise) indicating that we are in the middle of editing finalization\n            me.finishEditingPromise = editorContext.editor.completeEdit(column.bindCallback(column.finalizeCellEdit));\n            result = await me.finishEditingPromise;\n\n            // If grid is animating, wait for it to finish to not start a follow-up edit when things are moving\n            // (only applies to Scheduler for now, tested in Schedulers CellEdit.t.js)\n            await grid.waitForAnimations();\n\n            // reset the flag\n            me.finishEditingPromise = null;\n\n            me.afterCellEdit?.();\n        }\n\n        return result;\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Event handler added when editing is active called when user clicks a cell in the grid during editing.\n     * It finishes editing and moves editor to the selected cell instead.\n     * @private\n     * @category Internal event handling\n     */\n    async onCellClickWhileEditing({ event, cellSelector }) {\n        const me = this;\n\n        if (DomHelper.isTouchEvent) {\n            await me.finishEditing();\n            return;\n        }\n\n        // Ignore clicks if async finalization is running\n        if (me.finishEditingPromise) {\n            return;\n        }\n\n        // Ignore clicks in the editor.\n        if (me.editorContext && !me.editorContext.editor.owns(event.target)) {\n            if (me.getEditingContext(cellSelector)) {\n                // Attempt to finish the current edit.\n                // Will return false if the field is invalid.\n                if (await me.finishEditing()) {\n                    if (me.continueEditingOnCellClick) {\n                        await me.startEditing(cellSelector);\n                    }\n                }\n                // Previous edit was invalid, return to it.\n                else {\n                    me.grid.focusCell(me.editorContext);\n                    me.editor.inputField.focus();\n                }\n            }\n            else {\n                await me.finishEditing();\n            }\n        }\n    }\n\n    /**\n     * Starts editing if user taps selected cell again on touch device. Chained function called when user clicks a cell.\n     * @private\n     * @category Internal event handling\n     */\n    async onCellClick({ source : grid, cellSelector, target, event, column }) {\n        if (column.onCellClick) {\n            // Columns may provide their own handling of cell editing\n            return;\n        }\n\n        const\n            me              = this,\n            { focusedCell } = me.client;\n\n        if (target.closest('.b-tree-expander')) {\n            return false;\n        }\n        else if (DomHelper.isTouchEvent &&\n            me._lastCellClicked === focusedCell?.cell &&\n            event.timeStamp - me.touchEditDelay > me._lastCellClickedTime\n        ) {\n            await me.startEditing(cellSelector);\n        }\n        else if (this.triggerEvent === 'cellclick') {\n            await me.onTriggerEditEvent({ cellSelector, target });\n        }\n\n        me._lastCellClicked     = focusedCell?.cell;\n        me._lastCellClickedTime = event.timeStamp;\n    }\n\n    // onElementPointerUp should be used to cancel editing before toggleCollapse handled\n    // otherwise data collisions may be happened\n    onElementPointerUp(event) {\n        if (event.target.closest('.b-tree-expander')) {\n            this.cancelEditing(undefined, event);\n        }\n    }\n\n    /**\n     * Called when the user triggers the edit action in {@link #config-triggerEvent} config. Starts editing.\n     * @private\n     * @category Internal event handling\n     */\n    async onTriggerEditEvent({ cellSelector, target, event }) {\n        const { editorContext, client } = this;\n\n        if (target.closest('.b-tree-expander') || (DomHelper.isTouchEvent && event.type === 'dblclick')) {\n            return;\n        }\n\n        // Should not start editing if cellMenu configured to be shown on event\n        if (event && client.features.cellMenu?.triggerEvent === event.type) {\n            return;\n        }\n\n        if (editorContext) {\n            // If we are already editing the cellSelector cell, or the editor cannot finish editing\n            // then we must not attempt to start an edit.\n            if (editorContext.equals(this.grid.normalizeCellContext(cellSelector)) || !(await this.finishEditing())) {\n                return;\n            }\n        }\n\n        await this.startEditing(cellSelector);\n    }\n\n    /**\n     * Update the input field if underlying data changes during edit.\n     * @private\n     * @category Internal event handling\n     */\n    onStoreUpdate({ changes, record }) {\n        const { editorContext } = this;\n\n        if (editorContext?.editor.isVisible) {\n            if (record === editorContext.record && editorContext.editor.dataField in changes) {\n                editorContext.editor.refreshEdit();\n            }\n        }\n    }\n\n    onStoreBeforeSort() {\n        const editor = this.editorContext?.editor;\n\n        if (this.isEditing && !editor?.isFinishing && !editor.isValid) {\n            this.cancelEditing();\n        }\n    }\n\n    /**\n     * Realign editor if grid renders rows while editing is ongoing (as a result to autoCommit or WebSocket data received).\n     * @private\n     * @category Internal event handling\n     */\n    onGridRefreshed() {\n        const\n            me = this,\n            {\n                grid,\n                editorContext\n            }  = me;\n\n        if (editorContext && grid.isVisible && grid.focusedCell) {\n            const\n                cell       = grid.getCell(grid.focusedCell),\n                { editor } = editorContext;\n\n            // If refresh was triggered by the data change in onEditComplete\n            // do not re-show the editor.\n            if (cell && DomHelper.isInView(cell) && !editor.isFinishing) {\n                editorContext._cell = cell;\n\n                // Editor is inside the cell for A11Y reasons.\n                // So any refresh will remove its DOM.\n                // We need to silently restore and refocus it.\n                GlobalEvents.suspendFocusEvents();\n                editor.render(cell);\n                editor.showBy(cell);\n                editor.focus();\n                GlobalEvents.resumeFocusEvents();\n            }\n            else {\n                me.cancelEditing();\n            }\n        }\n    }\n\n    // Gets selected records or selected cells records\n    get gridSelection() {\n        return [...this.grid.selectedRecords, ...this.grid.selectedCells];\n    }\n\n    // Tells keyMap what actions is available in certain conditions\n    isActionAvailable(keyCombination, action, event) {\n        const me = this;\n\n        action = action.replace('cellEdit.', '');\n\n        if (!me.disabled && !event.target.closest('.b-grid-header')) {\n            if (me.isEditing) {\n                if (action === 'finishAllSelected') {\n                    return me.multiEdit && me.gridSelection.length > 1;\n                }\n                else if (editingActions[action]) {\n                    return true;\n                }\n            }\n            else if (action === 'startEditing') {\n                return me.grid.focusedCell.cell === event.target;\n            }\n        }\n        return false;\n    }\n\n    // Will copy edited field value to all selected records\n    async finishAllSelected() {\n        const\n            me                    = this,\n            { dataField, record } = me.editor;\n\n        if (await me.finishEditing() && !me.isDestroyed) {\n            for (const selected of me.gridSelection) {\n                if (selected.isModel) {\n                    if (selected !== record) {\n                        selected[dataField] = record[dataField];\n                    }\n                }\n                else {\n                    selected.record.set(selected.column.field, record[dataField]);\n                }\n            }\n        }\n    }\n\n    // Will finish editing and start editing next row (unless it's a touch device)\n    // If addNewAtEnd, it will create a new row and edit that one if currently editing last row\n    async finishAndEditNextRow(event, previous = false) {\n        const\n            me         = this,\n            { grid }   = me,\n            { record } = me.editorContext;\n\n        let nextCell;\n\n        if (await me.finishEditing()) {\n            // Might be destroyed during the async operation\n            if (me.isDestroyed) {\n                return;\n            }\n\n            // Finalizing might have been blocked by an invalid value\n            if (!me.isEditing) {\n                // Move to previous\n                if (previous) {\n                    nextCell = grid.internalNextPrevRow(false, true, event, false);\n                }\n                // Move to next\n                else {\n                    // If we are at the last editable cell, optionally add a new row\n                    if (me.addNewAtEnd && record === grid.store.last) {\n                        await me.doAddNewAtEnd();\n                    }\n\n                    if (!me.isDestroyed) {\n                        nextCell = grid.internalNextPrevRow(true, true, event);\n                    }\n                }\n\n                // If we have moved, and we are configure to edit the next cell on Enter key...\n                if (nextCell && me.editNextOnEnterPress && !grid.touch) {\n                    me.startEditing(nextCell);\n                }\n            }\n        }\n    }\n\n    // Will finish editing and start editing previous row\n    finishAndEditPrevRow(event) {\n        this.finishAndEditNextRow(event, true);\n    }\n\n    // Will finish editing and start editing next cell\n    // If addNewAtEnd, it will create a new row and edit that one if currently editing last row\n    async finishAndEditNextCell(event, previous = false) {\n        const\n            me              = this,\n            { focusedCell } = me.grid;\n\n        if (focusedCell) {\n\n            let cellInfo = me.getAdjacentEditableCell(focusedCell, !previous);\n\n            // If we are at the last editable cell, optionally add a new row\n            if (!cellInfo && !previous && me.addNewAtEnd) {\n                const currentEditableFinalizationResult = await me.finishEditing();\n\n                if (currentEditableFinalizationResult === true) {\n                    await this.doAddNewAtEnd();\n\n                    // Re-grab the next editable cell\n                    cellInfo = !me.isDestroyed && me.getAdjacentEditableCell(focusedCell, !previous);\n                }\n            }\n\n            if (cellInfo) {\n                let finalizationResult = true;\n\n                if (me.isEditing) {\n                    finalizationResult = await me.finishEditing();\n                }\n\n                if (!me.isDestroyed && finalizationResult) {\n                    me.grid.focusCell(cellInfo, {\n                        animate : me.focusCellAnimationDuration\n                    });\n\n                    if (!(await me.startEditing(cellInfo))) {\n                        // if editing a cell was vetoed, move on and try again\n                        await me.finishAndEditNextCell(event, previous);\n                    }\n                }\n                else {\n                    // finishing cell editing was not allowed, current editor value is invalid\n                }\n            }\n        }\n    }\n\n    // Will finish editing and start editing next cell\n    finishAndEditPrevCell(event) {\n        this.finishAndEditNextCell(event, true);\n    }\n\n    // Handles autoedit\n    async onElementKeyDown(event) {\n        const\n            me              = this,\n            { grid }        = me,\n            { focusedCell } = grid,\n            { key }         = event;\n\n        // flagging event with handled = true used to signal that other features should probably not care about it\n        if (event.handled || !me.autoEdit || me.isEditing || !focusedCell || focusedCell.isActionable || event.ctrlKey) {\n            return;\n        }\n\n        // Any character or space starts editing while autoedit is true\n        if (key.length <= 1 && await me.startEditing(focusedCell)) {\n            const\n                { inputField } = me.editor,\n                { input }      = inputField;\n\n            // if editing started with a keypress and the editor has an input field, set its value\n            if (input) {\n                // Simulate a keydown in an input field by setting input value\n                // plus running our internal processing of that event\n                inputField.internalOnKeyEvent(event);\n\n                if (!event.defaultPrevented) {\n                    input.value = key;\n                    inputField.internalOnInput(event);\n                }\n            }\n            event.preventDefault();\n        }\n        else if (event.key === 'Delete' || event.key === 'Backspace') {\n            const { gridSelection } = me;\n\n            if (me.multiEdit && gridSelection.length > 1) {\n                for (const selected of gridSelection) {\n                    if (selected.isModel) {\n                        grid.visibleColumns.forEach(col => {\n                            selected.set(col.field, null);\n                        });\n                    }\n                    else {\n                        selected.record.set(selected.column.field, null);\n                    }\n                }\n            }\n            else {\n                focusedCell.record.set(focusedCell.column.field, null);\n            }\n        }\n    }\n\n    // Prevents arrowkeys from navigating while editing\n    onEditorKeydown(event) {\n        if (event.key.startsWith('Arrow')) {\n            event.handled = true;\n            event.stopPropagation();\n            return false;\n        }\n    }\n\n    /**\n     * Cancel editing on widget focusout\n     * @private\n     */\n    async onEditorFocusOut(event) {\n        const\n            me              = this,\n            {\n                grid,\n                editor,\n                editorContext\n            }                   = me,\n            toCell              = new Location(event.relatedTarget),\n            isEditableCellClick = (toCell.grid === grid) && me.getEditingContext(toCell);\n\n        // If the editor is not losing focus as a result of its tidying up process\n        // And focus is moving to outside of the editor, then explicitly terminate.\n        if (editorContext && !editor.isFinishing && editor.owns(event._target)) {\n            if (me.blurAction === 'cancel') {\n                me.cancelEditing(undefined, event);\n            }\n            // If not already in the middle of editing finalization (that could be async)\n            // and it's not a onCellClickWhileEditing situation, finish the edit.\n            else if (!me.finishEditingPromise && (me.triggerEvent === 'cellclick' || (me.triggerEvent !== 'cellclick' && !isEditableCellClick))) {\n                await me.finishEditing();\n            }\n        }\n    }\n\n    onEditorFocusIn(event) {\n        const widget = event.toWidget;\n\n        if (widget === this.editor.inputField) {\n            if (this.autoSelect && widget.selectAll && !widget.readOnly && !widget.disabled) {\n                widget.selectAll();\n            }\n        }\n    }\n\n    /**\n     * Cancel edit on touch outside of grid for mobile Safari (focusout not triggering unless you touch something focusable)\n     * @private\n     */\n    async onTapOut({ event }) {\n        const me = this;\n\n        if (!me.grid.bodyContainer.contains(event.target) || event.button) {\n            if (!me.editor.owns(event.target)) {\n                me.editingStoppedByTapOutside = true;\n                if (me.blurAction === 'cancel') {\n                    me.cancelEditing(undefined, event);\n                }\n                else {\n                    await me.finishEditing();\n                }\n                delete me.editingStoppedByTapOutside;\n            }\n        }\n    }\n\n    /**\n     * Finish editing if clicking below rows (only applies when grid is higher than rows).\n     * @private\n     * @category Internal event handling\n     */\n    async onElementClick(event) {\n        if (event.target.classList.contains('b-grid-body-container') && this.editorContext) {\n            await this.finishEditing();\n        }\n    }\n\n    //endregion\n}\n\nGridFeatureManager.registerFeature(CellEdit, true);\n","import ContextMenuBase from '../../Core/feature/base/ContextMenuBase.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\n\n/**\n * @module Grid/feature/CellMenu\n */\n\n/**\n * Right click to display context menu for cells.\n *\n * To invoke the cell menu in a keyboard-accessible manner, use the `SPACE` key when the cell is focused.\n *\n * ### Default cell menu items\n *\n * The Cell menu feature provides only one item by default:\n *\n * | Reference              | Text   | Weight | Description         |\n * |------------------------|--------|--------|---------------------|\n * | `removeRow`            | Delete | 100    | Delete row record   |\n *\n * And all the other items are populated by the other features:\n *\n * | Reference              | Text             | Weight | Feature                           | Description                                           |\n * |------------------------|------------------|--------|-----------------------------------|-------------------------------------------------------|\n * | `cut`                  | Cut record       | 110    | {@link Grid/feature/RowCopyPaste} | Cut row record                                        |\n * | `copy`                 | Copy record      | 120    | {@link Grid/feature/RowCopyPaste} | Copy row record                                       |\n * | `paste`                | Paste record     | 130    | {@link Grid/feature/RowCopyPaste} | Paste copied row records                              |\n * | `search`               | Search for value | 200    | {@link Grid/feature/Search}       | Search for the selected cell text                     |\n * | `filterDateEquals`     | On               | 300    | {@link Grid/feature/Filter}       | Filters by the column field, equal to the cell value  |\n * | `filterDateBefore`     | Before           | 310    | {@link Grid/feature/Filter}       | Filters by the column field, less than the cell value |\n * | `filterDateAfter`      | After            | 320    | {@link Grid/feature/Filter}       | Filters by the column field, more than the cell value |\n * | `filterNumberEquals`   | Equals           | 300    | {@link Grid/feature/Filter}       | Filters by the column field, equal to the cell value  |\n * | `filterNumberLess`     | Less than        | 310    | {@link Grid/feature/Filter}       | Filters by the column field, less than the cell value |\n * | `filterNumberMore`     | More than        | 320    | {@link Grid/feature/Filter}       | Filters by the column field, more than the cell value |\n * | `filterDurationEquals` | Equals           | 300    | {@link Grid/feature/Filter}       | Filters by the column field, equal to the cell value  |\n * | `filterDurationLess`   | Less than        | 310    | {@link Grid/feature/Filter}       | Filters by the column field, less than the cell value |\n * | `filterDurationMore`   | More than        | 320    | {@link Grid/feature/Filter}       | Filters by the column field, more than the cell value |\n * | `filterStringEquals`   | Equals           | 300    | {@link Grid/feature/Filter}       | Filters by the column field, equal to the cell value  |\n * | `filterRemove`         | Remove filter    | 400    | {@link Grid/feature/Filter}       | Stops filtering by selected column field              |\n *\n * ### Customizing the menu items\n *\n * The menu items in the Cell menu can be customized, existing items can be changed or removed,\n * and new items can be added. This is handled using the `items` config of the feature.\n *\n * Add extra items for all columns:\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         cellMenu : {\n *             items : {\n *                 extraItem : {\n *                     text   : 'My cell item',\n *                     icon   : 'fa fa-bus',\n *                     weight : 200,\n *                     onItem : () => ...\n *                 }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * It is also possible to add items using columns config. See examples below.\n *\n * Add extra items for a single column:\n *\n * ```javascript\n * const grid = new Grid({\n *     columns: [\n *         {\n *             field         : 'city',\n *             text          : 'City',\n *             cellMenuItems : {\n *                 columnItem : {\n *                     text   : 'My unique cell item',\n *                     icon   : 'fa fa-beer',\n *                     onItem : () => ...\n *                 }\n *             }\n *         }\n *     ]\n * });\n * ```\n *\n * Remove existing item:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     features : {\n *         cellMenu : {\n *             items : {\n *                 removeRow : false\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * Customize existing item:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     features : {\n *         cellMenu : {\n *             items : {\n *                 removeRow : {\n *                     text : 'Throw away',\n *                     icon : 'b-fa b-fa-dumpster'\n *                 }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * It is also possible to manipulate the default items and add new items in the processing function:\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         cellMenu : {\n *             processItems({items, record}) {\n *                 if (record.cost > 5000) {\n *                     items.myItem = { text : 'Split cost' };\n *                 }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * Full information of the menu customization can be found in the [\"Customizing the Cell menu and the Header menu\"](#Grid/guides/customization/contextmenu.md)\n * guide.\n *\n * This feature is **enabled** by default.\n *\n * ## Keyboard shortcuts\n * This feature has the following default keyboard shortcuts:\n *\n * | Keys       | Action               | Action description                            |\n * |------------|----------------------|-----------------------------------------------|\n * | Space      | showContextMenuByKey | Shows context menu for currently focused cell |\n * | Ctrl+Space | showContextMenuByKey | Shows context menu for currently focused cell |\n *\n * For more information on how to customize keyboard shortcuts, please see\n * [our guide](#Grid/guides/customization/keymap.md).\n *\n * @extends Core/feature/base/ContextMenuBase\n * @demo Grid/contextmenu\n * @classtype cellMenu\n * @inlineexample Grid/feature/CellMenu.js\n * @feature\n */\nexport default class CellMenu extends ContextMenuBase {\n    //region Config\n\n    static get $name() {\n        return 'CellMenu';\n    }\n\n    static get defaultConfig() {\n        return {\n            /**\n             * A function called before displaying the menu that allows manipulations of its items.\n             * Returning `false` from this function prevents the menu being shown.\n             *\n             * ```javascript\n             * features : {\n             *     cellMenu : {\n             *         processItems({ items, record, column }) {\n             *             // Add or hide existing items here as needed\n             *             items.myAction = {\n             *                 text   : 'Cool action',\n             *                 icon   : 'b-fa b-fa-fw b-fa-ban',\n             *                 onItem : () => console.log(`Clicked ${record.name}`),\n             *                 weight : 1000 // Move to end\n             *             };\n             *\n             *             if (!record.allowDelete) {\n             *                 items.removeRow.hidden = true;\n             *             }\n             *         }\n             *     }\n             * },\n             * ```\n             * @param {Object} context An object with information about the menu being shown\n             * @param {Core.data.Model} context.record The record representing the current row\n             * @param {Grid.column.Column} context.column The current column\n             * @param {Object<String,MenuItemConfig>} context.items An object containing the\n             * {@link Core.widget.MenuItem menu item} configs keyed by their id\n             * @param {Event} context.event The DOM event object that triggered the show\n             * @config {Function}\n             * @preventable\n             */\n            processItems : null,\n\n            /**\n             * {@link Core.widget.Menu} items object containing named child menu items to apply to the feature's\n             * provided context menu.\n             *\n             * This may add extra items as below, but you can also configure, or remove any of the default items by\n             * configuring the name of the item as `null`:\n             *\n             * ```javascript\n             * features : {\n             *     cellMenu : {\n             *         // This object is applied to the Feature's predefined default items\n             *         items : {\n             *             switchToDog : {\n             *                 text : 'Dog',\n             *                 icon : 'b-fa b-fa-fw b-fa-dog',\n             *                 onItem({record}) {\n             *                     record.dog = true;\n             *                     record.cat = false;\n             *                 },\n             *                 weight : 500     // Make this second from end\n             *             },\n             *             switchToCat : {\n             *                 text : 'Cat',\n             *                 icon : 'b-fa b-fa-fw b-fa-cat',\n             *                 onItem({record}) {\n             *                     record.dog = false;\n             *                     record.cat = true;\n             *                 },\n             *                 weight : 510     // Make this sink to end\n             *             },\n             *             removeRow : {\n             *                 // Change icon for the delete item\n             *                 icon : 'b-fa b-fa-times'\n             *             },\n             *             secretItem : null\n             *         }\n             *     }\n             * },\n             * ```\n             *\n             * @config {Object<String,MenuItemConfig|Boolean|null>}\n             */\n            items : null,\n\n            type : 'cell'\n\n            /**\n             * See {@link #keyboard-shortcuts Keyboard shortcuts} for details\n             * @config {Object<String,String>} keyMap\n             */\n        };\n    }\n\n    static get pluginConfig() {\n        const config = super.pluginConfig;\n\n        config.chain.push('populateCellMenu');\n\n        return config;\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * This event fires on the owning grid before the context menu is shown for a cell.\n     * Allows manipulation of the items to show in the same way as in the {@link #config-processItems}.\n     *\n     * Returning `false` from a listener prevents the menu from being shown.\n     *\n     * @event cellMenuBeforeShow\n     * @preventable\n     * @on-owner\n     * @param {Grid.view.Grid} source The grid\n     * @param {Core.widget.Menu} menu The menu\n     * @param {Object<String,MenuItemConfig>} items Menu item configs\n     * @param {Grid.column.Column} column Column\n     * @param {Core.data.Model} record Record\n     */\n\n    /**\n     * This event fires on the owning grid after the context menu is shown for a cell.\n     * @event cellMenuShow\n     * @on-owner\n     * @param {Grid.view.Grid} source The grid\n     * @param {Core.widget.Menu} menu The menu\n     * @param {Object<String,MenuItemConfig>} items Menu item configs\n     * @param {Grid.column.Column} column Column\n     * @param {Core.data.Model} record Record\n     */\n\n    /**\n     * This event fires on the owning grid when an item is selected in the cell context menu.\n     * @event cellMenuItem\n     * @on-owner\n     * @param {Grid.view.Grid} source The grid\n     * @param {Core.widget.Menu} menu The menu\n     * @param {Core.widget.MenuItem} item Selected menu item\n     * @param {Grid.column.Column} column Column\n     * @param {Core.data.Model} record Record\n     */\n\n    /**\n     * This event fires on the owning grid when a check item is toggled in the cell context menu.\n     * @event cellMenuToggleItem\n     * @on-owner\n     * @param {Grid.view.Grid} source The grid\n     * @param {Core.widget.Menu} menu The menu\n     * @param {Core.widget.MenuItem} item Selected menu item\n     * @param {Grid.column.Column} column Column\n     * @param {Core.data.Model} record Record\n     * @param {Boolean} checked Checked or not\n     */\n\n    //endregion\n\n    //region Menu handlers\n\n    showContextMenu(eventParams) {\n        const\n            me = this,\n            {\n                cellSelector,\n                event\n            }  = eventParams;\n\n        // Process the gesture as navigation so that the use may select/multiselect\n        // the items to include in their context menu operation.\n        // Also select if not already selected.\n        me.client.focusCell(cellSelector, {\n            doSelect : !me.client.isSelected(cellSelector),\n            event\n        });\n\n        super.showContextMenu(eventParams);\n    }\n\n    shouldShowMenu({ column }) {\n        return column && column.enableCellContextMenu !== false;\n    }\n\n    getDataFromEvent(event) {\n        const cellData = this.client.getCellDataFromEvent(event);\n\n        // Only yield data to show a menu if we are on a cell\n        if (cellData) {\n            return ObjectHelper.assign(super.getDataFromEvent(event), cellData);\n        }\n    }\n\n    beforeContextMenuShow({ record, items, column }) {\n        if (column.cellMenuItems === false) {\n            return false;\n        }\n        if (!record || record.isSpecialRow) {\n            items.removeRow = false;\n        }\n    }\n\n    //endregion\n\n    //region Getters/Setters\n\n    populateCellMenu({ items, column, record }) {\n        const { client } = this;\n\n        if (column?.cellMenuItems) {\n            ObjectHelper.merge(items, column.cellMenuItems);\n        }\n\n        if (!client.readOnly) {\n            items.removeRow = {\n                text        : 'L{removeRow}',\n                localeClass : this,\n                icon        : 'b-fw-icon b-icon-trash',\n                cls         : 'b-separator',\n                weight      : 100,\n                disabled    : record.readOnly,\n                onItem      : () => client.store.remove(client.selectedRecords.filter(r => !r.readOnly))\n            };\n        }\n    }\n\n    get showMenu() {\n        return true;\n    }\n\n    //endregion\n}\n\nCellMenu.featureClass = '';\n\nGridFeatureManager.registerFeature(CellMenu, true, ['Grid', 'Scheduler']);\nGridFeatureManager.registerFeature(CellMenu, false, ['Gantt']);\n","import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport TemplateHelper from '../../Core/helper/TemplateHelper.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\nimport BrowserHelper from '../../Core/helper/BrowserHelper.js';\nimport EventHelper from '../../Core/helper/EventHelper.js';\n\n/**\n * @module Grid/feature/ColumnDragToolbar\n */\n\n/**\n * Displays a toolbar while dragging column headers. Drop on a button in the toolbar to activate a certain function,\n * for example to group by that column. This feature simplifies certain operations on touch devices.\n *\n * This feature is <strong>disabled</strong> by default, but turned on automatically on touch devices.\n *\n * @extends Core/mixin/InstancePlugin\n *\n * @classtype columnDragToolbar\n * @inlineexample Grid/feature/ColumnDragToolbar.js\n * @demo Grid/columndragtoolbar\n * @feature\n */\nexport default class ColumnDragToolbar extends Delayable(InstancePlugin) {\n    //region Config\n\n    static get $name() {\n        return 'ColumnDragToolbar';\n    }\n\n    // Plugin configuration. This plugin chains some of the functions in Grid\n    static get pluginConfig() {\n        return {\n            after : ['render']\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    construct(grid, config) {\n        grid.features.columnReorder?.ion({ beforeDestroy : 'onColumnReorderBeforeDestroy', thisObj : this });\n\n        this.grid = grid;\n\n        super.construct(grid, config);\n    }\n\n    doDestroy() {\n        const me = this;\n\n        if (me.grid.features.columnReorder && !me.grid.features.columnReorder.isDestroyed) {\n            me.detachFromColumnReorder();\n        }\n\n        me.element && me.element.remove();\n        me.element = null;\n        super.doDestroy();\n    }\n\n    doDisable(disable) {\n        if (this.initialized) {\n            if (disable) {\n                this.detachFromColumnReorder();\n            }\n            else {\n                this.init();\n            }\n        }\n        super.doDisable(disable);\n    }\n\n    init() {\n        const\n            me   = this,\n            grid = me.grid;\n\n        if (!grid.features.columnReorder) {\n            return;\n        }\n\n        me.reorderDetacher = grid.features.columnReorder.ion({\n            gridheaderdragstart({ context }) {\n                const column = grid.columns.getById(context.element.dataset.columnId);\n                me.showToolbar(column);\n            },\n\n            gridheaderdrag : ({ context }) => me.onDrag(context),\n\n            gridheaderabort : () => {\n                me.hideToolbar();\n            },\n\n            gridheaderdrop : ({ context }) => {\n                if (context.valid) {\n                    me.hideToolbar();\n                }\n                else {\n                    me.onDrop(context);\n                }\n            },\n\n            thisObj : me\n        });\n\n        me.initialized = true;\n    }\n\n    onColumnReorderBeforeDestroy() {\n        this.detachFromColumnReorder();\n    }\n\n    detachFromColumnReorder() {\n        const me = this;\n\n        me.grid.features.columnReorder.un('beforedestroy', me.onColumnReorderBeforeDestroy, me);\n\n        me.reorderDetacher && me.reorderDetacher();\n        me.reorderDetacher = null;\n    }\n\n    /**\n     * Initializes this feature on grid render.\n     * @private\n     */\n    render() {\n        if (!this.initialized) {\n            this.init();\n        }\n    }\n\n    //endregion\n\n    //region Toolbar\n\n    showToolbar(column) {\n        const\n            me      = this,\n            buttons = me.grid.getColumnDragToolbarItems(column, []),\n            groups  = [];\n\n        me.clearTimeout(me.buttonHideTimer);\n\n        buttons.forEach(button => {\n            button.text = button.localeClass.L(button.text);\n\n            let group = groups.find(group => group.text === button.group);\n            if (!group) {\n                group = {\n                    text    : button.localeClass.L(button.group),\n                    buttons : []\n                };\n                groups.push(group);\n            }\n\n            group.buttons.push(button);\n        });\n\n        me.element = DomHelper.append(me.grid.element, me.template(groups));\n\n        me.groups  = groups;\n        me.buttons = buttons;\n        me.column  = column;\n    }\n\n    async hideToolbar() {\n        const\n            me = this,\n            element = me.element;\n\n        if (element) {\n            element.classList.add('b-remove');\n\n            await EventHelper.waitForTransitionEnd({\n                element,\n                mode    : 'animation',\n                thisObj : me.client\n            });\n\n            element.remove();\n            me.element = null;\n        }\n    }\n\n    //endregion\n\n    //region Events\n\n    onDrag(info) {\n        const me = this;\n\n        if (info.dragProxy.getBoundingClientRect().top - me.grid.element.getBoundingClientRect().top > 100) {\n            me.element.classList.add('b-closer');\n        }\n        else {\n            me.element.classList.remove('b-closer');\n        }\n\n        if (me.hoveringButton) {\n            me.hoveringButton.classList.remove('b-hover');\n            me.hoveringButton = null;\n        }\n\n        if (info.targetElement?.closest('.b-columndragtoolbar')) {\n            me.element.classList.add('b-hover');\n\n            const\n                button = info.targetElement.closest('.b-columndragtoolbar  .b-target-button:not([data-disabled=true])');\n            if (button) {\n                button.classList.add('b-hover');\n                me.hoveringButton = button;\n            }\n        }\n        else {\n            me.element.classList.remove('b-hover');\n        }\n    }\n\n    onDrop(info) {\n        const me = this;\n\n        if (info.targetElement && info.targetElement.matches('.b-columndragtoolbar .b-target-button:not([data-disabled=true])')) {\n            const buttonEl = info.targetElement,\n                button   = me.buttons.find(button => button.ref === buttonEl.dataset.ref);\n\n            if (button) {\n                buttonEl.classList.add('b-activate');\n\n                me.buttonHideTimer = me.setTimeout(() => {\n                    me.hideToolbar();\n                    button.onDrop({ column : me.column });\n                }, 100);\n            }\n        }\n        else {\n            me.hideToolbar();\n        }\n    }\n\n    //endregion\n\n    template(groups) {\n        return TemplateHelper.tpl`\n            <div class=\"b-columndragtoolbar\">     \n            <div class=\"b-title\"></div>          \n            ${groups.map(group => TemplateHelper.tpl`\n                <div class=\"b-group\">\n                    <div class=\"b-buttons\">\n                    ${group.buttons.map(btn => TemplateHelper.tpl`\n                        <div class=\"b-target-button\" data-ref=\"${btn.ref}\" data-disabled=\"${btn.disabled}\">\n                            <i class=\"${btn.icon}\"></i>\n                            ${btn.text}\n                        </div>\n                    `)}\n                    </div>\n                    <div class=\"b-title\">${group.text}</div>\n                </div>\n            `)}\n            </div>`;\n    }\n}\n\nColumnDragToolbar.featureClass = 'b-hascolumndragtoolbar';\n\n// used by default on touch devices, can be enabled otherwise\nGridFeatureManager.registerFeature(ColumnDragToolbar, BrowserHelper.isTouchDevice);\n","import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\nimport GridFeatureManager from './GridFeatureManager.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\n\n/**\n * @module Grid/feature/ColumnPicker\n */\n\n/**\n * Displays a column picker (to show/hide columns) in the header context menu. Columns can be displayed in sub menus\n * by region or tag. Grouped headers are displayed as menu hierarchies.\n *\n * {@inlineexample Grid/feature/ColumnPicker.js}\n *\n * This feature is <strong>enabled</strong> by default.\n *\n * @extends Core/mixin/InstancePlugin\n * @demo Grid/columns\n * @classtype columnPicker\n * @feature\n */\nexport default class ColumnPicker extends InstancePlugin {\n    //region Config\n\n    static $name = 'ColumnPicker';\n\n    static configurable = {\n        /**\n         * Groups columns in the picker by region (each region gets its own sub menu)\n         * @config {Boolean}\n         * @default\n         */\n        groupByRegion : false,\n\n        /**\n         * Groups columns in the picker by tag, each column may be shown under multiple tags. See\n         * {@link Grid.column.Column#config-tags}\n         * @config {Boolean}\n         * @default\n         */\n        groupByTag : false,\n\n        /**\n         * Configure this as `true` to have the fields from the Grid's {@link Core.data.Store}'s\n         * {@link Core.data.Store#config-modelClass} added to the menu to create __new__ columns\n         * to display the fields.\n         *\n         * This may be combined with the {@link Grid.view.mixin.GridState stateful} ability of the grid\n         * to create a self-configuring grid.\n         * @config {Boolean}\n         * @default\n         */\n        createColumnsFromModel : false,\n\n        menuCls : 'b-column-picker-menu b-sub-menu'\n    }\n\n    static get pluginConfig() {\n        return {\n            chain : ['populateHeaderMenu', 'getColumnDragToolbarItems']\n        };\n    }\n\n    get grid() {\n        return this.client;\n    }\n\n    //endregion\n\n    //region Context menu\n\n    /**\n     * Get menu items, either a straight list of columns or sub menus per subgrid\n     * @private\n     * @param columnStore Column store to traverse\n     * @returns {MenuItemConfig[]} Menu item configs\n     */\n    getColumnPickerItems(columnStore) {\n        const\n            me                        = this,\n            { createColumnsFromModel } = me;\n\n        let result;\n\n        if (me.groupByRegion) {\n            // submenus for grids regions\n            result = me.grid.regions.map(region => {\n                const columns = me.grid.getSubGrid(region).columns.topColumns;\n\n                return {\n                    text     : StringHelper.capitalize(region),\n                    menu     : me.buildColumnMenu(columns),\n                    disabled : columns.length === 0,\n                    region\n                };\n            });\n            if (createColumnsFromModel) {\n                result.push({\n                    text : me.L('L{newColumns}'),\n                    menu : me.createAutoColumnItems()\n                });\n            }\n        }\n        else if (me.groupByTag) {\n            // submenus for column tags\n            const tags = {};\n            columnStore.topColumns.forEach(column => {\n                column.tags && Array.isArray(column.tags) && column.hideable !== false && column.tags.forEach(tag => {\n                    if (!tags[tag]) {\n                        tags[tag] = 1;\n                    }\n                });\n            });\n\n            // TODO: as checkitems, but how to handle toggling? hide a column only when all tags for it are unchecked?\n            result = Object.keys(tags).sort().map(tag => ({\n                text            : StringHelper.capitalize(tag),\n                menu            : me.buildColumnMenu(me.getColumnsForTag(tag)),\n                tag,\n                onBeforeSubMenu : ({ item, itemEl }) => {\n                    me.refreshTagMenu(item, itemEl);\n                }\n            }));\n            if (createColumnsFromModel) {\n                result.push({\n                    text : me.L('L{newColumns}'),\n                    menu : me.createAutoColumnItems()\n                });\n            }\n        }\n        else {\n            // all columns in same menu\n            result = me.buildColumnMenu(columnStore.topColumns);\n\n            if (createColumnsFromModel) {\n                result.items.push(...ObjectHelper.transformNamedObjectToArray(me.createAutoColumnItems()));\n            }\n        }\n\n        return result;\n    }\n\n    createAutoColumnItems() {\n        const\n            me             = this,\n            { grid }       = me,\n            {\n                columns,\n                store\n            }              = grid,\n            { modelClass } = store,\n            { allFields }  = modelClass,\n            result         = {};\n\n        for (let i = 0, { length } = allFields; i < length; i++) {\n            const\n                field     = allFields[i],\n                fieldName = field.name;\n\n            if (!columns.get(fieldName)) {\n                // Don't include system-level \"internal\" fields from the base Model classes like rowHeight or cls.\n                if (!field.internal) {\n                    result[fieldName] = {\n                        text     : field.text || StringHelper.separate(field.name),\n                        checked  : false,\n                        onToggle : (event) => {\n                            const column = columns.get(fieldName);\n\n                            if (column) {\n                                column[event.checked ? 'show' : 'hide']();\n                            }\n                            else {\n                                columns.add(columns.generateColumnForField(field, {\n                                    region : me.forColumn.region\n                                }));\n                            }\n                            event.bubbles = false;\n                        }\n                    };\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Get all columns that has the specified tag\n     * TODO: if tags are useful from somewhere else, move to ColumnStore\n     * @private\n     * @param tag\n     * @returns {Grid.column.Column[]}\n     */\n    getColumnsForTag(tag) {\n        // TODO: if tags are useful from somewhere else, move to ColumnStore\n        return this.grid.columns.records.filter(column =>\n            column.tags && Array.isArray(column.tags) && column.tags.includes(tag) && column.hideable !== false\n        );\n    }\n\n    /**\n     * Refreshes checked status for a tag menu. Needed since columns can appear under multiple tags.\n     * @private\n     */\n    refreshTagMenu(item, itemEl) {\n        const columns = this.getColumnsForTag(item.tag);\n        columns.forEach(column => {\n            const subItem = item.items.find(subItem => subItem.column === column);\n            if (subItem) subItem.checked = column.hidden !== true;\n        });\n    }\n\n    /**\n     * Traverses columns to build menu items for the column picker.\n     * @private\n     */\n    buildColumnMenu(columns) {\n        let currentRegion = columns.length > 0 && columns[0].region;\n\n        const\n            { grid } = this,\n            items    = columns.reduce((items, column) => {\n                const visibleInRegion = grid.columns.visibleColumns.filter(col => col.region === column.region);\n\n                if (column.hideable !== false) {\n                    const itemConfig = {\n                        grid,\n                        column,\n                        text     : column.headerText,\n                        checked  : column.hidden !== true,\n                        disabled : column.hidden !== true && visibleInRegion.length === 1,\n                        cls      : column.region !== currentRegion ? 'b-separator' : ''\n                    };\n\n                    currentRegion = column.region;\n\n                    if (column.children && !column.isCollapsible) {\n                        itemConfig.menu = this.buildColumnMenu(column.children);\n                    }\n\n                    items.push(itemConfig);\n                }\n                return items;\n            }, []);\n\n        return {\n            cls : this.menuCls,\n            items\n        };\n    }\n\n    /**\n     * Populates the header context menu items.\n     * @param {Object} options Contains menu items and extra data retrieved from the menu target.\n     * @param {Grid.column.Column} options.column Column for which the menu will be shown\n     * @param {Object<String,MenuItemConfig|Boolean|null>} options.items A named object to describe menu items\n     * @internal\n     */\n    populateHeaderMenu({ column, items }) {\n        const\n            me          = this,\n            { columns } = me.grid;\n\n        /**\n         * The column on which the context menu was invoked.\n         * @property {Grid.column.Column} forColumn\n         * @readonly\n         * @private\n         */\n        me.forColumn = column;\n\n        if (column.showColumnPicker !== false && columns.some(col => col.hideable)) {\n            // column picker\n            items.columnPicker = {\n                text        : 'L{columnsMenu}',\n                localeClass : me,\n                icon        : 'b-fw-icon b-icon-columns',\n                cls         : 'b-separator',\n                weight      : 200,\n                menu        : me.getColumnPickerItems(columns),\n                onToggle    : me.onColumnToggle,\n                disabled    : me.disabled\n            };\n        }\n\n        // menu item for hiding this column\n        if (column.hideable !== false && !column.parent.isCollapsible) {\n            const visibleInRegion = columns.visibleColumns.filter(col => col.region === column.region);\n\n            items.hideColumn = {\n                text        : 'L{hideColumn}',\n                localeClass : me,\n                icon        : 'b-fw-icon b-icon-hide-column',\n                weight      : 210,\n                disabled    : visibleInRegion.length === 1 || me.disabled,\n                onItem      : () => column.hide()\n            };\n        }\n    }\n\n    /**\n     * Handler for column hide/show menu checkitems.\n     * @private\n     * @param {Object} event The {@link Core.widget.MenuItem#event-toggle} event.\n     */\n    onColumnToggle({ menu, item, checked }) {\n        if (Boolean(item.column.hidden) !== !checked) {\n            item.column[checked ? 'show' : 'hide']();\n\n            const\n                { grid, column }      = item,\n                { columns, features } = grid,\n                // Sibling items, needed to disable other item if it is the last one in region\n                siblingItems          = menu.items,\n                // Columns left visible in same region as this items column\n                visibleInRegion       = columns.visibleColumns.filter(col => col.region === item.column.region),\n                // Needed to access \"hide-column\" item outside of column picker\n                hideItem              = features.headerMenu?.enabled && features.headerMenu.menu.widgetMap.hideColumn;\n\n            // Do not allow user to hide the last column in any region\n            if (visibleInRegion.length === 1) {\n                const lastVisibleItem = siblingItems.find(menuItem => menuItem.column === visibleInRegion[0]);\n                if (lastVisibleItem) {\n                    lastVisibleItem.disabled = true;\n                }\n\n                // Also disable \"Hide column\" item if only one column left in this region\n                if (hideItem && column.region === item.column.region) {\n                    hideItem.disabled = true;\n                }\n            }\n            // Multiple columns visible, enable \"hide-column\" and all items for that region\n            else {\n                visibleInRegion.forEach(col => {\n                    const siblingItem = siblingItems.find(sibling => sibling.column === col);\n                    if (siblingItem) {\n                        siblingItem.disabled = false;\n                    }\n                });\n\n                if (hideItem && column.region === item.column.region) {\n                    hideItem.disabled = false;\n                }\n            }\n\n            // Reflect status in submenu.\n            item.menu?.eachWidget(subItem => {\n                subItem.checked = checked;\n            });\n\n            const parentItem = menu.owner;\n            if (parentItem && parentItem.column === column.parent) {\n                parentItem.checked = siblingItems.some(subItem => subItem.checked === true);\n            }\n        }\n    }\n\n    /**\n     * Supply items to ColumnDragToolbar\n     * @private\n     */\n    getColumnDragToolbarItems(column, items) {\n        const visibleInRegion = this.grid.columns.visibleColumns.filter(col => col.region === column.region);\n\n        if (column.hideable !== false && visibleInRegion.length > 1) {\n            items.push({\n                text        : 'L{hideColumnShort}',\n                ref         : 'hideColumn',\n                group       : 'L{column}',\n                localeClass : this,\n                icon        : 'b-fw-icon b-icon-hide-column',\n                weight      : 101,\n                onDrop      : ({ column }) => column.hide()\n            });\n        }\n        return items;\n    }\n\n    //endregion\n}\n\nGridFeatureManager.registerFeature(ColumnPicker, true);\n","import DomHelper from '../../Core/helper/DomHelper.js';\nimport DragHelper from '../../Core/helper/DragHelper.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\nimport Widget from '../../Core/widget/Widget.js';\nimport ScrollManager from '../../Core/util/ScrollManager.js';\n\n/**\n * @module Grid/feature/ColumnReorder\n */\n\n/**\n * Allows user to reorder columns by dragging headers. To get notified about column reorder listen to `change` event\n * on {@link Grid.data.ColumnStore columns} store.\n *\n * {@inlineexample Grid/feature/ColumnReorder.js}\n *\n * This feature is <strong>enabled</strong> by default.\n *\n * @extends Core/mixin/InstancePlugin\n * @demo Grid/columns\n * @classtype columnReorder\n * @feature\n */\nexport default class ColumnReorder extends Delayable(InstancePlugin) {\n    //region Init\n\n    static $name = 'ColumnReorder';\n\n    ignoreSelectors = [\n        '.b-grid-header-resize-handle',\n        '.b-field'\n    ];\n\n    doDestroy() {\n        this.dragHelper?.scrollManager.destroy();\n        this.dragHelper?.destroy();\n\n        super.doDestroy();\n    }\n\n    get grid() {\n        return this.client;\n    }\n\n    /**\n     * Initialize drag & drop (called from render)\n     * @private\n     */\n    init() {\n        const\n            me         = this,\n            { grid }   = me,\n            gridEl     = grid.element,\n            containers = DomHelper.children(gridEl, '.b-grid-headers');\n\n        containers.push(...DomHelper.children(gridEl, '.b-grid-header-children'));\n\n        if (me.dragHelper) {\n            // update the dragHelper with the new set of containers it should operate upon\n            me.dragHelper.containers = containers;\n        }\n        else {\n            me.dragHelper = new DragHelper({\n                name             : 'columnReorder',\n                mode             : 'container',\n                dragThreshold    : 10,\n                targetSelector   : '.b-grid-header',\n                floatRootOwner   : grid,\n                rtlSource        : grid,\n                outerElement     : grid.headerContainer,\n                monitoringConfig : {\n                    scrollables : [{\n                        element : '.b-grid-headers'\n                    }]\n                },\n                scrollManager : ScrollManager.new({\n                    direction : 'horizontal',\n                    element   : grid.headerContainer\n                }),\n                containers,\n                isElementDraggable(element) {\n                    const abort = Boolean(element.closest(me.ignoreSelectors.join(',')));\n\n                    if (abort || me.disabled) {\n                        return false;\n                    }\n\n                    const\n                        columnEl = element.closest(this.targetSelector),\n                        column   = columnEl && grid.columns.getById(columnEl.dataset.columnId),\n                        isLast   = column?.childLevel === 0 && grid.subGrids[column.region].columns.count === 1;\n\n                    // TODO: If we want to prevent dragging last column out of group we can use the code below...\n                    /*isLast = column.level !== 0\n                            // In grouped header, do not allow dragging last remaining child\n                            ? column.parent.children.length === 1\n                            // Not in a grouped header, do not allow dragging last remaining column\n                            : grid.subGrids[column.region].columns.count === 1;*/\n\n                    return Boolean(column) && column.draggable !== false && !isLast;\n                },\n                ignoreSelector    : '.b-filter-icon,.b-grid-header-resize-handle',\n                internalListeners : {\n                    beforeDragStart : me.onBeforeDragStart,\n                    dragstart       : me.onDragStart,\n                    drag            : me.onDrag,\n                    drop            : me.onDrop,\n                    thisObj         : me\n                }\n            });\n\n            me.relayEvents(me.dragHelper, ['dragStart', 'drag', 'drop', 'abort'], 'gridHeader');\n        }\n    }\n\n    //endregion\n\n    //region Plugin config\n\n    // Plugin configuration. This plugin chains some of the functions in Grid\n    static get pluginConfig() {\n        return {\n            after : ['onPaint', 'renderContents']\n        };\n    }\n\n    //endregion\n\n    //region Events (drop)\n\n    onDrag({ context, event }) {\n        const\n            me           = this,\n            targetHeader = Widget.fromElement(event.target, 'gridheader');\n\n        // If SubGrid is configured with a sealed column set, do not allow moving into it\n        if (targetHeader?.subGrid.sealedColumns) {\n            context.valid = false;\n            return;\n        }\n\n        // Require that we drag inside grid header while dragging if we don't have a drag toolbar\n        if (!me.grid.features.columnDragToolbar) {\n            context.valid = Boolean(event.target.closest('.b-grid-headers'));\n        }\n    }\n\n    onBeforeDragStart({ context, event }) {\n        const\n            { element } = context,\n            column      = context.column = this.client.columns.getById(element.dataset.columnId);\n\n        /**\n         * This event is fired prior to starting a column drag gesture. The drag is canceled if a listener returns `false`.\n         * @on-owner\n         * @event beforeColumnDragStart\n         * @param {Grid.view.Grid} source The grid instance.\n         * @param {Grid.column.Column} column The dragged column.\n         * @param {Event} event The browser event.\n         * @preventable\n         */\n        return this.client.trigger('beforeColumnDragStart', { column, event });\n    }\n\n    onDragStart({ context, event }) {\n        const\n            me         = this,\n            { grid }   = me,\n            { column } = context;\n\n        if (!grid.features.columnDragToolbar) {\n            const headerContainerBox = grid.element.querySelector('.b-grid-header-container').getBoundingClientRect();\n\n            me.dragHelper.minY = headerContainerBox.top;\n            me.dragHelper.maxY = headerContainerBox.bottom;\n        }\n\n        grid.headerContainer.classList.add('b-dragging-header');\n\n        context.dragProxy.style.fontSize = DomHelper.getStyleValue(context.element, 'fontSize');\n\n        /**\n         * This event is fired when a column drag gesture has started.\n         * @on-owner\n         * @event columnDragStart\n         * @param {Grid.view.Grid} source The grid instance.\n         * @param {Grid.column.Column} column The dragged column.\n         * @param {Event} event The browser event.\n         */\n        grid.trigger('columnDragStart', { column, event });\n    }\n\n    /**\n     * Handle drop\n     * @private\n     */\n    onDrop({ context, event }) {\n        if (!context.valid) {\n            return this.onInvalidDrop({ context });\n        }\n\n        const\n            me              = this,\n            { grid }        = me,\n            element         = context.dragging,\n            onHeader        = context.target.closest('.b-grid-header'),\n            droppedInRegion = context.draggedTo.dataset.region,\n            // If dropping on right edge of grid-headers element, append to that subgrid\n            onColumn        = onHeader ? grid.columns.get(onHeader.dataset.column) : grid.subGrids[droppedInRegion].columns.last,\n            toRegion        = droppedInRegion || onColumn.region,\n            sibling         = context.insertBefore,\n            column          = grid.columns.getById(element.dataset.columnId),\n            oldParent       = column.parent,\n            insertBefore    = sibling ? grid.columns.getById(sibling.dataset.columnId) : grid.subGrids[toRegion].columns.last.nextSibling;\n\n        let newParent;\n\n        if (insertBefore) {\n            newParent = insertBefore.parent;\n        }\n        else {\n            const groupNode = onHeader?.parentElement.closest('.b-grid-header');\n\n            if (groupNode) {\n                newParent = grid.columns.getById(groupNode.dataset.columnId);\n            }\n            else {\n                newParent = grid.columns.rootNode;\n            }\n        }\n\n        grid.headerContainer.classList.remove('b-dragging-header');\n\n        // Clean up element used during drag drop as it will not be removed by Grid when it refreshes its header elements\n        element.remove();\n\n        // If dropped into its current position in the same SubGrid - abort\n        let vetoed = (toRegion === column.region && oldParent === newParent && (onColumn === column.previousSibling || insertBefore === column.nextSibling));\n\n        /**\n         * This event is fired when a column is dropped, and you can return false from a listener to abort the operation.\n         * @event beforeColumnDropFinalize\n         * @on-owner\n         * @param {Grid.view.Grid} source The grid instance.\n         * @param {Grid.column.Column} column The dragged column.\n         * @param {Grid.column.Column} insertBefore The column before which the dragged column will be inserted.\n         * @param {Grid.column.Column} newParent The new parent column.\n         * @param {Event} event The browser event.\n         * @preventable\n         */\n        vetoed = vetoed || grid.trigger('beforeColumnDropFinalize', {\n            column, newParent, insertBefore, event\n        }) === false;\n\n        if (!vetoed) {\n            // Insert the column into its new place, which might be vetoed if column is sealed\n            vetoed = !newParent.insertChild(column, insertBefore);\n        }\n\n        context.valid = !vetoed;\n\n        if (!vetoed) {\n            column.region = toRegion;\n\n            // Check if we should remove last child\n            if (oldParent.children.length === 0) {\n                oldParent.parent.removeChild(oldParent);\n            }\n        }\n\n        /**\n         * This event is always fired after a column is dropped. The `valid` param is true if the operation was not\n         * vetoed and the column was moved in the column store.\n         * @event columnDrop\n         * @on-owner\n         * @param {Grid.view.Grid} source The grid instance.\n         * @param {Grid.column.Column} column The dragged column.\n         * @param {Grid.column.Column} insertBefore The column before which the the dragged column will be inserted.\n         * @param {Grid.column.Column} newParent The new parent column.\n         * @param {Boolean} valid true if the operation was not vetoed.\n         * @param {Event} event The browser event.\n         * @preventable\n         */\n        grid.trigger('columnDrop', { column, newParent, insertBefore, valid : context.valid, event });\n    }\n\n    /**\n     * Handle invalid drop\n     * @private\n     */\n    onInvalidDrop() {\n        this.grid.headerContainer.classList.remove('b-dragging-header');\n    }\n\n    //endregion\n\n    //region Render\n\n    /**\n     * Updates DragHelper with updated headers when grid contents is rerendered\n     * @private\n     */\n    renderContents() {\n        // columns shown, hidden or reordered\n        this.init();\n    }\n\n    /**\n     * Initializes this feature on grid paint.\n     * @private\n     */\n    onPaint() {\n        // always reinit on paint\n        this.init();\n    }\n\n    //endregion\n}\n\nColumnReorder.featureClass = 'b-column-reorder';\n\nGridFeatureManager.registerFeature(ColumnReorder, true);\n","import ResizeHelper from '../../Core/helper/ResizeHelper.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\nimport BrowserHelper from '../../Core/helper/BrowserHelper.js';\n\n/**\n * @module Grid/feature/ColumnResize\n */\n\n/**\n * Enables user to resize columns by dragging a handle on the right hand side of the header. To get notified about column\n * resize listen to `change` event on {@link Grid.data.ColumnStore columns} store.\n *\n * This feature is <strong>enabled</strong> by default.\n *\n * @extends Core/mixin/InstancePlugin\n *\n * @demo Grid/columns\n * @classtype columnResize\n * @inlineexample Grid/feature/ColumnResize.js\n * @feature\n */\nexport default class ColumnResize extends InstancePlugin {\n\n    static get $name() {\n        return 'ColumnResize';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Resize all cells below a resizing header during dragging.\n             * `'auto'` means `true` on non-mobile platforms.\n             * @config {String|Boolean}\n             * @default\n             */\n            liveResize : 'auto'\n        };\n    }\n\n    //region Init\n\n    construct(grid, config) {\n        const me = this;\n\n        me.grid = grid;\n\n        super.construct(grid, config);\n\n        me.resizer = new ResizeHelper({\n            name              : 'columnResize',\n            targetSelector    : '.b-grid-header',\n            handleSelector    : '.b-grid-header-resize-handle',\n            outerElement      : grid.element,\n            rtlSource         : grid,\n            internalListeners : {\n                beforeresizestart : me.onBeforeResizeStart,\n                resizestart       : me.onResizeStart,\n                resizing          : me.onResizing,\n                resize            : me.onResize,\n                cancel            : me.onCancel,\n                thisObj           : me\n            }\n        });\n    }\n\n    doDestroy() {\n        this.resizer?.destroy();\n        super.doDestroy();\n    }\n\n    //endregion\n\n    changeLiveResize(liveResize) {\n        if (liveResize === 'auto') {\n            return !BrowserHelper.isMobileSafari;\n        }\n        return liveResize;\n    }\n\n    //region Events\n\n    onBeforeResizeStart() {\n        return !this.disabled;\n    }\n\n    onResizeStart({ context }) {\n        const\n            { grid, resizer } = this,\n            column            = context.column = grid.columns.getById(context.element.dataset.columnId);\n\n        resizer.minWidth = column.minWidth;\n\n        grid.element.classList.add('b-column-resizing');\n    }\n\n    /**\n     * Handle drag event - resize the column live unless it's a touch gesture\n     * @private\n     */\n    onResizing({ context }) {\n        if (context.valid && this.liveResize) {\n            this.grid.resizingColumns = true;\n            context.column.width = context.newWidth;\n        }\n    }\n\n    /**\n     * Handle drop event (only used for touch)\n     * @private\n     */\n    onResize({ context }) {\n        const\n            { grid } = this,\n            { column } = context;\n\n        grid.element.classList.remove('b-column-resizing');\n\n        if (context.valid) {\n            if (this.liveResize) {\n                grid.resizingColumns = false;\n                grid.afterColumnsResized(column);\n            }\n            else {\n                column.width = context.newWidth;\n            }\n        }\n    }\n\n    /**\n     * Restore column width on cancel (ESC)\n     * @private\n     */\n    onCancel({ context }) {\n        const { grid } = this;\n\n        grid.element.classList.remove('b-column-resizing');\n\n        context.column.width = context.elementWidth;\n        grid.resizingColumns = false;\n    }\n\n    //endregion\n}\n\nGridFeatureManager.registerFeature(ColumnResize, true);\n","import FieldFilterPicker, { SUPPORTED_FIELD_DATA_TYPES, isSupportedDurationField } from '../../Core/widget/FieldFilterPicker.js';\nimport ArrayHelper from '../../Core/helper/ArrayHelper.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport Model from '../../Core/data/Model.js';\nimport '../../Core/widget/Combo.js';\nimport '../../Core/widget/Checkbox.js';\nimport '../../Core/widget/NumberField.js';\nimport '../../Core/widget/TextField.js';\nimport '../../Core/widget/DateField.js';\nimport VersionHelper from '../../Core/helper/VersionHelper.js';\n\n/**\n * @module Grid/widget/GridFieldFilterPicker\n */\n\n/**\n * Subclass of {@link Core.widget.FieldFilterPicker} allowing configuration using an\n * existing {@link Grid.view.Grid}.\n *\n * See also {@link Grid.widget.GridFieldFilterPickerGroup}.\n *\n * @extends Core/widget/FieldFilterPicker\n * @classtype gridfieldfilterpicker\n * @demo Grid/fieldfilters\n * @widget\n */\nexport default class GridFieldFilterPicker extends FieldFilterPicker {\n\n    //region Config\n    static get $name() {\n        return 'GridFieldFilterPicker';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'gridfieldfilterpicker';\n    }\n\n    /** @hideconfigs store */\n\n    static configurable = {\n        /**\n         * {@link Grid.view.Grid} from which to read the available field list. In order to\n         * appear as a selectable property for a filter, a column must have a `field` property.\n         * If the column has a `text` property, that will be shown as the displayed text in the\n         * selector; otherwise, the `field` property will be shown as-is.\n         *\n         * The grid's {@link Core.data.Store}'s {@link Core.data.Store#property-modelClass} will be\n         * examined to find field data types.\n         *\n         * You can limit available fields to a subset of the grid's columns using the\n         * {@link #config-allowedFieldNames} configuration property.\n         *\n         * @config {Grid.view.Grid}\n         */\n        grid : null,\n\n        /**\n         * Optional array of field names that are allowed as selectable properties for filters.\n         * This is a subset of the field names found in the {@link #config-grid}'s columns. When supplied, only\n         * the named fields will be shown in the property selector combo.\n         *\n         * Note that field names are case-sensitive and should match the data field name in the store\n         * model.\n         *\n         * @config {String[]}\n         */\n        allowedFieldNames : null\n    };\n\n    //endregion\n\n    afterConstruct() {\n        const\n            me = this;\n        if (!me.grid) {\n            throw new Error(`${me.constructor.$name} requires 'grid' to be configured.`);\n        }\n        me.fields = me.fields ?? {};  // Force `fields` changer if fields is left null, to merge w/ grid fields\n        super.afterConstruct();\n    }\n\n    updateGrid(newGrid) {\n        if (!newGrid.store?.modelClass) {\n            throw new Error(`Grid does not have a store with a modelClass defined.`);\n        }\n        if (!newGrid.columns) {\n            throw new Error(`Grid does not have a column store.`);\n        }\n    }\n\n    /**\n     * Returns a subset of the fields defined on the model class, excluding those considered internal or otherwise not\n     * suitable for user-facing filtering.\n     * @param {Core.data.Model} modelClass The Model subclass whose fields will be read\n     * @returns {Core.data.field.DataField[]}\n     * @private\n     */\n    static getModelClassFields(modelClass) {\n        const ownFieldNames = new Set(modelClass.fields.map(({ name }) => name));\n        return modelClass?.allFields\n            .filter(field =>\n                !field.internal &&\n                (\n                    SUPPORTED_FIELD_DATA_TYPES.includes(field.type) ||\n                    isSupportedDurationField(field)\n                ) &&\n                (field.definedBy !== Model || ownFieldNames.has(field.name))\n            ) || [];\n    }\n\n    /**\n     * Gets the filterable fields backing any of the configured `grid`'s columns, for those columns for which\n     * it is possible to do so.\n     * @private\n     * @returns {Object} Filterable fields dictionary of the form { [fieldName]: { title, type } }\n     */\n    static getColumnFields(columnStore, modelClass, allowedFieldNames) {\n        const\n            modelFields = ArrayHelper.keyBy(GridFieldFilterPicker.getModelClassFields(modelClass), 'name'),\n            allowedNameSet = allowedFieldNames && new Set(allowedFieldNames);\n        return Object.fromEntries(\n            columnStore?.records\n                .filter(({ field }) => field &&\n                    modelFields[field] &&\n                    (!allowedNameSet || allowedNameSet.has(field)))\n                .map(({ field, text }) => [\n                    field,\n                    {\n                        title : text || field,\n                        type  : isSupportedDurationField(modelFields[field]) ? 'duration' : modelFields[field].type\n                    }\n                ]) ??\n            []);\n    }\n\n    changeFields(newFields) {\n        let localFields = newFields;\n        if (Array.isArray(newFields)) {\n            VersionHelper.deprecate('Core', '6.0.0', 'FieldOption[] deprecated, use Object<String, FieldOption[]> keyed by field name instead');\n            // Support old array syntax for `fields` during deprecation\n            localFields = ArrayHelper.keyBy(localFields, 'name');\n        }\n        return ObjectHelper.merge(\n            {},\n            GridFieldFilterPicker.getColumnFields(this.grid.columns,\n                this.grid.store?.modelClass, this.allowedFieldNames),\n            localFields\n        );\n    }\n}\n\nGridFieldFilterPicker.initClass();\n","import FieldFilterPickerGroup from '../../Core/widget/FieldFilterPickerGroup.js';\nimport './GridFieldFilterPicker.js';\nimport '../../Core/widget/Checkbox.js';\nimport '../../Core/widget/Label.js';\n\n/**\n * @module Grid/widget/GridFieldFilterPickerGroup\n */\n\n/**\n * Extends {@link Core.widget.FieldFilterPickerGroup} to allow providing a {@link Grid.view.Grid} from which\n * available fields will be read. This is useful when a grid is already configured with a set of columns\n * containing display names and type information.\n *\n * The grid should have a {@link Grid.data.ColumnStore} configured (see {@link Grid.view.Grid#config-columns})\n * and a {@link Core.data.Store} whose {@link Core.data.Store#property-modelClass} contains fields with\n * specific data types.\n *\n * Optionally, you can also use {@link #config-allowedFieldNames} to restrict the set of fields shown in the\n * widget.\n *\n * For example:\n *\n * ```javascript\n * new GridFieldFilterPickerGroup({\n *     appendTo : domElement,\n *\n *     grid : myGrid,\n *\n *     filters : [{\n *         property : 'startDate',\n *         operator : '<=',\n *         value    : new Date()\n *     }]\n * });\n * ```\n *\n * @classtype gridfieldfilterpickergroup\n * @extends Core/widget/FieldFilterPickerGroup\n * @demo Grid/fieldfilters\n * @widget\n */\nexport default class GridFieldFilterPickerGroup extends FieldFilterPickerGroup {\n    //region Config\n    static get $name() {\n        return 'GridFieldFilterPickerGroup';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'gridfieldfilterpickergroup';\n    }\n\n    /** @hideconfigs fields, store */\n\n    static configurable = {\n        /**\n         * {@link Grid.view.Grid} from which to read the available field list. In order to\n         * appear as a selectable property for a filter, a column must have a `field` property.\n         * If the column has a `text` property, that will be shown as the displayed text in the\n         * selector; otherwise, the `field` property will be shown as-is.\n         *\n         * The grid's {@link Core.data.Store}'s {@link Core.data.Store#property-modelClass} will be\n         * examined to find field data types.\n         *\n         * You can limit available fields to a subset of the grid's columns using the\n         * {@link #config-allowedFieldNames} configuration property.\n         *\n         * @config {Grid.view.Grid}\n         */\n        grid : null,\n\n        /**\n         * Optional array of field names that are allowed as selectable properties for filters.\n         * This should be a subset of the field names found in the {@link #config-grid}'s store. When supplied,\n         * only the named fields will be shown in the property selector combo.\n         *\n         * @config {String[]}\n         */\n        allowedFieldNames : null\n    };\n\n    //endregion\n\n    static childPickerType = 'gridfieldfilterpicker';\n\n    validateConfig() {\n        if (!this.grid) {\n            throw new Error(`${this.constructor.$name} requires the 'grid' config property.`);\n        }\n    }\n\n    getFilterPickerConfig(filter) {\n        const { grid, allowedFieldNames } = this;\n        return {\n            ...super.getFilterPickerConfig(filter),\n            grid,\n            allowedFieldNames\n        };\n    }\n\n    updateGrid(newGrid) {\n        this.store = this.grid.store;\n    }\n\n    /**\n     * @private\n     */\n    canManage(filter) {\n        const me = this;\n        return super.canManage(filter) && (!me.allowedFieldNames || me.allowedFieldNames.includes(filter.property));\n    }\n\n}\n\nGridFieldFilterPickerGroup.initClass();\n","//TODO: Format value in header filter tooltip (see date)\n\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport WidgetHelper from '../../Core/helper/WidgetHelper.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport Tooltip from '../../Core/widget/Tooltip.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport CollectionFilter from '../../Core/util/CollectionFilter.js';\nimport '../../Core/widget/NumberField.js';\nimport '../../Core/widget/Combo.js';\nimport '../../Core/widget/DateField.js';\nimport '../../Core/widget/TimeField.js';\nimport GridFeatureManager from './GridFeatureManager.js';\nimport '../widget/GridFieldFilterPickerGroup.js';\n\n/**\n * @module Grid/feature/Filter\n */\n\nexport const fieldTypeMap = {\n    date     : 'date',\n    int      : 'number',\n    integer  : 'number',\n    number   : 'number',\n    string   : 'text',\n    duration : 'duration'\n};\n\n/**\n * Feature that allows filtering of the grid by settings filters on columns. The actual filtering is done by the store.\n * For info on programmatically handling filters, see {@link Core.data.mixin.StoreFilter}.\n *\n * {@inlineexample Grid/feature/Filter.js}\n *\n * ```javascript\n * // Filtering turned on but no default filter\n * const grid = new Grid({\n *   features : {\n *     filter : true\n *   }\n * });\n *\n * // Using default filter\n * const grid = new Grid({\n *   features : {\n *     filter : { property : 'city', value : 'Gavle' }\n *   }\n * });\n * ```\n *\n * A column can supply a custom filtering function as its {@link Grid.column.Column#config-filterable} config. When\n * filtering by that column using the UI that function will be used to determine which records to include. See\n * {@link Grid.column.Column#config-filterable Column#filterable} for more information.\n *\n * ```javascript\n * // Custom filtering function for a column\n * const grid = new Grid({\n *    features : {\n *        filter : true\n *    },\n *\n *    columns: [\n *        {\n *          field      : 'age',\n *          text       : 'Age',\n *          type       : 'number',\n *          // Custom filtering function that checks \"greater than\" no matter\n *          // which field user filled in :)\n *          filterable : ({ record, value, operator }) => record.age > value\n *        }\n *    ]\n * });\n * ```\n *\n * If this feature is configured with `prioritizeColumns : true`, those functions will also be used when filtering\n * programmatically:\n *\n * ```javascript\n * const grid = new Grid({\n *    features : {\n *        filter : {\n *            prioritizeColumns : true\n *        }\n *    },\n *\n *    columns: [\n *        {\n *          field      : 'age',\n *          text       : 'Age',\n *          type       : 'number',\n *          filterable : ({ record, value, operator }) => record.age > value\n *        }\n *    ]\n * });\n *\n * // Because of the prioritizeColumns config above, any custom filterable function\n * // on a column will be used when programmatically filtering by that columns field\n * grid.store.filter({\n *     property : 'age',\n *     value    : 41\n * });\n * ```\n *\n * You can supply a field config to use for the filtering field displayed for string type columns:\n *\n * ```javascript\n * // For string-type columns you can also replace the filter UI with a custom field:\n * columns: [\n *     {\n *         field : 'city',\n *         // Filtering for a value out of a list of values\n *         filterable: {\n *             filterField : {\n *                 type  : 'combo',\n *                 items : [\n *                     'Paris',\n *                     'Dubai',\n *                     'Moscow',\n *                     'London',\n *                     'New York'\n *                 ]\n *             }\n *         }\n *     }\n * ]\n * ```\n *\n * You can also change default fields, for example this will use {@link Core.widget.DateTimeField} in filter popup:\n * ```javascript\n * columns : [\n *     {\n *         type       : 'date',\n *         field      : 'start',\n *         filterable : {\n *             filterField : {\n *                 type : 'datetime'\n *             }\n *         }\n *     }\n * ]\n * ```\n *\n * This feature is <strong>disabled</strong> by default.\n *\n * **Note:** This feature cannot be used together with {@link Grid.feature.FilterBar} feature, they are\n * mutually exclusive.\n *\n * ## Keyboard shortcuts\n * This feature has the following default keyboard shortcuts:\n *\n * | Keys   | Action                  | Action description                                                     |\n * |--------|-------------------------|------------------------------------------------------------------------|\n * | F      | showFilterEditorByKey   | When the column header is focused, this shows the filter input field   |\n *\n * For more information on how to customize keyboard shortcuts, please see\n * [our guide](#Grid/guides/customization/keymap.md).\n *\n * To enable an alternative UI that uses {@link Core.widget.FieldFilterPickerGroup} to allow\n * specifying multiple filters on the column at once, set `isMulti` to `true`.\n *\n * @extends Core/mixin/InstancePlugin\n * @demo Grid/filtering\n * @classtype filter\n * @feature\n */\nexport default class Filter extends InstancePlugin {\n    //region Init\n\n    static get $name() {\n        return 'Filter';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Use custom filtering functions defined on columns also when programmatically filtering by the columns\n             * field.\n             *\n             * ```javascript\n             * const grid = new Grid({\n             *     columns : [\n             *         {\n             *             field : 'age',\n             *             text : 'Age',\n             *             filterable({ record, value }) {\n             *               // Custom filtering, return true/false\n             *             }\n             *         }\n             *     ],\n             *\n             *     features : {\n             *         filter : {\n             *             prioritizeColumns : true // <--\n             *         }\n             *     }\n             * });\n             *\n             * // Because of the prioritizeColumns config above, any custom\n             * // filterable function on a column will be used when\n             * // programmatically filtering by that columns field\n             * grid.store.filter({\n             *     property : 'age',\n             *     value    : 30\n             * });\n             * ```\n             *\n             * @config {Boolean}\n             * @default\n             * @category Common\n             */\n            prioritizeColumns : false,\n\n            /**\n             * See {@link #keyboard-shortcuts Keyboard shortcuts} for details\n             * @config {Object<String,String>}\n             */\n            keyMap : {\n                f : 'showFilterEditorByKey'\n            },\n\n            /**\n             * Use {@link Grid.widget.GridFieldFilterPickerGroup} instead of the normal UI,\n             * enabling multiple filters for the same column. To enable the multi-filter UI,\n             * set `isMulti` to either `true` or a {@link Grid.widget.GridFieldFilterPickerGroup}\n             * configuration object.\n             *\n             * @config {Boolean|GridFieldFilterPickerGroupConfig}\n             * @default\n             * @category Common\n             */\n            isMulti : false\n        };\n    }\n\n    construct(grid, config) {\n        if (grid.features.filterBar) {\n            throw new Error('Grid.feature.Filter feature may not be used together with Grid.feature.FilterBar. These features are mutually exclusive.');\n        }\n\n        const me = this;\n\n        me.grid = grid;\n        me.closeFilterEditor = me.closeFilterEditor.bind(me);\n\n        super.construct(grid, config);\n\n        me.bindStore(grid.store);\n\n        if (config && typeof config === 'object') {\n            const clone = ObjectHelper.clone(config);\n\n            // Feature accepts a filter config object, need to remove this config\n            delete clone.prioritizeColumns;\n            delete clone.isMulti;\n            delete clone.dateFormat;\n\n            if (!ObjectHelper.isEmpty(clone)) {\n                grid.store.filter(clone, null, grid.isConfiguring);\n            }\n        }\n    }\n\n    doDestroy() {\n        this.filterTip?.destroy();\n        this.filterEditorPopup?.destroy();\n\n        super.doDestroy();\n    }\n\n    get store() {\n        return this.grid.store;\n    }\n\n    bindStore(store) {\n        this.detachListeners('store');\n\n        store.ion({\n            name         : 'store',\n            beforeFilter : 'onStoreBeforeFilter',\n            filter       : 'onStoreFilter',\n            thisObj      : this\n        });\n    }\n\n    //endregion\n\n    //region Plugin config\n\n    // Plugin configuration. This plugin chains some of the functions in Grid.\n    static get pluginConfig() {\n        return {\n            chain : ['renderHeader', 'populateCellMenu', 'populateHeaderMenu', 'onElementClick', 'bindStore']\n        };\n    }\n\n    //endregion\n\n    //region Refresh headers\n\n    /**\n     * Update headers to match stores filters. Called on store load and grid header render.\n     * @param reRenderRows Also refresh rows?\n     * @private\n     */\n    refreshHeaders(reRenderRows) {\n        const\n            me      = this,\n            grid    = me.grid,\n            element = grid.headerContainer;\n\n        if (element) {\n            // remove .latest from all filters, will be applied to actual latest\n            DomHelper.children(element, '.b-filter-icon.b-latest').forEach(iconElement => iconElement.classList.remove('b-latest'));\n\n            if (!me.filterTip) {\n                me.filterTip = new Tooltip({\n                    forElement  : element,\n                    forSelector : '.b-filter-icon',\n                    getHtml({ activeTarget }) {\n                        return activeTarget.dataset.filterText;\n                    }\n                });\n            }\n\n            if (!grid.store.isFiltered) {\n                me.filterTip.hide();\n            }\n\n            grid.columns.visibleColumns.forEach(column => {\n                if (column.filterable !== false) {\n                    const\n                        columnFilters    = me.store.filters.allValues.filter(({ property, disabled, internal }) =>\n                            property === column.field && !disabled && !internal),\n                        isColumnFiltered = columnFilters.length > 0,\n                        headerEl = column.element;\n\n                    if (headerEl) {\n                        const textEl = column.textWrapper;\n\n                        let filterIconEl = textEl?.querySelector('.b-filter-icon'),\n                            filterText;\n\n                        if (isColumnFiltered) {\n                            const bullet = '&#x2022 ';\n                            filterText = `${me.L('L{filter}')}: ` +\n                                (columnFilters.length > 1 ? '<br/><br/>' : '') +\n                                columnFilters.map(columnFilter => {\n                                    let value = columnFilter.value ?? '';\n                                    const\n                                        isArray = Array.isArray(value),\n                                        relation = me.store?.modelRelations?.find(\n                                            ({ foreignKey }) => foreignKey === columnFilter.property);\n\n                                    if (columnFilter.displayValue) {\n                                        value = columnFilter.displayValue;\n                                    }\n                                    else {\n                                        if (me.isMulti && relation) {\n                                            // Look up remote display value per filterable-field config (FieldFilterPicker.js#FieldOption)\n                                            const { relatedDisplayField } = me.isMulti.fields?.[columnFilter.property];\n                                            if (relatedDisplayField) {\n                                                const getDisplayValue = foreignId => relation.foreignStore.getById(foreignId)?.[relatedDisplayField];\n                                                if (isArray) {\n                                                    value = value[relatedDisplayField]\n                                                        .sort((a, b) => (a ?? '').localeCompare(b ?? ''));\n                                                }\n                                                else {\n                                                    value = getDisplayValue(value);\n                                                }\n                                            }\n                                        }\n                                        else if (column.formatValue && value) {\n                                            value = isArray\n                                                ? value.map(val => column.formatValue(val))\n                                                : column.formatValue(value);\n                                        }\n\n                                        if (isArray) {\n                                            value = `[ ${value.join(', ')} ]`;\n                                        }\n                                    }\n\n                                    return (columnFilters.length > 1 ? bullet : '') +\n                                        (typeof columnFilter === 'string'\n                                            ? columnFilter\n                                            : `${columnFilter.operator} ${value}`);\n                                }).join('<br/><br/>');\n                        }\n                        else {\n                            filterText = me.L('L{applyFilter}');\n                        }\n\n                        if (!filterIconEl) {\n                            // putting icon in header text to have more options for positioning it\n                            filterIconEl = DomHelper.createElement({\n                                parent    : textEl,\n                                tag       : 'div',\n                                className : 'b-filter-icon',\n                                dataset   : {\n                                    filterText\n                                }\n                            });\n                        }\n                        else {\n                            filterIconEl.dataset.filterText = filterText;\n                        }\n\n                        // latest applied filter distinguished with class to enable highlighting etc.\n                        if (column.field === me.store.latestFilterField) filterIconEl.classList.add('b-latest');\n\n                        headerEl.classList.add('b-filterable');\n                        headerEl.classList.toggle('b-filter', isColumnFiltered);\n                    }\n\n                    column.meta.isFiltered = isColumnFiltered;\n                }\n            });\n\n            if (reRenderRows) {\n                grid.refreshRows();\n            }\n        }\n    }\n\n    //endregion\n\n    //region Filter\n\n    applyFilter(column, config) {\n        const\n            { store }    = this,\n            { filterFn } = column.filterable;\n\n        // Must add the filter silently, so that the column gets a reference to its $filter\n        // before the filter happens and events are broadcast.\n        column.$filter = store.addFilter({\n            ...column.filterable,\n            ...config,\n            property : column.field,\n\n            // Only inject a filterBy configuration if the column has a custom filterBy\n            [filterFn ? 'filterBy' : '_'] : function(record) {\n                return filterFn({ value : this.value, record, operator : this.operator, property : this.property, column });\n            }\n        }, true);\n\n        // Apply the new set of store filters.\n        store.filter();\n    }\n\n    removeFilter(column) {\n        if (this.isMulti) {\n            for (const filter of this.getCurrentMultiFilters(column)) {\n                this.store.removeFilter(filter);\n            }\n        }\n        else {\n            this.store.removeFilter(column.field);\n        }\n    }\n\n    disableFilter(column) {\n        for (const filter of this.getCurrentMultiFilters(column)) {\n            filter.disabled = true;\n            this.store.filter(filter);\n        }\n        this.store.filter();\n    }\n\n    getCurrentMultiFilters(column) {\n        return this.store.filters.values.filter(filter => filter.property === column.field);\n    }\n\n    // TODO: break out as own views, registering with Filter the same way columns register with ColumnManager\n\n    getPopupDateItems(column, fieldType, filter, initialValue, store, changeCallback, closeCallback, filterField) {\n        const\n            me      = this,\n            onClose = changeCallback;\n\n        function onClear() {\n            me.removeFilter(column);\n        }\n\n        function onKeydown({ event }) {\n            if (event.key === 'Enter') {\n                changeCallback();\n            }\n        }\n\n        function onChange({ source, value }) {\n            if (value == null) {\n                onClear();\n            }\n            else {\n                me.clearSiblingsFields(source);\n                me.applyFilter(column, { operator : source.operator, value, displayValue : source._value, type : 'date' });\n            }\n        }\n\n        return [\n            ObjectHelper.assign({\n                type        : 'date',\n                ref         : 'on',\n                placeholder : 'L{on}',\n                localeClass : me,\n                clearable   : true,\n                label       : '<i class=\"b-fw-icon b-icon-filter-equal\"></i>',\n                value       : filter?.operator === 'sameDay' ? filter.value : initialValue,\n                operator    : 'sameDay',\n                onKeydown,\n                onChange,\n                onClose,\n                onClear\n            }, filterField),\n            ObjectHelper.assign({\n                type        : 'date',\n                ref         : 'before',\n                placeholder : 'L{before}',\n                localeClass : me,\n                clearable   : true,\n                label       : '<i class=\"b-fw-icon b-icon-filter-before\"></i>',\n                value       : filter?.operator === '<' ? filter.value : null,\n                operator    : '<',\n                onKeydown,\n                onChange,\n                onClose,\n                onClear\n            }, filterField),\n            ObjectHelper.assign({\n                type        : 'date',\n                ref         : 'after',\n                cls         : 'b-last-row',\n                placeholder : 'L{after}',\n                localeClass : me,\n                clearable   : true,\n                label       : '<i class=\"b-fw-icon b-icon-filter-after\"></i>',\n                value       : filter?.operator === '>' ? filter.value : null,\n                operator    : '>',\n                onKeydown,\n                onChange,\n                onClose,\n                onClear\n            }, filterField)\n        ];\n    }\n\n    getPopupNumberItems(column, fieldType, filter, initialValue, store, changeCallback, closeCallback, filterField) {\n        const\n            me    = this,\n            onEsc = changeCallback;\n\n        function onClear() {\n            me.removeFilter(column);\n        }\n\n        function onKeydown({ event }) {\n            if (event.key === 'Enter') {\n                changeCallback();\n            }\n        }\n\n        function onChange({ source, value }) {\n            if (value == null) {\n                onClear();\n            }\n            else {\n                me.clearSiblingsFields(source);\n                me.applyFilter(column, { operator : source.operator, value });\n            }\n        }\n\n        return [\n            ObjectHelper.assign({\n                type        : 'number',\n                placeholder : 'L{Filter.equals}',\n                localeClass : me,\n                clearable   : true,\n                label       : '<i class=\"b-fw-icon b-icon-filter-equal\"></i>',\n                value       : filter?.operator === '=' ? filter.value : initialValue,\n                operator    : '=',\n                onKeydown,\n                onChange,\n                onEsc,\n                onClear\n            }, filterField),\n            ObjectHelper.assign({\n                type        : 'number',\n                placeholder : 'L{lessThan}',\n                localeClass : me,\n                clearable   : true,\n                label       : '<i class=\"b-fw-icon b-icon-filter-less\"></i>',\n                value       : filter?.operator === '<' ? filter.value : null,\n                operator    : '<',\n                onKeydown,\n                onChange,\n                onEsc,\n                onClear\n            }, filterField),\n            ObjectHelper.assign({\n                type        : 'number',\n                cls         : 'b-last-row',\n                placeholder : 'L{moreThan}',\n                localeClass : me,\n                clearable   : true,\n                label       : '<i class=\"b-fw-icon b-icon-filter-more\"></i>',\n                value       : filter?.operator === '>' ? filter.value : null,\n                operator    : '>',\n                onKeydown,\n                onChange,\n                onEsc,\n                onClear\n            }, filterField)\n        ];\n    }\n\n    clearSiblingsFields(sourceField) {\n        // TODO: Store filtering allows multiple filters per field (for example age > 50 and age < 80),\n        // but the Filter feature only handles a single filter per field.\n        // For now, trying to add filter by age > and then for age <,\n        // it should clear the previous field since that filter is replaced\n        this.filterEditorPopup?.items.forEach(field => {\n            field !== sourceField && field?.clear();\n        });\n    }\n\n    getPopupDurationItems(column, fieldType, filter, initialValue, store, changeCallback, closeCallback, filterField) {\n        const\n            me      = this,\n            onEsc   = changeCallback,\n            onClear = () => me.removeFilter(column);\n\n        me.removeFilter(column);\n\n        function onChange({ source, value }) {\n            me.clearSiblingsFields(source);\n            me.applyFilter(column, { operator : source.operator, value : value });\n        }\n\n        return [\n            ObjectHelper.assign({\n                type        : 'duration',\n                placeholder : 'L{Filter.equals}',\n                localeClass : me,\n                clearable   : true,\n                label       : '<i class=\"b-fw-icon b-icon-filter-equal\"></i>',\n                value       : filter?.operator === '=' ? filter.value : initialValue,\n                operator    : '=',\n                onChange,\n                onEsc,\n                onClear\n            }, filterField),\n            ObjectHelper.assign({\n                type        : 'duration',\n                placeholder : 'L{lessThan}',\n                localeClass : me,\n                clearable   : true,\n                label       : '<i class=\"b-fw-icon b-icon-filter-less\"></i>',\n                value       : filter?.operator === '<' ? filter.value : null,\n                operator    : '<',\n                onChange,\n                onEsc,\n                onClear\n            }, filterField),\n            ObjectHelper.assign({\n                type        : 'duration',\n                cls         : 'b-last-row',\n                placeholder : 'L{moreThan}',\n                localeClass : me,\n                clearable   : true,\n                label       : '<i class=\"b-fw-icon b-icon-filter-more\"></i>',\n                value       : filter?.operator === '>' ? filter.value : null,\n                operator    : '>',\n                onChange,\n                onEsc,\n                onClear\n            }, filterField)\n        ];\n    }\n\n    getPopupStringItems(column, fieldType, filter, initialValue, store, changeCallback, closeCallback, filterField) {\n        const me = this;\n\n        return [ObjectHelper.assign({\n            type        : fieldType,\n            cls         : 'b-last-row',\n            placeholder : 'L{filter}',\n            localeClass : me,\n            clearable   : true,\n            label       : '<i class=\"b-fw-icon b-icon-filter-equal\"></i>',\n            value       : filter ? filter.value || filter : initialValue,\n            operator    : '*',\n            onChange({ source, value }) {\n                if (value === '') {\n                    closeCallback();\n                }\n                else {\n                    me.applyFilter(column, { operator : source.operator, value, displayValue : source.displayField && source.records ? source.records.map(rec => rec[source.displayField]).join(', ') : undefined });\n                    // Leave multiselect filter combo visible to be able to select many items at once\n                    if (!source.multiSelect) {\n                        changeCallback();\n                    }\n                }\n            },\n            onClose : changeCallback,\n            onClear : closeCallback\n        }, filterField)];\n    }\n\n    /**\n     * Get fields to display in filter popup.\n     * @param {Grid.column.Column} column Column\n     * @param fieldType Type of field, number, date etc.\n     * @param filter Current filter filter\n     * @param initialValue\n     * @param store Grid store\n     * @param changeCallback Callback for when filter has changed\n     * @param closeCallback Callback for when editor should be closed\n     * @param filterField filter field\n     * @returns {*}\n     * @private\n     */\n    getPopupItems(column, fieldType, filter, initialValue, store, changeCallback, closeCallback, filterField) {\n        const me = this;\n        if (me.isMulti) {\n            return me.getMultiFilterPopupItems(...arguments);\n        }\n        switch (fieldType) {\n            case 'date':\n                return me.getPopupDateItems(...arguments);\n            case 'number':\n                return me.getPopupNumberItems(...arguments);\n            case 'duration':\n                return me.getPopupDurationItems(...arguments);\n            default:\n                return me.getPopupStringItems(...arguments);\n        }\n    }\n\n    getMultiFilterPopupItems(column) {\n        const\n            { grid, isMulti } = this,\n            existingFilter = grid.store?.filters.find(filter => filter.property === column.field);\n        return [{\n            ...(typeof isMulti === 'object' ? isMulti : undefined),\n            type            : 'gridfieldfilterpickergroup',\n            ref             : 'pickerGroup',\n            limitToProperty : column.field,\n            grid,\n            filters         : existingFilter ? [] : [{\n                property : column.field\n            }],\n            propertyFieldCls : 'b-transparent property-field',\n            operatorFieldCls : 'b-transparent operator-field',\n            valueFieldCls    : 'b-transparent value-field',\n            width            : '400px'\n        }];\n    }\n\n    /**\n     * Shows a popup where a filter can be edited.\n     * @param {Grid.column.Column|String} column Column to show filter editor for\n     * @param {*} [value] The initial value of the filter field\n     */\n    showFilterEditor(column, value) {\n        column = this.grid.columns.getById(column);\n\n        const\n            me        = this,\n            { store, isMulti } = me,\n            headerEl  = column.element,\n            filter    = store.filters.getBy('property', column.field),\n            fieldType = me.getFilterType(column);\n\n        if (column.filterable === false) {\n            return;\n        }\n\n        // Destroy previous filter popup\n        me.closeFilterEditor();\n\n        const items = me.getPopupItems(\n            column,\n            fieldType,\n\n            // Only pass filter if it's not an internal filter\n            filter?.internal ? null : filter,\n\n            value,\n            store,\n            me.closeFilterEditor,\n            () => {\n                me.removeFilter(column);\n                me.closeFilterEditor();\n            },\n            column.filterable.filterField,\n            isMulti\n        );\n\n        // Localize placeholders\n        items.forEach(item => item.placeholder = item.placeholder ? this.L(item.placeholder) : item.placeholder);\n\n        me.filterEditorPopup = WidgetHelper.openPopup(headerEl, {\n            owner        : me.grid,\n            cls          : 'b-filter-popup',\n            scrollAction : 'realign',\n            layout       : {\n                type  : 'vbox',\n                align : 'stretch'\n            },\n            items\n        });\n    }\n\n    /**\n     * Close the filter editor.\n     */\n    closeFilterEditor() {\n        // Must defer the destroy because it may be closed by an event like a \"change\" event where\n        // there may be plenty of code left to execute which must not execute on destroyed objects.\n        this.filterEditorPopup?.setTimeout(this.filterEditorPopup.destroy);\n        this.filterEditorPopup = null;\n    }\n\n    //endregion\n\n    //region Context menu\n\n    //TODO: break out together with getPopupXXItems() (see comment above)\n\n    getFilterType(column) {\n        const\n            fieldName = column.field,\n            field     = this.client.store.modelClass.getFieldDefinition(fieldName),\n            type      = column.filterType;\n\n        return type ? fieldTypeMap[type] : (fieldTypeMap[column.type] || field && fieldTypeMap[field.type]) || 'text';\n    }\n\n    populateCellMenuWithDateItems({ column, record, items }) {\n        const\n            property = column.field,\n            type     = this.getFilterType(column);\n\n        if (type === 'date') {\n            const\n                me       = this,\n                value    = record[property],\n                filter   = operator => {\n                    me.applyFilter(column, {\n                        operator,\n                        value,\n                        displayValue : column.formatValue ? column.formatValue(value) : value,\n                        type         : 'date'\n                    });\n                };\n\n            items.filterDateEquals = {\n                text        : 'L{on}',\n                localeClass : me,\n                icon        : 'b-fw-icon b-icon-filter-equal',\n                cls         : 'b-separator',\n                weight      : 300,\n                disabled    : me.disabled,\n                onItem      : () => filter('=')\n            };\n\n            items.filterDateBefore = {\n                text        : 'L{before}',\n                localeClass : me,\n                icon        : 'b-fw-icon b-icon-filter-before',\n                weight      : 310,\n                disabled    : me.disabled,\n                onItem      : () => filter('<')\n            };\n\n            items.filterDateAfter = {\n                text        : 'L{after}',\n                localeClass : me,\n                icon        : 'b-fw-icon b-icon-filter-after',\n                weight      : 320,\n                disabled    : me.disabled,\n                onItem      : () => filter('>')\n            };\n        }\n    }\n\n    populateCellMenuWithNumberItems({ column, record, items }) {\n        const\n            property = column.field,\n            type     = this.getFilterType(column);\n\n        if (type === 'number') {\n            const\n                me       = this,\n                value    = record[property],\n                filter   = operator => {\n                    me.applyFilter(column, { operator, value });\n                };\n\n            items.filterNumberEquals = {\n                text        : 'L{equals}',\n                localeClass : me,\n                icon        : 'b-fw-icon b-icon-filter-equal',\n                cls         : 'b-separator',\n                weight      : 300,\n                disabled    : me.disabled,\n                onItem      : () => filter('=')\n            };\n\n            items.filterNumberLess = {\n                text        : 'L{lessThan}',\n                localeClass : me,\n                icon        : 'b-fw-icon b-icon-filter-less',\n                weight      : 310,\n                disabled    : me.disabled,\n                onItem      : () => filter('<')\n            };\n\n            items.filterNumberMore = {\n                text        : 'L{moreThan}',\n                localeClass : me,\n                icon        : 'b-fw-icon b-icon-filter-more',\n                weight      : 320,\n                disabled    : me.disabled,\n                onItem      : () => filter('>')\n            };\n        }\n    }\n\n    populateCellMenuWithDurationItems({ column, record, items }) {\n        const\n            property = column.field,\n            type     = this.getFilterType(column);\n\n        if (type === 'duration') {\n            const\n                me       = this,\n                value    = record[property],\n                filter   = operator => {\n                    me.applyFilter(column, { operator, value });\n                };\n\n            items.filterDurationEquals = {\n                text        : 'L{equals}',\n                localeClass : me,\n                icon        : 'b-fw-icon b-icon-filter-equal',\n                cls         : 'b-separator',\n                weight      : 300,\n                disabled    : me.disabled,\n                onItem      : () => filter('=')\n            };\n\n            items.filterDurationLess = {\n                text        : 'L{lessThan}',\n                localeClass : me,\n                icon        : 'b-fw-icon b-icon-filter-less',\n                weight      : 310,\n                disabled    : me.disabled,\n                onItem      : () => filter('<')\n            };\n\n            items.filterDurationMore = {\n                text        : 'L{moreThan}',\n                localeClass : me,\n                icon        : 'b-fw-icon b-icon-filter-more',\n                weight      : 320,\n                disabled    : me.disabled,\n                onItem      : () => filter('>')\n            };\n        }\n    }\n\n    populateCellMenuWithStringItems({ column, record, items }) {\n        const type = this.getFilterType(column);\n\n        if (!/(date|number|duration)/.test(type)) {\n            const\n                me       = this,\n                value    = column.getFilterableValue(record),\n                operator = column.filterable.filterField?.operator ?? '*';\n\n            items.filterStringEquals = {\n                text        : 'L{equals}',\n                localeClass : me,\n                icon        : 'b-fw-icon b-icon-filter-equal',\n                cls         : 'b-separator',\n                weight      : 300,\n                disabled    : me.disabled,\n                onItem      : () => me.applyFilter(column, { value, operator })\n            };\n        }\n    }\n\n    /**\n     * Add menu items for filtering.\n     * @param {Object} options Contains menu items and extra data retrieved from the menu target.\n     * @param {Grid.column.Column} options.column Column for which the menu will be shown\n     * @param {Core.data.Model} options.record Record for which the menu will be shown\n     * @param {Object<String,MenuItemConfig|Boolean|null>} options.items A named object to describe menu items\n     * @internal\n     */\n    populateCellMenu({ column, record, items }) {\n        const me = this;\n\n        if (column.filterable !== false && !record.isSpecialRow) {\n            me.populateCellMenuWithDateItems(...arguments);\n            me.populateCellMenuWithNumberItems(...arguments);\n            me.populateCellMenuWithDurationItems(...arguments);\n            me.populateCellMenuWithStringItems(...arguments);\n\n            if (column.meta.isFiltered) {\n                items.filterRemove = {\n                    text        : 'L{removeFilter}',\n                    localeClass : me,\n                    icon        : 'b-fw-icon b-icon-remove',\n                    cls         : 'b-separator',\n                    weight      : 400,\n                    disabled    : me.disabled || (me.isMulti && !me.columnHasRemovableFilters(column)),\n                    onItem      : () => me.removeFilter(column)\n                };\n            }\n\n            if (me.isMulti) {\n                items.filterDisable = {\n                    text        : 'L{disableFilter}',\n                    localeClass : me,\n                    icon        : 'b-fw-icon b-icon-filter-disable',\n                    cls         : 'b-separator',\n                    weight      : 400,\n                    disabled    : me.disabled || !me.columnHasEnabledFilters(column),\n                    onItem      : () => me.disableFilter(column)\n                };\n            }\n        }\n    }\n\n    /**\n     * Used by isMulti mode to determine whether the 'remove filters' menu item should be enabled.\n     * @internal\n     */\n    columnHasRemovableFilters(column) {\n        const me = this;\n        return Boolean(me.getCurrentMultiFilters(column).find(filter =>\n            !me.canDeleteFilter || (me.callback(me.canDeleteFilter, me, [filter]) !== false)));\n    }\n\n    /**\n     * Used by isMulti mode to determine whether the 'disable filters' menu item should be enabled.\n     * @internal\n     */\n    columnHasEnabledFilters(column) {\n        return Boolean(this.getCurrentMultiFilters(column).find(filter => !filter.disabled));\n    }\n\n    /**\n     * Add menu item for removing filter if column is filtered.\n     * @param {Object} options Contains menu items and extra data retrieved from the menu target.\n     * @param {Grid.column.Column} options.column Column for which the menu will be shown\n     * @param {Object<String,MenuItemConfig|Boolean|null>} options.items A named object to describe menu items\n     * @internal\n     */\n    populateHeaderMenu({ column, items }) {\n        const me = this;\n\n        if (column.meta.isFiltered) {\n            items.editFilter = {\n                text        : 'L{editFilter}',\n                localeClass : me,\n                weight      : 100,\n                icon        : 'b-fw-icon b-icon-filter',\n                cls         : 'b-separator',\n                disabled    : me.disabled,\n                onItem      : () => me.showFilterEditor(column)\n            };\n\n            items.removeFilter = {\n                text        : 'L{removeFilter}',\n                localeClass : me,\n                weight      : 110,\n                icon        : 'b-fw-icon b-icon-remove',\n                disabled    : me.disabled || (me.isMulti && !me.columnHasRemovableFilters(column)),\n                onItem      : () => me.removeFilter(column)\n            };\n\n            if (me.isMulti) {\n                items.disableFilter = {\n                    text        : 'L{disableFilter}',\n                    localeClass : me,\n                    icon        : 'b-fw-icon b-icon-filter-disable',\n                    weight      : 115,\n                    disabled    : me.disabled || !me.columnHasEnabledFilters(column),\n                    onItem      : () => me.disableFilter(column)\n                };\n            }\n        }\n        else if (column.filterable !== false) {\n            items.filter = {\n                text        : 'L{filter}',\n                localeClass : me,\n                weight      : 100,\n                icon        : 'b-fw-icon b-icon-filter',\n                cls         : 'b-separator',\n                disabled    : me.disabled,\n                onItem      : () => me.showFilterEditor(column)\n            };\n        }\n    }\n\n    //endregion\n\n    //region Events\n\n    // Intercept filtering by a column that has a custom filtering fn, and inject that fn\n    onStoreBeforeFilter({ filters }) {\n        const { columns } = this.client;\n\n        for (let i = 0; i < filters.count; i++) {\n            const filter = filters.getAt(i);\n\n            // Only take ownership of filters which are not internal\n            if (!filter.internal) {\n                const column = (filter.columnOwned || this.prioritizeColumns) && columns.find(col => col.filterable !== false && col.field === filter.property);\n\n                if (column?.filterable?.filterFn) {\n                    // If the filter was sourced from the store, replace it with a filter which\n                    // uses the column's filterFn\n                    if (!column.$filter) {\n                        column.$filter = new CollectionFilter({\n                            columnOwned : true,\n                            property    : filter.property,\n                            operator    : filter.operator,\n                            value       : filter.value,\n                            filterBy(record) {\n                                return column.filterable.filterFn({ value : this.value, record, operator : this.operator, property : this.property, column });\n                            }\n                        });\n                    }\n\n                    // Update value and operator used by filters filtering fn\n                    column.$filter.value = filter.value;\n                    column.$filter.displayValue = filter.displayValue;\n                    column.$filter.operator = filter.operator;\n\n                    filters.splice(i, 1, column.$filter);\n                }\n            }\n        }\n    }\n\n    /**\n     * Store filtered; refresh headers.\n     * @private\n     */\n    onStoreFilter() {\n        // Pass false to not refresh rows.\n        // Store's refresh event will refresh the rows.\n        this.refreshHeaders(false);\n    }\n\n    /**\n     * Called after headers are rendered, make headers match stores initial sorters\n     * @private\n     */\n    renderHeader() {\n        this.refreshHeaders(false);\n    }\n\n    /**\n     * Called when user clicks on the grid. Only care about clicks on the filter icon.\n     * @param {MouseEvent} event\n     * @private\n     */\n    onElementClick({ target }) {\n        if (this.filterEditorPopup) {\n            this.closeFilterEditor();\n        }\n\n        if (target.classList.contains('b-filter-icon')) {\n            const headerEl = target.closest('.b-grid-header');\n\n            this.showFilterEditor(headerEl.dataset.columnId);\n\n            return false;\n        }\n    }\n\n    /**\n     * Called when user presses F-key grid.\n     * @param {MouseEvent} event\n     * @private\n     */\n    showFilterEditorByKey({ target }) {\n        const headerEl = target.matches('.b-grid-header') && target;\n        // Header must be focused\n        if (headerEl) {\n            this.showFilterEditor(headerEl.dataset.columnId);\n        }\n        return Boolean(headerEl);\n    }\n\n    // Only care about F key when a filterable header is focused\n    isActionAvailable(key, action, event) {\n        const\n            headerElement = event.target.closest('.b-grid-header'),\n            column        = headerElement && this.client.columns.find(col => col.id === headerElement.dataset.columnId);\n\n        return Boolean(column?.filterable);\n    }\n\n    //endregion\n}\n\nGridFeatureManager.registerFeature(Filter);\n","/* eslint-disable no-unused-expressions */\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport WidgetHelper from '../../Core/helper/WidgetHelper.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport '../../Core/widget/NumberField.js';\nimport '../../Core/widget/Combo.js';\nimport '../../Core/widget/DateField.js';\nimport '../../Core/widget/TimeField.js';\nimport GridFeatureManager from './GridFeatureManager.js';\nimport CollectionFilter from '../../Core/util/CollectionFilter.js';\n\nconst complexOperators = {\n    '*'          : null,\n    isIncludedIn : null,\n    startsWith   : null,\n    endsWidth    : null\n};\n\n/**\n * @module Grid/feature/FilterBar\n */\n\n/**\n * Feature that allows filtering of the grid by entering filters on column headers.\n * The actual filtering is done by the store.\n * For info on programmatically handling filters, see {@link Core.data.mixin.StoreFilter StoreFilter}.\n *\n * {@inlineexample Grid/feature/FilterBar.js}\n *\n * ```javascript\n * // filtering turned on but no initial filter\n * const grid = new Grid({\n *   features: {\n *     filterBar : true\n *   }\n * });\n *\n * // using initial filter\n * const grid = new Grid({\n *   features : {\n *     filterBar : { filter: { property : 'city', value : 'Gavle' } }\n *   }\n * });\n * ```\n *\n * ## Enabling filtering for a column\n * The individual filterability of columns is defined by a `filterable` property on the column which defaults to `true`.\n * If `false`, that column is not filterable. Note: If you have multiple columns configured with the same `field` value,\n * assign an {@link Core.data.Model#field-id} to the columns to ensure filters work correctly.\n *\n * The property value may also be a custom filter function.\n *\n * The property value may also be an object which may contain the following two properties:\n *  - **filterFn** : `Function` A custom filtering function\n *  - **filterField** : `Object` A config object for the filter value input field. See {@link Core.widget.TextField} or\n *  the other field widgets for reference.\n *\n * ```javascript\n * // Custom filtering function for a column\n * const grid = new Grid({\n *   features : {\n *     filterBar : true\n *   },\n *\n *   columns: [\n *      {\n *        field      : 'age',\n *        text       : 'Age',\n *        type       : 'number',\n *        // Custom filtering function that checks \"greater than\"\n *        filterable : ({ record, value }) => record.age > value\n *      },\n *      {\n *        field : 'name',\n *        // Filterable may specify a filterFn and a config for the filtering input field\n *        filterable : {\n *          filterFn : ({ record, value }) => record.name.toLowerCase().indexOf(value.toLowerCase()) !== -1,\n *          filterField : {\n *            emptyText : 'Filter name'\n *          }\n *        }\n *      },\n *      {\n *        field : 'city',\n *        text : 'Visited',\n *        flex : 1,\n *        // Filterable with multiselect combo to pick several items to filter\n *        filterable : {\n *          filterField : {\n *            type        : 'combo',\n *            multiSelect : true,\n *            items       : ['Barcelona', 'Moscow', 'Stockholm']\n *          }\n *        }\n *      }\n *   ]\n * });\n * ```\n *\n * If this feature is configured with `prioritizeColumns : true`, those functions will also be used when filtering\n * programmatically:\n *\n * ```javascript\n * const grid = new Grid({\n *    features : {\n *        filterBar : {\n *            prioritizeColumns : true\n *        }\n *    },\n *\n *    columns: [\n *        {\n *          field      : 'age',\n *          text       : 'Age',\n *          type       : 'number',\n *          // Custom filtering function that checks \"greater than\" no matter\n *          // which field user filled in :)\n *          filterable : ({ record, value, operator }) => record.age > value\n *        }\n *    ]\n * });\n *\n * // Will be used when filtering programmatically or using the UI\n * grid.store.filter({\n *     property : 'age',\n *     value    : 41\n * });\n * ```\n *\n * ## Filtering using a multiselect combo\n *\n * To filter the grid by choosing values which should match with the store data, use a {@link Core.widget.Combo}, and configure\n * your grid like so:\n *\n * ```javascript\n * const grid = new Grid({\n *    features : {\n *        filterBar : true\n *    },\n *\n *    columns : [\n *        {\n *            id         : 'name',\n *            field      : 'name',\n *            text       : 'Name',\n *            filterable : {\n *                filterField : {\n *                    type         : 'combo',\n *                    multiSelect  : true,\n *                    valueField   : 'name',\n *                    displayField : 'name'\n *                }\n *            }\n *        }\n *    ]\n * });\n * ```\n *\n * You can also filter the {@link Core.widget.Combo} values, for example to filter out empty values. Example:\n *\n * ```javascript\n * const grid = new Grid({\n *    features : {\n *        filterBar : true\n *    },\n *\n *    columns : [\n *        {\n *            text       : 'Airline',\n *            field      : 'airline',\n *            flex       : 1,\n *            filterable : {\n *                filterField : {\n *                    type         : 'combo',\n *                    multiSelect  : true,\n *                    valueField   : 'airline',\n *                    displayField : 'airline',\n *                    store        : {\n *                        filters : {\n *                            // Filter out empty values\n *                            filterBy : record => !!record.airline\n *                        }\n *                    }\n *                }\n *            }\n *        }\n *    ]\n * });\n * ```\n *\n * This feature is <strong>disabled</strong> by default.\n *\n * **Note:** This feature cannot be used together with {@link Grid.feature.Filter filter} feature, they are mutually\n * exclusive.\n *\n * @extends Core/mixin/InstancePlugin\n * @demo Grid/filterbar\n * @classtype filterBar\n * @feature\n */\nexport default class FilterBar extends InstancePlugin {\n    //region Config\n\n    static get $name() {\n        return 'FilterBar';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Use custom filtering functions defined on columns also when programmatically filtering by the columns\n             * field.\n             *\n             * ```javascript\n             * const grid = new Grid({\n             *     columns : [\n             *         {\n             *             field : 'age',\n             *             text : 'Age',\n             *             filterable({ record, value }) {\n             *               // Custom filtering, return true/false\n             *             }\n             *         }\n             *     ],\n             *\n             *     features : {\n             *         filterBar : {\n             *             prioritizeColumns : true // <--\n             *         }\n             *     }\n             * });\n             *\n             * // Because of the prioritizeColumns config above, any custom\n             * // filterable function on a column will be used when\n             * // programmatically filtering by that columns field\n             * grid.store.filter({\n             *     property : 'age',\n             *     value    : 30\n             * });\n             * ```\n             *\n             * @config {Boolean}\n             * @default\n             * @category Common\n             */\n            prioritizeColumns : false,\n\n            /**\n             * The delay in milliseconds to wait after the last keystroke before applying filters.\n             * Set to 0 to not trigger filtering from keystrokes, requires pressing ENTER instead\n             * @config {Number}\n             * @default\n             * @category Common\n             */\n            keyStrokeFilterDelay : 300,\n\n            /**\n             * Toggle compact mode. In this mode the filtering fields are styled to transparently overlay the headers,\n             * occupying no additional space.\n             * @member {Boolean} compactMode\n             * @category Common\n             */\n            /**\n             * Specify `true` to enable compact mode for the filter bar. In this mode the filtering fields are styled\n             * to transparently overlay the headers, occupying no additional space.\n             * @config {Boolean}\n             * @default\n             * @category Common\n             */\n            compactMode : false,\n\n            // Destroying data level filters when we hiding UI is supposed to be optional someday. So far this flag is private\n            clearStoreFiltersOnHide : true,\n\n            keyMap : {\n                // Private\n                ArrowUp    : { handler : 'disableGridNavigation', preventDefault : false },\n                ArrowRight : { handler : 'disableGridNavigation', preventDefault : false },\n                ArrowDown  : { handler : 'disableGridNavigation', preventDefault : false },\n                ArrowLeft  : { handler : 'disableGridNavigation', preventDefault : false },\n                Enter      : { handler : 'disableGridNavigation', preventDefault : false }\n            }\n        };\n    }\n\n    static get pluginConfig() {\n        return {\n            before : ['renderContents'],\n            chain  : ['afterColumnsChange', 'renderHeader', 'populateHeaderMenu', 'bindStore']\n        };\n    }\n\n    static get properties() {\n        return {\n            filterFieldCls           : 'b-filter-bar-field',\n            filterFieldInputCls      : 'b-filter-bar-field-input',\n            filterableColumnCls      : 'b-filter-bar-enabled',\n            filterFieldInputSelector : '.b-filter-bar-field-input',\n            filterableColumnSelector : '.b-filter-bar-enabled',\n            filterParseRegExp        : /^\\s*([<>=*])?(.*)$/,\n            storeTrackingSuspended   : 0\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    construct(grid, config) {\n        if (grid.features.filter) {\n            throw new Error('Grid.feature.FilterBar feature may not be used together with Grid.feature.Filter, These features are mutually exclusive.');\n        }\n\n        const me = this;\n\n        me.grid = grid;\n\n        me.onColumnFilterFieldChange = me.onColumnFilterFieldChange.bind(me);\n\n        super.construct(grid, Array.isArray(config) ? {\n            filter : config\n        } : config);\n\n        me.bindStore(grid.store);\n\n        if (me.filter) {\n            grid.store.filter(me.filter);\n        }\n\n        me.gridDetacher = grid.ion({ beforeElementClick : 'onBeforeElementClick', thisObj : me });\n    }\n\n    bindStore(store) {\n        this.detachListeners('store');\n\n        store.ion({\n            name         : 'store',\n            beforeFilter : 'onStoreBeforeFilter',\n            filter       : 'onStoreFilter',\n            thisObj      : this\n        });\n    }\n\n    doDestroy() {\n        this.destroyFilterBar();\n        this.gridDetacher?.();\n\n        super.doDestroy();\n    }\n\n    doDisable(disable) {\n        const { columns } = this.grid;\n\n        // Disable the fields\n        columns?.forEach(column => {\n            const widget = this.getColumnFilterField(column);\n            if (widget) {\n                widget.disabled = disable;\n            }\n        });\n\n        super.doDisable(disable);\n    }\n\n    updateCompactMode(value) {\n        this.client.headerContainer.classList[value ? 'add' : 'remove']('b-filter-bar-compact');\n\n        for (const prop in this._columnFilters) {\n            const field       = this._columnFilters[prop];\n            field.placeholder = value ? field.column.headerText : null;\n        }\n    }\n\n    //endregion\n\n    //region FilterBar\n\n    destroyFilterBar() {\n        this.grid.columns?.forEach(this.destroyColumnFilterField, this);\n    }\n\n    /**\n     * Hides the filtering fields.\n     */\n    hideFilterBar() {\n        const me = this;\n\n        // We don't want to hear back store \"filter\" event while we're resetting store filters\n        me.clearStoreFiltersOnHide && me.suspendStoreTracking();\n\n        // Hide the fields, each silently - no updating of the store's filtered state until the end\n        me.grid.columns?.forEach(col => me.hideColumnFilterField(col, true));\n\n        // Now update the filtered state\n        me.grid.store.filter();\n\n        me.clearStoreFiltersOnHide && me.resumeStoreTracking();\n\n        me.hidden = true;\n    }\n\n    /**\n     * Shows the filtering fields.\n     */\n    showFilterBar() {\n        this.suspendStoreTracking();\n        this.renderFilterBar();\n        this.resumeStoreTracking();\n\n        this.hidden = false;\n    }\n\n    /**\n     * Toggles the filtering fields visibility.\n     */\n    toggleFilterBar() {\n        if (this.hidden) {\n            this.showFilterBar();\n        }\n        else {\n            this.hideFilterBar();\n        }\n    }\n\n    /**\n     * Renders the filtering fields for filterable columns.\n     * @private\n     */\n    renderFilterBar() {\n        if (this.grid.hideHeaders) {\n            return;\n        }\n\n        this.grid.columns.visibleColumns.forEach(column => this.renderColumnFilterField(column));\n        this.rendered = true;\n    }\n\n    //endregion\n\n    //region FilterBar fields\n\n    /**\n     * Renders text field filter in the provided column header.\n     * @param {Grid.column.Column} column Column to render text field filter for.\n     * @private\n     */\n    renderColumnFilterField(column) {\n        const\n            me         = this,\n            { grid  }  = me,\n            filterable = me.getColumnFilterable(column);\n\n        // we render fields for filterable columns only\n        if (filterable && column.isVisible) {\n            const\n                headerEl = column.element,\n                filter   = grid.store.filters.get(column.id) || grid.store.filters.getBy('property', column.field);\n\n            let widget = me.getColumnFilterField(column);\n\n            // if we don't haven't created a field yet\n            // we build it from scratch\n            if (!widget) {\n                const\n                    type            = `${column.filterType || 'text'}field`,\n                    { filterField } = filterable,\n                    externalCls     = filterField?.cls;\n\n                if (externalCls) {\n                    delete filterable.filterField.cls;\n                }\n\n                widget = WidgetHelper.append(ObjectHelper.assign({\n                    type,\n                    cls : {\n                        [me.filterFieldCls] : 1,\n                        [externalCls]       : externalCls\n                    },\n                    // Simplifies debugging / testing\n                    dataset : {\n                        column : column.field\n                    },\n                    column,\n                    owner                : grid,\n                    clearable            : true,\n                    name                 : column.field,\n                    value                : (filter && !filter._filterBy && !filter.internal) ? me.buildFilterValue(filter) : '',\n                    inputCls             : me.filterFieldInputCls,\n                    keyStrokeChangeDelay : me.keyStrokeFilterDelay,\n                    onChange             : me.onColumnFilterFieldChange,\n                    onClear              : me.onColumnFilterFieldChange,\n                    disabled             : me.disabled,\n                    placeholder          : me.compactMode ? column.headerText : null,\n                    // Also copy formats, DateColumn, TimeColumn etc\n                    format               : column.format\n                }, filterField), headerEl)[0];\n\n                if (!filterField?.hasOwnProperty('min')) {\n                    Object.defineProperty(widget, 'min', {\n                        get : () => column.editor?.min,\n                        set : () => null\n                    });\n                }\n\n                if (!filterField?.hasOwnProperty('max')) {\n                    Object.defineProperty(widget, 'max', {\n                        get : () => column.editor?.max,\n                        set : () => null\n                    });\n                }\n\n                if (!filterField?.hasOwnProperty('strictParsing')) {\n                    Object.defineProperty(widget, 'strictParsing', {\n                        get : () => column.editor?.strictParsing,\n                        set : () => null\n                    });\n                }\n\n                // Avoid DomSync cleaning up this widget as it syncs column headers\n                widget.element.retainElement = true;\n\n                me.setColumnFilterField(column, widget);\n\n                const hasFilterFieldStoreData = filterField?.store && (filterField.store.readUrl || filterField.store.data || filterField.store.isChained);\n\n                // If no store is provided for filterable or store is empty, load values lazily from the grid store upon showing the picker list\n                if (widget.isCombo && !hasFilterFieldStoreData && widget.store.count === 0) {\n                    const\n                        configuredValue = widget.value,\n                        refreshData     = () => {\n                            // Might have replaced the widgets store at runtime, make sure we should still force refresh\n                            if (!(widget.store.readUrl || widget.store.isChained)) {\n                                widget.store.data = grid.store.getDistinctValues(column.field, true).map(value => grid.store.modelClass.new({\n                                    id             : value,\n                                    [column.field] : value\n                                }));\n                            }\n                        };\n\n                    widget.value = null;\n\n                    if (!widget.store.isSorted) {\n                        widget.store.sort({\n                            field     : column.field,\n                            ascending : true\n                        });\n                    }\n\n                    widget.picker.ion({ beforeShow : refreshData });\n\n                    refreshData();\n                    widget.value = configuredValue;\n                }\n\n                // If no initial filter exists but a value was provided to the widget, filter by it\n                // unless the store is configured to not autoLoad\n                if (!me.filter && widget.value && grid.store.autoLoad !== false) {\n                    me.onColumnFilterFieldChange({ source : widget, value : widget.value });\n                }\n            }\n            // if we have one...\n            else {\n                // re-apply widget filter\n                me.onColumnFilterFieldChange({ source : widget, value : widget.value });\n                // re-append the widget to its parent node (in case the column header was redrawn (happens when resizing columns))\n                widget.render(headerEl);\n                // show widget in case it was hidden\n                widget.show();\n            }\n\n            headerEl.classList.add(me.filterableColumnCls);\n        }\n    }\n\n    /**\n     * Fills in column filter fields with values from the grid store filters.\n     * @private\n     */\n    updateColumnFilterFields() {\n        const\n            me                 = this,\n            { columns, store } = me.grid;\n\n        let field, filter;\n\n        // During this phase we should not respond to field change events.\n        // See onColumnFilterFieldChange.\n        me._updatingFields = true;\n\n        for (const column of columns.visibleColumns) {\n            field = me.getColumnFilterField(column);\n            if (field) {\n                filter = store.filters.get(column.id) || store.filters.getBy('property', column.field);\n                if (filter && !filter.internal) {\n                    // For filtering functions we keep what user typed into the field, we cannot construct a filter\n                    // string from them\n                    if (!filter._filterBy) {\n                        field.value = me.buildFilterValue(filter);\n                    }\n                    else {\n                        field.value = filter.value;\n                    }\n                }\n                // No filter, clear field\n                else {\n                    field.value = '';\n                }\n            }\n        }\n\n        me._updatingFields = false;\n    }\n\n    getColumnFilterable(column) {\n        if (!column.isRoot && column.filterable !== false && column.field && column.isLeaf) {\n            if (typeof column.filterable === 'function') {\n                column.filterable = {\n                    filterFn : column.filterable\n                };\n            }\n            return column.filterable;\n        }\n    }\n\n    destroyColumnFilterField(column) {\n        const widget = this.getColumnFilterField(column);\n\n        if (widget) {\n            this.hideColumnFilterField(column, true);\n            // destroy filter UI field\n            widget.destroy();\n            // remember there is no field bound anymore\n            this.setColumnFilterField(column, undefined);\n        }\n    }\n\n    hideColumnFilterField(column, silent) {\n        const\n            me        = this,\n            { store } = me.grid,\n            columnEl  = column.element,\n            widget    = me.getColumnFilterField(column);\n\n        if (widget) {\n            if (!me.isDestroying) {\n                // hide field\n                widget.hide();\n            }\n            const { $filter } = column;\n\n            if (!store.isDestroyed && me.clearStoreFiltersOnHide && $filter) {\n                store.removeFilter($filter, silent);\n            }\n\n            columnEl?.classList.remove(me.filterableColumnCls);\n        }\n    }\n\n    /**\n     * Returns column filter field instance.\n     * @param {Grid.column.Column} column Column to get filter field for.\n     * @returns {Core.widget.Widget}\n     */\n    getColumnFilterField(column) {\n        return this._columnFilters?.[column.id];\n    }\n\n    setColumnFilterField(column, widget) {\n        this._columnFilters = this._columnFilters || {};\n\n        this._columnFilters[column.data.id] = widget;\n    }\n\n    //endregion\n\n    //region Filters\n\n    parseFilterValue(column, value, field) {\n        if (Array.isArray(value)) {\n            return {\n                value\n            };\n        }\n        if (ObjectHelper.isDate(value)) {\n            return {\n                operator : field.isDateField ? 'sameDay' : (field.isTimeField ? 'sameTime' : '='),\n                value\n            };\n        }\n\n        const match = String(value).match(this.filterParseRegExp);\n\n        return {\n            operator : match[1] || column.filterable?.operator || '*',\n            value    : match[2]\n        };\n    }\n\n    buildFilterValue({ operator, value }) {\n        return (value instanceof Date || Array.isArray(value)) ? value : (operator in complexOperators ? '' : operator) + value;\n    }\n\n    //endregion\n\n    // region Events\n\n    // Intercept filtering by a column that has a custom filtering fn, and inject that fn\n    onStoreBeforeFilter({ filters }) {\n        const { columns } = this.client;\n\n        for (let i = 0; i < filters.count; i++) {\n            const\n                filter = filters.getAt(i),\n                column = (filter.columnOwned || this.prioritizeColumns) && columns.find(col => col.filterable !== false && col.field === filter.property);\n\n            if (column?.filterable?.filterFn) {\n                // If the filter was sourced from the store, replace it with a filter which\n                // uses the column's filterFn\n                if (!column.$filter) {\n                    column.$filter = new CollectionFilter({\n                        columnOwned : true,\n                        property    : filter.property,\n                        id          : column.id,\n                        filterBy(record) {\n                            return column.filterable.filterFn({\n                                value : this.value, record, property : this.property, column\n                            });\n                        }\n                    });\n                }\n\n                // Update value used by filters filtering fn\n                column.$filter.value = filter.value;\n                filters.splice(i, 1, column.$filter);\n            }\n        }\n    }\n\n    /**\n     * Fires when store gets filtered. Refreshes field values in column headers.\n     * @private\n     */\n    onStoreFilter() {\n        if (!this.storeTrackingSuspended && this.rendered) {\n            this.updateColumnFilterFields();\n        }\n    }\n\n    afterColumnsChange({ changes, column }) {\n        // Ignore if columns change while this filter bar is hidden, or if column changeset does not include hidden\n        // state\n        if (!this.hidden && changes?.hidden) {\n            const hidden = changes.hidden.value;\n\n            if (hidden) {\n                this.destroyColumnFilterField(column);\n            }\n            else {\n                this.renderColumnFilterField(column);\n            }\n        }\n    }\n\n    suspendStoreTracking() {\n        this.storeTrackingSuspended++;\n    }\n\n    resumeStoreTracking() {\n        this.storeTrackingSuspended--;\n    }\n\n    /**\n     * Called after headers are rendered, make headers match stores initial sorters\n     * @private\n     */\n    renderHeader() {\n        if (!this.hidden) {\n            this.renderFilterBar();\n        }\n    }\n\n    renderContents() {\n        // Grid suspends events when restoring state, thus we are not informed about toggled columns and might end up\n        // with wrong fields in headers. To prevent that, we remove all field elements here since they are restored in\n        // renderColumnFilterField() later anyway\n        if (this._columnFilters) {\n            for (const field of Object.values(this._columnFilters)) {\n                field?.element.remove();\n            }\n        }\n    }\n\n    disableGridNavigation(event) {\n        /* If we have navigated (ArrowUp, ArrowLeft, ArrowDown, ArrowRight, Enter) in a filter field, \"catch\" the key\n         * call.\n         */\n        if (event.target.matches(this.filterFieldInputSelector)) {\n            return true;\n        }\n        return false;\n    }\n\n    onBeforeElementClick({ event }) {\n        // prevent other features reacting when clicking a filter field (or any element inside it)\n        if (event.target.closest(`.${this.filterFieldCls}`)) {\n            return false;\n        }\n    }\n\n    /**\n     * Called when a column text filter field value is changed by user.\n     * @param  {Core.widget.TextField} field Filter text field.\n     * @param  {String} value New filtering value.\n     * @private\n     */\n    onColumnFilterFieldChange({ source: field, value }) {\n        const\n            me           = this,\n            { column }   = field,\n            { filterFn } = column.filterable,\n            { store }    = me.grid,\n            filter       = column.$filter || store.filters.find(f => (f.id === column.id || f.property === column.field) && !f.internal);\n\n        // Don't respond if we set the value in response to a filter\n        if (me._updatingFields) {\n            return;\n        }\n\n        const isClearingFilter = value == null || value === '' || Array.isArray(value) && value.length === 0;\n\n        // Remove previous iteration of the column's filter\n        store.removeFilter(filter, true);\n        column.$filter = null;\n\n        if (isClearingFilter) {\n            // This is a no-op if there was no matching filter anyway\n            if (!filter) {\n                return;\n            }\n        }\n        else {\n            // Must add the filter silently, so that the column gets a reference to its $filter\n            // before events are broadcast\n            column.$filter = store.addFilter({\n                property                                                                              : field.name,\n                ...me.parseFilterValue(column, value, field),\n                [typeof column.filterable?.caseSensitive === 'boolean' ? 'caseSensitive' : undefined] : column.filterable?.caseSensitive,\n\n                // Only inject a filterBy configuration if the column has a custom filterBy\n                [filterFn ? 'filterBy' : '_'] : function(record) {\n                    return filterFn({ value : this.value, record, operator : this.operator, property : this.property, column });\n                }\n            }, true);\n        }\n\n        // Apply the new set of store filters.\n        store.filter();\n    }\n\n    //endregion\n\n    //region Menu items\n\n    /**\n     * Adds a menu item to toggle filter bar visibility.\n     * @param {Object} options Contains menu items and extra data retrieved from the menu target.\n     * @param {Grid.column.Column} options.column Column for which the menu will be shown\n     * @param {Object<String,MenuItemConfig|Boolean|null>} options.items A named object to describe menu items\n     * @internal\n     */\n    populateHeaderMenu({ items }) {\n        items.toggleFilterBar = {\n            text        : this.hidden ? 'L{enableFilterBar}' : 'L{disableFilterBar}',\n            localeClass : this,\n            weight      : 120,\n            icon        : 'b-fw-icon b-icon-filter',\n            cls         : 'b-separator',\n            onItem      : () => this.toggleFilterBar()\n        };\n    }\n\n    //endregion\n}\n\nFilterBar.featureClass = 'b-filter-bar';\n\nGridFeatureManager.registerFeature(FilterBar);\n","//TODO: Expand function?\n//TODO: Collapse function?\n//TODO: Sorting breaks grouping if some groups are collapsed\n//TODO: Grouping via context menu doesn't work\n\nimport DomDataStore from '../../Core/data/DomDataStore.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from './GridFeatureManager.js';\nimport DomSync from '../../Core/helper/DomSync.js';\nimport ArrayHelper from '../../Core/helper/ArrayHelper.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\n\n/**\n * @module Grid/feature/Group\n */\n\n/**\n * Enables rendering and handling of row groups. The actual grouping is done in the store, but triggered by [shift] +\n * clicking headers or by using two finger tap (one on header, one anywhere on grid). Groups can be expanded/collapsed\n * by clicking on the group row or pressing [space] when group row is selected.\n * The actual grouping is done by the store, see {@link Core.data.mixin.StoreGroup#function-group}.\n *\n * Grouping by a field performs sorting by the field automatically. It's not possible to prevent sorting.\n * If you group, the records have to be sorted so that records in a group stick together. You can either control sorting\n * direction, or provide a custom sorting function called {@link #config-groupSortFn} to your feature config object.\n *\n * For info on programmatically handling grouping, see {@link Core.data.mixin.StoreGroup StoreGroup}.\n *\n * Currently grouping is not supported when using pagination, the underlying store cannot group data that is split into pages.\n *\n * **Note:** Custom height for group header rows cannot be set with CSS, should instead be defined in a renderer function using the `size` param. See the {@link #config-renderer} config for details.\n *\n * This feature is **enabled** by default.\n *\n * ## Keyboard shortcuts\n * This feature has the following default keyboard shortcuts:\n *\n * | Keys   | Action      | Action description                                                         |\n * |--------|-------------|----------------------------------------------------------------------------|\n * | Space  | toggleGroup | When a group header is focused, this expands or collapses the grouped rows |\n *\n * For more information on how to customize keyboard shortcuts, please see\n * [our guide](#Grid/guides/customization/keymap.md)\n *\n * @example\n * // grouping feature is enabled, no default value though\n * let grid = new Grid({\n *     features : {\n *         group : true\n *     }\n * });\n *\n * // use initial grouping\n * let grid = new Grid({\n *     features : {\n *         group : 'city'\n *     }\n * });\n *\n * // default grouper and custom renderer, which will be applied to each cell except the \"group\" cell\n * let grid = new Grid({\n *     features : {\n *       group : {\n *           field : 'city',\n *           ascending : false,\n *           renderer : ({ isFirstColumn, count, groupRowFor, record }) => isFirstColumn ? `${groupRowFor} (${count})` : ''\n *       }\n *     }\n * });\n *\n * // group using custom sort function\n * let grid = new Grid({\n *     features : {\n *         group       : {\n *             field       : 'city',\n *             groupSortFn : (a, b) => a.city.length < b.city.length ? -1 : 1\n *         }\n *     }\n * });\n *\n * // can also be specified on the store\n * let grid = new Grid({\n *     store : {\n *         groupers : [\n *             { field : 'city', ascending : false }\n *         ]\n *     }\n * });\n *\n * // custom sorting function can also be specified on the store\n * let grid = new Grid({\n *     store : {\n *         groupers : [{\n *             field : 'city',\n *             fn : (recordA, recordB) => {\n *                 // apply custom logic, for example:\n *                 return recordA.city.length < recordB.city.length ? -1 : 1;\n *             }\n *         }]\n *     }\n * });\n *\n * @extends Core/mixin/InstancePlugin\n *\n * @demo Grid/grouping\n * @classtype group\n * @feature\n *\n * @inlineexample Grid/feature/Group.js\n */\nexport default class Group extends InstancePlugin {\n\n    static get $name() {\n        return 'Group';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * The name of the record field to group by.\n             * @config {String}\n             * @default\n             */\n            field : null,\n\n            /**\n             * A function used to sort the groups.\n             * When grouping, the records have to be sorted so that records in a group stick together.\n             * Technically that means that records having the same {@link #config-field} value\n             * should go next to each other.\n             * And this function (if provided) is responsible for applying such grouping order.\n             * ```javascript\n             * const grid = new Grid({\n             *     features : {\n             *         group : {\n             *             // group by category\n             *             field       : 'category',\n             *             groupSortFn : (a, b) => {\n             *                 const\n             *                     aCategory = a.category || '',\n             *                     bCategory = b.category || '';\n             *\n             *                 // 1st sort by \"calegory\" field\n             *                 return aCategory > bCategory ? -1 :\n             *                     aCategory < bCategory ? 1 :\n             *                     // inside calegory groups we sort by \"name\" field\n             *                     (a.name > b.name ? -1 : 1);\n             *             }\n             *         }\n             *     }\n             * });\n             * ```\n             * @config {Function}\n             */\n            groupSortFn : null,\n\n            /**\n             * A function which produces the HTML for a group header.\n             * The function is called in the context of this Group feature object.\n             * Default group renderer displays the `groupRowFor` and `count`.\n             *\n             * @config {Function}\n             * @property {String} groupRowFor The value of the `field` for the group.\n             * @property {Core.data.Model} record The group record representing the group.\n             * @property {Object} record.meta Meta data with additional info about the grouping.\n             * @property {Array} record.groupChildren The group child records.\n             * @property {Number} count Number of records in the group.\n             * @property {Grid.column.Column} column The column the renderer runs for.\n             * @property {Boolean} isFirstColumn True, if `column` is the first column.\n             * If `RowNumberColumn` is the real first column, it's not taken into account.\n             * @property {Grid.column.Column} [groupColumn] The column under which the `field` is shown.\n             * @property {Object} size Sizing information for the group header row, only `height` is relevant.\n             * @property {Number} size.height The height of the row, set this if you want a custom height for the group header row\n             * That is UI part, so do not rely on its existence.\n             * @default\n             */\n            renderer : null,\n\n            /**\n             * See {@link #keyboard-shortcuts Keyboard shortcuts} for details\n             * @config {Object<String,String>}\n             */\n            keyMap : {\n                ' ' : 'toggleGroup'\n            }\n        };\n    }\n\n    //region Init\n\n    construct(grid, config) {\n        const me = this;\n\n        if (grid.features.tree) {\n            return;\n        }\n\n        // groupSummary feature needs to be initialized first, if it is used\n        me._thisIsAUsedExpression(grid.features.groupSummary);\n\n        // process initial config into an actual config object\n        config = me.processConfig(config);\n\n        me.grid = grid;\n\n        super.construct(grid, config);\n\n        me.bindStore(grid.store);\n\n        grid.rowManager.ion({\n            beforeRenderRow : 'onBeforeRenderRow',\n            renderCell      : 'renderCell',\n\n            // The feature gets to see cells being rendered before the GroupSummary feature\n            // because this injects header content into group header rows and adds rendering\n            // info to the cells renderData which GroupSummary must comply with.\n            prio    : 1100,\n            thisObj : me\n        });\n    }\n\n    // Group feature handles special config cases, where user can supply a string or a group config object\n    // instead of a normal config object\n    processConfig(config) {\n        if (typeof config === 'string') {\n            return {\n                field     : config,\n                ascending : null\n            };\n        }\n\n        return config;\n    }\n\n    // override setConfig to process config before applying it (used mainly from ReactGrid)\n    setConfig(config) {\n        if (config === null) {\n            this.store.clearGroupers();\n        }\n        else {\n            super.setConfig(this.processConfig(config));\n        }\n    }\n\n    bindStore(store) {\n        this.detachListeners('store');\n\n        store.ion({\n            name    : 'store',\n            group   : 'onStoreGroup',\n            change  : 'onStoreChange',\n            thisObj : this\n        });\n    }\n\n    updateRenderer(renderer) {\n        this.groupRenderer = renderer;\n    }\n\n    updateField(field) {\n        this.store.group({\n            field,\n            ascending : this.ascending,\n            fn        : this.groupSortFn\n        });\n    }\n\n    updateGroupSortFn(fn) {\n        if (!this.isConfiguring) {\n            this.store.group({\n                field     : this.field,\n                ascending : this.ascending,\n                fn\n            });\n        }\n    }\n\n    doDestroy() {\n        super.doDestroy();\n    }\n\n    doDisable(disable) {\n        const { store } = this;\n\n        // Grouping mostly happens in store, need to clear groupers there to remove headers.\n        // Use configured groupers as first sorters to somewhat maintain the order\n        if (disable && store.isGrouped) {\n            const { sorters } = store;\n            sorters.unshift(...store.groupers);\n            store.clearGroupers();\n            store.sort(sorters);\n        }\n\n        super.doDisable(disable);\n    }\n\n    get store() {\n        return this.grid.store;\n    }\n\n    //endregion\n\n    //region Plugin config\n\n    // Plugin configuration. This plugin chains some of the functions in Grid.\n    static get pluginConfig() {\n        return {\n            assign : ['collapseAll', 'expandAll'],\n            chain  : ['renderHeader', 'populateHeaderMenu', 'getColumnDragToolbarItems', 'onElementTouchStart',\n                'onElementClick', 'bindStore']\n        };\n    }\n\n    //endregion\n\n    //region Expand/collapse\n\n    /**\n     * Collapses or expands a group depending on its current state\n     * @param {Core.data.Model|String} recordOrId Record or records id for a group row to collapse or expand\n     * @param {Boolean} collapse Force collapse (`true`) or expand (`false`)\n     * @fires togglegroup\n     */\n    toggleCollapse(recordOrId, collapse) {\n        this.internalToggleCollapse(recordOrId, collapse);\n    }\n\n    /**\n     * Collapses or expands a group depending on its current state\n     * @param {Core.data.Model|String} recordOrId Record or records id for a group row to collapse or expand\n     * @param {Boolean} collapse Force collapse (true) or expand (true)\n     * @param {Boolean} skipRender True to not render rows\n     * @internal\n     * @fires togglegroup\n     */\n    internalToggleCollapse(recordOrId, collapse, skipRender = false) {\n        //<debug>\n        if (recordOrId == null) {\n            throw new Error('Group#toggleCollapse must be passed a record');\n        }\n        //</debug>\n\n        const\n            me              = this,\n            { store, grid } = me,\n            groupRecord     = store.getById(recordOrId);\n\n        if (!groupRecord.isGroupHeader) {\n            return;\n        }\n\n        collapse = collapse === undefined ? !groupRecord.meta.collapsed : collapse;\n\n        /**\n         * Fired when a group is going to be expanded or collapsed using the UI.\n         * Returning `false` from a listener prevents the operation\n         * @event beforeToggleGroup\n         * @on-owner\n         * @preventable\n         * @param {Core.data.Model} groupRecord Group record\n         * @param {Boolean} collapse Collapsed (true) or expanded (false)\n         */\n        if (grid.trigger('beforeToggleGroup', { groupRecord, collapse }) === false) {\n            return;\n        }\n\n        if (collapse) {\n            store.collapse(groupRecord);\n        }\n        else {\n            store.expand(groupRecord);\n        }\n\n        if (!skipRender) {\n            // If collapsing the group reduces amount of records below amount of rendered rows, we need to refresh\n            // entire view\n            // https://github.com/bryntum/support/issues/5893\n            if (grid.rowManager.rowCount > grid.store.count) {\n                grid.rowManager.renderFromRow();\n            }\n            else {\n                // render from group record and down, no need to touch those above\n                grid.rowManager.renderFromRecord(groupRecord);\n            }\n        }\n\n        /**\n         * Group expanded or collapsed\n         * @event toggleGroup\n         * @on-owner\n         * @param {Core.data.Model} groupRecord Group record\n         * @param {Boolean} collapse Collapsed (true) or expanded (false)\n         */\n        grid.trigger('toggleGroup', { groupRecord, collapse });\n        grid.afterToggleGroup();\n    }\n\n    /**\n     * Collapse all groups. This function is exposed on Grid and can thus be called as `grid.collapseAll()`\n     * @on-owner\n     */\n    collapseAll() {\n        const me = this;\n        if (me.store.isGrouped && !me.disabled) {\n            me.store.groupRecords.forEach(r => me.internalToggleCollapse(r, true, true));\n            me.grid.refreshRows(true);\n        }\n    }\n\n    /**\n     * Expand all groups. This function is exposed on Grid and can thus be called as `grid.expandAll()`\n     * @on-owner\n     */\n    expandAll() {\n        const me = this;\n        if (me.store.isGrouped && !me.disabled) {\n            me.store.groupRecords.forEach(r => me.internalToggleCollapse(r, false, true));\n            me.grid.refreshRows();\n        }\n    }\n\n    //endregion\n\n    //region Rendering\n\n    /**\n     * Called before rendering row contents, used to reset rows no longer used as group rows\n     * @private\n     */\n    onBeforeRenderRow({ row }) {\n        // row.id contains previous record id on before render\n        const oldRecord    = row.grid.store.getById(row.id);\n        // force update of inner html if this row used for group data\n        row.forceInnerHTML = row.forceInnerHTML || oldRecord?.isGroupHeader;\n    }\n\n    /**\n     * Called when a cell is rendered, styles the group rows first cell.\n     * @private\n     */\n    renderCell(renderData) {\n        const\n            me         = this,\n            {\n                cellElement,\n                row,\n                column\n            }          = renderData,\n            { meta }   = renderData.record,\n            rowClasses = {\n                'b-group-row'            : 0,\n                'b-grid-group-collapsed' : 0\n            };\n\n        if (!me.disabled && me.store.isGrouped && 'groupRowFor' in meta) {\n            // do nothing with action column to make possible using actions for groups\n            if (column.type === 'action') {\n                return;\n            }\n            // let column clear the cell, in case it needs to do some cleanup\n            column.clearCell(cellElement);\n\n            // this is a group row, add css classes\n            rowClasses['b-grid-group-collapsed'] = meta.collapsed;\n            rowClasses['b-group-row']            = 1;\n\n            if (column === me.groupHeaderColumn) {\n                cellElement.classList.add('b-group-title');\n                cellElement.$groupHeader = true;\n            }\n\n            me.buildGroupHeader(renderData);\n        }\n        else if (cellElement.$groupHeader) {\n            cellElement.classList.remove('b-group-title');\n            cellElement.$groupHeader = false;\n        }\n\n        // Still need to sync row classes is disabled or not grouped.\n        // Previous b-group-row and b-grid-group-collapsed classes must be removed.\n        row.assignCls(rowClasses);\n    }\n\n    // renderData.cellElement is required\n    buildGroupHeader(renderData) {\n        const\n            me               = this,\n            {\n                record,\n                cellElement,\n                column,\n                persist\n            }                = renderData,\n            { grid }         = me,\n            meta             = record.meta,\n            { groupRowFor }  = meta,\n            { groupSummary } = grid.features,\n            // Need to adjust count if group summary is used\n            // TODO remove this when grouping has been refactored to not store group headers/footers in the Store\n            count            = meta.childCount - (groupSummary && groupSummary.target !== 'header' ? 1 : 0);\n\n        let html         = null,\n            applyDefault = true;\n\n        if (persist || column) {\n            const\n                groupColumn         = grid.columns.get(meta.groupField),\n                isGroupHeaderColumn = renderData.isFirstColumn = column === me.groupHeaderColumn;\n            // First try using columns groupRenderer (might not even have a column if grouping programmatically)\n            if (groupColumn?.groupRenderer) {\n                if (isGroupHeaderColumn) {\n                    // groupRenderer could return nothing and just apply changes directly to DOM element\n                    html = groupColumn.groupRenderer({\n                        ...renderData,\n                        groupRowFor,\n                        groupRecords : record.groupChildren,\n                        groupColumn,\n                        count\n                    });\n\n                    applyDefault = false;\n                }\n            }\n            // Secondly use features groupRenderer, if configured with one\n            else if (me.groupRenderer) {\n                // groupRenderer could return nothing and just apply changes directly to DOM element\n                html = me.groupRenderer({\n                    ...renderData,\n                    groupRowFor,\n                    groupRecords  : record.groupChildren,\n                    groupColumn,\n                    count,\n                    isFirstColumn : isGroupHeaderColumn\n                });\n            }\n\n            // Third, just display unformatted value and child count (also applied for features groupRenderer that do\n            // not output any html of their own)\n            if (isGroupHeaderColumn && html == null && applyDefault && DomHelper.getChildElementCount(cellElement) === 0) {\n                html = StringHelper.encodeHtml(`${groupRowFor === '__novalue__' ? '' : groupRowFor} (${count})`);\n            }\n        }\n        else if (me.groupRenderer) {\n            // groupRenderer could return nothing and just apply changes directly to DOM element\n            html = me.groupRenderer(renderData);\n        }\n\n        // Renderers could return nothing and just apply changes directly to DOM element\n        if (typeof html === 'string') {\n            cellElement.innerHTML = html;\n        }\n        else if (typeof html === 'object') {\n            DomSync.sync({\n                targetElement : cellElement,\n                domConfig     : {\n                    onlyChildren : true,\n                    children     : ArrayHelper.asArray(html)\n                }\n            });\n        }\n\n        // If groupRenderer added elements to the cell, we need to remember that to clear it on re-usage as a normal cell\n        if (DomHelper.getChildElementCount(cellElement) > 0) {\n            cellElement._hasHtml = true;\n        }\n\n        return cellElement.innerHTML;\n    }\n\n    get groupHeaderColumn() {\n        return this.grid.columns.visibleColumns.find(column => !column.groupHeaderReserved);\n    }\n\n    /**\n     * Called when an header is rendered, adds grouping icon if grouped by that column.\n     * @private\n     * @param headerContainerElement\n     */\n    renderHeader(headerContainerElement) {\n        const { store, grid } = this;\n\n        if (store.isGrouped) {\n            // Sorted from start, reflect in rendering\n            for (const groupInfo of store.groupers) {\n                // Might be grouping by field without column, which is valid\n                const\n                    column = grid.columns.get(groupInfo.field),\n                    header = column && grid.getHeaderElement(column.id);\n\n                header?.classList.add('b-group', groupInfo.ascending ? 'b-asc' : 'b-desc');\n            }\n        }\n    }\n\n    //endregion\n\n    //region Context menu\n\n    /**\n     * Supply items for headers context menu.\n     * @param {Object} options Contains menu items and extra data retrieved from the menu target.\n     * @param {Grid.column.Column} options.column Column for which the menu will be shown\n     * @param {Object<String,MenuItemConfig|Boolean|null>} options.items A named object to describe menu items\n     * @internal\n     */\n    populateHeaderMenu({ column, items }) {\n        const me = this;\n\n        if (column.groupable !== false) {\n\n            items.groupAsc = {\n                text        : 'L{groupAscending}',\n                localeClass : me,\n                icon        : 'b-fw-icon b-icon-group-asc',\n                cls         : 'b-separator',\n                weight      : 400,\n                disabled    : me.disabled,\n                onItem      : () => me.store.group(column.field, true)\n            };\n\n            items.groupDesc = {\n                text        : 'L{groupDescending}',\n                localeClass : me,\n                icon        : 'b-fw-icon b-icon-group-desc',\n                weight      : 410,\n                disabled    : me.disabled,\n                onItem      : () => me.store.group(column.field, false)\n            };\n        }\n\n        if (me.store.isGrouped) {\n            items.groupRemove = {\n                text        : 'L{stopGrouping}',\n                localeClass : me,\n                icon        : 'b-fw-icon b-icon-clear',\n                cls         : column.groupable ? '' : 'b-separator',\n                weight      : 420,\n                disabled    : me.disabled,\n                onItem      : () => me.store.clearGroupers()\n            };\n        }\n    }\n\n    /**\n     * Supply items to ColumnDragToolbar\n     * @private\n     */\n    getColumnDragToolbarItems(column, items) {\n        const\n            me                  = this,\n            { store, disabled } = me;\n\n        items.push({\n            text        : 'L{groupAscendingShort}',\n            group       : 'L{group}',\n            localeClass : me,\n            icon        : 'b-icon b-icon-group-asc',\n            ref         : 'groupAsc',\n            cls         : 'b-separator',\n            weight      : 110,\n            disabled,\n            onDrop      : ({ column }) => store.group(column.field, true)\n        });\n\n        items.push({\n            text        : 'L{groupDescendingShort}',\n            group       : 'L{group}',\n            localeClass : me,\n            icon        : 'b-icon b-icon-group-desc',\n            ref         : 'groupDesc',\n            weight      : 110,\n            disabled,\n            onDrop      : ({ column }) => store.group(column.field, false)\n        });\n\n        const grouped = store.groupers?.some(col => col.field === column.field) && !disabled;\n        items.push({\n            text        : 'L{stopGroupingShort}',\n            group       : 'L{group}',\n            localeClass : me,\n            icon        : 'b-icon b-icon-clear',\n            ref         : 'groupRemove',\n            disabled    : !grouped,\n            weight      : 110,\n            onDrop      : ({ column }) => store.removeGrouper(column.field)\n        });\n\n        return items;\n    }\n\n    //endregion\n\n    //region Events - Store\n\n    /**\n     * Called when store grouping changes. Reflects on header and rerenders rows.\n     * @private\n     */\n    onStoreGroup({ groupers }) {\n        const\n            { grid }        = this,\n            { element }     = grid,\n            curGroupHeaders = element && DomHelper.children(element, '.b-grid-header.b-group');\n\n        if (element) {\n            for (const header of curGroupHeaders) {\n                header.classList.remove('b-group', 'b-asc', 'b-desc');\n            }\n\n            if (groupers) {\n                for (const groupInfo of groupers) {\n                    const header = grid.getHeaderElementByField(groupInfo.field);\n                    if (header) {\n                        header.classList.add('b-group', groupInfo.ascending ? 'b-asc' : 'b-desc');\n                    }\n                }\n            }\n        }\n    }\n\n    onStoreChange({ action, records }) {\n        const\n            { client }            = this,\n            { rowManager, store } = client;\n\n        if (store.isGrouped && action === 'move') {\n            const\n                { field } = store.groupers[0],\n                fromRow   = Math.min(...records.reduce((result, record) => {\n                    // Get index of the new group\n                    result.push(store.indexOf(record.instanceMeta(store).groupParent));\n\n                    // Get index of the old group\n                    if (field in record.meta.modified) {\n                        const oldGroup = store.groupRecords.find(r => r.meta.groupRowFor === record.meta.modified[field]);\n\n                        if (oldGroup) {\n                            result.push(store.indexOf(oldGroup));\n                        }\n                    }\n\n                    return result;\n                }, []));\n\n            rowManager.renderFromRow(rowManager.getRow(fromRow));\n        }\n    }\n\n    //endregion\n\n    //region Events - Grid\n\n    /**\n     * Store touches when user touches header, used in onElementTouchEnd.\n     * @private\n     */\n    onElementTouchStart(event) {\n        const\n            me         = this,\n            { target } = event,\n            header     = target.closest('.b-grid-header'),\n            column     = header && me.grid.getColumnFromElement(header);\n\n        // If it's a multi touch, group.\n        if (event.touches.length > 1 && column && column.groupable !== false && !me.disabled) {\n            me.store.group(column.field);\n        }\n    }\n\n    /**\n     * React to click on headers (to group by that column if [alt] is pressed) and on group rows (expand/collapse).\n     * @private\n     * @param event\n     * @returns {Boolean}\n     */\n    onElementClick(event) {\n        const\n            me         = this,\n            { store }  = me,\n            { target } = event,\n            row        = target.closest('.b-group-row'),\n            header     = target.closest('.b-grid-header'),\n            field      = header?.dataset.column;\n\n        // prevent expand/collapse if disabled or clicked on item with own handler\n        if (\n            target.classList.contains('b-resizer') ||\n            me.disabled ||\n            target.classList.contains('b-action-item') ||\n            event.handled\n        ) {\n            return;\n        }\n\n        // Header\n        if (header && field) {\n            const columnGrouper = store.groupers?.find(g => g.field === field);\n\n            // Store has a grouper for this column's field; flip grouper order\n            if (columnGrouper && !event.shiftKey) {\n                store.group(field, !columnGrouper.ascending);\n                return false;\n            }\n            // Group or ungroup\n            else if (event.shiftKey) {\n                const column = me.grid.columns.get(field);\n\n                if (column.groupable !== false) {\n                    if (event.altKey) {\n                        store.removeGrouper(field);\n                    }\n                    else {\n                        store.group(field);\n                    }\n                }\n            }\n        }\n\n        // Anywhere on group-row\n        if (row) {\n            me.internalToggleCollapse(DomDataStore.get(row).id);\n            return false;\n        }\n    }\n\n    /**\n     * Toggle groups with [space].\n     * @private\n     * @param event\n     */\n    toggleGroup(event) {\n        const\n            { grid }        = this,\n            { focusedCell } = grid;\n\n        // only catch space when focus is on a group header cell\n        if (!this.disabled && !focusedCell.isActionable && focusedCell.record?.isGroupHeader) {\n            this.internalToggleCollapse(focusedCell.id);\n\n            // Other features (like context menu) must not process this.\n            return true;\n        }\n        return false;\n    }\n\n    //endregion\n}\n\nGridFeatureManager.registerFeature(Group, true, ['Grid', 'Scheduler']);\nGridFeatureManager.registerFeature(Group, false, ['TreeGrid']);\n","import ContextMenuBase from '../../Core/feature/base/ContextMenuBase.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\n\n/**\n * @module Grid/feature/HeaderMenu\n */\n\n/**\n * Right click column header or focus it and press SPACE key to show the context menu for headers.\n *\n * ### Default header menu items\n *\n * The Header menu has no default items provided by the `HeaderMenu` feature, but there are other features\n * that populate the header menu with the following items:\n *\n * | Reference         | Text                              | Weight | Feature                                        | Description                                       |\n * |-------------------|-----------------------------------|--------|------------------------------------------------|---------------------------------------------------|\n * | `filter`          | Filter                            | 100    | {@link Grid.feature.Filter Filter}             | Shows the filter popup to add a filter            |\n * | `editFilter`      | Edit filter                       | 100    | {@link Grid.feature.Filter Filter}             | Shows the filter popup to change/remove a filter  |\n * | `removeFilter`    | Remove filter                     | 110    | {@link Grid.feature.Filter Filter}             | Stops filtering by selected column field          |\n * | `toggleFilterBar` | Hide filter bar / Show filter bar | 120    | {@link Grid.feature.FilterBar FilterBar}       | Toggles filter bar visibility                     |\n * | `columnPicker`    | Columns                           | 200    | {@link Grid.feature.ColumnPicker ColumnPicker} | Shows a submenu to control columns visibility     |\n * | \\>column.id*      | column.text*                      |        | {@link Grid.feature.ColumnPicker ColumnPicker} | Check item to hide/show corresponding column      |\n * | `hideColumn`      | Hide column                       | 210    | {@link Grid.feature.ColumnPicker ColumnPicker} | Hides selected column                             |\n * | `rename`          | Rename column text                | 215    | {@link Grid.feature.ColumnRename ColumnRename} | Edits the header text of the column               |\n * | `toggleCollapse`  | Collapse column / Expand column   | 215    | This feature                                   | Expands or collapses a collapsible column         |\n * | `movePrev  `      | Move previous                     | 220    | This feature                                   | Moves selected column before its previous sibling |\n * | `moveNext`        | Move next                         | 230    | This feature                                   | Moves selected column after its next sibling      |\n * | `sortAsc`         | Sort ascending                    | 300    | {@link Grid.feature.Sort Sort}                 | Sort by the column field in ascending order       |\n * | `sortDesc`        | Sort descending                   | 310    | {@link Grid.feature.Sort Sort}                 | Sort by the column field in descending order      |\n * | `multiSort`       | Multi sort                        | 320    | {@link Grid.feature.Sort Sort}                 | Shows a submenu to control multi-sorting          |\n * | \\>`addSortAsc`    | Add ascending sorting             | 330    | {@link Grid.feature.Sort Sort}                 | Adds ascending sorter using the column field      |\n * | \\>`addSortDesc`   | Add descending sorting            | 340    | {@link Grid.feature.Sort Sort}                 | Adds descending sorter using the column field     |\n * | \\>`removeSorter`  | Remove sorter                     | 350    | {@link Grid.feature.Sort Sort}                 | Stops sorting by selected column field            |\n * | `groupAsc`        | Group ascending                   | 400    | {@link Grid.feature.Group Group}               | Group by the column field in ascending order      |\n * | `groupDesc`       | Group descending                  | 410    | {@link Grid.feature.Group Group}               | Group by the column field in descending order     |\n * | `groupRemove`     | Stop grouping                     | 420    | {@link Grid.feature.Group Group}               | Stops grouping                                    |\n * | `mergeCells`      | Merge cells                       | 500    | {@link Grid.feature.MergeCells}                | Merge cells with same value in a sorted column    |\n *\n * \\* - items that are generated dynamically\n *\n * \\> - first level of submenu\n *\n * ### Customizing the menu items\n *\n * The menu items in the Header menu can be customized, existing items can be changed or removed,\n * and new items can be added. This is handled using the `items` config of the feature.\n *\n * Add extra items for all columns:\n *\n * ```javascript\n * const grid = new Grid({\n *   features : {\n *     headerMenu : {\n *       items : {\n *         extraItem : { text: 'My header item', icon: 'fa fa-car', weight: 200, onItem : () => ... }\n *       }\n *     }\n *   }\n * });\n * ```\n *\n * It is also possible to add items using columns config. See examples below.\n *\n * Add extra items for a single column:\n *\n * ```javascript\n * const grid = new Grid({\n *   columns: [\n *     {\n *       field: 'name',\n *       text: 'Name',\n *       headerMenuItems: {\n *         columnItem : { text: 'My unique header item', icon: 'fa fa-flask', onItem : () => ... }\n *       }\n *     }\n *   ]\n * });\n * ```\n *\n * Remove built in item:\n *\n * ```javascript\n * const grid = new Grid({\n *   features : {\n *     headerMenu : {\n *       items : {\n *          // Hide 'Stop grouping'\n *          groupRemove : false\n *       }\n *     }\n *   }\n * });\n * ```\n *\n * Customize built in item:\n *\n * ```javascript\n * const grid = new Grid({\n *   features : {\n *     headerMenu : {\n *       items : {\n *          hideColumn : {\n *              text : 'Bye bye column'\n *          }\n *       }\n *     }\n *   }\n * });\n * ```\n *\n * Remove nested menu item:\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         headerMenu : {\n *             items : {\n *                 multiSort : {\n *                     menu : { removeSorter : false }\n *                 }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * It is also possible to manipulate the default items and add new items in the processing function:\n *\n * ```javascript\n * const grid = new Grid({\n *   features : {\n *     headerMenu : {\n *       processItems({items, record}) {\n *           if (record.cost > 5000) {\n *              items.myItem = { text : 'Split cost' };\n *           }\n *       }\n *     }\n *   }\n * });\n * ```\n *\n * Full information of the menu customization can be found in the \"Customizing the Cell menu and the Header menu\" guide.\n *\n * This feature is <strong>enabled</strong> by default.\n *\n * ## Keyboard shortcuts\n * This feature has the following default keyboard shortcuts:\n *\n * | Keys       | Action               | Action description                              |\n * |------------|----------------------|-------------------------------------------------|\n * | Space      | showContextMenuByKey | Shows context menu for currently focused header |\n * | Ctrl+Space | showContextMenuByKey | Shows context menu for currently focused header |\n *\n * For more information on how to customize keyboard shortcuts, please see\n * [our guide](#Grid/guides/customization/keymap.md)\n *\n * @extends Core/feature/base/ContextMenuBase\n * @demo Grid/contextmenu\n * @classtype headerMenu\n * @feature\n *\n * @inlineexample Grid/feature/HeaderMenu.js\n */\nexport default class HeaderMenu extends ContextMenuBase {\n    //region Config\n\n    static get $name() {\n        return 'HeaderMenu';\n    }\n\n    static get configurable() {\n        return {\n            type : 'header',\n\n            /**\n             * This is a preconfigured set of items used to create the default context menu.\n             *\n             * The `items` provided by this feature are listed in the intro section of this class. You can\n             * configure existing items by passing a configuration object to the keyed items.\n             *\n             * To remove existing items, set corresponding keys to `null`:\n             *\n             * ```javascript\n             * const scheduler = new Scheduler({\n             *     features : {\n             *         headerMenu : {\n             *             items : {\n             *                 filter        : null,\n             *                 columnPicker  : null\n             *             }\n             *         }\n             *     }\n             * });\n             * ```\n             *\n             * See the feature config in the above example for details.\n             *\n             * @config {Object<String,MenuItemConfig|Boolean|null>} items\n             */\n            items : null,\n\n            /**\n             * Configure as `true` to show two extra menu options to move the selected column to either\n             * before its previous sibling, or after its next sibling.\n             *\n             * This is a keyboard-accessible version of drag/drop column reordering.\n             * @config {Boolean}\n             * @category Accessibility\n             */\n            moveColumns : null\n\n            /**\n             * See {@link #keyboard-shortcuts Keyboard shortcuts} for details\n             * @config {Object<String,String>} keyMap\n             */\n\n        };\n    }\n\n    static get defaultConfig() {\n        return {\n            /**\n             * A function called before displaying the menu that allows manipulations of its items.\n             * Returning `false` from this function prevents the menu being shown.\n             *\n             * ```javascript\n             *   features         : {\n             *       headerMenu : {\n             *           processItems({ column, items }) {\n             *               // Add or hide existing items here as needed\n             *               items.myAction = {\n             *                   text   : 'Cool action',\n             *                   icon   : 'b-fa b-fa-fw b-fa-ban',\n             *                   onItem : () => console.log('Some coolness'),\n             *                   weight : 300 // Move to end\n             *               };\n             *\n             *               // Hide column picker\n             *               items.columnPicker.hidden = true;\n             *           }\n             *       }\n             *   },\n             * ```\n             * @param {Object} context An object with information about the menu being shown\n             * @param {Grid.column.Column} context.column The current column\n             * @param {Object<String,MenuItemConfig>} context.items An object containing the\n             * {@link Core.widget.MenuItem menu item} configs keyed by their id\n             * @param {Event} context.event The DOM event object that triggered the show\n             * @config {Function}\n             * @preventable\n             */\n            processItems : null\n        };\n    }\n\n    static get pluginConfig() {\n        const config = super.pluginConfig;\n\n        config.chain.push('populateHeaderMenu');\n\n        return config;\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * This event fires on the owning Grid before the context menu is shown for a header.\n     * Allows manipulation of the items to show in the same way as in the {@link #config-processItems}.\n     *\n     * Returning `false` from a listener prevents the menu from being shown.\n     *\n     * @event headerMenuBeforeShow\n     * @on-owner\n     * @preventable\n     * @param {Grid.view.Grid} source The grid\n     * @param {Core.widget.Menu} menu The menu\n     * @param {Object<String,MenuItemConfig>} items Menu item configs\n     * @param {Grid.column.Column} column Column\n     */\n\n    /**\n     * This event fires on the owning Grid after the context menu is shown for a header\n     * @event headerMenuShow\n     * @on-owner\n     * @param {Grid.view.Grid} source The grid\n     * @param {Core.widget.Menu} menu The menu\n     * @param {Object<String,MenuItemConfig>} items Menu item configs\n     * @param {Grid.column.Column} column Column\n     */\n\n    /**\n     * This event fires on the owning Grid when an item is selected in the header context menu.\n     * @event headerMenuItem\n     * @on-owner\n     * @param {Grid.view.Grid} source The grid\n     * @param {Core.widget.Menu} menu The menu\n     * @param {Core.widget.MenuItem} item Selected menu item\n     * @param {Grid.column.Column} column Column\n     */\n\n    /**\n     * This event fires on the owning Grid when a check item is toggled in the header context menu.\n     * @event headerMenuToggleItem\n     * @on-owner\n     * @param {Grid.view.Grid} source The grid\n     * @param {Core.widget.Menu} menu The menu\n     * @param {Core.widget.MenuItem} item Selected menu item\n     * @param {Grid.column.Column} column Column\n     * @param {Boolean} checked Checked or not\n     */\n\n    //endregion\n\n    //region Menu handlers\n\n    shouldShowMenu(eventParams) {\n        const { column } = eventParams;\n\n        return column && column.enableHeaderContextMenu !== false && column !== this.client.timeAxisColumn;\n    }\n\n    getDataFromEvent(event) {\n        return ObjectHelper.assign(super.getDataFromEvent(event), this.client.getHeaderDataFromEvent(event));\n    }\n\n    populateHeaderMenu({ items, column }) {\n        const me = this;\n\n        if (column) {\n            if (column.headerMenuItems) {\n                ObjectHelper.merge(items, column.headerMenuItems);\n            }\n            if (column.isCollapsible) {\n                const\n                    { collapsed } = column,\n                    icon          = collapsed\n                        ? me.client.rtl ? 'left' : 'right'\n                        : me.client.rtl ? 'right' : 'left';\n\n                items.toggleCollapse = {\n                    weight : 215,\n                    icon   : `b-fw-icon b-icon-collapse-${icon}`,\n                    text   : me.L(collapsed ? 'L{expandColumn}' : 'L{collapseColumn}'),\n                    onItem : () => column.collapsed = !collapsed\n                };\n            }\n\n            if (me.moveColumns) {\n                const\n                    columnToMoveBefore = me.getColumnToMoveBefore(column),\n                    columnToMoveAfter  = me.getColumnToMoveAfter(column);\n\n                if (columnToMoveBefore) {\n                    items.movePrev = {\n                        weight : 220,\n                        icon   : 'b-fw-icon b-icon-column-move-left',\n                        text   : me.L('L{moveBefore}', StringHelper.encodeHtml(columnToMoveBefore.text)),\n                        onItem : () => {\n                            const { parent : oldParent } = column;\n\n                            // If the operation was successful, postprocess. Check for\n                            // parent being empty and set the new region.\n                            if (columnToMoveBefore.parent.insertChild(column, columnToMoveBefore)) {\n                                column.region = columnToMoveBefore.region;\n\n                                // If we have removed the last child, remove the empty group.\n                                // Column#sealed may have vetoed the operation.\n                                if (!oldParent.children?.length) {\n                                    oldParent.remove();\n                                }\n                            }\n                        }\n                    };\n                }\n                if (columnToMoveAfter) {\n                    items.moveNext = {\n                        weight : 230,\n                        icon   : 'b-fw-icon b-icon-column-move-right',\n                        text   : me.L('L{moveAfter}', StringHelper.encodeHtml(columnToMoveAfter.text)),\n                        onItem : () => {\n                            const { parent : oldParent } = column;\n\n                            // If the operation was successful, postprocess. Check for\n                            // parent being empty and set the new region.\n                            if (columnToMoveAfter.parent.insertChild(column, columnToMoveAfter.nextSibling)) {\n                                column.region = columnToMoveAfter.region;\n\n                                // If we have removed the last child, remove the empty group.\n                                // Column#sealed may have vetoed the operation.\n                                if (!oldParent.children?.length) {\n                                    oldParent.remove();\n                                }\n                            }\n                        }\n                    };\n                }\n            }\n        }\n\n        return items;\n    }\n\n    getColumnToMoveBefore(column) {\n        const { previousSibling, parent } = column;\n\n        if (previousSibling) {\n            return previousSibling.children && !column.children ? previousSibling.children[previousSibling.children.length - 1] : previousSibling;\n        }\n\n        // Move to before parent\n        if (!parent.isRoot) {\n            return parent;\n        }\n    }\n\n    getColumnToMoveAfter(column) {\n        const { nextSibling, parent } = column;\n\n        if (nextSibling) {\n            return nextSibling;\n        }\n\n        // Move to before parent\n        if (!parent.isRoot) {\n            return parent;\n        }\n    }\n}\n\nHeaderMenu.featureClass = '';\n\nGridFeatureManager.registerFeature(HeaderMenu, true);\n","//TODO: Allow multisort using multitouch?\n//TODO: UI sort of broken with grouped headers, take a look at groupedheaders demo\n\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport DomClassList from '../../Core/helper/util/DomClassList.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from './GridFeatureManager.js';\n\n/**\n * @module Grid/feature/Sort\n */\n\n/**\n * Allows sorting of grid by clicking (or tapping) headers, also displays which columns grid is sorted by (numbered if\n * using multisort). Use modifier keys for multisorting: [Ctrl/CMD + click] to add sorter, [Ctrl/CMD + Alt + click] to remove sorter.\n * The actual sorting is done by the store, see {@link Core.data.mixin.StoreSort#function-sort Store.sort()}.\n *\n * {@inlineexample Grid/feature/Sort.js}\n *\n * ```javascript\n * // sorting feature is enabled, no default value though\n * const grid = new Grid({\n *     features : {\n *         sort : true\n *     }\n * });\n *\n * // use initial sorting\n * const grid = new Grid({\n *     features : {\n *         sort : 'name'\n *     }\n * });\n *\n * // can also be specified on the store\n * const grid = new Grid({\n *     store : {\n *         sorters : [\n *             { field : 'name', ascending : false }\n *         ]\n *     }\n * });\n *\n * // custom sorting function can also be specified on the store\n * const grid = new Grid({\n *     store : {\n *         sorters : [{\n *             fn : (recordA, recordB) => {\n *                 // apply custom logic, for example:\n *                 return recordA.name.length < recordB.name.length ? -1 : 1;\n *             }\n *         }]\n *     }\n * });\n * ```\n *\n * For info on programmatically handling sorting, see {@link Core.data.mixin.StoreSort StoreSort}:\n *\n * ```javascript\n * const grid = new Grid({ });\n * // Programmatic sorting of the store, Grids rows and UI will be updated\n * grid.store.sort('age');\n * ```\n *\n * Grid columns can define custom sorting functions (see {@link Grid.column.Column#config-sortable Column.sortable}).\n * If this feature is configured with `prioritizeColumns: true`, those functions will also be used when sorting\n * programmatically:\n *\n * ```javascript\n * const grid = new Grid({\n *     columns : [\n *         {\n *             field : 'age',\n *             text : 'Age',\n *             sortable(lhs, rhs) {\n *               // Custom sorting, see Array#sort\n *             }\n *         }\n *     ],\n *\n *     features : {\n *         sort : {\n *             prioritizeColumns : true\n *         }\n *     }\n * });\n *\n * // Sortable fn will also be used when sorting programmatically\n * grid.store.sort('age');\n * ```\n *\n * This feature is **enabled** by default.\n *\n * @extends Core/mixin/InstancePlugin\n * @demo Grid/sorting\n * @classtype sort\n * @feature\n */\nexport default class Sort extends InstancePlugin {\n    //region Config\n\n    static get $name() {\n        return 'Sort';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Enable multi sort\n             * @config {Boolean}\n             * @default\n             */\n            multiSort : true,\n\n            /**\n             * Use custom sorting functions defined on columns also when programmatically sorting by the columns field.\n             *\n             * ```javascript\n             * const grid = new Grid({\n             *     columns : [\n             *         {\n             *             field : 'age',\n             *             text : 'Age',\n             *             sortable(lhs, rhs) {\n             *               // Custom sorting, see Array#sort\n             *             }\n             *         }\n             *     ],\n             *\n             *     features : {\n             *         sort : {\n             *             prioritizeColumns : true\n             *         }\n             *     }\n             * });\n             *\n             * grid.store.sort('age');\n             * ```\n             *\n             * @config {Boolean}\n             * @default\n             */\n            prioritizeColumns : false\n        };\n    }\n\n    static get properties() {\n        return {\n            ignoreRe : new RegExp([\n                // Stop this feature from having to know the internals of two other optional features.\n                'b-grid-header-resize-handle',\n                'b-filter-icon'\n            ].join('|')),\n\n            sortableCls   : 'b-sortable',\n            sortedCls     : 'b-sort',\n            sortedAscCls  : 'b-asc',\n            sortedDescCls : 'b-desc'\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    construct(grid, config) {\n        // process initial config into an actual config object\n        config = this.processConfig(config);\n\n        this.grid = grid;\n\n        this.bindStore(this.store);\n\n        super.construct(grid, config);\n    }\n\n    // Sort feature handles special config cases, where user can supply a string or an array of sorters\n    // instead of a normal config object\n    processConfig(config) {\n        if (typeof config === 'string' || Array.isArray(config)) {\n            return {\n                field     : config,\n                ascending : null\n            };\n        }\n\n        return config;\n    }\n\n    // override setConfig to process config before applying it\n    setConfig(config) {\n        super.setConfig(this.processConfig(config));\n    }\n\n    bindStore(store) {\n        this.detachListeners('store');\n\n        store.ion({\n            name       : 'store',\n            beforeSort : 'onStoreBeforeSort',\n            sort       : 'syncHeaderSortState',\n            thisObj    : this\n        });\n    }\n\n    set field(field) {\n        // Use columns sortable config for initial sorting if it is specified\n        const column = this.grid.columns.get(field);\n\n        if (column && typeof column.sortable === 'object') {\n            // Normalization of Store & CollectionSorter differences\n            column.sortable.field = column.sortable.property || field;\n            field = column.sortable;\n        }\n\n        this.store.sort(field, this.ascending);\n    }\n\n    // Avoid caching store, it might change\n    get store() {\n        return this.grid[this.grid.sortFeatureStore];\n    }\n\n    //endregion\n\n    //region Plugin config\n\n    // Plugin configuration. This plugin chains some of the functions in Grid.\n    static get pluginConfig() {\n        return {\n            chain : ['onElementClick', 'populateHeaderMenu', 'getColumnDragToolbarItems', 'renderHeader', 'onPaint', 'bindStore']\n        };\n    }\n\n    //endregion\n\n    //region Headers\n\n    /**\n     * Update headers to match stores sorters (displays sort icon in correct direction on them)\n     * @private\n     */\n    syncHeaderSortState() {\n        const\n            me       = this,\n            { grid } = me;\n\n        if (!grid.hideHeaders && grid.isPainted) {\n            const\n                storeSorters = me.store.sorters,\n                sorterCount  = storeSorters.length,\n                classList    = new DomClassList();\n            let\n                sorter;\n\n            // Sync the sortable, sorted, and sortIndex state of each leaf header element\n            for (const leafColumn of grid.columns.visibleColumns) {\n                const\n                    leafHeader = leafColumn.element,\n                    // TimeAxisColumn in Scheduler has no textWrapper, since it has custom rendering,\n                    // but since it cannot be sorted by anyway lets just ignore it\n                    dataset    = leafColumn.textWrapper?.dataset;\n\n                let sortDirection = 'none';\n\n                // data-sortIndex is 1-based, and only set if there is > 1 sorter.\n                // iOS Safari throws a JS error if the requested delete property is not present.\n                dataset?.sortIndex && delete dataset.sortIndex;\n\n                classList.value = leafHeader.classList;\n\n                if (leafColumn.sortable !== false) {\n                    classList.add(me.sortableCls);\n\n                    sorter = storeSorters.find(sort =>\n                        sort.field === leafColumn.field ||\n                        (sort.sortFn && sort.sortFn === leafColumn.sortable.sortFn)\n                    );\n\n                    if (sorter) {\n                        if (sorterCount > 1 && dataset) {\n                            dataset.sortIndex = storeSorters.indexOf(sorter) + 1;\n                        }\n                        classList.add(me.sortedCls);\n                        if (sorter.ascending) {\n                            classList.add(me.sortedAscCls);\n                            classList.remove(me.sortedDescCls);\n                            sortDirection = 'ascending';\n                        }\n                        else {\n                            classList.add(me.sortedDescCls);\n                            classList.remove(me.sortedAscCls);\n                            sortDirection = 'descending';\n                        }\n                    }\n                    else {\n                        classList.remove(me.sortedCls);\n                        // Not optimal, but easiest way to make sure sort feature does not remove needed classes.\n                        // Better solution would be to use different names for sorting and grouping\n                        if (!classList['b-group']) {\n                            classList.remove(me.sortedAscCls);\n                            classList.remove(me.sortedDescCls);\n                        }\n                    }\n                }\n                else {\n                    classList.remove(me.sortableCls);\n                }\n\n                // Update the element's classList\n                DomHelper.syncClassList(leafHeader, classList);\n                DomHelper.setAttributes(leafHeader, {\n                    'aria-sort' : sortDirection\n                });\n            }\n        }\n    }\n\n    //endregion\n\n    //region Context menu\n\n    /**\n     * Adds sort menu items to header context menu.\n     * @param {Object} options Contains menu items and extra data retrieved from the menu target.\n     * @param {Grid.column.Column} options.column Column for which the menu will be shown\n     * @param {Object<String,MenuItemConfig|Boolean|null>} options.items A named object to describe menu items\n     * @internal\n     */\n    populateHeaderMenu({ column, items }) {\n        const\n            me        = this,\n            { store } = me,\n            sortBy    = {  ...column.sortable, field : column.field, columnOwned : true };\n\n        if (column.sortable !== false) {\n            items.sortAsc = {\n                text        : 'L{sortAscending}',\n                localeClass : me,\n                icon        : 'b-fw-icon b-icon-sort-asc',\n                cls         : 'b-separator',\n                weight      : 300,\n                disabled    : me.disabled,\n                onItem      : () => store.sort(sortBy, true)\n            };\n\n            items.sortDesc = {\n                text        : 'L{sortDescending}',\n                localeClass : me,\n                icon        : 'b-fw-icon b-icon-sort-desc',\n                weight      : 310,\n                disabled    : me.disabled,\n                onItem      : () => store.sort(sortBy, false)\n            };\n\n            if (me.multiSort && me.grid.columns.records.some(col => col.sortable)) {\n                const sorter = store.sorters.find(s => s.field === column.field || (column.sortable.sortFn && column.sortable.sortFn === s.sortFn));\n\n                items.multiSort = {\n                    text        : 'L{multiSort}',\n                    localeClass : me,\n                    icon        : 'b-fw-icon b-icon-sort',\n                    weight      : 320,\n                    disabled    : me.disabled,\n                    menu        : {\n                        addSortAsc : {\n                            text        : sorter ? 'L{toggleSortAscending}' : 'L{addSortAscending}',\n                            localeClass : me,\n                            icon        : 'b-fw-icon b-icon-sort-asc',\n                            disabled    : sorter && sorter?.ascending,\n                            weight      : 330,\n                            onItem      : () => store.addSorter(sortBy, true)\n                        },\n                        addSortDesc : {\n                            text        : sorter ? 'L{toggleSortDescending}' : 'L{addSortDescending}',\n                            localeClass : me,\n                            icon        : 'b-fw-icon b-icon-sort-desc',\n                            disabled    : sorter && !sorter.ascending,\n                            weight      : 340,\n                            onItem      : () => store.addSorter(sortBy, false)\n                        },\n                        removeSorter : {\n                            text        : 'L{removeSorter}',\n                            localeClass : me,\n                            icon        : 'b-fw-icon b-icon-remove',\n                            weight      : 350,\n                            disabled    : !sorter,\n                            onItem      : () => {\n                                store.removeSorter(sortBy.field);\n                            }\n                        }\n                    }\n                };\n            }\n        }\n    }\n\n    /**\n     * Supply items to ColumnDragToolbar\n     * @private\n     */\n    getColumnDragToolbarItems(column, items) {\n        const\n            me                  = this,\n            { store, disabled } = me;\n\n        if (column.sortable !== false) {\n            const sorter = store.sorters.find(s => s.field === column.field);\n\n            items.push(\n                {\n                    text        : 'L{sortAscendingShort}',\n                    group       : 'L{sort}',\n                    localeClass : me,\n                    icon        : 'b-icon b-icon-sort-asc',\n                    ref         : 'sortAsc',\n                    cls         : 'b-separator',\n                    weight      : 105,\n                    disabled,\n                    onDrop      : ({ column }) => store.sort(column.field, true)\n                },\n                {\n                    text        : 'L{sortDescendingShort}',\n                    group       : 'L{sort}',\n                    localeClass : me,\n                    icon        : 'b-icon b-icon-sort-desc',\n                    ref         : 'sortDesc',\n                    weight      : 105,\n                    disabled,\n                    onDrop      : ({ column }) => store.sort(column.field, false)\n                },\n                {\n                    text        : 'L{addSortAscendingShort}',\n                    group       : 'L{multiSort}',\n                    localeClass : me,\n                    icon        : 'b-icon b-icon-sort-asc',\n                    ref         : 'multisortAddAsc',\n                    disabled    : disabled || (sorter && sorter.ascending),\n                    weight      : 105,\n                    onDrop      : ({ column }) => store.addSorter(column.field, true)\n                }, {\n                    text        : 'L{addSortDescendingShort}',\n                    group       : 'L{multiSort}',\n                    localeClass : me,\n                    icon        : 'b-icon b-icon-sort-desc',\n                    ref         : 'multisortAddDesc',\n                    disabled    : disabled || (sorter && !sorter.ascending),\n                    weight      : 105,\n                    onDrop      : ({ column }) => store.addSorter(column.field, false)\n                }, {\n                    text        : 'L{removeSorterShort}',\n                    group       : 'L{multiSort}',\n                    localeClass : me,\n                    icon        : 'b-icon b-icon-remove',\n                    ref         : 'multisortRemove',\n                    weight      : 105,\n                    disabled    : disabled || !sorter,\n                    onDrop      : ({ column }) => store.removeSorter(column.field)\n                }\n            );\n        }\n        return items;\n    }\n\n    //endregion\n\n    //region Events\n\n    // Intercept sorting by a column that has a custom sorting fn, and inject that fn\n    onStoreBeforeSort({ sorters }) {\n        const { columns } = this.client;\n\n        for (let i = 0; i < sorters.length; i++) {\n            const\n                sorter = sorters[i],\n                column = (sorter.columnOwned || this.prioritizeColumns) && columns.get(sorter.field);\n\n            if (column?.sortable?.sortFn) {\n                sorters[i] = { ...sorter, ...column.sortable, columnOwned : true };\n            }\n        }\n    }\n\n    /**\n     * Clicked on header, sort Store.\n     * @private\n     */\n    onElementClick(event) {\n        const\n            me         = this,\n            { store }  = me,\n            { target } = event,\n            header     = target.closest('.b-grid-header.b-sortable'),\n            field      = header?.dataset.column;\n\n        if (me.ignoreRe.test(target.className) || me.disabled || event.handled) {\n            return;\n        }\n\n        //Header\n        if (header && field) {\n            const\n                column        = me.grid.columns.getById(header.dataset.columnId),\n                columnGrouper = store.isGrouped && store.groupers.find(g => g.field === field);\n\n            // The Group feature will handle the change of the grouper's direction\n            if (columnGrouper && !event.shiftKey) {\n                return;\n            }\n\n            if (column.sortable && !event.shiftKey) {\n                if (event.ctrlKey && event.altKey) {\n                    store.removeSorter(column.field);\n                }\n                else {\n                    const sortBy = {\n                        columnOwned : true,\n                        field       : column.field\n                    };\n\n                    // sortable as a function is handled by onStoreBeforeSort() above\n\n                    if (typeof column.sortable === 'object') {\n                        ObjectHelper.assign(sortBy, column.sortable);\n                    }\n\n                    store.sort(sortBy, null, event.ctrlKey);\n                }\n            }\n        }\n    }\n\n    /**\n     * Called when grid headers are rendered, make headers match current sorters.\n     * @private\n     */\n    renderHeader() {\n        this.syncHeaderSortState();\n    }\n\n    onPaint() {\n        this.syncHeaderSortState();\n    }\n\n    //endregion\n}\n\nSort.featureClass = 'b-sort';\n\nGridFeatureManager.registerFeature(Sort, true);\n","import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\n\n/**\n * @module Grid/feature/Stripe\n */\n\n/**\n * Stripes rows by adding alternating CSS classes to all row elements (`b-even` and `b-odd`).\n *\n * This feature is <strong>disabled</strong> by default.\n *\n * @extends Core/mixin/InstancePlugin\n *\n * @example\n * let grid = new Grid({\n *   features: {\n *     stripe: true\n *   }\n * });\n *\n * @demo Grid/columns\n * @classtype stripe\n * @inlineexample Grid/feature/Stripe.js\n * @feature\n */\nexport default class Stripe extends InstancePlugin {\n\n    static get $name() {\n        return 'Stripe';\n    }\n\n    construct(grid, config) {\n        super.construct(grid, config);\n\n        grid.ion({\n            renderrow : 'onRenderRow',\n            thisObj   : this\n        });\n    }\n\n    doDisable(disable) {\n        if (!this.isConfiguring) {\n            // Refresh rows to add/remove even/odd classes\n            this.client.refreshRows();\n        }\n\n        super.doDisable(disable);\n    }\n\n    /**\n     * Applies even/odd CSS when row is rendered\n     * @param {Grid.row.Row} rowModel\n     * @private\n     */\n    onRenderRow({ row }) {\n        const\n            { disabled } = this,\n            even         = row.dataIndex % 2 === 0;\n\n        row.assignCls({\n            'b-even' : !disabled && even,\n            'b-odd'  : !disabled && !even\n        });\n    }\n}\n\nGridFeatureManager.registerFeature(Stripe);\n","import Base from '../../Core/Base.js';\nimport DomDataStore from '../../Core/data/DomDataStore.js';\nimport ArrayHelper from '../../Core/helper/ArrayHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport DomSync from '../../Core/helper/DomSync.js';\nimport DomClassList from '../../Core/helper/util/DomClassList.js';\nimport Location from '../util/Location.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\n\n/**\n * @module Grid/row/Row\n */\n\nconst cellContentRange     = document.createRange();\n\n/**\n * Represents a single rendered row in the grid. Consists of one row element for each SubGrid in use. The grid only\n * creates as many rows as needed to fill the current viewport (and a buffer). As the grid scrolls\n * the rows are repositioned and reused, there is not a one-to-one relation between rows and records.\n *\n * For normal use cases you should not have to use this class directly. Rely on using renderers instead.\n * @extends Core/Base\n */\nexport default class Row extends Base {\n\n    static $name = 'Row';\n\n    static get configurable() {\n        return {\n            /**\n             * When __read__, this a {@link Core.helper.util.DomClassList} of class names to be\n             * applied to this Row's elements.\n             *\n             * It can be __set__ using Object notation where each property name with a truthy value is added as\n             * a class, or as a regular space-separated string.\n             *\n             * @member {Core.helper.util.DomClassList} cls\n             * @accepts {Core.helper.util.DomClassList|Object<String,Boolean|Number>}\n             */\n            /**\n             * The class name to initially add to all row elements\n             * @config {String|Core.helper.util.DomClassList|Object<String,Boolean|Number>}\n             */\n            cls : {\n                $config : {\n                    equal : (c1, c2) => c1?.isDomClassList && c2?.isDomClassList && c1.isEqual(c2)\n                }\n            }\n        };\n    }\n\n    //region Init\n\n    /**\n     * Constructs a Row setting its index.\n     * @param {Object} config A configuration object which must contain the following two properties:\n     * @param {Grid.view.Grid} config.grid The owning Grid.\n     * @param {Grid.row.RowManager} config.rowManager The owning RowManager.\n     * @param {Number} config.index The index of the row within the RowManager's cache.\n     * @function constructor\n     * @internal\n     */\n    construct(config) {\n        // Set up defaults and properties\n        Object.assign(this, {\n            _elements      : {},\n            _elementsArray : [],\n            _cells         : {},\n            _allCells      : [],\n            _regions       : [],\n            lastHeight     : 0,\n            lastTop        : -1,\n            _dataIndex     : 0,\n            _top           : 0,\n            _height        : 0,\n            _id            : null,\n            forceInnerHTML : false,\n            isGroupFooter  : false,\n            // Create our cell rendering context\n            cellContext    : new Location({\n                grid        : config.grid,\n                id          : null,\n                columnIndex : 0\n            })\n        });\n\n        super.construct(config);\n\n        // For performance, the element translation method is set at Row consruct time.\n        // The default uses transform : translate(), it can be overridden if rows need\n        // to be positioned using layout, such as when sticky elements are used in cells.\n        if (this.grid.positionMode === 'position') {\n            this.translateElements = this.positionElements;\n        }\n    }\n\n    doDestroy() {\n        const me = this;\n\n        // No need to clean elements up if the entire thing is being destroyed\n        if (!me.rowManager.isDestroying) {\n            me.removeElements();\n\n            if (me.rowManager.idMap[me.id] === me) {\n                delete me.rowManager.idMap[me.id];\n            }\n\n        }\n\n        super.doDestroy();\n    }\n\n    //endregion\n\n    //region Data getters/setters\n\n    /**\n     * Get index in RowManagers rows array\n     * @property {Number}\n     * @readonly\n     */\n    get index() {\n        return this._index;\n    }\n\n    set index(index) {\n        this._index = index;\n    }\n\n    /**\n     * Get/set this rows current index in grids store\n     * @property {Number}\n     */\n    get dataIndex() {\n        return this._dataIndex;\n    }\n\n    set dataIndex(dataIndex) {\n        if (this._dataIndex !== dataIndex) {\n            this._dataIndex = dataIndex;\n            this.eachElement(element => {\n                element.dataset.index = dataIndex;\n                element.ariaRowIndex  = this.grid.hideHeaders ? dataIndex + 1 : dataIndex + 2;\n            });\n        }\n    }\n\n    /**\n     * Get/set id for currently rendered record\n     * @property {String|Number}\n     */\n    get id() {\n        return this._id;\n    }\n\n    set id(id) {\n        const\n            me    = this,\n            idObj = { id },\n            idMap = me.rowManager.idMap;\n\n        if (me._id !== id || idMap[id] !== me) {\n            if (idMap[me._id] === me) delete idMap[me._id];\n            idMap[id] = me;\n\n            me._id = id;\n            me.eachElement(element => {\n                DomDataStore.assign(element, idObj);\n                element.dataset.id = id;\n            });\n            me.eachCell(cell => DomDataStore.assign(cell, idObj));\n        }\n    }\n\n    //endregion\n\n    //region Row elements\n\n    /**\n     * Add a row element for specified region.\n     * @param {String} region Region to add element for\n     * @param {HTMLElement} element Element\n     * @private\n     */\n    addElement(region, element) {\n        const me = this;\n\n        let cellElement = element.firstElementChild;\n\n        me._elements[region] = element;\n        me._elementsArray.push(element);\n        me._regions.push(region);\n        DomDataStore.assign(element, { index : me.index });\n\n        me._cells[region] = [];\n\n        while (cellElement) {\n            me._cells[region].push(cellElement);\n            me._allCells.push(cellElement);\n\n            DomDataStore.set(cellElement, {\n                column     : cellElement.dataset.column, // TODO: dataset is slow, read from columnstore using index instead\n                columnId   : cellElement.dataset.columnId,\n                rowElement : cellElement.parentNode,\n                row        : me\n            });\n\n            cellElement = cellElement.nextElementSibling;\n        }\n\n        // making css selectors simpler, dataset has bad performance but it is only set once and never read\n        element.dataset.index = me.index;\n        element.ariaRowIndex  = me.grid.hideHeaders ? me.index + 1 : me.index + 2;\n    }\n\n    /**\n     * Get the element for the specified region.\n     * @param {String} region\n     * @returns {HTMLElement}\n     */\n    getElement(region) {\n        return this._elements[region];\n    }\n\n    /**\n     * Get the {@link Core.helper.util.Rectangle element bounds} for the specified region of this Row.\n     * @param {String} region\n     * @returns {Core.helper.util.Rectangle}\n     */\n    getRectangle(region) {\n        return Rectangle.from(this.getElement(region));\n    }\n\n    /**\n     * Execute supplied function for each regions element.\n     * @param {Function} fn\n     */\n    eachElement(fn) {\n        this._elementsArray.forEach(fn);\n    }\n\n    /**\n     * Execute supplied function for each cell.\n     * @param {Function} fn\n     */\n    eachCell(fn) {\n        this._allCells.forEach(fn);\n    }\n\n    /**\n     * An object, keyed by region name (for example `locked` and `normal`) containing the elements which comprise the full row.\n     * @type {Object<String,HTMLElement>}\n     * @readonly\n     */\n    get elements() {\n        return this._elements;\n    }\n\n    /**\n     * The row element, only applicable when not using multiple grid sections (see {@link #property-elements})\n     * @type {HTMLElement}\n     * @readonly\n     */\n    get element() {\n        const region = Object.keys(this._elements)[0];\n\n        return this._elements[region];\n    }\n\n    //endregion\n\n    //region Cell elements\n\n    /**\n     * Row cell elements\n     * @property {HTMLElement[]}\n     * @readonly\n     */\n    get cells() {\n        return this._allCells;\n    }\n\n    /**\n     * Get cell elements for specified region.\n     * @param {String} region Region to get elements for\n     * @returns {HTMLElement[]} Array of cell elements\n     */\n    getCells(region) {\n        return this._cells[region];\n    }\n\n    /**\n     * Get the cell element for the specified column.\n     * @param {String|Number} columnId Column id\n     * @returns {HTMLElement} Cell element\n     */\n    getCell(columnId) {\n        return this._allCells.find(cell => {\n            const cellData = DomDataStore.get(cell);\n            // cellData will always have String type, use == to handle a column with Number type\n            return cellData.columnId == columnId || cellData.column == columnId;\n        });\n    }\n\n    removeElements(onlyRelease = false) {\n        const me = this;\n\n        // Triggered before the actual remove to allow cleaning up elements etc.\n        me.rowManager.trigger('removeRow', { row : me });\n\n        if (!onlyRelease) {\n            me.eachElement(element => element.remove());\n        }\n        me._elements = {};\n        me._cells = {};\n        me._elementsArray.length = me._regions.length = me._allCells.length = me.lastHeight = me.height = 0;\n        me.lastTop = -1;\n    }\n\n    //endregion\n\n    //region Height\n\n    /**\n     * Get/set row height\n     * @property {Number}\n     */\n    get height() {\n        return this._height;\n    }\n\n    set height(height) {\n        this._height = height;\n    }\n\n    /**\n     * Get row height including border\n     * @property {Number}\n     */\n    get offsetHeight() {\n        // me.height is specified height, add border height to it to get cells height to match specified rowHeight\n        // border height is measured in Grid#get rowManager\n        return this.height + this.grid._rowBorderHeight;\n    }\n\n    /**\n     * Sync elements height to rows height\n     * @private\n     */\n    updateElementsHeight(isExport) {\n        const me = this;\n\n        if (!isExport) {\n            me.rowManager.storeKnownHeight(me.id, me.height);\n        }\n\n        // prevent unnecessary style updates\n        if (me.lastHeight !== me.height) {\n            this.eachElement(element => element.style.height = `${me.offsetHeight}px`);\n            me.lastHeight = me.height;\n        }\n    }\n\n    //endregion\n\n    //region CSS\n\n    /**\n     * Add CSS classes to each element.\n     * @param {...String|Object<String,Boolean|Number>|Core.helper.util.DomClassList} classes\n     */\n    addCls(classes) {\n        this.updateCls(this.cls.add(classes));\n    }\n\n    /**\n     * Remove CSS classes from each element.\n     * @param {...String|Object<String,Boolean|Number>|Core.helper.util.DomClassList} classes\n     */\n    removeCls(classes) {\n        this.updateCls(this.cls.remove(classes));\n    }\n\n    /**\n     * Toggle CSS classes for each element.\n     * @param {Object<String,Boolean|Number>|Core.helper.util.DomClassList|...String} classes\n     * @param {Boolean} add\n     * @internal\n     */\n    toggleCls(classes, add) {\n        this.updateCls(this.cls[add ? 'add' : 'remove'](classes));\n    }\n\n    /**\n     * Adds/removes class names according to the passed object's properties.\n     *\n     * Properties with truthy values are added.\n     * Properties with false values are removed.\n     * @param {Object<String,Boolean|Number>} classes Object containing properties to set/clear\n     */\n    assignCls(classes) {\n        this.updateCls(this.cls.assign(classes));\n    }\n\n    changeCls(cls) {\n        return cls?.isDomClassList ? cls : new DomClassList(cls);\n    }\n\n    updateCls(cls) {\n        this.eachElement(element => DomHelper.syncClassList(element, cls));\n    }\n\n    setAttribute(attribute, value) {\n        this.eachElement(element => element.setAttribute(attribute, value));\n    }\n\n    removeAttribute(attribute) {\n        this.eachElement(element => element.removeAttribute(attribute));\n    }\n\n    //endregion\n\n    //region Position\n\n    /**\n     * Is this the very first row?\n     * @property {Boolean}\n     * @readonly\n     */\n    get isFirst() {\n        return this.dataIndex === 0;\n    }\n\n    /**\n     * Row top coordinate\n     * @property {Number}\n     * @readonly\n     */\n    get top() {\n        return this._top;\n    }\n\n    /**\n     * Row bottom coordinate\n     * @property {Number}\n     * @readonly\n     */\n    get bottom() {\n        return this._top + this._height + this.grid._rowBorderHeight;\n    }\n\n    /**\n     * Sets top coordinate, translating elements position.\n     * @param {Number} top Top coordinate\n     * @param {Boolean} [silent] Specify `true` to not trigger translation event\n     * @internal\n     */\n    setTop(top, silent) {\n        if (this._top !== top) {\n            this._top = top;\n            this.translateElements(silent);\n        }\n    }\n\n    /**\n     * Sets bottom coordinate, translating elements position.\n     * @param {Number} bottom Bottom coordinate\n     * @param {Boolean} [silent] Specify `true` to not trigger translation event\n     * @private\n     */\n    setBottom(bottom, silent) {\n        this.setTop(bottom - this.offsetHeight, silent);\n    }\n\n    // Used by export feature to position individual row\n    translate(top, silent = false) {\n        this.setTop(top, silent);\n        return top + this.offsetHeight;\n    }\n\n    /**\n     * Sets css transform to position elements at correct top position (translateY)\n     * @private\n     */\n    translateElements(silent) {\n        const\n            me                      = this,\n            { top, _elementsArray } = me;\n\n        if (me.lastTop !== top) {\n            for (let i = 0, { length } = _elementsArray; i < length; i++) {\n                _elementsArray[i].style.transform = `translate(0,${top}px)`;\n            }\n\n            !silent && me.rowManager.trigger('translateRow', { row : me });\n\n            me.lastTop = top;\n        }\n    }\n\n    /**\n     * Sets css top to position elements at correct top position\n     * @private\n     */\n    positionElements(silent) {\n        const\n            me                      = this,\n            { top, _elementsArray } = me;\n\n        if (me.lastTop !== top) {\n            for (let i = 0, { length } = _elementsArray; i < length; i++) {\n                _elementsArray[i].style.top = `${top}px`;\n            }\n\n            !silent && me.rowManager.trigger('translateRow', { row : me });\n\n            me.lastTop = top;\n        }\n    }\n\n    /**\n     * Moves all row elements up or down and updates model.\n     * @param {Number} offsetTop Pixels to offset the elements\n     * @private\n     */\n    offset(offsetTop) {\n        let newTop = this._top + offsetTop;\n\n        // Not allowed to go below zero (won't be reachable on scroll in that case)\n        if (newTop < 0) {\n            offsetTop -= newTop;\n            newTop = 0;\n        }\n        this.setTop(newTop);\n        return offsetTop;\n    }\n\n    //endregion\n\n    //region Render\n\n    /**\n     * Renders a record into this rows elements (trigger event that subgrids catch to do the actual rendering).\n     * @param {Number} recordIndex\n     * @param {Core.data.Model} record\n     * @param {Boolean} [updatingSingleRow]\n     * @param {Boolean} [batch]\n     * @private\n     */\n    render(recordIndex, record, updatingSingleRow = true, batch = false, isExport = false) {\n        const\n            me        = this,\n            {\n                cellContext,\n                cls,\n                elements,\n                cells,\n                grid,\n                rowManager,\n                height         : oldHeight,\n                _id            : oldId\n            }             = me,\n            rowElData     = DomDataStore.get(me._elementsArray[0]),\n            rowHeight     = rowManager._rowHeight,\n            { store }     = grid,\n            { isTree }    = store;\n\n        let i = 0,\n            size;\n\n        // no record specified, try looking up in store (false indicates empty row, don't do lookup\n        if (!record && record !== false) {\n            record = grid.store.getById(rowElData.id);\n            recordIndex = grid.store.indexOf(record);\n        }\n\n        // Bail out if record is not resolved\n        // TODO this happens when resource changes its id\n        // covered w/ 13_view_update.t.js and 14_crudmanager_sharing.t.js in Scheduler\n        if (!record) {\n            return;\n        }\n\n        // Now we have acquired a record, see what classes it requires on the\n        const\n            rCls          = record?.cls,\n            recordCls     = rCls ? (rCls.isDomClassList ? rCls : new DomClassList(rCls)) : null;\n\n        cls.assign({\n            // do not put updating class if we're exporting the row\n            'b-grid-row-updating' : updatingSingleRow && grid.transitionDuration && !isExport,\n            'b-selected'          : grid.isSelected(record?.id),\n            'b-readonly'          : record.readOnly,\n            'b-linked'            : record.isLinked,\n            'b-original'          : record.hasLinks\n        });\n\n        // These are DomClassLists, so they have to have their properties processed by add/remove\n        if (me.lastRecordCls) {\n            cls.remove(me.lastRecordCls);\n        }\n\n        // Assign our record's cls to the row, and cache the value so it can be removed next time round\n        if (recordCls) {\n            cls.add(recordCls);\n            me.lastRecordCls = Object.assign({}, recordCls);\n        }\n        else {\n            me.lastRecordCls = null;\n        }\n\n        // used by GroupSummary feature to clear row before\n        rowManager.trigger('beforeRenderRow', { row : me, record, recordIndex, oldId });\n\n        grid.beforeRenderRow({ row : me, record, recordIndex, oldId });\n\n        // Flush any changes to our DomClassList to the Row's DOM\n        me.updateCls(cls);\n\n        if (updatingSingleRow && grid.transitionDuration && !isExport) {\n            grid.setTimeout(() => {\n                if (!me.isDestroyed) {\n                    cls.remove('b-grid-row-updating');\n                    me.updateCls(cls);\n                }\n            }, grid.transitionDuration);\n        }\n\n        me.id = record.id;\n        me.dataIndex = recordIndex;\n        //<debug>\n        if (me.dataIndex === -1) {\n            throw new Error(`Row's record, id: ${record.id} not found in store`);\n        }\n        //</debug>\n\n        // Configured height, used as row height if renderers do not specify otherwise\n        const height = (!grid.fixedRowHeight && grid.getRowHeight(record)) || rowHeight;\n\n        // Max height returned by renderers\n        let maxRequestedHeight = me.maxRequestedHeight = null;\n\n        // Keep ARIA ownership up to date\n        if (isTree) {\n            for (const region in elements) {\n                const el = elements[region];\n\n                el.id = `${grid.id}-${region}-${me.id}`;\n                DomHelper.setAttributes(el, {\n                    'aria-level'    : record.childLevel + 1,\n                    'aria-setsize'  : record.parent.children.length,\n                    'aria-posinset' : record.parentIndex + 1\n                });\n\n                if (record.isExpanded(store)) {\n                    DomHelper.setAttributes(el, {\n                        'aria-expanded' : true,\n                        // A branch node may be configured expanded, but yet have no children.\n                        // They may be added dynamically.\n                        'aria-owns'     : record.children?.length ? record.children?.map(r => `${grid.id}-${region}-${r.id}`).join(' ') : null\n                    });\n                }\n                else {\n                    if (record.isLeaf) {\n                        el.removeAttribute('aria-expanded');\n                    }\n                    else {\n                        el.setAttribute('aria-expanded', false);\n                    }\n                    el.removeAttribute('aria-owns');\n                }\n            }\n        }\n\n        cellContext._record   = record;\n        cellContext._id       = record.id;\n        cellContext._rowIndex = recordIndex;\n\n        for (i = 0; i < cells.length; i++) {\n            cellContext._columnId          = cells[i].dataset.columnId;\n            cellContext._column            = grid.columns.getById(cellContext._columnId);\n            cellContext._columnIndex       = i;\n            cellContext._cell              = cells[i];\n            cellContext.height             = height;\n            cellContext.maxRequestedHeight = maxRequestedHeight;\n            cellContext.updatingSingleRow  = updatingSingleRow;\n\n            size = me.renderCell(cellContext);\n\n            if (!rowManager.fixedRowHeight) {\n                // We want to make row in all regions as high as the highest cell\n                if (size.height != null) {\n                    maxRequestedHeight = Math.max(maxRequestedHeight, size.height);\n\n                    // Do not store a max height set by schedulers rendering, it has to base its layouts on the\n                    // original row height / that returned by other cells\n                    if (!size.transient) {\n                        me.maxRequestedHeight = maxRequestedHeight;\n                    }\n                }\n            }\n        }\n        const useHeight = maxRequestedHeight ?? height;\n        me.height = grid.processRowHeight(record, useHeight) ?? useHeight;\n\n        // Height gets set during render, reflect on elements\n        me.updateElementsHeight(isExport);\n\n        // Rerendering a row might change its height, which forces translation of all following rows\n        if (updatingSingleRow && !isExport) {\n            if (oldHeight !== me.height) {\n                rowManager.translateFromRow(me, batch);\n            }\n            rowManager.trigger('updateRow', { row : me, record, recordIndex, oldId });\n            rowManager.trigger('renderDone');\n        }\n\n        grid.afterRenderRow({ row : me, record, recordIndex, oldId, oldHeight, isExport });\n\n        rowManager.trigger('renderRow', { row : me, record, recordIndex, oldId, isExport });\n\n        if (oldHeight && me.height !== oldHeight) {\n            rowManager.trigger('rowRowHeight',  { row : me, record, height : me.height, oldHeight });\n        }\n\n        me.forceInnerHTML = false;\n    }\n\n    /**\n     * Renders a single cell, calling features to allow them to hook\n     * @param {Grid.util.Location|HTMLElement} cellContext A {@link Grid.util.Location} which contains rendering\n     * options, or a cell element which can be used to initialize a {@link Grid.util.Location}\n     * @param {Number} [cellContext.height] Configured row height\n     * @param {Number} [cellContext.maxRequestedHeight] Maximum proposed row height from renderers\n     * @param {Boolean} [cellContext.updatingSingleRow] Rendered as part of updating a single row\n     * @param {Boolean} [cellContext.isMeasuring] Rendered as part of a measuring operation\n     * @internal\n     */\n    renderCell(cellContext) {\n        if (!cellContext.isLocation) {\n            cellContext = new Location(cellContext);\n        }\n\n        let {\n            cell : cellElement,\n            record\n        } = cellContext;\n\n        const\n            me              = this,\n            {\n                grid,\n                column,\n                height,\n                maxRequestedHeight,\n                updatingSingleRow = true,\n                isMeasuring = false\n            }               = cellContext,\n            cellEdit        = grid.features?.cellEdit,\n            cellElementData = DomDataStore.get(cellElement),\n            rowElement      = cellElementData.rowElement,\n            rowElementData  = DomDataStore.get(rowElement);\n\n        if (!record) {\n            record = cellContext.record = grid.store.getById(rowElementData.id);\n\n            if (!record) {\n                return;\n            }\n        }\n\n        let cellContent   = column.getRawValue(record);\n\n        const\n            dataField    = record.fieldMap[column.field],\n            size         = { configuredHeight : height, height : null, maxRequestedHeight },\n            cellCls      = column.getCellClass(cellContext),\n            rendererData = {\n                cellElement,\n                dataField,\n                rowElement,\n                value : cellContent,\n                record,\n                column,\n                size,\n                grid,\n                row   : cellElementData.row,\n                updatingSingleRow,\n                isMeasuring\n            },\n            useRenderer  = column.renderer || column.defaultRenderer;\n\n        // Hook to allow processing cell before render, used by QuickFind & MergeCells\n        grid.beforeRenderCell(rendererData);\n\n        // Allow hook to redirect cell output\n        if (rendererData.cellElement !== cellElement) {\n            // Render to redirected target\n            cellElement = rendererData.cellElement;\n        }\n\n        DomHelper.syncClassList(cellElement, cellCls);\n\n        let shouldSetContent = true;\n\n        // By default, `cellContent` is raw value extracted from Record based on Column field.\n        // Call `renderer` if present, otherwise set innerHTML directly.\n        if (useRenderer) {\n            // `cellContent` could be anything here:\n            // - null\n            // - undefined when nothing is returned, used when column modifies cell content, for example Widget column\n            // - number as cell value, to be converted to string\n            // - string as cell value\n            // - string which contains custom DOM element which is handled by Angular after we render it as cell value\n            // - object with special $$typeof property equals to Symbol(react.element) handled by React when JSX is returned\n            // - object which has no special properties but understood by Vue because the column is marked as \"Vue\" column\n            // - object that should be passed to the `DomSync.sync` to update the cell content\n            cellContent = useRenderer.call(column, rendererData);\n\n            if (cellContent === undefined && column.alwaysClearCell === false) {\n                shouldSetContent = false;\n            }\n        }\n        else if (dataField) {\n            cellContent = dataField.print(cellContent);\n        }\n\n        // Check if the cell content is going to be rendered by framework\n        const hasFrameworkRenderer = grid.hasFrameworkRenderer?.({ cellContent, column });\n\n        // This is exceptional case, using framework rendering while grouping is not supported.\n        // Need to reset the content in case of JSX is returned from the renderer.\n        // Normally, if a renderer returns some content, the Grouping feature will overwrite it with the grouped value.\n        // But useRenderer cannot be ignored completely, since a column might want to render additional content to the\n        // grouped row. For example, Action Column may render an action button the grouped row.\n        if (hasFrameworkRenderer && record.isSpecialRow) {\n            cellContent = '';\n        }\n\n        // If present, framework may decide if it wants our renderer to prerender the cell content or not.\n        // In case of normal cells in flat grids, React and Vue perform the full rendering into the root cell element.\n        // But in case of tree cell in tree grids, React and Vue require our renderer to prerender internals,\n        // and they perform rendering into inner \"b-tree-cell-value\" element. This way we can see our expand controls,\n        // bullets, etc.\n        const frameworkPerformsFullRendering = hasFrameworkRenderer && !column.data.tree && !record.isSpecialRow;\n\n        // `shouldSetContent` false means content is already set by the column (i.e. Widget column).\n        // `frameworkPerformsFullRendering` true means full cell content is set by framework renderer.\n        if (shouldSetContent && !frameworkPerformsFullRendering) {\n            let renderTarget = cellElement;\n\n            // If the cell is being edited, we render to a separate div and carefully\n            // insert the contents into a Range which excludes the editor.\n            if (cellEdit?.editorContext?.equals(cellContext) && !cellEdit.editor.isFinishing) {\n                renderTarget = me.moveContentFromCell(cellElement, cellEdit.editor.element);\n            }\n\n            const\n                hasObjectContent = cellContent != null && typeof cellContent === 'object',\n                hasStringContent = typeof cellContent === 'string',\n                text             = (hasObjectContent || cellContent == null) ? '' : String(cellContent);\n\n            // row might be flagged by GroupSummary to require full \"redraw\"\n            if (me.forceInnerHTML) {\n                // To allow minimal updates below, we must remove custom markup inserted by the GroupSummary feature\n                renderTarget.innerHTML = '';\n                // Delete cached content value\n                delete renderTarget._content;\n\n                cellElement.lastDomConfig = null;\n            }\n\n            // display cell contents as text or use actual html?\n            // (disableHtmlEncode set by features that decorate cell contents)\n            if (!hasObjectContent && column.htmlEncode && !column.disableHtmlEncode) {\n                // Set innerText if cell currently has html content.\n                if (cellElement._hasHtml) {\n                    renderTarget.innerText = text;\n                    cellElement._hasHtml = false;\n                }\n                else {\n                    DomHelper.setInnerText(renderTarget, text);\n                }\n            }\n            else {\n                if (column.autoSyncHtml && (!hasStringContent || DomHelper.getChildElementCount(renderTarget))) {\n                    // String content in html column is handled as a html template string\n                    if (hasStringContent) {\n                        // update cell with only changed attributes etc.\n                        DomHelper.sync(text, renderTarget.firstElementChild);\n                    }\n                    // Other content is considered to be a DomHelper config object\n                    else if (hasObjectContent) {\n                        DomSync.sync({\n                            domConfig     : cellContent,\n                            targetElement : renderTarget\n                        });\n                    }\n                }\n                // Consider all returned plain objects to be DomHelper configs for cell content\n                else if (hasObjectContent) {\n                    DomSync.sync({\n                        targetElement : renderTarget,\n                        domConfig     : {\n                            onlyChildren : true,\n                            children     : ArrayHelper.asArray(cellContent)\n                        }\n                    });\n                }\n                // Apply text as innerHTML only if it has changed\n                else if (renderTarget._content !== text) {\n                    renderTarget.innerHTML = renderTarget._content = text;\n                }\n            }\n\n            // If we had to render to a separate div to avoid the cell editor, insert the result now.\n            if (renderTarget !== cellElement) {\n                const { firstChild } = cellElement;\n                for (const node of renderTarget.childNodes) {\n                    cellElement.insertBefore(node, firstChild);\n                }\n            }\n        }\n\n        // If present, framework renders content into the cell element.\n        // Ignore special rows, like grouping.\n        if (!record.isSpecialRow) {\n            // processCellContent is implemented in the framework wrappers\n            grid.processCellContent?.({\n                cellElementData,\n                rendererData,\n                // In case of TreeColumn we should prerender inner cell content like expand controls, bullets, etc\n                // Then the framework renders the content into the nested \"b-tree-cell-value\" element.\n                // rendererHtml is set in TreeColumn.treeRenderer\n                rendererHtml : rendererData.rendererHtml || cellContent\n            });\n        }\n\n        if (column.autoHeight && size.height == null) {\n            cellElement.classList.add('b-measuring-auto-height');\n\n            // Shrinkwrap autoHeight must not allow a row's height to drop below the configured row height\n            size.height = Math.max(cellElement.offsetHeight, grid.rowHeight);\n\n            cellElement.classList.remove('b-measuring-auto-height');\n        }\n\n        if (!isMeasuring) {\n            // Allow others to affect rendering\n            me.rowManager.trigger('renderCell', rendererData);\n        }\n\n        return size;\n    }\n\n    //#region Hooks for salesforce\n\n    moveContentFromCell(cellElement, editorElement) {\n        cellContentRange.setStart(cellElement, 0);\n        cellContentRange.setEndBefore(editorElement);\n\n        const renderTarget = document.createElement('div');\n\n        renderTarget.appendChild(cellContentRange.extractContents());\n\n        return renderTarget;\n    }\n\n    //#endregion\n\n//endregion\n}\n\nRow.initClass();\n","import Widget from '../../Core/widget/Widget.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\n\n/**\n * @module Grid/view/Bar\n */\n\n/**\n * Base class used by Header and Footer. Holds an element for each column. Not intended to be used directly.\n *\n * @extends Core/widget/Widget\n * @internal\n * @abstract\n */\nexport default class Bar extends Widget {\n\n    static get $name() {\n        return 'Bar';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'gridbar';\n    }\n\n    static get defaultConfig() {\n        return {\n            htmlCls : '',\n\n            scrollable : {\n                overflowX : 'hidden-scroll'\n            }\n        };\n    }\n\n    //region Init\n\n    get columns() {\n        return this._columns || this.subGrid.columns;\n    }\n\n    // Only needed for tests which create standalone Headers with no owning SubGrid.\n    set columns(columns) {\n        this._columns = columns;\n    }\n\n    //endregion\n\n    /**\n     * Fix cell widths (flex or fixed width) after rendering.\n     * Not a part of template any longer because of CSP\n     * @private\n     */\n    fixCellWidths() {\n        const\n            me          = this,\n            { hasFlex } = me.columns;\n\n        let flexBasis;\n\n        // single header \"cell\"\n        me.columns.traverse(column => {\n            const\n                cellEl      = me.getBarCellElement(column.id),\n                domWidth    = DomHelper.setLength(column.width),\n                domMinWidth = DomHelper.setLength(column.minWidth),\n                domMaxWidth = DomHelper.setLength(column.maxWidth);\n\n            if (cellEl) {\n                flexBasis = domWidth;\n                cellEl.style.maxWidth = domMaxWidth;\n\n                // Parent column without any specified width and flex should have flex calculated if any child has flex\n                if (column.isParent && column.width == null && column.flex == null) {\n                    const flex = column.children.reduce((result, child) => (result += !child.hidden && child.flex || 0), 0);\n\n                    // Do not want to store this flex value on the column since it is always calculated\n                    cellEl.style.flex = flex > 0 ? `${flex} 0 auto` : '';\n\n                    // minWidth might leak from other column when reordering, reset it\n                    cellEl.style.minWidth = null;\n\n                    if (flex > 0) {\n                        // TODO: Figure out a better way of handling this, minWidth on the columns breaks the flexbox\n                        //  calculation compared to cells, making them misalign\n                        column.traverse(col => col.data.minWidth = null);\n                    }\n                }\n                // Normal case, set flex, width etc.\n                else {\n                    if (parseInt(column.minWidth) >= 0) {\n                        cellEl.style.minWidth = domMinWidth;\n                    }\n\n                    // Clear all the things we might have to set to correct cell widths\n                    cellEl.style.flex = cellEl.style.flexBasis = cellEl.style.width = '';\n\n                    if (column.flex) {\n                        // If column has children we need to give it\n                        // flex-shrink: 0, flex-basis: auto so that it always\n                        // shrinkwraps its children without shrinking\n                        if (!isNaN(parseInt(column.flex)) && column.children) {\n                            cellEl.style.flex = `${column.flex} 0 auto`;\n                        }\n                        else {\n                            cellEl.style.flex = column.flex;\n                        }\n                    }\n                    else if (parseInt(column.width) >= 0) {\n                        const parent = column.parent;\n\n                        // Only grid header bar has a notion of group headers\n                        // Column is a child of an unwidthed group. We have to use width\n                        // to stretch it.\n                        if (me.isHeader && !parent.isRoot && !parent.width) {\n                            cellEl.style.width = domWidth;\n                        }\n                        else {\n                            // https://app.assembla.com/spaces/bryntum/tickets/8041\n                            // Column header widths must be set using flex-basis.\n                            // Using width means that wide widths cause a flexed SubGrid\n                            // to bust the flex rules.\n                            // Note that grid in Grid#onColumnsResized and SubGrid#fixCellWidths,\n                            // cells MUST still be sized using width since rows\n                            // are absolutely positioned and will not cause the busting out\n                            // problem, and rows will not stretch to shrinkwrap the cells\n                            // unless they are widthed with width.\n                            cellEl.style.flexBasis = flexBasis;\n                        }\n                    }\n                }\n\n                if (column.height >= 0) {\n                    cellEl.style.height = DomHelper.setLength(column.height);\n                }\n            }\n        });\n\n        me.scrollable.element.classList.toggle('b-has-flex', hasFlex);\n    }\n\n    getLrPadding(cellEl) {\n        if (!this.cellLrPadding) {\n            const s = cellEl.ownerDocument.defaultView.getComputedStyle(cellEl);\n            this.cellLrPadding = parseInt(s.getPropertyValue('padding-left')) + parseInt(s.getPropertyValue('padding-right')) +\n                parseInt(s.getPropertyValue('border-left-width')) + parseInt(s.getPropertyValue('border-right-width'));\n        }\n        return this.cellLrPadding;\n    }\n\n    /**\n     * Get the header or footer cell element for the specified column.\n     * @param {String} columnId Column id\n     * @returns {HTMLElement} Header or footer element, depending on which subclass is in use.\n     * @private\n     */\n    getBarCellElement(columnId) {\n        return this.element.querySelector(`[data-column-id=\"${columnId}\"]`);\n    }\n}\n\n// Register this widget type with its Factory\nBar.initClass();\n","import TemplateHelper from '../../Core/helper/TemplateHelper.js';\nimport Bar from './Bar.js';\n//import styles from '../../../resources/sass/grid/view/footer.scss';\n\n/**\n * @module Grid/view/Footer\n */\n\n/**\n * Grid footer, used by Summary feature. You should not need to create instances manually.\n *\n * @extends Grid/view/Bar\n * @internal\n */\nexport default class Footer extends Bar {\n\n    static get $name() {\n        return 'Footer';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'gridfooter';\n    }\n\n    get subGrid() {\n        return this._subGrid;\n    }\n\n    set subGrid(subGrid) {\n        this._subGrid = this.owner = subGrid;\n    }\n\n    refreshContent() {\n        this.element.firstElementChild.innerHTML = this.contentTemplate();\n        this.fixFooterWidths();\n    }\n\n    onPaint({ firstPaint }) {\n        if (firstPaint) {\n            this.refreshContent();\n        }\n    }\n\n    template() {\n        const region = this.subGrid.region;\n\n        return TemplateHelper.tpl`\n            <div class=\"b-grid-footer-scroller b-grid-footer-scroller-${region}\" role=\"presentation\">\n                <div data-reference=\"footersElement\" class=\"b-grid-footers b-grid-footers-${region}\" data-region=\"${region}\" role=\"presentation\"></div>\n            </div>\n        `;\n    }\n\n    get overflowElement() {\n        return this.footersElement;\n    }\n\n    //region Getters\n\n    /**\n     * Get the footer cell element for the specified column.\n     * @param {String} columnId Column id\n     * @returns {HTMLElement} Footer cell element\n     */\n    getFooter(columnId) {\n        return this.getBarCellElement(columnId);\n    }\n\n    //endregion\n\n    /**\n     * Footer template. Iterates leaf columns to create content.\n     * Style not included because of CSP. Widths are fixed up in\n     * {@link #function-fixFooterWidths}\n     * @private\n     */\n    contentTemplate() {\n        const me = this;\n\n        return me.columns.visibleColumns.map(column => {\n            return TemplateHelper.tpl`\n                <div\n                    class=\"b-grid-footer ${column.align ? `b-grid-footer-align-${column.align}` : ''} ${column.cls || ''}\"\n                    data-column=\"${column.field || ''}\" data-column-id=\"${column.id}\" data-all-index=\"${column.allIndex}\"\n                    role=\"presentation\">\n                    ${column.footerText || ''}\n                </div>`;\n        }).join('');\n    }\n\n    /**\n     * Fix footer widths (flex or fixed width) after rendering. Not a part of template any longer because of CSP\n     * @private\n     */\n    fixFooterWidths() {\n        this.fixCellWidths();\n    }\n}\n\n// Register this widget type with its Factory\nFooter.initClass();\n","import Rectangle from '../../Core/helper/util/Rectangle.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport Row from './Row.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport ArrayHelper from '../../Core/helper/ArrayHelper.js';\nimport Location from '../util/Location.js';\n\n/**\n * @module Grid/row/RowManager\n */\n\n/**\n * Virtual representation of the grid, using {@link Grid.row.Row} to represent rows. Plugs into {@link Grid.view.Grid}\n * and exposes the following functions on grid itself:\n * * {@link #function-getRecordCoords()}\n * * {@link #function-getRowById()}\n * * {@link #function-getRow()}\n * * {@link #function-getRowFor()}\n * * {@link #function-getRowFromElement()}\n *\n * @example\n * let row = grid.getRowById(1);\n *\n * @plugin\n * @private\n */\nexport default class RowManager extends InstancePlugin {\n    //region Config\n\n    // Plugin configuration.\n    static get pluginConfig() {\n        return {\n            chain : [\n                'destroy'\n            ],\n            assign : [\n                'rowHeight', 'topRow', 'bottomRow', 'firstVisibleRow', 'lastVisibleRow', 'firstFullyVisibleRow', 'lastFullyVisibleRow',\n                'getRowById', 'getRecordCoords', 'getRow', 'getRowFor', 'getRowFromElement'\n            ]\n        };\n    }\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Number of rows to render above current viewport\n             * @config {Number}\n             * @default\n             */\n            prependRowBuffer : 5,\n\n            /**\n             * Number of rows to render below current viewport\n             * @config {Number}\n             * @default\n             */\n            appendRowBuffer : 5,\n\n            /**\n             * Default row height, assigned from Grid at construction (either from config\n             * {@link Grid.view.Grid#config-rowHeight} or CSS). Can be set from renderers\n             * @config {Number}\n             * @default\n             */\n            rowHeight : null,\n\n            /**\n             * Set to `true` to get a small performance boost in applications that uses fixed row height\n             * @config {Boolean}\n             */\n            fixedRowHeight : null,\n\n            autoHeight : false\n        };\n    }\n\n    static get properties() {\n        return {\n            idMap                : {},\n            // TODO: investigate if topIndex can to built away, since topRow is always first in array and has dataIndex??\n            topIndex             : 0,\n            lastScrollTop        : 0,\n            _rows                : [],\n            // Record id -> row height mapping\n            heightMap            : new Map(),\n            // Sum of entries in heightMap\n            totalKnownHeight     : 0,\n            // Will be calculated in `estimateTotalHeight()`, as totalKnownHeight + an estimate for unknown rows\n            _totalHeight         : 0,\n            // Average of the known heights, kept up to date when entries in the heightMap are updated\n            averageRowHeight     : 0,\n            scrollTargetRecordId : null,\n            refreshDetails       : {\n                topRowIndex : 0,\n                topRowTop   : 0\n            }\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    construct(config) {\n        config.grid._rowManager = this;\n\n        super.construct(config.grid, config);\n    }\n\n    // Chained to grids doDestroy\n    doDestroy() {\n        // To remove timeouts\n        this._rows.forEach(row => row.destroy());\n\n        super.doDestroy();\n    }\n\n    /**\n     * Initializes the RowManager with Rows to fit specified height.\n     * @param {Number} height\n     * @param {Boolean} [isRendering]\n     * @private\n     * @category Init\n     */\n    initWithHeight(height, isRendering = false) {\n        const me = this;\n\n        // no valid height, make room for all rows\n        if (me.autoHeight) {\n            height = me.store.allCount * me.preciseRowOffsetHeight;\n        }\n\n        me.viewHeight = height;\n        me.calculateRowCount(isRendering);\n\n        return height;\n    }\n\n    /**\n     * Releases all elements (not from dom), calculates how many are needed, creates those and renders\n     */\n    reinitialize(returnToTop = false) {\n        const me = this;\n\n        // Calculate and correct the amount of rows needed (without triggering render)\n        // Rows which are found to be surplus are destroyed.\n        me.calculateRowCount(false, true, true);\n\n        // If our row range is outside of the store's range, force a return to top\n        if (me.topIndex + me.rowCount - 1 > me.store.count) {\n            returnToTop = true;\n        }\n\n        const top = me.topRow && !returnToTop ? me.topRow.top : 0;\n\n        me.scrollTargetRecordId = null;\n\n        if (returnToTop) {\n            me.topIndex = me.lastScrollTop = 0;\n        }\n\n        const { topRow } = me;\n\n        if (topRow) {\n            // Ensure rendering from the topRow starts at the correct position\n            topRow.dataIndex = me.topIndex;\n            topRow.setTop(top, true);\n        }\n\n        // Need to estimate height in case we have Grid using autoHeight\n        me.estimateTotalHeight();\n\n        me.renderFromRow(topRow);\n    }\n\n    //endregion\n\n    //region Rows\n\n    /**\n     * Add or remove rows to fit row count\n     * @private\n     * @category Rows\n     */\n    matchRowCount(skipRender = false) {\n        const\n            me             = this,\n            { rows, grid } = me,\n            numRows        = rows.length,\n            delta          = numRows - me.rowCount;\n\n        if (delta) {\n            if (delta < 0) {\n                const newRows = [];\n\n                // add rows\n                for (let index = numRows, dataIndex = numRows ? rows[numRows - 1].dataIndex + 1 : 0; index < me.rowCount; index++, dataIndex++) {\n                    newRows.push(new Row({\n                        cls        : grid.rowCls,\n                        rowManager : me,\n                        grid,\n                        index,\n                        dataIndex\n                    }));\n                }\n                rows.push.apply(rows, newRows);\n                // and elements (by triggering event used by SubGrid to add elements)\n                me.trigger('addRows', { rows : newRows });\n\n                if (!skipRender) {\n                    // render\n                    me.renderFromRow(rows[Math.max(0, numRows - 1)]);\n                }\n            }\n            else {\n                // remove rows from bottom\n                const\n                    { focusedCell } = grid,\n                    rowActive       = focusedCell?.id != null && focusedCell?.cell?.contains(DomHelper.getActiveElement(grid)),\n                    removedRows     = rows.splice(numRows - delta, delta);\n\n                if (rowActive) {\n                    // All rows going: move focus up to header to avoid unwanted focusout events.\n                    if (delta === numRows) {\n                        grid.onFocusedRowDerender();\n                    }\n                    // Focus is in the zone that's being removed: move to new last row\n                    else if (me.getRowFor(focusedCell._record)?.index >= rows.length) {\n                        rows[rows.length - 1].cells[focusedCell.columnIndex].focus();\n                    }\n                }\n\n                // trigger event in case some feature needs to cleanup when removing (widget column might be interested)\n                me.trigger('removeRows', { rows : removedRows });\n\n                removedRows.forEach(row => row.destroy());\n                // no need to rerender or such when removing from bottom. all is good :)\n            }\n        }\n    }\n\n    /**\n     * Calculates how many rows fit in the available height (view height)\n     * @private\n     * @category Rows\n     */\n    calculateRowCount(skipMatchRowCount = false, allowRowCountShrink = true, skipRender = false) {\n        // TODO: replace prependRowBuffer, appendXX with bufferSize\n        const\n            me                = this,\n            { store }         = me,\n            visibleRowCount   = Math.ceil(me.viewHeight / me.minRowOffsetHeight), // Want whole rows\n            maxRenderRowCount = visibleRowCount + me.prependRowBuffer + me.appendRowBuffer;\n\n        // If RowManager is reinitialized in a hidden state the view might not have a height\n        if (!me.grid.columns?.count || isNaN(visibleRowCount)) {\n            me.rowCount = 0;\n            return 0;\n        }\n\n        // when for example jumping we do not want to remove excess rows,\n        // since we know they are needed at other scroll locations\n        if (maxRenderRowCount < me.rowCount && !allowRowCountShrink) {\n            return me.rowCount;\n        }\n\n        me.visibleRowCount = visibleRowCount;\n        me.rowCount = Math.min(store.count, maxRenderRowCount); // No need for more rows than data\n\n        // If the row count doesn't match the calculated, ensure it matches,\n        if (!skipMatchRowCount) {\n            if (me.rows && me.rowCount !== me.rows.length) {\n                me.matchRowCount(skipRender);\n                // Rows might be pointing to data indices no longer available (when resetting to top topRow is already\n                // adjusted, we don't need to take action here)\n                if (me.bottomRow?.dataIndex >= store.count && me.topRow.dataIndex !== 0) {\n                    const indexDelta = me.bottomRow.dataIndex - store.count + 1;\n                    for (const row of me.rows) {\n                        row.dataIndex -= indexDelta;\n                    }\n                    me.topIndex -= indexDelta;\n                }\n            }\n            else if (!me.rowCount) {\n                me.trigger('changeTotalHeight', { totalHeight : me.totalHeight });\n            }\n            me.grid.toggleEmptyText();\n        }\n\n        return me.rowCount;\n    }\n\n    removeAllRows() {\n        // remove rows from bottom\n        const\n            me         = this,\n            { topRow } = me,\n            result     = topRow ? (me.refreshDetails = {\n                topRowIndex : topRow.dataIndex,\n                topRowTop   : topRow.top\n            }) : me.refreshDetails,\n            removedRows = me.rows.slice();\n\n        // trigger event in case some feature needs to cleanup when removing (widget column might be interested)\n        me.trigger('removeRows', { rows : removedRows });\n\n        me.rows.forEach(row => row.destroy());\n        me.rows.length = 0;\n        me.idMap = {};\n\n        // We return a descriptor of the last rendered block before the remove.\n        // This is primarily for a full GridBase#renderContents to be able to perform a correct refresh.\n        return result;\n    }\n\n    setPosition(refreshDetails) {\n        // Sets up the rendering position for the next call to reinitialize\n        const\n            { topRow }                 = this,\n            { topRowIndex, topRowTop } = refreshDetails;\n\n        topRow.setTop(topRowTop);\n        topRow.dataIndex = topRowIndex;\n    }\n\n    //endregion\n\n    //region Rows - Getters\n\n    get store() {\n        return this.client.store;\n    }\n\n    /**\n     * Get all Rows\n     * @property {Grid.row.Row[]}\n     * @readonly\n     * @category Rows\n     */\n    get rows() {\n        return this._rows;\n    }\n\n    /**\n     * Get the Row at specified index. Returns `undefined` if the row index is not rendered.\n     * @param {Number} index\n     * @returns {Grid.row.Row}\n     * @category Rows\n     */\n    getRow(index) {\n        if (this.rowCount) {\n            return this.rows[index - this.topIndex];\n        }\n    }\n\n    /**\n     * Get Row for specified record id\n     * @param {Core.data.Model|String|Number} recordOrId Record id (or a record)\n     * @returns {Grid.row.Row|null} Found Row or null if record not rendered\n     * @category Rows\n     */\n    getRowById(recordOrId) {\n        if (recordOrId && recordOrId.isModel) {\n            recordOrId = recordOrId.id;\n        }\n\n        return this.idMap[recordOrId];\n    }\n\n    /**\n     * Get a Row from an HTMLElement\n     * @param {HTMLElement} element\n     * @returns {Grid.row.Row|null} Found Row or null if record not rendered\n     * @category Rows\n     */\n    getRowFromElement(element) {\n        element = element.closest('.b-grid-row');\n        return element && this.getRow(element.dataset.index);\n    }\n\n    /**\n     * Get the row at the specified Y coordinate, which is by default viewport-based.\n     * @param {Number} y The `Y` coordinate to find the Row for.\n     * @param {Boolean} [local=false] Pass `true` if the `Y` coordinate is local to the SubGrid's element.\n     * @returns {Grid.row.Row} Found Row or null if no row is rendered at that point.\n     */\n    getRowAt(y, local = false) {\n        // Make it local.\n        if (!local) {\n            // Because this is used with event Y positions which are integers, we must\n            // round the Rectangle to the closest integer.\n            y -= Rectangle.from(this.grid.bodyContainer, null, true).roundPx(1).top;\n\n            // Adjust for scrolling\n            y += this.grid.scrollable.y;\n        }\n        y = DomHelper.roundPx(y);\n\n        return this.rows.find(r => y >= r.top && y < r.bottom);\n    }\n\n    /**\n     * Get a Row for either a record, a record id or an HTMLElement\n     * @param {HTMLElement|Core.data.Model|String|Number} recordOrId Record or record id or HTMLElement\n     * @returns {Grid.row.Row} Found Row or null if record not rendered\n     * @category Rows\n     */\n    getRowFor(recordOrId) {\n        if (recordOrId instanceof HTMLElement) {\n            return this.getRowFromElement(recordOrId);\n        }\n        return this.getRowById(recordOrId);\n    }\n\n    /**\n     * Gets the Row following the specified Row (by index or object). Wraps around the end.\n     * @param {Number|Grid.row.Row} indexOrRow index or Row\n     * @returns {Grid.row.Row}\n     * @category Rows\n     */\n    getNextRow(indexOrRow) {\n        const index = typeof indexOrRow === 'number' ? indexOrRow : indexOrRow.index;\n        return this.getRow((index + 1) % this.rowCount);\n    }\n\n    /**\n     * Get the Row that is currently displayed at top.\n     * @property {Grid.row.Row}\n     * @readonly\n     * @category Rows\n     */\n    get topRow() {\n        return this.rows[0];\n    }\n\n    /**\n     * Get the Row currently displayed furthest down.\n     * @property {Grid.row.Row}\n     * @readonly\n     * @category Rows\n     */\n    get bottomRow() {\n        // TODO: remove when ticket on making sure rowCount is always up to date is fixed\n        const rowCount = Math.min(this.rowCount, this.store.count);\n\n        return this.rows[rowCount - 1];\n    }\n\n    /**\n     * Get the topmost visible Row\n     * @property {Grid.row.Row}\n     * @readonly\n     * @category Rows\n     */\n    get firstVisibleRow() {\n        // Ceil scroll position to make behavior consistent on a scaled display\n        return this.rows.find(r => r.bottom > Math.ceil(this.grid.scrollable.y));\n    }\n\n    get firstFullyVisibleRow() {\n        // Ceil scroll position to make behavior consistent on a scaled display\n        return this.rows.find(r => r.top >= Math.ceil(this.grid.scrollable.y));\n    }\n\n    /**\n     * Get the last visible Row\n     * @property {Grid.row.Row}\n     * @readonly\n     * @category Rows\n     */\n    get lastVisibleRow() {\n        const { grid } = this;\n\n        // We need the last row who's top is inside the scrolling viewport\n        return ArrayHelper.findLast(this.rows, r => r.top < grid.scrollable.y + grid.bodyHeight);\n    }\n\n    get lastFullyVisibleRow() {\n        const { grid } = this;\n\n        // We need the last row who's bottom is inside the scrolling viewport\n        return ArrayHelper.findLast(this.rows, r => r.bottom < grid.scrollable.y + grid.bodyHeight);\n    }\n\n    /**\n     * Calls offset() for each Row passing along offset parameter\n     * @param {Number} offset Pixels to translate Row elements.\n     * @private\n     * @category Rows\n     */\n    offsetRows(offset) {\n        if (offset !== 0) {\n            const\n                { rows }   = this,\n                { length } = rows;\n\n            for (let i = 0; i < length; i++) {\n                rows[i].offset(offset);\n            }\n        }\n\n        this.trigger('offsetRows', { offset });\n    }\n\n    //endregion\n\n    //region Row height\n\n    get prependBufferHeight() {\n        return this.prependRowBuffer * this.rowOffsetHeight;\n    }\n\n    get appendBufferHeight() {\n        return this.appendRowBuffer * this.rowOffsetHeight;\n    }\n\n    // TODO: should support setting rowHeight in em and then convert internally to pixels. 1em = font-size. Not needed for 1.0\n    /**\n     * Set a fixed row height (can still be overridden by renderers) or get configured row height. Setting refreshes all rows\n     * @type {Number}\n     * @on-owner\n     * @category Rows\n     */\n    get rowHeight() {\n        return this._rowHeight;\n    }\n\n    set rowHeight(height) {\n        const\n            me                       = this,\n            { grid, fixedRowHeight } = me,\n            oldHeight                = me.rowHeight;\n\n        // Do not force redraw if row height has not actually changed. Covered by GridState.t\n        if (oldHeight === height) {\n            return;\n        }\n\n        ObjectHelper.assertNumber(height, 'rowHeight');\n\n        if (height < 10) {\n            //<debug>\n            console.warn(`The rowHeight of ${height} was increased to 10 which is the minimum.`);\n            //</debug>\n            height = 10;\n        }\n\n        me.trigger('beforeRowHeight', { height });\n\n        me.minRowHeight = me._rowHeight = height;\n\n        if (fixedRowHeight) {\n            me.averageRowHeight = height;\n        }\n\n        if (me.rows.length) {\n            const\n                oldY       = grid.scrollable.y,\n                topRow     = me.getRowAt(oldY, true),\n                // When changing rowHeight in a scrolled grid, there might no longer be a row at oldY\n                edgeOffset = topRow ? topRow.top - oldY : 0;\n\n            let average, oldAverage;\n\n            // When using fixedRowHeight there is no need to update an average\n            if (fixedRowHeight) {\n                average = height;\n                oldAverage = oldHeight;\n            }\n            else {\n                oldAverage = average = me.averageRowHeight;\n\n                me.clearKnownHeights();\n\n                // Scale the average height in proportion to the row height change\n                average *= height / oldHeight;\n            }\n\n            // Adjust number of rows, since it is only allowed to shrink in refresh()\n            me.calculateRowCount(false, true, true);\n\n            // Reposition the top row since it is used to position the rest\n            me.topRow.setTop(me.topRow.dataIndex * (average + grid._rowBorderHeight), true);\n\n            me.refresh();\n\n            const newY = oldY * (average / oldAverage);\n\n            // Scroll top row to the same position.\n            if (newY !== oldY) {\n                grid.scrollRowIntoView(topRow.id, {\n                    block : 'start',\n                    edgeOffset\n                });\n            }\n        }\n\n        // Note that `rowRowHeight` below is triggered in Row.js, but it needs to be documented here since it is\n        // triggered on the RowManager\n        /**\n         * Triggered when an individual rendered {@link Grid.row.Row} has its height changed.\n         * @event rowRowHeight\n         * @param {Grid.row.RowManager} source The firing RowManager instance.\n         * @param {Grid.row.Row} row The row which is changing.\n         * @param {Core.data.Model} record The row's record.\n         * @param {Number} height The row's new height.\n         * @param {Number} oldHeight The row's old height.\n         * @private\n         */\n        /**\n         * Triggered when the owning Grid's {@link Grid.view.Grid#property-rowHeight} is changed.\n         * @event rowHeight\n         * @param {Grid.row.RowManager} source The firing RowManager instance.\n         * @param {Number} height The RowManager's new default row height.\n         * @param {Number} oldHeight  The RowManager's old default row height.\n         * @private\n         */\n        me.trigger('rowHeight', { height, oldHeight });\n    }\n\n    /**\n     * Get actually used row height, which includes any border and might be an average if using variable row height.\n     * @property {Number}\n     */\n    get rowOffsetHeight() {\n        return Math.floor(this.preciseRowOffsetHeight);\n    }\n\n    get preciseRowOffsetHeight() {\n        return (this.averageRowHeight || this._rowHeight) + this.grid._rowBorderHeight;\n    }\n\n    get minRowOffsetHeight() {\n        return (this.minRowHeight || this._rowHeight) + this.grid._rowBorderHeight;\n    }\n\n    /*\n    * How store CRUD affects the height map:\n    *\n    * | Operation | Result                            |\n    * |-----------|-----------------------------------|\n    * | add       | No. Appears on render             |\n    * | insert    | No. Appears on render             |\n    * | remove    | Remove entry                      |\n    * | removeAll | Clear                             |\n    * | update    | No                                |\n    * | replace   | Height might differ, remove entry |\n    * | move      | No                                |\n    * | filter    | No                                |\n    * | sort      | No                                |\n    * | group     | No                                |\n    * | dataset   | Clear                             |\n    *\n    * The above is handled in GridBase\n    */\n\n    /**\n     * Returns `true` if all rows have a known height. They do if all rows are visited, or if RowManager is configured\n     * with `fixedRowHeight`. If so, all tops can be calculated exactly, no guessing needed\n     * @property {Boolean}\n     * @private\n     */\n    get allHeightsKnown() {\n        return this.fixedRowHeight || this.heightMap.size >= this.store.count;\n    }\n\n    /**\n     * Store supplied `height` using `id` as key in the height map. Called by `Row` when it gets its height.\n     * Keeps `averageRowHeight` and `totalKnownHeight` up to date. Ignored when configured with `fixedRowHeight`\n     * @param {String|Number} id\n     * @param {Number} height\n     * @internal\n     */\n    storeKnownHeight(id, height) {\n        const\n            me = this,\n            { heightMap } = me;\n\n        if (!me.fixedRowHeight) {\n            // Decrease know height with old value\n            if (heightMap.has(id)) {\n                me.totalKnownHeight -= heightMap.get(id);\n            }\n\n            // Height here is \"clientHeight\"\n            heightMap.set(id, height);\n\n            // And increase with new\n            me.totalKnownHeight += height;\n\n            if (height < me.minRowHeight) {\n                me.minRowHeight = height;\n            }\n\n            me.averageRowHeight = me.totalKnownHeight / heightMap.size;\n        }\n    }\n\n    /**\n     * Get the known or estimated offset height for the specified record id\n     * @param {Core.data.Model} record\n     * @returns {Number}\n     * @private\n     */\n    getOffsetHeight(record) {\n        const me = this;\n        // record may not be there if height gets from row with already removed from the store record\n        return ((record && me.heightMap.get(record.id)) || (record && me.grid.getRowHeight(record)) || me.averageRowHeight || me.rowHeight) + me.grid._rowBorderHeight;\n    }\n\n    /**\n     * Invalidate cached height for a record. Removing it from `totalKnownHeight` and factoring it out of\n     * `averageRowHeight`.\n     * @param {Core.data.Model|Core.data.Model[]} records\n     */\n    invalidateKnownHeight(records) {\n        const me = this;\n\n        if (!me.fixedRowHeight) {\n            const { heightMap } = me;\n\n            records = ArrayHelper.asArray(records);\n\n            records.forEach(record => {\n                if (record) {\n                    if (heightMap.has(record.id)) {\n                        // Known height decreases when invalidating\n                        me.totalKnownHeight -= heightMap.get(record.id);\n\n                        heightMap.delete(record.id);\n                    }\n                }\n            });\n\n            me.averageRowHeight = me.totalKnownHeight / heightMap.size;\n        }\n    }\n\n    /**\n     * Invalidates all cached height and resets `averageRowHeight` and `totalKnownHeight`\n     */\n    clearKnownHeights() {\n        this.heightMap.clear();\n        this.averageRowHeight = this.totalKnownHeight = 0;\n    }\n\n    /**\n     * Calculates a row top from its data index. Uses known values from the height map, unknown are substituted with\n     * the average row height. When configured with `fixedRowHeight`, it will always calculate a correct value\n     * @param {Number} index Index in store\n     * @private\n     */\n    calculateTop(index) {\n        // When using fixed row height, life is easy\n        if (this.fixedRowHeight) {\n            return index * this.rowOffsetHeight;\n        }\n\n        const { store } = this;\n\n        let top = 0;\n\n        // When not using fixed row height, we make an educated guess at the top. The more rows have been visited, the\n        // more correct the guess is (fully correct if all rows visited)\n        for (let i = 0; i < index; i++) {\n            const record = store.getAt(i);\n            top += this.getOffsetHeight(record);\n        }\n\n        return Math.floor(top);\n    }\n\n    //endregion\n\n    //region Calculations\n\n    /**\n     * Returns top and bottom for rendered row or estimated coordinates for unrendered.\n     * @param {Core.data.Model|String|Number} recordOrId Record or record id\n     * @param {Boolean} [local] Pass true to get relative record coordinates\n     * @param {Boolean} [roughly] Pass true to allow a less exact but cheaper estimate\n     * @returns {Core.helper.util.Rectangle} Record bounds with format { x, y, width, height, bottom, right }\n     * @category Calculations\n     */\n    getRecordCoords(recordOrId, local = false, roughly = false) {\n        const\n            me  = this,\n            row = me.getRowById(recordOrId);\n\n        let scrollingViewport = me.client._bodyRectangle;\n\n        // _bodyRectangle is not updated on page/containing element scroll etc. Need to make sure it is correct in case\n        // that has happend. This if-statement should be removed when fixing\n        // https://app.assembla.com/spaces/bryntum/tickets/6587-cached-_bodyrectangle-should-be-updated-on--quot-external-quot--scroll/details\n        if (!local) {\n            scrollingViewport = me.client.refreshBodyRectangle();\n        }\n        // Rendered? Then we know position for certain\n        if (row) {\n            return new Rectangle(\n                scrollingViewport.x,\n                local ? Math.round(row.top) : Math.round(row.top + scrollingViewport.y - me.client.scrollable.y),\n                scrollingViewport.width,\n                row.offsetHeight\n            );\n        }\n\n        return me.getRecordCoordsByIndex(me.store.indexOf(recordOrId), local, roughly);\n    }\n\n    /**\n     * Returns estimated top and bottom coordinates for specified row.\n     * @param {Number} recordIndex Record index\n     * @param {Boolean} [local]\n     * @returns {Core.helper.util.Rectangle} Estimated record bounds with format { x, y, width, height, bottom, right }\n     * @category Calculations\n     */\n    getRecordCoordsByIndex(recordIndex, local = false, roughly = false) {\n        const\n            me                    = this,\n            { topRow, bottomRow } = me,\n            scrollingViewport     = me.client._bodyRectangle,\n            { id }                = me.store.getAt(recordIndex),\n            // Not using rowOffsetHeight since it floors the value and that rounding might give big errors far down\n            height                = me.preciseRowOffsetHeight,\n            currentTopIndex       = topRow.dataIndex,\n            currentBottomIndex    = bottomRow.dataIndex,\n            // Instead of estimating top from the very top, use closest known coordinate. Makes sure a coordinate is not\n            // estimated on wrong side of rendered rows, needed to correctly draw dependencies where one event is located\n            // on a unrendered row\n            calculateFrom         =\n                // bottomRow is closest, calculate from it\n                recordIndex > currentBottomIndex\n                    ? { index : recordIndex - currentBottomIndex - 1, y : bottomRow.bottom, from : 'bottomRow' }\n                    //  closer to topRow than 0, use topRow\n                    : recordIndex > currentTopIndex / 2\n                        ? { index : recordIndex - currentTopIndex, y : topRow.top, from : 'topRow' }\n                        // closer to the very top, use it\n                        : { index : recordIndex, y : 0, from : 'top' },\n            top                   = me.allHeightsKnown && !roughly\n                // All heights are known (all rows visited or fixed row height), get actual top coord\n                ? me.calculateTop(recordIndex)\n                // Otherwise estimate\n                : Math.floor(calculateFrom.y + calculateFrom.index * height),\n            result                = new Rectangle(\n                scrollingViewport.x,\n                local ? top : top + scrollingViewport.y - me.client.scrollable.y,\n                scrollingViewport.width,\n                // Either known height or average\n                Math.floor(me.heightMap.get(id) || height)\n            );\n\n        // Signal that it's not based on an element, so is only approximate.\n        // Grid.scrollRowIntoView will have to go round again using the block options below to ensure it's correct.\n        result.virtual = true;\n\n        // When the block becomes visible, scroll it to the logical position using the scrollIntoView's block\n        // option. If it's above, use block: 'start', if below, use block: 'end'.\n        result.block = result.bottom < scrollingViewport.y ? 'start' : (result.y > scrollingViewport.bottom ? 'end' : 'nearest');\n\n        return result;\n    }\n\n    /**\n     * Total estimated grid height (used for scroller)\n     * @property {Number}\n     * @readonly\n     * @category Calculations\n     */\n    get totalHeight() {\n        return this._totalHeight;\n    }\n\n    //endregion\n\n    //region Iteration etc.\n\n    /**\n     * Calls a function for each Row\n     * @param {Function} fn Function that will be called with Row as first parameter\n     * @category Iteration\n     */\n    forEach(fn) {\n        this.rows.forEach(fn);\n    }\n\n    /**\n     * Iterator that allows you to do for (let row of rowManager)\n     * @category Iteration\n     */\n    [Symbol.iterator]() {\n        return this.rows[Symbol.iterator]();\n    }\n\n    //endregion\n\n    //region Scrolling & rendering\n\n    /**\n     * Refresh a single cell.\n     * @param {Core.data.Model} record Record for row holding the cell that should be updated\n     * @param {String|Number} columnId Column id to identify the cell within the row\n     * @returns {Boolean} Returns `true` if cell was found and refreshed, `false` if not\n     */\n    refreshCell(record, columnId) {\n        const cellContext = new Location({ grid : this.grid, record, columnId });\n\n        return Boolean(cellContext.cell && cellContext.row.renderCell(cellContext));\n    }\n\n    /**\n     * Renders from the top of the grid, also resetting scroll to top. Used for example when collapsing all groups.\n     * @category Scrolling & rendering\n     */\n    returnToTop() {\n        const me = this;\n\n        me.topIndex = 0;\n        me.lastScrollTop = 0;\n\n        if (me.topRow) {\n            me.topRow.dataIndex = 0;\n\n            // Force the top row to the top of the scroll range\n            me.topRow.setTop(0, true);\n        }\n\n        me.refresh();\n\n        // Rows rendered from top, make sure grid is scrolled to top also\n        me.grid.scrollable.y = 0;\n    }\n\n    /**\n     * Renders from specified records row and down (used for example when collapsing a group, does not affect rows above).\n     * @param {Core.data.Model} record Record of first row to render\n     * @category Scrolling & rendering\n     */\n    renderFromRecord(record) {\n        const row = this.getRowById(record.id);\n        if (row) {\n            this.renderFromRow(row);\n        }\n    }\n\n    /**\n     * Renders from specified row and down (used for example when collapsing a group, does not affect rows above).\n     * @param {Grid.row.Row} fromRow First row to render\n     * @category Scrolling & rendering\n     */\n    renderFromRow(fromRow = null) {\n        const\n            me              = this,\n            { rows, store } = me,\n            storeCount      = store.count;\n\n        // Calculate row count, adding rows if needed, but do not rerender - we are going to do that below.\n        // Bail out if no rows. Allow removing rows if we have more than store have rows\n        if (me.calculateRowCount(false, storeCount < rows.length, true) === 0) {\n            // Reestimate total height. Possible if all tasks deleted\n            me.estimateTotalHeight(true);\n            return;\n        }\n\n        // render from this row\n        const fromRowIndex = fromRow ? rows.indexOf(fromRow) : 0;\n        // starting either from its specified dataIndex or from its index (happens on first render, no dataIndex yet)\n        let dataIndex = fromRow ? fromRow.dataIndex : rows[0].dataIndex;\n        const\n            // amount of records after this one in store\n            recordsAfter = storeCount - dataIndex - 1,\n            // render to this row, either the last row or the row which will hold the last record available\n            toRowIndex   = Math.min(rows.length - 1, fromRowIndex + recordsAfter);\n        let\n            // amount of rows which wont be rendered below last record (if we have fewer records than topRow + row count)\n            leftOverCount = rows.length - toRowIndex - 1,\n            // Start with top correctly just below the previous row's bottom\n            top           = fromRowIndex > 0 ? rows[fromRowIndex - 1].bottom : rows[fromRowIndex].top,\n            row;\n\n        // _rows array is ordered in display order, just iterate to the end\n        for (let i = fromRowIndex; i <= toRowIndex; i++) {\n            row = rows[i];\n            // Needed in scheduler when translating events, happens before render\n            row.dataIndex = dataIndex;\n            // Silent translation, render will update contents anyway\n            row.setTop(top, true);\n            row.render(dataIndex, store.getAt(dataIndex++), false);\n            top += row.offsetHeight;\n        }\n\n        // if number for records to display has decreased, for example by collapsing a node, we might get unused rows\n        // below bottom. move those to top to not have unused rows laying around\n        while (leftOverCount-- > 0) {\n            me.displayRecordAtTop();\n        }\n\n        // Renderers might yield a lower row height than the configured, leaving blank space at bottom\n        if (me.bottomRow.bottom < me.viewHeight) {\n            me.calculateRowCount();\n        }\n\n        // Reestimate total height\n        me.estimateTotalHeight(true);\n\n        me.trigger('renderDone');\n    }\n\n    /**\n     * Renders the passed array (or [Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set)) of {@link Grid.row.Row rows}\n     * @param {Grid.row.Row[]|Set} rows The rows to render\n     * @category Scrolling & rendering\n     */\n    renderRows(rows) {\n        let oldHeight,\n            heightChanged = false;\n\n        rows = Array.from(rows);\n\n        // Sort topmost row first\n        rows.sort((a, b) => a.dataIndex - b.dataIndex);\n\n        // Render the requested rows.\n        for (const row of rows) {\n            oldHeight = row.height;\n\n            // Pass updatingSingleRow as false, so that it does not shuffle following\n            // rows downwards on each render. We do that once here after the rows are all refreshed.\n            row.render(null, null, false);\n            heightChanged |= row.height !== oldHeight;\n        }\n\n        // If this caused a height change, shuffle following rows.\n        if (heightChanged) {\n            this.translateFromRow(rows[0]);\n        }\n\n        this.trigger('renderDone');\n    }\n\n    /**\n     * Translates all rows after the specified row. Used when a single rows height is changed and the others should\n     * rearrange. (Called from Row#render)\n     * @param {Grid.row.Row} fromRow\n     * @private\n     * @category Scrolling & rendering\n     */\n    translateFromRow(fromRow, batch = false) {\n        const me = this;\n\n        let top = fromRow.bottom,\n            row, index;\n\n        for (index = fromRow.dataIndex + 1, row = me.getRow(index); row; row = me.getRow(++index)) {\n            top = row.translate(top);\n        }\n\n        // Reestimate total height\n        if (!batch) {\n            me.estimateTotalHeight(true);\n        }\n    }\n\n    /**\n     * Rerender all rows\n     * @category Scrolling & rendering\n     */\n    refresh() {\n        const\n            me         = this,\n            { topRow } = me;\n\n        // too early\n        if (!topRow || me.grid.refreshSuspended) {\n            return;\n        }\n\n        me.idMap = {};\n\n        me.renderFromRow(topRow);\n\n        me.trigger('refresh');\n    }\n\n    /**\n     * Makes sure that specified record is displayed in view\n     * @param newScrollTop Top of visible section\n     * @param [forceRecordIndex] Index of record to display at center\n     * @private\n     * @category Scrolling & rendering\n     */\n    jumpToPosition(newScrollTop, forceRecordIndex) {\n        // There are two very different requirements here.\n        // If there is a forceRecordIndex, that takes precedence to get it into the center of the\n        // viewport, and wherever we render the calculated row block, we may then *adjust the scrollTop*\n        // to get that row to the center.\n        //\n        // If there's no forceRecordIndex, then the scroll position is the primary objective and\n        // we must render what we calculate to be correct at that viewport position.\n\n        const\n            me                    = this,\n            { store, heightMap }  = me,\n            storeCount            = store.count;\n\n        if (me.allHeightsKnown && !me.fixedRowHeight) {\n            const\n                top    = newScrollTop - me.prependBufferHeight,\n                border = me.grid._rowBorderHeight;\n\n            let accumulated = 0,\n                targetIndex = 0;\n\n            while (accumulated < top) {\n                const record = store.getAt(targetIndex);\n\n                accumulated += heightMap.get(record.id) + border;\n\n                targetIndex++;\n            }\n\n            const startIndex = Math.max(Math.min(targetIndex, storeCount - me.rowCount), 0);\n\n            me.lastScrollTop = newScrollTop;\n            me.topRow.dataIndex = me.topIndex = startIndex;\n\n            me.topRow.setTop(me.calculateTop(startIndex), false);\n\n            // render entire buffer\n            me.refresh();\n        }\n        else {\n            const\n                rowHeight      = me.preciseRowOffsetHeight,\n                // Calculate index of the top of the rendered block.\n                // If we are targeting the scrollTop, this will be the top index at the scrollTop minus prepend count.\n                // If we are targeting a recordIndex, this will attempt to place that in the center of the rendered block.\n                targetIndex    = forceRecordIndex == null ? Math.floor(newScrollTop / rowHeight) - me.prependRowBuffer : forceRecordIndex - Math.floor(me.rowCount / 2),\n                startIndex     = Math.max(Math.min(targetIndex, storeCount - me.rowCount), 0),\n                viewportTop    = me.client.scrollable.y,\n                viewportBottom = Math.min(me.client._bodyRectangle.height + viewportTop + me.appendBufferHeight, me.totalHeight);\n\n            me.lastScrollTop = newScrollTop;\n            me.topRow.dataIndex = me.topIndex = startIndex;\n\n            me.topRow.setTop(Math.floor(startIndex * rowHeight), false);\n\n            // render entire buffer\n            me.refresh();\n\n            // TODO: It is likely the approach below will be needed for scrolling in opposite direction also, although no\n            //   problem encountered yet\n\n            // Not filled all the way down?\n            if (me.bottomRow.bottom < viewportBottom) {\n                // Might have jumped into a section of low heights. Needs to be done after the refresh, since heights\n                // are not known before it\n                me.calculateRowCount(false, false, false);\n\n                // Fill with available rows (might be available above buffer because of var row height), stop if we run out of records :)\n                while (me.bottomRow.bottom < viewportBottom && me._rows[me.prependRowBuffer].top < viewportTop && me.bottomRow.dataIndex < storeCount - 1) {\n                    me.displayRecordAtBottom();\n                }\n\n                // TODO: Block below was not needed for current tests, but if row height in one block is enough smaller\n                //  than average row height then we will need to add more rows\n\n                // Still not filled all the way down? Need more rows\n                // if (me.bottomRow.bottom < viewportBottom) {\n                //     //const localAverage = blockHeight / me.rowCount;\n                //     while (me.bottomRow.bottom < viewportBottom) {\n                //        me.addRecordAtBottom();\n                //     }\n                // }\n            }\n\n            me.estimateTotalHeight();\n        }\n\n        // If the row index is our priority, then scroll it into the center\n        if (forceRecordIndex != null) {\n            const\n                { scrollable } = me.grid,\n                targetRow      = me.getRow(forceRecordIndex),\n                // When coming from a block of high rowHeights to one with much lower we might still miss the target...\n                // TODO: Jump again in these cases?\n                rowCenter      = targetRow && Rectangle.from(targetRow._elementsArray[0]).center.y,\n                viewportCenter = scrollable.viewport.center.y;\n\n            // Scroll the targetRow into the center of the viewport\n            if (targetRow) {\n                scrollable.y = newScrollTop = Math.floor(scrollable.y + (rowCenter - viewportCenter));\n            }\n        }\n\n        return newScrollTop;\n    }\n\n    /**\n     * Jumps to a position if it is far enough from current position. Otherwise does nothing.\n     * @private\n     * @category Scrolling & rendering\n     */\n    warpIfNeeded(newScrollTop) {\n        const\n            me     = this,\n            result = { newScrollTop, deltaTop : newScrollTop - me.lastScrollTop };\n\n        // if gap to fill is large enough, better to jump there than to fill row by row\n        if (Math.abs(result.deltaTop) > (me.rowCount * me.rowOffsetHeight) * 3) {\n            // no specific record targeted\n            let index;\n\n            // Specific record specified as target of scroll?\n            if (me.scrollTargetRecordId) {\n                index = me.store.indexOf(me.scrollTargetRecordId);\n\n                // since scroll is happening async record might have been removed after requesting scroll,\n                // in that case we rely on calculated index (as when scrolling without target)\n            }\n\n            // We are jumping, so the focused row will derender\n            me.grid.onFocusedRowDerender();\n\n            // perform the jump and return results\n            result.newScrollTop = me.jumpToPosition(newScrollTop, index);\n            result.deltaTop = 0; // no extra filling needed\n        }\n\n        return result;\n    }\n\n    /**\n     * Handles virtual rendering (only visible rows + buffer are in dom) for rows\n     * @param {Number} newScrollTop The `Y` scroll position for which to render rows.\n     * @param {Boolean} [force=false] Pass `true` to update the rendered row block even if the scroll position has not changed.\n     * @returns {Number} Adjusted height required to fit rows\n     * @private\n     * @category Scrolling & rendering\n     */\n    updateRenderedRows(newScrollTop, force, ignoreError = false) {\n        const\n            me         = this,\n            clientRect = me.client._bodyRectangle;\n\n        // Might be triggered after removing all records, should not crash\n        if (me.rowCount === 0) {\n            return 0;\n        }\n\n        let result = me.totalHeight;\n\n        if (\n            force ||\n            // Only react if we have scrolled by one row or more\n            Math.abs(newScrollTop - me.lastScrollTop) >= me.rowOffsetHeight ||\n            // or if we have a gap at top/bottom (#9375)\n            me.topRow.top > newScrollTop ||\n            me.bottomRow.bottom < newScrollTop + clientRect.height\n        ) {\n            // If scrolled by a large amount, jump instead of rendering each row\n            const posInfo = me.warpIfNeeded(newScrollTop);\n\n            me.scrollTargetRecordId = null;\n\n            // Cache the last correct render scrollTop before fill.\n            // it can be adjusted to hide row position corrections.\n            me.lastScrollTop = posInfo.newScrollTop;\n\n            if (posInfo.deltaTop > 0) {\n                // Scrolling down\n                me.fillBelow(posInfo.newScrollTop);\n            }\n            else if (posInfo.deltaTop < 0) {\n                // Scrolling up\n                me.fillAbove(posInfo.newScrollTop);\n            }\n\n            if (!me.fixedRowHeight && !ignoreError) {\n                me.correctError(posInfo, clientRect, newScrollTop);\n            }\n\n            // Calculate the new height based on new content\n            result = me.estimateTotalHeight();\n        }\n\n        return result;\n    }\n\n    correctError(posInfo, clientRect, newScrollTop) {\n        const me = this;\n\n        let error = 0;\n\n        // TODO: Merge with else, does the same calculation\n        // When we transition from not knowing all heights to doing so, the old estimate will likely have positioned\n        // rows a bit off. Compensate for that here.\n        if (me.allHeightsKnown) {\n            error = me.topRow.top - me.calculateTop(me.topRow.dataIndex);\n        }\n        // If it's a temporary scroll, we can be told to ignore the drift.\n        // Apart from that, we must correct keep the rendered block position correct.\n        // Otherwise, when rolling upwards after a teleport, we may not be able to reach\n        // the top. Some rows may end up at -ve positions.\n        else {\n            // Only correct the rendered block position if we are in danger of running out of scroll space.\n            // That is if we are getting towards the top or bottom of the scroll range.\n            if (\n                // Scrolling up within top zone\n                (posInfo.deltaTop < 0 && newScrollTop < clientRect.height * 2) ||\n                // Scrolling down within bottom zone\n                (posInfo.deltaTop > 0 && newScrollTop > me.totalHeight - clientRect.height * 2 - 3)\n            ) {\n                // TODO: Calc could be eased more, using distance left to have less effect the further away from top/bottom\n                error = me.topRow.top - me.calculateTop(me.topRow.dataIndex); //me.topIndex * me.rowOffsetHeight;\n            }\n        }\n\n        if (error) {\n            // Correct the rendered block position if it's not at the calculated position.\n            // Keep the visual position correct by adjusting the scrollTop by the same amount.\n            // When variable row heights are used, this will keep the rendered block top correct.\n            me.offsetRows(-error);\n            me.grid.scrollable.y = me.lastScrollTop = me.grid.scrollable.y - error;\n        }\n    }\n\n    /**\n     * Moves as many rows from the bottom to the top that are needed to fill to current scroll pos.\n     * @param newTop Scroll position\n     * @private\n     * @category Scrolling & rendering\n     */\n    fillAbove(newTop) {\n        const\n            me         = this,\n            fillHeight = newTop - me.topRow.top - me.prependBufferHeight;\n\n        let accumulatedHeight = 0;\n\n        while (accumulatedHeight > fillHeight && me.topIndex > 0) {\n            // We want to show prev record at top of rows\n            accumulatedHeight -= me.displayRecordAtTop();\n        }\n\n        me.trigger('renderDone');\n    }\n\n    /**\n     * Moves as many rows from the top to the bottom that are needed to fill to current scroll pos.\n     * @param newTop Scroll position\n     * @private\n     * @category Scrolling & rendering\n     */\n    fillBelow(newTop) {\n        const\n            me          = this,\n            fillHeight  = newTop - me.topRow.top - me.prependBufferHeight,\n            recordCount = me.store.count,\n            rowCount    = me.rowCount;\n\n        let accumulatedHeight = 0;\n\n        // Repeat until we have filled empty height\n        while (\n            accumulatedHeight < fillHeight &&         // fill empty height\n            me.topIndex + rowCount < recordCount &&   // as long as we have records left\n            me.topRow.top + me.topRow.offsetHeight < newTop // and do not move top row fully into view (can happen with var row height)\n        ) {\n            // We want to show next record at bottom of rows\n            accumulatedHeight += me.displayRecordAtBottom();\n        }\n\n        me.trigger('renderDone');\n    }\n\n    /**\n     * Estimates height needed to fit all rows, based on average row height. Also offsets rows if needed to not be above\n     * the reachable area of the view.\n     * @param {Boolean} [immediate] Specify true to pass the `immediate` flag on to any listeners (probably only Grid\n     * cares. Used to bypass buffered element resize)\n     * @returns {Number}\n     * @private\n     * @category Scrolling & rendering\n     */\n    estimateTotalHeight(immediate = false) {\n        const me = this;\n\n        if (me.grid.renderingRows) {\n            return;\n        }\n\n        const\n            recordCount   = me.store.count,\n            unknownCount  = recordCount - me.heightMap.size,\n            { bottomRow } = me;\n\n        let estimate;\n\n        // No need to estimate when using fixed row height\n        if (me.fixedRowHeight) {\n            estimate = recordCount * me.rowOffsetHeight;\n        }\n        else {\n            estimate =\n                // Known height, from entries in heightMap\n                me.totalKnownHeight +\n                // Those heights are \"clientHeights\", estimate needs to include borders\n                me.heightMap.size * me.grid._rowBorderHeight +\n                // Add estimate for rows with unknown height\n                unknownCount * me.preciseRowOffsetHeight;\n\n            // No bottomRow yet if estimating initial height in autoHeight grid\n            if (bottomRow && unknownCount) {\n                const bottom = bottomRow.bottom;\n\n                // Too low estimate or reached the end with scroll left, adjust to fit current bottom\n                if (bottom > estimate || (me.topIndex + me.rowCount >= recordCount && estimate > bottom && bottom > 0)) {\n                    estimate = bottom;\n\n                    // estimate all the way down\n                    if (bottomRow.dataIndex < recordCount - 1) {\n                        estimate += (recordCount - 1 - bottomRow.dataIndex) * me.preciseRowOffsetHeight;\n                    }\n                }\n            }\n\n            estimate = Math.floor(estimate);\n        }\n\n        if (estimate !== me.totalHeight) {\n            if (me.trigger('changeTotalHeight', { totalHeight : estimate, immediate }) !== false) {\n                me._totalHeight = estimate;\n            }\n        }\n\n        return estimate;\n    }\n\n    /**\n     * Moves a row from bottom to top and renders the corresponding record to it.\n     * @returns {Number} New row height\n     * @private\n     * @category Scrolling & rendering\n     */\n    displayRecordAtTop() {\n        const\n            me           = this,\n            { grid }     = me,\n            recordIndex  = me.topIndex - 1,\n            record       = me.store.getAt(recordIndex),\n            // Row currently rendered at the bottom, the row we want to move\n            bottomRow    = me.bottomRow,\n            bottomRowTop = bottomRow.top;\n\n        me.trigger('beforeTranslateRow', {\n            row       : bottomRow,\n            newRecord : record\n        });\n\n        // If focused cell is being scrolled off...\n        if (bottomRow.dataIndex === grid.focusedCell?.rowIndex) {\n            grid.onFocusedRowDerender();\n        }\n\n        // estimated top, for rendering that depends on having top\n        bottomRow._top = me.topRow.top - me.getOffsetHeight(record);\n        // if configured with fixed row height, it will be the correct value\n        bottomRow.estimatedTop = !me.fixedRowHeight;\n\n        // Render row\n        bottomRow.render(recordIndex, record, false);\n\n        // Move it to top. Restore top so that the setter won't reject non-change\n        // if the estimate happened to be correct.\n        bottomRow._top = bottomRowTop;\n        bottomRow.setBottom(me.topRow.top);\n        bottomRow.estimatedTop = false;\n\n        // Prev row is now at top\n        me.topIndex--;\n\n        // move to start of array (bottomRow becomes topRow)\n        me._rows.unshift(me._rows.pop());\n\n        return bottomRow.offsetHeight;\n    }\n\n    /**\n     * Moves a row from top to bottom and renders the corresponding record to it.\n     * @returns {Number} New row height\n     * @private\n     * @category Scrolling & rendering\n     */\n    displayRecordAtBottom() {\n        const\n            me          = this,\n            { grid }    = me,\n            recordIndex = me.topIndex + me.rowCount,\n            record      = me.store.getAt(recordIndex),\n            // Row currently rendered on the top, the row we want to move\n            topRow      = me.topRow;\n\n        me.trigger('beforeTranslateRow', {\n            row       : topRow,\n            newRecord : record\n        });\n\n        // If focused cell is being scrolled off...\n        if (topRow.dataIndex === grid.focusedCell?.rowIndex) {\n            grid.onFocusedRowDerender();\n        }\n\n        topRow.dataIndex = recordIndex;\n\n        // Move it to bottom\n        topRow.setTop(me.bottomRow.bottom);\n        // Render row\n        topRow.render(recordIndex, record, false);\n\n        // Next row is now at top\n        me.topIndex++;\n\n        // move to end of array (topRow becomes bottomRow)\n        me._rows.push(me._rows.shift());\n\n        return topRow.offsetHeight;\n    }\n\n    //endregion\n}\n\nRowManager.featureClass = '';\n","import Scroller from '../../Core/helper/util/Scroller.js';\n\n/**\n * @module Grid/util/GridScroller\n */\n\nconst xAxis = {\n    x : 1\n};\n\n/**\n * A Scroller subclass which handles scrolling in a grid.\n *\n * If the grid has no parallel scrolling grids (No locked columns), then this functions\n * transparently as a Scroller.\n *\n * If there are locked columns, then scrolling to an _element_ will invoke the scroller\n * of the subgrid which contains that element.\n * @internal\n */\nexport default class GridScroller extends Scroller {\n    addScroller(scroller) {\n        (this.xScrollers || (this.xScrollers = [])).push(scroller);\n    }\n\n    addPartner(otherScroller, axes = xAxis) {\n        if (typeof axes === 'string') {\n            axes = {\n                [axes] : 1\n            };\n        }\n\n        // Link up all our X scrollers\n        if (axes.x) {\n            // Ensure the other grid has set up its scrollers. This is done on first paint\n            // so may not have been executed yet.\n            otherScroller.owner.initScroll();\n\n            //<debug>\n            if (otherScroller.xScrollers?.length !== this.xScrollers.length) {\n                throw new Error('Grid scrollers can only be synced in the X axis between grids with the same number of SubGrids');\n            }\n            //</debug>\n            this.xScrollers.forEach((scroller, i) => scroller.addPartner(otherScroller.xScrollers[i], 'x'));\n        }\n        // We are the only Y scroller\n        if (axes.y) {\n            super.addPartner(otherScroller, 'y');\n        }\n    }\n\n    removePartner(otherScroller) {\n        this.xScrollers.forEach((scroller, i) => {\n            if (!scroller.isDestroyed) {\n                scroller.removePartner(otherScroller.xScrollers[i]);\n            }\n        });\n\n        super.removePartner(otherScroller);\n    }\n\n    updateOverflowX(overflowX) {\n        const hideScroll = overflowX === false;\n        this.xScrollers?.forEach(s => s.overflowX = hideScroll ? 'hidden' : 'hidden-scroll');\n        this.widget.virtualScrollers.classList.toggle('b-hide-display', hideScroll);\n    }\n\n    scrollIntoView(element, options) {\n        // If we are after an element, we have to ask the scroller of the SubGrid\n        // that the element is in. It will do the X scrolling and delegate the Y\n        // scrolling up to this GridScroller.\n        if (element.nodeType === Element.ELEMENT_NODE && this.element.contains(element)) {\n            for (const subGridScroller of this.xScrollers) {\n                if (subGridScroller.element.contains(element)) {\n                    return subGridScroller.scrollIntoView(element, options);\n                }\n            }\n        }\n        else {\n            return super.scrollIntoView(element, options);\n        }\n    }\n\n    hasOverflow(axis = 'y') {\n        return axis === 'y' ? this.scrollHeight > this.clientHeight : false;\n    }\n\n    set x(x) {\n        if (this.xScrollers) {\n            this.xScrollers[0].x = x;\n        }\n    }\n\n    get x() {\n        // when trying to scroll grid with no columns xScrollers do not exist\n        return this.xScrollers ? this.xScrollers[0].x : 0;\n    }\n}\n","import Bar from './Bar.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\nimport DomSync from '../../Core/helper/DomSync.js';\nimport Tooltip from '../../Core/widget/Tooltip.js';\n\n/**\n * @module Grid/view/Header\n */\n\n/**\n * The Grid header, which contains simple columns but also allows grouped columns. One instance is created and used per SubGrid\n * automatically, you should not need to instantiate this class manually. See {@link Grid.column.Column} for information about\n * column configuration.\n *\n * @extends Grid/view/Bar\n * @internal\n *\n * @inlineexample Grid/view/Header.js\n */\nexport default class Header extends Bar {\n    static get $name() {\n        return 'Header';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'gridheader';\n    }\n\n    get subGrid() {\n        return this._subGrid;\n    }\n\n    set subGrid(subGrid) {\n        this._subGrid = this.owner = subGrid;\n    }\n\n    get region() {\n        return this.subGrid?.region;\n    }\n\n    changeElement(element, was) {\n        const { region } = this;\n\n        // Columns must be examined for maxDepth\n        this.getConfig('columns');\n\n        return super.changeElement({\n            className : {\n                'b-grid-header-scroller'             : 1,\n                [`b-grid-header-scroller-${region}`] : region\n            },\n            children : [{\n                reference : 'headersElement',\n                className : {\n                    'b-grid-headers'             : 1,\n                    [`b-grid-headers-${region}`] : region\n                },\n                dataset : {\n                    region,\n                    reference : 'headersElement',\n                    maxDepth  : this.maxDepth\n                }\n            }]\n        }, was);\n    }\n\n    get overflowElement() {\n        return this.headersElement;\n    }\n\n    /**\n     * Recursive column header config creator.\n     * Style not included because of CSP. Widths are fixed up in\n     * {@link #function-fixHeaderWidths}\n     * @private\n     */\n    getColumnConfig(column) {\n        const\n            {\n                id,\n                align,\n                resizable,\n                isLeaf,\n                isParent,\n                isLastInSubGrid,\n                cls,\n                childLevel,\n                field,\n                tooltip,\n                children,\n                isFocusable,\n                grid\n            } = column,\n            // Headers tested standalone - may be no grid\n            focusedCell = grid?.focusedCell,\n            isFocused   = focusedCell?.rowIndex === -1 && focusedCell?.column === column;\n\n        if (column.isVisible) {\n            return {\n                className : {\n                    'b-grid-header'                  : 1,\n                    'b-grid-header-parent'           : isParent,\n                    [`b-level-${childLevel}`]        : 1,\n                    [`b-depth-${column.meta.depth}`] : 1,\n                    [`b-grid-header-align-${align}`] : align,\n                    'b-grid-header-resizable'        : resizable && isLeaf,\n                    [cls]                            : cls,\n                    'b-collapsible'                  : column.collapsible,\n                    'b-last-parent'                  : isParent && isLastInSubGrid,\n                    'b-last-leaf'                    : isLeaf && isLastInSubGrid\n                },\n                role                            : isFocusable ? 'columnheader' : 'presentation',\n                'aria-sort'                     : 'none',\n                'aria-label'                    : column.ariaLabel,\n                [isFocusable ? 'tabIndex' : ''] : isFocused ? 0 : -1,\n                dataset                         : {\n                    ...Tooltip.encodeConfig(tooltip),\n                    columnId                : id,\n                    [field ? 'column' : ''] : field\n                },\n                children : [{\n                    className : 'b-grid-header-text',\n                    children  : [{\n                        [grid && isFocusable ? 'id' : ''] : `${grid?.id}-column-${column.id}`,\n                        className                         : 'b-grid-header-text-content'\n                    }]\n                }, children ? {\n                    className : 'b-grid-header-children',\n                    children  : children.map(child => this.getColumnConfig(child))\n                } : null,\n                {\n                    className : 'b-grid-header-resize-handle'\n                }]\n            };\n        }\n    }\n\n    // used by safari to fix flex when rows width shrink below this value\n    calculateMinWidthForSafari() {\n        let minWidth = 0;\n\n        this.columns.visibleColumns.forEach(column => {\n            minWidth += column.calculateMinWidth();\n        });\n\n        return minWidth;\n    }\n\n    /**\n     * Fix header widths (flex or fixed width) after rendering. Not a part of template any longer because of CSP\n     * @private\n     */\n    fixHeaderWidths() {\n        this.fixCellWidths();\n    }\n\n    refreshHeaders() {\n        const me = this;\n\n        // run renderers, not done from template to work more like cell rendering\n        me.columns.traverse(column => {\n            const headerElement = me.getBarCellElement(column.id);\n\n            if (headerElement) {\n                let html = column.headerText;\n\n                if (column.headerRenderer) {\n                    html = column.headerRenderer.call(column.thisObj || me, { column, headerElement });\n                }\n\n                if (column.headerWidgetMap) {\n                    Object.values(column.headerWidgetMap).forEach(widget => {\n                        widget.render(column.textWrapper);\n                    });\n                }\n\n                if (column.icon) {\n                    html = `<i class=\"${StringHelper.encodeHtml(column.icon)}\"></i>` + (html || '');\n                }\n\n                const innerEl = headerElement.querySelector('.b-grid-header-text-content');\n                if (innerEl) {\n                    innerEl.innerHTML = html || '';\n                }\n            }\n        });\n\n        me.fixHeaderWidths();\n    }\n\n    get columns() {\n        const\n            me     = this,\n            result = super.columns;\n\n        if (!me.columnsDetacher) {\n            // columns is a chained store, it will be repopulated from master when columns change.\n            // That action always triggers change with action dataset.\n            me.columnsDetacher = result.ion({\n                change() {\n                    me.initDepths();\n                },\n                thisObj : me\n            });\n\n            me.initDepths();\n        }\n\n        return result;\n    }\n\n    set columns(columns) {\n        super.columns = columns;\n    }\n\n    /**\n     * Depths are used for styling of grouped headers. Sets them on meta.\n     * @private\n     */\n    initDepths(columns = this.columns.topColumns, parent = null) {\n        const me = this;\n        let maxDepth = 0;\n\n        if (parent?.meta) {\n            parent.meta.depth++;\n        }\n\n        for (const column of columns) {\n            const { meta } = column;\n            // TODO: this should maybe move\n            meta.depth = 0;\n\n            if (column.children) {\n                me.initDepths(column.children.filter(me.columns.chainedFilterFn), column);\n                if (meta.depth && parent) {\n                    parent.meta.depth += meta.depth;\n                }\n            }\n\n            if (meta.depth > maxDepth) {\n                maxDepth = meta.depth;\n            }\n        }\n\n        if (!parent) {\n            me.maxDepth = maxDepth;\n        }\n\n        return maxDepth;\n    }\n\n    //endregion\n\n    //region Getters\n\n    /**\n     * Get the header cell element for the specified column.\n     * @param {String} columnId Column id\n     * @returns {HTMLElement} Header cell element\n     */\n    getHeader(columnId) {\n        return this.getBarCellElement(columnId);\n    }\n\n    //endregion\n\n    get contentElement() {\n        return this.element.firstElementChild;\n    }\n\n    refreshContent() {\n        const me = this;\n\n        DomSync.sync({\n            domConfig : {\n                children         : me.columns.topColumns.map(col => me.getColumnConfig(col)),\n                onlyChildren     : true,\n                strict           : true,\n                syncIdField      : 'columnId',\n                releaseThreshold : 0\n            },\n            targetElement : me.contentElement\n        });\n\n        me.refreshHeaders();\n    }\n\n    onPaint({ firstPaint }) {\n        if (firstPaint) {\n            this.refreshContent();\n        }\n    }\n}\n\n// Register this widget type with its Factory\nHeader.initClass();\n","// We declare consts inside case blocks in this file.\n/* eslint-disable no-case-declarations */\n\n//TODO: Should it fire more own events instead and rely less on function chaining?\n\nimport Base from '../../../Core/Base.js';\nimport DomDataStore from '../../../Core/data/DomDataStore.js';\nimport DomHelper from '../../../Core/helper/DomHelper.js';\nimport Rectangle from '../../../Core/helper/util/Rectangle.js';\nimport EventHelper from '../../../Core/helper/EventHelper.js';\nimport StringHelper from '../../../Core/helper/StringHelper.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\nimport BrowserHelper from '../../../Core/helper/BrowserHelper.js';\nimport Location from '../../util/Location.js';\n\nconst gridBodyElementEventHandlers = {\n        touchstart  : 'onElementTouchStart',\n        touchmove   : 'onElementTouchMove',\n        touchend    : 'onElementTouchEnd',\n        mouseover   : 'onElementMouseOver',\n        mouseout    : 'onElementMouseOut',\n        mousedown   : 'onElementMouseDown',\n        mousemove   : 'onElementMouseMove',\n        mouseup     : 'onElementMouseUp',\n        click       : 'onHandleElementClick',\n        dblclick    : 'onElementDblClick',\n        keyup       : 'onElementKeyUp',\n        keypress    : 'onElementKeyPress',\n        contextmenu : 'onElementContextMenu',\n        pointerdown : 'onElementPointerDown',\n        pointerup   : 'onElementPointerUp'\n    },\n    eventProps = [\n        'pageX',\n        'pageY',\n        'clientX',\n        'clientY',\n        'screenX',\n        'screenY'\n    ];\n\nfunction toggleHover(element, add = true) {\n    element?.classList.toggle('b-hover', add);\n}\n\nfunction setCellHover(columnId, row, add = true) {\n    row && columnId && toggleHover(row.getCell(columnId), add);\n}\n\n/**\n * @module Grid/view/mixin/GridElementEvents\n */\n\n/**\n * Mixin for Grid that handles dom events. Some listeners fire own events but all can be chained by features. None of\n * the functions in this class are indented to be called directly.\n *\n * See {@link Grid.view.Grid} for more information on grid keyboard interaction.\n *\n * @mixin\n */\nexport default Target => class GridElementEvents extends (Target || Base) {\n    static get $name() {\n        return 'GridElementEvents';\n    }\n\n    //region Config\n\n    static get configurable() {\n        return {\n            /**\n             * Time in ms until a longpress is triggered\n             * @prp {Number}\n             * @default\n             * @category Events\n             */\n            longPressTime : 400,\n\n            /**\n             * Set to true to listen for CTRL-Z (CMD-Z on Mac OS) keyboard event and trigger undo (redo when SHIFT is\n             * pressed). Only applicable when using a {@link Core.data.stm.StateTrackingManager}.\n             * @prp {Boolean}\n             * @default\n             * @category Events\n             */\n            enableUndoRedoKeys : true,\n\n            keyMap : {\n                'Ctrl+z'       : 'undoRedoKeyPress',\n                'Ctrl+Shift+z' : 'undoRedoKeyPress',\n                ' '            : { handler : 'clickCellByKey', weight : 1000 }\n            }\n        };\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Fired when user clicks in a grid cell\n     * @event cellClick\n     * @param {Grid.view.Grid} grid The grid instance\n     * @param {Core.data.Model} record The record representing the row\n     * @param {Grid.column.Column} column The column to which the cell belongs\n     * @param {HTMLElement} cellElement The cell HTML element\n     * @param {HTMLElement} target The target element\n     * @param {MouseEvent} event The native DOM event\n     */\n\n    /**\n     * Fired when user double clicks a grid cell\n     * @event cellDblClick\n     * @param {Grid.view.Grid} grid The grid instance\n     * @param {Core.data.Model} record The record representing the row\n     * @param {Grid.column.Column} column The column to which the cell belongs\n     * @param {HTMLElement} cellElement The cell HTML element\n     * @param {HTMLElement} target The target element\n     * @param {MouseEvent} event The native DOM event\n     */\n\n    /**\n     * Fired when user activates contextmenu in a grid cell\n     * @event cellContextMenu\n     * @param {Grid.view.Grid} grid The grid instance\n     * @param {Core.data.Model} record The record representing the row\n     * @param {Grid.column.Column} column The column to which the cell belongs\n     * @param {HTMLElement} cellElement The cell HTML element\n     * @param {HTMLElement} target The target element\n     * @param {MouseEvent} event The native DOM event\n     */\n\n    /**\n     * Fired when user moves the mouse over a grid cell\n     * @event cellMouseOver\n     * @param {Grid.view.Grid} grid The grid instance\n     * @param {Core.data.Model} record The record representing the row\n     * @param {Grid.column.Column} column The column to which the cell belongs\n     * @param {HTMLElement} cellElement The cell HTML element\n     * @param {HTMLElement} target The target element\n     * @param {MouseEvent} event The native DOM event\n     */\n\n    /**\n     * Fired when a user moves the mouse out of a grid cell\n     * @event cellMouseOut\n     * @param {Grid.view.Grid} grid The grid instance\n     * @param {Core.data.Model} record The record representing the row\n     * @param {Grid.column.Column} column The column to which the cell belongs\n     * @param {HTMLElement} cellElement The cell HTML element\n     * @param {HTMLElement} target The target element\n     * @param {MouseEvent} event The native DOM event\n     */\n\n    //endregion\n\n    //region Event handling\n\n    /**\n     * Init listeners for a bunch of dom events. All events are handled by handleEvent().\n     * @private\n     * @category Events\n     */\n    initInternalEvents() {\n        const\n            handledEvents = Object.keys(gridBodyElementEventHandlers),\n            len           = handledEvents.length,\n            listeners     = {\n                element : this.bodyElement,\n                thisObj : this\n            };\n\n        // Route all events through handleEvent, so that we can capture this.event\n        // before we route to the handlers\n        for (let i = 0; i < len; i++) {\n            const eventName = handledEvents[i];\n\n            listeners[eventName] = {\n                handler : 'handleEvent'\n            };\n            // Override default for touch events.\n            // Other event types already have correct default.\n            if (eventName.startsWith('touch')) {\n                listeners[eventName].passive = false;\n            }\n        }\n\n        EventHelper.on(listeners);\n\n        EventHelper.on({\n            focusin : 'onGridBodyFocusIn',\n            element : this.bodyElement,\n            thisObj : this,\n            capture : true\n        });\n    }\n\n    /**\n     * This method finds the cell location of the passed event. It returns an object describing the cell.\n     * @param {Event} event A Mouse, Pointer or Touch event targeted at part of the grid.\n     * @param {Boolean} [includeSingleAxisMatch] Set to `true` to return a cell from xy either above or below the Grid's\n     * body or to the left or right.\n     * @returns {Object} An object containing the following properties:\n     * - `cellElement` - The cell element clicked on.\n     * - `column` - The {@link Grid.column.Column column} clicked under.\n     * - `columnId` - The `id` of the {@link Grid.column.Column column} clicked under.\n     * - `record` - The {@link Core.data.Model record} clicked on.\n     * - `id` - The `id` of the {@link Core.data.Model record} clicked on.\n     * @internal\n     * @category Events\n     */\n    getCellDataFromEvent(event, includeSingleAxisMatch = false) {\n        const\n            me          = this,\n            { columns } = me,\n            { target }  = event;\n        let cellElement = target.closest('.b-grid-cell');\n        // If event coords outside of cell, this will match a cell so long as either x or y is inside a cell.\n        if (!cellElement && includeSingleAxisMatch && !target.classList.contains('b-grid-row') &&\n            !target.classList.contains('b-grid-subgrid')\n        ) {\n            const {\n                top,\n                left,\n                right,\n                bottom\n            }            = me.bodyContainer.getBoundingClientRect();\n            let match,\n                { x, y } = event;\n\n            // X axis correct\n            if (x >= left && x <= right) {\n                // y will match row either at the top or at the bottom, dependent on what the provided x is\n                y = match = Math.ceil(me[`${y < top ? 'first' : 'last'}FullyVisibleRow`].element.getBoundingClientRect().y);\n            }\n            // Y axis correct\n            else if (y >= top && y <= bottom) {\n                // x will match row either at to the left or to the right, dependent on what the provided y is\n                x = match = Math.ceil(columns.visibleColumns[x < left ? 0 : columns.visibleColumns.length - 1].element.getBoundingClientRect().x);\n            }\n            if (match !== undefined) {\n                cellElement = document.elementFromPoint(x, y)?.closest('.b-grid-cell');\n            }\n        }\n\n        // There is a cell\n        if (cellElement) {\n            const\n                cellData         = DomDataStore.get(cellElement),\n                { id, columnId } = cellData,\n                record           = me.store.getById(id),\n                column           = columns.getById(columnId);\n\n            // Row might not have a record, since we transition record removal\n            // https://app.assembla.com/spaces/bryntum/tickets/6805\n            return record ? {\n                cellElement,\n                cellData,\n                columnId,\n                id,\n                record,\n                column,\n                cellSelector : { id, columnId }\n            } : null;\n        }\n    }\n\n    /**\n     * This method finds the header location of the passed event. It returns an object describing the header.\n     * @param {Event} event A Mouse, Pointer or Touch event targeted at part of the grid.\n     * @returns {Object} An object containing the following properties:\n     * - `headerElement` - The header element clicked on.\n     * - `column` - The {@link Grid.column.Column column} clicked under.\n     * - `columnId` - The `id` of the {@link Grid.column.Column column} clicked under.\n     * @internal\n     * @category Events\n     */\n    getHeaderDataFromEvent(event) {\n        const headerElement = event.target.closest('.b-grid-header');\n\n        // There is a header\n        if (headerElement) {\n            const\n                headerData   = ObjectHelper.assign({}, headerElement.dataset),\n                { columnId } = headerData,\n                column       = this.columns.getById(columnId);\n\n            return column ? {\n                headerElement,\n                headerData,\n                columnId,\n                column\n            } : null;\n        }\n    }\n\n    /**\n     * Handles all dom events, routing them to correct functions (touchstart -> onElementTouchStart)\n     * @param event\n     * @private\n     * @category Events\n     */\n    handleEvent(event) {\n        if (!this.disabled && gridBodyElementEventHandlers[event.type]) {\n            this[gridBodyElementEventHandlers[event.type]](event);\n        }\n    }\n\n    //endregion\n\n    //region Touch events\n\n    /**\n     * Touch start, chain this function in features to handle the event.\n     * @param event\n     * @category Touch events\n     * @internal\n     */\n    onElementTouchStart(event) {\n        const\n            me       = this,\n            cellData = me.getCellDataFromEvent(event);\n\n        DomHelper.isTouchEvent = true;\n\n        if (event.touches.length === 1) {\n            me.longPressTimeout = me.setTimeout(() => {\n                me.onElementLongPress(event);\n                event.preventDefault();\n                me.longPressPerformed = true;\n            }, me.longPressTime);\n        }\n\n        if (cellData && !event.defaultPrevented) {\n            me.onFocusGesture(event);\n        }\n    }\n\n    /**\n     * Touch move, chain this function in features to handle the event.\n     * @param event\n     * @category Touch events\n     * @internal\n     */\n    onElementTouchMove(event) {\n        const\n            me          = this,\n            {\n                lastTouchTarget\n            }           = me,\n            touch       = event.changedTouches[0],\n            {\n                pageX,\n                pageY\n            }           = touch,\n            touchTarget = document.elementFromPoint(pageX, pageY);\n\n        if (me.longPressTimeout) {\n            me.clearTimeout(me.longPressTimeout);\n            me.longPressTimeout = null;\n        }\n\n        // Keep grid informed about mouseover/outs during touch-based dragging\n        if (touchTarget !== lastTouchTarget) {\n            if (lastTouchTarget) {\n                const mouseoutEvent = new MouseEvent('mouseout', ObjectHelper.copyProperties({\n                    relatedTarget : touchTarget,\n                    pointerType   : 'touch',\n                    bubbles       : true\n                }, touch, eventProps));\n\n                mouseoutEvent.preventDefault = () => event.preventDefault();\n                lastTouchTarget?.dispatchEvent(mouseoutEvent);\n            }\n            if (touchTarget) {\n                const mouseoverEvent = new MouseEvent('mouseover', ObjectHelper.copyProperties({\n                    relatedTarget : lastTouchTarget,\n                    pointerType   : 'touch',\n                    bubbles       : true\n                }, touch, eventProps));\n\n                mouseoverEvent.preventDefault = () => event.preventDefault();\n                touchTarget?.dispatchEvent(mouseoverEvent);\n            }\n        }\n\n        me.lastTouchTarget = touchTarget;\n    }\n\n    /**\n     * Touch end, chain this function in features to handle the event.\n     * @param event\n     * @category Touch events\n     * @internal\n     */\n    onElementTouchEnd(event) {\n        const me = this;\n\n        if (me.longPressPerformed) {\n            if (event.cancelable) {\n                event.preventDefault();\n            }\n            me.longPressPerformed = false;\n        }\n\n        if (me.longPressTimeout) {\n            me.clearTimeout(me.longPressTimeout);\n            me.longPressTimeout = null;\n        }\n    }\n\n    onElementLongPress(event) {}\n\n    //endregion\n\n    //region Mouse events\n\n    // Trigger events in same style when clicking, dblclicking and for contextmenu\n    triggerCellMouseEvent(name, event, cellData = this.getCellDataFromEvent(event)) {\n        const me = this;\n\n        // There is a cell\n        if (cellData) {\n            const\n                column    = me.columns.getById(cellData.columnId),\n                eventData = {\n                    grid         : me,\n                    record       : cellData.record,\n                    column,\n                    cellSelector : cellData.cellSelector,\n                    cellElement  : cellData.cellElement,\n                    target       : event.target,\n                    event\n                };\n\n            me.trigger('cell' + StringHelper.capitalize(name), eventData);\n\n            if (name === 'click') {\n                column.onCellClick?.(eventData);\n            }\n        }\n    }\n\n    /**\n     * Mouse down, chain this function in features to handle the event.\n     * @param event\n     * @category Mouse events\n     * @internal\n     */\n    onElementMouseDown(event) {\n        const\n            me       = this,\n            cellData = me.getCellDataFromEvent(event);\n\n        me.skipFocusSelection = true;\n\n        // If click was on a scrollbar or splitter, preventDefault to not steal focus\n        if (me.isScrollbarOrRowBorderOrSplitterClick(event)) {\n            event.preventDefault();\n        }\n        else {\n            me.triggerCellMouseEvent('mousedown', event, cellData);\n\n            // Browser event unification fires a mousedown on touch tap prior to focus.\n            if (cellData && !event.defaultPrevented) {\n                me.onFocusGesture(event);\n            }\n        }\n    }\n\n    isScrollbarOrRowBorderOrSplitterClick({ target, x, y }) {\n        // Normally cells catch the click, directly on row = user clicked border, which we ignore.\n        // Also ignore clicks on the virtual width element used to stretch fake scrollbar\n        if (target.closest('.b-grid-splitter') || target.matches('.b-grid-row, .b-virtual-width')) {\n            return true;\n        }\n        if (target.matches('.b-vertical-overflow')) {\n            const rect = target.getBoundingClientRect();\n            return x > rect.right - DomHelper.scrollBarWidth;\n        }\n        else if (target.matches('.b-horizontal-overflow')) {\n            const rect = target.getBoundingClientRect();\n            return y > rect.bottom - DomHelper.scrollBarWidth - 1; // -1 for height of virtualScrollerWidth element\n        }\n    }\n\n    /**\n     * Mouse move, chain this function in features to handle the event.\n     * @param event\n     * @category Mouse events\n     * @internal\n     */\n    onElementMouseMove(event) {\n        // Keep track of the last mouse position in case, due to OSX sloppy focusing,\n        // focus is moved into the browser before a mousedown is delivered.\n        // The cached mousemove event will provide the correct target in\n        // GridNavigation#onGridElementFocus.\n        this.mouseMoveEvent = event;\n    }\n\n    /**\n     * Mouse up, chain this function in features to handle the event.\n     * @param event\n     * @category Mouse events\n     * @internal\n     */\n    onElementMouseUp(event) {}\n\n    onElementPointerDown(event) {}\n\n    /**\n     * Pointer up, chain this function in features to handle the event.\n     * @param event\n     * @category Mouse events\n     * @internal\n     */\n    onElementPointerUp(event) {}\n\n    /**\n     * Called before {@link #function-onElementClick}.\n     * Fires 'beforeElementClick' event which can return false to cancel further onElementClick actions.\n     * @param event\n     * @fires beforeElementClick\n     * @category Mouse events\n     * @internal\n     */\n\n    onHandleElementClick(event) {\n        if (this.trigger('beforeElementClick', { event }) !== false) {\n            this.onElementClick(event);\n        }\n    }\n\n    /**\n     * Click, select cell on click and also fire 'cellClick' event.\n     * Chain this function in features to handle the dom event.\n     * @param event\n     * @fires cellClick\n     * @category Mouse events\n     * @internal\n     */\n    onElementClick(event) {\n        const\n            me       = this,\n            cellData = me.getCellDataFromEvent(event);\n\n        // There is a cell\n        if (cellData) {\n            me.triggerCellMouseEvent('click', event, cellData);\n        }\n    }\n\n    onFocusGesture(event) {\n        const\n            me                    = this,\n            isContextMenu         = event.button === 2,\n            // Interaction with tree expand/collapse icons doesn't focus\n            isTreeExpander        = !isContextMenu && event.target.matches('.b-icon-tree-expand, .b-icon-tree-collapse'),\n            // Mac OS specific behaviour: when you right click a non-active window, the window does not receive focus, but the context menu is shown.\n            // So for Mac OS we treat the right click as a non-focusable action, if window is not active\n            isUnfocusedRightClick = !document.hasFocus() && BrowserHelper.isMac && isContextMenu;\n\n        // Tree expander clicks and contextmenus on unfocused windows don't focus\n        if (isTreeExpander || isUnfocusedRightClick) {\n            event.preventDefault();\n        }\n        else {\n            // Used by the GridNavigation mixin to detect what interaction event if any caused\n            // the focus to be moved. If it's a programmatic focus, there won't be one.\n            // Grid doesn't use a Navigator which maintains this property, so we need to set it.\n            me.navigationEvent = event;\n\n            // Context menu doesn't focus by default, so that needs to explicitly focus.\n            // If they're re-clicking the current focus, GridNavigation#focusCell\n            // still needs to know. It's a no-op, but it informs the GridSelection of the event.\n            if (isContextMenu || me.focusedCell?.equals(new Location(event.target))) {\n                me.focusCell(new Location(event.target));\n            }\n        }\n    }\n\n    /**\n     * Double click, fires 'cellDblClick' event.\n     * Chain this function in features to handle the dom event.\n     * @param {Event} event\n     * @fires cellDblClick\n     * @category Mouse events\n     * @internal\n     */\n    onElementDblClick(event) {\n        const { target } = event;\n\n        this.triggerCellMouseEvent('dblClick', event);\n\n        if (target.classList.contains('b-grid-header-resize-handle')) {\n            const\n                header = target.closest('.b-grid-header'),\n                column = this.columns.getById(header.dataset.columnId);\n\n            column.resizeToFitContent();\n        }\n    }\n\n    /**\n     * Mouse over, adds 'hover' class to elements.\n     * @param event\n     * @fires mouseOver\n     * @category Mouse events\n     * @internal\n     */\n    onElementMouseOver(event) {\n        // bail out early if scrolling\n        if (!this.scrolling) {\n            const\n                // No hover effect needed if a mouse button is pressed (like when resizing window, region, or resizing something etc).\n                // NOTE: 'buttons' not supported in Safari\n                shouldHover = typeof event.buttons !== 'number' || event.buttons === 0,\n                cellElement = event.target.closest('.b-grid-cell');\n\n            // If we should hover, and we are entering a grid row (which probably is a row border), we should hover\n            // cell/row above so not to get a blinking hovering, especially on column header\n            if (shouldHover && !cellElement && event.target.classList.contains('b-grid-row')) {\n                this.setHovered(document.elementFromPoint(event.x, event.y - 2).closest('.b-grid-cell'));\n            }\n\n            if (cellElement) {\n                if (shouldHover) {\n                    this.setHovered(cellElement);\n                }\n\n                this.triggerCellMouseEvent('mouseOver', event);\n            }\n\n            /**\n             * Mouse moved in over element in grid\n             * @event mouseOver\n             * @param {MouseEvent} event The native browser event\n             */\n            this.trigger('mouseOver', { event });\n        }\n    }\n\n    /**\n     * Mouse out, removes 'hover' class from elements.\n     * @param event\n     * @fires mouseOut\n     * @category Mouse events\n     * @internal\n     */\n    onElementMouseOut(event) {\n        this.setHovered(null);\n        // bail out early if scrolling\n        if (!this.scrolling) {\n            const cellElement = event.target.closest('.b-grid-cell');\n\n            if (cellElement) {\n                this.triggerCellMouseEvent('mouseOut', event);\n            }\n\n            /**\n             * Mouse moved out from element in grid\n             * @event mouseOut\n             * @param {MouseEvent} event The native browser event\n             */\n            this.trigger('mouseOut', { event });\n        }\n    }\n\n    // Not a setter to allow chaining in features\n    setHovered(cellElement) {\n        const\n            me                        = this,\n            { selectionMode }         = me,\n            rowNumberColumnId         = selectionMode.rowNumber && me.columns.find(c => c.type == 'rownumber')?.id,\n            checkboxSelectionColumnId = selectionMode.checkbox && me.checkboxSelectionColumn?.id;\n\n        // Always clears any hovered cell\n        if (me._hoveredCell) {\n            toggleHover(me._hoveredCell, false);\n\n            // Also remove hovered class on checkcol, rownumbercol and column header\n            const\n                prevSelector      = DomDataStore.get(me._hoveredCell),\n                { row : prevRow } = prevSelector;\n\n            if (prevRow && !prevRow.isDestroyed) {\n                setCellHover(rowNumberColumnId, prevRow, false);\n                setCellHover(checkboxSelectionColumnId, prevRow, false);\n            }\n\n            if (prevSelector?.columnId) {\n                toggleHover(me.columns.getById(prevSelector.columnId)?.element, false);\n            }\n\n            me._hoveredCell = null;\n        }\n\n        // Clears hovered row\n        // Only remove cls if row isn't destroyed\n        if (me._hoveredRow && !me._hoveredRow.isDestroyed) {\n            me._hoveredRow.removeCls('b-hover');\n        }\n        me._hoveredRow = null;\n\n        // Set hovered\n        if (cellElement && !me.scrolling) {\n            const\n                selector = DomDataStore.get(cellElement),\n                { row }  = selector;\n\n            if (row) {\n                // Set cell if cell selection mode is on\n                if (selectionMode.cell && selector.columnId !== rowNumberColumnId && selector.columnId !== checkboxSelectionColumnId) {\n                    toggleHover(cellElement);\n                    me._hoveredCell = cellElement;\n\n                    // In cell selection mode:\n                    // Also \"hover\" checkcolumn cell if such exists\n                    setCellHover(checkboxSelectionColumnId, row);\n                    // And also rownumbercolumn cell\n                    setCellHover(rowNumberColumnId, row);\n                    // And also column header\n                    toggleHover(me.columns.getById(selector.columnId)?.element);\n                }\n                // Else row\n                else {\n                    me._hoveredRow = row;\n                    row.addCls('b-hover');\n                }\n            }\n        }\n    }\n\n    //endregion\n\n    //region Keyboard events\n\n    // Hooks on to keyMaps keydown-listener to be able to run before\n    keyMapOnKeyDown(event) {\n        this.onElementKeyDown(event);\n        super.keyMapOnKeyDown(event);\n    }\n\n    /**\n     * To catch all keydowns. For more specific keydown actions, use keyMap.\n     * @param event\n     * @category Keyboard events\n     * @internal\n     */\n    onElementKeyDown(event) {\n        // If some other function flagged the event as handled, we ignore it.\n        if (event.handled) {\n            return;\n        }\n\n        const\n            me          = this,\n            // Read this to refresh cached reference in case this keystroke lead to the removal of current row\n            focusedCell = me.focusedCell;\n\n        if (focusedCell?.isCell && !focusedCell.isActionable) {\n            const\n                cellElement = focusedCell.cell;\n\n            // If a cell is focused and column is interested - call special callback\n            me.columns.getById(cellElement.dataset.columnId).onCellKeyDown?.({ event, cellElement });\n        }\n    }\n\n    undoRedoKeyPress(event) {\n        const { stm } = this.store;\n        if (stm && this.enableUndoRedoKeys && !this.features.cellEdit?.isEditing) {\n            stm.onUndoKeyPress(event);\n            return true;\n        }\n        return false;\n    }\n\n    // Trigger column.onCellClick when space bar is pressed\n    clickCellByKey(event) {\n        const\n            me          = this,\n            // Read this to refresh cached reference in case this keystroke lead to the removal of current row\n            focusedCell = me.focusedCell,\n            cellElement = focusedCell?.cell,\n            column      = me.columns.getById(cellElement.dataset.columnId);\n\n        if (focusedCell?.isCell && !focusedCell.isActionable) {\n            if (column.onCellClick) {\n                column.onCellClick({\n                    grid   : me,\n                    column,\n                    record : me.store.getById(focusedCell.id),\n                    cellElement,\n                    target : event.target,\n                    event\n                });\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Key press, chain this function in features to handle the dom event.\n     * @param event\n     * @category Keyboard events\n     * @internal\n     */\n    onElementKeyPress(event) {}\n\n    /**\n     * Key up, chain this function in features to handle the dom event.\n     * @param event\n     * @category Keyboard events\n     * @internal\n     */\n    onElementKeyUp(event) {}\n\n    //endregion\n\n    //region Other events\n\n    /**\n     * Context menu, chain this function in features to handle the dom event.\n     * In most cases, include ContextMenu feature instead.\n     * @param event\n     * @category Other events\n     * @internal\n     */\n    onElementContextMenu(event) {\n        const\n            me       = this,\n            cellData = me.getCellDataFromEvent(event);\n\n        // There is a cell\n        if (cellData) {\n            me.triggerCellMouseEvent('contextMenu', event, cellData);\n\n            // Focus on tap for touch events.\n            // Selection follows from focus.\n            if (DomHelper.isTouchEvent) {\n                me.onFocusGesture(event);\n            }\n        }\n    }\n\n    /**\n     * Overrides empty base function in View, called when view is resized.\n     * @fires resize\n     * @param element\n     * @param width\n     * @param height\n     * @param oldWidth\n     * @param oldHeight\n     * @category Other events\n     * @internal\n     */\n    onInternalResize(element, width, height, oldWidth, oldHeight) {\n        const me = this;\n\n        if (me._devicePixelRatio && me._devicePixelRatio !== globalThis.devicePixelRatio) {\n            // Pixel ratio changed, likely because of browser zoom. This affects the relative scrollbar width also\n            DomHelper.resetScrollBarWidth();\n        }\n\n        me._devicePixelRatio = globalThis.devicePixelRatio;\n        // cache to avoid recalculations in the middle of rendering code (RowManger#getRecordCoords())\n        me._bodyRectangle    = Rectangle.client(me.bodyContainer);\n\n        super.onInternalResize(...arguments);\n\n        if (height !== oldHeight) {\n            me._bodyHeight = me.bodyContainer.offsetHeight;\n            if (me.isPainted) {\n                // initial height will be set from render(),\n                // it reaches onInternalResize too early when rendering, headers/footers are not sized yet\n                me.rowManager.initWithHeight(me._bodyHeight);\n            }\n        }\n        me.refreshVirtualScrollbars();\n\n        if (width !== oldWidth) {\n            // Slightly delay to avoid resize loops.\n            me.setTimeout(() => {\n                if (!me.isDestroyed) {\n                    me.updateResponsive(width, oldWidth);\n                }\n            }, 0);\n        }\n    }\n\n    //endregion\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n","import Base from '../../../Core/Base.js';\nimport StringHelper from '../../../Core/helper/StringHelper.js';\nimport GridFeatureManager from '../../feature/GridFeatureManager.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\n\n/**\n * @module Grid/view/mixin/GridFeatures\n */\n\nconst validConfigTypes = {\n    string   : 1,\n    object   : 1,\n    function : 1 // used by CellTooltip\n};\n\n/**\n * Mixin for Grid that handles features. Features are plugins that add functionality to the grid. Feature classes should\n * register with Grid by calling {@link Grid.feature.GridFeatureManager#function-registerFeature-static registerFeature}. This\n * enables features to be specified and configured in grid\n * config.\n *\n * Define which features to use:\n *\n * ```javascript\n * // specify which features to use (note that some features are used by default)\n * const grid = new Grid({\n *   features: {\n *      sort: 'name',\n *      search: true\n *   }\n * });\n * ```\n *\n * Access a feature in use:\n *\n * ```javascript\n * grid.features.search.search('cat');\n * ```\n *\n * Basic example of implementing a feature:\n *\n * ```javascript\n * class MyFeature extends InstancePlugin {\n *\n * }\n *\n * GridFeatures.registerFeature(MyFeature);\n *\n * // using the feature\n * const grid = new Grid({\n *   features: {\n *     myFeature: true\n *   }\n * });\n * ```\n *\n * ## Enable and disable features at runtime\n *\n * Each feature is either \"enabled\" (included by default), or \"off\" (excluded completely). You can always check the docs\n * of a specific feature to find out how it is configured by default.\n *\n * Features which are \"off\" completely are not available and cannot be enabled at runtime.\n *\n * For a feature that is **off** by default that you want to enable later during runtime,\n * configure it with `disabled : true`:\n * ```javascript\n * const grid = new Grid({\n *      featureName : {\n *          disabled : true // on and disabled, can be enabled later\n *      }\n * });\n *\n * // enable the feature\n * grid.featureName.disabled = false;\n * ```\n *\n * If the feature is **off** by default, and you want to include and enable the feature, configure it as `true`:\n * ```javascript\n * const grid = new Grid({\n *      featureName : true // on and enabled, can be disabled later\n * });\n *\n * // disable the feature\n * grid.featureName.disabled = true;\n * ```\n *\n * If the feature is **on** by default, but you want to turn it **off**, configure it as `false`:\n * ```javascript\n * const grid = new Grid({\n *      featureName : false // turned off, not included at all\n * });\n * ```\n *\n * If the feature is **enabled** by default and you have no need of reconfiguring it,\n * you can omit the feature configuration.\n *\n * @mixin\n */\nexport default Target => class GridFeatures extends (Target || Base) {\n    static get $name() {\n        return 'GridFeatures';\n    }\n\n    //region Init\n\n    /**\n     * Specify which features to use on the grid. Most features accepts a boolean, some also accepts a config object.\n     * Please note that if you are not using the bundles you might need to import the features you want to use.\n     *\n     * ```javascript\n     * const grid = new Grid({\n     *     features : {\n     *         stripe : true,   // Enable stripe feature\n     *         sort   : 'name', // Configure sort feature\n     *         group  : false   // Disable group feature\n     *     }\n     * }\n     * ```\n     *\n     * @config {Object} features\n     * @category Common\n     */\n\n    /**\n     * Map of the features available on the grid. Use it to access them on your grid object\n     *\n     * ```javascript\n     * grid.features.group.expandAll();\n     * ```\n     *\n     * @readonly\n     * @member {Object} features\n     * @category Common\n     */\n\n    set features(features) {\n        const\n            me              = this,\n            defaultFeatures = GridFeatureManager.getInstanceDefaultFeatures(this);\n\n        features = me._features = ObjectHelper.assign({}, features);\n\n        // default features, enabled unless otherwise specified\n        if (defaultFeatures) {\n            Object.keys(defaultFeatures).forEach(feature => {\n                if (!(feature in features)) {\n                    features[feature] = true;\n                }\n            });\n        }\n\n        // We *prime* the features so that if any configuration code accesses a feature, it\n        // will self initialize, but if not, they will remain in a primed state until afterConfigure.\n        const registeredInstanceFeatures = GridFeatureManager.getInstanceFeatures(this);\n\n        for (const featureName of Object.keys(features)) {\n            const config = features[featureName];\n\n            // Create feature initialization property if config is truthy.\n            // Config must be a valid configuration value for the feature class.\n            if (config) {\n                const throwIfError = !globalThis.__bryntum_code_editor_changed;\n\n                // Feature configs name must start with lowercase letter to be valid\n                if (StringHelper.uncapitalize(featureName) !== featureName) {\n                    const errorMessage = `Invalid feature name '${featureName}', must start with a lowercase letter`;\n\n                    if (throwIfError) {\n                        throw new Error(errorMessage);\n                    }\n                    console.error(errorMessage);\n                    me._errorDuringConfiguration = errorMessage;\n                }\n\n                const featureClass = registeredInstanceFeatures[featureName];\n\n                if (!featureClass) {\n                    const errorMessage = `Feature '${featureName}' not available, make sure you have imported it`;\n                    if (throwIfError) {\n                        throw new Error(errorMessage);\n                    }\n                    console.error(errorMessage);\n                    me._errorDuringConfiguration = errorMessage;\n                    return;\n                }\n\n                // Create a self initializing property on the features object named by the feature name.\n                // when accessed, it will create and return the real feature.\n                // Now, if some Feature initialization code attempt to access a feature which has not yet been initialized\n                // it will be initialized just in time.\n                Reflect.defineProperty(features, featureName, me.createFeatureInitializer(features, featureName,\n                    featureClass, config));\n            }\n        }\n    }\n\n    get features() {\n        return this._features;\n    }\n\n    createFeatureInitializer(features, featureName, featureClass, config) {\n        const\n            constructorArgs = [this],\n            construct       = featureClass.prototype.construct;\n\n        // Config arg must be processed if feature is just requested with true\n        // so that default configurable values are processed.\n        if (config === true) {\n            config = {};\n        }\n\n        // Only pass config if there is one.\n        // The constructor(config = {}) only works for undefined config\n        if (validConfigTypes[typeof config]) {\n            constructorArgs[1] = config;\n        }\n\n        return {\n            configurable : true,\n            get() {\n                // Delete this defined property and replace it with the Feature instance.\n                delete features[featureName];\n\n                // Ensure the feature is injected into the features object before initialization\n                // so that it is available from call chains from its initialization.\n                featureClass.prototype.construct = function(...args) {\n                    features[featureName] = this;\n                    construct.apply(this, args);\n                    featureClass.prototype.construct = construct;\n                };\n\n                // Return the Feature instance\n                return new featureClass(...constructorArgs);\n            }\n        };\n    }\n\n    //endregion\n\n    //region Other stuff\n\n    /**\n     * Check if a feature is included\n     * @param {String} name Feature name, as registered with `GridFeatureManager.registerFeature()`\n     * @returns {Boolean}\n     * @category Misc\n     */\n    hasFeature(name) {\n        const { features } = this;\n\n        if (features) {\n            const featureProp = Object.getOwnPropertyDescriptor(this.features, name);\n\n            if (featureProp) {\n                // Do not actually force creation of the feature\n                return Boolean(featureProp.value || featureProp.get);\n            }\n        }\n        return false;\n    }\n\n    hasActiveFeature(name) {\n        return Boolean(this.features?.[name] && !this.features?.[name].disabled);\n    }\n\n    //endregion\n\n    //region Extract config\n\n    // This function is not meant to be called by any code other than Base#getCurrentConfig().\n    // It extracts the current configs for the features\n    getConfigValue(name, options) {\n        if (name === 'features') {\n            const result = {};\n\n            for (const feature in this.features) {\n                // Feature might be configured as `false`\n                const featureConfig = this.features[feature]?.getCurrentConfig?.(options);\n                if (featureConfig) {\n                    // Use `true` for empty feature configs `{ stripe : true }`\n                    if (ObjectHelper.isEmpty(featureConfig)) {\n                        // Exclude default features to not spam the config\n                        if (!GridFeatureManager.isDefaultFeatureForInstance(this.features[feature].constructor, this)) {\n                            result[feature] = true;\n                        }\n                    }\n                    else {\n                        result[feature] = featureConfig;\n                    }\n                }\n                else {\n                    result[feature] = false;\n                }\n            }\n\n            return result;\n        }\n\n        return super.getConfigValue(name, options);\n    }\n\n    //endregion\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n","import Base from '../../../Core/Base.js';\nimport Rectangle from '../../../Core/helper/util/Rectangle.js';\nimport Location from '../../util/Location.js';\nimport DomHelper from '../../../Core/helper/DomHelper.js';\nimport GlobalEvents from '../../../Core/GlobalEvents.js';\nimport VersionHelper from '../../../Core/helper/VersionHelper.js';\n\n/**\n * @module Grid/view/mixin/GridNavigation\n */\n\nconst\n    defaultFocusOptions = Object.freeze({}),\n    disableScrolling = Object.freeze({\n        x : false,\n        y : false\n    }),\n    containedFocusable = function(e) {\n        // When we step outside of the target cell, throw.\n        // The TreeWalker silences the exception and terminates the traverse.\n        if (!this.focusableFinderCell.contains(e)) {\n            return DomHelper.NodeFilter.FILTER_REJECT;\n        }\n        if (DomHelper.isFocusable(e) && !e.disabled) {\n            return DomHelper.NodeFilter.FILTER_ACCEPT;\n        }\n        return DomHelper.NodeFilter.FILTER_SKIP;\n    };\n\n/**\n * Mixin for Grid that handles cell to cell navigation.\n *\n * See {@link Grid.view.Grid} for more information on grid cell keyboard navigation.\n *\n * @mixin\n */\nexport default Target => class GridNavigation extends (Target || Base) {\n    static get $name() {\n        return 'GridNavigation';\n    }\n\n    static configurable =  {\n        focusable : false,\n\n        focusableSelector : '.b-grid-cell,.b-grid-header.b-depth-0',\n\n        // Documented on Grid\n        keyMap : {\n            ArrowUp    : { handler : 'navigateUp', weight : 10 },\n            ArrowRight : { handler : 'navigateRight', weight : 10 },\n            ArrowDown  : { handler : 'navigateDown', weight : 10 },\n            ArrowLeft  : { handler : 'navigateLeft', weight : 10 },\n\n            'Ctrl+Home' : 'navigateFirstCell',\n            Home        : 'navigateFirstColumn',\n            'Ctrl+End'  : 'navigateLastCell',\n            End         : 'navigateLastColumn',\n            PageUp      : 'navigatePrevPage',\n            PageDown    : 'navigateNextPage',\n            Enter       : 'activateHeader',\n\n            // Private\n            Escape      : { handler : 'onEscape', weight : 10 },\n            'Shift+Tab' : { handler : 'onShiftTab', preventDefault : false },\n            Tab         : { handler : 'onTab', preventDefault : false },\n            ' '         : { handler : 'onSpace', preventDefault : false }\n        }\n    }\n\n    onStoreRecordIdChange(event) {\n        super.onStoreRecordIdChange?.(event);\n\n        const\n            { focusedCell }     = this,\n            { oldValue, value } = event;\n\n        // https://github.com/bryntum/support/issues/4935\n        if (focusedCell && focusedCell.id === oldValue) {\n            focusedCell._id = value;\n        }\n    }\n\n    /**\n     * Called by the RowManager when the row which contains the focus location is derendered.\n     *\n     * This keeps focus in a consistent place.\n     * @protected\n     */\n    onFocusedRowDerender() {\n        const\n            me              = this,\n            { focusedCell } = me;\n\n        if (focusedCell?.id != null && focusedCell.cell) {\n            const isActive = focusedCell.cell.contains(DomHelper.getActiveElement(me));\n\n            if (me.hideHeaders) {\n                if (isActive) {\n                    me.revertFocus();\n                }\n            }\n            else {\n                const headerContext = me.normalizeCellContext({\n                    rowIndex    : -1,\n                    columnIndex : isActive ? focusedCell.columnIndex : 0\n                });\n\n                // The row contained focus, focus the corresponding header\n                if (isActive) {\n                    me.focusCell(headerContext);\n                }\n                else {\n                    headerContext.cell.tabIndex = 0;\n                }\n            }\n            focusedCell.cell.tabIndex = -1;\n        }\n    }\n\n    navigateFirstCell() {\n        this.focusCell(Location.FIRST_CELL);\n    }\n\n    navigateFirstColumn() {\n        this.focusCell(Location.FIRST_COLUMN);\n    }\n\n    navigateLastCell() {\n        this.focusCell(Location.LAST_CELL);\n    }\n\n    navigateLastColumn() {\n        this.focusCell(Location.LAST_COLUMN);\n    }\n\n    navigatePrevPage() {\n        this.focusCell(Location.PREV_PAGE);\n    }\n\n    navigateNextPage() {\n        this.focusCell(Location.NEXT_PAGE);\n    }\n\n    activateHeader(keyEvent) {\n        if (keyEvent.target.classList.contains('b-grid-header') && this.focusedCell.isColumnHeader) {\n            const { column } = this.focusedCell;\n\n            column.onKeyDown?.(keyEvent);\n\n            this.getHeaderElement(column.id).click();\n        }\n        return false;\n    }\n\n    onEscape(keyEvent) {\n        const { focusedCell } = this;\n\n        if (!keyEvent.target.closest('.b-dragging') && focusedCell?.isActionable) {\n            // The escape must not be processed by handlers for the cell we are about to focus.\n            // We need to just push focus upwards to the cell, and stop there.\n            keyEvent.stopImmediatePropagation();\n\n            // To prevent the focusCell from being rejected as a no-op\n            this._focusedCell = null;\n\n            // Focus the cell with an explicit request to not jump in\n            this.focusCell({\n                rowIndex : focusedCell.rowIndex,\n                column   : focusedCell.column\n            }, {\n                disableActionable : true\n            });\n        }\n    }\n\n    onTab(keyEvent) {\n        const\n            { target } = keyEvent,\n            {\n                focusedCell,\n                bodyElement\n            }          = this,\n            {\n                isActionable,\n                actionTargets\n            }          = focusedCell,\n            isEditable = isActionable && DomHelper.isEditable(target) && !target.readOnly;\n\n        // If we're on the last editable in a cell, TAB navigates right\n        if (isEditable && target === actionTargets[actionTargets.length - 1]) {\n            keyEvent.preventDefault();\n            this.navigateRight(keyEvent);\n        }\n        // If we're *on* a cell, or on last subtarget, TAB moves off the grid.\n        // Temporarily hide the grid body, and let TAB take effect from there\n        else if (!isActionable || target === actionTargets[actionTargets.length - 1]) {\n            bodyElement.style.display = 'none';\n            this.requestAnimationFrame(() => bodyElement.style.display = '');\n\n            // So that Navigator#onKeyDown does not continue to preventDefault;\n            return false;\n        }\n    }\n\n    onShiftTab(keyEvent) {\n        const\n            me = this,\n            { target } = keyEvent,\n            {\n                focusedCell,\n                bodyElement\n            }   = me,\n            {\n                cell,\n                isActionable,\n                actionTargets\n            } = focusedCell,\n            isEditable  = isActionable && DomHelper.isEditable(target) && !target.readOnly,\n            onFirstCell = focusedCell.columnIndex === 0 && focusedCell.rowIndex === (me.hideHeaders ? 0 : -1);\n\n        // If we're on the first editable in a cell that is not the first cell, SHIFT+TAB navigates left\n        if (!onFirstCell && isEditable && target === actionTargets[0]) {\n            keyEvent.preventDefault();\n            me.navigateLeft(keyEvent);\n        }\n\n        // If we're *on* a cell, or on first subtarget, SHIFT+TAB moves off the grid.\n        else if (!isActionable || target === actionTargets[0]) {\n            // Focus the first header cell and then let the key's default action take its course\n            const f = !onFirstCell && !me.hideHeaders && me.focusCell({\n                rowIndex : -1,\n                column   : 0\n            }, {\n                disableActionable : true\n            });\n\n            // If that was successful then reset the tabIndex\n            if (f) {\n                f.cell.tabIndex = -1;\n                cell.tabIndex = 0;\n                me._focusedCell = focusedCell;\n            }\n            // Otherwise, temporarily hide the grid body, and let TAB take effect from there\n            else {\n                bodyElement.style.display = 'none';\n                me.requestAnimationFrame(() => bodyElement.style.display = '');\n            }\n\n            // So that Navigator#onKeyDown does not continue to preventDefault;\n            return false;\n        }\n    }\n\n    onSpace(keyEvent) {\n        // SPACE scrolls, so disable that\n        if (!this.focusedCell.isActionable) {\n            keyEvent.preventDefault();\n        }\n        // Return false to tell keyMap that any other actions should be called\n        return false;\n    }\n\n    //region Cell\n\n    /**\n     * Triggered when a user navigates to a grid cell\n     * @event navigate\n     * @param {Grid.view.Grid} grid The grid instance\n     * @param {Grid.util.Location} last The previously focused location\n     * @param {Grid.util.Location} location The new focused location\n     * @param {Event} [event] The UI event which caused navigation.\n     */\n\n    /**\n     * Grid Location which encapsulates the currently focused cell.\n     * Set to focus a cell or use {@link #function-focusCell}.\n     * @property {Grid.util.Location}\n     */\n    get focusedCell() {\n        return this._focusedCell;\n    }\n\n    /**\n     * This property is `true` if an element _within_ a cell is focused.\n     * @property {Boolean}\n     * @readonly\n     */\n    get isActionableLocation() {\n        return this._focusedCell?.isActionable;\n    }\n\n    set focusedCell(cellSelector) {\n        this.focusCell(cellSelector);\n    }\n\n    get focusedRecord() {\n        return this._focusedCell?.record;\n    }\n\n    /**\n     * CSS selector for currently focused cell. Format is \"[data-index=index] [data-column-id=columnId]\".\n     * @property {String}\n     * @readonly\n     */\n    get cellCSSSelector() {\n        const cell = this._focusedCell;\n\n        return cell ? `[data-index=${cell.rowIndex}] [data-column-id=${cell.columnId}]` : '';\n    }\n\n    afterHide() {\n        super.afterHide(...arguments);\n\n        // Do not scroll back to the last focused cell/last moused over cell upon reshow\n        this.lastFocusedCell = null;\n    }\n\n    /**\n     * Checks whether a cell is focused.\n     * @param {LocationConfig|String|Number} cellSelector Cell selector { id: x, columnId: xx } or row id\n     * @returns {Boolean} true if cell or row is focused, otherwise false\n     */\n    isFocused(cellSelector) {\n        return Boolean(this._focusedCell?.equals(this.normalizeCellContext(cellSelector)));\n    }\n\n    get focusElement() {\n        if (!this.isDestroying) {\n            let focusCell;\n\n            // If the store is not empty, focusedCell can return the closest cell\n            if (this.store.count && this._focusedCell) {\n                focusCell = this._focusedCell.target;\n            }\n            // If the store is empty, or we have had no focusedCell set, focus a column header.\n            else {\n                focusCell = this.normalizeCellContext({\n                    rowIndex    : -1,\n                    columnIndex : this._focusedCell?.columnIndex || 0\n                }).target;\n            }\n\n            const superFocusEl = super.focusElement;\n\n            // If there's no cell, or the Container's focus element is before the cell\n            // use the Container's focus element.\n            // For example, we may have a top toolbar.\n            if (superFocusEl && (!focusCell || focusCell.compareDocumentPosition(superFocusEl) === Node.DOCUMENT_POSITION_PRECEDING)) {\n                return superFocusEl;\n            }\n\n            return focusCell;\n        }\n    }\n\n    onPaint({ firstPaint }) {\n        const me = this;\n\n        super.onPaint?.(...arguments);\n\n        // Make the grid initally tabbable into.\n        // The first cell has to have the initial roving tabIndex set into it.\n        const defaultFocus = this.normalizeCellContext({\n            rowIndex : me.hideHeaders ? 0 : -1,\n            column   : me.hideHeaders ? 0 : me.columns.find(col => !col.hidden && col.isFocusable)\n        });\n\n        if (defaultFocus.cell) {\n            me._focusedCell = defaultFocus;\n\n            const { target } = defaultFocus;\n\n            // If cell doesn't contain a focusable target, it needs tabIndex 0.\n            if (target === defaultFocus.cell) {\n                defaultFocus.cell.tabIndex = 0;\n            }\n        }\n    }\n\n    /**\n     * This function handles focus moving into, or within the grid.\n     * @param {Event} focusEvent\n     * @private\n     */\n    onGridBodyFocusIn(focusEvent) {\n        const\n            me              = this,\n            { bodyElement } = me,\n            lastFocusedCell = me.focusedCell,\n            lastTarget      = lastFocusedCell?.initialTarget || lastFocusedCell?.target,\n            {\n                target,\n                relatedTarget\n            }               = focusEvent,\n            targetCell      = target.closest(me.focusableSelector);\n\n        // If focus moved into a valid cell...\n        // Only allows mouse left och right clicks (no other mouse buttons)\n        if (targetCell &&\n            (!GlobalEvents.currentMouseDown || GlobalEvents.isMouseDown(0) || GlobalEvents.isMouseDown(2))\n        ) {\n            const\n                cellSelector  = new Location(target),\n                { cell }      = cellSelector,\n                lastCell      = lastFocusedCell?.cell,\n                actionTargets = cellSelector.actionTargets = me.findFocusables(targetCell),\n                // Don't select on focus on a contained actionable location\n                doSelect      = (!me._fromFocusCell || me.selectOnFocus) && (target === cell || me._selectActionCell) && !target?._isRevertingFocus;\n\n            // https://github.com/bryntum/support/issues/4039\n            // Only try focusing cell is current target cell is getting removed\n            if (!me.store.getById(targetCell.parentNode.dataset.id) && cell !== targetCell) {\n                cell.focus({ preventScroll : true });\n                return;\n            }\n\n            if (target.matches(me.focusableSelector)) {\n                if (me.disableActionable) {\n                    cellSelector._target = cell;\n                }\n                // Focus first focusable target if we are configured to.\n                else if (actionTargets.length) {\n                    me._selectActionCell = GlobalEvents.currentMouseDown?.target === target;\n                    actionTargets[0].focus();\n                    delete me._selectActionCell;\n                    return;\n                }\n            }\n            else {\n                // If we have tabbed in and *NOT* mousedowned in, and hit a tabbable element which was not our\n                // last focused cell, go back to last focused cell.\n                if (lastFocusedCell?.target &&\n                    relatedTarget &&\n                    (!GlobalEvents.isMouseDown() || !bodyElement.contains(GlobalEvents.currentMouseDown?.target)) &&\n                    !bodyElement.contains(relatedTarget) &&\n                    !cellSelector.equals(lastFocusedCell)\n                ) {\n                    lastTarget.focus();\n                    return;\n                }\n                cellSelector._target = target;\n            }\n\n            if (lastCell) {\n                lastCell.classList.remove('b-focused');\n                lastCell.tabIndex = -1;\n            }\n            if (cell) {\n                cell.classList.add('b-focused');\n\n                // Column may update DOM on cell focus for A11Y purposes.\n                cellSelector.column.onCellFocus(cellSelector);\n\n                // Only switch the cell to be tabbable if focus was not directed to an inner focusable.\n                if (cell === target) {\n                    cell.tabIndex = 0;\n                }\n\n                // Moving back to a cell from a cell-contained Editor\n                if (cell.contains(focusEvent.relatedTarget)) {\n                    if (lastTarget === target) {\n                        return;\n                    }\n                }\n            }\n\n            //Remember\n            me._focusedCell = cellSelector;\n\n            me.onCellNavigate?.(me, lastFocusedCell, cellSelector, doSelect);\n\n            me.trigger('navigate', { lastFocusedCell, focusedCell : cellSelector, event : focusEvent });\n\n        }\n        // Focus not moved into a valid cell, refocus last cell's target\n        // if there was a previously focused cell.\n        else {\n            lastTarget?.focus();\n        }\n    }\n\n    findFocusables(cell) {\n        const\n            { focusableFinder } = this,\n            result              = [];\n\n        focusableFinder.currentNode = this.focusableFinderCell = cell;\n\n        for (let focusable = focusableFinder.nextNode(); focusable; focusable = focusableFinder.nextNode()) {\n            result.push(focusable);\n        }\n        return result;\n    }\n\n    get focusableFinder() {\n        const me = this;\n\n        if (!me._focusableFinder) {\n            me._focusableFinder = me.setupTreeWalker(me.bodyElement, DomHelper.NodeFilter.SHOW_ELEMENT, {\n                acceptNode : containedFocusable.bind(me)\n            });\n        }\n\n        return me._focusableFinder;\n    }\n\n    /**\n     * Sets the passed record as the current focused record for keyboard navigation and selection purposes.\n     * This API is used by Combo to activate items in its picker.\n     * @param {Core.data.Model|Number|String} activeItem The record, or record index, or record id to highlight as the active (\"focused\") item.\n     * @internal\n     */\n    restoreActiveItem(item = this._focusedCell) {\n        if (this.rowManager.count) {\n            // They sent a row number.\n            if (!isNaN(item)) {\n                item = this.store.getAt(item);\n            }\n            // Still not a record, treat it as a record ID.\n            else if (!item.isModel) {\n                item = this.store.getById(item);\n            }\n            return this.focusCell(item);\n        }\n    }\n\n    /**\n     * Navigates to a cell and/or its row (depending on selectionMode)\n     * @param {LocationConfig} cellSelector Cell location descriptor\n     * @param {Object} options Modifier options for how to deal with focusing the cell. These\n     * are used as the {@link Core.helper.util.Scroller#function-scrollTo} options.\n     * @param {ScrollOptions|Boolean} [options.scroll=true] Pass `false` to not scroll the cell into view, or a\n     * scroll options object to affect the scroll.\n     * @returns {Grid.util.Location} A Location object representing the focused location.\n     * @fires navigate\n     */\n    focusCell(cellSelector, options = defaultFocusOptions) {\n        const\n            me               = this,\n            { _focusedCell } = me,\n            {\n                scroll,\n                disableActionable\n            }                = options;\n\n        // If we're being asked to go to a nonexistent header row, revert focus outwards\n        if (cellSelector?.rowIndex === -1 && me.hideHeaders) {\n            me.revertFocus();\n            return;\n        }\n\n        // Get a Grid Location.\n        // If the cellSelector is a number, it is taken to be a \"relative\" location as defined\n        // in the Location class eg Location.UP, and we move the current focus accordingly.\n        cellSelector = typeof cellSelector === 'number' && _focusedCell?.isLocation ? _focusedCell.move(cellSelector) : me.normalizeCellContext(cellSelector);\n\n        const doSelect = ('doSelect' in options) ? options.doSelect\n            : (!cellSelector.isActionable || cellSelector.initialTarget === cellSelector.cell);\n\n        // Request is a no-op, but it's still a navigate request which selection processing needs to know about\n        if (cellSelector.equals(_focusedCell)) {\n            me.onCellNavigate?.(me, _focusedCell, cellSelector, doSelect);\n            return _focusedCell;\n        }\n\n        const\n            subGrid     = me.getSubGridFromColumn(cellSelector.columnId),\n            { cell }    = cellSelector,\n            testCell    = cell || me.getCell({\n                rowIndex : me.rowManager.topIndex,\n                columnId : cellSelector.columnId\n            }),\n            subGridRect = Rectangle.from(subGrid.element),\n            bodyRect    = Rectangle.from(me.bodyElement),\n            cellRect    = Rectangle.from(testCell).moveTo(null, subGridRect.y);\n\n        // No scrolling possible if we're moving to a column header\n        if (scroll === false || cellSelector.rowIndex === -1) {\n            options = Object.assign({}, options, disableScrolling);\n        }\n        else {\n            options = Object.assign({}, options, scroll);\n\n            // If the test cell is larger than the subGrid, in any dimension, disable scrolling\n            if (cellRect.width > subGridRect.width || cellRect.height > bodyRect.height) {\n                options.x = options.y = false;\n            }\n            // Else ask for the column to be scrolled into view\n            else {\n                options.column = cellSelector.columnId;\n            }\n\n            me.scrollRowIntoView(cellSelector.id, options);\n        }\n\n        // Clear hovering upon navigating so to not have hover style stick around when keyboard navigating away\n        if (me._hoveredRow || me._hoveredCell) {\n            me.setHovered();\n        }\n\n        // Disable auto stepping into the focused cell.\n        me.disableActionable = disableActionable;\n\n        // Go through select pathway upon focus\n        me.selectOnFocus = doSelect;\n\n        // To let onGridBodyFocusIn know where the focus originates\n        me._fromFocusCell = true;\n\n        // Focus the location's target, be it a cell, or an interior element.\n        // The onFocusIn element in this module responds to this.\n        cellSelector[disableActionable ? 'cell' : 'target']?.focus();\n\n        me.disableActionable = me.selectOnFocus = false;\n        delete me._fromFocusCell;\n\n        return cellSelector;\n    }\n\n    blurCell(cellSelector) {\n        const me   = this,\n            cell = me.getCell(cellSelector);\n\n        if (cell) {\n            cell.classList.remove('b-focused');\n        }\n    }\n\n    clearFocus(fullClear) {\n        const me = this;\n\n        if (me._focusedCell) {\n            // set last to have focus return to previous cell when alt tabbing\n            me.lastFocusedCell = fullClear ? null : me._focusedCell;\n\n            me.blurCell(me._focusedCell);\n            me._focusedCell = null;\n        }\n    }\n\n    /**\n     * Selects the cell before or after currently focused cell.\n     * @private\n     * @param next Specify true to select the next cell, false to select the previous\n     * @returns {Object} Used cell selector\n     */\n    internalNextPrevCell(next = true) {\n        const\n            me           = this,\n            cellSelector = me._focusedCell;\n\n        if (cellSelector) {\n            return me.focusCell({\n                id       : cellSelector.id,\n                columnId : me.columns.getAdjacentVisibleLeafColumn(cellSelector.columnId, next, true).id\n            });\n        }\n        return null;\n    }\n\n    /**\n     * Select the cell after the currently focused one.\n     * @param {Event} [event] [DEPRECATED] unused param\n     * @returns {Grid.util.Location} Cell selector\n     */\n    navigateRight() {\n        if (arguments[0]?.fromKeyMap) {\n            return this.focusCell(this.rtl ? Location.PREV_CELL : Location.NEXT_CELL);\n        }\n        if (arguments[0]) {\n            VersionHelper.deprecate('Grid', '6.0.0', 'Event argument removed, unused param');\n        }\n        return this.internalNextPrevCell(!this.rtl);\n    }\n\n    /**\n     * Select the cell before the currently focused one.\n     * @param {Event} [event] [DEPRECATED] unused param\n     * @returns {Grid.util.Location} Cell selector\n     */\n    navigateLeft() {\n        if (arguments[0]?.fromKeyMap) {\n            return this.focusCell(this.rtl ? Location.NEXT_CELL : Location.PREV_CELL);\n        }\n        if (arguments[0]) {\n            VersionHelper.deprecate('Grid', '6.0.0', 'Event argument removed, unused param');\n        }\n        return this.internalNextPrevCell(Boolean(this.rtl));\n    }\n\n    //endregion\n\n    //region Row\n\n    /**\n     * Selects the next or previous record in relation to the current selection. Scrolls into view if outside.\n     * @private\n     * @param next Next record (true) or previous (false)\n     * @param {Boolean} skipSpecialRows True to not return specialRows like headers\n     * @returns {Grid.util.Location|Boolean} Selection context for the focused row (& cell) or false if no selection was made\n     */\n    internalNextPrevRow(next, skipSpecialRows = true, moveToHeader = true) {\n        const\n            me   = this,\n            cell = me._focusedCell;\n\n        if (!cell) return false;\n\n        const record = me.store[`get${next ? 'Next' : 'Prev'}`](cell.id, false, skipSpecialRows);\n\n        if (record) {\n            return me.focusCell({\n                id       : record.id,\n                columnId : cell.columnId,\n                scroll   : {\n                    x : false\n                }\n            });\n        }\n        else if (!next && moveToHeader && !cell.isColumnHeader) {\n            this.clearFocus();\n            return this.getHeaderElement(cell.columnId).focus();\n        }\n    }\n\n    /**\n     * Navigates to the cell below the currently focused cell\n     * @param {Event} [event] [DEPRECATED] unused param\n     * @returns {Grid.util.Location} Selector for focused row (& cell)\n     */\n    navigateDown() {\n        if (arguments[0]?.fromKeyMap) {\n            return this.focusCell(Location.DOWN);\n        }\n        if (arguments[0]) {\n            VersionHelper.deprecate('Grid', '6.0.0', 'Event argument removed, unused param');\n        }\n        return this.internalNextPrevRow(true, false);\n    }\n\n    /**\n     * Navigates to the cell above the currently focused cell\n     * @param {Event} [event] [DEPRECATED] unused param\n     * @returns {Grid.util.Location} Selector for focused row (& cell)\n     */\n    navigateUp() {\n        if (arguments[0]?.fromKeyMap) {\n            return this.focusCell(Location.UP);\n        }\n        if (arguments[0]) {\n            VersionHelper.deprecate('Grid', '6.0.0', 'Event argument removed, unused param');\n        }\n        return this.internalNextPrevRow(false, false);\n    }\n\n    //endregion\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n","import Base from '../../../Core/Base.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\n/**\n * @module Grid/view/mixin/GridResponsive\n */\n\n/**\n * Simplifies making grid responsive. Supply levels as {@link #config-responsiveLevels} config, default levels are:\n * <dl>\n * <dt>small <dd>< 400px,\n * <dt>medium <dd>< 600px\n * <dt>large <dd>> 600px\n * </dl>\n *\n * Columns can define configs per level to be resized etc:\n *\n * ```\n * let grid = new Grid({\n *   responsiveLevels: {\n *     small: 300,\n *     medium: 400,\n *     large: '*' // everything above 400\n *   },\n *\n *   columns: [\n *     {\n *       field: 'name',\n *       text: 'Name',\n *       responsiveLevels: {\n *         small: { hidden: true },\n *         '*': { hidden: false } // all other levels\n *       }\n *     },\n *     { field: 'xx', ... }\n *   ]\n * });\n * ```\n *\n * It is also possible to give a [Grid state](#Grid/view/mixin/GridState) object instead of a level width, but in that\n * case the object must contain a `levelWidth` property:\n *\n * ```\n * let grid = new Grid({\n *   responsiveLevels: {\n *     small: {\n *       // Width is required\n *       levelWidth : 400,\n *       // Other configs are optional, see GridState for available options\n *       rowHeight  : 30\n *     },\n *     medium : {\n *       levelWidth : 600,\n *       rowHeight  : 40\n *     },\n *     large: {\n *       levelWidth : '*', // everything above 300\n *       rowHeight  : 45\n *     }\n *   }\n * });\n * ```\n *\n * @demo Grid/responsive\n * @inlineexample Grid/view/mixin/Responsive.js\n * @mixin\n */\nexport default Target => class GridResponsive extends (Target || Base) {\n    static get $name() {\n        return 'GridResponsive';\n    }\n\n    static get defaultConfig() {\n        return {\n            /**\n             * \"Break points\" for which responsive config to use for columns and css.\n             * @config {Object<String,Number|String>}\n             * @category Misc\n             * @default { small : 400, medium : 600, large : '*' }\n             */\n            responsiveLevels : Object.freeze({\n                small  : 400,\n                medium : 600,\n                large  : '*'\n            })\n        };\n    }\n\n    /**\n     * Find closes bigger level, aka level we want to use.\n     * @private\n     * @category Misc\n     */\n    getClosestBiggerLevel(width) {\n        const\n            me     = this,\n            levels = Object.keys(ObjectHelper.assign({}, me.responsiveLevels));\n\n        let useLevel     = null,\n            minDelta     = 99995,\n            biggestLevel = null;\n\n        levels.forEach(level => {\n            let levelSize = me.responsiveLevels[level];\n\n            // responsiveLevels can contains config objects, in which case we should use width from it\n            if (!['number', 'string'].includes(typeof levelSize)) {\n                //<debug>\n                if (!('levelWidth' in levelSize)) {\n                    throw new Error('levelWidth required when using state config as responsive level');\n                }\n                //</debug>\n                levelSize = levelSize.levelWidth;\n            }\n\n            if (levelSize === '*') {\n                biggestLevel = level;\n            }\n            else if (width < levelSize) {\n                const delta = levelSize - width;\n                if (delta < minDelta) {\n                    minDelta = delta;\n                    useLevel = level;\n                }\n            }\n        });\n\n        return useLevel || biggestLevel;\n    }\n\n    /**\n     * Get currently used responsive level (as string)\n     * @property {String}\n     * @readonly\n     * @category Misc\n     */\n    get responsiveLevel() {\n        return this.getClosestBiggerLevel(this.width);\n    }\n\n    /**\n     * Check if resize lead to a new responsive level and take appropriate actions\n     * @private\n     * @fires responsive\n     * @param width\n     * @param oldWidth\n     * @category Misc\n     */\n    updateResponsive(width, oldWidth) {\n        const me       = this,\n            oldLevel = me.getClosestBiggerLevel(oldWidth),\n            level    = me.getClosestBiggerLevel(width);\n\n        // On first render oldWidth is 0, in such case we need to apply level anyway\n        if (oldWidth === 0 || oldLevel !== level) {\n            // Level might be a state object\n            const levelConfig = me.responsiveLevels[level];\n            if (!['number', 'string'].includes(typeof levelConfig)) {\n                me.applyState(levelConfig);\n            }\n\n            // check columns for responsive config\n            me.columns.forEach(column => {\n                const levels = column.responsiveLevels;\n                if (levels) {\n                    if (levels[level]) {\n                        // using state to apply responsive config, since it already does what we want...\n                        column.applyState(levels[level]);\n                    }\n                    else if (levels['*']) {\n                        column.applyState(levels['*']);\n                    }\n                }\n            });\n\n            me.element.classList.remove('b-responsive-' + oldLevel);\n            me.element.classList.add('b-responsive-' + level);\n\n            /**\n             * Grid resize lead to a new responsive level being applied\n             * @event responsive\n             * @param {Grid.view.Grid} grid Grid that was resized\n             * @param {String} level New responsive level (small, large, etc)\n             * @param {Number} width New width in px\n             * @param {String} oldLevel Old responsive level\n             * @param {Number} oldWidth Old width in px\n             */\n            me.trigger('responsive', { level, width, oldLevel, oldWidth });\n        }\n    }\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n","import Base from '../../../Core/Base.js';\nimport GlobalEvents from '../../../Core/GlobalEvents.js';\nimport ArrayHelper from '../../../Core/helper/ArrayHelper.js';\nimport EventHelper from '../../../Core/helper/EventHelper.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\nimport Collection from '../../../Core/util/Collection.js';\nimport ColumnStore from '../../data/ColumnStore.js';\nimport Location from '../../util/Location.js';\n\nimport '../../column/RowNumberColumn.js';\n\nconst\n    validIdTypes   = {\n        string : 1,\n        number : 1\n    },\n    isDataLoadAction = {\n        dataset : 1,\n        batch   : 1\n    };\n\n/**\n * @module Grid/view/mixin/GridSelection\n */\n\n/**\n * A mixin for Grid that handles row and cell selection. See {@link #config-selectionMode} for details on how to control\n * what should be selected (rows or cells)\n *\n * @example\n * // select a row\n * grid.selectedRow = 7;\n *\n * // select a cell\n * grid.selectedCell = { id: 5, columnId: 'column1' }\n *\n * // select a record\n * grid.selectedRecord = grid.store.last;\n *\n * // select multiple records by ids\n * grid.selectedRecords = [1, 2, 4, 6]\n *\n * @mixin\n */\nexport default Target => class GridSelection extends (Target || Base) {\n    static get $name() {\n        return 'GridSelection';\n    }\n\n    static configurable =  {\n        /**\n         * The selection settings, where you can set these boolean flags to control what is selected. Options below:\n         * @config {Object} selectionMode\n         * @param {Boolean} selectionMode.cell Set to `true` to enable cell selection. This takes precedence over\n         * row selection, but rows can still be selected programmatically or with checkbox or RowNumber selection.\n         * Required for `column` selection\n         * @param {Boolean} selectionMode.multiSelect Allow multiple selection with ctrl and shift+click or with\n         * `checkbox` selection. Required for `dragSelect` and `column` selection\n         * @param {Boolean|CheckColumnConfig} selectionMode.checkbox Set to `true` to add a checkbox selection column to\n         * the grid, or pass a config object for the {@link Grid.column.CheckColumn}\n         * @param {Number|String} selectionMode.checkboxIndex Positions the checkbox column at the provided index or to\n         * the right of a provided column id. Defaults to 0 or to the right of an included `RowNumberColumn`\n         * @param {Boolean} selectionMode.checkboxOnly Select rows only when clicking in the checkbox column. Requires\n         * cell selection config to be `false` and checkbox to be set to `true`. This setting was previously named\n         * `rowCheckboxSelection`\n         * @param {Boolean} selectionMode.showCheckAll Set to `true` to add a checkbox to the selection column header to\n         * select/deselect all rows. Requires checkbox to also be set to `true`\n         * @param {Boolean} selectionMode.deselectFilteredOutRecords Set to `true` to deselect records when they are\n         * filtered out\n         * @param {Boolean|String} selectionMode.includeChildren Set to `true` to also select/deselect child nodes\n         * when a parent node is selected by toggling the checkbox. Set to `always` to always select/deselect child\n         * nodes.\n         * @param {Boolean|'all'|'some'} selectionMode.includeParents Set to `all` or `true` to auto select\n         * parent if all its children gets selected. If one gets deselected, the parent will also be deselected. Set to\n         * 'some' to select parent if one of its children gets selected. The parent will be deselected if all children\n         * gets deselected.\n         * @param {Boolean} selectionMode.preserveSelectionOnPageChange In `row` selection mode, this flag controls\n         * whether the Grid should preserve its selection when loading a new page of a paged data store. Defaults to\n         * `false`\n         * @param {Boolean} selectionMode.preserveSelectionOnDatasetChange In `row` selection mode, this flag\n         * controls whether the Grid should preserve its selection of cells / rows when loading a new dataset\n         * (assuming the selected records are included in the newly loaded dataset)\n         * @param {Boolean} selectionMode.deselectOnClick Toggles whether the Grid should deselect a selected row or\n         * cell when clicking it\n         * @param {Boolean} selectionMode.dragSelect Set to `true` to enable multiple selection by dragging.\n         * Requires `multiSelect` to also be set to `true`. Also requires the {@link Grid.feature.RowReorder} feature\n         * to be set to {@link Grid.feature.RowReorder#config-gripOnly}.\n         * @param {Boolean} selectionMode.selectOnKeyboardNavigation Set to `false` to disable auto-selection by keyboard\n         * navigation. This will activate the `select` keyboard shortcut.\n         * @param {Boolean} column Set to `true` to be able to select whole columns of cells by clicking the header.\n         * Requires cell to be set to `true`\n         * @param {Boolean|RowNumberColumnConfig} rowNumber Set to `true` or a config object to add a RowNumberColumn\n         * which, when clicked, selects the row.\n         * @default\n         * @category Selection\n         */\n        selectionMode : {\n            cell                             : false,\n            multiSelect                      : true,\n            checkboxOnly                     : false,\n            checkbox                         : false,\n            checkboxPosition                 : null,\n            showCheckAll                     : false,\n            deselectFilteredOutRecords       : false,\n            includeChildren                  : false,\n            includeParents                   : false,\n            preserveSelectionOnPageChange    : false,\n            preserveSelectionOnDatasetChange : true,\n            deselectOnClick                  : false,\n            dragSelect                       : false,\n            selectOnKeyboardNavigation       : true,\n            column                           : false,\n            rowNumber                        : false\n        },\n\n        keyMap : {\n            'Shift+ArrowUp'    : 'extendSelectionUp',\n            'Shift+ArrowDown'  : 'extendSelectionDown',\n            'Shift+ArrowLeft'  : 'extendSelectionLeft',\n            'Shift+ArrowRight' : 'extendSelectionRight',\n            ' '                : { handler : 'toggleSelection', weight : 10 }\n        },\n\n        selectedRecordCollection : {}\n    }\n\n    construct(config) {\n        this._selectedCells   = [];\n\n        super.construct(config);\n\n        if (config?.selectedRecords) {\n            this.selectedRecords = config.selectedRecords;\n        }\n    }\n\n    //region Init\n\n    getDefaultGridSelection(clas) {\n        if (clas.$name === 'GridSelection') {\n            return clas.configurable.selectionMode;\n        }\n        else if (clas.superclass) {\n            return this.getDefaultGridSelection(clas.superclass);\n        }\n    }\n\n    changeSelectionMode(mode) {\n        const me = this;\n\n        // If changing the selectionMode config object after creation\n        if (me.selectionMode) {\n            ObjectHelper.assign(me.selectionMode, mode);\n            return me.selectionMode;\n        }\n\n        me.$defaultGridSelection = me.getDefaultGridSelection(me.constructor);\n\n        // Wraps changeSelectionMode object in a proxy to monitor property changes.\n        return new Proxy(mode, {\n            set(obj, prop, value) {\n                const old = ObjectHelper.assign({}, obj);\n                obj[prop] = value;\n                // Calls selectionMode's update method on property change\n                me.updateSelectionMode(obj, old);\n                return true;\n            }\n        });\n    }\n\n    /**\n     * The selectionMode configuration has been changed.\n     * @event selectionModeChange\n     * @param {Object} selectionMode The new {@link #config-selectionMode}\n     */\n\n    // Will be called if selectionMode config object changes or if one of its properties changes\n    updateSelectionMode(mode, oldMode = this.$defaultGridSelection) {\n        const\n            me             = this,\n            {\n                columns,\n                checkboxSelectionColumn\n            }              = me,\n            changed        = {},\n            { rowReorder } = me.features;\n\n        for (const property in mode) {\n            if (mode[property] != oldMode[property]) {\n                changed[property] = mode[property];\n            }\n        }\n\n        // Backwards compatibility. Remove on 7.X?\n        if (mode.rowCheckboxSelection && !mode.checkboxOnly) {\n            mode.checkboxOnly = true;\n            delete mode.rowCheckboxSelection;\n        }\n\n        // If column config has been activated, activate cell and multiSelect\n        if (changed.column) {\n            mode.cell        = true;\n            mode.multiSelect = true;\n        }\n\n        // If cell config has been activated, deactivate checkboxOnly\n        if (changed.cell) {\n            mode.checkboxOnly = false;\n        }\n\n        // If cell config has been deactivated, deactivate column\n        if (changed.cell === false) {\n            mode.column = false;\n        }\n\n        // If checkboxOnly config has been activated, activate checkbox and deactivate cell\n        if (changed.checkboxOnly) {\n            if (!mode.checkbox) {\n                // checkbox can be a CheckboxColumnConfig\n                mode.checkbox = true;\n            }\n            mode.cell = false;\n        }\n\n        // If checkbox config has been deactivated, deactivate checkboxOnly and showCheckAll\n        if (changed.checkbox === false) {\n            changed.checkboxOnly = false;\n            changed.showCheckAll = false;\n        }\n\n        // If showCheckAll has been activated, activate checkbox and multiselect\n        if (changed.showCheckAll) {\n            mode.checkbox    = true;\n            mode.multiSelect = true;\n        }\n\n        // If includeChildren config has been activated, activate multiselect\n        if (changed.includeChildren || changed.includeParents) {\n            mode.multiSelect = true;\n        }\n\n        // If multiSelect has been deactivated, deactivate column, showCheckAll, dragSelect and includeChildren\n        if (changed.multiSelect === false) {\n            mode.column = mode.showCheckAll = mode.dragSelect = mode.includeChildren = mode.includeParents = false;\n        }\n\n        if (changed.dragSelect) {\n            if (rowReorder?.enabled && rowReorder.gripOnly !== true) {\n                rowReorder.showGrip = rowReorder.gripOnly = true;\n            }\n            mode.multiSelect = true;\n            me._selectionListenersDetachers = {};\n        }\n        if (changed.dragSelect === false && me._selectionListenersDetachers) {\n            me._selectionListenersDetachers.selectiondrag?.();\n            delete me._selectionListenersDetachers.selectiondrag;\n        }\n\n        // Deselect all when switching between row or cell selection mode\n        // Deselect all when switching from multiselect to singleselect\n        // Deselect all when changing deselectFilteredOutRecords\n        if (oldMode && (\n            changed.cell !== undefined ||\n                changed.deselectFilteredOutRecords !== undefined ||\n                changed.multiSelect !== undefined\n        )) {\n            me.deselectAll();\n        }\n\n        // Row number selection\n        if (changed.rowNumber) {\n            if (!columns.findRecord('type', 'rownumber')) {\n                columns.insert(0, {\n                    ...(typeof mode.rowNumber == 'object' ? mode.rowNumber : {}),\n                    type : 'rownumber'\n                });\n                me._selectionAddedRowNumberColumn = true;\n            }\n        }\n        else if (changed.rowNumber === false && me._selectionAddedRowNumberColumn) {\n            columns.remove(columns.findRecord('type', 'rownumber'));\n            delete me._selectionAddedRowNumberColumn;\n        }\n\n        // Add or remove checkbox column\n        if (mode.checkbox !== oldMode?.checkbox ||\n            (mode.checkbox && (mode.showCheckAll !== oldMode?.showCheckAll))\n        ) {\n            if (oldMode) {\n                me.deselectAll();\n            }\n            // See to it that were done configuring when initCheckboxSelection is called.\n            if (me.isConfiguring) {\n                me.shouldInitCheckboxSelection = true;\n            }\n            else {\n                me.initCheckboxSelection();\n            }\n        }\n\n        // If only checkboxIndex has changed\n        if (oldMode && mode.checkbox && oldMode.checkbox &&\n            mode.checkboxIndex !== oldMode.checkboxIndex && checkboxSelectionColumn) {\n            checkboxSelectionColumn.parent.insertChild(checkboxSelectionColumn, columns.getAt(me.checkboxSelectionColumnInsertIndex));\n        }\n\n        me.trigger('selectionModeChange', ObjectHelper.clone(mode));\n        me.afterSelectionModeChange(mode);\n    }\n\n    afterConfigure() {\n        // See to it that were done configuring when initCheckboxSelection is called.\n        if (this.shouldInitCheckboxSelection) {\n            this.shouldInitCheckboxSelection = false;\n            this.initCheckboxSelection();\n        }\n        super.afterConfigure();\n    }\n\n    initCheckboxSelection() {\n        const\n            me           = this,\n            {\n                selectionMode,\n                columns,\n                checkboxSelectionColumn\n            }            = me,\n            { checkbox } = selectionMode;\n\n        // Always remove checkbox column when config changes\n        if (checkboxSelectionColumn) {\n            // Need to remove this handle because GridBase restores it if it exists.\n            me.checkboxSelectionColumn = null;\n            columns.remove(checkboxSelectionColumn);\n        }\n\n        // Inject our CheckColumn into the ColumnStore\n        if (checkbox) {\n            const\n                checkColumnClass = ColumnStore.getColumnClass('check'),\n                config           = checkbox === true ? null : checkbox;\n\n            if (!checkColumnClass) {\n                throw new Error('CheckColumn must be imported for checkbox selection mode to work');\n            }\n\n            const col = me.checkboxSelectionColumn = new checkColumnClass(ObjectHelper.assign({\n                id           : `${me.id}-selection-column`,\n                width        : '4em',\n                minWidth     : '4em', // Needed because 4em is below Column's default minWidth\n                field        : null,\n                sortable     : false,\n                filterable   : false,\n                cellCls      : 'b-checkbox-selection',\n                // Always put the checkcolumn in the first region\n                region       : me.items?.[0]?.region,\n                showCheckAll : selectionMode.showCheckAll,\n                draggable    : false,\n                resizable    : false,\n                widgets      : [{\n                    type          : 'checkbox',\n                    valueProperty : 'checked',\n                    ariaLabel     : 'L{Checkbox.toggleRowSelect}'\n                }]\n            }, config), columns, { isSelectionColumn : true });\n\n            col.meta.depth = 0;\n            // This is assigned in Column.js for normal columns\n            col._grid      = me;\n\n            // Override renderer to inject the rendered record's selected status into the value\n            const checkboxRenderer = col.renderer;\n\n            col.renderer = renderData => {\n                renderData.value = me.isSelected(renderData.record);\n                checkboxRenderer.call(col, renderData);\n            };\n\n            col.ion({\n                toggle    : 'onCheckChange',\n                toggleAll : 'onCheckAllChange',\n                thisObj   : me\n            });\n\n            columns.insert(me.checkboxSelectionColumnInsertIndex, col);\n        }\n    }\n\n    // Used internally to get the index where to insert checkboxselectioncolumn\n    // Default : Insert the checkbox after any rownumber column. If not there, -1 means in at 0.\n    // If provided, insert at provided index\n    get checkboxSelectionColumnInsertIndex() {\n        const\n            { columns }       = this;\n        let { checkboxIndex } = this.selectionMode;\n\n        if (!checkboxIndex) {\n            checkboxIndex = columns.indexOf(columns.findRecord('type', 'rownumber')) + 1;\n        }\n        else if (typeof checkboxIndex === 'string') {\n            checkboxIndex = columns.indexOf(columns.getById(checkboxIndex));\n        }\n\n        return checkboxIndex;\n    }\n\n    //endregion\n\n    // region Events docs & Hooks\n\n    /**\n     * The selection has been changed.\n     * @event selectionChange\n     * @param {'select'|'deselect'} action `'select'`/`'deselect'`\n     * @param {'row'|'cell'} mode `'row'`/`'cell'`\n     * @param {Grid.view.Grid} source\n     * @param {Core.data.Model[]|Grid.util.Location[]} deselected The records or cells (depending on the `mode`) deselected in this\n     * operation.\n     * @param {Core.data.Model[]|Grid.util.Location[]} selected The records or cells (depending on the `mode`) selected in this\n     * operation.\n     * @param {Core.data.Model[]|Grid.util.Location[]} selection  The records or cells (depending on the `mode`) in the new selection.\n     */\n\n    /**\n     * Fires before the selection changes. Returning `false` from a listener prevents the change\n     * @event beforeSelectionChange\n     * @preventable\n     * @param {String} action `'select'`/`'deselect'`\n     * @param {'row'|'cell'} mode `'row'`/`'cell'`\n     * @param {Grid.view.Grid} source\n     * @param {Core.data.Model[]|Grid.util.Location[]} deselected The records to be deselected in this operation.\n     * @param {Core.data.Model[]|Grid.util.Location[]} selected The records to be selected in this operation.\n     * @param {Core.data.Model[]|Grid.util.Location[]} selection  The records in the current selection, before applying `selected` and\n     * `deselected`\n     */\n\n    afterSelectionChange() {}\n\n    afterSelectionModeChange() {}\n\n    // endregion\n\n    // region selectedRecordCollection\n\n    changeSelectedRecordCollection(collection) {\n        return collection instanceof Collection ? collection : new Collection(collection);\n    }\n\n    updateSelectedRecordCollection(collection) {\n        collection.ion({\n            change  : 'onSelectedRecordCollectionChange',\n            thisObj : this\n        });\n    }\n\n    onSelectedRecordCollectionChange({ added = [], removed }) {\n        if (!this.selectedRecordCollection._fromSelection) {\n            // Filter out unselectable rows\n            added = added.filter(row => this.isSelectable(row));\n            this.performSelection({\n                selectedCells     : [],\n                deselectedCells   : [],\n                selectedRecords   : added,\n                deselectedRecords : removed\n            });\n        }\n    }\n\n    changeSelectedRecordCollectionSilent(fn) {\n        this.selectedRecordCollection._fromSelection = true;\n        const result = fn(this.selectedRecordCollection);\n        delete this.selectedRecordCollection._fromSelection;\n        return result;\n    }\n    // endregion\n\n    // region Store\n\n    bindStore(store) {\n        this.detachListeners('selectionStoreFilter');\n\n        store.ion({\n            name    : 'selectionStoreFilter',\n            filter  : 'onStoreFilter',\n            thisObj : this\n        });\n        super.bindStore?.(store);\n    }\n\n    unbindStore(oldStore) {\n        this.detachListeners('selectionStoreFilter');\n\n        super.unbindStore(oldStore);\n    }\n\n    onStoreFilter({ source }) {\n        const\n            me       = this,\n            deselect = [];\n\n        // Look for selected records which is not in the store\n        for (const selectedRecord of me.selectedRecords) {\n            if (!source.includes(selectedRecord)) {\n                // Should be deselected\n                deselect.push(selectedRecord);\n            }\n        }\n\n        // Deselects\n        const selectionChange = me.prepareSelection(me.selectionMode.deselectFilteredOutRecords ? deselect : []);\n\n        // If cell mode, always deselect cells\n        if (me.isCellSelectionMode) {\n            const { deselectedCells } = me.prepareSelection(me.getSelectedCellsForRecords(deselect));\n            if (deselectedCells?.length) {\n                selectionChange.deselectedCells = (selectionChange.deselectedCells || []).concat(deselectedCells);\n            }\n        }\n\n        if (selectionChange.deselectedCells.length || selectionChange.deselectedRecords.length) {\n            // Trigger deselect event\n            me.performSelection(selectionChange, false);\n            me.updateCheckboxHeader();\n        }\n    }\n\n    /**\n     * Triggered from Grid view when the id of a record has changed.\n     * Update the collection indices.\n     * @private\n     * @category Selection\n     */\n    onStoreRecordIdChange({ record, oldValue }) {\n        // If the next mixin up the inheritance chain has an implementation, call it\n        super.onStoreRecordIdChange?.(...arguments);\n\n        const item = this.selectedRecordCollection.get(oldValue);\n\n        // having the record registered by the oldValue means we need to rebuild indices\n        if (item === record) {\n            this.selectedRecordCollection.rebuildIndices();\n        }\n    }\n\n    /**\n     * Triggered from Grid view when records get removed from the store.\n     * Deselects all records which have been removed.\n     * @private\n     * @category Selection\n     */\n    onStoreRemove(event) {\n        // If the next mixin up the inheritance chain has an implementation, call it\n        super.onStoreRemove?.(event);\n\n        if (!event.isCollapse) {\n            const\n                me                = this,\n                deselectedRecords = event.records.filter(rec => this.isSelected(rec));\n\n            if (deselectedRecords.length) {\n                const selectionChange = me.prepareSelection(deselectedRecords);\n\n                // If cell selection mode, also deselect cells for removed records\n                // No need to update ui as grid will refresh\n                if (me.isCellSelectionMode) {\n                    const { deselectedCells } = me.prepareSelection(me.getSelectedCellsForRecords(deselectedRecords));\n                    if (deselectedCells?.length) {\n                        selectionChange.deselectedCells = (selectionChange.deselectedCells || []).concat(deselectedCells);\n                    }\n                }\n                me.performSelection(selectionChange);\n            }\n        }\n    }\n\n    /**\n     * Triggered from Grid view when the store changes. This might happen\n     * if store events are batched and then resumed.\n     * Deselects all records which have been removed.\n     * @private\n     * @category Selection\n     */\n\n    onStoreDataChange({ action, source : store }) {\n        const\n            me                 = this,\n            { selectionMode }  = me;\n        let selectionChange;\n\n        // If the next mixin up the inheritance chain has an implementation, call it\n        super.onStoreDataChange?.(...arguments);\n\n        if (action === 'pageLoad') {\n            // on page load, clear selection if not `preserverSelectionOnPageChange` is true\n            if (!selectionMode.preserveSelectionOnPageChange) {\n                selectionChange = me.prepareSelection(null, null, true);\n            }\n\n            // For paged grid scenario, we need to update the check-all checkbox in the checkbox column header\n            // as we move between store pages\n            me.updateCheckboxHeader();\n        }\n        else if (isDataLoadAction[action]) {\n            const deselect = [];\n\n            if (selectionMode.preserveSelectionOnDatasetChange === false) {\n                selectionChange = me.prepareSelection(null, null, true);\n            }\n            else {\n                // Update selected records\n                deselect.push(...me.changeSelectedRecordCollectionSilent(c => c.match(store.storage)));\n\n                for (const selectedCell of me._selectedCells) {\n                    if (!store.getById(selectedCell.id)) {\n                        deselect.push(selectedCell);\n                    }\n                }\n\n                selectionChange = me.prepareSelection(deselect);\n            }\n        }\n        if (selectionChange) {\n            me.performSelection(selectionChange, false);\n            me.updateCheckboxHeader();\n        }\n    }\n\n    /**\n     * Triggered from Grid view when all records get removed from the store.\n     * Deselects all records.\n     * @private\n     * @category Selection\n     */\n    onStoreRemoveAll() {\n        // If the next mixin up the inheritance chain has an implementation, call it\n        super.onStoreRemoveAll?.();\n\n        this.performSelection(this.prepareSelection(null, null, true), false);\n    }\n\n    //endregion\n\n    // region Checkbox selection\n\n    onCheckChange({ checked, record }) {\n        const\n            me          = this,\n            deselectAll = !me.selectionMode.multiSelect && checked,\n            deselect    = !deselectAll && !checked ? [record] : null,\n            select      = checked ? [record] : null;\n\n        // Saves previously non-shift checked checkbox\n        if (checked && !GlobalEvents.shiftKeyDown) {\n            me._lastSelectionChecked = record;\n        }\n        // Shift range select\n        if (checked && me._lastSelectionChecked && GlobalEvents.shiftKeyDown) {\n            me.performSelection(me.internalSelectRange(me._lastSelectionChecked, record, true));\n        }\n        // Regular selection\n        else {\n            // Updates UI and triggers events\n            me.performSelection(me.prepareSelection(deselect, select, deselectAll, true));\n        }\n    }\n\n    // Update header checkbox\n    updateCheckboxHeader() {\n        const { selectionMode, checkboxSelectionColumn, store } = this;\n\n        if (selectionMode.checkbox && selectionMode.showCheckAll && checkboxSelectionColumn?.headerCheckbox) {\n            const allSelected = store.count && !store.some(record => !this.isSelected(record));\n\n            if (checkboxSelectionColumn.headerCheckbox.checked !== allSelected) {\n                checkboxSelectionColumn.suspendEvents();\n                checkboxSelectionColumn.headerCheckbox.checked = allSelected;\n                checkboxSelectionColumn.resumeEvents();\n            }\n        }\n    }\n\n    onCheckAllChange({ checked }) {\n        this[checked ? 'selectAll' : 'deselectAll'](this.store.isPaged && this.selectionMode.preserveSelectionOnPageChange);\n    }\n\n    //endregion\n\n    // region Selection drag\n\n    // Creates new selection range on mouseover. Listener is initiated on mousedown\n    onSelectionDrag(event) {\n        const\n            me                      = this,\n            { _selectionStartCell } = me;\n\n        // If we're here but there's no mouse button down for some reason, cancel\n        if (!GlobalEvents.isMouseDown()) {\n            me.onSelectionEnd();\n        }\n\n        // No start cell, ignore\n        if (!_selectionStartCell) {\n            return;\n        }\n\n        const\n            { items, _lastSelectionDragRegion } = me,\n            cellData                            = me.getCellDataFromEvent(event, true),\n            region                              = cellData?.column.region,\n            cellSelector                        = cellData?.cellSelector && me.normalizeCellContext(cellData.cellSelector);\n\n        // If mouse enters new cell\n        if (cellSelector && !cellSelector.equals(me._lastSelectionDragCell, true)) {\n            if (!me._isSelectionDragging) {\n                // When starting selection, start monitoring for near edge scrolling\n                me.enableScrollingCloseToEdges(items);\n            }\n\n            // If we start a new selection drag on already selected cell, the default (de)selection is delayed until\n            // mouseup. If we detect that a drag range is indeed what the user intends, deselect immediately\n            if (me._clearSelectionOnSelectionDrag && !_selectionStartCell.equals(cellSelector, true)) {\n                me.deselectAll();\n                delete me._clearSelectionOnSelectionDrag;\n            }\n\n            // A grid with multiple regions need to handle selection and scrolling moving between regions\n            if (_lastSelectionDragRegion && region !== _lastSelectionDragRegion) {\n                const\n                    leavingSubGrid     = me.subGrids[_lastSelectionDragRegion],\n                    enteringSubGrid    = me.subGrids[region],\n                    leavingScrollable  = leavingSubGrid.scrollable,\n                    enteringScrollable = enteringSubGrid.scrollable,\n                    goingForward       = items.indexOf(leavingSubGrid) - items.indexOf(enteringSubGrid) < 0;\n\n                // Immediately scrolls an entering subgrid to either start or end depending on direction\n                enteringScrollable.x = goingForward ? 0 : enteringScrollable.maxX;\n\n                // Waiting for grid to scroll to start/end (handled by scrollmanager)\n                if (goingForward ? leavingScrollable.x < leavingScrollable.maxX - 1 : leavingScrollable.x > 1) {\n                    return;\n                }\n\n                // Forces the previous subgrid to stop reserving horizontal scroll\n                me.scrollManager._activeScroll?.horizontal?.stopScroll();\n            }\n\n            me._lastSelectionDragRegion = region;\n            me._lastSelectionDragCell   = cellSelector;\n            me._isSelectionDragging     = true;\n\n            const selectionChange = me._lastSelectionDragChange = me.internalSelectRange(\n                _selectionStartCell,\n                cellSelector,\n                me.isRowNumberSelecting(cellSelector) || me.isRowNumberSelecting(_selectionStartCell));\n\n            // As selection at this point is UI only, we don't want to affect already selected records\n            selectionChange.deselectedCells   = selectionChange.deselectedCells.filter(cell => !me.isCellSelected(cell));\n            selectionChange.deselectedRecords = selectionChange.deselectedRecords.filter(record => !me.isSelected(record));\n\n            // selectionChange event fires onSelectionEnd\n            me.refreshGridSelectionUI(selectionChange);\n\n            /**\n             * Fires while drag selecting. UI will update with current range, but the cells will not be selected until\n             * mouse up. This event can be listened for to perform actions while drag selecting.\n             * @event dragSelecting\n             * @param {Grid.view.Grid} source\n             * @param {Core.data.Model[]|Object} selectedCells The cells that is currently being dragged over\n             */\n            me.trigger('dragSelecting', selectionChange);\n        }\n    }\n\n    // Tells onSelectionDrag that it's not dragging any longer\n    onSelectionEnd() {\n        const\n            me        = this,\n            lastChange = me._lastSelectionDragChange;\n\n        if (me._isSelectionDragging && !me._selectionStartCell.equals(me._lastSelectionDragCell, true) && lastChange) {\n            me.performSelection(lastChange, false);\n        }\n\n        me.disableScrollingCloseToEdges(me.items);\n\n        me._isSelectionDragging     = false;\n        me._lastSelectionDragChange = null;\n        me._lastSelectionDragCell   = null;\n\n        // Remove listeners\n        me._selectionListenersDetachers.selectiondrag?.();\n        delete me._selectionListenersDetachers.selectiondrag;\n    }\n\n    // endregion\n\n    // region Column selection\n\n    onHandleElementClick(event) {\n        const me = this;\n\n        // If rownumber column is clicked, toggle selectAll\n        if (me.selectionMode.rowNumber && event.target.closest('.b-rownumber-header')) {\n            event.handled = true;\n            if (me.store.count && me.store.some(record => !me.isSelected(record))) {\n                me.selectAll();\n            }\n            else {\n                me.deselectAll();\n            }\n\n        }\n        // In column selection mode, and we clicked a header, the column should be selected\n        else if (me.selectionMode.column && event.target.closest('.b-grid-header')) {\n            event.handled = true;\n            me.selectColumn(event, event.ctrlKey);\n        }\n\n        super.onHandleElementClick(event);\n    }\n\n    selectColumn(event, addToSelection = false) {\n        const\n            me           = this,\n            { store }    = me,\n            { columnId } = me.getHeaderDataFromEvent(event);\n\n        // internalSelectRange uses this to remember last range, we have no need for that here\n        me._shiftSelectRange = null;\n\n        if (!event.shiftKey) {\n            me._shiftSelectColumn = columnId;\n        }\n        const\n            fromColumnId    = (event.shiftKey && me._shiftSelectColumn) || columnId,\n            selectionChange = me.internalSelectRange(\n                me.normalizeCellContext({ id : store.first.id, columnId : fromColumnId }),\n                me.normalizeCellContext({ id : store.last.id, columnId })\n            );\n\n        // If we are selecting a column that is already selected, deselect it\n        if (addToSelection && !selectionChange.selectedCells.some(sc => !me.isCellSelected(sc))) {\n            selectionChange.deselectedCells = selectionChange.selectedCells;\n            selectionChange.selectedCells   = [];\n        }\n\n        if (!addToSelection) {\n            selectionChange.deselectedCells = me._selectedCells;\n        }\n        me.cleanSelectionChange(selectionChange);\n        me.performSelection(selectionChange);\n    }\n\n    // endregion\n\n    // region Public row/record selection\n\n    /**\n     * Checks whether a row is selected.\n     * @param {LocationConfig|String|Number|Core.data.Model} cellSelectorOrId Cell selector { id: x, column: xx } or row id, or record\n     * @returns {Boolean} true if row is selected, otherwise false\n     * @category Selection\n     */\n    isSelected(cellSelectorOrId) {\n        // Not a selected cell, check recoWds\n        if (cellSelectorOrId?.id) {\n            cellSelectorOrId = cellSelectorOrId.id;\n        }\n\n        if (validIdTypes[typeof cellSelectorOrId]) {\n            return Boolean(this.selectedRecordCollection.get(cellSelectorOrId));\n        }\n\n        return false;\n    }\n\n    /**\n     * Checks whether a cell is selected.\n     * @param {LocationConfig|Location} cellSelector Cell selector { id: x, column: xx }\n     * @param {Boolean} includeRow to also check if row is selected\n     * @returns {Boolean} true if cell is selected, otherwise false\n     * @category Selection\n     */\n    isCellSelected(cellSelector, includeRow) {\n        cellSelector = this.normalizeCellContext(cellSelector);\n        return (this.isCellSelectionMode && this._selectedCells.some(cell => cellSelector.equals(cell, true))) ||\n            (includeRow && this.isSelected(cellSelector));\n    }\n\n    /**\n     * Checks whether a cell or row can be selected.\n     * @param {Core.data.Model|LocationConfig|String|Number} recordCellOrId Record or cell or record id\n     * @returns {Boolean} true if cell or row can be selected, otherwise false\n     * @category Selection\n     */\n    isSelectable(recordCellOrId) {\n        return this.normalizeCellContext({ id : recordCellOrId.id || recordCellOrId }).isSelectable;\n    }\n\n    /**\n     * The last selected record. Set to select a row or use Grid#selectRow. Set to null to\n     * deselect all\n     * @property {Core.data.Model}\n     * @category Selection\n     */\n    get selectedRecord() {\n        return this.selectedRecords[this.selectedRecords.length - 1] || null;\n    }\n\n    set selectedRecord(record) {\n        this.selectRow({ record });\n    }\n\n    /**\n     * Selected records.\n     *\n     * If {@link #config-selectionMode deselectFilteredOutRecords} is `false` (default) this will include selected\n     * records which has been filtered out.\n     *\n     * If {@link #config-selectionMode preserveSelectionOnPageChange} is `true` (defaults to `false`) this will include\n     * selected records on all pages.\n     *\n     * Can be set as array of ids:\n     *\n     * ```javascript\n     * grid.selectedRecords = [1, 2, 4, 6]\n     * ```\n     *\n     * @property {Core.data.Model[]}\n     * @accepts {Core.data.Model[]|Number[]}\n     * @category Selection\n     */\n    get selectedRecords() {\n        return this.selectedRecordCollection.values;\n    }\n\n    set selectedRecords(selectedRecords) {\n        this.selectRows(selectedRecords);\n    }\n\n    /**\n     * Removes and adds records to/from the selection at the same time. Analogous\n     * to the `Array` `splice` method.\n     *\n     * Note that if items that are specified for removal are also in the `toAdd` array,\n     * then those items are *not* removed then appended. They remain in the same position\n     * relative to all remaining items.\n     *\n     * @param {Number} index Index at which to remove a block of items. Only valid if the\n     * second, `toRemove` argument is a number.\n     * @param {Object[]|Number} toRemove Either the number of items to remove starting\n     * at the passed `index`, or an array of items to remove (If an array is passed, the `index` is ignored).\n     * @param  {Object[]|Object} toAdd An item, or an array of items to add.\n     */\n    spliceSelectedRecords(index, toRemove, toAdd) {\n        const me = this;\n\n        if (typeof toRemove == 'number') {\n            const select = [...me.selectedRecords];\n            select.splice(index, toRemove, ...ArrayHelper.asArray(toAdd));\n            me.performSelection(me.prepareSelection(null, select, true, true));\n        }\n        else {\n            // Just add and remove\n            me.performSelection(me.prepareSelection(toRemove, toAdd, false, true));\n        }\n    }\n\n    /**\n     * Select one row\n     * @param {Object|Core.data.Model|String|Number} options A record or id to select or a config object describing the\n     * selection\n     * @param {Core.data.Model|String|Number} options.record Record or record id, specifying null will deselect all\n     * @param {Grid.column.Column} [options.column] The column to scroll into view if `scrollIntoView` is not specified as\n     * `false`. Defaults to the grid's first column.\n     * @param {Boolean} [options.scrollIntoView] Specify `false` to prevent row from being scrolled into view\n     * @param {Boolean} [options.addToSelection] Specify `true` to add to selection, defaults to `false` which replaces\n     * @fires selectionChange\n     * @category Selection\n     */\n    selectRow(options) {\n        // Make sure we have an object\n        if (typeof options === 'number' || options.isModel || !('record' in options)) {\n            options = {\n                records : [options]\n            };\n        }\n\n        // scrollIntoView is default here\n        ObjectHelper.assignIf(options, {\n            scrollIntoView : true\n        });\n\n        this.selectRows(options);\n    }\n\n    /**\n     * Select one or more rows\n     * @param {Object|Core.data.Model[]|String[]|Number[]} options An array of records or ids for a record or a\n     * config object describing the selection\n     * @param {Core.data.Model[]|String[]|Number[]} records An array of records or ids for a record\n     * @param {Grid.column.Column} options.column The column to scroll into view if `scrollIntoView` is not specified as\n     * `false`. Defaults to the grid's first column.\n     * @param {Boolean} [options.scrollIntoView] Specify `false` to prevent row from being scrolled into view\n     * @param {Boolean} [options.addToSelection] Specify `true` to add to selection, defaults to `false` which replaces\n     * @category Selection\n     */\n    selectRows(options) {\n        // Got a single or an array of records/ids, convert it to an object\n        if (!options || Array.isArray(options) || options.isModel || typeof options === 'number' ||\n            (!('records' in options) && !('record' in options))\n        ) {\n            options = {\n                records : ArrayHelper.asArray(options) || []\n            };\n        }\n\n        const\n            me                 = this,\n            { store }          = me,\n            toSelect           = [],\n            {\n                records        = options.record ? [options.record] : [], // Got a record instead of records\n                column         = me.columns.visibleColumns[0], // Default\n                scrollIntoView,\n                addToSelection = arguments[1] // Backwards compatibility\n            }                  = options;\n\n        for (let record of records) {\n            record = store.getById(record);\n            if (record) {\n                toSelect.push(record);\n            }\n        }\n\n        if (!addToSelection) {\n            me._shiftSelectRange = null;\n        }\n\n        me.performSelection(me.prepareSelection(null, toSelect, !addToSelection, true));\n\n        if (toSelect.length && scrollIntoView) {\n            me.scrollRowIntoView(toSelect[0].id, {\n                column\n            });\n        }\n    }\n\n    /**\n     * This selects all rows. If store is filtered, this will merge the selection of all visible rows with any selection\n     * made prior to filtering.\n     * @privateparam {Boolean} [silent] Pass `true` not to fire any event upon selection change\n     * @category Selection\n     */\n    selectAll(silent = false) {\n        const\n            { store } = this,\n            records   = (store.isGrouped ? store.allRecords : store.records).filter(r => !r.isSpecialRow);\n        // If store is grouped, store.records excludes collapsed records and allRecords excludes filtered out records\n        // Else, store records holds what we're after\n        this.performSelection(this.prepareSelection(null, records, false, true), true, silent);\n    }\n\n    /**\n     * Deselects all selected rows and cells. If store is filtered, this will unselect all visible rows only. Any\n     * selections made prior to filtering remains.\n     * @param {Boolean} [removeCurrentRecordsOnly] Pass `false` to clear all selected records, and `true` to only\n     * clear selected records in the current set of records\n     * @param {Boolean} [silent] Pass `true` not to fire any event upon selection change\n     * @category Selection\n     */\n    deselectAll(removeCurrentRecordsOnly = false, silent = false) {\n        const\n            { store } = this,\n            records   = removeCurrentRecordsOnly\n                ? (store.isGrouped ? store.allRecords : store.records).filter(r => !r.isSpecialRow) : null;\n\n        this.performSelection(this.prepareSelection(records, null, !removeCurrentRecordsOnly), true, silent);\n    }\n\n    /**\n     * Deselect one row\n     * @param {Core.data.Model|String|Number} recordOrId Record or an id for a record\n     * @category Selection\n     */\n    deselectRow(record) {\n        this.deselectRows(record);\n    }\n\n    /**\n     * Deselect one or more rows\n     * @param {Core.data.Model|String|Number|Core.data.Model[]|String[]|Number[]} recordOrIds An array of records or ids\n     * for a record\n     * @category Selection\n     */\n    deselectRows(recordsOrIds) {\n        // Ignore any non-existing row records passed\n        const\n            { store } = this,\n            records   = ArrayHelper.asArray(recordsOrIds).map(recordOrId => store.getById(recordOrId)).filter(rec => rec);\n\n        this.performSelection(this.prepareSelection(records));\n    }\n\n    /**\n     * Selects rows corresponding to a range of records (from fromId to toId)\n     * @param {String|Number} fromId\n     * @param {String|Number} toId\n     * @category Selection\n     */\n    selectRange(fromId, toId, addToSelection = false) {\n        const\n            me        = this,\n            { store } = me,\n            selection = me.internalSelectRange(store.getById(fromId), store.getById(toId), true);\n\n        me._shiftSelectRange = null; // For below function to not replace last range with new one\n        me.performSelection(selection);\n    }\n\n    // endregion\n\n    // region Public cell selection\n\n    /**\n     * In cell selection mode, this will get the cell selector for the (last) selected cell. Set to an available cell\n     * selector to select only that cell. Or use {@link #function-selectCell()} instead.\n     * @property {Grid.util.Location}\n     * @category Selection\n     */\n    get selectedCell() {\n        return this._selectedCells[this._selectedCells.length - 1];\n    }\n\n    set selectedCell(cellSelector) {\n        this.selectCells([cellSelector]);\n    }\n\n    /**\n     * In cell selection mode, this will get the cell selectors for all selected cells. Set to an array of available\n     * cell selectors. Or use {@link #function-selectCells()} instead.\n     * @property {Grid.util.Location[]}\n     * @category Selection\n     */\n    get selectedCells() {\n        return [...this._selectedCells];\n    }\n\n    set selectedCells(cellSelectors) {\n        this.selectCells(cellSelectors);\n    }\n\n    /**\n     * CSS selector for the currently selected cell. Format is \"[data-index=index] [data-column-id=column]\".\n     * @type {String}\n     * @category Selection\n     * @readonly\n     */\n    get selectedCellCSSSelector() {\n        const\n            cell = this.selectedCell,\n            row  = cell && this.getRowById(cell.id);\n\n        if (!cell || !row) return '';\n\n        return `[data-index=${row.dataIndex}] [data-column-id=${cell.columnId}]`;\n    }\n\n    /**\n     * If in cell selection mode, this selects one cell. If not, this selects the cell's record.\n     * @param {LocationConfig|Object} options A cell selector ({ id: rowId, columnId: 'columnId' }) or a config object\n     * @param {LocationConfig} options.cell  A cell selector ({ id: rowId, columnId: 'columnId' })\n     * @param {Boolean} [options.scrollIntoView] Specify `false` to prevent row from being scrolled into view\n     * @param {Boolean} [options.addToSelection] Specify `true` to add to selection, defaults to `false` which replaces\n     * @param {Boolean} [options.silent] Specify `true` to not trigger any events when selecting the cell\n     * @returns {Grid.util.Location} Cell selector\n     * @fires selectionChange\n     * @category Selection\n     */\n    selectCell(options) {\n        // Got a cell selector as first argument\n        if ('id' in options) {\n            options = {\n                cell : options\n            };\n\n            // Arguments backward's compability\n            options = Object.assign({\n                scrollIntoView : arguments[1],\n                addToSelection : arguments[2],\n                silent         : arguments[3]\n            }, options);\n        }\n\n        return this.selectCells(options)?.[0];\n    }\n\n    /**\n     * If in cell selection mode, this selects a number of cells. If not, this selects corresponding records.\n     * @param {Object|LocationConfig[]} options An array of cell selectors ({ id: rowId, columnId: 'columnId' }) or a config\n     * object\n     * @param {LocationConfig[]} options.cells An array of cell selectors { id: rowId, columnId: 'columnId' }\n     * @param {Boolean} [options.scrollIntoView] Specify `false` to prevent row from being scrolled into view\n     * @param {Boolean} [options.addToSelection] Specify `true` to add to selection, defaults to `false` which replaces\n     * @param {Boolean} [options.silent] Specify `true` to not trigger any events when selecting the cell\n     * @returns {Grid.util.Location[]} Cell selectors\n     * @returns {Grid.util.Location[]} Cell selectors\n     * @fires selectionChange\n     * @category Selection\n     */\n    selectCells(options) {\n        // Got a cell selector array as first argument\n        if (Array.isArray(options)) {\n            options = {\n                cells : options\n            };\n        }\n\n        const\n            me                 = this,\n            {\n                cells          = options.cell ? [options.cell] : [], // Got a cell instead of cells\n                scrollIntoView = true,\n                addToSelection = false,\n                silent         = false\n            }                  = options,\n            selectionChange    = me.prepareSelection(null, cells, !addToSelection);\n\n        if (!addToSelection) {\n            me._shiftSelectRange = null;\n        }\n\n        me.performSelection(selectionChange, true, silent);\n\n        if (scrollIntoView) {\n            me.scrollRowIntoView(cells[0].id, {\n                column : cells[0].columnId\n            });\n        }\n\n        return me.isCellSelectionMode ? selectionChange.selectedCells : selectionChange.selectedRecords;\n    }\n\n    /**\n     * If in cell selection mode, this deselects one cell. If not, this deselects the cell's record.\n     * @param {LocationConfig} cellSelector\n     * @returns {Grid.util.Location} Normalized cell selector\n     * @category Selection\n     */\n    deselectCell(cellSelector) {\n        return this.deselectCells([cellSelector])?.[0];\n    }\n\n    /**\n     * If in cell selection mode, this deselects a number of cells. If not, this deselects corresponding records.\n     * @param {LocationConfig[]} cellSelectors\n     * @returns {Grid.util.Location[]} Normalized cell selectors\n     * @category Selection\n     */\n    deselectCells(cellSelectors) {\n        const selectionChange = this.prepareSelection(cellSelectors);\n        this.performSelection(selectionChange);\n        return this.isCellSelectionMode ? selectionChange.deselectedCells : selectionChange.deselectedRecords;\n    }\n\n    // Used by keymap to toggle selection of currently focused cell.\n    toggleSelection(keyEvent) {\n        const\n            me          = this,\n            {\n                _focusedCell,\n                selectionMode\n            }           = me,\n            isRowNumber = me.isRowNumberSelecting(_focusedCell),\n            isSelected  = me.isCellSelected(_focusedCell, true);\n\n        // Only if keyboardNavigation selection is deactivated and were not focusing an actionable cell\n        if (selectionMode.selectOnKeyboardNavigation === true || _focusedCell.isActionable) {\n            // Return false to ley keyMap know we didn't handle this event\n            return false;\n        }\n\n        me.performSelection(\n            me.prepareSelection(\n                isSelected ? _focusedCell : null,\n                isSelected ? null : _focusedCell,\n                !selectionMode.multiSelect,\n                isRowNumber\n            ));\n\n        // Space key has preventDefault = false somewhere\n        keyEvent.preventDefault();\n    }\n\n    /**\n     * Selects a range of cells, from a cell selector (Location) to another\n     * @param {Grid.util.Location|LocationConfig} from\n     * @param {Grid.util.Location|LocationConfig} to\n     * @category Selection\n     */\n    selectCellRange(from, to) {\n        this.performSelection(this.internalSelectRange(from, to));\n    }\n\n    // endregion\n\n    // region Private convenience functions & properties\n    getSelection() {\n        if (this.isRowSelectionMode) {\n            return this.selectedRecords;\n        }\n        else {\n            return this.selectedCells;\n        }\n    }\n\n    // Makes sure the same record or cell isn't deselected and selected at the same time. Selection will take precedence\n    cleanSelectionChange(selectionChange) {\n        const\n            {\n                deselectedRecords,\n                selectedRecords,\n                deselectedCells,\n                selectedCells\n            } = selectionChange;\n\n        // Filter out records which is both selected and deselected\n        if (deselectedRecords?.length && selectedRecords?.length) {\n            selectionChange.deselectedRecords = deselectedRecords.filter(dr => !selectedRecords.some(sr => dr === sr));\n        }\n\n        // Filter out cells which is both selected and deselected\n        if (deselectedCells?.length && selectedCells?.length) {\n            selectionChange.deselectedCells = deselectedCells.filter(dc => !selectedCells.some(sc => dc.equals(sc, true)));\n        }\n\n        return selectionChange;\n    }\n\n    getSelectedCellsForRecords(records) {\n        return this._selectedCells.filter(cell => cell.id && records.some(record => record.id === cell.id));\n    }\n\n    delayUntilMouseUp(fn) {\n        const detacher = EventHelper.on({\n            element : globalThis,\n            blur    : (ev) => fn(ev, detacher),\n            mouseup : (ev) => fn(ev, detacher),\n            thisObj : this,\n            once    : true\n        });\n    }\n\n    get isRowSelectionMode() {\n        return !this.isCellSelectionMode;\n    }\n\n    get isCellSelectionMode() {\n        return this.selectionMode.cell === true;\n    }\n\n    // Checks if rowNumber is activated and that all arguments (cellselectors) is of type rownumber\n    isRowNumberSelecting(...selectors) {\n        return this.selectionMode.rowNumber && !selectors.some(cs => cs.column.type !== 'rownumber');\n    }\n\n    // endregion\n\n    //region Navigation\n\n    // Used by keyMap to extend selection range\n    extendSelectionLeft() {\n        this.extendSelection('Left');\n    }\n\n    // Used by keyMap to extend selection range\n    extendSelectionRight() {\n        this.extendSelection('Right');\n    }\n\n    // Used by keyMap to extend selection range\n    extendSelectionUp() {\n        this.extendSelection('Up');\n    }\n\n    // Used by keyMap to extend selection range\n    extendSelectionDown() {\n        this.extendSelection('Down');\n    }\n\n    // Used by keyMap to extend selection range\n    extendSelection(dir) {\n        this._isKeyboardRangeSelecting = true;\n        this['navigate' + dir]();\n        this._isKeyboardRangeSelecting = false;\n    }\n\n    // Called from GridNavigation on mouse or keyboard events\n    // Single entry point for all default user selection actions\n    onCellNavigate(me, fromCellSelector, toCellSelector, doSelect) {\n        const\n            {\n                selectionMode,\n                _selectionListenersDetachers\n            }                                            = me,\n            { rowReorder }                                = me.features,\n            { multiSelect, deselectOnClick, dragSelect } = selectionMode,\n            { ctrlKeyDown, shiftKeyDown }                = GlobalEvents,\n            isMouseLeft                                  = GlobalEvents.isMouseDown(),\n            isMouseRight                                 = GlobalEvents.isMouseDown(2),\n            currentEvent                                 = GlobalEvents.currentMouseDown || GlobalEvents.currentKeyDown,\n            currentTarget                                = currentEvent?.target;\n\n        // To be sure we got Locations\n        toCellSelector = me.normalizeCellContext(toCellSelector);\n\n        if (\n            !doSelect ||\n            // Do not affect selection if navigating into header row.\n            toCellSelector.rowIndex === -1 ||\n            toCellSelector.record?.isGroupHeader ||\n            // Don't allow keyboard selection if keyboardNavigation is deactivated\n            (currentEvent?.fromKeyMap && !selectionMode.selectOnKeyboardNavigation) ||\n            // CheckColumn events are handled by the CheckColumn itself.\n            me.columns.getById(toCellSelector.columnId) === me.checkboxSelectionColumn ||\n            selectionMode.checkboxOnly ||\n            // Don't select on the row reorder gripper\n            (currentTarget && rowReorder?.gripOnly && rowReorder.isElementDraggable(currentTarget, currentEvent)) ||\n            currentEvent?.handled === true\n        ) {\n            return;\n        }\n\n        // Save adding state unless shift key\n        if (!shiftKeyDown) {\n            me._isAddingToSelection = ctrlKeyDown && multiSelect;\n            me._selectionStartCell  = toCellSelector; // To be able to begin a new range\n        }\n\n        // Flags that it's possible for onSelectDrag to apply its logic if the right conditions are met\n        if (multiSelect && dragSelect && isMouseLeft && !_selectionListenersDetachers.selectiondrag) {\n            _selectionListenersDetachers.selectiondrag = EventHelper.on({\n                name      : 'selectiondrag',\n                element   : globalThis,\n                blur      : 'onSelectionEnd',\n                mouseup   : 'onSelectionEnd',\n                mousemove : 'onSelectionDrag',\n                thisObj   : me\n            });\n        }\n\n        const\n            startCell = me._selectionStartCell,\n            adding    = me._isAddingToSelection;\n\n        // Select range on shiftKey\n        if (((shiftKeyDown && isMouseLeft) || me._isKeyboardRangeSelecting) && startCell && multiSelect) {\n            me.performSelection(\n                me.internalSelectRange(\n                    startCell,\n                    toCellSelector,\n                    me.isRowNumberSelecting(startCell, toCellSelector)\n                )\n            );\n        }\n        else {\n            let delay             = false,\n                continueSelecting = true,\n                deselect;\n\n            // If current is already selected\n            if (me.isCellSelected(toCellSelector, true)) {\n                // Do nothing if we right-clicked already selected row/cell\n                if (isMouseRight) {\n                    return;\n                }\n                // Deselect current if selected and multiselecting or deselect all if deselectOnClick is true\n                if ((adding || deselectOnClick)) {\n                    deselect = deselectOnClick ? null : [toCellSelector];\n                    continueSelecting = false; // Only deselect at this code path\n                }\n                // If this is only row or cell that's selected\n                else if (me.selectedRecords.length + (me.isCellSelectionMode ? me._selectedCells.length : 0) <= 1) {\n                    // Should stay selected, do no more\n                    return;\n                }\n                // Delay if click a selected cell which will be deselected (for dragging)\n                delay = deselectOnClick || multiSelect;\n            }\n            // deselect all if not multiselecting\n            if (!deselect && !adding) {\n                deselect = null;\n                // Set flag so that dragselection functionality know to clear selection if needed\n                if (dragSelect && delay && _selectionListenersDetachers.selectiondrag) {\n                    me._clearSelectionOnSelectionDrag = true;\n                }\n            }\n\n            // Wrapping selection in a function to be called either directly or on mouse up\n            const finishSelection = (mouseUpEvent, detacher) => {\n                detacher?.();\n                if (mouseUpEvent?.target?.nodeType === Node.ELEMENT_NODE) {\n                    // If we are waiting for mouseUp and have moved to a different cell, abort selection change\n                    const mouseUpSelector = new Location(mouseUpEvent.target);\n                    if (mouseUpSelector?.grid && !mouseUpSelector.equals(toCellSelector, true)) {\n                        return;\n                    };\n                }\n\n                if (!shiftKeyDown) {\n                    me._shiftSelectRange = null; // Clear any previous range selected\n                }\n\n                me.performSelection(\n                    me.prepareSelection(\n                        deselect,\n                        continueSelecting && [toCellSelector],\n                        deselect === null,\n                        continueSelecting && me.isRowNumberSelecting(toCellSelector)\n                    )\n                );\n            };\n\n            // Delay doing the selection until mouse up for allowing drag of row in certain cases\n            if (delay) {\n                me.delayUntilMouseUp(finishSelection);\n            }\n            else {\n                finishSelection();\n            }\n        }\n    }\n\n    // endregion\n\n    // region Internal selection & deselection functions\n\n    /**\n     * Used internally to prepare a number of cells or records for selection/deselection depending on if cell\n     * selectionMode is activated. This function will not select/deselect anything by itself\n     * (that's done in performSelection).\n     * @param {LocationConfig[]|Core.data.Model[]} cellSelectorsToDeselect Array of cell selectors or records.\n     * @param {LocationConfig[]|Core.data.Model[]} cellSelectorsToSelect Array of cell selectors or records.\n     * @param {Boolean} deselectAll Set to `true` to clear all selected records and cells.\n     * @param {Boolean} forceRecordSelection Set to `true` to force record selection even if cell selection is active.\n     * @returns {Object} selectionChange object to use for UI update\n     * @private\n     * @category Selection\n     */\n    prepareSelection(cellSelectorsToDeselect, cellSelectorsToSelect, deselectAll = false, forceRecordSelection = false) {\n        const\n            me                 = this,\n            isDragging         = me._isSelectionDragging,\n            { includeParents } = me.selectionMode,\n            selectedRecords    = [],\n            selectedCells      = [];\n        let deselectedCells    = [],\n            deselectedRecords  = [];\n\n        if (deselectAll) {\n            deselectedCells = me._selectedCells;\n            deselectedRecords = me.selectedRecords;\n        }\n        else if (cellSelectorsToDeselect) {\n            for (const selector of ArrayHelper.asArray(cellSelectorsToDeselect)) {\n                const\n                    cellSelector = me.normalizeCellContext(selector),\n                    record = cellSelector?.record || (selector.isModel ? selector : me.store.getById(cellSelector.id));\n\n                if (!cellSelector.isSpecialRow) {\n                    deselectedCells.push(cellSelector);\n                    if (record && !deselectedRecords.some(r => r.id === record.id)) {\n                        // When dragging, this path is taken but nothing is actually selected until mouseup\n                        // So should check if selected for dragselection (until mouseup)\n                        if (isDragging || me.isSelected(record)) {\n                            deselectedRecords.push(record);\n                        }\n                        // If configured, also deselect children\n                        if (me.selectionMode.includeChildren && me.selectionMode.multiSelect && !record.isLeaf && record.allChildren?.length) {\n                            for (const child of record.allChildren) {\n                                if (!deselectedRecords.some(r => r.id === child.id) && (isDragging || me.isSelected(child))) {\n                                    deselectedRecords.push(child);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (cellSelectorsToSelect) {\n            for (const selector of ArrayHelper.asArray(cellSelectorsToSelect)) {\n                const\n                    cellSelector = me.normalizeCellContext(selector),\n                    record = cellSelector?.record || (selector.isModel ? selector : me.store.getById(cellSelector.id));\n\n                if (record && !cellSelector.isSpecialRow) {\n                    // Only select cells if in cell selection mode and not forcing record selection\n                    if (me.isCellSelectionMode && !forceRecordSelection) {\n                        selectedCells.push(cellSelector);\n                    }\n                    if ((me.isRowSelectionMode || forceRecordSelection) && !selectedRecords.some(r => r.id === record.id)) {\n                        selectedRecords.push(record);\n                        // If configured, also select children\n                        if (me.selectionMode.includeChildren && me.selectionMode.multiSelect && !record.isLeaf && record.allChildren?.length) {\n                            for (const child of record.allChildren) {\n                                if (!selectedRecords.some(r => r.id === child.id)) {\n                                    selectedRecords.push(child);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        // This setting could be either off, or true/'all' or 'some'\n        if (includeParents && (deselectedRecords.length || selectedRecords.length)) {\n            const\n                allChanges         = [...deselectedRecords, ...selectedRecords],\n                lowestLevelParents = ArrayHelper.unique(\n                    allChanges.filter(rec =>\n                        rec.parent && !rec.allChildren.some(child =>\n                            allChanges.includes(child))).map(rec => rec.parent));\n\n            lowestLevelParents.forEach(parent => me.toggleParentSelection(parent, selectedRecords, deselectedRecords));\n\n        }\n\n        return me.cleanSelectionChange({\n            selectedCells,\n            selectedRecords,\n            deselectedCells,\n            deselectedRecords,\n            deselectAll,\n            action : selectedRecords?.length || selectedCells?.length ? 'select' : 'deselect'\n        });\n    }\n\n    toggleParentSelection(parent, toSelect, toDeselect) {\n        if (!parent || parent.isRoot) {\n            return;\n        }\n\n        const\n            isSelected      = this.isSelected(parent),\n            inToSelect      = toSelect.includes(parent),\n            inToDeselect    = toDeselect.includes(parent),\n            childIsSelected = child => (this.isSelected(child) && !toDeselect.includes(child)) || toSelect.includes(child);\n\n        if (this.selectionMode.includeParents === 'some') {\n            // If any children are selected\n            if (parent.allChildren.some(childIsSelected)) {\n                // And parent is not being deselected => select\n                if ((!isSelected || inToDeselect) && !inToSelect) {\n                    toSelect.push(parent);\n                }\n            }\n            // No children are selected and parent is selected => deselect\n            else if (isSelected && !inToDeselect) {\n                toDeselect.push(parent);\n            }\n        }\n        else { // includeParents = true/'all'\n            if (isSelected) {\n                // If previously selected, and some child is to be deselected => deselect\n                if (!inToDeselect && !inToSelect && parent.allChildren.some(child => toDeselect.includes(child))) {\n                    toDeselect.push(parent);\n                }\n            }\n            else if (!inToSelect) {\n                // If not previously selected, select if all children are selected\n                if (parent.allChildren.every(childIsSelected)) {\n                    toSelect.push(parent);\n                }\n            }\n        }\n\n        // Go up one level if it exists\n        if (parent.parent) {\n            this.toggleParentSelection(parent.parent, toSelect, toDeselect);\n        }\n    }\n\n    /**\n     * Used internally to select a range of cells or records depending on selectionMode. Used in both shift-selection\n     * and for drag selection. Will remember current selection range and replace it with new one when it changes. But a\n     * range which is completed (drag select mouse up or a new shift range starting point has been set) will remain.\n     * This function will not update UI (that's done in refreshGridSelectionUI).\n     * @param {LocationConfig} fromSelector\n     * @param {LocationConfig} toSelector\n     * @returns {Object} selectionChange object to use for UI update\n     * @private\n     * @category Selection\n     */\n    internalSelectRange(fromSelector, toSelector, forceRecordSelection = false) {\n        const\n            me              = this,\n            selectRecords   = me.isRowSelectionMode || forceRecordSelection,\n            selectionChange = me.prepareSelection(me._shiftSelectRange,\n                me.getRange(fromSelector, toSelector, selectRecords), false, forceRecordSelection);\n\n        me._shiftSelectRange = selectionChange[`selected${selectRecords ? 'Records' : 'Cells'}`];\n\n        return selectionChange;\n    }\n\n    /**\n     * Used internally to get a range of cell selectors from a start selector to an end selector.\n     * @private\n     */\n    getRange(fromSelector, toSelector, selectRecords = false) {\n        const\n            me            = this,\n            { store }     = me,\n            fromCell      = me.normalizeCellContext(fromSelector),\n            toCell        = me.normalizeCellContext(toSelector),\n            startRowIndex = Math.min(fromCell.rowIndex, toCell.rowIndex),\n            endRowIndex   = Math.max(fromCell.rowIndex, toCell.rowIndex),\n            toSelect      = [],\n            startColIndex = Math.min(fromCell.columnIndex, toCell.columnIndex),\n            endColIndex   = Math.max(fromCell.columnIndex, toCell.columnIndex);\n\n        if (startRowIndex === -1 || endRowIndex === -1) {\n            throw new Error('Record not found in selectRange');\n        }\n\n        // Row selection\n        if (selectRecords) {\n            const range = store.getRange(startRowIndex, endRowIndex + 1, false);\n            // To make selectedRecords in correct order when range selecting upwards\n            if (toCell.rowIndex < fromCell.rowIndex) {\n                range.reverse();\n            }\n            toSelect.push(...range);\n        }\n        // Cell selection\n        else {\n            // Loops from start cell to end cell and creates selectors for all containing cells\n            for (let rIx = startRowIndex; rIx <= endRowIndex; rIx++) {\n                for (let cIx = startColIndex; cIx <= endColIndex; cIx++) {\n                    toSelect.push({ rowIndex : rIx, columnIndex : cIx });\n                }\n            }\n        }\n\n        return toSelect.map(s => me.normalizeCellContext(s));\n    }\n\n    // endregion\n\n    // region Update UI & trigger events\n\n    performSelection(selectionChange, updateUI = true, silent = false) {\n        const\n            me      = this,\n            {\n                selectedRecords,\n                selectedCells,\n                deselectedRecords,\n                deselectedCells,\n                action\n            }       = selectionChange,\n            rowMode = me.isRowSelectionMode;\n\n        // Fire event to be able to prevent selection\n        if (me.trigger('beforeSelectionChange', {\n            mode       : rowMode ? 'row' : 'cell',\n            action,\n            selected   : (rowMode ? selectedRecords : selectedCells) || [],\n            deselected : (rowMode ? deselectedRecords : deselectedCells) || [],\n            selection  : (rowMode ? me.selectedRecords : me.selectedCells) || []\n        }) === false) {\n            return;\n        }\n\n        // If deselecting all cells\n        if (me._selectedCells === deselectedCells) {\n            me._selectedCells   = [];\n        }\n        // Not deselecting all cells\n        else {\n            const keepCells = [];\n\n            for (const selectedCell of me._selectedCells) {\n                if (!deselectedCells.some(cellSelector => selectedCell.equals(cellSelector, true))) {\n                    keepCells.push(selectedCell);\n                }\n            }\n\n            me._selectedCells   = keepCells;\n        }\n\n        selectionChange.deselectedRecords = [...selectionChange.deselectedRecords];\n        // If deselecting all rows\n        if (deselectedRecords === me.selectedRecords) {\n            me.changeSelectedRecordCollectionSilent(c => c.clear());\n        }\n        // Not deselecting all rows\n        else {\n            const keepRecords = [];\n\n            for (const selectedRecord of me.selectedRecords) {\n                if (!deselectedRecords.some(record => selectedRecord.id === record.id)) {\n                    keepRecords.push(selectedRecord);\n                }\n            }\n\n            me.changeSelectedRecordCollectionSilent(c => c.values = keepRecords);\n        }\n\n        // New selection\n        if (selectedCells.length) {\n            for (const selectedCell of selectedCells) {\n                if (!me._selectedCells.some(cellSelector => cellSelector.equals(selectedCell, true))) {\n                    me._selectedCells.push(selectedCell);\n                }\n            }\n        }\n        if (selectedRecords.length) {\n            me.changeSelectedRecordCollectionSilent(c => c.add(...selectedRecords));\n        }\n\n        if (updateUI) {\n            me.refreshGridSelectionUI(selectionChange);\n        }\n\n        me.afterSelectionChange(selectionChange);\n\n        if (!silent) {\n            me.triggerSelectionChangeEvent(selectionChange);\n        }\n    }\n\n    // Makes sure the DOM is up-to-date with current selection.\n    refreshGridSelectionUI({ selectedRecords, selectedCells, deselectedRecords, deselectedCells }) {\n        const\n            me                          = this,\n            { checkboxSelectionColumn } = me;\n\n        // Row selection\n        checkboxSelectionColumn?.suspendEvents();\n        me.updateGridSelectionRecords(selectedRecords, true);\n        me.updateGridSelectionRecords(deselectedRecords, false);\n        me.updateCheckboxHeader();\n        checkboxSelectionColumn?.resumeEvents();\n\n        // Cell selection\n        if (me.isCellSelectionMode) {\n            me.updateGridSelectionCells(selectedCells, true);\n            if (me.selectionMode.column) {\n                me.updateGridSelectionColumns(selectedCells);\n            }\n        }\n        me.updateGridSelectionCells(deselectedCells, false);\n    }\n\n    // Loops through records and updates Grid rows\n    updateGridSelectionRecords(records, selected) {\n        const { checkboxSelectionColumn } = this;\n        if (records?.length) {\n            for (let i = 0; i < records.length; i++) {\n                const row = this.getRowFor(records[i]);\n                if (row) {\n                    row.toggleCls('b-selected', selected);\n                    row.setAttribute('aria-selected', selected);\n                    if (checkboxSelectionColumn && !checkboxSelectionColumn.hidden && !records[i].isSpecialRow) {\n                        row.getCell(checkboxSelectionColumn.id).widget.checked = selected;\n                    }\n                }\n            }\n        }\n    }\n\n    // Loops through cell selectors and updates Grid cell's\n    updateGridSelectionCells(cells, selected) {\n        if (cells?.length) {\n            for (let i = 0; i < cells.length; i++) {\n                const cell = this.getCell(cells[i]);\n                if (cell) {\n                    cell.setAttribute('aria-selected', selected);\n                    cell.classList.toggle('b-selected', selected);\n                }\n            }\n        }\n    }\n\n    // Loops through columns to toggle their selected state\n    updateGridSelectionColumns(selectedCells) {\n        const { count } = this.store;\n        for (const column of this.columns.visibleColumns) {\n            column.element?.classList.toggle(\n                'b-selected',\n                selectedCells?.filter(s => s.columnId === column.id).length === count\n            );\n        }\n    }\n\n    triggerSelectionChangeEvent(selectionChange) {\n        const rowMode = this.isRowSelectionMode;\n\n        this.trigger('selectionChange', {\n            mode       : rowMode ? 'row' : 'cell',\n            action     : selectionChange.action,\n            selected   : (rowMode ? selectionChange.selectedRecords : selectionChange.selectedCells) || [],\n            deselected : (rowMode ? selectionChange.deselectedRecords : selectionChange.deselectedCells) || [],\n            selection  : (rowMode ? this.selectedRecords : this.selectedCells) || []\n        });\n    }\n\n    //endregion\n\n    doDestroy() {\n        this.selectedRecordCollection?.destroy();\n        this._selectedCells.length = 0;\n        for (const detacher in this._selectionListenersDetachers) {\n            this._selectionListenersDetachers[detacher]();\n        }\n        super.doDestroy();\n    }\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n\n};\n","import Base from '../../../Core/Base.js';\nimport WidgetHelper from '../../../Core/helper/WidgetHelper.js';\n// TODO: prevent multiple rerenders\n\n/**\n * @module Grid/view/mixin/GridState\n */\nconst\n    suspendStoreEvents = subGrid => subGrid.columns.suspendEvents(),\n    resumeStoreEvents = subGrid => subGrid.columns.resumeEvents(),\n    fillSubGridColumns = subGrid => {\n        subGrid.columns.clearCaches();\n        subGrid.columns.fillFromMaster();\n    },\n    compareStateSortIndex = (a, b) => a.stateSortIndex - b.stateSortIndex;\n\n/**\n * Mixin for Grid that handles state. It serializes the following grid properties:\n *\n * * rowHeight\n * * selectedCell\n * * selectedRecords\n * * columns (order, widths, visibility)\n * * store (sorters, groupers, filters)\n * * scroll position\n *\n * See {@link Core.mixin.State} for more information on state.\n *\n * @demo Grid/state\n * @inlineexample Grid/view/mixin/GridState.js\n * @mixin\n */\nexport default Target => class GridState extends (Target || Base) {\n    static get $name() {\n        return 'GridState';\n    }\n\n    static get configurable() {\n        return {\n            statefulEvents : ['subGridCollapse', 'subGridExpand', 'horizontalScroll', 'stateChange']\n        };\n    }\n\n    /**\n     * Gets or sets grid's state. Check out {@link Grid.view.mixin.GridState} mixin for details.\n     * @member {Object} state\n     * @property {Object[]} state.columns\n     * @property {Number} state.rowHeight\n     * @property {Object} state.scroll\n     * @property {Number} state.scroll.scrollLeft\n     * @property {Number} state.scroll.scrollTop\n     * @property {Array} state.selectedRecords\n     * @property {String} state.style\n     * @property {String} state.selectedCell\n     * @property {Object} state.store\n     * @property {Object} state.store.sorters\n     * @property {Object} state.store.groupers\n     * @property {Object} state.store.filters\n     * @property {Object} state.subGrids\n     * @category State\n     */\n\n    updateStore(store, was) {\n        super.updateStore?.(store, was);\n\n        this.detachListeners('stateStoreListeners');\n\n        store?.ion({\n            name    : 'stateStoreListeners',\n            filter  : 'triggerUpdate',\n            group   : 'triggerUpdate',\n            sort    : 'triggerUpdate',\n            thisObj : this\n        });\n    }\n\n    updateColumns(columns, was) {\n        super.updateColumns?.(columns, was);\n\n        this.detachListeners('stateColumnListeners');\n\n        columns.ion({\n            name    : 'stateColumnListeners',\n            change  : 'triggerUpdate',\n            thisObj : this\n        });\n    }\n\n    updateRowManager(manager, was) {\n        super.updateRowManager?.(manager, was);\n\n        this.detachListeners('stateRowManagerListeners');\n\n        manager.ion({\n            name      : 'stateRowManagerListeners',\n            rowHeight : 'triggerUpdate',\n            thisObj   : this\n        });\n    }\n\n    triggerUpdate() {\n        this.trigger('stateChange');\n    }\n\n    finalizeInit() {\n        super.finalizeInit();\n\n        this.ion({\n            selectionChange : 'triggerUpdate',\n            thisObj         : this\n        });\n    }\n\n    /**\n     * Get grid's current state for serialization. State includes rowHeight, headerHeight, selectedCell,\n     * selectedRecordId, column states and store state etc.\n     * @returns {Object} State object to be serialized\n     * @private\n     */\n    getState() {\n        const\n            me    = this,\n            style = me.element.style.cssText,\n            state = {\n                rowHeight : me.rowHeight\n            };\n\n        if (style) {\n            state.style = style;\n        }\n\n        if (me.selectedCell) {\n            // TODO: Create wrapper class to avoid JSON.stringify recursion in state.selectedCell.\n            const { id, columnId } = me.selectedCell;\n            state.selectedCell = { id, columnId };\n        }\n\n        state.selectedRecords = me.selectedRecords.map(entry => entry.id);\n        state.columns = me.columns.allRecords.map(column => column.getState());\n        state.store = me.store.state;\n        state.scroll = me.storeScroll();\n\n        state.subGrids = {};\n\n        me.eachSubGrid(subGrid => {\n            const config = state.subGrids[subGrid.region] = state.subGrids[subGrid.region] || {};\n\n            if (subGrid.isPainted) {\n                if (subGrid.flex == null) {\n                    config.width = subGrid.width;\n                }\n            }\n            else {\n                if (subGrid.config.width != null) {\n                    config.width = subGrid.config.width;\n                }\n                else {\n                    config.flex = subGrid.config.flex;\n                }\n            }\n\n            config.collapsed = subGrid.collapsed ?? false;\n\n            // Part of a collapsed SubGrid's state is the state to restore to when expanding again.\n            if (config.collapsed) {\n                config._beforeCollapseState = subGrid._beforeCollapseState;\n            }\n        });\n\n        return state;\n    }\n\n    /**\n     * Apply previously stored state.\n     * @param {Object} state\n     * @private\n     */\n    applyState(state) {\n        const me = this;\n\n        // Applying state will call row renderer at least 7 times. Suspending refresh helps to save some time.\n        // Roughly on default testing grid apply state takes 26ms without suspend and 16ms with it.\n        me.suspendRefresh();\n\n        // Do this first since it might perform full rendering of contents, recreating filterbar header fields\n        if ('columns' in state) {\n            let columnsChanged = false,\n                needSort = false;\n\n            // We're going to renderContents anyway, so stop the ColumnStores from updating the UI\n            me.columns.suspendEvents();\n            me.eachSubGrid(suspendStoreEvents);\n\n            // each column triggers rerender at least once...\n            state.columns.forEach((columnState, index) => {\n                const column = me.columns.getById(columnState.id);\n\n                if (column) {\n                    const columnGeneration = column.generation;\n\n                    column.applyState(columnState);\n                    columnsChanged = columnsChanged || (column.generation !== columnGeneration);\n\n                    // In case a sort is needed, stamp in the ordinal position.\n                    column.stateSortIndex = index;\n\n                    // If we find one out of order, only then do we need to sort\n                    if (column.allIndex !== index) {\n                        needSort = columnsChanged = true;\n                    }\n                }\n            });\n\n            if (columnsChanged) {\n                me.eachSubGrid(fillSubGridColumns);\n            }\n            if (needSort) {\n                me.eachSubGrid(subGrid => {\n                    subGrid.columns.records.sort(compareStateSortIndex);\n                    subGrid.columns.allRecords.sort(compareStateSortIndex);\n                });\n                me.columns.sort({\n                    fn        : compareStateSortIndex,\n                    // always sort ascending\n                    ascending : true\n                });\n            }\n\n            // If we have been painted, and column restoration changed the column layout, refresh contents\n            if (me.isPainted && columnsChanged) {\n                me.renderContents();\n            }\n\n            // Allow ColumnStores to update the UI again\n            me.columns.resumeEvents();\n            me.eachSubGrid(resumeStoreEvents);\n        }\n\n        if ('subGrids' in state) {\n            me.eachSubGrid(subGrid => {\n                if (subGrid.region in state.subGrids) {\n                    const subGridState = state.subGrids[subGrid.region];\n\n                    if ('width' in subGridState) {\n                        subGrid.width = subGridState.width;\n                    }\n                    else if ('flex' in subGridState) {\n                        subGrid.flex = subGridState.flex;\n                    }\n\n                    if ('collapsed' in subGridState) {\n                        subGrid.collapsed = subGridState.collapsed;\n                        subGrid._beforeCollapseState = subGridState._beforeCollapseState;\n                    }\n                }\n\n                subGrid.clearWidthCache();\n            });\n        }\n\n        if ('rowHeight' in state) {\n            me.rowHeight = state.rowHeight;\n        }\n\n        if ('style' in state) {\n            me.style = state.style;\n        }\n\n        if ('selectedCell' in state) {\n            me.selectedCell = state.selectedCell;\n        }\n\n        if ('store' in state) {\n            me.store.state = state.store;\n        }\n\n        if ('selectedRecords' in state) {\n            me.selectedRecords = state.selectedRecords;\n        }\n\n        me.resumeRefresh(true);\n\n        // Update scroll state\n        me.eachSubGrid(s => s.refreshFakeScroll());\n\n        if ('scroll' in state) {\n            me.restoreScroll(state.scroll);\n\n            // We need to force resize handler on all observable elements, because vertical scroll triggered by the\n            // previous method will suspend the listener. So by the time ResizeObserver triggers mutation handler\n            // listener won't actually update widget size.\n            // Handler works here because we haven't _yet_ suspended it, it will happen one animation frame after\n            // scroll event is triggered\n            if (state.scroll.scrollTop) {\n                me.element.querySelectorAll('.b-resize-monitored').forEach(element => {\n                    const widget = WidgetHelper.fromElement(element);\n\n                    if (widget) {\n                        widget.onElementResize(element);\n                    }\n                });\n            }\n        }\n    }\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {\n    }\n};\n","/**\n * @module Grid/util/SubGridScroller\n */\n\nimport Scroller from '../../Core/helper/util/Scroller.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\n\nconst\n    immediatePromise     = Promise.resolve(),\n    defaultScrollOptions = {\n        block : 'nearest'\n    };\n\n/**\n * A Scroller subclass which handles scrolling in a SubGrid. Needs special treatment since the SubGrid itself only\n * allows horizontal scrolling, while the vertical scrolling is done by an outer element containing all subgrids.\n *\n * @internal\n */\nexport default class SubGridScroller extends Scroller {\n    // SubGrids do not drive the scrollWidth of their partners (Header and Footer)\n    // SubGrids scrollWidth is propagated from the Header by SubGrid.refreshFakeScroll.\n    static get configurable() {\n        return {\n            propagate : false,\n            overflowX : 'hidden-scroll'\n        };\n    }\n\n    scrollIntoView(element, options = defaultScrollOptions) {\n        const me = this,\n            { xDelta, yDelta } = me.getDeltaTo(element, options),\n            result = (xDelta || yDelta) ? me.scrollBy(xDelta, yDelta, options) : immediatePromise;\n\n        if (options.highlight || options.focus) {\n            result.then(() => {\n                if (options.highlight) {\n                    if (element instanceof Rectangle) {\n                        element.translate(-xDelta, -yDelta).highlight();\n                    }\n                    else {\n                        DomHelper.highlight(element);\n                    }\n                }\n                options.focus && element.focus && element.focus();\n            });\n        }\n        return result;\n    }\n\n    scrollBy(xDelta, yDelta, options) {\n        const yPromise = yDelta && this.yScroller.scrollBy(0, yDelta, options),\n            xPromise = xDelta && super.scrollBy(xDelta, 0, options);\n\n        if (xPromise && xPromise.cancel && yPromise && yPromise.cancel) {\n            const cancelX = xPromise.cancel,\n                cancelY = yPromise.cancel;\n\n            // Set up cross canceling\n            xPromise.cancel = yPromise.cancel = () => {\n                cancelX();\n                cancelY();\n            };\n            return Promise.all([xPromise, yPromise]);\n        }\n\n        return xPromise || yPromise || immediatePromise;\n    }\n\n    scrollTo(toX, toY, options) {\n        const\n            yPromise = (toY != null) && this.yScroller.scrollTo(null, toY, options),\n            xPromise = (toX != null) && super.scrollTo(toX, null, options);\n\n        // Keep partners in sync immediately unless we are going to animate our position.\n        // There are potentially three: The header, the footer and the docked fake horizontal scroller.\n        // It will be more efficient and maintain correct state doing it now.\n        if (!(options && options.animate)) {\n            this.syncPartners();\n        }\n\n        if (xPromise && xPromise.cancel && yPromise && yPromise.cancel) {\n            const cancelX = xPromise.cancel,\n                cancelY = yPromise.cancel;\n\n            // Set up cross canceling\n            xPromise.cancel = yPromise.cancel = () => {\n                cancelX();\n                cancelY();\n            };\n            return Promise.all([xPromise, yPromise]);\n        }\n\n        return xPromise || yPromise || immediatePromise;\n    }\n\n    get viewport() {\n        const\n            elementBounds = Rectangle.from(this.element),\n            viewport      = elementBounds.intersect(Rectangle.from(this.yScroller.element));\n        // For 0 height subgrids, viewport will be `false` but we still expect a Rectangle to be returned\n        return viewport || new Rectangle(elementBounds.x, elementBounds.y, elementBounds.width, 0);\n    }\n\n    set y(y) {\n        if (this.yScroller) {\n            this.yScroller.y = y;\n        }\n    }\n\n    get y() {\n        return this.yScroller ? this.yScroller.y : 0;\n    }\n\n    get maxY() {\n        return this.yScroller ? this.yScroller.maxY : 0;\n    }\n\n    get scrollHeight() {\n        return this.yScroller ? this.yScroller.scrollHeight : 0;\n    }\n\n    get clientHeight() {\n        return this.yScroller ? this.yScroller.clientHeight : 0;\n    }\n}\n","import BrowserHelper from '../../Core/helper/BrowserHelper.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport Widget from '../../Core/widget/Widget.js';\nimport Column from '../column/Column.js';\nimport SubGridScroller from '../util/SubGridScroller.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\nimport Scroller from '../../Core/helper/util/Scroller.js';\nimport EventHelper from '../../Core/helper/EventHelper.js';\n\n/**\n * @module Grid/view/SubGrid\n */\nconst sumWidths = (t, e) => t + e.getBoundingClientRect().width;\n\n/**\n * A SubGrid is a part of the grid (it has at least one and normally no more than two, called locked and normal). It\n * has its own header, which holds the columns to display rows for in the SubGrid. SubGrids are created by Grid, you\n * should not need to create instances directly.\n *\n * If not configured with a width or flex, the SubGrid will be sized to fit its columns. In this case, if all columns\n * have a fixed width (not using flex) then toggling columns will also affect the width of the SubGrid.\n *\n * @extends Core/widget/Widget\n */\nexport default class SubGrid extends Widget {\n    //region Config\n\n    static get $name() {\n        return 'SubGrid';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'subgrid';\n    }\n\n    /**\n     * Region (name) for this SubGrid\n     * @config {String} region\n     */\n\n    /**\n     * Column store, a store containing the columns for this SubGrid\n     * @config {Grid.data.ColumnStore} columns\n     */\n\n    static get defaultConfig() {\n        return {\n            insertRowsBefore : null,\n            appendTo         : null,\n            monitorResize    : true,\n            headerClass      : null,\n            footerClass      : null,\n\n            /**\n             * The subgrid \"weight\" determines its position among its SubGrid siblings.\n             * Higher weights go further right.\n             * @config {Number}\n             * @category Layout\n             */\n            weight : null,\n\n            /**\n             * Set `true` to start subgrid collapsed. To operate collapsed state on subgrid use\n             * {@link #function-collapse}/{@link #function-expand} methods.\n             * @config {Boolean}\n             * @default false\n             */\n            collapsed : null,\n\n            scrollable : {\n                // Each SubGrid only handles scrolling in the X axis.\n                // The owning Grid handles the Y axis.\n                overflowX : 'hidden-scroll'\n            },\n\n            scrollerClass : SubGridScroller,\n\n            // Will be set to true by GridSubGrids if it calculates the subgrids width based on its columns.\n            // Used to determine if hiding a column should affect subgrids width\n            hasCalculatedWidth : null,\n\n            /**\n             * Set `true` to disable moving columns into or out of this SubGrid.\n             * @config {Boolean}\n             * @default false\n             * @private\n             */\n            sealedColumns : null\n        };\n    }\n\n    static get configurable() {\n        return {\n            element                : true,\n            header                 : {},\n            footer                 : {},\n            virtualScrollerElement : true,\n            splitterElement        : true,\n            headerSplitter         : true,\n            scrollerSplitter       : true,\n            footerSplitter         : true,\n\n            /**\n             * Set to `false` to prevent this subgrid being resized with the {@link Grid.feature.RegionResize} feature\n             * @config {Boolean}\n             * @default true\n             */\n            resizable : null,\n\n            role : 'presentation'\n        };\n    }\n\n    static delayable = {\n        hideOverlayScroller : 1000\n    }\n\n    //endregion\n\n    //region Init\n\n    /**\n     * SubGrid constructor\n     * @param config\n     * @private\n     */\n    construct(config) {\n        const me = this;\n\n        super.construct(config);\n\n        this.rowManager.ion({ addRows : 'onAddRow', thisObj : this });\n\n        if (BrowserHelper.isFirefox) {\n            const\n                { element }      = me,\n                verticalScroller = me.grid.scrollable;\n\n            // Firefox cannot scroll vertically smoothly when using touch pad. Even a microscopic horizontal touch will\n            // abort the vertical scrolling. To counter this we ignore pointer events on the subgrid element temporarily\n            // until scroll stops. No test coverage.\n            // https://github.com/bryntum/support/issues/3000\n            let lastScrollTop = 0;\n            element.addEventListener('wheel', ({ ctrlKey, deltaY, deltaX }) => {\n                const isVerticalScroll = Math.abs(deltaY) > Math.abs(deltaX);\n\n                // Ignore wheel event with Control key pressed - it doesn't scroll, it either zooms scheduler or zooms\n                // the page.\n                if (!ctrlKey && isVerticalScroll && !me.scrollEndDetacher && verticalScroller.y !== lastScrollTop) {\n                    element.style.pointerEvents = 'none';\n                    lastScrollTop               = verticalScroller.y;\n\n                    me.scrollEndDetacher = verticalScroller.ion({\n                        scrollEnd : async() => {\n                            lastScrollTop               = verticalScroller.y;\n                            element.style.pointerEvents = '';\n\n                            me.scrollEndDetacher = null;\n                        },\n                        once : true\n                    });\n                }\n            });\n        }\n    }\n\n    doDestroy() {\n        const me = this;\n\n        me.header.destroy();\n        me.footer.destroy();\n        me.fakeScroller?.destroy();\n\n        me.virtualScrollerElement.remove();\n        me.splitterElements.forEach(element => element.remove());\n\n        super.doDestroy();\n    }\n\n    get barConfig() {\n        const\n            me              = this,\n            { width, flex } = me.element.style,\n            config          = {\n                subGrid  : me,\n                parent   : me,  // Contained widgets need to know their parents\n                maxWidth : me.maxWidth || undefined,\n                minWidth : me.minWidth || undefined\n            };\n\n        // If we have been configured with sizing, construct the Bar in sync.\n        if (flex) {\n            config.flex = flex;\n        }\n        else if (width) {\n            config.width = width;\n        }\n\n        return config;\n    }\n\n    changeHeader(header) {\n        return new this.headerClass(ObjectHelper.assign({\n            id : this.id + '-header'\n        }, this.barConfig, header));\n    }\n\n    changeFooter(footer) {\n        return new this.footerClass(ObjectHelper.assign({\n            id : this.id + '-footer'\n        }, this.barConfig, footer));\n    }\n\n    //endregion\n\n    //region Splitters\n\n    get splitterElements() {\n        return [this.splitterElement, this.headerSplitter, this.scrollerSplitter, this.footerSplitter];\n    }\n\n    /**\n     * Toggle (add/remove) class for splitters\n     * @param {String} cls class name\n     * @param {Boolean} [add] actions. Set to `true` to add class, `false` to remove\n     * @private\n     */\n    toggleSplitterCls(cls, add = true) {\n        this.splitterElements.forEach(el => el?.classList[add ? 'add' : 'remove'](cls));\n    }\n\n    hideSplitter() {\n        this.splitterElements.forEach(el => el.classList.add('b-hide-display'));\n        this.$showingSplitter = false;\n    }\n\n    showSplitter() {\n        this.splitterElements.forEach(el => el.classList.remove('b-hide-display'));\n        this.$showingSplitter = true;\n    }\n\n    //endregion\n\n    //region Template\n\n    changeElement(element, was) {\n        const { region } = this;\n\n        return super.changeElement({\n            'aria-label' : region,\n            className    : {\n                'b-grid-subgrid'             : 1,\n                [`b-grid-subgrid-${region}`] : region,\n                'b-grid-subgrid-collapsed'   : this.collapsed\n            },\n            dataset : {\n                region\n            }\n        }, was);\n    }\n\n    get rowElementConfig() {\n        const { grid } = this;\n\n        return {\n            role      : 'row',\n            className : grid.rowCls,\n            children  : this.columns.visibleColumns.map((column, columnIndex) => ({\n                role            : 'gridcell',\n                'aria-colindex' : columnIndex + 1,\n                tabIndex        : grid.cellTabIndex,\n                className       : 'b-grid-cell',\n                dataset         : {\n                    column   : column.field || '',\n                    columnId : column.id\n                }\n            }))\n        };\n    }\n\n    // Added to DOM in Grid `get bodyConfig`\n    changeVirtualScrollerElement() {\n        const references = DomHelper.createElement({\n            role      : 'presentation',\n            reference : 'virtualScrollerElement',\n            className : 'b-virtual-scroller',\n            tabIndex  : -1,\n            dataset   : {\n                region : this.region\n            },\n            children : [\n                {\n                    reference : 'virtualScrollerWidth',\n                    className : 'b-virtual-width'\n                }\n            ]\n        });\n\n        this.virtualScrollerWidth = references.virtualScrollerWidth;\n\n        return references.virtualScrollerElement;\n    }\n\n    changeSplitterElement() {\n        const references = DomHelper.createElement({\n            reference : 'splitterElement',\n            className : {\n                'b-grid-splitter'           : 1,\n                'b-grid-splitter-collapsed' : this.collapsed,\n                'b-hide-display'            : 1 // GridSubGrids determines visibility\n            },\n            dataset : {\n                region : this.region\n            },\n            children : [\n                BrowserHelper.isTouchDevice ? { className : 'b-splitter-touch-area' } : null,\n                {\n                    className : 'b-grid-splitter-inner b-grid-splitter-main',\n                    children  : [\n                        {\n                            className : 'b-grid-splitter-buttons',\n                            reference : 'splitterButtons',\n                            children  : [\n                                {\n                                    className : 'b-grid-splitter-button-collapse',\n                                    children  : [\n                                        BrowserHelper.isTouchDevice ? { className : 'b-splitter-button-touch-area' } : null,\n                                        {\n                                            tag       : 'svg',\n                                            ns        : 'http://www.w3.org/2000/svg',\n                                            version   : '1.1',\n                                            className : 'b-grid-splitter-button-icon b-gridregion-collapse-arrow',\n                                            viewBox   : '0 0 256 512',\n                                            children  : [\n                                                {\n                                                    tag : 'path',\n                                                    d   : 'M192 448c-8.188 0-16.38-3.125-22.62-9.375l-160-160c-12.5-1' +\n                                                        '2.5-12.5-32.75 0-45.25l160-160c12.5-12.5 32.75-12.5 45.25 0s' +\n                                                        '12.5 32.75 0 45.25L77.25 256l137.4 137.4c12.5 12.5 12.5 32.7' +\n                                                        '5 0 45.25C208.4 444.9 200.2 448 192 448z'\n                                                }\n                                            ]\n                                        }\n                                    ]\n                                },\n                                {\n                                    className : 'b-grid-splitter-button-expand',\n                                    children  : [\n                                        BrowserHelper.isTouchDevice ? { className : 'b-splitter-button-touch-area' } : null,\n                                        {\n                                            tag       : 'svg',\n                                            ns        : 'http://www.w3.org/2000/svg',\n                                            version   : '1.1',\n                                            className : 'b-grid-splitter-button-icon b-gridregion-expand-arrow',\n                                            viewBox   : '0 0 256 512',\n                                            children  : [\n                                                {\n                                                    tag : 'path',\n                                                    d   : 'M64 448c-8.188 0-16.38-3.125-22.62-9.375c-12.5-12.5-12.5-3' +\n                                                        '2.75 0-45.25L178.8 256L41.38 118.6c-12.5-12.5-12.5-32.75 0-4' +\n                                                        '5.25s32.75-12.5 45.25 0l160 160c12.5 12.5 12.5 32.75 0 45.25' +\n                                                        'l-160 160C80.38 444.9 72.19 448 64 448z'\n                                                }\n                                            ]\n                                        }\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ]\n        });\n\n        this.splitterButtons = references.splitterButtons;\n\n        return references.splitterElement;\n    }\n\n    get splitterConfig() {\n        return {\n            className : this.splitterElement.className.trim(),\n            children  : [\n                BrowserHelper.isTouchDevice ? { className : 'b-splitter-touch-area' } : null,\n                {\n                    className : 'b-grid-splitter-inner'\n                }\n            ],\n            dataset : {\n                region : this.region\n            }\n        };\n    }\n\n    changeHeaderSplitter() {\n        return DomHelper.createElement(this.splitterConfig);\n    }\n\n    changeScrollerSplitter() {\n        return DomHelper.createElement(this.splitterConfig);\n    }\n\n    changeFooterSplitter() {\n        return DomHelper.createElement(this.splitterConfig);\n    }\n\n    //endregion\n\n    //region Render\n\n    render(...args) {\n        const me = this;\n\n        super.render(...args);\n\n        // Unit tests create naked SubGrids so we have to do this.\n        if (me.grid) {\n            me.updateHasFlex();\n\n            me.element.parentNode.insertBefore(me.splitterElement, me.element.nextElementSibling);\n\n            // Cant use \"global\" listener with delegate for mouseenter, since mouseenter only fires on target\n            me.splitterElements.forEach(element =>\n                EventHelper.on({\n                    element,\n                    mouseenter : 'onSplitterMouseEnter',\n                    mouseleave : 'onSplitterMouseLeave',\n                    thisObj    : me\n                })\n            );\n\n            me._collapsed && me.collapse();\n        }\n    }\n\n    refreshHeader() {\n        this.header.refreshContent();\n    }\n\n    refreshFooter() {\n        this.footer?.refreshContent();\n    }\n\n    // Override to iterate header and footer.\n    eachWidget(fn, deep = true) {\n        const\n            me      = this,\n            widgets = [me.header, me.footer];\n\n        for (let i = 0; i < widgets.length; i++) {\n            const widget = widgets[i];\n\n            if (fn(widget) === false) {\n                return;\n            }\n\n            if (deep && widget.eachWidget) {\n                widget.eachWidget(fn, deep);\n            }\n        }\n    }\n\n    //endregion\n\n    //region Size & resize\n\n    /**\n     * Sets cell widths. Cannot be done in template because of CSP\n     * @private\n     */\n    fixCellWidths(rowElement) {\n        const { visibleColumns } = this.columns;\n\n        // fix cell widths, no longer allowed in template because of CSP\n        let cell = rowElement.firstElementChild,\n            i    = 0;\n\n        while (cell) {\n            const\n                column      = visibleColumns[i],\n                { element } = column;\n\n            if (column.minWidth) {\n                cell.style.minWidth = DomHelper.setLength(column.minWidth);\n            }\n            if (column.maxWidth) {\n                cell.style.maxWidth = DomHelper.setLength(column.maxWidth);\n            }\n\n            // either flex or width, flex has precedence\n            if (column.flex) {\n                // Nested flex - we have to match the column's header width because it's flexing\n                // a different available space - the space in its owning column header.\n                if (column.childLevel && element) {\n                    cell.style.flex = `0 0 ${element.getBoundingClientRect().width}px`;\n                    cell.style.width = '';\n                }\n                else {\n                    cell.style.flex = column.flex;\n                    cell.style.width = '';\n                }\n            }\n            else if (column.width) {\n                // https://app.assembla.com/spaces/bryntum/tickets/8041\n                // Although header and footer elements must be sized using flex-basis to avoid the busting out problem,\n                // grid cells MUST be sized using width since rows are absolutely positioned and will not cause the\n                // busting out problem, and rows will not stretch to shrinkwrap the cells unless they are widthed with\n                // width.\n                cell.style.width = DomHelper.setLength(column.width);\n            }\n            else {\n                cell.style.flex = cell.style.width = cell.style.minWidth = '';\n            }\n\n            cell = cell.nextElementSibling;\n            i++;\n        }\n    }\n\n    get totalFixedWidth() {\n        return this.columns.totalFixedWidth;\n    }\n\n    /**\n     * Sets header width and scroller width (if needed, depending on if using flex). Might also change the subgrids\n     * width, if it uses a width calculated from its columns.\n     * @private\n     */\n    fixWidths() {\n        const\n            me = this,\n            {\n                element,\n                header,\n                footer\n            }  = me;\n\n        if (!me.collapsed) {\n            if (me.flex) {\n                header.flex = me.flex;\n                if (footer) {\n                    footer.flex = me.flex;\n                }\n                element.style.flex = me.flex;\n            }\n            else {\n                // If width is calculated and no column is using flex, check if total width is less than width. If so,\n                // recalculate width and bail out of further processing (since setting width will trigger again)\n                if (\n                    me.hasCalculatedWidth &&\n                    !me.columns.some(col => !col.hidden && col.flex) &&\n                    me.totalFixedWidth !== me.width\n                ) {\n                    me.width = me.totalFixedWidth;\n                    // Setting width above clears the hasCalculatedWidth flag, but we want to keep it set to react\n                    // correctly next time\n                    me.hasCalculatedWidth = true;\n                    return;\n                }\n\n                let totalWidth = me.width;\n\n                // Calculate width from our total column width if we are supposed to have a calculated width\n                if (!totalWidth && me.hasCalculatedWidth) {\n                    totalWidth = 0;\n\n                    // summarize column widths, needed as container width when not using flex widths.\n                    for (const col of me.columns) {\n                        if (!col.flex && !col.hidden) totalWidth += col.width;\n                    }\n                }\n\n                // rows are absolutely positioned, meaning that their width won't affect container width\n                // hence we must set it, if not using flex\n                element.style.width = `${totalWidth}px`;\n\n                header.width = totalWidth;\n                if (footer) {\n                    footer.width = totalWidth;\n                }\n            }\n\n            me.syncScrollingPartners(false);\n        }\n    }\n\n    // Safari does not shrink cells the same way as chrome & ff does without having a width set on the row\n    fixRowWidthsInSafariEdge() {\n        if (BrowserHelper.isSafari) {\n            const\n                me                 = this,\n                { region, header } = me,\n                minWidth           = header.calculateMinWidthForSafari();\n\n            // fix row widths for safari, it does not size flex cells correctly at small widths otherwise.\n            // there should be a css solution, but I have failed to find it\n            me.rowManager.forEach(row => {\n                // This function runs on resize and rendering a SubGrid triggers a resize. When adding a new SubGrid\n                // on the fly elements wont exists for it yet, so ignore...\n                const element = row.getElement(region);\n                // it is worth noting that setting a width does not prevent the row from growing beyond that with\n                // when making view wider, it is used in flex calculation more like a min-width\n                if (element) {\n                    element.style.width = `${minWidth}px`;\n                }\n            });\n\n            header.headersElement.style.width = `${minWidth}px`;\n        }\n    }\n\n    /**\n     * Get/set SubGrid width, which also sets header and footer width (if available).\n     * @property {Number}\n     */\n    set width(width) {\n        const me = this;\n\n        // Width explicitly set, remember that\n        me.hasCalculatedWidth = false;\n\n        super.width = width;\n\n        me.header.width = width;\n        me.footer.width = width;\n\n        // When we're live, we can't wait until the  throttled resize occurs - it looks bad.\n        if (me.isPainted) {\n            me.onElementResize();\n        }\n    }\n\n    get width() {\n        return super.width;\n    }\n\n    /**\n     * Get/set SubGrid flex, which also sets header and footer flex (if available).\n     * @property {Number|String}\n     */\n    set flex(flex) {\n        const me = this;\n\n        // Width explicitly set, remember that\n        me.hasCalculatedWidth = false;\n\n        me.header.flex = flex;\n        me.footer.flex = flex;\n\n        super.flex = flex;\n\n        // When we're live, we can't wait until the  throttled resize occurs - it looks bad.\n        if (me.isPainted) {\n            me.onElementResize();\n        }\n    }\n\n    get flex() {\n        return super.flex;\n    }\n\n    /**\n     * Called when grid changes size. SubGrid determines if it has changed size and triggers scroll (for virtual\n     * rendering in cells to work when resizing etc.)\n     * @private\n     */\n    onInternalResize(element, newWidth, newHeight, oldWidth, oldHeight) {\n        const\n            me       = this,\n            { grid } = me;\n\n        // Widget caches dimensions\n        super.onInternalResize(...arguments);\n\n        // Unit tests create naked SubGrids so we have to do this.\n        if (grid?.isPainted) {\n            me.syncSplitterButtonPosition();\n\n            if (newWidth !== oldWidth) {\n                // trigger scroll, in case anything is done on scroll it needs to be done now also\n                grid.trigger('horizontalScroll', {\n                    grid,\n                    subGrid    : me,\n                    scrollLeft : me.scrollable.element.scrollLeft,\n                    scrollX    : me.scrollable.x\n                });\n\n                // Update virtual scrollers, if they are ready\n                me.fakeScroller && me.refreshFakeScroll();\n\n                // Columns which are flexed, but as part of a grouped column cannot just have their flex\n                // value reflected in the flex value of its cells. They are flexing a different available space.\n                // These have to be set to the exact width and kept synced.\n                grid.syncFlexedSubCols();\n\n                me.fixRowWidthsInSafariEdge();\n            }\n\n            if (newHeight !== oldHeight) {\n                // Call this to update cached _bodyHeight\n                grid.onHeightChange();\n            }\n\n            me.trigger('afterInternalResize', me);\n        }\n    }\n\n    /**\n     * Keeps the parallel splitters in the header, footer and fake scroller synced in terms\n     * of being collapsed or not.\n     * @private\n     */\n    syncParallelSplitters(collapsed) {\n        const\n            me       = this,\n            { grid } = me;\n\n        if (me.splitterElement && me.$showingSplitter) {\n            me.toggleSplitterCls('b-grid-splitter-collapsed', collapsed);\n        }\n        else {\n            // If we're the last, we don't own a splitter, we use the previous region's splitter\n            const prevGrid = grid.getSubGrid(grid.getPreviousRegion(me.region));\n\n            // If there's a splitter before us, sync it with our state.\n            if (prevGrid && prevGrid.splitterElement) {\n                prevGrid.syncParallelSplitters(collapsed);\n            }\n        }\n    }\n\n    onSplitterMouseEnter() {\n        const\n            me              = this,\n            { nextSibling } = me;\n\n        // No hover effect when collapsed\n        if (!me.collapsed && (!nextSibling || !nextSibling.collapsed)) {\n            me.toggleSplitterCls('b-hover');\n        }\n\n        me.startSplitterButtonSyncing();\n    }\n\n    onSplitterMouseLeave() {\n        const\n            me              = this,\n            { nextSibling } = me;\n\n        me.toggleSplitterCls('b-hover', false);\n        if (!me.collapsed && (!nextSibling || !nextSibling.collapsed)) {\n            me.stopSplitterButtonSyncing();\n        }\n    }\n\n    startSplitterButtonSyncing() {\n        const me = this;\n\n        if (me.splitterElement) {\n            me.syncSplitterButtonPosition();\n            if (!me.splitterSyncScrollListener) {\n                me.splitterSyncScrollListener = me.grid.scrollable.ion({\n                    scroll  : 'syncSplitterButtonPosition',\n                    thisObj : me\n                });\n            }\n        }\n    }\n\n    stopSplitterButtonSyncing() {\n        if (this.splitterSyncScrollListener) {\n            this.splitterSyncScrollListener();\n            this.splitterSyncScrollListener = null;\n        }\n    }\n\n    syncSplitterButtonPosition() {\n        const { grid } = this;\n\n        this.splitterButtons.style.top = `${grid.scrollable.y + ((grid.bodyHeight - (this.headerSplitter ? grid.headerHeight : 0)) / 2)}px`;\n    }\n\n    /**\n     * Get the \"viewport\" for the SubGrid as a Rectangle\n     * @property {Core.helper.util.Rectangle}\n     * @readonly\n     */\n    get viewRectangle() {\n        const { scrollable } = this;\n\n        return new Rectangle(scrollable.x, scrollable.y, this.width || 0, this.rowManager.viewHeight);\n    }\n\n    /**\n     * Called when updating column widths to apply 'b-has-flex' which is used when fillLastColumn is configured.\n     * @internal\n     */\n    updateHasFlex() {\n        this.scrollable.element.classList.toggle('b-has-flex', this.columns.hasFlex);\n    }\n\n    updateResizable(resizable) {\n        this.splitterElements.forEach(splitter => DomHelper.toggleClasses(splitter, ['b-disabled'], !resizable));\n    }\n\n    /**\n     * Resize all columns in the SubGrid to fit their width, according to their configured\n     * {@link Grid.column.Column#config-fitMode}\n     */\n    resizeColumnsToFitContent() {\n        this.grid.beginGridMeasuring();\n\n        this.columns.visibleColumns.forEach(column => {\n            column.resizeToFitContent(null, null, true);\n        });\n\n        this.grid.endGridMeasuring();\n    }\n\n    //endregion\n\n    //region Scroll\n\n    get overflowingHorizontally() {\n        // We are not overflowing if collapsed\n        return !this.collapsed && this.scrollable.hasOverflow('x');\n    }\n\n    get overflowingVertically() {\n        // SubGrids never overflow vertically. They are full calculated content height.\n        // The owning Grid scrolls all SubGrids vertically in its own overflowElement.\n        return false;\n    }\n\n    /**\n     * Fixes widths of fake scrollers\n     * @private\n     */\n    refreshFakeScroll() {\n        const\n            me = this,\n            {\n                element,\n                virtualScrollerElement,\n                virtualScrollerWidth,\n                header,\n                footer,\n                scrollable\n            }  = me,\n            // Cannot use scrollWidth because its an integer and we need exact content size\n            totalFixedWidth = [...header.contentElement.children].reduce(sumWidths, 0);\n\n        // Use a fixed scroll width so that when grid is empty (e.g after filtering with no matches),\n        // it is able to it maintain its scroll-x position and magic mouse swiping\n        // in the grid area will produce horizontal scrolling.\n        // https://github.com/bryntum/support/issues/3247\n        scrollable.scrollWidth = totalFixedWidth;\n\n        // Scroller lays out in the same way as subgrid.\n        // If we are flexed, the scroller is flexed etc.\n        virtualScrollerElement.style.width = element.style.width;\n        virtualScrollerElement.style.flex = element.style.flex;\n        virtualScrollerElement.style.minWidth = element.style.minWidth;\n        virtualScrollerElement.style.maxWidth = element.style.maxWidth;\n        header.scrollable.syncOverflowState();\n        footer.scrollable.syncOverflowState();\n\n        if (!me.collapsed) {\n            if (me.overflowingHorizontally) {\n                virtualScrollerWidth.style.width = `${scrollable.scrollWidth || 0}px`;\n                // If *any* SubGrids have horizontal overflow, the main grid\n                // has to show its virtual horizontal scrollbar.\n                me.grid.virtualScrollers.classList.remove('b-hide-display');\n            }\n            else {\n                virtualScrollerWidth.style.width = 0;\n            }\n        }\n    }\n\n    /**\n     * Init scroll syncing for header and footer (if available).\n     * @private\n     */\n    initScroll() {\n        const\n            me = this,\n            {\n                scrollable,\n                virtualScrollerElement\n            }  = me;\n\n        me.syncPartnersOnFrame = me.createOnFrame(me.syncScrollingPartners);\n\n        if (BrowserHelper.isFirefox) {\n            scrollable.element.addEventListener('wheel', event => {\n                if (event.deltaX) {\n                    scrollable.x += event.deltaX;\n                    event.preventDefault();\n                }\n            });\n        }\n\n        scrollable.yScroller = me.grid.scrollable;\n\n        // Add our Scroller to the controlling GridScroller\n        scrollable.yScroller.addScroller(scrollable);\n\n        // Create a Scroller for the fake horizontal scrollbar so that it can partner\n        me.fakeScroller = new Scroller({\n            element   : virtualScrollerElement,\n            overflowX : true,\n            widget    : me // To avoid more expensive style lookup for RTL\n        });\n\n        // Sync scrolling partners (header, footer) when our xScroller reports a scroll.\n        // Also fires horizontalscroll\n        scrollable.ion({\n            scroll    : 'onSubGridScroll',\n            scrollend : 'onSubGridScrollEnd',\n            thisObj   : me\n        });\n\n        scrollable.addPartner(me.fakeScroller, 'x');\n        scrollable.addPartner(me.header.scrollable, 'x');\n        scrollable.addPartner(me.footer.scrollable, 'x');\n\n        // Update virtual scrollers (previously updated too early from onInternalResize)\n        me.refreshFakeScroll();\n    }\n\n    onSubGridScrollEnd() {\n        const me = this;\n\n        // If we do not have the direct update flag set which would ensure a sync in each scroll event\n        // then ensure syncing happens on scroll end. This is for animated scrolls where the scroll\n        // impulses come through animation frames.\n        if (!me.forceScrollUpdate) {\n            me.syncScrollingPartners();\n        }\n        me.scrolling = false;\n\n        if (!DomHelper.scrollBarWidth) {\n            me.grid.virtualScrollers.classList.remove('b-scrolling');\n            // Remove interactivity a while after scrolling ended\n            me.hideOverlayScroller();\n        }\n    }\n\n    onSubGridScroll() {\n        // Force direct update, without waiting for next animation frame\n        // TODO: Only used in Scheduler, could perhaps live in Scheduler specific SubGrid in the future\n        if (this.forceScrollUpdate) {\n            this.syncScrollingPartners();\n            this.forceScrollUpdate = false;\n        }\n        else {\n            this.syncPartnersOnFrame();\n        }\n    }\n\n    showOverlayScroller() {\n        this.hideOverlayScroller.cancel();\n\n        this.virtualScrollerElement.classList.add('b-show-virtual-scroller');\n    }\n\n    // Buffered 1500ms, hides virtual scrollers after scrolling has ended\n    hideOverlayScroller() {\n        this.virtualScrollerElement.classList.remove('b-show-virtual-scroller');\n    }\n\n    set scrolling(scrolling) {\n        this._scrolling = scrolling;\n    }\n\n    get scrolling() {\n        return this._scrolling;\n    }\n\n    /**\n     * This syncs the horizontal scroll position of the header and the footer with\n     * the horizontal scroll position of the grid. Usually, this will be called automatically\n     * when the grid scrolls. In some cases, such as a refresh caused by column changes\n     * it will need to be called from elsewhere.\n     * @internal\n     */\n    syncScrollingPartners(addCls = true) {\n        const\n            subGrid  = this,\n            { grid } = subGrid;\n\n        if (!subGrid.scrolling && addCls) {\n            subGrid.scrolling = true;\n            // Allow interacting with overlaid scrollbar after scrolling starts\n            if (!DomHelper.scrollBarWidth) {\n                // Cls indicating that we are actively scrolling\n                grid.virtualScrollers.classList.add('b-scrolling');\n                // Cls sticking around longer to keep overlay scrollbar visible longer, allowing users to more easily\n                // grab it to drag more\n                subGrid.showOverlayScroller();\n            }\n        }\n\n        grid.trigger('horizontalScroll', {\n            subGrid,\n            grid,\n            scrollLeft : subGrid.scrollable.element.scrollLeft,\n            scrollX    : subGrid.scrollable.x\n        });\n    }\n\n    /**\n     * Scrolls a column into view (if it is not already). Called by Grid#scrollColumnIntoView, use it instead to not\n     * have to care about which SubGrid contains a column.\n     * @param {Grid.column.Column|String|Number} column Column name (data) or column index or actual column object.\n     * @param {ScrollOptions} [options] How to scroll.\n     * @returns {Promise} If the column exists, a promise which is resolved when the column header element has been\n     * scrolled into view.\n     */\n    scrollColumnIntoView(column, options) {\n        const\n            { columns, header } = this,\n            scroller            = header.scrollable;\n\n        // Allow column,column id,or column index to be passed\n        column = (column instanceof Column) ? column : columns.get(column) || columns.getById(column) || columns.getAt(column);\n\n        if (column) {\n            // Get the current column header element.\n            const columnHeaderElement = header.getHeader(column.id);\n\n            if (columnHeaderElement) {\n                return scroller.scrollIntoView(Rectangle.from(columnHeaderElement, null, true), options);\n            }\n        }\n    }\n\n    //endregion\n\n    //region Rows\n\n    /**\n     * Creates elements for the new rows when RowManager has determined that more rows are needed\n     * @private\n     */\n    onAddRow({ rows, isExport }) {\n        const\n            me             = this,\n            config         = me.rowElementConfig,\n            frag           = document.createDocumentFragment();\n\n        rows.forEach(row => {\n            const rowElement = DomHelper.createElement(config);\n\n            frag.appendChild(rowElement);\n            row.addElement(me.region, rowElement);\n\n            // TODO: Stamp the correct width into the cells on creation\n            me.fixCellWidths(rowElement);\n        });\n\n        // Do not insert elements to DOM if we're exporting them\n        if (!isExport) {\n            me.fixRowWidthsInSafariEdge();\n\n            // Put the row elements into the SubGrid en masse.\n            // If 2nd param is null, insertBefore appends.\n            me.element.insertBefore(frag, me.insertRowsBefore);\n        }\n    }\n\n    /**\n     * Get all row elements for this SubGrid.\n     * @property {HTMLElement[]}\n     * @readonly\n     */\n    get rowElements() {\n        return this.fromCache('.b-grid-row', true);\n    }\n\n    /**\n     * Removes all row elements from the subgrids body and empties cache\n     * @private\n     */\n    clearRows() {\n        this.emptyCache();\n\n        const\n            all   = this.element.querySelectorAll('.b-grid-row'),\n            range = document.createRange();\n\n        if (all.length) {\n            range.setStartBefore(all[0]);\n            range.setEndAfter(all[all.length - 1]);\n            range.deleteContents();\n        }\n    }\n\n    // only called when RowManager.rowScrollMode = 'dom', which is not intended to be used\n    addNewRowElement() {\n        const rowElement = DomHelper.append(this.element, this.rowElementConfig);\n\n        this.fixCellWidths(rowElement);\n\n        return rowElement;\n    }\n\n    get store() {\n        return this.grid.store;\n    }\n\n    get rowManager() {\n        return this.grid?.rowManager;\n    }\n\n    //endregion\n\n    // region Expand/collapse\n\n    // All usages are commented, uncomment when this is resolved: https://app.assembla.com/spaces/bryntum/tickets/5472\n    toggleTransitionClasses(doRemove = false) {\n        const\n            me         = this,\n            grid       = me.grid,\n            nextRegion = grid.getSubGrid(grid.getNextRegion(me.region)),\n            splitter   = grid.resolveSplitter(nextRegion);\n\n        nextRegion.element.classList[doRemove ? 'remove' : 'add']('b-grid-subgrid-animate-collapse');\n        nextRegion.header.element.classList[doRemove ? 'remove' : 'add']('b-grid-subgrid-animate-collapse');\n\n        me.element.classList[doRemove ? 'remove' : 'add']('b-grid-subgrid-animate-collapse');\n        me.header.element.classList[doRemove ? 'remove' : 'add']('b-grid-subgrid-animate-collapse');\n\n        splitter.classList[doRemove ? 'remove' : 'add']('b-grid-splitter-animate');\n    }\n\n    /**\n     * Get/set collapsed state\n     * @property {Boolean}\n     */\n    get collapsed() {\n        return this._collapsed;\n    }\n\n    set collapsed(collapsed) {\n        if (this.isConfiguring) {\n            this._collapsed = collapsed;\n        }\n        else {\n            if (collapsed) {\n                this.collapse();\n            }\n            else {\n                this.expand();\n            }\n        }\n    }\n\n    /**\n     * Collapses subgrid. If collapsing subgrid is the only one expanded, next subgrid to the right (or previous) will\n     * be expanded.\n     *\n     * @example\n     * let locked = grid.getSubGrid('locked');\n     * locked.collapse().then(() => {\n     *     console.log(locked.collapsed); // Logs 'True'\n     * });\n     *\n     * let normal = grid.getSubGrid('normal');\n     * normal.collapse().then(() => {\n     *     console.log(locked.collapsed); // Logs 'False'\n     *     console.log(normal.collapsed); // Logs 'True'\n     * });\n     *\n     * @returns {Promise} A Promise which resolves when this SubGrid is fully collapsed.\n     */\n    async collapse() {\n        const\n            me                       = this,\n            { grid, element }        = me,\n            nextRegion               = grid.getSubGrid(grid.getNextRegion(me.region)),\n            splitterOwner            = me.splitterElement ? me : me.previousSibling;\n        let { _beforeCollapseState } = me,\n            // Count all expanded regions. Grid must always have at least one expanded region\n            expandedRegions          = 0;\n\n        if (grid.rendered && me._collapsed === true) {\n            return;\n        }\n\n        grid.eachSubGrid(subGrid => {\n            subGrid !== me && !subGrid._collapsed && ++expandedRegions;\n        });\n\n        // Current region is the only one expanded, expand next region\n        if (expandedRegions === 0) {\n            // expandPromise = nextRegion.expand();\n            await nextRegion.expand();\n        }\n\n        return new Promise((resolve) => {\n            if (!_beforeCollapseState) {\n                _beforeCollapseState = me._beforeCollapseState = {};\n\n                let widthChanged = false;\n\n                // If current width is zero, the resize event will not be fired. In such case we want to trigger callback immediately\n                if (me.width) {\n                    widthChanged = true;\n\n                    // Toggle transition classes here, we will actually change width below\n                    // me.toggleTransitionClasses();\n\n                    // afterinternalresize event is buffered, it will be fired only once after animation is finished\n                    // and element size is final\n                    me.ion({\n                        afterinternalresize : () => {\n                            // me.toggleTransitionClasses(true);\n                            resolve(me);\n                        },\n                        thisObj : me,\n                        once    : true\n                    });\n                }\n\n                // When trying to collapse region we need its partner to occupy free space. Considering multiple\n                // regions, several cases are possible:\n                // 1) Both left and right regions have fixed width\n                // 2) Left region has fixed width, right region is flexed\n                // 3) Left region is flexed, right region has fixed width\n                // 4) Both regions are flexed\n                //\n                // To collapse flexed region we need to remove flex style, remember it somehow and set fixed width.\n                // If another region is flexed, it will fill the space. If it has fixed width, we need to increase\n                // its width by collapsing region width. Same logic should be applied to headers.\n                //\n                // Save region width first\n                _beforeCollapseState.width = me.width;\n                _beforeCollapseState.elementWidth = element.style.width;\n\n                // Next region is not flexed, need to make it fill the space\n                if (nextRegion.element.style.flex === '') {\n                    _beforeCollapseState.nextRegionWidth = nextRegion.width;\n                    nextRegion.width = '';\n                    nextRegion.flex = '1';\n                }\n\n                // Current region is flexed, store style to restore on expand\n                if (element.style.flex !== '') {\n                    _beforeCollapseState.flex = element.style.flex;\n                    // remove flex state to reduce width later\n                    me.header.element.style.flex = element.style.flex = '';\n                }\n\n                // Sets the grid to its collapsed width as defined in SASS: zero\n                element.classList.add('b-grid-subgrid-collapsed');\n\n                // The parallel elements which must be in sync width-wise must know about collapsing\n                me.virtualScrollerElement.classList.add('b-collapsed');\n                me.header.element.classList.add('b-collapsed');\n                me.footer.element.classList.add('b-collapsed');\n\n                me._collapsed = true;\n                me.width = '';\n\n                if (!widthChanged) {\n                    // sync splitters in case subGrid was collapsed by state (https://github.com/bryntum/support/issues/1857)\n                    me.syncParallelSplitters(true);\n\n                    resolve(false);\n                }\n            }\n            else {\n                resolve();\n            }\n        }).then(value => {\n            if (!me.isDestroyed) {\n                if (value !== false) {\n\n                    grid.refreshVirtualScrollbars();\n\n                    me.syncParallelSplitters(true);\n\n                    // Our splitter is permanently visible when collapsed, so keep splitter button set\n                    // synced in the vertical centre of the view just in time for paint.\n                    // Uses translateY so will not cause a further layout.\n                    splitterOwner.startSplitterButtonSyncing?.();\n                }\n\n                grid.trigger('subGridCollapse', { subGrid : me });\n                grid.afterToggleSubGrid({ subGrid : me, collapsed : true });\n            }\n        });\n    }\n\n    /**\n     * Expands subgrid.\n     *\n     * @example\n     * grid.getSubGrid('locked').expand().then(() => console.log('locked grid expanded'));\n     *\n     * @returns {Promise} A Promise which resolves when this SubGrid is fully expanded.\n     */\n    async expand() {\n        const\n            me            = this,\n            {\n                grid,\n                _beforeCollapseState\n            }             = me,\n            nextRegion    = grid.getSubGrid(grid.getNextRegion(me.region)),\n            splitterOwner = me.splitterElement ? me : me.previousSibling;\n\n        if (grid.rendered && me._collapsed !== true) {\n            return;\n        }\n\n        return new Promise((resolve) => {\n            if (_beforeCollapseState != null) {\n                // If current width matches width expected after expand resize event will not be fired. In such case\n                // we want to trigger callback immediately\n                let widthChanged = false;\n\n                // See similar clause in collapse method above\n                if (me.width !== _beforeCollapseState.elementWidth) {\n                    widthChanged = true;\n\n                    // Toggle transition classes here, we will actually change width below\n                    // me.toggleTransitionClasses();\n\n                    me.ion({\n                        afterinternalresize() {\n                            // me.toggleTransitionClasses(true);\n\n                            // Delay the resolve to avoid \"ResizeObserver loop limit exceeded\" errors\n                            // collapsing the only expanded region and it has to expand its nextRegion\n                            // before it can collapse.\n                            me.setTimeout(() => resolve(me), 10);\n                        },\n                        thisObj : me,\n                        once    : true\n                    });\n                }\n\n                // previous region is not flexed, reduce its width as it was increased in collapse\n                if (_beforeCollapseState.nextRegionWidth) {\n                    nextRegion.width = _beforeCollapseState.nextRegionWidth;\n                    nextRegion.flex = null;\n                }\n\n                me.element.classList.remove('b-grid-subgrid-collapsed');\n                me._collapsed = false;\n\n                // The parallel elements which must be in sync width-wise must know about collapsing\n                me.virtualScrollerElement.classList.remove('b-collapsed');\n                me.header.element.classList.remove('b-collapsed');\n                me.footer.element.classList.remove('b-collapsed');\n\n                // This region used to be flex, let's restore it\n                if (_beforeCollapseState.flex) {\n                    // Always restore width, restoring flex wont trigger resize otherwise\n                    me.width = _beforeCollapseState.width;\n\n                    // Widget flex setting clears style width\n                    me.header.flex = me.flex = _beforeCollapseState.flex;\n                    me.footer.flex = _beforeCollapseState.flex;\n                    me._width = null;\n                }\n                else {\n                    me.width = _beforeCollapseState.elementWidth;\n                }\n\n                me.element.classList.remove('b-grid-subgrid-collapsed');\n                me._collapsed = false;\n\n                if (!widthChanged) {\n                    resolve(false);\n                }\n                else {\n                    // Our splitter buttons are hidden when expanded, so we no longer need to keep splitter button set\n                    // synced in the vertical centre of the view.\n                    splitterOwner.stopSplitterButtonSyncing();\n\n                    me.syncParallelSplitters(false);\n                }\n\n                delete me._beforeCollapseState;\n            }\n            else {\n                resolve();\n            }\n        }).then(value => {\n            if (value !== false && !me.isDestroyed) {\n                grid.trigger('subGridExpand', { subGrid : me });\n                grid.afterToggleSubGrid({ subGrid : me, collapsed : false });\n            }\n        });\n    }\n\n    //endregion\n}\n\n// Register this widget type with its Factory\nSubGrid.initClass();\n","import Base from '../../../Core/Base.js';\nimport Column from '../../column/Column.js';\nimport GridBase from '../GridBase.js';\nimport SubGrid from '../SubGrid.js';\nimport ArrayHelper from '../../../Core/helper/ArrayHelper.js';\nimport DomHelper from '../../../Core/helper/DomHelper.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\n\n/**\n * @module Grid/view/mixin/GridSubGrids\n */\n\n/**\n * Mixin for grid that handles SubGrids. Each SubGrid is scrollable horizontally separately from the other SubGrids.\n * Having two SubGrids allows you to achieve what is usually called locked or frozen columns.\n *\n * By default a Grid has two SubGrids, one named 'locked' and one 'normal'. The `locked` region has fixed width, while\n * the `normal` region grows to fill all available width (flex).\n *\n * Which SubGrid a column belongs to is determined using its {@link Grid.column.Column#config-region} config. For\n * example to put a column into the locked region, specify `{ region: 'locked' }`. For convenience, a column can be put\n * in the locked region using `{ locked: true }`.\n *\n * ```javascript\n * new Grid({\n *   columns : [\n *     // These two columns both end up in the \"locked\" region\n *     { field: 'name', text: 'Name', locked: true }\n *     { field: 'age', text: 'Age', region: 'locked' }\n *   ]\n * });\n * ```\n *\n * To customize the SubGrids, use {@link Grid.view.Grid#config-subGridConfigs}:\n *\n * ```javascript\n * // change the predefined subgrids\n * new Grid({\n *   subGridConfigs : {\n *       locked : { flex : 1 } ,\n *       normal : { flex : 3 }\n *   }\n * })\n *\n * // or define your own entirely\n * new Grid({\n *   subGridConfigs : {\n *       a : { width : 150 } ,\n *       b : { flex  : 1 },\n *       c : { width : 150 }\n *   },\n *\n *   columns : [\n *       { field : 'name', text : 'Name', region : 'a' },\n *       ...\n *   ]\n * })\n * ```\n *\n * @demo Grid/lockedcolumns\n * @mixin\n */\nexport default Target => class GridSubGrids extends (Target || Base) {\n    static get $name() {\n        return 'GridSubGrids';\n    }\n\n    static get properties() {\n        return {\n            /**\n             * An object containing the {@link Grid.view.SubGrid} region instances, indexed by subGrid id ('locked', normal'...)\n             * @member {Object<String,Grid.view.SubGrid>} subGrids\n             * @readonly\n             * @category Common\n             */\n            subGrids : {}\n        };\n    }\n\n    //region Init\n\n    changeSubGridConfigs(configs) {\n        const\n            me          = this,\n            usedRegions = new Set();\n\n        for (const column of me.columns) {\n            const { region } = column;\n\n            // Allow specifying regions for undefined subgrids\n            if (region) {\n                if (!configs[region]) {\n                    configs[region] = {};\n                }\n                usedRegions.add(region);\n            }\n        }\n\n        // Implementer has provided configs for other subGrids but not normal, put defaults in place\n        if (configs.normal && ObjectHelper.isEmpty(configs.normal)) {\n            configs.normal = GridBase.defaultConfig.subGridConfigs.normal;\n        }\n\n        for (const region of usedRegions) {\n            me.createSubGrid(region, configs[region]);\n        }\n\n        // Add them to Grid\n        me.items = me.subGrids;\n\n        return configs;\n    }\n\n    createSubGrid(region, config = null) {\n        const\n            me             = this,\n            subGridColumns = me.columns.makeChained(column => column.region === region, ['region']),\n            subGridConfig  = ObjectHelper.assign({\n                type        : 'subgrid',\n                id          : `${me.id}-${region}Subgrid`,\n                parent      : me,\n                grid        : me,\n                region      : region,\n                headerClass : me.headerClass,\n                footerClass : me.footerClass,\n                columns     : subGridColumns,\n                // Sort by region unless weight is explicitly defined\n                weight      : region\n            }, config || me.subGridConfigs[region]);\n\n        let hasCalculatedWidth = false;\n\n        if (!subGridConfig.flex && !subGridConfig.width) {\n            subGridConfig.width = subGridColumns.totalFixedWidth;\n            hasCalculatedWidth = true;\n        }\n\n        // Subclasses may inject a type property to create custom SubGrids\n        const subGrid = me.subGrids[region] = SubGrid.create(subGridConfig);\n\n        // Must be set after creation, otherwise reset in SubGrid#set width\n        subGrid.hasCalculatedWidth = hasCalculatedWidth;\n\n        if (region === me.regions[0]) {\n            // Have already done lookups for this in a couple of places, might as well store it...\n            subGrid.isFirstRegion = true;\n        }\n\n        return subGrid;\n    }\n\n    // A SubGrid is added to Grid, add its header etc too\n    onChildAdd(subGrid) {\n        if (subGrid.isSubGrid) {\n            const\n                me    = this,\n                {\n                    items,\n                    headerContainer,\n                    virtualScrollers,\n                    footerContainer\n                }     = me,\n                // 2 elements per index, actual element + splitter\n                index = items.indexOf(subGrid) * 2;\n\n            if (!me.hideHeaders) {\n                DomHelper.insertAt(headerContainer, subGrid.headerSplitter, index);\n                DomHelper.insertAt(headerContainer, subGrid.header.element, index);\n            }\n\n            DomHelper.insertAt(virtualScrollers, subGrid.scrollerSplitter, index);\n            DomHelper.insertAt(virtualScrollers, subGrid.virtualScrollerElement, index);\n\n            DomHelper.insertAt(footerContainer, subGrid.footerSplitter, index);\n            DomHelper.insertAt(footerContainer, subGrid.footer.element, index);\n\n            // Show splitter for all except last (new might not sort last, depending on weight)\n            items.forEach((subGrid, i) => {\n                if (i < items.length - 1) {\n                    subGrid.showSplitter();\n                }\n            });\n\n            // Empty text should be displayed in the first subgrid\n            if (index === 0 && me.emptyTextEl) {\n                subGrid.element.appendChild(me.emptyTextEl);\n            }\n        }\n\n        return super.onChildAdd(subGrid);\n    }\n\n    // A SubGrid is remove from grid, remove its header etc too\n    onChildRemove(subGrid) {\n        super.onChildRemove(subGrid);\n\n        if (subGrid.isSubGrid) {\n            const { items } = this;\n\n            delete this.subGrids[subGrid.region];\n            ArrayHelper.remove(this.regions, subGrid.region);\n            subGrid.destroy();\n\n            // Make sure the new last splitter is hidden\n            if (items.length) {\n                items[items.length - 1].hideSplitter();\n            }\n        }\n    }\n\n    doDestroy() {\n        this.eachSubGrid(subGrid => subGrid.destroy());\n        super.doDestroy();\n    }\n\n    //endregion\n\n    //region Iteration & calling\n\n    /**\n     * Iterate over all subGrids, calling the supplied function for each.\n     * @param {Function} fn Function to call for each instance\n     * @param {Object} thisObj `this` reference to call the function in, defaults to the subGrid itself\n     * @category SubGrid\n     * @internal\n     */\n    eachSubGrid(fn, thisObj = null) {\n        this.items.forEach((subGrid, i) => {\n            subGrid.isSubGrid && fn.call(thisObj || subGrid, subGrid, i++);\n        });\n    }\n\n    /**\n     * Call a function by name for all subGrids (that have the function).\n     * @param {String} fnName Name of function to call, uses the subGrid itself as `this` reference\n     * @param params Parameters to call the function with\n     * @returns {*} Return value from first SubGrid is returned\n     * @category SubGrid\n     * @internal\n     */\n    callEachSubGrid(fnName, ...params) {\n        // TODO: make object { normal: retval, locked: retval } to return? or store. revisit when needed\n        let returnValue = null;\n        this.items.forEach((subGrid, i) => {\n            if (subGrid.isSubGrid && subGrid[fnName]) {\n                const partialReturnValue = subGrid[fnName](...params);\n                if (i === 0) returnValue = partialReturnValue;\n            }\n        });\n        return returnValue;\n    }\n\n    //endregion\n\n    //region Getters\n\n    get regions() {\n        return this.items.map(item => item.region);\n    }\n\n    /**\n     * This method should return names of the two last regions in the grid as they are visible in the UI. In case\n     * `regions` property cannot be trusted, use different approach. Used by SubGrid and RegionResize to figure out\n     * which region should collapse or expand.\n     * @returns {String[]}\n     * @private\n     * @category SubGrid\n     */\n    getLastRegions() {\n        const result = this.regions.slice(-2);\n        // ALWAYS return array of length 2 in order to avoid extra conditions. Normally should not be called with 1 region\n        return result.length === 2 ? result : [result[0], result[0]];\n    }\n\n    /**\n     * This method should return right neighbour for passed region, or left neighbour in case last visible region is passed.\n     * This method is used to decide which subgrid should take space of the collapsed one.\n     * @param {String} region\n     * @returns {String}\n     * @private\n     * @category SubGrid\n     */\n    getNextRegion(region) {\n        const regions = this.regions;\n\n        // return next region or next to last\n        return regions[regions.indexOf(region) + 1] || regions[regions.length - 2];\n    }\n\n    getPreviousRegion(region) {\n        return this.regions[this.regions.indexOf(region) - 1];\n    }\n\n    /**\n     * Returns the subGrid for the specified region.\n     * @param {String} region Region, eg. locked or normal (per default)\n     * @returns {Grid.view.SubGrid} A subGrid\n     * @category SubGrid\n     */\n    getSubGrid(region) {\n        return this.subGrids[region];\n    }\n\n    /**\n     * Get the SubGrid that contains specified column\n     * @param {String|Grid.column.Column} column Column \"name\" or column object\n     * @returns {Grid.view.SubGrid}\n     * @category SubGrid\n     */\n    getSubGridFromColumn(column) {\n        column = column instanceof Column ? column : this.columns.getById(column) || this.columns.get(column);\n\n        return this.getSubGrid(column.region);\n    }\n\n    //endregion\n\n    /**\n     * Returns splitter element for subgrid\n     * @param {Grid.view.SubGrid|String} subGrid\n     * @returns {HTMLElement}\n     * @private\n     * @category SubGrid\n     */\n    resolveSplitter(subGrid) {\n        const regions = this.getLastRegions();\n\n        let region = subGrid instanceof SubGrid ? subGrid.region : subGrid;\n\n        if (regions[1] === region) {\n            region = regions[0];\n        }\n\n        return this.subGrids[region].splitterElement;\n    }\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n","import LocaleHelper from '../../Core/localization/LocaleHelper.js';\nimport '../../Core/localization/En.js';\n\nconst emptyString = new String();\n\nconst locale = {\n\n    localeName : 'En',\n    localeDesc : 'English (US)',\n    localeCode : 'en-US',\n\n    ColumnPicker : {\n        column          : 'Column',\n        columnsMenu     : 'Columns',\n        hideColumn      : 'Hide column',\n        hideColumnShort : 'Hide',\n        newColumns      : 'New columns'\n    },\n\n    Filter : {\n        applyFilter   : 'Apply filter',\n        filter        : 'Filter',\n        editFilter    : 'Edit filter',\n        on            : 'On',\n        before        : 'Before',\n        after         : 'After',\n        equals        : 'Equals',\n        lessThan      : 'Less than',\n        moreThan      : 'More than',\n        removeFilter  : 'Remove filter',\n        disableFilter : 'Disable filter'\n    },\n\n    FilterBar : {\n        enableFilterBar  : 'Show filter bar',\n        disableFilterBar : 'Hide filter bar'\n    },\n\n    Group : {\n        group                : 'Group',\n        groupAscending       : 'Group ascending',\n        groupDescending      : 'Group descending',\n        groupAscendingShort  : 'Ascending',\n        groupDescendingShort : 'Descending',\n        stopGrouping         : 'Stop grouping',\n        stopGroupingShort    : 'Stop'\n    },\n\n    HeaderMenu : {\n        moveBefore     : text => `Move before \"${text}\"`,\n        moveAfter      : text => `Move after \"${text}\"`,\n        collapseColumn : 'Collapse column',\n        expandColumn   : 'Expand column'\n    },\n\n    ColumnRename : {\n        rename : 'Rename'\n    },\n\n    MergeCells : {\n        mergeCells  : 'Merge cells',\n        menuTooltip : 'Merge cells with same value when sorted by this column'\n    },\n\n    Search : {\n        searchForValue : 'Search for value'\n    },\n\n    Sort : {\n        sort                   : 'Sort',\n        sortAscending          : 'Sort ascending',\n        sortDescending         : 'Sort descending',\n        multiSort              : 'Multi sort',\n        removeSorter           : 'Remove sorter',\n        addSortAscending       : 'Add ascending sorter',\n        addSortDescending      : 'Add descending sorter',\n        toggleSortAscending    : 'Change to ascending',\n        toggleSortDescending   : 'Change to descending',\n        sortAscendingShort     : 'Ascending',\n        sortDescendingShort    : 'Descending',\n        removeSorterShort      : 'Remove',\n        addSortAscendingShort  : '+ Ascending',\n        addSortDescendingShort : '+ Descending'\n    },\n\n    Column : {\n        columnLabel : column => `${column.text ? `${column.text} column. ` : ''}SPACE for context menu${column.sortable ? ', ENTER to sort' : ''}`,\n        cellLabel   : emptyString\n    },\n\n    Checkbox : {\n        toggleRowSelect : 'Toggle row selection',\n        toggleSelection : 'Toggle selection of entire dataset'\n    },\n\n    RatingColumn : {\n        cellLabel : column => `${column.text ? column.text : ''} ${column.location?.record ? `rating : ${column.location.record[column.field] || 0}` : ''}`\n    },\n\n    GridBase : {\n        loadFailedMessage  : 'Data loading failed!',\n        syncFailedMessage  : 'Data synchronization failed!',\n        unspecifiedFailure : 'Unspecified failure',\n        networkFailure     : 'Network error',\n        parseFailure       : 'Failed to parse server response',\n        serverResponse     : 'Server response:',\n        noRows             : 'No records to display',\n        moveColumnLeft     : 'Move to left section',\n        moveColumnRight    : 'Move to right section',\n        moveColumnTo       : region => `Move column to ${region}`\n    },\n\n    CellMenu : {\n        removeRow : 'Delete'\n    },\n\n    RowCopyPaste : {\n        copyRecord  : 'Copy',\n        cutRecord   : 'Cut',\n        pasteRecord : 'Paste',\n        rows        : 'rows',\n        row         : 'row'\n    },\n\n    CellCopyPaste : {\n        copy  : 'Copy',\n        cut   : 'Cut',\n        paste : 'Paste'\n    },\n\n    PdfExport : {\n        'Waiting for response from server' : 'Waiting for response from server...',\n        'Export failed'                    : 'Export failed',\n        'Server error'                     : 'Server error',\n        'Generating pages'                 : 'Generating pages...',\n        'Click to abort'                   : 'Cancel'\n    },\n\n    ExportDialog : {\n        width          : '40em',\n        labelWidth     : '12em',\n        exportSettings : 'Export settings',\n        export         : 'Export',\n        exporterType   : 'Control pagination',\n        cancel         : 'Cancel',\n        fileFormat     : 'File format',\n        rows           : 'Rows',\n        alignRows      : 'Align rows',\n        columns        : 'Columns',\n        paperFormat    : 'Paper format',\n        orientation    : 'Orientation',\n        repeatHeader   : 'Repeat header'\n    },\n\n    ExportRowsCombo : {\n        all     : 'All rows',\n        visible : 'Visible rows'\n    },\n\n    ExportOrientationCombo : {\n        portrait  : 'Portrait',\n        landscape : 'Landscape'\n    },\n\n    SinglePageExporter : {\n        singlepage : 'Single page'\n    },\n\n    MultiPageExporter : {\n        multipage     : 'Multiple pages',\n        exportingPage : ({ currentPage, totalPages }) => `Exporting page ${currentPage}/${totalPages}`\n    },\n\n    MultiPageVerticalExporter : {\n        multipagevertical : 'Multiple pages (vertical)',\n        exportingPage     : ({ currentPage, totalPages }) => `Exporting page ${currentPage}/${totalPages}`\n    },\n\n    RowExpander : {\n        loading  : 'Loading',\n        expand   : 'Expand',\n        collapse : 'Collapse'\n    }\n};\n\nexport default LocaleHelper.publishLocale(locale);\n","//region Import\n\nimport Base from '../../Core/Base.js';\n\nimport AjaxStore from '../../Core/data/AjaxStore.js';\nimport DomDataStore from '../../Core/data/DomDataStore.js';\nimport Store from '../../Core/data/Store.js';\n\nimport ArrayHelper from '../../Core/helper/ArrayHelper.js';\nimport BrowserHelper from '../../Core/helper/BrowserHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport EventHelper from '../../Core/helper/EventHelper.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\nimport VersionHelper from '../../Core/helper/VersionHelper.js';\nimport ScrollManager from '../../Core/util/ScrollManager.js';\n\nimport Mask from '../../Core/widget/Mask.js';\nimport Panel from '../../Core/widget/Panel.js';\nimport GlobalEvents from '../../Core/GlobalEvents.js';\n\nimport LocaleManager from '../../Core/localization/LocaleManager.js';\nimport Pluggable from '../../Core/mixin/Pluggable.js';\nimport State from '../../Core/mixin/State.js';\nimport ColumnStore, { columnResizeEvent } from '../data/ColumnStore.js';\nimport GridRowModel from '../data/GridRowModel.js';\nimport RowManager from '../row/RowManager.js';\nimport GridScroller from '../util/GridScroller.js';\nimport Location from '../util/Location.js';\nimport Header from './Header.js';\nimport Footer from './Footer.js';\n\nimport GridElementEvents from './mixin/GridElementEvents.js';\nimport GridFeatures from './mixin/GridFeatures.js';\nimport GridNavigation from './mixin/GridNavigation.js';\nimport GridResponsive from './mixin/GridResponsive.js';\nimport GridSelection from './mixin/GridSelection.js';\nimport GridState from './mixin/GridState.js';\nimport GridSubGrids from './mixin/GridSubGrids.js';\nimport LoadMaskable from '../../Core/mixin/LoadMaskable.js';\n\nimport Column from '../column/Column.js';\n\n// Needed since Grid now has its own localization\nimport '../localization/En.js';\n\n//endregion\n\n/**\n * @module Grid/view/GridBase\n */\n\nconst\n    resolvedPromise       = new Promise(resolve => resolve()),\n    storeListenerName     = 'GridBase:store',\n    defaultScrollOptions  = {\n        block  : 'nearest',\n        inline : 'nearest'\n    },\n    datasetReplaceActions = {\n        dataset  : 1,\n        pageLoad : 1,\n        filter   : 1\n    };\n\n/**\n * A thin base class for {@link Grid.view.Grid}. Does not include any features by default, allowing smaller custom built\n * bundles if used in place of {@link Grid.view.Grid}.\n *\n * **NOTE:** In most scenarios you probably want to use Grid instead of GridBase.\n\n * @extends Core/widget/Panel\n *\n * @mixes Core/mixin/Pluggable\n * @mixes Core/mixin/State\n * @mixes Grid/view/mixin/GridElementEvents\n * @mixes Grid/view/mixin/GridFeatures\n * @mixes Grid/view/mixin/GridResponsive\n * @mixes Grid/view/mixin/GridSelection\n * @mixes Grid/view/mixin/GridState\n * @mixes Grid/view/mixin/GridSubGrids\n * @mixes Core/mixin/LoadMaskable\n *\n * @features Grid/feature/CellCopyPaste\n * @features Grid/feature/CellEdit\n * @features Grid/feature/CellMenu\n * @features Grid/feature/CellTooltip\n * @features Grid/feature/ColumnAutoWidth\n * @features Grid/feature/ColumnDragToolbar\n * @features Grid/feature/ColumnPicker\n * @features Grid/feature/ColumnRename\n * @features Grid/feature/ColumnReorder\n * @features Grid/feature/ColumnResize\n * @features Grid/feature/FillHandle\n * @features Grid/feature/Filter\n * @features Grid/feature/FilterBar\n * @features Grid/feature/Group\n * @features Grid/feature/GroupSummary\n * @features Grid/feature/HeaderMenu\n * @features Grid/feature/MergeCells\n * @features Grid/feature/QuickFind\n * @features Grid/feature/RegionResize\n * @features Grid/feature/RowCopyPaste\n * @features Grid/feature/RowExpander\n * @features Grid/feature/RowReorder\n * @features Grid/feature/Search\n * @features Grid/feature/Sort\n * @features Grid/feature/StickyCells\n * @features Grid/feature/Stripe\n * @features Grid/feature/Summary\n * @features Grid/feature/Tree\n * @features Grid/feature/TreeGroup\n *\n * @features Grid/feature/experimental/ExcelExporter\n *\n * @features Grid/feature/export/PdfExport\n * @features Grid/feature/export/exporter/MultiPageExporter\n * @features Grid/feature/export/exporter/MultiPageVerticalExporter\n * @features Grid/feature/export/exporter/SinglePageExporter\n *\n * @plugins Grid/row/RowManager\n * @widget\n */\nexport default class GridBase extends Panel.mixin(\n    Pluggable,\n    State,\n    GridElementEvents,\n    GridFeatures,\n    GridNavigation,\n    GridResponsive,\n    GridSelection,\n    GridState,\n    GridSubGrids,\n    LoadMaskable\n) {\n    //region Config\n\n    static get $name() {\n        return 'GridBase';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'gridbase';\n    }\n\n    static get delayable() {\n        return {\n            onGridVerticalScroll : {\n                type : 'raf'\n            },\n\n            bufferedAfterColumnsResized : 250,\n\n            bufferedElementResize : 250\n        };\n    }\n\n    static get configurable() {\n        return {\n            //region Hidden configs\n\n            /**\n             * @hideconfigs autoUpdateRecord, defaults, hideWhenEmpty, itemCls, items, layout, layoutStyle, lazyItems, namedItems, record, textContent, defaultAction, html, htmlCls, tag, textAlign, trapFocus, content, defaultBindProperty, ripple\n             */\n\n            /**\n             * @hideproperties html, isSettingValues, isValid, items, record, values, content, layoutStyle\n             */\n\n            /**\n             * @hidefunctions attachTooltip, add, getWidgetById, insert, processWidgetConfig, remove, removeAll, getAt\n             */\n\n            //endregion\n\n            /**\n             * Set to `true` to make the grid read-only, by disabling any UIs for modifying data.\n             *\n             * __Note that checks MUST always also be applied at the server side.__\n             * @prp {Boolean} readOnly\n             * @default false\n             * @category Misc\n             */\n\n            /**\n             * Automatically set grids height to fit all rows (no scrolling in the grid). In general you should avoid\n             * using `autoHeight: true`, since it will bypass Grids virtual rendering and render all rows at once, which\n             * in a larger grid is really bad for performance.\n             * @config {Boolean}\n             * @default false\n             * @category Layout\n             */\n            autoHeight : null,\n\n            /**\n             * Configure this as `true` to allow elements within cells to be styled as `position: sticky`.\n             *\n             * Columns which contain sticky content will need to be configured with\n             *\n             * ```javascript\n             *    cellCls : 'b-sticky-cell',\n             * ```\n             *\n             * Or a custom renderer can add the class to the passed cell element.\n             *\n             * It is up to the application author how to style the cell content. It is recommended that\n             * a custom renderer create content with CSS class names which the application author\n             * will use to apply the `position`, and matching `margin-top` and `top` styles to keep the\n             * content stuck at the grid's top.\n             *\n             * Note that not all browsers support this CSS feature. A cross browser alternative\n             * is to use the {link Grid.feature.StickyCells StickyCells} Feature.\n             * @config {Boolean}\n             * @category Misc\n             */\n            enableSticky : null,\n\n            /**\n             * Set to true to allow text selection in the grid cells. Note, this cannot be used simultaneously with the\n             * `RowReorder` feature.\n             * @config {Boolean}\n             * @default false\n             * @category Selection\n             */\n            enableTextSelection : null,\n\n            /**\n             * Set to `true` to stretch the last column in a grid with all fixed width columns\n             * to fill extra available space if the grid's width is wider than the sum of all\n             * configured column widths.\n             * @config {Boolean}\n             * @default\n             * @category Layout\n             */\n            fillLastColumn : true,\n\n            /**\n             * See {@link Grid.view.Grid#keyboard-shortcuts Keyboard shortcuts} for details\n             * @config {Object<String,String>} keyMap\n             * @category Common\n             */\n\n            // TODO: break out as strategies\n            positionMode : 'translate', // translate, translate3d, position\n\n            /**\n             * Configure as `true` to have the grid show a red \"changed\" tag in cells who's\n             * field value has changed and not yet been committed.\n             * @config {Boolean}\n             * @default false\n             * @category Misc\n             */\n            showDirty : null,\n\n            /**\n             * An object containing sub grid configuration objects keyed by a `region` property.\n             * By default, grid has a 'locked' region (if configured with locked columns) and a 'normal' region.\n             * The 'normal' region defaults to use `flex: 1`.\n             *\n             * This config can be used to reconfigure the \"built in\" sub grids or to define your own.\n             *\n             * Redefining the default regions:\n             *\n             * {@frameworktabs}\n             * {@js}\n             * ```javascript\n             * new Grid({\n             *   subGridConfigs : {\n             *     locked : { flex : 1 },\n             *     normal : { width : 100 }\n             *   }\n             * });\n             * ```\n             * {@endjs}\n             * {@react}\n             * ```jsx\n             * const App = props => {\n             *     const subGridConfigs = {\n             *         locked : { flex : 1 },\n             *         normal : { width : 100 }\n             *     };\n             *\n             *     return <bryntum-grid subGridConfigs={subGridConfigs} />\n             * }\n             * ```\n             * {@endreact}\n             * {@vue}\n             * ```html\n             * <bryntum-grid :sub-grid-configs=\"subGridConfigs\" />\n             * ```\n             * ```javascript\n             * export default {\n             *     setup() {\n             *         return {\n             *             subGridConfigs : [\n             *                 locked : { flex : 1 },\n             *                 normal : { width : 100 }\n             *             ]\n             *         };\n             *     }\n             * }\n             * ```\n             * {@endvue}\n             * {@angular}\n             * ```html\n             * <bryntum-grid [subGridConfigs]=\"subGridConfigs\"></bryntum-grid>\n             * ```\n             * ```typescript\n             * export class AppComponent {\n             *      subGridConfigs = [\n             *          locked : { flex : 1 },\n             *          normal : { width : 100 }\n             *      ]\n             *  }\n             * ```\n             * {@endangular}\n             * {@endframeworktabs}\n             *\n             * Defining your own multi region grid:\n             *\n             * ```javascript\n             * new Grid({\n             *   subGridConfigs : {\n             *     left   : { width : 100 },\n             *     middle : { flex : 1 },\n             *     right  : { width  : 100 }\n             *   },\n             *\n             *   columns : [\n             *     { field : 'manufacturer', text: 'Manufacturer', region : 'left' },\n             *     { field : 'model', text: 'Model', region : 'middle' },\n             *     { field : 'year', text: 'Year', region : 'middle' },\n             *     { field : 'sales', text: 'Sales', region : 'right' }\n             *   ]\n             * });\n             * ```\n             * @config {Object<String,SubGridConfig>}\n             * @category Misc\n             */\n            subGridConfigs : {\n                normal : { flex : 1 }\n            },\n\n            /**\n             * Store that holds records to display in the grid, or a store config object. If the configuration contains\n             * a `readUrl`, an `AjaxStore` will be created.\n             *\n             * Note that a store will be created during initialization if none is specified.\n             *\n             * Supplying a store config object at initialization time:\n             *\n             * ```javascript\n             * const grid = new Grid({\n             *     store : {\n             *         fields : ['name', 'powers'],\n             *         data   : [\n             *             { id : 1, name : 'Aquaman', powers : 'Decent swimmer' },\n             *             { id : 2, name : 'Flash', powers : 'Pretty fast' },\n             *         ]\n             *     }\n             * });\n             * ```\n             *\n             * Accessing the store at runtime:\n             *\n             * ```javascript\n             * grid.store.sort('powers');\n             * ```\n             *\n             * @prp {Core.data.Store}\n             * @accepts {Core.data.Store|StoreConfig}\n             * @category Common\n             */\n            store : {\n                value : {},\n\n                $config : 'nullify'\n            },\n\n            rowManager : {\n                value : {},\n\n                $config : ['nullify', 'lazy']\n            },\n\n            /**\n             * Configuration values for the {@link Core.util.ScrollManager} class on initialization. Returns the\n             * {@link Core.util.ScrollManager} at runtime.\n             *\n             * @prp {Core.util.ScrollManager}\n             * @accepts {ScrollManagerConfig|Core.util.ScrollManager}\n             * @readonly\n             * @category Scrolling\n             */\n            scrollManager : {\n                value : {},\n\n                $config : ['nullify', 'lazy']\n            },\n\n            /**\n             * Accepts column definitions for the grid during initialization. They will be used to create\n             * {@link Grid/column/Column} instances that are added to a {@link Grid/data/ColumnStore}.\n             *\n             * At runtime it is read-only and returns the {@link Grid/data/ColumnStore}.\n             *\n             * Initialization using column config objects:\n             *\n             * ```javascript\n             * new Grid({\n             *   columns : [\n             *     { text : 'Alias', field : 'alias' },\n             *     { text : 'Superpower', field : 'power' }\n             *   ]\n             * });\n             * ```\n             *\n             * Also accepts a store config object:\n             *\n             * ```javascript\n             * new Grid({\n             *   columns : {\n             *     data : [\n             *       { text : 'Alias', field : 'alias' },\n             *       { text : 'Superpower', field : 'power' }\n             *     ],\n             *     listeners : {\n             *       update() {\n             *         // Some update happened\n             *       }\n             *     }\n             *   }\n             * });\n             * ```\n             *\n             * Access the {@link Grid/data/ColumnStore} at runtime to manipulate columns:\n             *\n             * ```javascript\n             * grid.columns.add({ field : 'column', text : 'New column' });\n             * ```\n             * @prp {Grid.data.ColumnStore}\n             * @accepts {Grid.data.ColumnStore|GridColumnConfig[]|ColumnStoreConfig}\n             * @readonly\n             * @category Common\n             */\n            columns : {\n                value : [],\n\n                $config : 'nullify'\n            },\n\n            /**\n             * Grid's `min-height`. Defaults to `10em` to be sure that the Grid always has a height wherever it is\n             * inserted.\n             *\n             * Can be either a String or a Number (which will have 'px' appended).\n             *\n             * Note that _reading_ the value will return the numeric value in pixels.\n             *\n             * @config {String|Number}\n             * @category Layout\n             */\n            minHeight : '10em',\n\n            hideFooters : true,\n\n            contentElMutationObserver : false,\n            trapFocus                 : false,\n\n            ariaElement : 'bodyElement',\n\n            cellTabIndex : -1,\n\n            rowCls : {\n                value   : 'b-grid-row',\n                $config : {\n                    merge : this.mergeCls\n                }\n            },\n\n            cellCls : {\n                value   : 'b-grid-cell',\n                $config : {\n                    merge : this.mergeCls\n                }\n            },\n\n            /**\n             * Text or HTML to display when there is no data to display in the grid\n             * @prp {String}\n             * @default\n             * @category Common\n             */\n            emptyText        : 'L{noRows}',\n            sortFeatureStore : 'store'\n        };\n    }\n\n    // Default settings, applied in grids constructor.\n    static get defaultConfig() {\n        return {\n            /**\n             * Row height in pixels. This allows the default height for rows to be controlled. Note that it may be\n             * overriden by specifying a {@link Grid/data/GridRowModel#field-rowHeight} on a per record basis, or from\n             * a column {@link Grid/column/Column#config-renderer}.\n             *\n             * When initially configured as `null`, an empty row will be measured and its height will be used as default\n             * row height, enabling it to be controlled using CSS\n             *\n             * @prp {Number}\n             * @category Common\n             */\n            rowHeight : null,\n\n            /**\n             * Use fixed row height. Setting this to `true` will configure the underlying RowManager to use fixed row\n             * height, which sacrifices the ability to use rows with variable height to gain a fraction better\n             * performance.\n             *\n             * Using this setting also ignores the {@link Grid.view.GridBase#config-getRowHeight} function, and thus any\n             * row height set in data. Only Grids configured {@link Grid.view.GridBase#config-rowHeight} is used.\n             *\n             * @config {Boolean}\n             * @category Layout\n             */\n            fixedRowHeight : null,\n\n            /**\n             * A function called for each row to determine its height. It is passed a {@link Core.data.Model record} and\n             * expected to return the desired height of that records row. If the function returns a falsy value, Grids\n             * configured {@link Grid.view.GridBase#config-rowHeight} is used.\n             *\n             * The default implementation of this function returns the row height from the records\n             * {@link Grid.data.GridRowModel#field-rowHeight rowHeight field}.\n             *\n             * Override this function to take control over how row heights are determined:\n             *\n             * ```javascript\n             * new Grid({\n             *    getRowHeight(record) {\n             *        if (record.low) {\n             *            return 20;\n             *        }\n             *        else if (record.high) {\n             *            return 60;\n             *        }\n             *\n             *        // Will use grids configured rowHeight\n             *        return null;\n             *    }\n             * });\n             * ```\n             *\n             * NOTE: Height set in a Column renderer takes precedence over the height returned by this function.\n             *\n             * @config {Function} getRowHeight\n             * @param {Core.data.Model} getRowHeight.record Record to determine row height for\n             * @returns {Number} Desired row height\n             * @category Layout\n             */\n\n            // used if no rowHeight specified and none found in CSS. not public since our themes have row height\n            // specified and this is more of an internal failsafe\n            defaultRowHeight : 45,\n\n            /**\n             * Refresh entire row when a record changes (`true`) or, if possible, only the cells affected (`false`).\n             *\n             * When this is set to `false`, then if a column uses a renderer, cells in that column will still\n             * be updated because it is impossible to know whether the cells value will be affected.\n             *\n             * If a standard, provided Column class is used with no custom renderer, its cells will only be updated\n             * if the column's {@link Grid.column.Column#config-field} is changed.\n             * @config {Boolean}\n             * @default\n             * @category Misc\n             */\n            fullRowRefresh : true,\n\n            /**\n             * True to not create any grid column headers\n             * @config {Boolean}\n             * @default false\n             * @category Misc\n             */\n            hideHeaders : null,\n\n            /**\n             * Specify `true` to preserve vertical scroll position after store actions that trigger a `refresh` event,\n             * such as loading new data and filtering.\n             * @config {Boolean}\n             * @default false\n             * @category Misc\n             */\n            preserveScrollOnDatasetChange : null,\n\n            /**\n             * True to preserve focused cell after loading new data\n             * @config {Boolean}\n             * @default\n             * @category Misc\n             */\n            preserveFocusOnDatasetChange : true,\n\n            /**\n             * Convenient shortcut to set data in grids store both during initialization and at runtime. Can also be\n             * used to retrieve data at runtime, although we do recommend interacting with Grids store instead using\n             * the {@link #property-store} property.\n             *\n             * Setting initial data during initialization:\n             *\n             * ```javascript\n             * const grid = new Grid({\n             *     data : [\n             *       { id : 1, name : 'Batman' },\n             *       { id : 2, name : 'Robin' },\n             *       ...\n             *     ]\n             * });\n             * ```\n             *\n             * Setting data at runtime:\n             *\n             * ```javascript\n             * grid.data = [\n             *     { id : 3, name : 'Joker' },\n             *     ...\n             * ];\n             * ```\n             *\n             * Getting data at runtime:\n             *\n             * ```javascript\n             * const records = store.data;\n             * ```\n             *\n             * Note that a Store will be created during initialization if none is specified.\n             *\n             * @prp {Core.data.Model[]}\n             * @accepts {Object[]|Core.data.Model[]}\n             * @category Common\n             */\n            data : null,\n\n            /**\n             * Region to which columns are added when they have none specified\n             * @config {String}\n             * @default\n             * @category Misc\n             */\n            defaultRegion : 'normal',\n\n            /**\n             * true to destroy the store when the grid is destroyed\n             * @config {Boolean}\n             * @default false\n             * @category Misc\n             */\n            destroyStore : null,\n\n            /**\n             * Grids change the `maskDefaults` to cover only their `body` element.\n             * @config {MaskConfig|Core.widget.Mask}\n             * @category Misc\n             */\n            maskDefaults : {\n                cover  : 'body',\n                target : 'element'\n            },\n\n            /**\n             * Set to `false` to inhibit column lines during initialization or assign to it at runtime to toggle column\n             * line visibility.\n             *\n             * End result might be overruled by/differ between themes.\n             *\n             * @prp {Boolean}\n             * @default\n             * @category Misc\n             */\n            columnLines : true,\n\n            /**\n             * Set to `false` to only measure cell contents when double clicking the edge between column headers.\n             * @config {Boolean}\n             * @default\n             * @category Layout\n             */\n            resizeToFitIncludesHeader : true,\n\n            /**\n             * Set to `false` to prevent remove row animation and remove the delay related to that.\n             * @config {Boolean}\n             * @default\n             * @category Misc\n             */\n            animateRemovingRows : true,\n\n            /**\n             * Set to `true` to not get a warning when using another base class than GridRowModel for your grid data. If\n             * you do, and would like to use the full feature set of the grid then include the fields from GridRowModel\n             * in your model definition.\n             * @config {Boolean}\n             * @default false\n             * @category Misc\n             */\n            disableGridRowModelWarning : null,\n\n            headerClass : Header,\n            footerClass : Footer,\n\n            testPerformance : false,\n            rowScrollMode   : 'move', // move, dom, all\n\n            /**\n             * Grid monitors window resize by default.\n             * @config {Boolean}\n             * @default true\n             * @category Misc\n             */\n            monitorResize : true,\n\n            /**\n             * An object containing Feature configuration objects (or `true` if no configuration is required)\n             * keyed by the Feature class name in all lowercase.\n             * @config {Object}\n             * @category Common\n             */\n            features : true,\n\n            /**\n             * Configures whether the grid is scrollable in the `Y` axis. This is used to configure a {@link Grid.util.GridScroller}.\n             * See the {@link #config-scrollerClass} config option.\n             * @config {Boolean|ScrollerConfig|Core.helper.util.Scroller}\n             * @category Scrolling\n             */\n            scrollable : {\n                // Just Y for now until we implement a special grid.view.Scroller subclass\n                // Which handles the X scrolling of subgrids.\n                overflowY : true\n            },\n\n            /**\n             * The class to instantiate to use as the {@link #config-scrollable}. Defaults to {@link Grid.util.GridScroller}.\n             * @config {Core.helper.util.Scroller}\n             * @typings {typeof Scroller}\n             * @category Scrolling\n             */\n            scrollerClass : GridScroller,\n\n            refreshSuspended : 0,\n\n            /**\n             * Animation transition duration in milliseconds.\n             * @prp {Number}\n             * @default\n             * @category Misc\n             */\n            transitionDuration : 500,\n\n            /**\n             * Event which is used to show context menus.\n             * Available options are: 'contextmenu', 'click', 'dblclick'.\n             * @config {'contextmenu'|'click'|'dblclick'}\n             * @category Misc\n             * @default\n             */\n            contextMenuTriggerEvent : 'contextmenu',\n\n            localizableProperties : ['emptyText'],\n\n            asyncEventSuffix : '',\n\n            testConfig : {\n                transitionDuration : 50\n            }\n        };\n    }\n\n    static get properties() {\n        return {\n            _selectedRecords      : [],\n            _verticalScrollHeight : 0,\n            virtualScrollHeight   : 0,\n            _scrollTop            : null\n        };\n    }\n\n    // Keep this commented out to have easy access to the syntax next time we need to use it\n    // static get deprecatedEvents() {\n    //     return {\n    //         cellContextMenuBeforeShow : {\n    //             product            : 'Grid',\n    //             invalidAsOfVersion : '5.0.0',\n    //             message            : '`cellContextMenuBeforeShow` event is deprecated, in favor of `cellMenuBeforeShow` event. Please see https://bryntum.com/products/grid/docs/guide/Grid/upgrades/4.0.0 for more information.'\n    //         }\n    //     };\n    // }\n\n    //endregion\n\n    //region Init-destroy\n\n    finishConfigure(config) {\n        const\n            me             = this,\n            { initScroll } = me;\n\n        // Make initScroll a one time only call\n        me.initScroll = () => !me.scrollInitialized && initScroll.call(me);\n\n        super.finishConfigure(config);\n\n        // When locale is applied columns react and change, which triggers `change` event on columns store for each\n        // changed column, and every change normally triggers rendering view. This overhead becomes noticeable with\n        // larger amount of columns. So we set two listeners to locale events: prioritized listener to be executed first\n        // and suspend renderContents method and unprioritized one to resume method and call it immediately.\n        LocaleManager.ion({\n            locale  : 'onBeforeLocaleChange',\n            prio    : 1,\n            thisObj : me\n        });\n\n        LocaleManager.ion({\n            locale  : 'onLocaleChange',\n            prio    : -1,\n            thisObj : me\n        });\n\n        GlobalEvents.ion({\n            theme   : 'onThemeChange',\n            thisObj : me\n        });\n\n        me.ion({\n            subGridExpand : 'onSubGridExpand',\n            prio          : -1,\n            thisObj       : me\n        });\n\n        // Buffered for scrolling, to be called\n        me.bufferedFixElementHeights = me.buffer('fixElementHeights', 350, me);\n\n        // Add the extra grid classes to the element\n        me.setGridClassList(me.element.classList);\n    }\n\n    onSubGridExpand() {\n        // Need to rerender all rows, because if the rows were rerendered (by adding a new column to another region for example)\n        // while the region was collapsed, cells in the region will be empty.\n        this.renderContents();\n    }\n\n    onBeforeLocaleChange() {\n        this._suspendRenderContentsOnColumnsChanged = true;\n    }\n\n    onLocaleChange() {\n        this._suspendRenderContentsOnColumnsChanged = false;\n        if (this.isPainted) {\n            this.renderContents();\n        }\n    }\n\n    finalizeInit() {\n        super.finalizeInit();\n\n        if (this.store.isLoading) {\n            // Maybe show loadmask if store is already loading when grid is constructed\n            this.onStoreBeforeRequest();\n        }\n    }\n\n    changeScrollManager(scrollManager, oldScrollManager) {\n        oldScrollManager?.destroy();\n\n        if (scrollManager) {\n            return ScrollManager.new({\n                element : this.element,\n                owner   : this\n            }, scrollManager);\n        }\n        else {\n            return null;\n        }\n    }\n\n    /**\n     * Cleanup\n     * @private\n     */\n    doDestroy() {\n        const me = this;\n\n        me.detachListeners(storeListenerName);\n\n        me.scrollManager?.destroy();\n\n        for (const feature of Object.values(me.features)) {\n            feature.destroy?.();\n        }\n\n        me._focusedCell = null;\n        me.columns.destroy();\n\n        super.doDestroy();\n    }\n\n    /**\n     * Adds extra classes to the Grid element after it's been configured.\n     * Also iterates through features, thus ensuring they have been initialized.\n     * @private\n     */\n    setGridClassList(classList) {\n        const me = this;\n\n        Object.values(me.features).forEach(feature => {\n            if (feature.disabled) {\n                return;\n            }\n\n            let featureClass;\n\n            if (Object.prototype.hasOwnProperty.call(feature.constructor, 'featureClass')) {\n                featureClass = feature.constructor.featureClass;\n            }\n            else {\n                featureClass = `b-${(feature instanceof Base ? feature.$$name : feature.constructor.name)}`;\n            }\n\n            if (featureClass) {\n                classList.add(featureClass.toLowerCase());\n            }\n        });\n    }\n\n    //endregion\n\n    // region Feature events\n\n    // For documentation & typings purposes\n\n    /**\n     * Fires after a sub grid is collapsed.\n     * @event subGridCollapse\n     * @param {Grid.view.Grid} source The firing Grid instance\n     * @param {Grid.view.SubGrid} subGrid The sub grid instance\n     */\n\n    /**\n     * Fires after a sub grid is expanded.\n     * @event subGridExpand\n     * @param {Grid.view.Grid} source The firing Grid instance\n     * @param {Grid.view.SubGrid} subGrid The sub grid instance\n     */\n\n    /**\n     * Fires before a row is rendered.\n     * @event beforeRenderRow\n     * @param {Grid.view.Grid} source The firing Grid instance.\n     * @param {Grid.row.Row} row The row about to be rendered.\n     * @param {Core.data.Model} record The record for the row.\n     * @param {Number} recordIndex The zero-based index of the record.\n     */\n    /**\n     * Fires after a row is rendered.\n     * @event renderRow\n     * @param {Grid.view.Grid} source The firing Grid instance.\n     * @param {Grid.row.Row} row The row that has been rendered.\n     * @param {Core.data.Model} record The record for the row.\n     * @param {Number} recordIndex The zero-based index of the record.\n     */\n\n    //endregion\n\n    //region Grid template & elements\n\n    compose() {\n        const { autoHeight, enableSticky, enableTextSelection, fillLastColumn, positionMode, showDirty } = this;\n\n        return {\n            class : {\n                [`b-grid-${positionMode}`] : 1,\n                'b-enable-sticky'          : enableSticky,\n                'b-grid-notextselection'   : !enableTextSelection,\n                'b-autoheight'             : autoHeight,\n                'b-fill-last-column'       : fillLastColumn,\n                'b-show-dirty'             : showDirty\n            }\n        };\n    }\n\n    get cellCls() {\n        const { _cellCls } = this;\n\n        // It may have been merged to create a DomClassList, but 90% of the time will be a simple string.\n        return _cellCls.value || _cellCls;\n    }\n\n    get bodyConfig() {\n        const { autoHeight, hideFooters, hideHeaders } = this;\n\n        return {\n            reference : 'bodyElement',\n            className : {\n                'b-autoheight'      : autoHeight,\n                'b-grid-panel-body' : 1\n            },\n\n            // Only include aria-labelled-by if we have a header\n            [this.hasHeader ? 'ariaLabelledBy' : ''] : `${this.id}-panel-title`,\n\n            children : {\n                headerContainer : {\n                    tag             : 'header',\n                    role            : 'row',\n                    'aria-rowindex' : 1,\n                    className       : {\n                        'b-grid-header-container' : 1,\n                        'b-hidden'                : hideHeaders\n                    }\n                },\n                bodyContainer : {\n                    className : 'b-grid-body-container',\n                    tabIndex  : -1,\n\n                    // Explicitly needs this because it's in theory focusable\n                    // and DomSync won't add a default role\n                    role     : 'presentation',\n                    children : {\n                        verticalScroller : {\n                            className : 'b-grid-vertical-scroller'\n                        }\n                    }\n                },\n                virtualScrollers : {\n                    className : 'b-virtual-scrollers b-hide-display',\n                    style     : BrowserHelper.isFirefox && DomHelper.scrollBarWidth ? {\n                        height : `${DomHelper.scrollBarWidth}px`\n                    } : undefined\n                },\n                footerContainer : {\n                    tag       : 'footer',\n                    className : {\n                        'b-grid-footer-container' : 1,\n                        'b-hidden'                : hideFooters\n                    }\n                }\n            }\n        };\n    }\n\n    get contentElement() {\n        return this.verticalScroller;\n    }\n\n    get overflowElement() {\n        return this.bodyContainer;\n    }\n\n    updateHideFooters(hide) {\n        this.footerContainer?.classList[hide ? 'add' : 'remove']('b-hidden');\n    }\n\n    //endregion\n\n    //region Columns\n\n    changeColumns(columns, currentStore) {\n        const me = this;\n\n        // TODO: @johan: reconfiguring, ie changing whole column set should work.\n        // Empty, clear or destroy store\n        if (!columns && currentStore) {\n            // Destroy when Grid is destroyed, if we created the ColumnStore\n            if (me.isDestroying) {\n                currentStore.owner === me && currentStore.destroy();\n            }\n            // Clear if set to falsy value at some other point\n            else {\n                currentStore.removeAll();\n            }\n\n            return currentStore;\n        }\n\n        // Keep store if configured with one\n        if (columns.isStore) {\n            currentStore?.owner === me && currentStore.destroy();\n\n            columns.grid = me;\n\n            return columns;\n        }\n\n        // Given an array of columns\n        if (Array.isArray(columns)) {\n            // If we have a store, plug them in\n            if (currentStore) {\n\n                // Remove and destroy existing columns\n                // Filter columns to be destroyed for ability to reassign existing ones and not destroy them\n                me._suspendRenderContentsOnColumnsChanged = true;\n                const columnsToDestroy                    = currentStore.allRecords.filter(column => !columns.includes(column) && column !== me.checkboxSelectionColumn);\n                currentStore.remove(currentStore.allRecords, true);\n                columnsToDestroy.forEach(column => column.destroy?.());\n\n                currentStore.data                         = columns;\n                me._suspendRenderContentsOnColumnsChanged = false;\n\n                return currentStore;\n            }\n\n            // No store, use as data for a new store below\n            columns = { data : columns };\n        }\n\n        if (currentStore) {\n            throw new Error('Replacing ColumnStore is not supported');\n        }\n\n        // Assuming a store config object\n        return ColumnStore.new({\n            grid  : me,\n            owner : me\n        }, columns);\n    }\n\n    updateColumns(columns, was) {\n        const me = this;\n\n        super.updateColumns?.(columns, was);\n\n        // changes might be triggered when applying state, before grid is rendered\n        // TODO: have this run a lighter weight, non-destructive response.\n        // onColumnsChanged is a start, but lots of machinery is hooked to render.\n        columns.ion({\n            refresh : me.onColumnsChanged,\n            change  : me.onColumnsChanged,\n            sort    : me.onColumnsChanged,\n            thisObj : me\n        });\n        columns.ion(columnResizeEvent(me.onColumnsResized, me));\n\n        // Add touch class for touch devices\n        if (BrowserHelper.isTouchDevice) {\n            me.touch = true;\n\n            // apply touchConfig for columns that defines it\n            columns.forEach(column => {\n                const { touchConfig } = column;\n                if (touchConfig) {\n                    column.applyState(touchConfig);\n                }\n            });\n        }\n\n        me.bodyElement?.setAttribute('aria-colcount', columns.visibleColumns.length);\n    }\n\n    onColumnsChanged({ type, action, changes, record : column, records : addedColumns, isMove }) {\n        const isSingleFieldChange = changes && Object.keys(changes).length === 1;\n\n        if ((type === 'refresh' && action !== 'batch') ||\n            // Ignore the update of parentIndex following a column move (we redraw on the insert)\n            (action === 'update' && isSingleFieldChange && 'parentIndex' in changes)) {\n            return;\n        }\n\n        const\n            me = this,\n            {\n                columns,\n                checkboxSelectionColumn\n            }  = me;\n\n        // this.onPaint will handle changes caused by updateResponsive\n        if (!me.isPainted || (isMove && action === 'remove')) {\n            return;\n        }\n\n        // See if we have to create and add new SubGrids to accommodate new columns.\n        if (action === 'add') {\n            for (const column of addedColumns) {\n                const { region } = column;\n\n                // See if there's a home for this column, if not, add one\n                if (!me.subGrids[region]) {\n                    me.add(me.createSubGrid(region, me.subGridConfigs[region]));\n                }\n            }\n        }\n\n        if (action === 'update') {\n            // Just updating width is already handled in a minimal way.\n            if ('width' in changes || 'minWidth' in changes || 'maxWidth' in changes || 'flex' in changes) {\n                // Update any leaf columns that want to be repainted on size change\n                const region = column.region;\n\n                // We must not capture visibleColumns from the columns var\n                // at the top. It's a cached/recalculated value that we\n                // are invalidating in the body of this function.\n                columns.visibleColumns.forEach(col => {\n                    if (col.region === region && col.repaintOnResize) {\n                        me.refreshColumn(col);\n                    }\n                });\n\n                me.afterColumnsChange({ action, changes, column });\n                return;\n            }\n\n            // No repaint if only changing column text\n            if ('text' in changes && isSingleFieldChange) {\n                column.subGrid.refreshHeader();\n                return;\n            }\n\n            // Column toggled, need to recheck if any visible column has flex\n            if ('hidden' in changes) {\n                const subGrid = me.getSubGridFromColumn(column.id);\n                subGrid.header.fixHeaderWidths();\n                subGrid.footer.fixFooterWidths();\n                subGrid.updateHasFlex();\n            }\n        }\n\n        // Might have to add or remove subgrids when assigning a new set of columns or when changing region\n        if (action === 'dataset' || action === 'batch' || (action === 'update' && 'region' in changes)) {\n            const\n                regions             = columns.getDistinctValues('region'),\n                { toRemove, toAdd } = ArrayHelper.delta(regions, me.regions, true);\n\n            me.remove(toRemove.map(region => me.getSubGrid(region)));\n            me.add(toAdd.map(region => me.createSubGrid(region)));\n        }\n\n        // Check if checkbox selection column was removed, if so insert it back as the first column\n        if (checkboxSelectionColumn && !columns.includes(checkboxSelectionColumn)) {\n            // Insert the checkbox after any rownumber column. If not there, -1 means in at 0.\n            const insertIndex = columns.indexOf(columns.findRecord('type', 'rownumber')) + 1;\n\n            columns.insert(insertIndex, checkboxSelectionColumn, true);\n        }\n\n        if (!me._suspendRenderContentsOnColumnsChanged) {\n            me.renderContents();\n        }\n\n        // Columns which are flexed, but as part of a grouped column cannot just have their flex\n        // value reflected in the flex value of its cells. They are flexing a different available space.\n        // These have to be set to the exact width and kept synced.\n        me.syncFlexedSubCols();\n\n        // We must not capture visibleColumns from the columns var\n        // at the top. It's a cached/recalculated value that we must\n        // are invalidating in the body of this function.\n        me.bodyElement.setAttribute('aria-colcount', columns.visibleColumns.length);\n\n        me.afterColumnsChange({ action, changes, column });\n    }\n\n    onColumnsResized({ changes, record : column }) {\n        const me = this;\n\n        if (me.isConfiguring) {\n            return;\n        }\n\n        const\n            domWidth    = DomHelper.setLength(column.width),\n            domMinWidth = DomHelper.setLength(column.minWidth),\n            domMaxWidth = DomHelper.setLength(column.maxWidth),\n            subGrid     = me.getSubGridFromColumn(column.id);\n\n        // Let header and footer fix their own widths\n        subGrid.header.fixHeaderWidths();\n        subGrid.footer.fixFooterWidths();\n        subGrid.updateHasFlex();\n\n        // We can't apply flex from flexed subColums - they are flexing inside a different available width.\n        if (!(column.flex && column.childLevel)) {\n            if (!me.cellEls || column !== me.lastColumnResized) {\n                me.cellEls           = DomHelper.children(\n                    me.element,\n                    `.b-grid-cell[data-column-id=\"${column.id}\"]`\n                );\n                me.lastColumnResized = column;\n            }\n\n            for (const cell of me.cellEls) {\n                if ('width' in changes) {\n                    // https://app.assembla.com/spaces/bryntum/tickets/8041\n                    // Although header and footer elements must be sized using flex-basis to avoid the busting out problem,\n                    // grid cells MUST be sized using width since rows are absolutely positioned and will not cause the\n                    // busting out problem, and rows will not stretch to shrinkwrap the cells unless they are widthed with\n                    // width.\n                    cell.style.width = domWidth;\n                }\n\n                if ('minWidth' in changes) {\n                    cell.style.minWidth = domMinWidth;\n                }\n                if ('maxWidth' in changes) {\n                    cell.style.maxWidth = domMaxWidth;\n                }\n\n                if ('flex' in changes) {\n                    cell.style.flex = column.flex ?? null;\n                }\n            }\n        }\n\n        // If we're being driven by the ColumnResizer or other bulk column resizer (like\n        // ColumnAutoWidth), they will finish up with a call to afterColumnsResized.\n        if (!me.resizingColumns) {\n            me.afterColumnsResized(column);\n        }\n\n        // Columns which are flexed, but as part of a grouped column cannot just have their flex\n        // value reflected in the flex value of its cells. They are flexing a different available space.\n        // These have to be set to the exact width and kept synced.\n        me.syncFlexedSubCols();\n    }\n\n    afterColumnsResized(column) {\n        const me = this;\n\n        me.eachSubGrid(subGrid => {\n            // Only needed if the changed column is owned by the SubGrid\n            if (!subGrid.collapsed && (!column || column.region === subGrid.region)) {\n                subGrid.fixWidths();\n                subGrid.fixRowWidthsInSafariEdge();\n            }\n        });\n\n        me.lastColumnResized = me.cellEls = null;\n\n        // Buffer some expensive operations, like updating the fake scrollers\n        me.bufferedAfterColumnsResized(column);\n\n        // Must happen immediately, not inside the bufferedAfterColumnsResized\n        me.onHeightChange();\n    }\n\n    syncFlexedSubCols() {\n        const flexedSubCols = this.columns.query(c => c.flex && c.childLevel && c.element);\n\n        // Columns which are flexed, but as part of a grouped column cannot just have their flex\n        // value reflected in the flex value of its cells. They are flexing a different available space.\n        // These have to be set to the exact width and kept synced.\n        if (flexedSubCols) {\n            for (const column of flexedSubCols) {\n                const\n                    width   = column.element.getBoundingClientRect().width,\n                    cellEls = DomHelper.children(\n                        this.element,\n                        `.b-grid-cell[data-column-id=\"${column.id}\"]`\n                    );\n\n                for (const cell of cellEls) {\n                    cell.style.flex = `0 0 ${width}px`;\n                }\n            }\n        }\n    }\n\n    bufferedAfterColumnsResized(column) {\n        // Columns that allow their cell content to drive the row height requires a rerender after resize\n        if (this.columns.usesAutoHeight) {\n            this.refreshRows();\n        }\n\n        this.refreshVirtualScrollbars();\n        this.eachSubGrid(subGrid => {\n            // Only needed if the changed column is owned by the SubGrid\n            if (!subGrid.collapsed && (!column || column.region === subGrid.region)) {\n                subGrid.refreshFakeScroll();\n            }\n        });\n    }\n\n    bufferedElementResize() {\n        this.refreshRows();\n    }\n\n    onInternalResize(element, newWidth, newHeight, oldWidth, oldHeight) {\n        // If a flexed subGrid would be flexed *down* by a width reduction, allow it\n        // to lay itself out before the refreshVirtualScrollbars called by GridElementEvents\n        // asks them whether they are overflowingHorizontally.\n        // This is to avoid an unecessary extra layout with a horizontal\n        // scrollbar which may be hidden when the subgrid adjusts itself when its ResizeMonitor\n        // notification arrives - they are delivered outermost->innermost, we we find out first here.\n        // When the actualResizeMonitor notification arrives, it will be a no-op.\n        if (DomHelper.scrollBarWidth && newWidth < oldWidth) {\n            this.eachSubGrid(subGrid => {\n                if (subGrid.flex) {\n                    subGrid.onElementResize(subGrid.element);\n                }\n            });\n        }\n\n        super.onInternalResize(...arguments);\n\n        // Columns that allow their cell content to drive the row height requires a rerender after element resize\n        if (this.isPainted && newWidth !== oldWidth && this.columns.usesFlexAutoHeight) {\n            this.bufferedElementResize();\n        }\n    }\n\n    //endregion\n\n    //region Rows\n\n    /**\n     * Get the topmost visible grid row\n     * @member {Grid.row.Row} firstVisibleRow\n     * @readonly\n     * @category Rows\n     */\n\n    /**\n     * Get the last visible grid row\n     * @member {Grid.row.Row} lastVisibleRow\n     * @readonly\n     * @category Rows\n     */\n\n    /**\n     * Get the Row that is currently displayed at top.\n     * @member {Grid.row.Row} topRow\n     * @readonly\n     * @category Rows\n     * @private\n     */\n\n    /**\n     * Get the Row currently displayed furthest down.\n     * @member {Grid.row.Row} bottomRow\n     * @readonly\n     * @category Rows\n     * @private\n     */\n\n    /**\n     * Get Row for specified record id.\n     * @function getRowById\n     * @param {Core.data.Model|String|Number} recordOrId Record id (or a record)\n     * @returns {Grid.row.Row} Found Row or null if record not rendered\n     * @category Rows\n     * @private\n     */\n\n    /**\n     * Returns top and bottom for rendered row or estimated coordinates for unrendered.\n     * @function getRecordCoords\n     * @param {Core.data.Model|String|Number} recordOrId Record or record id\n     * @returns {Object} Record bounds with format { top, height, bottom }\n     * @category Calculations\n     * @private\n     */\n\n    /**\n     * Get the Row at specified index. \"Wraps\" index if larger than available rows.\n     * @function getRow\n     * @param {Number} index\n     * @returns {Grid.row.Row}\n     * @category Rows\n     * @private\n     */\n\n    /**\n     * Get a Row for either a record, a record id or an HTMLElement\n     * @function getRowFor\n     * @param {HTMLElement|Core.data.Model|String|Number} recordOrId Record or record id or HTMLElement\n     * @returns {Grid.row.Row} Found Row or `null` if record not rendered\n     * @category Rows\n     */\n\n    /**\n     * Get a Row from an HTMLElement\n     * @function getRowFromElement\n     * @param {HTMLElement} element\n     * @returns {Grid.row.Row} Found Row or `null` if record not rendered\n     * @category Rows\n     * @private\n     */\n\n    changeRowManager(rowManager, oldRowManager) {\n        const me = this;\n\n        // Use row height from CSS if not specified in config. Did not want to turn this into a getter/setter for\n        // rowHeight since RowManager will plug its implementation into Grid when created below, and after initial\n        // configuration that is what should be used\n        if (!me._isRowMeasured) {\n            me.measureRowHeight();\n        }\n\n        oldRowManager?.destroy();\n\n        if (rowManager) {\n            // RowManager is a plugin, it is configured with its grid as its \"client\".\n            // It uses client.store as its record source.\n            const result = RowManager.new({\n                grid              : me,\n                rowHeight         : me.rowHeight,\n                rowScrollMode     : me.rowScrollMode || 'move',\n                autoHeight        : me.autoHeight,\n                fixedRowHeight    : me.fixedRowHeight,\n                internalListeners : {\n                    changeTotalHeight   : 'onRowManagerChangeTotalHeight',\n                    requestScrollChange : 'onRowManagerRequestScrollChange',\n                    thisObj             : me\n                }\n            }, rowManager);\n\n            // The grid announces row rendering to allow customization of rows.\n            me.relayEvents(result, ['beforeRenderRow', 'renderRow']);\n\n            // RowManager injects itself as a property into the grid so that the grid\n            // can reference it during RowManager's spin-up. We need to undo that now\n            // otherwise updaters will not run.\n            me._rowManager = null;\n            return result;\n        }\n    }\n\n    // Default implementation, documented in `defaultConfig`\n    getRowHeight(record) {\n        return record.rowHeight;\n    }\n\n    // Hook for features that need to alter the row height\n    processRowHeight(record, height) {}\n\n    //endregion\n\n    //region Store\n\n    /**\n     * Hooks up data store listeners\n     * @private\n     * @category Store\n     */\n    bindStore(store) {\n        const suffix = this.asyncEventSuffix;\n\n        store.ion({\n            name : storeListenerName,\n\n            [`refresh${suffix}`]   : 'onStoreDataChange',\n            [`add${suffix}`]       : 'onStoreAdd',\n            [`remove${suffix}`]    : 'onStoreRemove',\n            [`replace${suffix}`]   : 'onStoreReplace',\n            [`removeAll${suffix}`] : 'onStoreRemoveAll',\n            [`move${suffix}`]      : store.tree ? null : 'onFlatStoreMove',\n            change                 : 'relayStoreDataChange',\n\n            idChange      : 'onStoreRecordIdChange',\n            update        : 'onStoreUpdateRecord',\n            beforeRequest : 'onStoreBeforeRequest',\n            afterRequest  : 'onStoreAfterRequest',\n            exception     : 'onStoreException',\n            commit        : 'onStoreCommit',\n            thisObj       : this\n        });\n\n        super.bindStore(store);\n    }\n\n    unbindStore(oldStore) {\n        this.detachListeners(storeListenerName);\n\n        if (this.destroyStore) {\n            oldStore.destroy();\n        }\n    }\n\n    changeStore(store) {\n        if (store == null) {\n            return null;\n        }\n\n        if (typeof store === 'string') {\n            store = Store.getStore(store);\n        }\n\n        if (!store.isStore) {\n            store = ObjectHelper.assign({\n                data : this.data,\n                tree : Boolean(this.initialConfig.features?.tree)\n            }, store);\n\n            if (!store.data) {\n                delete store.data;\n            }\n\n            if (!store.modelClass) {\n                store.modelClass = GridRowModel;\n            }\n\n            store = new (store.readUrl ? AjaxStore : Store)(store);\n        }\n        //<debug>\n        else if (store.modelClass !== GridRowModel &&\n            !Object.prototype.isPrototypeOf.call(GridRowModel, store.modelClass) &&\n            !this.disableGridRowModelWarning) {\n            console.warn('It is recommended to use a subclass of GridRowModel for data in Grids store, for better feature support');\n        }\n        //</debug>\n\n        return store;\n    }\n\n    updateStore(store, was) {\n        const me = this;\n\n        super.updateStore?.(store, was);\n\n        if (was) {\n            me.unbindStore(was);\n        }\n\n        if (store) {\n            // Deselect all rows when replacing the store, otherwise selection retains old store\n            if (was) {\n                me.deselectAll();\n            }\n            me.bindStore(store);\n        }\n\n        me.trigger('bindStore', { store, oldStore : was });\n\n        // Changing store when painted -> refresh rows to reflect new data\n        if (!me.isDestroying && me.isPainted && !me.refreshSuspended) {\n            me._rowManager?.reinitialize();\n        }\n    }\n\n    /**\n     * Rerenders a cell if a record is updated in the store\n     * @private\n     * @category Store\n     */\n    onStoreUpdateRecord({ source : store, record, changes }) {\n        const me = this;\n\n        if (me.refreshSuspended) {\n            return;\n        }\n\n        if (me.forceFullRefresh) {\n            // flagged to need full refresh (probably from using GroupSummary)\n            me.rowManager.refresh();\n\n            me.forceFullRefresh = false;\n        }\n        else {\n            let row;\n            // Search for old row if id was changed\n            if (record.isFieldModified('id')) {\n                row = me.getRowFor(record.meta.modified.id);\n            }\n\n            row = row || me.getRowFor(record);\n            // not rendered, bail out\n            if (!row) {\n                return;\n            }\n\n            // We must refresh the full row if it's a special row which has signalled\n            // an update because it has no cells.\n            if (me.fullRowRefresh || record.isSpecialRow) {\n                const index = store.indexOf(record);\n                if (index !== -1) {\n                    row.render(index, record);\n                }\n            }\n            else {\n                me.columns.visibleColumns.forEach(column => {\n                    const\n                        field  = column.field,\n                        isSafe = column.constructor.simpleRenderer && !(Object.prototype.hasOwnProperty.call(column.data, 'renderer'));\n\n                    // If there's a  non-safe renderer, that is a renderer which draws values from elsewhere\n                    // than just its configured field, that column must be refreshed on every record update.\n                    // Obviously, if the column's configured field is changed that also means it's refreshed.\n                    if (!isSafe || changes[field]) {\n                        const cellElement = row.getCell(field);\n                        if (cellElement) {\n                            row.renderCell(cellElement);\n                        }\n                    }\n                });\n            }\n        }\n    }\n\n    refreshFromRowOnStoreAdd(row, context) {\n        const\n            me             = this,\n            { rowManager } = me;\n\n        rowManager.renderFromRow(row);\n        rowManager.trigger('changeTotalHeight', { totalHeight : rowManager.totalHeight });\n\n        // First record? Also update fake scrollers\n        // TODO: Consider making empty grid scrollable to not have to do this\n        if (me.store.count === 1) {\n            me.callEachSubGrid('refreshFakeScroll');\n        }\n    }\n\n    onMaskAutoClose(mask) {\n        super.onMaskAutoClose(mask);\n\n        this.toggleEmptyText();\n    }\n\n    /**\n     * Refreshes rows when data is added to the store\n     * @private\n     * @category Store\n     */\n    onStoreAdd({ source : store, records, index, oldIndex, isChild, oldParent, parent, isMove, isExpandAll }) {\n        // Do not react if the content has not been rendered\n        if (!this.isPainted || isExpandAll || this.refreshSuspended) {\n            return;\n        }\n\n        // If we move records check if some of their old parents is expanded\n        const hasExpandedOldParent = isMove && records.some(record => {\n            if (isMove[record.id]) {\n                // When using TreeGroup there won't be an old parent\n                const oldParent = store.getById(record.meta.modified.parentId);\n\n                return oldParent?.isExpanded(store) && oldParent?.ancestorsExpanded(store);\n            }\n        });\n\n        // If it's the addition of a child to a collapsed zone (and old parents are also collapsed), the UI does not change.\n        if (isChild && !records[0].ancestorsExpanded(store) && !hasExpandedOldParent) {\n            // BUT it might change if parent had no children (expander made invisible) and it gets children added\n            if (!parent.isLeaf) {\n                const parentRow = this.rowManager.getRowById(parent);\n                if (parentRow) {\n                    this.rowManager.renderRows([parentRow]);\n                }\n            }\n\n            return;\n        }\n\n        this.rowManager.calculateRowCount(false, true, true);\n\n        // When store is filtered need to update the index value\n        if (store.isFiltered) {\n            index = store.indexOf(records[0]);\n        }\n\n        const\n            me             = this,\n            { rowManager } = me,\n            {\n                topIndex,\n                rows,\n                rowCount\n            }              = rowManager,\n            bottomIndex    = rowManager.topIndex + rowManager.rowCount - 1,\n            dataStart      = index,\n            dataEnd        = index + records.length - 1,\n            atEnd          = bottomIndex >= store.count - records.length - 1;\n\n        // When moving a node within a tree we might need the redraw to include its old parent and its children. Not worth\n        // the complexity of trying to do a partial render for this, rerender all rows to be safe.\n        // Moving records within a flat store is handled elsewhere, in onFlatStoreMove\n        // TODO: Moving within a tree should also trigger 'move' (https://app.assembla.com/spaces/bryntum/tickets/7270)\n        if (oldParent || oldIndex > -1 || (isChild && isMove)) {\n            rowManager.refresh();\n        }\n        // Added block starts in our visible block. Render from there downwards.\n        else if (dataStart >= topIndex && dataStart < topIndex + rowCount) {\n            me.refreshFromRowOnStoreAdd(rows[dataStart - topIndex], ...arguments);\n        }\n        // Added block ends in our visible block, render block\n        else if (dataEnd >= topIndex && dataEnd < topIndex + rowCount) {\n            rowManager.refresh();\n        }\n        // If added block is outside of the visible area, no visible change\n        // but potentially a change in total dataset height.\n        else {\n            // If we are against the end of the dataset, and have appended records\n            // ensure they are rendered below\n            if (atEnd && index > bottomIndex) {\n                rowManager.fillBelow(me._scrollTop || 0);\n            }\n\n            rowManager.estimateTotalHeight(true);\n        }\n    }\n\n    /**\n     * Responds to exceptions signalled by the store\n     * @private\n     * @category Store\n     */\n    onStoreException({ action, type, response, exceptionType, error }) {\n        const me = this;\n\n        let message;\n\n        switch (type) {\n            case 'server':\n                message = response.message || me.L('L{unspecifiedFailure}');\n                break;\n            case 'exception':\n                message = exceptionType === 'network' ? me.L('L{networkFailure}') : (error?.message || response?.parsedJson?.message || me.L('L{parseFailure}'));\n                break;\n        }\n\n        // eslint-disable-next-line\n        me.applyMaskError(\n            `<div class=\"b-grid-load-failure\">\n                <div class=\"b-grid-load-fail\">${me.L(action === 'read' ? 'L{loadFailedMessage}' : 'L{syncFailedMessage}')}</div>\n                ${response?.url ? `<div class=\"b-grid-load-fail\">${response.url}</div>` : ''}\n                <div class=\"b-grid-load-fail\">${me.L('L{serverResponse}')}</div>\n                <div class=\"b-grid-load-fail\">${message}</div>\n            </div>`);\n    }\n\n    /**\n     * Refreshes rows when data is changed in the store\n     * @private\n     * @category Store\n     */\n    onStoreDataChange({ action, changes, source : store, syncInfo }) {\n        if (this.refreshSuspended || !this.rowManager) {\n            return;\n        }\n\n        const\n            me                 = this,\n            isGroupFieldChange = store.isGrouped && changes && store.groupers.some(grouper => grouper.field in changes);\n\n        // If the next mixin up the inheritance chain has an implementation, call it\n        super.onStoreDataChange?.(...arguments);\n\n        // Re-render what's in view when sync removing above the threshold, to maintain scroll position\n        if (action === 'batch' && syncInfo?.removed?.length) {\n            me.rowManager.renderFromRow(me.topRow);\n        }\n        else {\n            // If it's new data, the old calculation is invalidated.\n            if (action === 'dataset') {\n                me.rowManager.clearKnownHeights();\n            }\n            // No need to rerender if it's a change of the value of the group field which\n            // will be responded to by StoreGroup\n            if (me.isPainted && !isGroupFieldChange) {\n                // Optionally scroll to top if setting new data or is filtering based on preserveScrollOnDatasetChange setting\n                me.renderRows(Boolean(!(action in datasetReplaceActions) || me.preserveScrollOnDatasetChange));\n            }\n        }\n\n        me.toggleEmptyText();\n    }\n\n    /**\n     * The hook is called when the id of a record has changed.\n     * @private\n     * @category Store\n     */\n    onStoreRecordIdChange() {\n        // If the next mixin up the inheritance chain has an implementation, call it\n        super.onStoreRecordIdChange && super.onStoreRecordIdChange(...arguments);\n    }\n\n    /**\n     * Shows a load mask while the connected store is loading\n     * @private\n     * @category Store\n     */\n    onStoreBeforeRequest() {\n        this.applyLoadMask();\n    }\n\n    /**\n     * Hides load mask after a load request ends either in success or failure\n     * @private\n     * @category Store\n     */\n    onStoreAfterRequest(event) {\n        if (this.loadMask && !event.exception) {\n            this.masked = null;\n            this.toggleEmptyText();\n        }\n    }\n\n    needsFullRefreshOnStoreRemove({ isCollapse }) {\n        const features = this._features;\n\n        return (features?.group && !features.group.disabled) ||\n            (features?.groupSummary && !features.groupSummary.disabled) ||\n            // Need to redraw parents when children are removed since they might be converted to leaves\n            (this.store.tree && !isCollapse && this.store.modelClass.convertEmptyParentToLeaf);\n    }\n\n    /**\n     * Animates removal of record.\n     * @private\n     * @category Store\n     */\n    onStoreRemove({ records, isCollapse, isChild, isMove, isCollapseAll }) {\n        // Do not react if the content has not been rendered,\n        // or if it is a move, which will be handled by onStoreAdd\n        if (!this.isPainted || isMove || isCollapseAll) {\n            return;\n        }\n\n        // GridSelection mixin does its job on records removing\n        super.onStoreRemove && super.onStoreRemove(...arguments);\n\n        const\n            me             = this,\n            { rowManager } = me;\n\n        // Remove cached heights\n        rowManager.invalidateKnownHeight(records);\n\n        if (me.animateRemovingRows && !isCollapse && !isChild) {\n            // Gather all visible rows which need to be removed.\n            const rowsToRemove = records.reduce((result, record) => {\n                const row = rowManager.getRowById(record.id);\n                row && result.push(row);\n                return result;\n            }, []);\n\n            if (rowsToRemove.length) {\n                const topRow = rowsToRemove[0];\n\n                me.isAnimating = true;\n\n                // As soon as first row has disappeared, rerender the view\n                EventHelper.onTransitionEnd({\n                    element  : topRow._elementsArray[0],\n                    property : 'left',\n\n                    // Detach listener after timeout even if event wasn't fired\n                    duration : me.transitionDuration,\n                    thisObj  : me,\n                    handler  : () => {\n                        me.isAnimating = false;\n\n                        rowsToRemove.forEach(row => !row.isDestroyed && row.removeCls('b-removing'));\n                        rowManager.refresh();\n\n                        // undocumented internal event for scheduler\n                        me.trigger('rowRemove');\n                        me.afterRemove(arguments[0]);\n                    }\n                });\n\n                rowsToRemove.forEach(row => row.addCls('b-removing'));\n                return;\n            }\n        }\n\n        // Cannot do an update from the affected row and down here. Since group headers might be affected by\n        // removing rows we need a full refresh\n        if (me.needsFullRefreshOnStoreRemove(...arguments)) {\n            rowManager.refresh();\n            me.afterRemove(arguments[0]);\n        }\n        else {\n            const oldTopIndex = rowManager.topIndex;\n\n            // Potentially remove rows and change dataset height\n            rowManager.calculateRowCount(false, true, true);\n\n            // If collapsing lead to rows \"shifting up\" to fit in available rows, we have to rerender from top\n            if (rowManager.topIndex !== oldTopIndex) {\n                rowManager.renderFromRow(rowManager.topRow);\n            }\n            else {\n                const { rows } = rowManager, topRowIndex = records.reduce((result, record) => {\n                    const row = rowManager.getRowById(record.id);\n                    if (row) {\n                        // Rows are repositioned in the array, it matches visual order. Need to find actual index in it\n                        result = Math.min(result, rows.indexOf(row));\n                    }\n                    return result;\n                }, rows.length);\n\n                // If there were rows below which have moved up into place\n                // then repurpose them with their new records\n                if (rows[topRowIndex]) {\n                    !me.refreshSuspended && rowManager.renderFromRow(rows[topRowIndex]);\n                }\n                // If nothing to render below, just update dataset height\n                else {\n                    rowManager.trigger('changeTotalHeight', { totalHeight : rowManager.totalHeight });\n                }\n            }\n            me.trigger('rowRemove', { isCollapse });\n            me.afterRemove(arguments[0]);\n        }\n    }\n\n    onFlatStoreMove({ from, to }) {\n        const\n            { rowManager }       = this,\n            {\n                topIndex,\n                rowCount\n            }                    = rowManager,\n            [dataStart, dataEnd] = [from, to].sort((a, b) => a - b);\n\n        // Changed block starts in our visible block. Render from there downwards.\n        if (dataStart >= topIndex && dataStart < topIndex + rowCount) {\n            rowManager.renderFromRow(rowManager.rows[dataStart - topIndex]);\n        }\n        // Changed block ends in our visible block, render block\n        else if (dataEnd >= topIndex && dataEnd < topIndex + rowCount) {\n            rowManager.refresh();\n        }\n        // If changed block is outside of the visible area, this is a no-op\n    }\n\n    onStoreReplace({ records, all }) {\n        const { rowManager } = this;\n\n        if (all) {\n            rowManager.clearKnownHeights();\n            rowManager.refresh();\n        }\n        else {\n            const rows = records.reduce((rows, [, record]) => {\n                const row = this.getRowFor(record);\n                if (row) {\n                    rows.push(row);\n                }\n                return rows;\n            }, []);\n\n            // Heights will be stored on render, but some records might be out of view -> have to invalidate separately\n            rowManager.invalidateKnownHeight(records);\n\n            rowManager.renderRows(rows);\n        }\n    }\n\n    relayStoreDataChange(event) {\n        this.ariaElement.setAttribute('aria-rowcount', this.store.count + 1);\n\n        /**\n         * Fired when data in the store changes.\n         *\n         * Basically a relayed version of the store's own change event, decorated with a `store` property.\n         * See the {@link Core.data.Store#event-change store change event} documentation for more information.\n         *\n         * @event dataChange\n         * @param {Grid.view.Grid} source Owning grid\n         * @param {Core.data.Store} store The originating store\n         * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} action\n         * Name of action which triggered the change. May be one of:\n         * * `'remove'`\n         * * `'removeAll'`\n         * * `'add'`\n         * * `'updatemultiple'`\n         * * `'clearchanges'`\n         * * `'filter'`\n         * * `'update'`\n         * * `'dataset'`\n         * * `'replace'`\n         * @param {Core.data.Model} record Changed record, for actions that affects exactly one record (`'update'`)\n         * @param {Core.data.Model[]} records Changed records, passed for all actions except `'removeAll'`\n         * @param {Object} changes Passed for the `'update'` action, info on which record fields changed\n         */\n        if (!this.project) {\n            return this.trigger('dataChange', { ...event, store : event.source, source : this });\n        }\n    }\n\n    /**\n     * Rerenders grid when all records have been removed\n     * @private\n     * @category Store\n     */\n    onStoreRemoveAll() {\n        // GridSelection mixin does its job on records removing\n        super.onStoreRemoveAll && super.onStoreRemoveAll(...arguments);\n\n        if (this.isPainted) {\n            this.rowManager.clearKnownHeights();\n            this.renderRows(false);\n            this.toggleEmptyText();\n        }\n    }\n\n    // Refresh dirty cells on commit\n    onStoreCommit({ changes }) {\n        if (this.showDirty && changes.modified.length) {\n            const rows = [];\n\n            changes.modified.forEach(record => {\n                const row = this.rowManager.getRowFor(record);\n                row && rows.push(row);\n            });\n\n            this.rowManager.renderRows(rows);\n        }\n    }\n\n    // Documented with config\n    get data() {\n        if (this._store) {\n            return this._store.records;\n        }\n        else {\n            return this._data;\n        }\n    }\n\n    set data(data) {\n        if (this._store) {\n            this._store.data = data;\n        }\n        else {\n            this._data = data;\n        }\n    }\n\n    //endregion\n\n    //region Context menu items\n\n    /**\n     * Populates the header context menu. Chained in features to add menu items.\n     * @param {Object} options Contains menu items and extra data retrieved from the menu target.\n     * @param {Grid.column.Column} options.column Column for which the menu will be shown\n     * @param {Object<String,MenuItemConfig|Boolean|null>} options.items A named object to describe menu items\n     * @internal\n     */\n    populateHeaderMenu({ column, items }) {\n        const\n            me                    = this,\n            { subGrids, regions } = me,\n            { parent }            = column;\n\n        let first = true;\n\n        Object.entries(subGrids).forEach(([region, subGrid]) => {\n            // If SubGrid is configured with a sealed column set, do not allow moving into it\n            if (subGrid.sealedColumns) {\n                return;\n            }\n\n            if (\n                column.draggable &&\n                region !== column.region &&\n                (!parent && subGrids[column.region].columns.count > 1 || parent && parent.children.length > 1)\n            ) {\n                const\n                    preceding = subGrid.element.compareDocumentPosition(subGrids[column.region].element) === document.DOCUMENT_POSITION_PRECEDING,\n                    moveRight = me.rtl ? !preceding : preceding,\n                    // With 2 regions, use Move left, Move right. With multiple, include region name\n                    text      = regions.length > 2\n                        ? me.L('L{moveColumnTo}', me.optionalL(region))\n                        : me.L(moveRight ? 'L{moveColumnRight}' : 'L{moveColumnLeft}');\n\n                items[`${region}Region`] = {\n                    targetSubGrid : region,\n                    text,\n                    icon          : 'b-fw-icon b-icon-column-move-' + (moveRight ? 'right' : 'left'),\n                    separator     : first,\n                    onItem        : ({ item }) => {\n                        column.traverse(col => col.region = region);\n\n                        // Changing region will move the column to the correct SubGrid, but we want it to go last\n                        me.columns.insert(me.columns.indexOf(subGrids[item.targetSubGrid].columns.last) + 1, column);\n\n                        me.scrollColumnIntoView(column);\n                    }\n                };\n\n                first = false;\n            }\n        });\n    }\n\n    /**\n     * Populates the cell context menu. Chained in features to add menu items.\n     * @param {Object} options Contains menu items and extra data retrieved from the menu target.\n     * @param {Grid.column.Column} options.column Column for which the menu will be shown\n     * @param {Core.data.Model} options.record Record for which the menu will be shown\n     * @param {Object<String,MenuItemConfig|Boolean|null>} options.items A named object to describe menu items\n     * @internal\n     */\n    populateCellMenu({ record, items }) {}\n\n    getColumnDragToolbarItems(column, items) {\n        return items;\n    }\n\n    //endregion\n\n    //region Getters\n\n    normalizeCellContext(cellContext) {\n        const\n            grid        = this,\n            { columns } = grid;\n\n        // Already have a Location\n        if (cellContext.isLocation) {\n            return cellContext;\n        }\n\n        // Create immutable Location object encapsulating the passed object.\n        if (cellContext.isModel) {\n            return new Location({\n                grid,\n                id       : cellContext.id,\n                columnId : columns.visibleColumns[0].id\n            });\n        }\n        return new Location(ObjectHelper.assign({ grid }, cellContext));\n    }\n\n    // TODO: move to RowManager? Or create a CellManager?\n    /**\n     * Returns a cell if rendered or null if not found.\n     * @param {LocationConfig} cellContext A cell location descriptor\n     * @returns {HTMLElement|null}\n     * @category Getters\n     */\n    getCell(cellContext) {\n        const\n            { store, columns } = this,\n            { visibleColumns } = this.columns,\n            rowIndex           = !isNaN(cellContext.row) ? cellContext.row : !isNaN(cellContext.rowIndex) ? cellContext.rowIndex : store.indexOf(cellContext.record || cellContext.id),\n            columnIndex        = !isNaN(cellContext.column) ? cellContext.column : !isNaN(cellContext.columnIndex) ? cellContext.columnIndex : visibleColumns.indexOf(cellContext.column || columns.getById(cellContext.columnId) || columns.get(cellContext.field) || visibleColumns[0]);\n\n        // Only return cell for valid address.\n        // This code is more strict than Location which attempts to find the closest existing cell.\n        // Here we MUST only return a cell if the passed context is fully valid.\n        return rowIndex > -1 && rowIndex < store.count && columnIndex > -1 && columnIndex < visibleColumns.length && this.normalizeCellContext(cellContext).cell || null;\n    }\n\n    //TODO: Should move to ColumnManager? Or Header?\n    /**\n     * Returns the header element for the column\n     * @param {String|Number|Grid.column.Column} columnId or Column instance\n     * @returns {HTMLElement} Header element\n     * @category Getters\n     */\n    getHeaderElement(columnId) {\n        if (columnId.isModel) {\n            columnId = columnId.id;\n        }\n\n        return this.fromCache(`.b-grid-header[data-column-id=\"${columnId}\"]`);\n    }\n\n    getHeaderElementByField(field) {\n        const column = this.columns.get(field);\n\n        return column ? this.getHeaderElement(column) : null;\n    }\n\n    /**\n     * Body height\n     * @member {Number}\n     * @readonly\n     * @category Layout\n     */\n    get bodyHeight() {\n        return this._bodyHeight;\n    }\n\n    /**\n     * Header height\n     * @member {Number}\n     * @readonly\n     * @category Layout\n     */\n    get headerHeight() {\n        const me = this;\n        // measure header if rendered and not stored\n        if (me.isPainted && !me._headerHeight) {\n            me._headerHeight = me.headerContainer.offsetHeight;\n        }\n\n        return me._headerHeight;\n    }\n\n    /**\n     * Footer height\n     * @member {Number}\n     * @readonly\n     * @category Layout\n     */\n    get footerHeight() {\n        const me = this;\n\n        // measure footer if rendered and not stored\n        if (me.isPainted && !me._footerHeight) {\n            me._footerHeight = me.footerContainer.offsetHeight;\n        }\n\n        return me._footerHeight;\n    }\n\n    get isTreeGrouped() {\n        return Boolean(this.features.treeGroup?.isGrouped);\n    }\n\n    /**\n     * Searches up from the specified element for a grid row and returns the record associated with that row.\n     * @param {HTMLElement} element Element somewhere within a row or the row container element\n     * @returns {Core.data.Model} Record for the row\n     * @category Getters\n     */\n    getRecordFromElement(element) {\n        const el = element.closest('.b-grid-row');\n\n        if (!el) return null;\n\n        return this.store.getAt(el.dataset.index);\n    }\n\n    /**\n     * Searches up from specified element for a grid cell or an header and returns the column which the cell belongs to\n     * @param {HTMLElement} element Element somewhere in a cell\n     * @returns {Grid.column.Column} Column to which the cell belongs\n     * @category Getters\n     */\n    getColumnFromElement(element) {\n        const cell = element.closest('.b-grid-cell, .b-grid-header');\n        if (!cell) return null;\n\n        if (cell.matches('.b-grid-header')) {\n            return this.columns.getById(cell.dataset.columnId);\n        }\n\n        const cellData = DomDataStore.get(cell);\n        return this.columns.getById(cellData.columnId);\n    }\n\n    // Only added for type checking, since it seems common to get it wrong in react/angular\n    updateAutoHeight(autoHeight) {\n        ObjectHelper.assertBoolean(autoHeight, 'autoHeight');\n    }\n\n    // Documented under configs\n    get columnLines() {\n        return this._columnLines;\n    }\n\n    set columnLines(columnLines) {\n        ObjectHelper.assertBoolean(columnLines, 'columnLines');\n\n        DomHelper.toggleClasses(this.element, 'b-no-column-lines', !columnLines);\n\n        this._columnLines = columnLines;\n    }\n\n    get keyMapElement() {\n        return this.bodyElement;\n    }\n\n    //endregion\n\n    //region Fix width & height\n\n    /**\n     * Sets widths and heights for headers, rows and other parts of the grid as needed\n     * @private\n     * @category Width & height\n     */\n    fixSizes() {\n        // subGrid width\n        this.callEachSubGrid('fixWidths');\n\n        // Get leaf headers.\n        const colHeaders = this.headerContainer.querySelectorAll('.b-grid-header.b-depth-0');\n\n        // Update leaf headers' ariaColIndex\n        for (let i = 0, { length } = colHeaders; i < length; i++) {\n            colHeaders[i].setAttribute('aria-colindex', i + 1);\n        }\n    }\n\n    onRowManagerChangeTotalHeight({ totalHeight, immediate }) {\n        return this.refreshTotalHeight(totalHeight, immediate);\n    }\n\n    /**\n     * Makes height of vertical scroller match estimated total height of grid. Called when scrolling vertically and\n     * when showing/hiding rows.\n     * @param {Number} [height] Total height supplied by RowManager\n     * @param {Boolean} [immediate] Flag indicating if buffered element sizing should be bypassed\n     * @private\n     * @category Width & height\n     */\n    refreshTotalHeight(height = this.rowManager.totalHeight, immediate = false) {\n        const me = this;\n\n        // Veto change of estimated total height while rendering rows or if triggered while in a hidden state\n        if (me.renderingRows || !me.isVisible) {\n            return false;\n        }\n\n        const\n            scroller     = me.scrollable,\n            delta        = Math.abs(me.virtualScrollHeight - height),\n            clientHeight = me._bodyRectangle.height,\n            newMaxY      = height - clientHeight;\n\n        if (delta) {\n            const\n                // We must update immediately if we are nearing the end of the scroll range.\n                isCritical = (newMaxY - me._scrollTop < clientHeight * 2) ||\n                    // Or if we have scrolled pass visual height\n                    (me._verticalScrollHeight && (me._verticalScrollHeight - clientHeight < me._scrollTop));\n\n            // Update the true scroll range using the scroller. This will not cause a repaint.\n            scroller.scrollHeight = me.virtualScrollHeight = height;\n\n            // If we are scrolling, put this off because it causes\n            // a full document layout and paint.\n            // Do not buffer calls for not yet painted grid\n            if (me.isPainted && (me.scrolling && !isCritical || delta < 100) && !immediate) {\n                me.bufferedFixElementHeights();\n            }\n            else {\n                me.virtualScrollHeightDirty && me.virtualScrollHeightDirty();\n                me.bufferedFixElementHeights.cancel();\n                me.fixElementHeights();\n            }\n        }\n    }\n\n    fixElementHeights() {\n        const\n            me         = this,\n            height     = me.virtualScrollHeight,\n            heightInPx = `${height}px`;\n\n        me._verticalScrollHeight         = height;\n        me.verticalScroller.style.height = heightInPx;\n        me.virtualScrollHeightDirty      = false;\n\n        if (me.autoHeight) {\n            me.bodyContainer.style.height = heightInPx;\n            me._bodyHeight                = height;\n            me.refreshBodyRectangle();\n        }\n\n        me.refreshVirtualScrollbars();\n    }\n\n    refreshBodyRectangle() {\n        return this._bodyRectangle = Rectangle.client(this.bodyContainer);\n    }\n\n    //endregion\n\n    //region Scroll & virtual rendering\n\n    set scrolling(scrolling) {\n        this._scrolling = scrolling;\n    }\n\n    get scrolling() {\n        return this._scrolling;\n    }\n\n    /**\n     * Activates automatic scrolling of a subGrid when mouse is moved closed to the edges. Useful when dragging DOM\n     * nodes from outside this grid and dropping on the grid.\n     * @param {Grid.view.SubGrid|String|Grid.view.SubGrid[]|String[]} subGrid A subGrid instance or its region name or\n     * an array of either\n     * @category Scrolling\n     */\n    enableScrollingCloseToEdges(subGrids) {\n        this.scrollManager.startMonitoring({\n            scrollables : [\n                {\n                    element   : this.scrollable.element,\n                    direction : 'vertical'\n                },\n                ...ArrayHelper.asArray(subGrids || []).map(subGrid => (\n                    { element : (typeof subGrid === 'string' ? this.subGrids[subGrid] : subGrid).scrollable.element }\n                ))\n            ],\n            direction : 'horizontal'\n        });\n    }\n\n    /**\n     * Deactivates automatic scrolling of a subGrid when mouse is moved closed to the edges\n     * @param {Grid.view.SubGrid|String|Grid.view.SubGrid[]|String[]} subGrid A subGrid instance or its region name or\n     * an array of either\n     * @category Scrolling\n     */\n    disableScrollingCloseToEdges(subGrids) {\n        this.scrollManager.stopMonitoring([\n            this.scrollable.element,\n            ...ArrayHelper.asArray(subGrids || []).map(subGrid => (typeof subGrid === 'string' ? this.subGrids[subGrid] : subGrid).element)\n        ]);\n    }\n\n    /**\n     * Responds to request from RowManager to adjust scroll position. Happens when jumping to a scroll position with\n     * variable row height.\n     * @param {Number} bottomMostRowY\n     * @private\n     * @category Scrolling\n     */\n    onRowManagerRequestScrollChange({ bottom }) {\n        this.scrollable.y = bottom - this.bodyHeight;\n    }\n\n    /* <remove-on-release> */\n    runPerformanceTest(count = 5, direction = 'vertical') {\n        const\n            me      = this,\n            body    = me.bodyContainer,\n            fpsList = me.fpsList || (me.fpsList = []);\n\n        me.frameCount = 0;\n\n        if (!me.testPerformance) {\n            me.testPerformance = direction;\n        }\n\n        me.setTimeout(() => {\n            const start = performance.now();\n\n            let scrollSpeed = 5,\n                direction   = 1;\n\n            const scrollInterval = me.setInterval(() => {\n                scrollSpeed = scrollSpeed + 5;\n                //if (scrollSpeed > 30) scrollSpeed = 0;\n\n                body.scrollTop += (10 + Math.floor(scrollSpeed)) * direction;\n\n                if (direction === 1 && body.scrollTop > 30000) {\n                    direction   = -1;\n                    scrollSpeed = 5;\n                }\n\n                if (direction === -1 && body.scrollTop <= 0) {\n                    const\n                        done         = performance.now(),\n                        elapsed      = done - start,\n                        timePerFrame = elapsed / me.frameCount;\n\n                    let fps = 1000 / timePerFrame;\n\n                    fps = Math.round(fps * 10) / 10;\n\n                    clearInterval(scrollInterval);\n\n                    //console.log(me.positionMode, me.rowScrollMode, fps + 'fps');\n                    fpsList.push(fps);\n\n                    if (fpsList.length < count) {\n                        me.runPerformanceTest(count);\n                    }\n                    else {\n                        console.log(fpsList, fpsList.reduce((result, fps) => result += fps / fpsList.length, 0));\n                        me.fpsList.length = 0;\n                    }\n                }\n            }, 0);\n        }, fpsList.length ? 0 : 2500);\n    }\n\n    /* </remove-on-release> */\n\n    /**\n     * Scroll syncing for normal headers & grid + triggers virtual rendering for vertical scroll\n     * @private\n     * @fires scroll\n     * @category Scrolling\n     */\n    initScroll() {\n        const\n            me             = this,\n            { scrollable } = me;\n\n        // This method may be called early, before render calls it, so ensure that it's\n        // only executed once.\n        if (!me.scrollInitialized) {\n            me.scrollInitialized = true;\n\n            // Allows FF to dynamically track scrollbar state change by reacting to content height changes.\n            // Remove when https://bugzilla.mozilla.org/show_bug.cgi?id=1733042 is fixed\n            scrollable.contentElement = me.contentElement;\n\n            scrollable.ion({\n                scroll    : 'onGridVerticalScroll',\n                scrollend : 'onGridVerticalScrollEnd',\n                thisObj   : me\n            });\n\n            me.callEachSubGrid('initScroll');\n\n            //<debug>\n            if (me.testPerformance === 'vertical') {\n                me.runPerformanceTest();\n            }\n            //</debug>\n\n            // Fixes scroll freezing bug on iPad by putting scroller in its own layer\n            if (BrowserHelper.isMobileSafari) {\n                scrollable.element.style.transform = 'translate3d(0, 0, 0)';\n            }\n        }\n    }\n\n    onGridVerticalScroll({ source : scrollable }) {\n        const\n            me                = this,\n            { y : scrollTop } = scrollable;\n\n        // Was getting scroll events in FF where scrollTop was unchanged, ignore those\n        if (scrollTop !== me._scrollTop) {\n            me._scrollTop = scrollTop;\n\n            if (!me.scrolling) {\n                me.scrolling = true;\n                // Vertical scroll may trigger resize if row height is variable\n                me.eachSubGrid(s => s.suspendResizeMonitor = true);\n            }\n\n            /* <remove-on-release> */\n            if (me.testPerformance === 'vertical') {\n                me.frameCount++;\n            }\n            /* </remove-on-release> */\n\n            me.rowManager.updateRenderedRows(scrollTop);\n\n            // Hook for features that need to react to scroll\n            me.afterScroll({ scrollTop });\n\n            /**\n             * Grid has scrolled vertically\n             * @event scroll\n             * @param {Grid.view.Grid} source The firing Grid instance.\n             * @param {Number} scrollTop The vertical scroll position.\n             */\n            me.trigger('scroll', { scrollTop });\n        }\n    }\n\n    onGridVerticalScrollEnd() {\n        this.scrolling = false;\n        this.eachSubGrid(s => s.suspendResizeMonitor = false);\n    }\n\n    // TODO: rename to scrollRecordIntoView? Or have an alias?\n    /**\n     * Scrolls a row into view. If row isn't rendered it tries to calculate position. Accepts the {@link ScrollOptions}\n     * `column` property\n     * @param {Core.data.Model|String|Number} recordOrId Record or record id\n     * @param {ScrollOptions} [options] How to scroll.\n     * @returns {Promise} A promise which resolves when the specified row has been scrolled into view.\n     * @category Scrolling\n     */\n    async scrollRowIntoView(recordOrId, options = defaultScrollOptions) {\n        const\n            me             = this,\n            blockPosition  = options.block || 'nearest',\n            { rowManager } = me,\n            record         = me.store.getById(recordOrId);\n\n        if (record) {\n            let scrollPromise;\n\n            // check that record is \"displayable\", not filtered out or hidden by collapse\n            if (me.store.indexOf(record) === -1) {\n                return resolvedPromise;\n            }\n\n            let scroller   = me.scrollable,\n                recordRect = me.getRecordCoords(record);\n\n            const scrollerRect = Rectangle.from(scroller.element);\n\n            // If it was calculated from the index, update the rendered rowScrollMode\n            // and scroll to the actual element. Note that this should only be necessary\n            // for variableRowHeight.\n            // But to \"make the tests green\", this is a workaround for a buffered rendering\n            // bug when teleporting scroll. It does not render the rows at their correct\n            // positions. Please do not try to \"fix\" this. I will do it. NGW\n            if (recordRect.virtual) {\n                const\n                    virtualBlock = recordRect.block,\n                    innerOptions = blockPosition !== 'nearest' ? options : {\n                        block : virtualBlock\n                    };\n\n                // Scroll the calculated position **synchronously** to the center of the scrollingViewport\n                // and then update the rendered block while asking the RowManager to\n                // display the required recordOrId.\n                scrollPromise = scroller.scrollIntoView(recordRect, {\n                    block : 'center'\n                });\n\n                rowManager.scrollTargetRecordId = record;\n                rowManager.updateRenderedRows(scroller.y, true);\n                recordRect               = me.getRecordCoords(record);\n                rowManager.lastScrollTop = scroller.y;\n\n                if (recordRect.virtual) {\n                    //<debug>\n                    throw new Error(`Unable to scroll ${record.id} into view`);\n                    //</debug>\n                    // bail out to not get caught in infinite loop, since code above is cut out of bundle\n                    // eslint-disable-next-line no-useless-return,no-unreachable\n                    return resolvedPromise;\n                }\n\n                // Scroll the target just less than append/prepend buffer height out of view so that the animation looks good\n                if (options.animate) {\n                    // Do not fire scroll events during this scroll sequence - it's a purely cosmetic operation.\n                    // We are scrolling the desired row out of view merely to *animate scroll* it to the requested position.\n                    scroller.suspendEvents();\n\n                    // Scroll to its final position\n                    if (blockPosition === 'end' || blockPosition === 'nearest' && virtualBlock === 'end') {\n                        scroller.y -= (scrollerRect.bottom - recordRect.bottom);\n                    }\n                    else if (blockPosition === 'start' || blockPosition === 'nearest' && virtualBlock === 'start') {\n                        scroller.y += (recordRect.y - scrollerRect.y);\n                    }\n\n                    // Ensure rendered block is correct at that position\n                    rowManager.updateRenderedRows(scroller.y, false, true);\n\n                    // Scroll away from final position to enable a cosmetic scroll to final position\n                    if (virtualBlock === 'end') {\n                        scroller.y -= (rowManager.appendRowBuffer * rowManager.rowHeight - 1);\n                    }\n                    else {\n                        scroller.y += (rowManager.prependRowBuffer * rowManager.rowHeight - 1);\n                    }\n\n                    // The row will still be rendered, so scroll it using the scroller directly\n                    scroller.scrollIntoView(me.getRecordCoords(record), Object.assign({}, options, innerOptions));\n\n                    // Now we're at the required position, resume events\n                    scroller.resumeEvents();\n                }\n                else {\n                    if (!options.recursive) {\n                        await scrollPromise;\n                    }\n                    // May already be destroyed at this point, hence ?.\n                    await me.scrollRowIntoView?.(record, Object.assign({ recursive : true }, options, innerOptions));\n                }\n            }\n            else {\n                let { column } = options;\n\n                if (column) {\n                    if (!column.isModel) {\n                        column = me.columns.getById(column) || me.columns.get(column);\n                    }\n\n                    // If we are targeting a column, we must use the scroller of that column's SubGrid\n                    if (column) {\n                        scroller = me.getSubGridFromColumn(column).scrollable;\n\n                        const cellRect = Rectangle.from(rowManager.getRowFor(record).getCell(column.id));\n\n                        recordRect.x     = cellRect.x;\n                        recordRect.width = cellRect.width;\n                    }\n                }\n                // No column, then tell the scroller not to scroll in the X axis\n                else {\n                    options.x = false;\n                }\n                return scroller.scrollIntoView(recordRect, options);\n            }\n        }\n    }\n\n    /**\n     * Scrolls a column into view (if it is not already)\n     * @param {Grid.column.Column|String|Number} column Column name (data) or column index or actual column object.\n     * @param {ScrollOptions} [options] How to scroll.\n     * @returns {Promise} If the column exists, a promise which is resolved when the column header element has been\n     * scrolled into view.\n     * @category Scrolling\n     */\n    scrollColumnIntoView(column, options) {\n        column = (column instanceof Column) ? column : this.columns.get(column) || this.columns.getById(column) || this.columns.getAt(column);\n\n        return this.getSubGridFromColumn(column).scrollColumnIntoView(column, options);\n    }\n\n    // TODO The API { id: recordId, column: 'columnName' } is not clear: id has to be renamed to `record` or `recordId` to be self-explanatory;\n    /**\n     * Scrolls a cell into view (if it is not already)\n     * @param {Object} cellContext Cell selector { id: recordId, column: 'columnName' }\n     * @category Scrolling\n     */\n    scrollCellIntoView(cellContext, options) {\n        return this.scrollRowIntoView(cellContext.id, Object.assign({\n            column : cellContext.columnId\n        }, typeof options === 'boolean' ? { animate : options } : options));\n    }\n\n    /**\n     * Scroll all the way down\n     * @returns {Promise} A promise which resolves when the bottom is reached.\n     * @category Scrolling\n     */\n    scrollToBottom(options) {\n        // triggers scroll to last record. not using current scroller height because we do not know if it is correct\n        return this.scrollRowIntoView(this.store.last, options);\n    }\n\n    /**\n     * Scroll all the way up\n     * @returns {Promise} A promise which resolves when the top is reached.\n     * @category Scrolling\n     */\n    scrollToTop(options) {\n        return this.scrollable.scrollBy(0, -this.scrollable.y, options);\n    }\n\n    /**\n     * Stores the scroll state. Returns an objects with a `scrollTop` number value for the entire grid and a `scrollLeft`\n     * object containing a left position scroll value per sub grid.\n     * @returns {Object}\n     * @category Scrolling\n     */\n    storeScroll() {\n        const\n            me    = this,\n            state = me.storedScrollState = {\n                scrollTop  : me.scrollable.y,\n                scrollLeft : {}\n            };\n\n        // TODO: Implement special multi-element Scroller subclass for Grids which\n        // encapsulates the x axis only Scrollers of all its SubGrids.\n        me.eachSubGrid(subGrid => {\n            state.scrollLeft[subGrid.region] = subGrid.scrollable.x;\n        });\n\n        return state;\n    }\n\n    /**\n     * Restore scroll state. If state is not specified, restores the last stored state.\n     * @param {Object} [state] Scroll state, optional\n     * @category Scrolling\n     */\n    restoreScroll(state = this.storedScrollState) {\n        const me = this;\n\n        // TODO: Implement special multi-element Scroller subclass for Grids which\n        // encapsulates the x axis only Scrollers of all its SubGrids.\n        me.eachSubGrid(subGrid => {\n            const x = state.scrollLeft[subGrid.region];\n\n            // Force scrollable to set its position to the underlying element in case it was removed and added back to\n            // the DOM prior to restoring state\n            if (x != null) {\n                subGrid.scrollable.updateX(x);\n                subGrid.header.scrollable.updateX(x);\n                subGrid.footer.scrollable.updateX(x);\n                subGrid.fakeScroller?.updateX(x);\n            }\n        });\n\n        me.scrollable.updateY(state.scrollTop);\n    }\n\n    //endregion\n\n    //region Theme & measuring\n\n    beginGridMeasuring() {\n        const me = this;\n\n        if (!me.$measureCellElements) {\n            me.$measureCellElements = DomHelper.createElement({\n                // For row height measuring, features are not yet there. Work around that for the stripe feature,\n                // which removes borders\n                className : 'b-grid-subgrid ' + (!me._isRowMeasured && me.hasFeature('stripe') ? 'b-stripe' : ''),\n                reference : 'subGridElement',\n                style     : {\n                    position   : 'absolute',\n                    top        : '-10000px',\n                    left       : '-100000px',\n                    visibility : 'hidden',\n                    contain    : 'strict'\n                },\n                children : [\n                    {\n                        className : 'b-grid-row',\n                        reference : 'rowElement',\n                        children  : [\n                            {\n                                className : 'b-grid-cell',\n                                reference : 'cellElement',\n                                style     : {\n                                    width   : 'auto',\n                                    contain : BrowserHelper.isFirefox ? 'layout paint' : 'layout style paint'\n                                }\n                            }\n                        ]\n                    }\n                ]\n            });\n        }\n\n        // Bring element into life if we get here early, to be able to access verticalScroller below\n        me.getConfig('element');\n\n        // Temporarily add to where subgrids live, to get have all CSS classes in play\n        me.verticalScroller.appendChild(me.$measureCellElements.subGridElement);\n\n        // Not yet on page, which prevents us from getting style values. Add it to the DOM temporarily\n        if (!me.rendered) {\n            const\n                targetEl    = me.appendTo || me.insertBefore || document.body,\n                rootElement = DomHelper.getRootElement(typeof targetEl === 'string' ? document.getElementById(targetEl) : targetEl);\n\n            if (!me.adopt || !rootElement.contains(me.element)) {\n                rootElement.appendChild(me.element);\n                me.$removeAfterMeasuring = true;\n            }\n        }\n        return me.$measureCellElements;\n    }\n\n    endGridMeasuring() {\n        // Remove grid from DOM if it was added for measuring\n        if (this.$removeAfterMeasuring) {\n            this.element.remove();\n            this.$removeAfterMeasuring = false;\n        }\n\n        // Remove measuring elements from grid\n        this.$measureCellElements.subGridElement.remove();\n    }\n\n    /**\n     * Creates a fake subgrid with one row and measures its height. Result is used as rowHeight.\n     * @private\n     */\n    measureRowHeight() {\n        const\n            me             = this,\n            // Create a fake subgrid with one row, since styling for row is specified on .b-grid-subgrid .b-grid-row\n            { rowElement } = me.beginGridMeasuring(),\n            // Use style height or default height from config.\n            // Not using clientHeight since it will have some value even if no height specified in CSS\n            styles         = DomHelper.getStyleValue(rowElement, ['height', 'border-top-width', 'border-bottom-width']),\n            styleHeight    = parseInt(styles.height),\n            // FF reports border width adjusted to device pixel ration, e.g. on a 150% scaling it would tell 0.6667px width\n            // for a 1px border. Dividing by the integer part to take base devicePixelRatio into account\n            multiplier     = BrowserHelper.isFirefox ? globalThis.devicePixelRatio / Math.max(Math.trunc(globalThis.devicePixelRatio), 1) : 1,\n            borderTop      = styles['border-top-width'] ? Math.round(multiplier * parseFloat(styles['border-top-width'])) : 0,\n            borderBottom   = styles['border-bottom-width'] ? Math.round(multiplier * parseFloat(styles['border-bottom-width'])) : 0;\n\n        // Change rowHeight if specified in styling, also remember that value to replace later if theme changes and\n        // user has not explicitly set some other height\n        if (me.rowHeight == null || me.rowHeight === me._rowHeightFromStyle) {\n            me.rowHeight           = !isNaN(styleHeight) && styleHeight ? styleHeight : me.defaultRowHeight;\n            me._rowHeightFromStyle = me.rowHeight;\n        }\n\n        // this measurement will be added to rowHeight during rendering, to get correct cell height\n        me._rowBorderHeight = borderTop + borderBottom;\n\n        me._isRowMeasured = true;\n\n        me.endGridMeasuring();\n\n        // There is a ticket about measuring the actual first row instead:\n        // https://app.assembla.com/spaces/bryntum/tickets/5735-measure-first-real-rendered-row-for-rowheight/details\n    }\n\n    /**\n     * Handler for global theme change event (triggered by shared.js). Remeasures row height.\n     * @private\n     */\n    onThemeChange({ theme }) {\n        // Can only measure when we are visible, so do it next time we are.\n        this.whenVisible('measureRowHeight');\n\n        this.trigger('theme', { theme });\n    }\n\n    //endregion\n\n    //region Rendering of rows\n\n    /**\n     * Triggers a render of records to all row elements. Call after changing order, grouping etc to reflect changes\n     * visually. Preserves scroll.\n     * @category Rendering\n     */\n    refreshRows(returnToTop = false) {\n        const { element, rowManager } = this;\n\n        element.classList.add('b-notransition');\n\n        if (returnToTop) {\n            rowManager.returnToTop();\n        }\n        else {\n            rowManager.refresh();\n        }\n\n        element.classList.remove('b-notransition');\n    }\n\n    /**\n     * Triggers a render of all the cells in a column.\n     * @param {Grid.column.Column} column\n     * @category Rendering\n     */\n    refreshColumn(column) {\n        if (column.isVisible) {\n            if (column.isLeaf) {\n                this.rowManager.forEach(row => row.renderCell(row.getCell(column.id)));\n            }\n            else {\n                column.children.forEach(child => this.refreshColumn(child));\n            }\n        }\n    }\n\n    //endregion\n\n    //region Render the grid\n\n    /**\n     * Recalculates virtual scrollbars widths and scrollWidth\n     * @private\n     */\n    refreshVirtualScrollbars() {\n        // NOTE: This was at some point changed to only run on platforms with width-occupying scrollbars, but it needs\n        // to run with overlayed scrollbars also to make them show/hide as they should.\n\n        const\n            me                        = this,\n            {\n                headerContainer,\n                footerContainer,\n                virtualScrollers,\n                scrollable,\n                hasVerticalOverflow\n            }                         = me,\n            { classList }             = virtualScrollers,\n            hadHorizontalOverflow     = !classList.contains('b-hide-display'),\n            // We need to ask each subGrid if it has horizontal overflow.\n            // If any do, we show the virtual scroller, otherwise we hide it.\n            hasHorizontalOverflow     = Object.values(me.subGrids).some(subGrid => subGrid.overflowingHorizontally),\n            horizontalOverflowChanged = hasHorizontalOverflow !== hadHorizontalOverflow;\n\n        // If horizontal overflow state changed, the docked horizontal scrollbar's visibility\n        //  must be synced to match, and this may cause a height change;\n        if (horizontalOverflowChanged) {\n            virtualScrollers.classList.toggle('b-hide-display', !hasHorizontalOverflow);\n        }\n\n        // Auto-widthed padding element at end hides or shows to create matching margin.\n        if (DomHelper.scrollBarWidth) {\n            // Header will need its extra padding if we have overflow, *OR* if we are overflowY : scroll\n            const needsPadding = hasVerticalOverflow || scrollable.overflowY === 'scroll';\n\n            headerContainer.classList.toggle('b-show-yscroll-padding', needsPadding);\n            footerContainer.classList.toggle('b-show-yscroll-padding', needsPadding);\n            virtualScrollers.classList.toggle('b-show-yscroll-padding', needsPadding);\n\n            // Do any measuring necessitated by show/hide of the docked horizontal scrollbar\n            /// *after* mutating DOM classnames.\n            if (horizontalOverflowChanged) {\n                // If any subgrids reported they have horizontal overflow, then we have to ask them\n                // to sync the widths of the scroll elements inside the docked horizontal scrollbar\n                // so that it takes up the required scrollbar width at the bottom of our body element.\n                if (hasHorizontalOverflow) {\n                    me.callEachSubGrid('refreshFakeScroll');\n                }\n                me.onHeightChange();\n            }\n        }\n    }\n\n    get hasVerticalOverflow() {\n        return this.scrollable.hasOverflow('y');\n    }\n\n    /**\n     * Returns content height calculated from row manager\n     * @private\n     */\n    get contentHeight() {\n        const rowManager = this.rowManager;\n        return Math.max(rowManager.totalHeight, rowManager.bottomRow ? rowManager.bottomRow.bottom : 0);\n    }\n\n    onContentChange() {\n        const\n            me         = this,\n            rowManager = me.rowManager;\n\n        if (me.isVisible) {\n            rowManager.estimateTotalHeight();\n            me.paintListener = null;\n            me.refreshTotalHeight(me.contentHeight);\n            me.callEachSubGrid('refreshFakeScroll');\n            me.onHeightChange();\n        }\n        // If not visible, this operation MUST be done when we become visible.\n        // This is announced by the paint event which is triggered when a Widget\n        // really gains visibility, ie is shown or rendered, or it's not hidden,\n        // and a hidden/non-rendered ancestor is shown or rendered.\n        // See Widget#triggerPaint.\n        else if (!me.paintListener) {\n            me.paintListener = me.ion({\n                paint   : 'onContentChange',\n                once    : true,\n                thisObj : me\n            });\n        }\n    }\n\n    triggerPaint() {\n        if (!this.isPainted) {\n            this.refreshBodyRectangle();\n        }\n\n        super.triggerPaint();\n    }\n\n    onHeightChange() {\n        const me = this;\n\n        // cache to avoid recalculations in the middle of rendering code (RowManger#getRecordCoords())\n        me.refreshBodyRectangle();\n        me._bodyHeight = me.autoHeight ? me.contentHeight : me.bodyContainer.offsetHeight;\n    }\n\n    suspendRefresh() {\n        this.refreshSuspended++;\n    }\n\n    resumeRefresh(trigger) {\n        if (this.refreshSuspended && !--this.refreshSuspended) {\n            if (trigger) {\n                this.refreshRows();\n            }\n\n            this.trigger('resumeRefresh', { trigger });\n        }\n    }\n\n    /**\n     * Rerenders all grid rows, completely replacing all row elements with new ones\n     * @category Rendering\n     */\n    renderRows(keepScroll = true) {\n        const\n            me          = this,\n            scrollState = keepScroll && me.storeScroll();\n\n        if (me.refreshSuspended) {\n            return;\n        }\n\n        /**\n         * Grid rows are about to be rendered\n         * @event beforeRenderRows\n         * @param {Grid.view.Grid} source This grid.\n         */\n        me.trigger('beforeRenderRows');\n        me.renderingRows = true;\n\n        // This allows us to do things like disable animations on a refresh\n        me.element.classList.add('b-grid-refreshing');\n\n        if (!keepScroll) {\n            me.scrollable.y = me._scrollTop = 0;\n        }\n        me.rowManager.reinitialize(!keepScroll);\n\n        /**\n         * Grid rows have been rendered\n         * @event renderRows\n         * @param {Grid.view.Grid} source This grid.\n         */\n        me.trigger('renderRows');\n\n        me.renderingRows = false;\n        me.onContentChange();\n\n        if (keepScroll) {\n            me.restoreScroll(scrollState);\n        }\n\n        me.element.classList.remove('b-grid-refreshing');\n    }\n\n    /**\n     * Rerenders the grids rows, headers and footers, completely replacing all row elements with new ones\n     * @category Rendering\n     */\n    renderContents() {\n        const\n            me                                                        = this,\n            { element, headerContainer, footerContainer, rowManager } = me;\n\n        me.emptyCache();\n\n        // columns will be \"drawn\" on render anyway, bail out\n        if (me.isPainted) {\n            // reset measured header height, to make next call to get headerHeight measure it\n            me._headerHeight = null;\n\n            me.callEachSubGrid('refreshHeader', headerContainer);\n            me.callEachSubGrid('refreshFooter', footerContainer);\n\n            // Note that these are hook methods for features to plug in to. They do not do anything.\n            me.renderHeader(headerContainer, element);\n            me.renderFooter(footerContainer, element);\n\n            me.fixSizes();\n\n            // any elements currently used for rows should be released.\n            // actual removal of elements is done in SubGrid#clearRows\n            const refreshContext = rowManager.removeAllRows();\n\n            rowManager.calculateRowCount(false, true, true);\n\n            if (rowManager.rowCount) {\n                // Sets up the RowManager's position for when renderRows calls RowManager#reinitialize\n                // so that it renders the correct data block at the correct position.\n                rowManager.setPosition(refreshContext);\n\n                me.renderRows();\n            }\n        }\n    }\n\n    onPaintOverride() {\n        // Internal procedure used for paint method overrides\n        // Not used in onPaint() because it may be chained on instance and Override won't be applied\n    }\n\n    // Render rows etc. on first paint, to make sure Grids element has been laid out\n    onPaint({ firstPaint }) {\n        const me = this;\n\n        me.ariaElement.setAttribute('aria-rowcount', me.store.count + 1);\n\n        super.onPaint?.(...arguments);\n\n        if (me.onPaintOverride() || !firstPaint) {\n            return;\n        }\n\n        const\n            {\n                rowManager,\n                store,\n                element,\n                headerContainer,\n                bodyContainer,\n                footerContainer\n            }         = me,\n            scrollPad = DomHelper.scrollBarPadElement;\n\n        let columnsChanged,\n            maxDepth = 0;\n\n        // ARIA. Update our ariaElement that encapsulates all rows.\n        // The header is counted as a row, and column headers are cells.\n        me.role = store?.isTree ? 'treegrid' : 'grid';\n\n        // See if updateResponsive changed any columns.\n        me.columns.ion({\n            change : () => columnsChanged = true,\n            once   : true\n        });\n\n        // Apply any responsive configs before rendering rows.\n        me.updateResponsive(me.width, 0);\n\n        // If there were any column changes, apply them\n        if (columnsChanged) {\n            me.callEachSubGrid('refreshHeader', headerContainer);\n            me.callEachSubGrid('refreshFooter', footerContainer);\n        }\n\n        // Note that these are hook methods for features to plug in to. They do not do anything.\n        // SubGrids take care of their own rendering.\n        me.renderHeader(headerContainer, element);\n        me.renderFooter(footerContainer, element);\n\n        // These padding elements are only visible on scrollbar showing platforms.\n        // And then, only when the owning element as the b-show-yscroll-padding class added.\n        // See refreshVirtualScrollbars where this is synced on the header, footer and scroller elements.\n        DomHelper.append(headerContainer, scrollPad);\n        DomHelper.append(footerContainer, scrollPad);\n        DomHelper.append(me.virtualScrollers, scrollPad);\n\n        // Cached, updated on resize. Used by RowManager and by the subgrids upon their render.\n        // Measure after header and footer have been rendered and taken their height share.\n        me.refreshBodyRectangle();\n        const bodyOffsetHeight = me.bodyContainer.offsetHeight;\n\n        if (me.autoHeight) {\n            me._bodyHeight             = rowManager.initWithHeight(element.offsetHeight - headerContainer.offsetHeight - footerContainer.offsetHeight, true);\n            bodyContainer.style.height = me.bodyHeight + 'px';\n        }\n        else {\n            me._bodyHeight = bodyOffsetHeight;\n            rowManager.initWithHeight(me._bodyHeight, true);\n        }\n\n        me.eachSubGrid(subGrid => {\n            if (subGrid.header.maxDepth > maxDepth) {\n                maxDepth = subGrid.header.maxDepth;\n            }\n        });\n\n        headerContainer.dataset.maxDepth = maxDepth;\n\n        me.fixSizes();\n\n        if (store.count || !store.isLoading) {\n            me.renderRows();\n        }\n\n        // With autoHeight cells we need to refresh rows when fonts are loaded, to get correct measurements\n        if (me.columns.usesAutoHeight) {\n            const { fonts } = document;\n            if (fonts?.status !== 'loaded') {\n                fonts.ready.then(() => !me.isDestroyed && me.refreshRows());\n            }\n        }\n\n        me.initScroll();\n\n        me.initInternalEvents();\n    }\n\n    render() {\n        const me = this;\n\n        // When displayed inside one of our containers, require a size to be considered visible. Ensures it is painted\n        // on display when for example in a tab\n        me.requireSize = Boolean(me.owner);\n\n        // Render as a container. This renders the child SubGrids\n        super.render(...arguments);\n\n        if (!me.autoHeight) {\n            // Sanity check that main element has been given some sizing styles, unless autoHeight is used in which case\n            // it will be sized programmatically instead\n            if (me.headerContainer.offsetHeight && !me.bodyContainer.offsetHeight) {\n                console.warn('Grid element not sized correctly, please check your CSS styles and review how you size the widget');\n            }\n\n            // Warn if height equals the predefined minHeight, likely that is not what the dev intended\n            if (\n                !('minHeight' in me.initialConfig) &&\n                !('height' in me.initialConfig) &&\n                parseInt(globalThis.getComputedStyle(me.element).minHeight) === me.height\n            ) {\n                console.warn(\n                    `The ${me.$$name} is sized by its predefined minHeight, likely this is not intended. ` +\n                    `Please check your CSS and review how you size the widget, or assign a fixed height in the config. ` +\n                    `For more information, see the \"Basics/Sizing the component\" guide in docs.`\n                );\n            }\n        }\n    }\n\n    //endregion\n\n    //region Hooks\n\n    /**\n     * Called after headers have been rendered to the headerContainer.\n     * This does not do anything, it's just for Features to hook in to.\n     * @param {HTMLElement} headerContainer DOM element which contains the headers.\n     * @param {HTMLElement} element Grid element\n     * @private\n     * @category Rendering\n     */\n    renderHeader(headerContainer, element) {}\n\n    /**\n     * Called after footers have been rendered to the footerContainer.\n     * This does not do anything, it's just for Features to hook in to.\n     * @param {HTMLElement} footerContainer DOM element which contains the footers.\n     * @param {HTMLElement} element Grid element\n     * @private\n     * @category Rendering\n     */\n    renderFooter(footerContainer, element) {}\n\n    // Hook for features to affect cell rendering before renderers are run\n    beforeRenderCell() {}\n\n    // Hooks for features to react to a row being rendered\n    beforeRenderRow() {}\n\n    afterRenderRow() {}\n\n    // Hook for features to react to scroll\n    afterScroll() {}\n\n    // Hook that can be overridden to prepare custom editors, can be used by framework wrappers\n    processCellEditor(editorConfig) {}\n\n    // Hook for features to react to column changes\n    afterColumnsChange() {}\n\n    // Hook for features to react to record removal (which might be transitioned)\n    afterRemove(removeEvent) {}\n\n    // Hook for features to react to groups being collapsed/expanded\n    afterToggleGroup() {}\n\n    // Hook for features to react to subgrid being collapsed\n    afterToggleSubGrid() {}\n\n    //endregion\n\n    //region Masking and Appearance\n\n    syncMaskCover(mask = this.masked) {\n        if (mask) {\n            const\n                bodyRect     = (mask.cover === 'body') && this.rectangleOf('bodyContainer'),\n                scrollerRect = bodyRect && this.rectangleOf('virtualScrollers'),\n                { style }    = mask.element;\n\n            // the width of the bodyCt covers the vscroll but the height does not cover the hscroll:\n            style.marginTop = bodyRect ? `${bodyRect.y}px` : '';\n            style.height    = bodyRect ? `${bodyRect.height + (scrollerRect?.height || 0)}px` : '';\n        }\n    }\n\n    /**\n     * Show a load mask with a spinner and the specified message. When using an AjaxStore masking and unmasking is\n     * handled automatically, but if you are loading data in other ways you can call this function manually when your\n     * load starts.\n     * ```\n     * myLoadFunction() {\n     *   // Show mask before initiating loading\n     *   grid.maskBody('Loading data');\n     *   // Your custom loading code\n     *   load.then(() => {\n     *      // Hide the mask when loading is finished\n     *      grid.unmaskBody();\n     *   });\n     * }\n     * ```\n     * @param {String|MaskConfig} loadMask The message to show in the load mask (next to the spinner) or a config object\n     * for a {@link Core.widget.Mask}.\n     * @returns {Core.widget.Mask}\n     * @category Misc\n     */\n    maskBody(loadMask) {\n        let ret;\n\n        if (this.bodyContainer) {\n            this.masked = Mask.mergeConfigs(this.loadMaskDefaults, loadMask);  // smart setter\n            ret         = this.masked;  // read back\n        }\n\n        return ret;\n    }\n\n    /**\n     * Hide the load mask.\n     * @category Misc\n     */\n    unmaskBody() {\n        this.masked = null;\n    }\n\n    updateEmptyText(emptyText) {\n        this.emptyTextEl?.remove();\n\n        // Grid might be created without subgrids, will add element to first when it is added\n        this.emptyTextEl = DomHelper.createElement({\n            parent                                       : this.firstItem?.element,\n            className                                    : 'b-empty-text',\n            [emptyText?.includes('<') ? 'html' : 'text'] : emptyText\n        });\n    }\n\n    toggleEmptyText() {\n        const { bodyContainer, store } = this;\n        bodyContainer?.classList.toggle('b-grid-empty', !(store.count > 0 || store.isLoading || store.isCommitting));\n    }\n\n    // Notify columns when our read-only state is toggled\n    updateReadOnly(readOnly, old) {\n        super.updateReadOnly(readOnly, old);\n\n        if (!this.isConfiguring) {\n            for (const column of this.columns.bottomColumns) {\n                column.updateReadOnly?.(readOnly);\n            }\n        }\n    }\n\n    //endregion\n\n    //region Extract config\n\n    // This function is not meant to be called by any code other than Base#getCurrentConfig().\n    // It extracts the current configs for the grid, with special handling for inline data\n    getCurrentConfig(options) {\n        const\n            result     = super.getCurrentConfig(options),\n            { store }  = this,\n            // Clean up inline data to not have group records in it\n            data       = store.getInlineData(options),\n            // Get stores current state, in case it has filters etc added at runtime\n            storeState = store.getCurrentConfig(options) || result.store;\n\n        if (data.length) {\n            result.data = data;\n        }\n\n        // Dont include the default model class\n        if (storeState && store.originalModelClass === GridRowModel) {\n            delete storeState.modelClass;\n        }\n\n        if (!ObjectHelper.isEmpty(storeState)) {\n            result.store = storeState;\n        }\n\n        if (result.store) {\n            delete result.store.data;\n        }\n\n        return result;\n    }\n\n    //endregion\n}\n\n// Register this widget type with its Factory\nGridBase.initClass();\n\nVersionHelper.setVersion('grid', '5.3.0');\n"],"names":["Location","constructor","location","isLocation","nodeType","Node","ELEMENT_NODE","grid","Widget","fromElement","cell","closest","focusableSelector","dataset","parentNode","init","rowIndex","store","includes","id","indexOf","index","columnId","initialTarget","config","_me$record","me","columns","visibleColumns","target","actionTargets","_target","record","_id","_rowIndex","_store$getAt","isNaN","row","NaN","Math","max","min","Number","count","hideHeaders","getAt","isSpecialRow","_column","getById","get","field","columnIndex","column","_columnIndex","length","equals","other","shallow","visibleRowIndex","rowManager","lastFullyVisibleTow","dataIndex","firstFullyVisibleTow","isSelectable","_this$column","_this$grid$columns$vi","move","where","result","rowMin","rowMax","colMax","atFirstRow","atLastRow","atFirstColumn","atLastColumn","PREV_CELL","NEXT_CELL","UP","DOWN","firstFullyVisibleRow","FIRST_COLUMN","LAST_COLUMN","FIRST_CELL","LAST_CELL","PREV_PAGE","floor","scrollable","clientHeight","rowHeight","NEXT_PAGE","_cell","_grid$columns$getById","element","_grid$columns$getAt","getCell","getRowById","getRow","focusableFinder","currentNode","focusableFinderCell","nextNode","isActionable","containsFocus","compareDocumentPosition","DomHelper","getActiveElement","DOCUMENT_POSITION_CONTAINED_BY","Boolean","isColumnHeader","isCell","_$name","validWidth","value","endsWith","Column","Model","mixin","Events","Localizable","$name","type","fields","name","defaultValue","convert","sorter","originalSortFn","sortFn","bind","Object","assign","fn","filter","columnOwned","filterFn","autoExposeFields","construct","data","_me$field","masterStore","_grid","Array","isArray","localizableProperties","Config","mergeMethods","distinct","localeClass","arguments","isLeaf","emptyCount","noFieldSpecified","hasComplexMapping","width","flex","children","set","defaultWidth","headerWidgets","initHeaderWidgets","isParent","meta","visibleChildren","Set","collapsible","isCollapsible","_this$children","collapsed","onCollapseChange","trigger","onCellFocus","updateHeaderAriaLabel","localizeProperty","updateCellAriaLabel","headerAriaLabel","setAttributes","cellAriaLabel","_this$location","_this$location2","_cellAriaLabel","text","doDestroy","_this$data","_this$data$editor","_this$data$editor$des","editor","destroy","call","destroyHeaderWidgets","widgets","headerWidgetMap","widget","create","_objectSpread","owner","ref","values","_widget$destroy","generateAutoCls","columnAutoCls","c","superclass","toLowerCase","autoClsMap","Map","getCellClass","cellContext","_Column$autoClsMap","_record$fieldMap$colu","cellCls","internalCellCls","align","autoCls","isEditing","classList","contains","isFieldModified","compositeField","fieldMap","persist","selectionMode","isCellSelected","isFocused","autoHeight","locked","region","parent","isRoot","sortable","groupable","isWidget","processCellEditor","ObjectHelper","merge","defaultEditor","label","StringHelper","encodeHtml","getFilterableValue","getRawValue","_owner","subGrid","_this$parent","_subGrid","_this$grid","getSubGridFromColumn","subGridElement","getHeaderElement","nextVisibleSibling","next","nextSibling","hidden","isLastInSubGrid","textWrapper","getChild","textElement","down","contentElement","isSorted","sorters","some","s","isFocusable","$meta","defaults","headerText","htmlEncodeHeaderText","isVisible","hide","silent","hidingParent","isTogglingAll","anyVisible","child","forEach","stores","show","_me$meta$visibleChild","toggle","forceVisible","undefined","toggleChildren","force","_me$grid$columns","_me$grid$columns2","beginBatch","childColumn","endBatch","collapseMode","_me$grid$columns3","_me$grid$columns4","firstChild","oldFlex","offsetWidth","slice","push","toggleable","pressed","icon","rtl","pressedIcon","cls","onToggle","findIndex","w","splice","generateId","generatedIdIndex","replace","allIndex","measureSize","_this$subGrid","calcMinWidth","minWidth","parseInt","calculateMinWidth","minChildWidth","reduce","resizeToFitContent","widthMin","widthMax","batch","fitMode","rows","rowElement","cellElement","beginGridMeasuring","maxWidth","start","end","i","longest","_domData","updatingSingleRow","isMeasuring","innerHTML","resizeToFitIncludesHeader","$headerPadding","style","globalThis","getComputedStyle","paddingLeft","querySelector","cssText","topIndex","round","rowCount","String","_record","renderCell","textContent","endGridMeasuring","getState","state","applyState","remove","focusedCell","owns","navigateRight","_focusedCell","getAdjacentVisibleLeafColumn","getPath","refreshCell","clearCell","_content","canEdit","isEditable","insertChild","before","col","sealed","inProcessChildren","canFillValue","getCurrentConfig","options","_this$sortable","renderer","internalRenderer","headerRenderer","internalHeaderRenderer","ariaLabel","exposeProperties","columnDefinitions","boolean","date","integer","format","maximumFractionDigits","number","lockedColumnSorters","ColumnStore","Store","defaultConfig","modelClass","tree","autoAddField","_columnStore","ion","subGridCollapse","subGridExpand","thisObj","change","onStoreChange","sort","updateChainedStores","prio","_modelClass","ClassDef","allColumns","isChained","traverse","idRegister","traverseWhile","n","totalFixedWidth","childCol","calculateFixedWidth","hasFlex","topColumns","rootNode","chainedFilterFn","_visibleColumns","leaves","action","changes","clearCaches","clearSubGridCaches","_this$masterStore","onMasterDataChanged","event","columnOrId","wrap","idx","bottomColumns","findRecord","createRecord","_store$modelClass","_store$modelClass$fie","dataField","columnClass","Objects","getColumnClass","Error","defaultRegion","fieldDefinition","fieldType","addField","recordOrId","records","r","usesAutoHeight","find","usesFlexAutoHeight","registerColumnType","simpleRenderer","columnTypes","generateColumnForField","_this$grid$store","separate","precision","columnType","columnResizeEvent","handler","update","WidgetColumn","filterable","searchable","alwaysClearCell","widgetMap","externalRenderer","updateReadOnly","readOnly","cellInfo","renderData","_this$externalRendere","isExport","map","widgetCfg","_me$onBeforeWidgetSet","_me$onAfterWidgetSetV","widgetNextSibling","nextElementSibling","recreate","onBeforeWidgetCreate","recomposeAsync","WidgetHelper","append","insertBefore","onAfterWidgetCreate","isSelectionColumn","onBeforeWidgetSetValue","valueProperty","defaultBindProperty","onAfterWidgetSetValue","_defineProperty","CheckColumn","externalHeaderRenderer","externalOnBeforeWidgetSetValue","externalOnAfterWidgetSetValue","internalOnBeforeWidgetSetValue","internalOnAfterWidgetSetValue","_me$grid","console","warn","suppressNoModelFieldWarning","$$name","_this$headerCheckbox","headerCheckbox","headerElement","returnValue","add","showCheckAll","appendChild","Checkbox","appendTo","internalListeners","updateCheckAllState","suspendEvents","checked","resumeEvents","onCheckAllChange","updateRecord","checkCls","beforeChange","_this$externalOnBefor","isInitialSet","_this$externalOnAfter","onBeforeCheckboxChange","source","userAction","features","cellEdit","disabled","onCheckboxChange","every","setterName","capitalize","onCellKeyDown","key","checkbox","preventDefault","handled","RowNumberColumn","resizable","draggable","bindStore","initial","rendered","paint","once","groupHeaderReserved","detachListeners","asyncEventSuffix","cellPadding","getStyleValue","measureText","f","_column$externalHeade","consumerToFeatureMap","consumerToDefaultFeatureMap","DEFAULT_FOR_TYPE","remapToBase","Grid","Scheduler","SchedulerPro","Gantt","classNameFix","GridFeatureManager","registerFeature","featureClass","onByDefault","forType","as","uncapitalize","prototype","hasOwnProperty","consumerFeaturesMap","consumerDefaultFeaturesMap","getTypeNameFeatures","getTypeNameDefaultFeatures","getInstanceFeatures","instance","names","typeName","getInstanceDefaultFeatures","entries","isDefaultFeatureForTypeName","isDefaultFeatureForInstance","typeChain","reverse","len","has","reset","clear","editingActions","finishAndEditNextRow","finishAndEditPrevRow","finishEditing","cancelEditing","finishAndEditNextCell","finishAndEditPrevCell","CellEdit","Delayable","InstancePlugin","autoSelect","blurAction","continueEditingOnCellClick","addNewAtEnd","autoEdit","editNextOnEnterPress","editorClass","Editor","triggerEvent","touchEditDelay","focusCellAnimationDuration","multiEdit","keyMap","Enter","F2","Escape","Tab","pluginConfig","chain","gridListeners","renderRows","cellClick","changeTotalHeight","beforeSort","confirm","editorContext","MessageDialog","inputField","rootElement","yesButton","allRecords","_column$_cellEditor","_cellEditor","doDisable","disable","isConfiguring","activeRecord","_this$editorContext","getEditorForCell","cellEditor","leftOffset","editTargetSelector","editorTarget","offsetLeft","isEditor","mergeConfigs","constrainTo","invalidAction","completeKey","cancelKey","offset","getEditorListeners","onInternalKeyDown","onEditorKeydown","allowMouseEvents","minHeight","items","instantUpdate","cellEditValueSetter","wrapProperty","isValid","isEqual","isDateField","_isPickerInput","rowId","revertOnEscape","focusOut","focusIn","beforeComplete","complete","beforeCancel","cancel","beforeHide","finishEdit","onEditorStart","cellEditorContext","_me$removeEditingList","cellclick","removeEditingListeners","GlobalEvents","addListener","globaltap","onEditorBeforeComplete","context","onEditorComplete","onEditorBeforeCancel","onEditorCancel","muteEvents","onBeforeEditorHide","removeCls","onEditorFinishEdit","getAdjacentEditableCell","isForward","getAdjacent","doAddNewAtEnd","newRecordConfig","clone","getRowFor","displayRecordAtBottom","getEditingContext","normalizeCellContext","startEditing","_cellContext","_grid$focusedCell","_me$onCellEditStart","fromKeyMap","isEmpty","firstVisibleRow","isTree","_cellContext$record","expandTo","focusCell","highlightExternalChange","render","addCls","startEdit","onCellEditStart","triggeredByEvent","_me$afterCellEdit","cancelEdit","finishEditingPromise","afterCellEdit","_me$afterCellEdit2","completeEdit","bindCallback","finalizeCellEdit","waitForAnimations","onCellClickWhileEditing","cellSelector","isTouchEvent","focus","onCellClick","client","_lastCellClicked","timeStamp","_lastCellClickedTime","onTriggerEditEvent","onElementPointerUp","_client$features$cell","cellMenu","onStoreUpdate","refreshEdit","onStoreBeforeSort","_this$editorContext2","isFinishing","onGridRefreshed","isInView","suspendFocusEvents","showBy","resumeFocusEvents","gridSelection","selectedRecords","selectedCells","isActionAvailable","keyCombination","finishAllSelected","isDestroyed","selected","isModel","previous","nextCell","internalNextPrevRow","last","touch","currentEditableFinalizationResult","finalizationResult","animate","onElementKeyDown","ctrlKey","input","internalOnKeyEvent","defaultPrevented","internalOnInput","startsWith","stopPropagation","onEditorFocusOut","toCell","relatedTarget","isEditableCellClick","onEditorFocusIn","toWidget","selectAll","onTapOut","bodyContainer","button","editingStoppedByTapOutside","onElementClick","CellMenu","ContextMenuBase","processItems","showContextMenu","eventParams","doSelect","isSelected","shouldShowMenu","enableCellContextMenu","getDataFromEvent","cellData","getCellDataFromEvent","beforeContextMenuShow","cellMenuItems","removeRow","populateCellMenu","weight","onItem","showMenu","ColumnDragToolbar","after","_grid$features$column","columnReorder","beforeDestroy","detachFromColumnReorder","initialized","reorderDetacher","gridheaderdragstart","showToolbar","gridheaderdrag","onDrag","gridheaderabort","hideToolbar","gridheaderdrop","valid","onDrop","onColumnReorderBeforeDestroy","un","buttons","getColumnDragToolbarItems","groups","clearTimeout","buttonHideTimer","L","group","template","EventHelper","waitForTransitionEnd","mode","info","_info$targetElement","dragProxy","getBoundingClientRect","top","hoveringButton","targetElement","matches","buttonEl","setTimeout","TemplateHelper","tpl","btn","BrowserHelper","isTouchDevice","ColumnPicker","getColumnPickerItems","columnStore","createColumnsFromModel","groupByRegion","regions","getSubGrid","menu","buildColumnMenu","createAutoColumnItems","groupByTag","tags","hideable","tag","keys","getColumnsForTag","onBeforeSubMenu","item","itemEl","refreshTagMenu","transformNamedObjectToArray","allFields","fieldName","internal","forColumn","bubbles","subItem","currentRegion","visibleInRegion","itemConfig","menuCls","populateHeaderMenu","showColumnPicker","columnPicker","onColumnToggle","hideColumn","_features$headerMenu","_item$menu","siblingItems","hideItem","headerMenu","enabled","lastVisibleItem","menuItem","siblingItem","sibling","eachWidget","parentItem","ColumnReorder","args","_this$dragHelper","_this$dragHelper2","dragHelper","scrollManager","gridEl","containers","DragHelper","dragThreshold","targetSelector","floatRootOwner","rtlSource","outerElement","headerContainer","monitoringConfig","scrollables","ScrollManager","new","direction","isElementDraggable","abort","ignoreSelectors","join","columnEl","isLast","childLevel","subGrids","ignoreSelector","beforeDragStart","onBeforeDragStart","dragstart","onDragStart","drag","drop","relayEvents","targetHeader","sealedColumns","columnDragToolbar","headerContainerBox","minY","maxY","bottom","fontSize","onInvalidDrop","dragging","onHeader","droppedInRegion","draggedTo","onColumn","toRegion","oldParent","newParent","groupNode","parentElement","vetoed","previousSibling","removeChild","renderContents","onPaint","ColumnResize","configurable","liveResize","resizer","ResizeHelper","handleSelector","beforeresizestart","onBeforeResizeStart","resizestart","onResizeStart","resizing","onResizing","resize","onResize","onCancel","_this$resizer","changeLiveResize","isMobileSafari","resizingColumns","newWidth","afterColumnsResized","elementWidth","GridFieldFilterPicker","FieldFilterPicker","afterConstruct","_me$fields","updateGrid","newGrid","_newGrid$store","getModelClassFields","ownFieldNames","SUPPORTED_FIELD_DATA_TYPES","isSupportedDurationField","definedBy","getColumnFields","allowedFieldNames","_columnStore$records$","modelFields","ArrayHelper","keyBy","allowedNameSet","fromEntries","title","changeFields","newFields","localFields","VersionHelper","deprecate","initClass","GridFieldFilterPickerGroup","FieldFilterPickerGroup","validateConfig","getFilterPickerConfig","canManage","property","fieldTypeMap","int","string","duration","Filter","prioritizeColumns","isMulti","filterBar","closeFilterEditor","dateFormat","_this$filterTip","_this$filterEditorPop","filterTip","filterEditorPopup","beforeFilter","refreshHeaders","reRenderRows","iconElement","Tooltip","forElement","forSelector","getHtml","activeTarget","filterText","isFiltered","columnFilters","filters","allValues","isColumnFiltered","headerEl","textEl","filterIconEl","bullet","columnFilter","_columnFilter$value","_me$store","_me$store$modelRelati","relation","modelRelations","foreignKey","displayValue","_me$isMulti$fields","relatedDisplayField","getDisplayValue","foreignId","_relation$foreignStor","foreignStore","a","b","localeCompare","formatValue","val","operator","createElement","className","latestFilterField","refreshRows","applyFilter","$filter","addFilter","removeFilter","getCurrentMultiFilters","disableFilter","getPopupDateItems","initialValue","changeCallback","closeCallback","filterField","onClose","onClear","onKeydown","onChange","clearSiblingsFields","_value","placeholder","clearable","getPopupNumberItems","onEsc","sourceField","_this$filterEditorPop2","getPopupDurationItems","getPopupStringItems","displayField","rec","multiSelect","getPopupItems","getMultiFilterPopupItems","_grid$store","existingFilter","limitToProperty","propertyFieldCls","operatorFieldCls","valueFieldCls","showFilterEditor","getBy","getFilterType","openPopup","scrollAction","layout","_this$filterEditorPop3","getFieldDefinition","filterType","populateCellMenuWithDateItems","filterDateEquals","filterDateBefore","filterDateAfter","populateCellMenuWithNumberItems","filterNumberEquals","filterNumberLess","filterNumberMore","populateCellMenuWithDurationItems","filterDurationEquals","filterDurationLess","filterDurationMore","populateCellMenuWithStringItems","test","_column$filterable$fi","_column$filterable$fi2","filterStringEquals","filterRemove","columnHasRemovableFilters","filterDisable","columnHasEnabledFilters","canDeleteFilter","callback","editFilter","onStoreBeforeFilter","_column$filterable","CollectionFilter","filterBy","onStoreFilter","renderHeader","showFilterEditorByKey","complexOperators","isIncludedIn","endsWidth","FilterBar","keyStrokeFilterDelay","compactMode","clearStoreFiltersOnHide","ArrowUp","ArrowRight","ArrowDown","ArrowLeft","properties","filterFieldCls","filterFieldInputCls","filterableColumnCls","filterFieldInputSelector","filterableColumnSelector","filterParseRegExp","storeTrackingSuspended","onColumnFilterFieldChange","gridDetacher","beforeElementClick","_this$gridDetacher","destroyFilterBar","getColumnFilterField","updateCompactMode","prop","_columnFilters","_this$grid$columns","destroyColumnFilterField","hideFilterBar","suspendStoreTracking","hideColumnFilterField","resumeStoreTracking","showFilterBar","renderFilterBar","toggleFilterBar","renderColumnFilterField","getColumnFilterable","externalCls","_filterBy","buildFilterValue","inputCls","keyStrokeChangeDelay","defineProperty","_column$editor","_column$editor2","_column$editor3","strictParsing","retainElement","setColumnFilterField","hasFilterFieldStoreData","readUrl","isCombo","configuredValue","refreshData","getDistinctValues","ascending","picker","beforeShow","autoLoad","updateColumnFilterFields","_updatingFields","isDestroying","_this$_columnFilters","parseFilterValue","isDate","isTimeField","match","Date","_column$filterable2","afterColumnsChange","disableGridNavigation","onBeforeElementClick","isClearingFilter","_column$filterable3","_column$filterable4","caseSensitive","Group","groupSortFn","_thisIsAUsedExpression","groupSummary","processConfig","beforeRenderRow","setConfig","clearGroupers","updateRenderer","groupRenderer","updateField","updateGroupSortFn","isGrouped","unshift","groupers","toggleCollapse","collapse","internalToggleCollapse","skipRender","groupRecord","isGroupHeader","expand","renderFromRow","renderFromRecord","afterToggleGroup","collapseAll","groupRecords","expandAll","onBeforeRenderRow","oldRecord","forceInnerHTML","rowClasses","groupHeaderColumn","$groupHeader","buildGroupHeader","assignCls","groupRowFor","childCount","html","applyDefault","groupColumn","groupField","isGroupHeaderColumn","isFirstColumn","groupChildren","getChildElementCount","DomSync","sync","domConfig","onlyChildren","asArray","_hasHtml","headerContainerElement","groupInfo","header","groupAsc","groupDesc","groupRemove","_store$groupers","grouped","removeGrouper","onStoreGroup","curGroupHeaders","getHeaderElementByField","fromRow","instanceMeta","groupParent","modified","oldGroup","onElementTouchStart","getColumnFromElement","touches","_store$groupers2","columnGrouper","g","shiftKey","altKey","DomDataStore","toggleGroup","_focusedCell$record","HeaderMenu","moveColumns","enableHeaderContextMenu","timeAxisColumn","getHeaderDataFromEvent","headerMenuItems","columnToMoveBefore","getColumnToMoveBefore","columnToMoveAfter","getColumnToMoveAfter","movePrev","_oldParent$children","moveNext","_oldParent$children2","Sort","multiSort","ignoreRe","RegExp","sortableCls","sortedCls","sortedAscCls","sortedDescCls","sortFeatureStore","syncHeaderSortState","isPainted","storeSorters","sorterCount","DomClassList","leafColumn","_leafColumn$textWrapp","leafHeader","sortDirection","sortIndex","syncClassList","sortBy","sortAsc","sortDesc","addSortAsc","addSorter","addSortDesc","removeSorter","_column$sortable","Stripe","renderrow","onRenderRow","even","cellContentRange","document","createRange","Row","Base","$config","equal","c1","c2","isDomClassList","_elements","_elementsArray","_cells","_allCells","_regions","lastHeight","lastTop","_dataIndex","_top","_height","isGroupFooter","positionMode","translateElements","positionElements","removeElements","idMap","_index","eachElement","ariaRowIndex","idObj","eachCell","addElement","firstElementChild","getElement","getRectangle","Rectangle","from","elements","cells","getCells","onlyRelease","height","offsetHeight","_rowBorderHeight","updateElementsHeight","storeKnownHeight","classes","updateCls","toggleCls","changeCls","setAttribute","attribute","removeAttribute","isFirst","setTop","setBottom","translate","transform","offsetTop","newTop","recordIndex","_record2","_maxRequestedHeight","_grid$processRowHeigh","oldHeight","oldId","rowElData","_rowHeight","size","rCls","recordCls","transitionDuration","isLinked","hasLinks","lastRecordCls","fixedRowHeight","getRowHeight","maxRequestedHeight","el","parentIndex","isExpanded","_record$children","_record$children2","_columnId","transient","useHeight","processRowHeight","translateFromRow","afterRenderRow","_grid$features","_grid$hasFrameworkRen","cellElementData","rowElementData","cellContent","configuredHeight","rendererData","useRenderer","defaultRenderer","beforeRenderCell","shouldSetContent","print","hasFrameworkRenderer","frameworkPerformsFullRendering","_cellEdit$editorConte","renderTarget","moveContentFromCell","hasObjectContent","hasStringContent","lastDomConfig","htmlEncode","disableHtmlEncode","innerText","setInnerText","autoSyncHtml","node","childNodes","_grid$processCellCont","processCellContent","rendererHtml","editorElement","setStart","setEndBefore","extractContents","Bar","htmlCls","overflowX","_columns","fixCellWidths","flexBasis","cellEl","getBarCellElement","domWidth","setLength","domMinWidth","domMaxWidth","isHeader","getLrPadding","cellLrPadding","ownerDocument","defaultView","getPropertyValue","Footer","refreshContent","contentTemplate","fixFooterWidths","firstPaint","overflowElement","footersElement","getFooter","footerText","RowManager","prependRowBuffer","appendRowBuffer","lastScrollTop","_rows","heightMap","totalKnownHeight","_totalHeight","averageRowHeight","scrollTargetRecordId","refreshDetails","topRowIndex","topRowTop","_rowManager","initWithHeight","isRendering","allCount","preciseRowOffsetHeight","viewHeight","calculateRowCount","reinitialize","returnToTop","topRow","estimateTotalHeight","matchRowCount","numRows","delta","newRows","rowCls","apply","_focusedCell$cell","rowActive","removedRows","_me$getRowFor","onFocusedRowDerender","skipMatchRowCount","allowRowCountShrink","visibleRowCount","ceil","minRowOffsetHeight","maxRenderRowCount","_me$bottomRow","bottomRow","indexDelta","totalHeight","toggleEmptyText","removeAllRows","setPosition","getRowFromElement","getRowAt","y","local","roundPx","HTMLElement","getNextRow","indexOrRow","lastVisibleRow","findLast","bodyHeight","lastFullyVisibleRow","offsetRows","prependBufferHeight","rowOffsetHeight","appendBufferHeight","assertNumber","minRowHeight","oldY","edgeOffset","average","oldAverage","clearKnownHeights","refresh","newY","scrollRowIntoView","block","allHeightsKnown","getOffsetHeight","invalidateKnownHeight","delete","calculateTop","getRecordCoords","roughly","scrollingViewport","_bodyRectangle","refreshBodyRectangle","x","getRecordCoordsByIndex","currentTopIndex","currentBottomIndex","calculateFrom","virtual","Symbol","iterator","storeCount","fromRowIndex","recordsAfter","toRowIndex","leftOverCount","displayRecordAtTop","heightChanged","refreshSuspended","jumpToPosition","newScrollTop","forceRecordIndex","border","accumulated","targetIndex","startIndex","viewportTop","viewportBottom","targetRow","rowCenter","center","viewportCenter","viewport","warpIfNeeded","deltaTop","abs","updateRenderedRows","ignoreError","clientRect","posInfo","fillBelow","fillAbove","correctError","error","fillHeight","accumulatedHeight","recordCount","immediate","renderingRows","unknownCount","estimate","bottomRowTop","newRecord","estimatedTop","pop","_grid$focusedCell2","shift","xAxis","GridScroller","Scroller","addScroller","scroller","xScrollers","addPartner","otherScroller","axes","initScroll","removePartner","updateOverflowX","_this$xScrollers","hideScroll","virtualScrollers","scrollIntoView","Element","subGridScroller","hasOverflow","axis","scrollHeight","Header","changeElement","was","getConfig","reference","maxDepth","headersElement","getColumnConfig","tooltip","depth","role","encodeConfig","calculateMinWidthForSafari","fixHeaderWidths","innerEl","columnsDetacher","initDepths","getHeader","strict","syncIdField","releaseThreshold","gridBodyElementEventHandlers","touchstart","touchmove","touchend","mouseover","mouseout","mousedown","mousemove","mouseup","click","dblclick","keyup","keypress","contextmenu","pointerdown","pointerup","eventProps","toggleHover","setCellHover","Target","GridElementEvents","longPressTime","enableUndoRedoKeys","initInternalEvents","handledEvents","listeners","bodyElement","eventName","passive","on","focusin","capture","includeSingleAxisMatch","left","right","_document$elementFrom","elementFromPoint","headerData","handleEvent","longPressTimeout","onElementLongPress","longPressPerformed","onFocusGesture","onElementTouchMove","lastTouchTarget","changedTouches","pageX","pageY","touchTarget","mouseoutEvent","MouseEvent","copyProperties","pointerType","dispatchEvent","mouseoverEvent","onElementTouchEnd","cancelable","triggerCellMouseEvent","eventData","_column$onCellClick","onElementMouseDown","skipFocusSelection","isScrollbarOrRowBorderOrSplitterClick","rect","scrollBarWidth","onElementMouseMove","mouseMoveEvent","onElementMouseUp","onElementPointerDown","onHandleElementClick","isContextMenu","isTreeExpander","isUnfocusedRightClick","hasFocus","isMac","_me$focusedCell","navigationEvent","onElementDblClick","onElementMouseOver","scrolling","shouldHover","setHovered","onElementMouseOut","_me$columns$find","_me$checkboxSelection","rowNumberColumnId","rowNumber","checkboxSelectionColumnId","checkboxSelectionColumn","_hoveredCell","prevSelector","prevRow","_me$columns$getById","_hoveredRow","selector","_me$columns$getById2","keyMapOnKeyDown","_me$columns$getById$o","_me$columns$getById3","undoRedoKeyPress","_this$features$cellEd","stm","onUndoKeyPress","clickCellByKey","onElementKeyPress","onElementKeyUp","onElementContextMenu","onInternalResize","oldWidth","_devicePixelRatio","devicePixelRatio","resetScrollBarWidth","_bodyHeight","refreshVirtualScrollbars","updateResponsive","widgetClass","validConfigTypes","object","function","GridFeatures","defaultFeatures","_features","feature","registeredInstanceFeatures","featureName","throwIfError","__bryntum_code_editor_changed","errorMessage","_errorDuringConfiguration","Reflect","createFeatureInitializer","constructorArgs","hasFeature","featureProp","getOwnPropertyDescriptor","hasActiveFeature","_this$features","_this$features2","getConfigValue","_this$features$featur","_this$features$featur2","_this$features$featur3","featureConfig","defaultFocusOptions","freeze","disableScrolling","containedFocusable","e","NodeFilter","FILTER_REJECT","FILTER_ACCEPT","FILTER_SKIP","_class","GridNavigation","onStoreRecordIdChange","_super$onStoreRecordI","oldValue","isActive","revertFocus","headerContext","tabIndex","navigateFirstCell","navigateFirstColumn","navigateLastCell","navigateLastColumn","navigatePrevPage","navigateNextPage","activateHeader","keyEvent","_column$onKeyDown","onKeyDown","onEscape","stopImmediatePropagation","disableActionable","onTab","display","requestAnimationFrame","onShiftTab","onFirstCell","navigateLeft","onSpace","isActionableLocation","_this$_focusedCell","focusedRecord","_this$_focusedCell2","cellCSSSelector","afterHide","lastFocusedCell","_this$_focusedCell3","focusElement","_this$_focusedCell4","superFocusEl","DOCUMENT_POSITION_PRECEDING","_super$onPaint","defaultFocus","onGridBodyFocusIn","focusEvent","lastTarget","targetCell","currentMouseDown","isMouseDown","_me$onCellNavigate","lastCell","findFocusables","_fromFocusCell","selectOnFocus","_selectActionCell","_isRevertingFocus","preventScroll","_GlobalEvents$current","_GlobalEvents$current2","onCellNavigate","focusable","_focusableFinder","setupTreeWalker","SHOW_ELEMENT","acceptNode","restoreActiveItem","_cellSelector","_cellSelector2","scroll","_me$onCellNavigate2","testCell","subGridRect","bodyRect","cellRect","moveTo","blurCell","clearFocus","fullClear","internalNextPrevCell","_arguments$","_arguments$2","skipSpecialRows","moveToHeader","navigateDown","_arguments$3","navigateUp","_arguments$4","Home","End","PageUp","PageDown","GridResponsive","responsiveLevels","small","medium","large","getClosestBiggerLevel","levels","useLevel","minDelta","biggestLevel","level","levelSize","levelWidth","responsiveLevel","oldLevel","levelConfig","validIdTypes","isDataLoadAction","GridSelection","_selectedCells","getDefaultGridSelection","clas","changeSelectionMode","$defaultGridSelection","Proxy","obj","old","updateSelectionMode","oldMode","changed","rowReorder","rowCheckboxSelection","checkboxOnly","includeChildren","includeParents","dragSelect","gripOnly","showGrip","_selectionListenersDetachers","_me$_selectionListene","_me$_selectionListene2","selectiondrag","deselectFilteredOutRecords","deselectAll","insert","_selectionAddedRowNumberColumn","shouldInitCheckboxSelection","initCheckboxSelection","checkboxIndex","checkboxSelectionColumnInsertIndex","afterSelectionModeChange","afterConfigure","_me$items","_me$items$","checkColumnClass","checkboxRenderer","toggleAll","afterSelectionChange","changeSelectedRecordCollection","collection","Collection","updateSelectedRecordCollection","onSelectedRecordCollectionChange","added","removed","selectedRecordCollection","_fromSelection","performSelection","deselectedCells","deselectedRecords","changeSelectedRecordCollectionSilent","_super$bindStore","unbindStore","oldStore","deselect","selectedRecord","selectionChange","prepareSelection","isCellSelectionMode","getSelectedCellsForRecords","concat","updateCheckboxHeader","rebuildIndices","onStoreRemove","_super$onStoreRemove","isCollapse","onStoreDataChange","_super$onStoreDataCha","preserveSelectionOnPageChange","preserveSelectionOnDatasetChange","storage","selectedCell","onStoreRemoveAll","_super$onStoreRemoveA","onCheckChange","select","shiftKeyDown","_lastSelectionChecked","internalSelectRange","allSelected","isPaged","onSelectionDrag","_selectionStartCell","onSelectionEnd","_lastSelectionDragRegion","_lastSelectionDragCell","_isSelectionDragging","enableScrollingCloseToEdges","_clearSelectionOnSelectionDrag","_me$scrollManager$_ac","_me$scrollManager$_ac2","leavingSubGrid","enteringSubGrid","leavingScrollable","enteringScrollable","goingForward","maxX","_activeScroll","horizontal","stopScroll","_lastSelectionDragChange","isRowNumberSelecting","refreshGridSelectionUI","_me$_selectionListene3","_me$_selectionListene4","lastChange","disableScrollingCloseToEdges","selectColumn","addToSelection","_shiftSelectRange","_shiftSelectColumn","fromColumnId","first","sc","cleanSelectionChange","cellSelectorOrId","_cellSelectorOrId","includeRow","recordCellOrId","selectRow","selectRows","spliceSelectedRecords","toRemove","toAdd","assignIf","toSelect","removeCurrentRecordsOnly","deselectRow","deselectRows","recordsOrIds","selectRange","fromId","toId","selection","selectCells","cellSelectors","selectedCellCSSSelector","selectCell","_this$selectCells","deselectCell","_this$deselectCells","deselectCells","toggleSelection","isRowNumber","selectOnKeyboardNavigation","selectCellRange","to","getSelection","isRowSelectionMode","dr","sr","dc","delayUntilMouseUp","detacher","blur","ev","selectors","cs","extendSelectionLeft","extendSelection","extendSelectionRight","extendSelectionUp","extendSelectionDown","dir","_isKeyboardRangeSelecting","fromCellSelector","toCellSelector","_toCellSelector$recor","deselectOnClick","ctrlKeyDown","isMouseLeft","isMouseRight","currentEvent","currentKeyDown","currentTarget","_isAddingToSelection","startCell","adding","delay","continueSelecting","finishSelection","mouseUpEvent","_mouseUpEvent$target","mouseUpSelector","cellSelectorsToDeselect","cellSelectorsToSelect","forceRecordSelection","isDragging","_record$allChildren","allChildren","_record$allChildren2","allChanges","lowestLevelParents","unique","toggleParentSelection","toDeselect","inToSelect","inToDeselect","childIsSelected","fromSelector","toSelector","selectRecords","getRange","fromCell","startRowIndex","endRowIndex","startColIndex","endColIndex","range","rIx","cIx","updateUI","rowMode","deselected","keepCells","keepRecords","triggerSelectionChangeEvent","updateGridSelectionRecords","updateGridSelectionCells","updateGridSelectionColumns","_column$element","_this$selectedRecordC","checkboxPosition","suspendStoreEvents","resumeStoreEvents","fillSubGridColumns","fillFromMaster","compareStateSortIndex","stateSortIndex","GridState","statefulEvents","updateStore","_super$updateStore","updateColumns","_super$updateColumns","updateRowManager","manager","_super$updateRowManag","triggerUpdate","finalizeInit","entry","storeScroll","eachSubGrid","_subGrid$collapsed","_beforeCollapseState","suspendRefresh","columnsChanged","needSort","columnState","columnGeneration","generation","subGridState","clearWidthCache","resumeRefresh","refreshFakeScroll","restoreScroll","scrollTop","querySelectorAll","onElementResize","immediatePromise","Promise","resolve","defaultScrollOptions","SubGridScroller","propagate","xDelta","yDelta","getDeltaTo","scrollBy","highlight","then","yPromise","yScroller","xPromise","cancelX","cancelY","all","scrollTo","toX","toY","syncPartners","elementBounds","intersect","sumWidths","t","SubGrid","insertRowsBefore","monitorResize","headerClass","footerClass","scrollerClass","hasCalculatedWidth","footer","virtualScrollerElement","splitterElement","headerSplitter","scrollerSplitter","footerSplitter","addRows","isFirefox","verticalScroller","addEventListener","deltaY","deltaX","isVerticalScroll","scrollEndDetacher","pointerEvents","scrollEnd","_me$fakeScroller","fakeScroller","splitterElements","barConfig","changeHeader","changeFooter","toggleSplitterCls","hideSplitter","$showingSplitter","showSplitter","rowElementConfig","cellTabIndex","changeVirtualScrollerElement","references","virtualScrollerWidth","changeSplitterElement","ns","version","viewBox","d","splitterButtons","splitterConfig","trim","changeHeaderSplitter","changeScrollerSplitter","changeFooterSplitter","updateHasFlex","mouseenter","mouseleave","_collapsed","refreshHeader","refreshFooter","_this$footer","deep","fixWidths","totalWidth","syncScrollingPartners","fixRowWidthsInSafariEdge","isSafari","newHeight","syncSplitterButtonPosition","scrollLeft","scrollX","syncFlexedSubCols","onHeightChange","syncParallelSplitters","prevGrid","getPreviousRegion","onSplitterMouseEnter","startSplitterButtonSyncing","onSplitterMouseLeave","stopSplitterButtonSyncing","splitterSyncScrollListener","headerHeight","viewRectangle","updateResizable","splitter","toggleClasses","resizeColumnsToFitContent","overflowingHorizontally","overflowingVertically","scrollWidth","syncOverflowState","syncPartnersOnFrame","createOnFrame","scrollend","onSubGridScrollEnd","forceScrollUpdate","hideOverlayScroller","onSubGridScroll","showOverlayScroller","_scrolling","scrollColumnIntoView","columnHeaderElement","onAddRow","frag","createDocumentFragment","rowElements","fromCache","clearRows","emptyCache","setStartBefore","setEndAfter","deleteContents","addNewRowElement","toggleTransitionClasses","doRemove","nextRegion","getNextRegion","resolveSplitter","splitterOwner","expandedRegions","widthChanged","afterinternalresize","nextRegionWidth","_splitterOwner$startS","afterToggleSubGrid","_width","GridSubGrids","changeSubGridConfigs","configs","usedRegions","normal","GridBase","subGridConfigs","createSubGrid","subGridColumns","makeChained","subGridConfig","isFirstRegion","onChildAdd","isSubGrid","footerContainer","insertAt","emptyTextEl","onChildRemove","callEachSubGrid","fnName","params","partialReturnValue","getLastRegions","emptyString","locale","localeName","localeDesc","localeCode","columnsMenu","hideColumnShort","newColumns","lessThan","moreThan","enableFilterBar","disableFilterBar","groupAscending","groupDescending","groupAscendingShort","groupDescendingShort","stopGrouping","stopGroupingShort","moveBefore","moveAfter","collapseColumn","expandColumn","ColumnRename","rename","MergeCells","mergeCells","menuTooltip","Search","searchForValue","sortAscending","sortDescending","addSortAscending","addSortDescending","toggleSortAscending","toggleSortDescending","sortAscendingShort","sortDescendingShort","removeSorterShort","addSortAscendingShort","addSortDescendingShort","columnLabel","cellLabel","toggleRowSelect","RatingColumn","_column$location","loadFailedMessage","syncFailedMessage","unspecifiedFailure","networkFailure","parseFailure","serverResponse","noRows","moveColumnLeft","moveColumnRight","moveColumnTo","RowCopyPaste","copyRecord","cutRecord","pasteRecord","CellCopyPaste","copy","cut","paste","PdfExport","ExportDialog","labelWidth","exportSettings","export","exporterType","fileFormat","alignRows","paperFormat","orientation","repeatHeader","ExportRowsCombo","visible","ExportOrientationCombo","portrait","landscape","SinglePageExporter","singlepage","MultiPageExporter","multipage","exportingPage","currentPage","totalPages","MultiPageVerticalExporter","multipagevertical","RowExpander","loading","LocaleHelper","publishLocale","resolvedPromise","storeListenerName","inline","datasetReplaceActions","pageLoad","Panel","Pluggable","State","LoadMaskable","delayable","onGridVerticalScroll","bufferedAfterColumnsResized","bufferedElementResize","enableSticky","enableTextSelection","fillLastColumn","showDirty","hideFooters","contentElMutationObserver","trapFocus","ariaElement","mergeCls","emptyText","defaultRowHeight","fullRowRefresh","preserveScrollOnDatasetChange","preserveFocusOnDatasetChange","destroyStore","maskDefaults","cover","columnLines","animateRemovingRows","disableGridRowModelWarning","testPerformance","rowScrollMode","overflowY","contextMenuTriggerEvent","testConfig","_selectedRecords","_verticalScrollHeight","virtualScrollHeight","_scrollTop","finishConfigure","scrollInitialized","LocaleManager","theme","bufferedFixElementHeights","buffer","setGridClassList","onSubGridExpand","onBeforeLocaleChange","_suspendRenderContentsOnColumnsChanged","onLocaleChange","isLoading","onStoreBeforeRequest","changeScrollManager","oldScrollManager","_me$scrollManager","_feature$destroy","compose","class","_cellCls","bodyConfig","hasHeader","updateHideFooters","_this$footerContainer","changeColumns","currentStore","removeAll","isStore","columnsToDestroy","_column$destroy","_me$bodyElement","onColumnsChanged","onColumnsResized","touchConfig","addedColumns","isMove","isSingleFieldChange","repaintOnResize","refreshColumn","insertIndex","cellEls","lastColumnResized","_column$flex","flexedSubCols","query","changeRowManager","oldRowManager","_isRowMeasured","measureRowHeight","requestScrollChange","suffix","idChange","beforeRequest","afterRequest","exception","commit","changeStore","getStore","_this$initialConfig$f","initialConfig","GridRowModel","AjaxStore","_me$_rowManager","onStoreUpdateRecord","forceFullRefresh","isSafe","refreshFromRowOnStoreAdd","onMaskAutoClose","mask","onStoreAdd","oldIndex","isChild","isExpandAll","hasExpandedOldParent","parentId","ancestorsExpanded","parentRow","bottomIndex","dataStart","dataEnd","atEnd","onStoreException","response","exceptionType","_response$parsedJson","message","parsedJson","applyMaskError","url","syncInfo","_syncInfo$removed","isGroupFieldChange","grouper","applyLoadMask","onStoreAfterRequest","loadMask","masked","needsFullRefreshOnStoreRemove","convertEmptyParentToLeaf","isCollapseAll","rowsToRemove","isAnimating","onTransitionEnd","afterRemove","oldTopIndex","onFlatStoreMove","onStoreReplace","relayStoreDataChange","project","onStoreCommit","_store","_data","preceding","moveRight","optionalL","targetSubGrid","separator","_headerHeight","footerHeight","_footerHeight","isTreeGrouped","_this$features$treeGr","treeGroup","getRecordFromElement","updateAutoHeight","assertBoolean","_columnLines","keyMapElement","fixSizes","colHeaders","onRowManagerChangeTotalHeight","refreshTotalHeight","newMaxY","isCritical","virtualScrollHeightDirty","fixElementHeights","heightInPx","startMonitoring","stopMonitoring","onRowManagerRequestScrollChange","suspendResizeMonitor","afterScroll","onGridVerticalScrollEnd","blockPosition","scrollPromise","recordRect","scrollerRect","virtualBlock","innerOptions","_me$scrollRowIntoView","recursive","scrollCellIntoView","scrollToBottom","scrollToTop","storedScrollState","_subGrid$fakeScroller","updateX","updateY","$measureCellElements","position","visibility","contain","targetEl","body","getRootElement","getElementById","adopt","$removeAfterMeasuring","styles","styleHeight","multiplier","trunc","borderTop","parseFloat","borderBottom","_rowHeightFromStyle","onThemeChange","whenVisible","hasVerticalOverflow","hadHorizontalOverflow","hasHorizontalOverflow","horizontalOverflowChanged","needsPadding","contentHeight","onContentChange","paintListener","triggerPaint","keepScroll","scrollState","renderFooter","refreshContext","onPaintOverride","scrollPad","scrollBarPadElement","bodyOffsetHeight","fonts","status","ready","requireSize","editorConfig","removeEvent","syncMaskCover","rectangleOf","marginTop","maskBody","ret","Mask","loadMaskDefaults","unmaskBody","updateEmptyText","_this$emptyTextEl","_this$firstItem","firstItem","isCommitting","_column$updateReadOnl","getInlineData","storeState","originalModelClass","setVersion"],"mappings":"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AAMC,UAAU,GAAIC,KAAK,IAAO,OAAOA,KAAK,KAAK,QAAQ,KAAKA,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEC,QAAQ,CAAC,IAAI,CAAC,CAAC;AACpe,MAAMC,MAAM,SAASC,KAAK,CAACC,KAAK,CAACC,MAAM,EAAEC,WAAW,CAAC,CAAC;EACjE,WAAWC,KAAKA,GAAG;IACf,OAAO,QAAQ;;;AAGvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,WAAWC,IAAIA,GAAG;IACd,OAAO,QAAQ;;;;AAIvB;AACA;AACA;AACA;AACA;EACI,WAAWC,MAAMA,GAAG;IAChB,OAAO;;IAEH,MAAM;;AAElB;AACA;AACA;AACA;IACY,MAAM;;AAElB;AACA;AACA;AACA;AACA;IACY,OAAO;;;;AAInB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,UAAU;;;AAGtB;AACA;AACA;AACA;IACY,OAAO;;AAEnB;AACA;AACA;AACA;AACA;AACA;IACY,MAAM;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,WAAW;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,YAAY;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY;MAAEC,IAAI,EAAG,SAAS;MAAEC,YAAY,EAAG;KAAS;;;;AAIxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY;MAAED,IAAI,EAAG,QAAQ;MAAEC,YAAY,EAAG;KAAI;;AAElD;AACA;AACA;AACA;AACA;IACY,YAAY;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,kBAAkB;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY;MAAED,IAAI,EAAG,gBAAgB;MAAEC,YAAY,EAAG;KAAM;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY;MAAED,IAAI,EAAG,eAAe;MAAEC,YAAY,EAAG;KAAS;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY;MACID,IAAI,EAAW,UAAU;MACzBC,YAAY,EAAG,IAAI;;MAEnBC,OAAOA,CAACZ,KAAK,EAAE7D,MAAM,EAAE;QACnB,IAAI,CAAC6D,KAAK,EAAE;UACR,OAAO,KAAK;;QAEhB,IAAIA,KAAK,KAAK,IAAI,EAAE;UAChB,OAAO,IAAI;;QAEf,MAAMa,MAAM,GAAG,EAAE;QACjB,IAAI,OAAOb,KAAK,KAAK,UAAU,EAAE;UAC7Ba,MAAM,CAACC,cAAc,GAAGd,KAAK;;UAE7Ba,MAAM,CAACE,MAAM,GAAGf,KAAK,CAACgB,IAAI,CAAC7E,MAAM,CAAC;SACrC,MACI,IAAI,OAAO6D,KAAK,KAAK,QAAQ,EAAE;UAChCiB,MAAM,CAACC,MAAM,CAACL,MAAM,EAAEb,KAAK,CAAC;UAC5B,IAAIa,MAAM,CAACM,EAAE,EAAE;YACXN,MAAM,CAACE,MAAM,GAAGF,MAAM,CAACM,EAAE;YACzB,OAAON,MAAM,CAACM,EAAE;;;QAGxB,OAAON,MAAM;;KAEpB;;AAEb;AACA;AACA;AACA;AACA;IACY;MAAEH,IAAI,EAAG,YAAY;MAAEC,YAAY,EAAG;KAAM;;AAExD;AACA;AACA;AACA;AACA;IACY;MAAED,IAAI,EAAG,aAAa;MAAEC,YAAY,EAAG;KAAO;;AAE1D;AACA;AACA;AACA;AACA;IACY;MAAED,IAAI,EAAG,WAAW;MAAEC,YAAY,EAAG;KAAO;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY;MAAED,IAAI,EAAG;KAAgB;;AAErnBC,OAAOA,CAACZ,KAAK,EAAE;QACX,IAAI,CAACA,KAAK,EAAE;UACR,OAAO,KAAK;;QAEhB,IAAIA,KAAK,KAAK,IAAI,EAAE;UAChB,OAAO,IAAI;;QAEf,MAAMoB,MAAM,GAAG;UACXC,WAAW,EAAG;SACjB;QACD,IAAI,OAAOrB,KAAK,KAAK,UAAU,EAAE;UAC7BoB,MAAM,CAACE,QAAQ,GAAGtB,KAAK;SAC1B,MACI,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;UAChCiB,MAAM,CAACC,MAAM,CAACE,MAAM,EAAEpB,KAAK,CAAC;;QAEhC,OAAOoB,MAAM;;KAEpB;;AAEb;AACA;AACA;AACA;AACA;IACY;MAAEV,IAAI,EAAG;KAAU;;AAE/B;AACA;AACA;AACA;AACA;IACY;MAAEA,IAAI,EAAG,UAAU;MAAEC,YAAY,EAAG;KAAM;;AAEtD;AACA;AACA;AACA;IACY;MAAED,IAAI,EAAG,WAAW;MAAEC,YAAY,EAAG;KAAM;;AAEvD;AACA;AACA;AACA;IACY;MAAED,IAAI,EAAG,WAAW;MAAEC,YAAY,EAAG;KAAM;;AAEvD;AACA;AACA;AACA;AACA;IACY;MAAED,IAAI,EAAG,WAAW;MAAEC,YAAY,EAAG;KAAM;;;;AAIvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,eAAe;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;IACY,gBAAgB;;AAE5B;AACA;AACA;AACA;AACA;IACY,SAAS;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,iBAAiB;;AAE7B;AACA;AACA;AACA;IACY,SAAS;;AAErB;AACA;AACA;AACA;IACY,KAAK;;AAEjB;AACA;AACA;AACA;AACA;IACY,MAAM;;;;AAIlB;AACA;AACA;AACA;IACY,OAAO;;AAEnB;AACA;AACA;AACA;AACA;IACY;MAAED,IAAI,EAAG,UAAU;MAAEC,YAAY,EAAG;KAAI;;AAEpD;AACA;AACA;AACA;IACY,UAAU;;AAEtB;AACA;AACA;AACA;IACY;MAAED,IAAI,EAAG,QAAQ;MAAEC,YAAY,EAAG;KAAO;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;IACY;MAAED,IAAI,EAAG;KAAU;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY;MAAEA,IAAI,EAAG;KAAU;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY;MAAEA,IAAI,EAAG,YAAY;MAAEF,IAAI,EAAG;KAAW;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY;MAAEE,IAAI,EAAG,WAAW;MAAEF,IAAI,EAAG,SAAS;MAAEG,YAAY,EAAG;KAAM;;AAEzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,gBAAgB;;;;AAI5B;AACA;AACA;AACA;AACA;IACY;MAAED,IAAI,EAAG,kBAAkB;MAAEC,YAAY,EAAG;KAAM;;AAE9D;AACA;AACA;AACA;AACA;IACY;MAAED,IAAI,EAAG,yBAAyB;MAAEC,YAAY,EAAG;KAAM;;AAErE;AACA;AACA;AACA;AACA;IACY;MAAED,IAAI,EAAG,uBAAuB;MAAEC,YAAY,EAAG;KAAM;;AAEnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,iBAAiB;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,eAAe;;;;AAI3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,KAAK;;AAEjB;AACA;AACA;AACA;AACA;IACY,WAAW;;AAEvB;AACA;AACA;AACA;AACA;AACA;IACY,iBAAiB;;;;AAI7B;AACA;AACA;AACA;IACY,kBAAkB;;AAE9B;AACA;AACA;AACA;IACY,MAAM;;AAElB;AACA;AACA;AACA;IACY,aAAa;;AAEzB;AACA;AACA;AACA;IACY,MAAM;;AAElB;AACA;AACA;AACA;AACA;IACY,YAAY;;AAExB;AACA;AACA;AACA;AACA;AACA;IACY;MAAED,IAAI,EAAG,YAAY;MAAEC,YAAY,EAAG;KAAM;;AAExD;AACA;AACA;AACA;AACA;AACA;IACY;MAAED,IAAI,EAAG,sBAAsB;MAAEC,YAAY,EAAG;KAAM;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY;MAAED,IAAI,EAAG,cAAc;MAAEC,YAAY,EAAG;KAAO;;AAE3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY;MAAED,IAAI,EAAG,iBAAiB;MAAEC,YAAY,EAAG;KAAO;;;AAG9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY;MAAED,IAAI,EAAG;KAAiB;;AAEtC;AACA;AACA;AACA;AACA;IACY;MAAEA,IAAI,EAAG,eAAe;MAAE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,kBAAkB,CAACnV,MAAM,EAAE,IAAI,CAAC;AAC5CoR,WAAW,CAACxR,MAAM,GAAG,aAAa;;ACzalC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMkW,YAAY,SAAS9V,MAAM,CAAC;;;;AAYjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,WAAWsJ,QAAQA,GAAG;IAClB,OAAO;MACHyM,UAAU,EAAQ,KAAK;MACvB7O,QAAQ,EAAU,KAAK;MACvB3C,MAAM,EAAY,KAAK;MACvByR,UAAU,EAAQ,KAAK;MACvBhJ,OAAO,EAAW,KAAK;MACvBiJ,eAAe,EAAG;KACrB;;;;EAIL3U,SAASA,CAACjH,MAAM,EAAEP,KAAK,EAAE;IACrB,MAAMS,EAAE,GAAG,IAAI;IACfA,EAAE,CAAC2b,SAAS,GAAG,EAAE;IACjB,KAAK,CAAC5U,SAAS,CAAC,GAAGY,SAAS,CAAC;IAC7B3H,EAAE,CAAC4b,gBAAgB,GAAG5b,EAAE,CAAC+V,QAAQ;IACjC/V,EAAE,CAAC+V,QAAQ,GAAG/V,EAAE,CAACgW,gBAAgB;;EAErCpM,SAASA,GAAG;;IAER,KAAK,MAAMU,MAAM,IAAI9D,MAAM,CAACmE,MAAM,CAAC,IAAI,CAACgR,SAAS,CAAC,EAAE;MAChDrR,MAAM,CAACL,OAAO,IAAIK,MAAM,CAACL,OAAO,EAAE;;IAEtC,KAAK,CAACL,SAAS,EAAE;;;EAGrBiS,cAAcA,CAACC,QAAQ,EAA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AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAM2E,KAAK,SAASlnB,cAAc,CAAC;EAC9C,WAAWpe,KAAKA,GAAG;IACf,OAAO,OAAO;;EAElB,WAAW60B,YAAYA,GAAG;IACtB,OAAO;;AAEf;AACA;AACA;AACA;MACYn5B,KAAK,EAAG,IAAI;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACY6pC,WAAW,EAAG,IAAI;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYt1B,QAAQ,EAAG,IAAI;;AAE3B;AACA;AACA;MACYgP,MAAM,EAAG;QACL,GAAG,EAAG;;KAEb;;;EAGLhe,SAASA,CAAClI,IAAI,EAAEiB,MAAM,EAAE;IACpB,MAAME,EAAE,GAAG,IAAI;IACf,IAAInB,IAAI,CAAC4gB,QAAQ,CAACxI,IAAI,EAAE;MACpB;;;IAGJjX,EAAE,CAACsrC,sBAAsB,CAACzsC,IAAI,CAAC4gB,QAAQ,CAAC8rB,YAAY,CAAC;;IAErDzrC,MAAM,GAAGE,EAAE,CAACwrC,aAAa,CAAC1rC,MAAM,CAAC;IACjCE,EAAE,CAACnB,IA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AAM,EAAE,WAAW,CAAC,CAAC;AAC9FtpB,kBAAkB,CAACC,eAAe,CAACqpB,KAAK,EAAE,KAAK,EAAE,CAAC,UAAU,CAAC,CAAC;;AC/te,MAAMgF,UAAU,SAASrgB,eAAe,CAAC;;EAEpD,WAAWjqB,KAAKA,GAAG;IACf,OAAO,YAAY;;EAEvB,WAAW60B,YAAYA,GAAG;IACtB,OAAO;MACH50B,IAAI,EAAG,QAAQ;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACY4hB,KAAK,EAAG,IAAI;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;MACY0oB,WAAW,EAAG;;AAE1B;AACA;AACA;KACS;;;EAEL,WAAWt5B,aAAaA,GAAG;IACvB,OAAO;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYiZ,YAAY,EAAG;KAClB;;EAEL,WAAW5K,YAAYA,GAAG;IACtB,MAAMtlB,MAAM,GAAG,KAAK,CAACslB,YAAY;IACjCtlB,MAAM,CAACulB,KAAK,CAACvU,IAAI,CAAC,oBAAoB,CAAC;IACvC,OAAOhR,MAAM;;;;;AAKrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EAGIuwB,cAAcA,CAACH,WAAW,EAAE;IACxB,MAAM;MAAExuB;KAAQ,GAAGwuB,WAAW;IAC9B,OAAOxuB,MAAM,IAAIA,MAAM,CAAC4uC,uBAAuB,KAAK,KAAK,IAAI5uC,MAAM,KAAK,IAAI,CAAC6qB,MAAM,CAACgkB,cAAc;;EAEtGhgB,gBAAgBA,CAACnX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AG,CAAC,CAAC,GAAG04B,eAAe;;;IAGzI,IAAI,CAAC7tB,MAAM,CAACC,MAAM,EAAE;MAChB,OAAOD,MAAM;;;EAGrBokC,oBAAoBA,CAACnvC,MAAM,EAAE;IACzB,MAAM;MAAEuM,WAAW;MAAExB;KAAQ,GAAG/K,MAAM;IACtC,IAAIuM,WAAW,EAAE;MACb,OAAOA,WAAW;;;IAGtB,IAAI,CAACxB,MAAM,CAACC,MAAM,EAAE;MAChB,OAAOD,MAAM;;;AAGzB;AACA2jC,UAAU,CAACpuB,YAAY,GAAG,EAAE;AAC5BouB,UAAU,CAAC/qC,MAAM,GAAG,YAAY;AAAEyc,kBAAkB,CAACC,eAAe,CAACquB,UAAU,EAAE,IAAI,CAAC;;ACrYtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMc,IAAI,SAAShtB,cAAc,CAAC;;EAE7C,WAAWpe,KAAKA,GAAG;IACf,OAAO,MAAM;;EAEjB,WAAW60B,YAAYA,GAAG;IACtB,OAAO;;AAEf;AACA;AACA;AACA;MACYwW,SAAS,EAAG,IAAI;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACY7S,iBAAiB,EAAG;KACvB;;EAEL,WAAW2I,UAAUA,GAAG;IACpB,OAAO;M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C,cAAc,EACd0F,cAAc,EACdkB,aAAa,EACbuO,SAAS,EACTiL,YAAY,EACZ2H,YAAY,CACf,CAAC;;EAEE,WAAWvzE,KAAKA,GAAG;IACf,OAAO,UAAU;;;EAGrB,WAAWC,IAAIA,GAAG;IACd,OAAO,UAAU;;EAErB,WAAWuzE,SAASA,GAAG;IACnB,OAAO;MACHC,oBAAoB,EAAG;QACnBxzE,IAAI,EAAG;OACV;MACDyzE,2BAA2B,EAAG,GAAG;MACjCC,qBAAqB,EAAG;KAC3B;;EAEL,WAAW9+C,YAAYA,GAAG;IACtB,OAAO;;;AAGf;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;MACYruB,UAAU,EAAG,IAAI;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYotE,YAAY,EAAG,IAAI;;AAE/B;AACA;AACA;AACA;AACA;AACA;MACYC,mBAAmB,EAAG,IAAI;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;MACYC,cAAc,EAAG,IAAI;;AAEjC;AACA;AACA;AACA;;MAEYrlC,YAAY,EAAG,WAAW;;;AAEtC;AACA;AACA;AACA;AACA;AACA;MACYslC,SAAS,EAAG,IAAI;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACY7H,cAAc,EAAG;QACbF,MAAM,EAAG;UAAE7pE,IAAI,EAAG;;OACrB;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACY1I,KAAK,EAAG;QACJgG,KAAK,EAAG,EAAE;QACVguC,OAAO,EAAG;OACb;MACDtxC,UAAU,EAAG;QACTsD,KAAK,EAAG,EAAE;QACVguC,OAAO,EAAG,CAAC,SAAS,EAAE,MAAM;OAC/B;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYpc,aAAa,EAAG;QACZ5xB,KAAK,EAAG,EAAE;QACVguC,OAAO,EAAG,CAAC,SAAS,EAAE,MAAM;OAC/B;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYtzC,OAAO,EAAG;QACNsF,KAAK,EAAG,EAAE;QACVguC,OAAO,EAAG;OACb;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACY7rB,SAAS,EAAG,MAAM;MAClBoyD,WAAW,EAAG,IAAI;MAClBC,yBAAyB,EAAG,KAAK;MACjCC,SAAS,EAAmB,KAAK;MACjCC,WAAW,EAAG,aAAa;MAC3B9N,YAAY,EAAG,CAAC,CAAC;MACjB/tB,MAAM,EAAG;QACL74C,KAAK,EAAK,YAAY;QACtBguC,OAAO,EAAG;UACNvmC,KAAK,EAAG,IAAI,CAACktE;;OAEpB;MACD1uE,OAAO,EAAG;QACNjG,KAAK,EAAK,aAAa;QACvBguC,OAAO,EAAG;UACNvmC,KAAK,EAAG,IAAI,CAACktE;;OAEpB;;AAEb;AACA;AACA;AACA;AACA;MACYC,SAAS,EAAU,WAAW;MAC9BzoC,gBAAgB,EAAG;KACtB;;;EAGL,WAAW36B,aAAaA,GAAG;IACvB,OAAO;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYhT,SAAS,EAAG,IAAI;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACY8zC,cAAc,EAAG,IAAI;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;MAGYuiC,gBAAgB,EAAG,EAAE;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYC,cAAc,EAAG,IAAI;;AAEjC;AACA;AACA;AACA;AACA;MACYn5E,WAAW,EAAG,IAAI;;AAE9B;AACA;AACA;AACA;AACA;AACA;MACYo5E,6BAA6B,EAAG,IAAI;;AAEhD;AACA;AACA;AACA;AACA;MACYC,4BAA4B,EAAG,IAAI;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYvzE,IAAI,EAAG,IAAI;;AAEvB;AACA;AACA;AACA;AACA;MACYkT,aAAa,EAAG,QAAQ;;AAEpC;AACA;AACA;AACA;AACA;MACYsgE,YAAY,EAAG,IAAI;;AAE/B;AACA;AACA;AACA;MACYC,YAAY,EAAG;QACXC,KAAK,EAAI,MAAM;QACfv6E,MAAM,EAAG;OACZ;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYw6E,WAAW,EAAG,IAAI;;AAE9B;AACA;AACA;AACA;AACA;MACYpnE,yBAAyB,EAAG,IAAI;;AAE5C;AACA;AACA;AACA;AACA;MACYqnE,mBAAmB,EAAG,IAAI;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;MACYC,0BAA0B,EAAG,IAAI;MACjCzQ,WAAW,EAAG5jB,MAAM;MACpB6jB,WAAW,EAAGtuB,MAAM;MACpB++B,eAAe,EAAG,KAAK;MACvBC,aAAa,EAAK,MAAM;;;AAEpC;AACA;AACA;AACA;AACA;MACY5Q,aAAa,EAAG,IAAI;;AAEhC;AACA;AACA;AACA;AACA;MACY1qD,QAAQ,EAAG,IAAI;;AAE3B;AACA;AACA;AACA;AACA;MACY5b,UAAU,EAAG;;;QAGTm3E,SAAS,EAAG;OACf;;AAEb;AACA;AACA;AACA;AACA;MACY1Q,aAAa,EAAGllB,YAAY;MAC5BxC,gBAAgB,EAAG,CAAC;;AAEhC;AACA;AACA;AACA;AACA;MACYnL,kBAAkB,EAAG,GAAG;;AAEpC;AACA;AACA;AACA;AACA;AACA;MACYwjC,uBAAuB,EAAG,aAAa;MACvC3zE,qBAAqB,EAAG,CAAC,WAAW,CAAC;MACrCyZ,gBAAgB,EAAG,EAAE;MACrBm6D,UAAU,EAAG;QACTzjC,kBAAkB,EAAG;;KAE5B;;EAEL,WAAWxQ,UAAUA,GAAG;IACpB,OAAO;MACHk0C,gBAAgB,EAAQ,EAAE;MAC1BC,qBAAqB,EAAG,CAAC;MACzBC,mBAAmB,EAAK,CAAC;MACzBC,UAAU,EAAc;KAC3B;;;;;;;;;;;;;;EAcLC,eAAeA,CAACz7E,MAAM,EAAE;IACpB,MACIE,EAAE,GAAe,IAAI;MACrB;QAAE4lD;OAAY,GAAG5lD,EAAE;;IAEvBA,EAAE,CAAC4lD,UAAU,GAAG,MAAM,CAAC5lD,EAAE,CAACw7E,iBAAiB,IAAI51B,UAAU,CAAC17C,IAAI,CAAClK,EAAE,CAAC;IAClE,KAAK,CAACu7E,eAAe,CAACz7E,MAAM,CAAC;;;;;IAK7B27E,sBAAa,CAACrkE,GAAG,CAAC;MACd87D,MAAM,EAAI,sBAAsB;MAChCt7D,IAAI,EAAM,CAAC;MACXL,OAAO,EAAGvX;KACb,CAAC;IACFy7E,sBAAa,CAACrkE,GAAG,CAAC;MACd87D,MAAM,EAAI,gBAAgB;MAC1Bt7D,IAAI,EAAM,CAAC,CAAC;MACZL,OAAO,EAAGvX;KACb,CAAC;IACFkpB,YAAY,CAAC9R,GAAG,CAAC;MACbskE,KAAK,EAAK,eAAe;MACzBnkE,OAAO,EAAGvX;KACb,CAAC;IACFA,EAAE,CAACoX,GAAG,CAAC;MACHE,aAAa,EAAG,iBAAiB;MACjCM,IAAI,EAAY,CAAC,CAAC;MAClBL,OAAO,EAASvX;KACnB,CAAC;;IAEFA,EAAE,CAAC27E,yBAAyB,GAAG37E,EAAE,CAAC47E,MAAM,CAAC,mBAAmB,EAAE,GAAG,EAAE57E,EAAE,CAAC;;IAEtEA,EAAE,CAAC67E,gBAAgB,CAAC77E,EAAE,CAACmE,OAAO,CAAC0H,SAAS,CAAC;;EAE7CiwE,eAAeA,GAAG;;;IAGd,IAAI,CAACthD,cAAc,EAAE;;EAEzBuhD,oBAAoBA,GAAG;IACnB,IAAI,CAACC,sCAAsC,GAAG,IAAI;;EAEtDC,cAAcA,GAAG;IACb,IAAI,CAACD,sCAAsC,GAAG,KAAK;IACnD,IAAI,IAAI,CAACpqC,SAAS,EAAE;MAChB,IAAI,CAACpX,cAAc,EAAE;;;EAG7B2sC,YAAYA,GAAG;IACX,KAAK,CAACA,YAAY,EAAE;IACpB,IAAI,IAAI,CAAC5nE,KAAK,CAAC28E,SAAS,EAAE;;MAEtB,IAAI,CAACC,oBAAoB,EAAE;;;EAGnCC,mBAAmBA,CAACjlD,aAAa,EAAEklD,gBAAgB,EAAE;IACjDA,gBAAgB,aAAhBA,gBAAgB,uBAAhBA,gBAAgB,CAAEpyE,OAAO,EAAE;IAC3B,IAAIktB,aAAa,EAAE;MACf,OAAOY,aAAa,CAACC,GAAG,CAAC;QACrB7zB,OAAO,EAAG,IAAI,CAACA,OAAO;QACtBsG,KAAK,EAAK;OACb,EAAE0sB,aAAa,CAAC;KACpB,MACI;MACD,OAAO,IAAI;;;;AAIvB;AACA;AACA;EACIvtB,SAASA,GAAG;IAAA,IAAA0yE,iBAAA;IACR,MAAMt8E,EAAE,GAAG,IAAI;IACfA,EAAE,CAAC8gB,eAAe,CAACg4D,iBAAiB,CAAC;IACrC,CAAAwD,iBAAA,GAAAt8E,EAAE,CAACm3B,aAAa,cAAAmlD,iBAAA,uBAAhBA,iBAAA,CAAkBryE,OAAO,EAAE;IAC3B,KAAK,MAAMslD,OAAO,IAAI/oD,MAAM,CAACmE,MAAM,CAAC3K,EAAE,CAACyf,QAAQ,CAAC,EAAE;MAAA,IAAA88D,gBAAA;MAC9C,CAAAA,gBAAA,GAAAhtB,OAAO,CAACtlD,OAAO,cAAAsyE,gBAAA,uBAAfA,gBAAA,CAAAryE,IAAA,CAAAqlD,OAAO,CAAY;;IAEvBvvD,EAAE,CAAC8U,YAAY,GAAG,IAAI;IACtB9U,EAAE,CAACC,OAAO,CAACgK,OAAO,EAAE;IACpB,KAAK,CAACL,SAAS,EAAE;;;AAGzB;AACA;AACA;AACA;EACIiyE,gBAAgBA,CAAChwE,SAAS,EAAE;IACxB,MAAM7L,EAAE,GAAG,IAAI;IACfwG,MAAM,CAACmE,MAAM,CAAC3K,EAAE,CAACyf,QAAQ,CAAC,CAAChQ,OAAO,CAAC8/C,OAAO,IAAI;MAC1C,IAAIA,OAAO,CAAC5vC,QAAQ,EAAE;QAClB;;MAEJ,IAAIqC,YAAY;MAChB,IAAIxb,MAAM,CAAC6b,SAAS,CAACC,cAAc,CAACpY,IAAI,CAACqlD,OAAO,CAAChxD,WAAW,EAAE,cAAc,CAAC,EAAE;QAC3EyjB,YAAY,GAAGutC,OAAO,CAAChxD,WAAW,CAACyjB,YAAY;OAClD,MACI;QACDA,YAAY,GAAI,KAAKutC,OAAO,YAAYjc,IAAI,GAAGic,OAAO,CAACvxC,MAAM,GAAGuxC,OAAO,CAAChxD,WAAW,CAAC0H,IAAM,EAAC;;MAE/F,IAAI+b,YAAY,EAAE;QACdnW,SAAS,CAACwS,GAAG,CAAC2D,YAAY,CAAC/W,WAAW,EAAE,CAAC;;KAEhD,CAAC;;;;;;AAMV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;EAGIuxE,OAAOA,GAAG;IACN,MAAM;MAAElwE,UAAU;MAAEotE,YAAY;MAAEC,mBAAmB;MAAEC,cAAc;MAAErlC,YAAY;MAAEslC;KAAW,GAAG,IAAI;IACvG,OAAO;MACH4C,KAAK,EAAG;QACJ,CAAE,UAASloC,YAAa,EAAC,GAAI,CAAC;QAC9B,iBAAiB,EAAYmlC,YAAY;QACzC,wBAAwB,EAAK,CAACC,mBAAmB;QACjD,cAAc,EAAertE,UAAU;QACvC,oBAAoB,EAASstE,cAAc;QAC3C,cAAc,EAAeC;;KAEpC;;EAEL,IAAIruE,OAAOA,GAAG;IACV,MAAM;MAAEkxE;KAAU,GAAG,IAAI;;IAEzB,OAAOA,QAAQ,CAACn3E,KAAK,IAAIm3E,QAAQ;;EAErC,IAAIC,UAAUA,GAAG;IACb,MAAM;MAAErwE,UAAU;MAAEwtE,WAAW;MAAE54E;KAAa,GAAG,IAAI;IACrD,OAAO;MACH0lD,SAAS,EAAG,aAAa;MACzBrlB,SAAS,EAAG;QACR,cAAc,EAAQj1B,UAAU;QAChC,mBAAmB,EAAG;OACzB;;MAED,CAAC,IAAI,CAACswE,SAAS,GAAG,gBAAgB,GAAG,EAAE,GAAK,GAAE,IAAI,CAACn9E,EAAG,cAAa;MACnEyI,QAAQ,EAAG;QACP0vB,eAAe,EAAG;UACdjD,GAAG,EAAe,QAAQ;UAC1BuyB,IAAI,EAAc,KAAK;UACvB,eAAe,EAAG,CAAC;UACnB3lB,SAAS,EAAS;YACd,yBAAyB,EAAG,CAAC;YAC7B,UAAU,EAAkBrgC;;SAEnC;QACDwuB,aAAa,EAAG;UACZ6R,SAAS,EAAG,uBAAuB;UACnCswB,QAAQ,EAAI,CAAC,CAAC;;;UAGd3K,IAAI,EAAO,cAAc;UACzBh/C,QAAQ,EAAG;YACP8iE,gBAAgB,EAAG;cACfzpC,SAAS,EAAG;;;SAGvB;QACD0kB,gBAAgB,EAAG;UACf1kB,SAAS,EAAG,oCAAoC;UAChD9tB,KAAK,EAAOmgB,aAAa,CAACm3C,SAAS,IAAIhmE,SAAS,CAAC8mD,cAAc,GAAG;YAC9DlW,MAAM,EAAI,GAAE5wC,SAAS,CAAC8mD,cAAe;WACxC,GAAG97C;SACP;QACDyiE,eAAe,EAAG;UACd79C,GAAG,EAAS,QAAQ;UACpB4M,SAAS,EAAG;YACR,yBAAyB,EAAG,CAAC;YAC7B,UAAU,EAAkBu4C;;;;KAI3C;;EAEL,IAAItrE,cAAcA,GAAG;IACjB,OAAO,IAAI,CAACw8D,gBAAgB;;EAEhC,IAAI5uB,eAAeA,GAAG;IAClB,OAAO,IAAI,CAAC1sB,aAAa;;EAE7BmtD,iBAAiBA,CAAC1tE,IAAI,EAAE;IAAA,IAAA2tE,qBAAA;IACpB,CAAAA,qBAAA,OAAI,CAACtK,eAAe,cAAAsK,qBAAA,uBAApBA,qBAAA,CAAsBjxE,SAAS,CAACsD,IAAI,GAAG,KAAK,GAAG,QAAQ,CAAC,CAAC,UAAU,CAAC;;;;EAIxE4tE,aAAaA,CAAC98E,OAAO,EAAE+8E,YAAY,EAAE;IACjC,MAAMh9E,EAAE,GAAG,IAAI;;;IAGf,IAAI,CAACC,OAAO,IAAI+8E,YAAY,EAAE;;MAE1B,IAAIh9E,EAAE,CAACqqC,YAAY,EAAE;QACjB2yC,YAAY,CAACvyE,KAAK,KAAKzK,EAAE,IAAIg9E,YAAY,CAAC/yE,OAAO,EAAE;;;WAGlD;QACD+yE,YAAY,CAACC,SAAS,EAAE;;MAE5B,OAAOD,YAAY;;;IAGvB,IAAI/8E,OAAO,CAACi9E,OAAO,EAAE;MACjB,CAAAF,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEvyE,KAAK,MAAKzK,EAAE,IAAIg9E,YAAY,CAAC/yE,OAAO,EAAE;MACpDhK,OAAO,CAACpB,IAAI,GAAGmB,EAAE;MACjB,OAAOC,OAAO;;;IAGlB,IAAImH,KAAK,CAACC,OAAO,CAACpH,OAAO,CAAC,EAAE;;MAExB,IAAI+8E,YAAY,EAAE;;;QAGdh9E,EAAE,CAACg8E,sCAAsC,GAAG,IAAI;QAChD,MAAMmB,gBAAgB,GAAsBH,YAAY,CAAC/2D,UAAU,CAACtf,MAAM,CAACjF,MAAM,IAAI,CAACzB,OAAO,CAACT,QAAQ,CAACkC,MAAM,CAAC,IAAIA,MAAM,KAAK1B,EAAE,CAACqtD,uBAAuB,CAAC;QACxJ2vB,YAAY,CAACtoE,MAAM,CAACsoE,YAAY,CAAC/2D,UAAU,EAAE,IAAI,CAAC;QAClDk3D,gBAAgB,CAAC1tE,OAAO,CAAC/N,MAAM;UAAA,IAAA07E,eAAA;UAAA,QAAAA,eAAA,GAAI17E,MAAM,CAACuI,OAAO,cAAAmzE,eAAA,uBAAdA,eAAA,CAAAlzE,IAAA,CAAAxI,MAAM,CAAY;UAAC;QACtDs7E,YAAY,CAACh2E,IAAI,GAA2B/G,OAAO;QACnDD,EAAE,CAACg8E,sCAAsC,GAAG,KAAK;QACjD,OAAOgB,YAAY;;;MAGvB/8E,OAAO,GAAG;QAAE+G,IAAI,EAAG/G;OAAS;;IAEhC,IAAI+8E,YAAY,EAAE;MACd,MAAM,IAAI/iE,KAAK,CAAC,wCAAwC,CAAC;;;IAG7D,OAAOpD,WAAW,CAACmhB,GAAG,CAAC;MACnBn5B,IAAI,EAAImB,EAAE;MACVyK,KAAK,EAAGzK;KACX,EAAEC,OAAO,CAAC;;EAEf4mE,aAAaA,CAAC5mE,OAAO,EAAEymD,GAAG,EAAE;IAAA,IAAAogB,oBAAA,EAAAuW,eAAA;IACxB,MAAMr9E,EAAE,GAAG,IAAI;IACf,CAAA8mE,oBAAA,QAAK,CAACD,aAAa,cAAAC,oBAAA,uBAAnBA,oBAAA,CAAA58D,IAAA,OAAsBjK,OAAO,EAAEymD,GAAG,CAAC;;;;IAInCzmD,OAAO,CAACmX,GAAG,CAAC;MACR2pC,OAAO,EAAG/gD,EAAE,CAACs9E,gBAAgB;MAC7B9lE,MAAM,EAAIxX,EAAE,CAACs9E,gBAAgB;MAC7B5lE,IAAI,EAAM1X,EAAE,CAACs9E,gBAAgB;MAC7B/lE,OAAO,EAAGvX;KACb,CAAC;IACFC,OAAO,CAACmX,GAAG,CAACgE,iBAAiB,CAACpb,EAAE,CAACu9E,gBAAgB,EAAEv9E,EAAE,CAAC,CAAC;;IAEvD,IAAI4zB,aAAa,CAACC,aAAa,EAAE;MAC7B7zB,EAAE,CAACsuB,KAAK,GAAG,IAAI;;MAEfruB,OAAO,CAACwP,OAAO,CAAC/N,MAAM,IAAI;QACtB,MAAM;UAAE87E;SAAa,GAAG97E,MAAM;QAC9B,IAAI87E,WAAW,EAAE;UACb97E,MAAM,CAAC+S,UAAU,CAAC+oE,WAAW,CAAC;;OAErC,CAAC;;IAEN,CAAAH,eAAA,GAAAr9E,EAAE,CAACupD,WAAW,cAAA8zB,eAAA,uBAAdA,eAAA,CAAgBjnC,YAAY,CAAC,eAAe,EAAEn2C,OAAO,CAACC,cAAc,CAAC0B,MAAM,CAAC;;EAEhF07E,gBAAgBA,CAAC;IAAEv3E,IAAI;IAAE+S,MAAM;IAAEC,OAAO;IAAEzY,MAAM,EAAGoB,MAAM;IAAE6Y,OAAO,EAAGkjE,YAAY;IAAEC;GAAQ,EAAE;IACzF,MAAMC,mBAAmB,GAAG5kE,OAAO,IAAIvS,MAAM,CAACouB,IAAI,CAAC7b,OAAO,CAAC,CAACnX,MAAM,KAAK,CAAC;IACxE,IAAKmE,IAAI,KAAK,SAAS,IAAI+S,MAAM,KAAK,OAAO;;IAExCA,MAAM,KAAK,QAAQ,IAAI6kE,mBAAmB,IAAI,aAAa,IAAI5kE,OAAQ,EAAE;MAC1E;;IAEJ,MACI/Y,EAAE,GAAG,IAAI;MACT;QACIC,OAAO;QACPotD;OACH,GAAIrtD,EAAE;;IAEX,IAAI,CAACA,EAAE,CAAC4xC,SAAS,IAAK8rC,MAAM,IAAI5kE,MAAM,KAAK,QAAS,EAAE;MAClD;;;IAGJ,IAAIA,MAAM,KAAK,KAAK,EAAE;MAClB,KAAK,MAAMpX,MAAM,IAAI+7E,YAAY,EAAE;QAC/B,MAAM;UAAEjxE;SAAQ,GAAG9K,MAAM;;QAEzB,IAAI,CAAC1B,EAAE,CAACy4B,QAAQ,CAACjsB,MAAM,CAAC,EAAE;UACtBxM,EAAE,CAACqe,GAAG,CAACre,EAAE,CAACiyE,aAAa,CAACzlE,MAAM,EAAExM,EAAE,CAACgyE,cAAc,CAACxlE,MAAM,CAAC,CAAC,CAAC;;;;IAIvE,IAAIsM,MAAM,KAAK,QAAQ,EAAE;;MAErB,IAAI,OAAO,IAAIC,OAAO,IAAI,UAAU,IAAIA,OAAO,IAAI,UAAU,IAAIA,OAAO,IAAI,MAAM,IAAIA,OAAO,EAAE;;QAE3F,MAAMvM,MAAM,GAAG9K,MAAM,CAAC8K,MAAM;;;;QAI5BvM,OAAO,CAACC,cAAc,CAACuP,OAAO,CAAC+F,GAAG,IAAI;UAClC,IAAIA,GAAG,CAAChJ,MAAM,KAAKA,MAAM,IAAIgJ,GAAG,CAACooE,eAAe,EAAE;YAC9C59E,EAAE,CAAC69E,aAAa,CAACroE,GAAG,CAAC;;SAE5B,CAAC;QACFxV,EAAE,CAAC6qC,kBAAkB,CAAC;UAAE/xB,MAAM;UAAEC,OAAO;UAAErX;SAAQ,CAAC;QAClD;;;MAGJ,IAAI,MAAM,IAAIqX,OAAO,IAAI4kE,mBAAmB,EAAE;QAC1Cj8E,MAAM,CAAC8L,OAAO,CAAC8/D,aAAa,EAAE;QAC9B;;;MAGJ,IAAI,QAAQ,IAAIv0D,OAAO,EAAE;QACrB,MAAMvL,OAAO,GAAGxN,EAAE,CAAC4N,oBAAoB,CAAClM,MAAM,CAACjC,EAAE,CAAC;QAClD+N,OAAO,CAACkhC,MAAM,CAAC2Y,eAAe,EAAE;QAChC75C,OAAO,CAACg9D,MAAM,CAACtuB,eAAe,EAAE;QAChC1uC,OAAO,CAAC0/D,aAAa,EAAE;;;;IAI/B,IAAIp0D,MAAM,KAAK,SAAS,IAAIA,MAAM,KAAK,OAAO,IAAKA,MAAM,KAAK,QAAQ,IAAI,QAAQ,IAAIC,OAAQ,EAAE;MAC5F,MACIob,OAAO,GAAel0B,OAAO,CAAC6pC,iBAAiB,CAAC,QAAQ,CAAC;QACzD;UAAEg2B,QAAQ;UAAEC;SAAO,GAAG/iC,WAAW,CAACkhB,KAAK,CAAC/pB,OAAO,EAAEn0B,EAAE,CAACm0B,OAAO,EAAE,IAAI,CAAC;MACtEn0B,EAAE,CAAC0U,MAAM,CAACorD,QAAQ,CAAC3jD,GAAG,CAAC3P,MAAM,IAAIxM,EAAE,CAACo0B,UAAU,CAAC5nB,MAAM,CAAC,CAAC,CAAC;MACxDxM,EAAE,CAACqe,GAAG,CAAC0hD,KAAK,CAAC5jD,GAAG,CAAC3P,MAAM,IAAIxM,EAAE,CAACiyE,aAAa,CAACzlE,MAAM,CAAC,CAAC,CAAC;;;IAGzD,IAAI6gD,uBAAuB,IAAI,CAACptD,OAAO,CAACT,QAAQ,CAAC6tD,uBAAuB,CAAC,EAAE;;MAEvE,MAAMywB,WAAW,GAAG79E,OAAO,CAACP,OAAO,CAACO,OAAO,CAACwZ,UAAU,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,GAAG,CAAC;MAChFxZ,OAAO,CAAC25D,MAAM,CAACkkB,WAAW,EAAEzwB,uBAAuB,EAAE,IAAI,CAAC;;IAE9D,IAAI,CAACrtD,EAAE,CAACg8E,sCAAsC,EAAE;MAC5Ch8E,EAAE,CAACw6B,cAAc,EAAE;;;;;IAKvBx6B,EAAE,CAACmuE,iBAAiB,EAAE;;;;IAItBnuE,EAAE,CAACupD,WAAW,CAACnT,YAAY,CAAC,eAAe,EAAEn2C,OAAO,CAACC,cAAc,CAAC0B,MAAM,CAAC;IAC3E5B,EAAE,CAAC6qC,kBAAkB,CAAC;MAAE/xB,MAAM;MAAEC,OAAO;MAAErX;KAAQ,CAAC;;EAEtD67E,gBAAgBA,CAAC;IAAExkE,OAAO;IAAEzY,MAAM,EAAGoB;GAAQ,EAAE;IAC3C,MAAM1B,EAAE,GAAG,IAAI;IACf,IAAIA,EAAE,CAACsmB,aAAa,EAAE;MAClB;;IAEJ,MACI+0B,QAAQ,GAAMt2C,SAAS,CAACu2C,SAAS,CAAC55C,MAAM,CAACsG,KAAK,CAAC;MAC/CuzC,WAAW,GAAGx2C,SAAS,CAACu2C,SAAS,CAAC55C,MAAM,CAACsQ,QAAQ,CAAC;MAClDwpC,WAAW,GAAGz2C,SAAS,CAACu2C,SAAS,CAAC55C,MAAM,CAACoR,QAAQ,CAAC;MAClDtF,OAAO,GAAOxN,EAAE,CAAC4N,oBAAoB,CAAClM,MAAM,CAACjC,EAAE,CAAC;;IAEpD+N,OAAO,CAACkhC,MAAM,CAAC2Y,eAAe,EAAE;IAChC75C,OAAO,CAACg9D,MAAM,CAACtuB,eAAe,EAAE;IAChC1uC,OAAO,CAAC0/D,aAAa,EAAE;;IAEvB,IAAI,EAAExrE,MAAM,CAACuG,IAAI,IAAIvG,MAAM,CAAC82B,UAAU,CAAC,EAAE;MACrC,IAAI,CAACx4B,EAAE,CAAC+9E,OAAO,IAAIr8E,MAAM,KAAK1B,EAAE,CAACg+E,iBAAiB,EAAE;QAChDh+E,EAAE,CAAC+9E,OAAO,GAAah5E,SAAS,CAACmD,QAAQ,CACrClI,EAAE,CAACmE,OAAO,EACT,gCAA+BzC,MAAM,CAACjC,EAAG,IAAG,CAChD;QACDO,EAAE,CAACg+E,iBAAiB,GAAGt8E,MAAM;;MAEjC,KAAK,MAAM1C,IAAI,IAAIgB,EAAE,CAAC+9E,OAAO,EAAE;QAC3B,IAAI,OAAO,IAAIhlE,OAAO,EAAE;;;;;;UAMpB/Z,IAAI,CAACyU,KAAK,CAACzL,KAAK,GAAGqzC,QAAQ;;QAE/B,IAAI,UAAU,IAAItiC,OAAO,EAAE;UACvB/Z,IAAI,CAACyU,KAAK,CAACzB,QAAQ,GAAGupC,WAAW;;QAErC,IAAI,UAAU,IAAIxiC,OAAO,EAAE;UACvB/Z,IAAI,CAACyU,KAAK,CAACX,QAAQ,GAAG0oC,WAAW;;QAErC,IAAI,MAAM,IAAIziC,OAAO,EAAE;UAAA,IAAAklE,YAAA;UACnBj/E,IAAI,CAACyU,KAAK,CAACxL,IAAI,IAAAg2E,YAAA,GAAGv8E,MAAM,CAACuG,IAAI,cAAAg2E,YAAA,cAAAA,YAAA,GAAI,IAAI;;;;;;IAMjD,IAAI,CAACj+E,EAAE,CAAC47B,eAAe,EAAE;MACrB57B,EAAE,CAAC87B,mBAAmB,CAACp6B,MAAM,CAAC;;;;;IAKlC1B,EAAE,CAACmuE,iBAAiB,EAAE;;EAE1BryC,mBAAmBA,CAACp6B,MAAM,EAAE;IACxB,MAAM1B,EAAE,GAAG,IAAI;IACfA,EAAE,CAACsnE,WAAW,CAAC95D,OAAO,IAAI;;MAEtB,IAAI,CAACA,OAAO,CAAC1E,SAAS,KAAK,CAACpH,MAAM,IAAIA,MAAM,CAAC8K,MAAM,KAAKgB,OAAO,CAAChB,MAAM,CAAC,EAAE;QACrEgB,OAAO,CAACkgE,SAAS,EAAE;QACnBlgE,OAAO,CAACqgE,wBAAwB,EAAE;;KAEzC,CAAC;IACF7tE,EAAE,CAACg+E,iBAAiB,GAAGh+E,EAAE,CAAC+9E,OAAO,GAAG,IAAI;;IAExC/9E,EAAE,CAACw5E,2BAA2B,CAAC93E,MAAM,CAAC;;IAEtC1B,EAAE,CAACouE,cAAc,EAAE;;EAEvBD,iBAAiBA,GAAG;IAChB,MAAM+P,aAAa,GAAG,IAAI,CAACj+E,OAAO,CAACk+E,KAAK,CAACpzE,CAAC,IAAIA,CAAC,CAAC9C,IAAI,IAAI8C,CAAC,CAACytB,UAAU,IAAIztB,CAAC,CAAC5G,OAAO,CAAC;;;;IAIlF,IAAI+5E,aAAa,EAAE;MACf,KAAK,MAAMx8E,MAAM,IAAIw8E,aAAa,EAAE;QAChC,MACIl2E,KAAK,GAAKtG,MAAM,CAACyC,OAAO,CAAC+uB,qBAAqB,EAAE,CAAClrB,KAAK;UACtD+1E,OAAO,GAAGh5E,SAAS,CAACmD,QAAQ,CACxB,IAAI,CAAC/D,OAAO,EACX,gCAA+BzC,MAAM,CAACjC,EAAG,IAAG,CAChD;QACL,KAAK,MAAMT,IAAI,IAAI++E,OAAO,EAAE;UACxB/+E,IAAI,CAACyU,KAAK,CAACxL,IAAI,GAAI,OAAMD,KAAM,IAAG;;;;;EAKlDwxE,2BAA2BA,CAAC93E,MAAM,EAAE;;IAEhC,IAAI,IAAI,CAACzB,OAAO,CAACwa,cAAc,EAAE;MAC7B,IAAI,CAACgnB,WAAW,EAAE;;IAEtB,IAAI,CAACqtB,wBAAwB,EAAE;IAC/B,IAAI,CAACwY,WAAW,CAAC95D,OAAO,IAAI;;MAExB,IAAI,CAACA,OAAO,CAAC1E,SAAS,KAAK,CAACpH,MAAM,IAAIA,MAAM,CAAC8K,MAAM,KAAKgB,OAAO,CAAChB,MAAM,CAAC,EAAE;QACrEgB,OAAO,CAAC06D,iBAAiB,EAAE;;KAElC,CAAC;;EAENuR,qBAAqBA,GAAG;IACpB,IAAI,CAACh4C,WAAW,EAAE;;EAEtB+sB,gBAAgBA,CAACrqD,OAAO,EAAE03B,QAAQ,EAAEkyC,SAAS,EAAEtf,QAAQ,EAAEvX,SAAS,EAAE;;;;;;;;IAQhE,IAAInyC,SAAS,CAAC8mD,cAAc,IAAIhwB,QAAQ,GAAG4yB,QAAQ,EAAE;MACjD,IAAI,CAAC6Y,WAAW,CAAC95D,OAAO,IAAI;QACxB,IAAIA,OAAO,CAACvF,IAAI,EAAE;UACduF,OAAO,CAAC86D,eAAe,CAAC96D,OAAO,CAACrJ,OAAO,CAAC;;OAE/C,CAAC;;IAEN,KAAK,CAACqqD,gBAAgB,CAAC,GAAG7mD,SAAS,CAAC;;IAEpC,IAAI,IAAI,CAACiqC,SAAS,IAAI/V,QAAQ,KAAK4yB,QAAQ,IAAI,IAAI,CAACxuD,OAAO,CAAC0a,kBAAkB,EAAE;MAC5E,IAAI,CAAC8+D,qBAAqB,EAAE;;;;;;AAMxC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;EACI2E,gBAAgBA,CAACn8E,UAAU,EAAEo8E,aAAa,EAAE;IACxC,MAAMr+E,EAAE,GAAG,IAAI;;;;IAIf,IAAI,CAACA,EAAE,CAACs+E,cAAc,EAAE;MACpBt+E,EAAE,CAACu+E,gBAAgB,EAAE;;IAEzBF,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEp0E,OAAO,EAAE;IACxB,IAAIhI,UAAU,EAAE;;;MAGZ,MAAMS,MAAM,GAAG85C,UAAU,CAACxkB,GAAG,CAAC;QAC1Bn5B,IAAI,EAAgBmB,EAAE;QACtB+D,SAAS,EAAW/D,EAAE,CAAC+D,SAAS;QAChCg3E,aAAa,EAAO/6E,EAAE,CAAC+6E,aAAa,IAAI,MAAM;QAC9CzuE,UAAU,EAAUtM,EAAE,CAACsM,UAAU;QACjCurC,cAAc,EAAM73C,EAAE,CAAC63C,cAAc;QACrCn5B,iBAAiB,EAAG;UAChB+G,iBAAiB,EAAK,+BAA+B;UACrD+4D,mBAAmB,EAAG,iCAAiC;UACvDjnE,OAAO,EAAevX;;OAE7B,EAAEiC,UAAU,CAAC;;MAEdjC,EAAE,CAACi5B,WAAW,CAACv2B,MAAM,EAAE,CAAC,iBAAiB,EAAE,WAAW,CAAC,CAAC;;;;MAIxD1C,EAAE,CAACq9C,WAAW,GAAG,IAAI;MACrB,OAAO36C,MAAM;;;;EAIrBo1C,YAAYA,CAACx3C,MAAM,EAAE;IACjB,OAAOA,MAAM,CAACyD,SAAS;;;EAG3By0C,gBAAgBA,CAACl4C,MAAM,EAAEq1C,MAAM,EAAE;;;;AAIrC;AACA;AACA;AACA;EACIn1B,SAASA,CAACjhB,KAAK,EAAE;IACb,MAAMk/E,MAAM,GAAG,IAAI,CAAC19D,gBAAgB;IACpCxhB,KAAK,CAAC6X,GAAG,CAAC;MACNnR,IAAI,EAAG6yE,iBAAiB;MACxB,CAAE,UAAS2F,MAAO,EAAC,GAAM,mBAAmB;MAC5C,CAAE,MAAKA,MAAO,EAAC,GAAU,YAAY;MACrC,CAAE,SAAQA,MAAO,EAAC,GAAO,eAAe;MACxC,CAAE,UAASA,MAAO,EAAC,GAAM,gBAAgB;MACzC,CAAE,YAAWA,MAAO,EAAC,GAAI,kBAAkB;MAC3C,CAAE,OAAMA,MAAO,EAAC,GAASl/E,KAAK,CAAC0X,IAAI,GAAG,IAAI,GAAG,iBAAiB;MAC9DO,MAAM,EAAmB,sBAAsB;MAC/CknE,QAAQ,EAAQ,uBAAuB;MACvCpjE,MAAM,EAAU,qBAAqB;MACrCqjE,aAAa,EAAG,sBAAsB;MACtCC,YAAY,EAAI,qBAAqB;MACrCC,SAAS,EAAO,kBAAkB;MAClCC,MAAM,EAAU,eAAe;MAC/BvnE,OAAO,EAAS;KACnB,CAAC;IACF,KAAK,CAACiJ,SAAS,CAACjhB,KAAK,CAAC;;EAE1Bi8D,WAAWA,CAACC,QAAQ,EAAE;IAClB,IAAI,CAAC36C,eAAe,CAACg4D,iBAAiB,CAAC;IACvC,IAAI,IAAI,CAAC0B,YAAY,EAAE;MACnB/e,QAAQ,CAACxxD,OAAO,EAAE;;;EAG1B80E,WAAWA,CAACx/E,KAAK,EAAE;IACf,IAAIA,KAAK,IAAI,IAAI,EAAE;MACf,OAAO,IAAI;;IAEf,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC3BA,KAAK,GAAGuX,KAAK,CAACkoE,QAAQ,CAACz/E,KAAK,CAAC;;IAEjC,IAAI,CAACA,KAAK,CAAC29E,OAAO,EAAE;MAAA,IAAA+B,qBAAA;MAChB1/E,KAAK,GAAGwN,YAAY,CAACtG,MAAM,CAAC;QACxBO,IAAI,EAAG,IAAI,CAACA,IAAI;QAChBiQ,IAAI,EAAG/R,OAAO,EAAA+5E,qBAAA,GAAC,IAAI,CAACC,aAAa,CAACz/D,QAAQ,cAAAw/D,qBAAA,uBAA3BA,qBAAA,CAA6BhoE,IAAI;OACnD,EAAE1X,KAAK,CAAC;MACT,IAAI,CAACA,KAAK,CAACyH,IAAI,EAAE;QACb,OAAOzH,KAAK,CAACyH,IAAI;;MAErB,IAAI,CAACzH,KAAK,CAACyX,UAAU,EAAE;QACnBzX,KAAK,CAACyX,UAAU,GAAGmoE,YAAY;;MAEnC5/E,KAAK,GAAG,KAAKA,KAAK,CAACmqC,OAAO,GAAG01C,SAAS,GAAGtoE,KAAK,EAAEvX,KAAK,CAAC;;IAE1D,OAAOA,KAAK;;EAEhBonE,WAAWA,CAACpnE,KAAK,EAAEmnD,GAAG,EAAE;IAAA,IAAAkgB,kBAAA;IACpB,MAAM5mE,EAAE,GAAG,IAAI;IACf,CAAA4mE,kBAAA,QAAK,CAACD,WAAW,cAAAC,kBAAA,uBAAjBA,kBAAA,CAAA18D,IAAA,OAAoB3K,KAAK,EAAEmnD,GAAG,CAAC;IAC/B,IAAIA,GAAG,EAAE;MACL1mD,EAAE,CAACw7D,WAAW,CAAC9U,GAAG,CAAC;;IAEvB,IAAInnD,KAAK,EAAE;;MAEP,IAAImnD,GAAG,EAAE;QACL1mD,EAAE,CAAC25D,WAAW,EAAE;;MAEpB35D,EAAE,CAACwgB,SAAS,CAACjhB,KAAK,CAAC;;IAEvBS,EAAE,CAACgJ,OAAO,CAAC,WAAW,EAAE;MAAEzJ,KAAK;MAAEk8D,QAAQ,EAAG/U;KAAK,CAAC;;IAElD,IAAI,CAAC1mD,EAAE,CAACqqC,YAAY,IAAIrqC,EAAE,CAAC4xC,SAAS,IAAI,CAAC5xC,EAAE,CAAC4iD,gBAAgB,EAAE;MAAA,IAAAy8B,eAAA;MAC1D,CAAAA,eAAA,GAAAr/E,EAAE,CAACq9C,WAAW,cAAAgiC,eAAA,uBAAdA,eAAA,CAAgBzhC,YAAY,EAAE;;;;AAI1C;AACA;AACA;AACA;EACI0hC,mBAAmBA,CAAC;IAAE//D,MAAM,EAAGhgB,KAAK;IAAEe,MAAM;IAAEyY;GAAS,EAAE;IACrD,MAAM/Y,EAAE,GAAG,IAAI;IACf,IAAIA,EAAE,CAAC4iD,gBAAgB,EAAE;MACrB;;IAEJ,IAAI5iD,EAAE,CAACu/E,gBAAgB,EAAE;;MAErBv/E,EAAE,CAACiC,UAAU,CAAC8+C,OAAO,EAAE;MACvB/gD,EAAE,CAACu/E,gBAAgB,GAAG,KAAK;KAC9B,MACI;MACD,IAAI5+E,GAAG;;MAEP,IAAIL,MAAM,CAACyL,eAAe,CAAC,IAAI,CAAC,EAAE;QAC9BpL,GAAG,GAAGX,EAAE,CAACoqB,SAAS,CAAC9pB,MAAM,CAACkI,IAAI,CAAC+mC,QAAQ,CAAC9vC,EAAE,CAAC;;MAE/CkB,GAAG,GAAGA,GAAG,IAAIX,EAAE,CAACoqB,SAAS,CAAC9pB,MAAM,CAAC;;MAEjC,IAAI,CAACK,GAAG,EAAE;QACN;;;;MAIJ,IAAIX,EAAE,CAACq6E,cAAc,IAAI/5E,MAAM,CAACc,YAAY,EAAE;QAC1C,MAAMzB,KAAK,GAAGJ,KAAK,CAACG,OAAO,CAACY,MAAM,CAAC;QACnC,IAAIX,KAAK,KAAK,CAAC,CAAC,EAAE;UACdgB,GAAG,CAACyqB,MAAM,CAACzrB,KAAK,EAAEW,MAAM,CAAC;;OAEhC,MACI;QACDN,EAAE,CAACC,OAAO,CAACC,cAAc,CAACuP,OAAO,CAAC/N,MAAM,IAAI;UACxC,MACIF,KAAK,GAAIE,MAAM,CAACF,KAAK;YACrBg+E,MAAM,GAAG99E,MAAM,CAACnD,WAAW,CAACsc,cAAc,IAAI,CAAErU,MAAM,CAAC6b,SAAS,CAACC,cAAc,CAACpY,IAAI,CAACxI,MAAM,CAACsF,IAAI,EAAE,UAAU,CAAE;;;;UAIlH,IAAI,CAACw4E,MAAM,IAAIzmE,OAAO,CAACvX,KAAK,CAAC,EAAE;YAC3B,MAAMoR,WAAW,GAAGjS,GAAG,CAAC0D,OAAO,CAAC7C,KAAK,CAAC;YACtC,IAAIoR,WAAW,EAAE;cACbjS,GAAG,CAACyT,UAAU,CAACxB,WAAW,CAAC;;;SAGtC,CAAC;;;;EAId6sE,wBAAwBA,CAAC9+E,GAAG,EAAE2oB,OAAO,EAAE;IACnC,MACItpB,EAAE,GAAe,IAAI;MACrB;QAAEiC;OAAY,GAAGjC,EAAE;IACvBiC,UAAU,CAACyqC,aAAa,CAAC/rC,GAAG,CAAC;IAC7BsB,UAAU,CAAC+G,OAAO,CAAC,mBAAmB,EAAE;MAAEo2C,WAAW,EAAGn9C,UAAU,CAACm9C;KAAa,CAAC;;;IAGjF,IAAIp/C,EAAE,CAACT,KAAK,CAAC0B,KAAK,KAAK,CAAC,EAAE;MACtBjB,EAAE,CAAC4yE,eAAe,CAAC,mBAAmB,CAAC;;;EAG/C8M,eAAeA,CAACC,IAAI,EAAE;IAClB,KAAK,CAACD,eAAe,CAACC,IAAI,CAAC;IAC3B,IAAI,CAACtgC,eAAe,EAAE;;;AAG9B;AACA;AACA;AACA;EACIugC,UAAUA,CAAC;IAAErgE,MAAM,EAAGhgB,KAAK;IAAEgb,OAAO;IAAE5a,KAAK;IAAEkgF,QAAQ;IAAEC,OAAO;IAAE7lD,SAAS;IAAExtB,MAAM;IAAEixE,MAAM;IAAEqC;GAAa,EAAE;;IAEtG,IAAI,CAAC,IAAI,CAACnuC,SAAS,IAAImuC,WAAW,IAAI,IAAI,CAACn9B,gBAAgB,EAAE;MACzD;;;IAGJ,MAAMo9B,oBAAoB,GAAGtC,MAAM,IAAInjE,OAAO,CAAC5L,IAAI,CAACrO,MAAM,IAAI;MAC1D,IAAIo9E,MAAM,CAACp9E,MAAM,CAACb,EAAE,CAAC,EAAE;;QAEnB,MAAMw6B,SAAS,GAAG16B,KAAK,CAAC+B,OAAO,CAAChB,MAAM,CAACkI,IAAI,CAAC+mC,QAAQ,CAAC0wC,QAAQ,CAAC;QAC9D,OAAO,CAAAhmD,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEie,UAAU,CAAC34C,KAAK,CAAC,MAAI06B,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEimD,iBAAiB,CAAC3gF,KAAK,CAAC;;KAEjF,CAAC;;IAEF,IAAIugF,OAAO,IAAI,CAACvlE,OAAO,CAAC,CAAC,CAAC,CAAC2lE,iBAAiB,CAAC3gF,KAAK,CAAC,IAAI,CAACygF,oBAAoB,EAAE;;MAE1E,IAAI,CAACvzE,MAAM,CAAC7E,MAAM,EAAE;QAChB,MAAMu4E,SAAS,GAAG,IAAI,CAACl+E,UAAU,CAACqC,UAAU,CAACmI,MAAM,CAAC;QACpD,IAAI0zE,SAAS,EAAE;UACX,IAAI,CAACl+E,UAAU,CAACsjB,UAAU,CAAC,CAAC46D,SAAS,CAAC,CAAC;;;MAG/C;;IAEJ,IAAI,CAACl+E,UAAU,CAAC07C,iBAAiB,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC;;IAEpD,IAAIp+C,KAAK,CAACkgC,UAAU,EAAE;MAClB9/B,KAAK,GAAGJ,KAAK,CAACG,OAAO,CAAC6a,OAAO,CAAC,CAAC,CAAC,CAAC;;IAErC,MACIva,EAAE,GAAe,IAAI;MACrB;QAAEiC;OAAY,GAAGjC,EAAE;MACnB;QACI+T,QAAQ;QACRrB,IAAI;QACJuB;OACH,GAAgBhS,UAAU;MAC3Bm+E,WAAW,GAAMn+E,UAAU,CAAC8R,QAAQ,GAAG9R,UAAU,CAACgS,QAAQ,GAAG,CAAC;MAC9DosE,SAAS,GAAQ1gF,KAAK;MACtB2gF,OAAO,GAAU3gF,KAAK,GAAG4a,OAAO,CAAC3Y,MAAM,GAAG,CAAC;MAC3C2+E,KAAK,GAAYH,WAAW,IAAI7gF,KAAK,CAAC0B,KAAK,GAAGsZ,OAAO,CAAC3Y,MAAM,GAAG,CAAC;;;;;IAKpE,IAAIq4B,SAAS,IAAI4lD,QAAQ,GAAG,CAAC,CAAC,IAAKC,OAAO,IAAIpC,MAAO,EAAE;MACnDz7E,UAAU,CAAC8+C,OAAO,EAAE;;;SAGnB,IAAIs/B,SAAS,IAAItsE,QAAQ,IAAIssE,SAAS,GAAGtsE,QAAQ,GAAGE,QAAQ,EAAE;MAC/DjU,EAAE,CAACy/E,wBAAwB,CAAC/sE,IAAI,CAAC2tE,SAAS,GAAGtsE,QAAQ,CAAC,EAAE,GAAGpM,SAAS,CAAC;;;SAGpE,IAAI24E,OAAO,IAAIvsE,QAAQ,IAAIusE,OAAO,GAAGvsE,QAAQ,GAAGE,QAAQ,EAAE;MAC3DhS,UAAU,CAAC8+C,OAAO,EAAE;;;;SAInB;;;MAGD,IAAIw/B,KAAK,IAAI5gF,KAAK,GAAGygF,WAAW,EAAE;QAC9Bn+E,UAAU,CAACiiD,SAAS,CAAClkD,EAAE,CAACs7E,UAAU,IAAI,CAAC,CAAC;;MAE5Cr5E,UAAU,CAAC87C,mBAAmB,CAAC,IAAI,CAAC;;;;AAIhD;AACA;AACA;AACA;EACIyiC,gBAAgBA,CAAC;IAAE1nE,MAAM;IAAE/S,IAAI;IAAE06E,QAAQ;IAAEC,aAAa;IAAEr8B;GAAO,EAAE;IAAA,IAAAs8B,oBAAA;IAC/D,MAAM3gF,EAAE,GAAG,IAAI;IACf,IAAI4gF,OAAO;IACX,QAAQ76E,IAAI;MACR,KAAK,QAAQ;QACT66E,OAAO,GAAGH,QAAQ,CAACG,OAAO,IAAI5gF,EAAE,CAACyyB,CAAC,CAAC,uBAAuB,CAAC;QAC3D;MACJ,KAAK,WAAW;QACZmuD,OAAO,GAAGF,aAAa,KAAK,SAAS,GAAG1gF,EAAE,CAACyyB,CAAC,CAAC,mBAAmB,CAAC,GAAI,CAAA4xB,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEu8B,OAAO,MAAIH,QAAQ,aAARA,QAAQ,wBAAAE,oBAAA,GAARF,QAAQ,CAAEI,UAAU,cAAAF,oBAAA,uBAApBA,oBAAA,CAAsBC,OAAO,KAAI5gF,EAAE,CAACyyB,CAAC,CAAC,iBAAiB,CAAE;QAChJ;;;IAGRzyB,EAAE,CAAC8gF,cAAc,CACZ;AACb,gDAAgD9gF,EAAE,CAACyyB,CAAC,CAAC3Z,MAAM,KAAK,MAAM,GAAG,sBAAsB,GAAG,sBAAsB,CAAE;AAC1H,kBAAkB2nE,QAAQ,aAARA,QAAQ,eAARA,QAAQ,CAAEM,GAAG,GAAI,iCAAgCN,QAAQ,CAACM,GAAI,QAAO,GAAG,EAAG;AAC7F,gDAAgD/gF,EAAE,CAACyyB,CAAC,CAAC,mBAAmB,CAAE;AAC1E,gDAAgDmuD,OAAQ;AACxD,mBAAmB,CAAC;;;AAGpB;AACA;AACA;AACA;EACItkB,iBAAiBA,CAAC;IAAExjD,MAAM;IAAEC,OAAO;IAAEwG,MAAM,EAAGhgB,KAAK;IAAEyhF;GAAU,EAAE;IAAA,IAAAzkB,qBAAA,EAAA0kB,iBAAA;IAC7D,IAAI,IAAI,CAACr+B,gBAAgB,IAAI,CAAC,IAAI,CAAC3gD,UAAU,EAAE;MAC3C;;IAEJ,MACIjC,EAAE,GAAmB,IAAI;MACzBkhF,kBAAkB,GAAG3hF,KAAK,CAACysC,SAAS,IAAIjzB,OAAO,IAAIxZ,KAAK,CAAC2sC,QAAQ,CAACv9B,IAAI,CAACwyE,OAAO,IAAIA,OAAO,CAAC3/E,KAAK,IAAIuX,OAAO,CAAC;;IAE/G,CAAAwjD,qBAAA,QAAK,CAACD,iBAAiB,cAAAC,qBAAA,uBAAvBA,qBAAA,CAAAryD,IAAA,OAA0B,GAAGvC,SAAS,CAAC;;IAEvC,IAAImR,MAAM,KAAK,OAAO,IAAIkoE,QAAQ,aAARA,QAAQ,gBAAAC,iBAAA,GAARD,QAAQ,CAAEhmB,OAAO,cAAAimB,iBAAA,eAAjBA,iBAAA,CAAmBr/E,MAAM,EAAE;MACjD5B,EAAE,CAACiC,UAAU,CAACyqC,aAAa,CAAC1sC,EAAE,CAAC89C,MAAM,CAAC;KACzC,MACI;;MAED,IAAIhlC,MAAM,KAAK,SAAS,EAAE;QACtB9Y,EAAE,CAACiC,UAAU,CAAC6+C,iBAAiB,EAAE;;;;MAIrC,IAAI9gD,EAAE,CAAC4xC,SAAS,IAAI,CAACsvC,kBAAkB,EAAE;;QAErClhF,EAAE,CAACulB,UAAU,CAACrgB,OAAO,CAAC,EAAE4T,MAAM,IAAIkgE,qBAAqB,CAAC,IAAIh5E,EAAE,CAACs6E,6BAA6B,CAAC,CAAC;;;IAGtGt6E,EAAE,CAACq/C,eAAe,EAAE;;;AAG5B;AACA;AACA;AACA;EACIkS,qBAAqBA,GAAG;;IAEpB,KAAK,CAACA,qBAAqB,IAAI,KAAK,CAACA,qBAAqB,CAAC,GAAG5pD,SAAS,CAAC;;;AAGhF;AACA;AACA;AACA;EACIw0E,oBAAoBA,GAAG;IACnB,IAAI,CAACiF,aAAa,EAAE;;;AAG5B;AACA;AACA;AACA;EACIC,mBAAmBA,CAACjoE,KAAK,EAAE;IACvB,IAAI,IAAI,CAACkoE,QAAQ,IAAI,CAACloE,KAAK,CAACylE,SAAS,EAAE;MACnC,IAAI,CAAC0C,MAAM,GAAG,IAAI;MAClB,IAAI,CAACliC,eAAe,EAAE;;;EAG9BmiC,6BAA6BA,CAAC;IAAEnlB;GAAY,EAAE;IAC1C,MAAM58C,QAAQ,GAAG,IAAI,CAAC6vC,SAAS;IAC/B,OAAQ,CAAA7vC,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEiT,KAAK,KAAI,CAACjT,QAAQ,CAACiT,KAAK,CAAC/S,QAAQ,IAC9C,CAAAF,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAE8rB,YAAY,KAAI,CAAC9rB,QAAQ,CAAC8rB,YAAY,CAAC5rB,QAAS;;IAE1D,IAAI,CAACpgB,KAAK,CAAC0X,IAAI,IAAI,CAAColD,UAAU,IAAI,IAAI,CAAC98D,KAAK,CAACyX,UAAU,CAACyqE,wBAAyB;;;AAG9F;AACA;AACA;AACA;EACItlB,aAAaA,CAAC;IAAE5hD,OAAO;IAAE8hD,UAAU;IAAEyjB,OAAO;IAAEpC,MAAM;IAAEgE;GAAe,EAAE;;;IAGnE,IAAI,CAAC,IAAI,CAAC9vC,SAAS,IAAI8rC,MAAM,IAAIgE,aAAa,EAAE;MAC5C;;;IAGJ,KAAK,CAACvlB,aAAa,IAAI,KAAK,CAACA,aAAa,CAAC,GAAGx0D,SAAS,CAAC;IACxD,MACI3H,EAAE,GAAe,IAAI;MACrB;QAAEiC;OAAY,GAAGjC,EAAE;;IAEvBiC,UAAU,CAACo/C,qBAAqB,CAAC9mC,OAAO,CAAC;IACzC,IAAIva,EAAE,CAAC46E,mBAAmB,IAAI,CAACve,UAAU,IAAI,CAACyjB,OAAO,EAAE;;MAEnD,MAAM6B,YAAY,GAAGpnE,OAAO,CAACnI,MAAM,CAAC,CAAC1P,MAAM,EAAEpC,MAAM,KAAK;QACpD,MAAMK,GAAG,GAAGsB,UAAU,CAACqC,UAAU,CAAChE,MAAM,CAACb,EAAE,CAAC;QAC5CkB,GAAG,IAAI+B,MAAM,CAACoO,IAAI,CAACnQ,GAAG,CAAC;QACvB,OAAO+B,MAAM;OAChB,EAAE,EAAE,CAAC;MACN,IAAIi/E,YAAY,CAAC//E,MAAM,EAAE;QACrB,MAAMk8C,MAAM,GAAG6jC,YAAY,CAAC,CAAC,CAAC;QAC9B3hF,EAAE,CAAC4hF,WAAW,GAAG,IAAI;;QAErBhvD,WAAW,CAACivD,eAAe,CAAC;UACxB19E,OAAO,EAAI25C,MAAM,CAACjK,cAAc,CAAC,CAAC,CAAC;UACnC7V,QAAQ,EAAG,MAAM;;UAEjBI,QAAQ,EAAGp+B,EAAE,CAACy3C,kBAAkB;UAChClgC,OAAO,EAAIvX,EAAE;UACbqb,OAAO,EAAIA,MAAM;YACbrb,EAAE,CAAC4hF,WAAW,GAAG,KAAK;YACtBD,YAAY,CAAClyE,OAAO,CAAC9O,GAAG,IAAI,CAACA,GAAG,CAACotB,WAAW,IAAIptB,GAAG,CAACipB,SAAS,CAAC,YAAY,CAAC,CAAC;YAC5E3nB,UAAU,CAAC8+C,OAAO,EAAE;;YAEpB/gD,EAAE,CAACgJ,OAAO,CAAC,WAAW,CAAC;YACvBhJ,EAAE,CAAC8hF,WAAW,CAACn6E,SAAS,CAAC,CAAC,CAAC,CAAC;;SAEnC,CAAC;QACFg6E,YAAY,CAAClyE,OAAO,CAAC9O,GAAG,IAAIA,GAAG,CAAC0qB,MAAM,CAAC,YAAY,CAAC,CAAC;QACrD;;;;;IAKR,IAAIrrB,EAAE,CAACwhF,6BAA6B,CAAC,GAAG75E,SAAS,CAAC,EAAE;MAChD1F,UAAU,CAAC8+C,OAAO,EAAE;MACpB/gD,EAAE,CAAC8hF,WAAW,CAACn6E,SAAS,CAAC,CAAC,CAAC,CAAC;KAC/B,MACI;MACD,MAAMo6E,WAAW,GAAG9/E,UAAU,CAAC8R,QAAQ;;MAEvC9R,UAAU,CAAC07C,iBAAiB,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC;;MAE/C,IAAI17C,UAAU,CAAC8R,QAAQ,KAAKguE,WAAW,EAAE;QACrC9/E,UAAU,CAACyqC,aAAa,CAACzqC,UAAU,CAAC67C,MAAM,CAAC;OAC9C,MACI;QACD,MAAM;YAAEprC;WAAM,GAAGzQ,UAAU;UAAEk7C,WAAW,GAAG5iC,OAAO,CAACnI,MAAM,CAAC,CAAC1P,MAAM,EAAEpC,MAAM,KAAK;YAC1E,MAAMK,GAAG,GAAGsB,UAAU,CAACqC,UAAU,CAAChE,MAAM,CAACb,EAAE,CAAC;YAC5C,IAAIkB,GAAG,EAAE;;cAEL+B,MAAM,GAAG7B,IAAI,CAACE,GAAG,CAAC2B,MAAM,EAAEgQ,IAAI,CAAChT,OAAO,CAACiB,GAAG,CAAC,CAAC;;YAEhD,OAAO+B,MAAM;WAChB,EAAEgQ,IAAI,CAAC9Q,MAAM,CAAC;;;QAGf,IAAI8Q,IAAI,CAACyqC,WAAW,CAAC,EAAE;UACnB,CAACn9C,EAAE,CAAC4iD,gBAAgB,IAAI3gD,UAAU,CAACyqC,aAAa,CAACh6B,IAAI,CAACyqC,WAAW,CAAC,CAAC;;;aAGlE;UACDl7C,UAAU,CAAC+G,OAAO,CAAC,mBAAmB,EAAE;YAAEo2C,WAAW,EAAGn9C,UAAU,CAACm9C;WAAa,CAAC;;;MAGzFp/C,EAAE,CAACgJ,OAAO,CAAC,WAAW,EAAE;QAAEqzD;OAAY,CAAC;MACvCr8D,EAAE,CAAC8hF,WAAW,CAACn6E,SAAS,CAAC,CAAC,CAAC,CAAC;;;EAGpCq6E,eAAeA,CAAC;IAAE1sC,IAAI;IAAEgsB;GAAI,EAAE;IAC1B,MACI;QAAEr/D;OAAY,GAAS,IAAI;MAC3B;QACI8R,QAAQ;QACRE;OACH,GAAsBhS,UAAU;MACjC,CAACo+E,SAAS,EAAEC,OAAO,CAAC,GAAG,CAAChrC,IAAI,EAAEgsB,EAAE,CAAC,CAAC5pD,IAAI,CAAC,CAACspB,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC;;IAE3D,IAAIo/C,SAAS,IAAItsE,QAAQ,IAAIssE,SAAS,GAAGtsE,QAAQ,GAAGE,QAAQ,EAAE;MAC1DhS,UAAU,CAACyqC,aAAa,CAACzqC,UAAU,CAACyQ,IAAI,CAAC2tE,SAAS,GAAGtsE,QAAQ,CAAC,CAAC;;;SAG9D,IAAIusE,OAAO,IAAIvsE,QAAQ,IAAIusE,OAAO,GAAGvsE,QAAQ,GAAGE,QAAQ,EAAE;MAC3DhS,UAAU,CAAC8+C,OAAO,EAAE;;;;;EAI5BkhC,cAAcA,CAAC;IAAE1nE,OAAO;IAAEivD;GAAK,EAAE;IAC7B,MAAM;MAAEvnE;KAAY,GAAG,IAAI;IAC3B,IAAIunE,GAAG,EAAE;MACLvnE,UAAU,CAAC6+C,iBAAiB,EAAE;MAC9B7+C,UAAU,CAAC8+C,OAAO,EAAE;KACvB,MACI;MACD,MAAMruC,IAAI,GAAG6H,OAAO,CAACnI,MAAM,CAAC,CAACM,IAAI,EAAE,GAAGpS,MAAM,CAAC,KAAK;QAC9C,MAAMK,GAAG,GAAG,IAAI,CAACypB,SAAS,CAAC9pB,MAAM,CAAC;QAClC,IAAIK,GAAG,EAAE;UACL+R,IAAI,CAAC5B,IAAI,CAACnQ,GAAG,CAAC;;QAElB,OAAO+R,IAAI;OACd,EAAE,EAAE,CAAC;;MAENzQ,UAAU,CAACo/C,qBAAqB,CAAC9mC,OAAO,CAAC;MACzCtY,UAAU,CAACsjB,UAAU,CAAC7S,IAAI,CAAC;;;EAGnCwvE,oBAAoBA,CAAC9oE,KAAK,EAAE;IACxB,IAAI,CAAC6gE,WAAW,CAAC7jC,YAAY,CAAC,eAAe,EAAE,IAAI,CAAC72C,KAAK,CAAC0B,KAAK,GAAG,CAAC,CAAC;;AAE5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAAC,IAAI,CAACkhF,OAAO,EAAE;MACf,OAAO,IAAI,CAACn5E,OAAO,CAAC,YAAY,EAAAwB,cAAA,CAAAA,cAAA,KAAO4O,KAAK;QAAE7Z,KAAK,EAAG6Z,KAAK,CAACmG,MAAM;QAAEA,MAAM,EAAG;SAAO;;;;AAIhG;AACA;AACA;AACA;EACIq9C,gBAAgBA,GAAG;;IAEf,KAAK,CAACA,gBAAgB,IAAI,KAAK,CAACA,gBAAgB,CAAC,GAAGj1D,SAAS,CAAC;IAC9D,IAAI,IAAI,CAACiqC,SAAS,EAAE;MAChB,IAAI,CAAC3vC,UAAU,CAAC6+C,iBAAiB,EAAE;MACnC,IAAI,CAACv7B,UAAU,CAAC,KAAK,CAAC;MACtB,IAAI,CAAC85B,eAAe,EAAE;;;;EAI9B+iC,aAAaA,CAAC;IAAErpE;GAAS,EAAE;IACvB,IAAI,IAAI,CAAC8gE,SAAS,IAAI9gE,OAAO,CAACw2B,QAAQ,CAAC3tC,MAAM,EAAE;MAC3C,MAAM8Q,IAAI,GAAG,EAAE;MACfqG,OAAO,CAACw2B,QAAQ,CAAC9/B,OAAO,CAACnP,MAAM,IAAI;QAC/B,MAAMK,GAAG,GAAG,IAAI,CAACsB,UAAU,CAACmoB,SAAS,CAAC9pB,MAAM,CAAC;QAC7CK,GAAG,IAAI+R,IAAI,CAAC5B,IAAI,CAACnQ,GAAG,CAAC;OACxB,CAAC;MACF,IAAI,CAACsB,UAAU,CAACsjB,UAAU,CAAC7S,IAAI,CAAC;;;;EAIxC,IAAI1L,IAAIA,GAAG;IACP,IAAI,IAAI,CAACq7E,MAAM,EAAE;MACb,OAAO,IAAI,CAACA,MAAM,CAAC9nE,OAAO;KAC7B,MACI;MACD,OAAO,IAAI,CAAC+nE,KAAK;;;EAGzB,IAAIt7E,IAAIA,CAACA,IAAI,EAAE;IACX,IAAI,IAAI,CAACq7E,MAAM,EAAE;MACb,IAAI,CAACA,MAAM,CAACr7E,IAAI,GAAGA,IAAI;KAC1B,MACI;MACD,IAAI,CAACs7E,KAAK,GAAGt7E,IAAI;;;;;;AAM7B;AACA;AACA;AACA;AACA;AACA;EACI6uB,kBAAkBA,CAAC;IAAEn0B,MAAM;IAAEimB;GAAO,EAAE;IAClC,MACI3nB,EAAE,GAAsB,IAAI;MAC5B;QAAEy4B,QAAQ;QAAEtE;OAAS,GAAGn0B,EAAE;MAC1B;QAAEyM;OAAQ,GAAc/K,MAAM;IAClC,IAAI09D,KAAK,GAAG,IAAI;IAChB54D,MAAM,CAACwc,OAAO,CAACyV,QAAQ,CAAC,CAAChpB,OAAO,CAAC,CAAC,CAACjD,MAAM,EAAEgB,OAAO,CAAC,KAAK;;MAEpD,IAAIA,OAAO,CAAC2rB,aAAa,EAAE;QACvB;;MAEJ,IACIz3B,MAAM,CAAC6e,SAAS,IAChB/T,MAAM,KAAK9K,MAAM,CAAC8K,MAAM,KACvB,CAACC,MAAM,IAAIgsB,QAAQ,CAAC/2B,MAAM,CAAC8K,MAAM,CAAC,CAACvM,OAAO,CAACgB,KAAK,GAAG,CAAC,IAAIwL,MAAM,IAAIA,MAAM,CAACvE,QAAQ,CAACtG,MAAM,GAAG,CAAC,CAAC,EAChG;QACE,MACI2gF,SAAS,GAAG/0E,OAAO,CAACrJ,OAAO,CAACW,uBAAuB,CAAC2zB,QAAQ,CAAC/2B,MAAM,CAAC8K,MAAM,CAAC,CAACrI,OAAO,CAAC,KAAKgvC,QAAQ,CAAC0gB,2BAA2B;UAC7H2uB,SAAS,GAAGxiF,EAAE,CAACkR,GAAG,GAAG,CAACqxE,SAAS,GAAGA,SAAS;;UAE3C54E,IAAI,GAAQwqB,OAAO,CAACvyB,MAAM,GAAG,CAAC,GACxB5B,EAAE,CAACyyB,CAAC,CAAC,iBAAiB,EAAEzyB,EAAE,CAACyiF,SAAS,CAACj2E,MAAM,CAAC,CAAC,GAC7CxM,EAAE,CAACyyB,CAAC,CAAC+vD,SAAS,GAAG,oBAAoB,GAAG,mBAAmB,CAAC;QACtE76D,KAAK,CAAE,GAAEnb,MAAO,QAAO,CAAC,GAAG;UACvBk2E,aAAa,EAAGl2E,MAAM;UACtB7C,IAAI;UACJsH,IAAI,EAAY,+BAA+B,IAAIuxE,SAAS,GAAG,OAAO,GAAG,MAAM,CAAC;UAChFG,SAAS,EAAOvjB,KAAK;UACrBruC,MAAM,EAAUA,CAAC;YAAEgE;WAAM,KAAK;YAC1BrzB,MAAM,CAACuW,QAAQ,CAACzC,GAAG,IAAIA,GAAG,CAAChJ,MAAM,GAAGA,MAAM,CAAC;;YAE3CxM,EAAE,CAACC,OAAO,CAAC25D,MAAM,CAAC55D,EAAE,CAACC,OAAO,CAACP,OAAO,CAAC+4B,QAAQ,CAAC1D,IAAI,CAAC2tD,aAAa,CAAC,CAACziF,OAAO,CAACouB,IAAI,CAAC,GAAG,CAAC,EAAE3sB,MAAM,CAAC;YAC5F1B,EAAE,CAACgwE,oBAAoB,CAACtuE,MAAM,CAAC;;SAEtC;QACD09D,KAAK,GAAG,KAAK;;KAEpB,CAAC;;;AAGV;AACA;AACA;AACA;AACA;AACA;AACA;EACIvuC,gBAAgBA,CAAC;IAAEvwB,MAAM;IAAEqnB;GAAO,EAAE;EACpC0K,yBAAyBA,CAAC3wB,MAAM,EAAEimB,KAAK,EAAE;IACrC,OAAOA,KAAK;;;;EAIhB4C,oBAAoBA,CAAClf,WAAW,EAAE;IAC9B,MACIxM,IAAI,GAAU,IAAI;MAClB;QAAEoB;OAAS,GAAGpB,IAAI;;IAEtB,IAAIwM,WAAW,CAAC5M,UAAU,EAAE;MACxB,OAAO4M,WAAW;;;IAGtB,IAAIA,WAAW,CAAC4iB,OAAO,EAAE;MACrB,OAAO,IAAI3vB,QAAQ,CAAC;QAChBO,IAAI;QACJY,EAAE,EAAS4L,WAAW,CAAC5L,EAAE;QACzBG,QAAQ,EAAGK,OAAO,CAACC,cAAc,CAAC,CAAC,CAAC,CAACT;OACxC,CAAC;;IAEN,OAAO,IAAInB,QAAQ,CAACyO,YAAY,CAACtG,MAAM,CAAC;MAAE5H;KAAM,EAAEwM,WAAW,CAAC,CAAC;;;;AAIvE;AACA;AACA;AACA;AACA;EACIhH,OAAOA,CAACgH,WAAW,EAAE;IACjB,MACI;QAAE9L,KAAK;QAAEU;OAAS,GAAG,IAAI;MACzB;QAAEC;OAAgB,GAAG,IAAI,CAACD,OAAO;MACjCX,QAAQ,GAAa,CAACoB,KAAK,CAAC2K,WAAW,CAAC1K,GAAG,CAAC,GAAG0K,WAAW,CAAC1K,GAAG,GAAG,CAACD,KAAK,CAAC2K,WAAW,CAAC/L,QAAQ,CAAC,GAAG+L,WAAW,CAAC/L,QAAQ,GAAGC,KAAK,CAACG,OAAO,CAAC2L,WAAW,CAAC/K,MAAM,IAAI+K,WAAW,CAAC5L,EAAE,CAAC;MAC1KgC,WAAW,GAAU,CAACf,KAAK,CAAC2K,WAAW,CAAC3J,MAAM,CAAC,GAAG2J,WAAW,CAAC3J,MAAM,GAAG,CAAChB,KAAK,CAAC2K,WAAW,CAAC5J,WAAW,CAAC,GAAG4J,WAAW,CAAC5J,WAAW,GAAGvB,cAAc,CAACR,OAAO,CAAC2L,WAAW,CAAC3J,MAAM,IAAIzB,OAAO,CAACqB,OAAO,CAAC+J,WAAW,CAACzL,QAAQ,CAAC,IAAIK,OAAO,CAACsB,GAAG,CAAC8J,WAAW,CAAC7J,KAAK,CAAC,IAAItB,cAAc,CAAC,CAAC,CAAC,CAAC;;;;IAIjR,OAAOZ,QAAQ,GAAG,CAAC,CAAC,IAAIA,QAAQ,GAAGC,KAAK,CAAC0B,KAAK,IAAIQ,WAAW,GAAG,CAAC,CAAC,IAAIA,WAAW,GAAGvB,cAAc,CAAC0B,MAAM,IAAI,IAAI,CAAC2oB,oBAAoB,CAAClf,WAAW,CAAC,CAACrM,IAAI,IAAI,IAAI;;;;AAIxK;AACA;AACA;AACA;AACA;EACI8O,gBAAgBA,CAAClO,QAAQ,EAAE;IACvB,IAAIA,QAAQ,CAACquB,OAAO,EAAE;MAClBruB,QAAQ,GAAGA,QAAQ,CAACH,EAAE;;IAE1B,OAAO,IAAI,CAAC6wE,SAAS,CAAE,kCAAiC1wE,QAAS,IAAG,CAAC;;EAEzEuvC,uBAAuBA,CAAC3tC,KAAK,EAAE;IAC3B,MAAME,MAAM,GAAG,IAAI,CAACzB,OAAO,CAACsB,GAAG,CAACC,KAAK,CAAC;IACtC,OAAOE,MAAM,GAAG,IAAI,CAACoM,gBAAgB,CAACpM,MAAM,CAAC,GAAG,IAAI;;;AAG5D;AACA;AACA;AACA;AACA;EACI,IAAIw+C,UAAUA,GAAG;IACb,OAAO,IAAI,CAAC2O,WAAW;;;AAG/B;AACA;AACA;AACA;AACA;EACI,IAAIggB,YAAYA,GAAG;IACf,MAAM7uE,EAAE,GAAG,IAAI;;IAEf,IAAIA,EAAE,CAAC4xC,SAAS,IAAI,CAAC5xC,EAAE,CAAC4iF,aAAa,EAAE;MACnC5iF,EAAE,CAAC4iF,aAAa,GAAG5iF,EAAE,CAAC43B,eAAe,CAACge,YAAY;;IAEtD,OAAO51C,EAAE,CAAC4iF,aAAa;;;AAG/B;AACA;AACA;AACA;AACA;EACI,IAAIC,YAAYA,GAAG;IACf,MAAM7iF,EAAE,GAAG,IAAI;;IAEf,IAAIA,EAAE,CAAC4xC,SAAS,IAAI,CAAC5xC,EAAE,CAAC8iF,aAAa,EAAE;MACnC9iF,EAAE,CAAC8iF,aAAa,GAAG9iF,EAAE,CAACwyE,eAAe,CAAC58B,YAAY;;IAEtD,OAAO51C,EAAE,CAAC8iF,aAAa;;EAE3B,IAAIC,aAAaA,GAAG;IAAA,IAAAC,qBAAA;IAChB,OAAO99E,OAAO,EAAA89E,qBAAA,GAAC,IAAI,CAACvjE,QAAQ,CAACwjE,SAAS,cAAAD,qBAAA,uBAAvBA,qBAAA,CAAyBh3C,SAAS,CAAC;;;AAG1D;AACA;AACA;AACA;AACA;EACIk3C,oBAAoBA,CAAC/+E,OAAO,EAAE;IAC1B,MAAM6zC,EAAE,GAAG7zC,OAAO,CAAClF,OAAO,CAAC,aAAa,CAAC;IACzC,IAAI,CAAC+4C,EAAE,EAAE,OAAO,IAAI;IACpB,OAAO,IAAI,CAACz4C,KAAK,CAAC4B,KAAK,CAAC62C,EAAE,CAAC74C,OAAO,CAACQ,KAAK,CAAC;;;AAGjD;AACA;AACA;AACA;AACA;EACI+vC,oBAAoBA,CAACvrC,OAAO,EAAE;IAC1B,MAAMnF,IAAI,GAAGmF,OAAO,CAAClF,OAAO,CAAC,8BAA8B,CAAC;IAC5D,IAAI,CAACD,IAAI,EAAE,OAAO,IAAI;IACtB,IAAIA,IAAI,CAACs0B,OAAO,CAAC,gBAAgB,CAAC,EAAE;MAChC,OAAO,IAAI,CAACrzB,OAAO,CAACqB,OAAO,CAACtC,IAAI,CAACG,OAAO,CAACS,QAAQ,CAAC;;IAEtD,MAAM4wB,QAAQ,GAAGyf,YAAY,CAAC1uC,GAAG,CAACvC,IAAI,CAAC;IACvC,OAAO,IAAI,CAACiB,OAAO,CAACqB,OAAO,CAACkvB,QAAQ,CAAC5wB,QAAQ,CAAC;;;EAGlDujF,gBAAgBA,CAAC72E,UAAU,EAAE;IACzBS,YAAY,CAACq2E,aAAa,CAAC92E,UAAU,EAAE,YAAY,CAAC;;;EAGxD,IAAIquE,WAAWA,GAAG;IACd,OAAO,IAAI,CAAC0I,YAAY;;EAE5B,IAAI1I,WAAWA,CAACA,WAAW,EAAE;IACzB5tE,YAAY,CAACq2E,aAAa,CAACzI,WAAW,EAAE,aAAa,CAAC;IACtD51E,SAAS,CAACkqE,aAAa,CAAC,IAAI,CAAC9qE,OAAO,EAAE,mBAAmB,EAAE,CAACw2E,WAAW,CAAC;IACxE,IAAI,CAAC0I,YAAY,GAAG1I,WAAW;;EAEnC,IAAI2I,aAAaA,GAAG;IAChB,OAAO,IAAI,CAAC/5B,WAAW;;;;;AAK/B;AACA;AACA;AACA;EACIg6B,QAAQA,GAAG;;IAEP,IAAI,CAAC3Q,eAAe,CAAC,WAAW,CAAC;;IAEjC,MAAM4Q,UAAU,GAAG,IAAI,CAAC5rD,eAAe,CAACywC,gBAAgB,CAAC,0BAA0B,CAAC;;IAEpF,KAAK,IAAIp1D,CAAC,GAAG,CAAC,EAAE;QAAErR;OAAQ,GAAG4hF,UAAU,EAAEvwE,CAAC,GAAGrR,MAAM,EAAEqR,CAAC,EAAE,EAAE;MACtDuwE,UAAU,CAACvwE,CAAC,CAAC,CAACmjC,YAAY,CAAC,eAAe,EAAEnjC,CAAC,GAAG,CAAC,CAAC;;;EAG1DwwE,6BAA6BA,CAAC;IAAErkC,WAAW;IAAEqF;GAAW,EAAE;IACtD,OAAO,IAAI,CAACi/B,kBAAkB,CAACtkC,WAAW,EAAEqF,SAAS,CAAC;;;AAG9D;AACA;AACA;AACA;AACA;AACA;AACA;EACIi/B,kBAAkBA,CAAC/tC,MAAM,GAAG,IAAI,CAAC1zC,UAAU,CAACm9C,WAAW,EAAEqF,SAAS,GAAG,KAAK,EAAE;IACxE,MAAMzkD,EAAE,GAAG,IAAI;;IAEf,IAAIA,EAAE,CAAC0kD,aAAa,IAAI,CAAC1kD,EAAE,CAACkP,SAAS,EAAE;MACnC,OAAO,KAAK;;IAEhB,MACIq2C,QAAQ,GAAOvlD,EAAE,CAAC6D,UAAU;MAC5Bq6C,KAAK,GAAUr9C,IAAI,CAACgjD,GAAG,CAAC7jD,EAAE,CAACq7E,mBAAmB,GAAG1lC,MAAM,CAAC;MACxD7xC,YAAY,GAAG9D,EAAE,CAAC2hD,cAAc,CAAChM,MAAM;MACvCguC,OAAO,GAAQhuC,MAAM,GAAG7xC,YAAY;IACxC,IAAIo6C,KAAK,EAAE;MACP;;MAEI0lC,UAAU,GAAID,OAAO,GAAG3jF,EAAE,CAACs7E,UAAU,GAAGx3E,YAAY,GAAG,CAAC;;MAEnD9D,EAAE,CAACo7E,qBAAqB,IAAKp7E,EAAE,CAACo7E,qBAAqB,GAAGt3E,YAAY,GAAG9D,EAAE,CAACs7E,UAAY;;MAE/F/1B,QAAQ,CAACgB,YAAY,GAAGvmD,EAAE,CAACq7E,mBAAmB,GAAG1lC,MAAM;;;;MAIvD,IAAI31C,EAAE,CAAC4xC,SAAS,KAAK5xC,EAAE,CAAC4sD,SAAS,IAAI,CAACg3B,UAAU,IAAI1lC,KAAK,GAAG,GAAG,CAAC,IAAI,CAACuG,SAAS,EAAE;QAC5EzkD,EAAE,CAAC27E,yBAAyB,EAAE;OACjC,MACI;QACD37E,EAAE,CAAC6jF,wBAAwB,IAAI7jF,EAAE,CAAC6jF,wBAAwB,EAAE;QAC5D7jF,EAAE,CAAC27E,yBAAyB,CAACjzD,MAAM,EAAE;QACrC1oB,EAAE,CAAC8jF,iBAAiB,EAAE;;;;EAIlCA,iBAAiBA,GAAG;IAChB,MACI9jF,EAAE,GAAW,IAAI;MACjB21C,MAAM,GAAO31C,EAAE,CAACq7E,mBAAmB;MACnC0I,UAAU,GAAI,GAAEpuC,MAAO,IAAG;IAC9B31C,EAAE,CAACo7E,qBAAqB,GAAWzlC,MAAM;IACzC31C,EAAE,CAACgrE,gBAAgB,CAACv3D,KAAK,CAACkiC,MAAM,GAAGouC,UAAU;IAC7C/jF,EAAE,CAAC6jF,wBAAwB,GAAQ,KAAK;IACxC,IAAI7jF,EAAE,CAACsM,UAAU,EAAE;MACftM,EAAE,CAAC0vB,aAAa,CAACjc,KAAK,CAACkiC,MAAM,GAAGouC,UAAU;MAC1C/jF,EAAE,CAAC6uD,WAAW,GAAkBlZ,MAAM;MACtC31C,EAAE,CAAC4hD,oBAAoB,EAAE;;IAE7B5hD,EAAE,CAAC8uD,wBAAwB,EAAE;;EAEjClN,oBAAoBA,GAAG;IACnB,OAAO,IAAI,CAACD,cAAc,GAAGtM,SAAS,CAAC9oB,MAAM,CAAC,IAAI,CAACmD,aAAa,CAAC;;;;EAIrE,IAAIk9B,SAASA,CAACA,SAAS,EAAE;IACrB,IAAI,CAACmjB,UAAU,GAAGnjB,SAAS;;EAE/B,IAAIA,SAASA,GAAG;IACZ,OAAO,IAAI,CAACmjB,UAAU;;;AAG9B;AACA;AACA;AACA;AACA;AACA;EACIpS,2BAA2BA,CAACllC,QAAQ,EAAE;IAClC,IAAI,CAACtB,aAAa,CAAC6sD,eAAe,CAAC;MAC/BlsD,WAAW,EAAG,CACV;QACI3zB,OAAO,EAAK,IAAI,CAACN,UAAU,CAACM,OAAO;QACnC8zB,SAAS,EAAG;OACf,EACD,GAAG+E,WAAW,CAACsR,OAAO,CAAC7V,QAAQ,IAAI,EAAE,CAAC,CAACtc,GAAG,CAAC3O,OAAO,KAC9C;QAAErJ,OAAO,EAAG,CAAC,OAAOqJ,OAAO,KAAK,QAAQ,GAAG,IAAI,CAACirB,QAAQ,CAACjrB,OAAO,CAAC,GAAGA,OAAO,EAAE3J,UAAU,CAACM;OAAS,CACpG,CAAC,CACL;MACD8zB,SAAS,EAAG;KACf,CAAC;;;AAGV;AACA;AACA;AACA;AACA;EACI6mC,4BAA4BA,CAACrmC,QAAQ,EAAE;IACnC,IAAI,CAACtB,aAAa,CAAC8sD,cAAc,CAAC,CAC9B,IAAI,CAACpgF,UAAU,CAACM,OAAO,EACvB,GAAG64B,WAAW,CAACsR,OAAO,CAAC7V,QAAQ,IAAI,EAAE,CAAC,CAACtc,GAAG,CAAC3O,OAAO,IAAI,CAAC,OAAOA,OAAO,KAAK,QAAQ,GAAG,IAAI,CAACirB,QAAQ,CAACjrB,OAAO,CAAC,GAAGA,OAAO,EAAErJ,OAAO,CAAC,CAClI,CAAC;;;AAGV;AACA;AACA;AACA;AACA;AACA;EACI+/E,+BAA+BA,CAAC;IAAE1qD;GAAQ,EAAE;IACxC,IAAI,CAAC31B,UAAU,CAAC67C,CAAC,GAAGlmB,MAAM,GAAG,IAAI,CAAC0mB,UAAU;;;AAGpD;AACA;AACA;AACA;AACA;EACI0F,UAAUA,GAAG;IACT,MACI5lD,EAAE,GAAe,IAAI;MACrB;QAAE6D;OAAY,GAAG7D,EAAE;;;IAGvB,IAAI,CAACA,EAAE,CAACw7E,iBAAiB,EAAE;MACvBx7E,EAAE,CAACw7E,iBAAiB,GAAG,IAAI;;;MAG3B33E,UAAU,CAAC2K,cAAc,GAAGxO,EAAE,CAACwO,cAAc;MAC7C3K,UAAU,CAACuT,GAAG,CAAC;QACXq+C,MAAM,EAAM,sBAAsB;QAClCga,SAAS,EAAG,yBAAyB;QACrCl4D,OAAO,EAAKvX;OACf,CAAC;MACFA,EAAE,CAAC4yE,eAAe,CAAC,YAAY,CAAC;;MAEhC,IAAIh/C,aAAa,CAAC+H,cAAc,EAAE;QAC9B93B,UAAU,CAACM,OAAO,CAACsP,KAAK,CAACkjC,SAAS,GAAG,sBAAsB;;;;EAIvE4iC,oBAAoBA,CAAC;IAAEh6D,MAAM,EAAG1b;GAAY,EAAE;IAC1C,MACI7D,EAAE,GAAkB,IAAI;MACxB;QAAE0/C,CAAC,EAAG0oB;OAAW,GAAGvkE,UAAU;;IAElC,IAAIukE,SAAS,KAAKpoE,EAAE,CAACs7E,UAAU,EAAE;MAC7Bt7E,EAAE,CAACs7E,UAAU,GAAGlT,SAAS;MACzB,IAAI,CAACpoE,EAAE,CAAC4sD,SAAS,EAAE;QACf5sD,EAAE,CAAC4sD,SAAS,GAAG,IAAI;;QAEnB5sD,EAAE,CAACsnE,WAAW,CAAC14D,CAAC,IAAIA,CAAC,CAACu1E,oBAAoB,GAAG,IAAI,CAAC;;MAEtDnkF,EAAE,CAACiC,UAAU,CAAC6hD,kBAAkB,CAACskB,SAAS,CAAC;;MAE3CpoE,EAAE,CAACokF,WAAW,CAAC;QAAEhc;OAAW,CAAC;;AAEzC;AACA;AACA;AACA;AACA;MACYpoE,EAAE,CAACgJ,OAAO,CAAC,QAAQ,EAAE;QAAEo/D;OAAW,CAAC;;;EAG3Cic,uBAAuBA,GAAG;IACtB,IAAI,CAACz3B,SAAS,GAAG,KAAK;IACtB,IAAI,CAAC0a,WAAW,CAAC14D,CAAC,IAAIA,CAAC,CAACu1E,oBAAoB,GAAG,KAAK,CAAC;;;;AAI7D;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMljC,iBAAiBA,CAAC3mC,UAAU,EAAEzE,OAAO,GAAG6yD,oBAAoB,EAAE;IAChE,MACI1oE,EAAE,GAAe,IAAI;MACrBskF,aAAa,GAAIzuE,OAAO,CAACqrC,KAAK,IAAI,SAAS;MAC3C;QAAEj/C;OAAY,GAAGjC,EAAE;MACnBM,MAAM,GAAWN,EAAE,CAACT,KAAK,CAAC+B,OAAO,CAACgZ,UAAU,CAAC;IACjD,IAAIha,MAAM,EAAE;MACR,IAAIikF,aAAa;;MAEjB,IAAIvkF,EAAE,CAACT,KAAK,CAACG,OAAO,CAACY,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE;QACjC,OAAOu4E,eAAe;;MAE1B,IAAItzB,QAAQ,GAAKvlD,EAAE,CAAC6D,UAAU;QAC1B2gF,UAAU,GAAGxkF,EAAE,CAACwhD,eAAe,CAAClhD,MAAM,CAAC;MAC3C,MAAMmkF,YAAY,GAAGpvC,SAAS,CAACC,IAAI,CAACiQ,QAAQ,CAACphD,OAAO,CAAC;;;;;;;MAOrD,IAAIqgF,UAAU,CAACtiC,OAAO,EAAE;QACpB,MACIwiC,YAAY,GAAGF,UAAU,CAACtjC,KAAK;UAC/ByjC,YAAY,GAAGL,aAAa,KAAK,SAAS,GAAGzuE,OAAO,GAAG;YACnDqrC,KAAK,EAAGwjC;WACX;;;;QAILH,aAAa,GAAGh/B,QAAQ,CAACW,cAAc,CAACs+B,UAAU,EAAE;UAChDtjC,KAAK,EAAG;SACX,CAAC;QACFj/C,UAAU,CAACg7C,oBAAoB,GAAG38C,MAAM;QACxC2B,UAAU,CAAC6hD,kBAAkB,CAACyB,QAAQ,CAAC7F,CAAC,EAAE,IAAI,CAAC;QAC/C8kC,UAAU,GAAiBxkF,EAAE,CAACwhD,eAAe,CAAClhD,MAAM,CAAC;QACrD2B,UAAU,CAAC06C,aAAa,GAAG4I,QAAQ,CAAC7F,CAAC;QACrC,IAAI8kC,UAAU,CAACtiC,OAAO,EAAE;;;UAGpB,OAAO22B,eAAe;;;QAG1B,IAAIhjE,OAAO,CAAC4Y,OAAO,EAAE;;;UAGjB82B,QAAQ,CAAC3mC,aAAa,EAAE;;UAExB,IAAI0lE,aAAa,KAAK,KAAK,IAAIA,aAAa,KAAK,SAAS,IAAII,YAAY,KAAK,KAAK,EAAE;YAClFn/B,QAAQ,CAAC7F,CAAC,IAAK+kC,YAAY,CAACjrD,MAAM,GAAGgrD,UAAU,CAAChrD,MAAO;WAC1D,MACI,IAAI8qD,aAAa,KAAK,OAAO,IAAIA,aAAa,KAAK,SAAS,IAAII,YAAY,KAAK,OAAO,EAAE;YAC3Fn/B,QAAQ,CAAC7F,CAAC,IAAK8kC,UAAU,CAAC9kC,CAAC,GAAG+kC,YAAY,CAAC/kC,CAAE;;;UAGjDz9C,UAAU,CAAC6hD,kBAAkB,CAACyB,QAAQ,CAAC7F,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC;;UAEtD,IAAIglC,YAAY,KAAK,KAAK,EAAE;YACxBn/B,QAAQ,CAAC7F,CAAC,IAAKz9C,UAAU,CAACy6C,eAAe,GAAGz6C,UAAU,CAAC8B,SAAS,GAAG,CAAE;WACxE,MACI;YACDwhD,QAAQ,CAAC7F,CAAC,IAAKz9C,UAAU,CAACw6C,gBAAgB,GAAGx6C,UAAU,CAAC8B,SAAS,GAAG,CAAE;;;UAG1EwhD,QAAQ,CAACW,cAAc,CAAClmD,EAAE,CAACwhD,eAAe,CAAClhD,MAAM,CAAC,EAAEkG,MAAM,CAACC,MAAM,CAAC,EAAE,EAAEoP,OAAO,EAAE8uE,YAAY,CAAC,CAAC;;UAE7Fp/B,QAAQ,CAACzmC,YAAY,EAAE;SAC1B,MACI;UAAA,IAAA8lE,qBAAA;UACD,IAAI,CAAC/uE,OAAO,CAACgvE,SAAS,EAAE;YACpB,MAAMN,aAAa;;;UAGvB,QAAAK,qBAAA,GAAM5kF,EAAE,CAACihD,iBAAiB,cAAA2jC,qBAAA,uBAApBA,qBAAA,CAAA16E,IAAA,CAAAlK,EAAE,EAAqBM,MAAM,EAAEkG,MAAM,CAACC,MAAM,CAAC;YAAEo+E,SAAS,EAAG;WAAM,EAAEhvE,OAAO,EAAE8uE,YAAY,CAAC,CAAC;;OAEvG,MACI;QACD,IAAI;UAAEjjF;SAAQ,GAAGmU,OAAO;QACxB,IAAInU,MAAM,EAAE;UACR,IAAI,CAACA,MAAM,CAACusB,OAAO,EAAE;YACjBvsB,MAAM,GAAG1B,EAAE,CAACC,OAAO,CAACqB,OAAO,CAACI,MAAM,CAAC,IAAI1B,EAAE,CAACC,OAAO,CAACsB,GAAG,CAACG,MAAM,CAAC;;;UAGjE,IAAIA,MAAM,EAAE;YACR6jD,QAAQ,GAAGvlD,EAAE,CAAC4N,oBAAoB,CAAClM,MAAM,CAAC,CAACmC,UAAU;YACrD,MAAMiyD,QAAQ,GAAGzgB,SAAS,CAACC,IAAI,CAACrzC,UAAU,CAACmoB,SAAS,CAAC9pB,MAAM,CAAC,CAAC+D,OAAO,CAAC3C,MAAM,CAACjC,EAAE,CAAC,CAAC;YAChF+kF,UAAU,CAAC3iC,CAAC,GAAOiU,QAAQ,CAACjU,CAAC;YAC7B2iC,UAAU,CAACx8E,KAAK,GAAG8tD,QAAQ,CAAC9tD,KAAK;;;;aAIpC;UACD6N,OAAO,CAACgsC,CAAC,GAAG,KAAK;;QAErB,OAAO0D,QAAQ,CAACW,cAAc,CAACs+B,UAAU,EAAE3uE,OAAO,CAAC;;;;;AAKnE;AACA;AACA;AACA;AACA;AACA;AACA;EACIm6D,oBAAoBA,CAACtuE,MAAM,EAAEmU,OAAO,EAAE;IAClCnU,MAAM,GAAIA,MAAM,YAAY+D,MAAM,GAAI/D,MAAM,GAAG,IAAI,CAACzB,OAAO,CAACsB,GAAG,CAACG,MAAM,CAAC,IAAI,IAAI,CAACzB,OAAO,CAACqB,OAAO,CAACI,MAAM,CAAC,IAAI,IAAI,CAACzB,OAAO,CAACkB,KAAK,CAACO,MAAM,CAAC;IACrI,OAAO,IAAI,CAACkM,oBAAoB,CAAClM,MAAM,CAAC,CAACsuE,oBAAoB,CAACtuE,MAAM,EAAEmU,OAAO,CAAC;;;;AAItF;AACA;AACA;AACA;EACIivE,kBAAkBA,CAACz5E,WAAW,EAAEwK,OAAO,EAAE;IACrC,OAAO,IAAI,CAACorC,iBAAiB,CAAC51C,WAAW,CAAC5L,EAAE,EAAE+G,MAAM,CAACC,MAAM,CAAC;MACxD/E,MAAM,EAAG2J,WAAW,CAACzL;KACxB,EAAE,OAAOiW,OAAO,KAAK,SAAS,GAAG;MAAE4Y,OAAO,EAAG5Y;KAAS,GAAGA,OAAO,CAAC,CAAC;;;AAG3E;AACA;AACA;AACA;EACIkvE,cAAcA,CAAClvE,OAAO,EAAE;;IAEpB,OAAO,IAAI,CAACorC,iBAAiB,CAAC,IAAI,CAAC1hD,KAAK,CAAC8uB,IAAI,EAAExY,OAAO,CAAC;;;AAG/D;AACA;AACA;AACA;EACImvE,WAAWA,CAACnvE,OAAO,EAAE;IACjB,OAAO,IAAI,CAAChS,UAAU,CAACmlE,QAAQ,CAAC,CAAC,EAAE,CAAC,IAAI,CAACnlE,UAAU,CAAC67C,CAAC,EAAE7pC,OAAO,CAAC;;;AAGvE;AACA;AACA;AACA;AACA;EACIwxD,WAAWA,GAAG;IACV,MACIrnE,EAAE,GAAM,IAAI;MACZwU,KAAK,GAAGxU,EAAE,CAACilF,iBAAiB,GAAG;QAC3B7c,SAAS,EAAIpoE,EAAE,CAAC6D,UAAU,CAAC67C,CAAC;QAC5BuuB,UAAU,EAAG;OAChB;;;IAGLjuE,EAAE,CAACsnE,WAAW,CAAC95D,OAAO,IAAI;MACtBgH,KAAK,CAACy5D,UAAU,CAACzgE,OAAO,CAAChB,MAAM,CAAC,GAAGgB,OAAO,CAAC3J,UAAU,CAACg+C,CAAC;KAC1D,CAAC;IACF,OAAOrtC,KAAK;;;AAGpB;AACA;AACA;AACA;EACI2zD,aAAaA,CAAC3zD,KAAK,GAAG,IAAI,CAACywE,iBAAiB,EAAE;IAC1C,MAAMjlF,EAAE,GAAG,IAAI;;;IAGfA,EAAE,CAACsnE,WAAW,CAAC95D,OAAO,IAAI;MACtB,MAAMq0C,CAAC,GAAGrtC,KAAK,CAACy5D,UAAU,CAACzgE,OAAO,CAAChB,MAAM,CAAC;;;MAG1C,IAAIq1C,CAAC,IAAI,IAAI,EAAE;QAAA,IAAAqjC,qBAAA;QACX13E,OAAO,CAAC3J,UAAU,CAACshF,OAAO,CAACtjC,CAAC,CAAC;QAC7Br0C,OAAO,CAACkhC,MAAM,CAAC7qC,UAAU,CAACshF,OAAO,CAACtjC,CAAC,CAAC;QACpCr0C,OAAO,CAACg9D,MAAM,CAAC3mE,UAAU,CAACshF,OAAO,CAACtjC,CAAC,CAAC;QACpC,CAAAqjC,qBAAA,GAAA13E,OAAO,CAACi+D,YAAY,cAAAyZ,qBAAA,uBAApBA,qBAAA,CAAsBC,OAAO,CAACtjC,CAAC,CAAC;;KAEvC,CAAC;IACF7hD,EAAE,CAAC6D,UAAU,CAACuhF,OAAO,CAAC5wE,KAAK,CAAC4zD,SAAS,CAAC;;;;EAI1Cv1D,kBAAkBA,GAAG;IACjB,MAAM7S,EAAE,GAAG,IAAI;IACf,IAAI,CAACA,EAAE,CAACqlF,oBAAoB,EAAE;MAC1BrlF,EAAE,CAACqlF,oBAAoB,GAAGtgF,SAAS,CAACu8B,aAAa,CAAC;;;QAG9CC,SAAS,EAAG,iBAAiB,IAAI,CAACvhC,EAAE,CAACs+E,cAAc,IAAIt+E,EAAE,CAACiwD,UAAU,CAAC,QAAQ,CAAC,GAAG,UAAU,GAAG,EAAE,CAAC;QACjGrJ,SAAS,EAAG,gBAAgB;QAC5BnzC,KAAK,EAAO;UACR6xE,QAAQ,EAAK,UAAU;UACvBnyD,GAAG,EAAU,UAAU;UACvB22B,IAAI,EAAS,WAAW;UACxBy7B,UAAU,EAAG,QAAQ;UACrBC,OAAO,EAAM;SAChB;QACDt9E,QAAQ,EAAG,CACP;UACIq5B,SAAS,EAAG,YAAY;UACxBqlB,SAAS,EAAG,YAAY;UACxB1+C,QAAQ,EAAI,CACR;YACIq5B,SAAS,EAAG,aAAa;YACzBqlB,SAAS,EAAG,aAAa;YACzBnzC,KAAK,EAAO;cACRzL,KAAK,EAAK,MAAM;cAChBw9E,OAAO,EAAG5xD,aAAa,CAACm3C,SAAS,GAAG,cAAc,GAAG;;WAE5D;SAER;OAER,CAAC;;;IAGN/qE,EAAE,CAAC2mD,SAAS,CAAC,SAAS,CAAC;;IAEvB3mD,EAAE,CAACgrE,gBAAgB,CAACzsD,WAAW,CAACve,EAAE,CAACqlF,oBAAoB,CAACx3E,cAAc,CAAC;;IAEvE,IAAI,CAAC7N,EAAE,CAAC0gB,QAAQ,EAAE;MACd,MACI+kE,QAAQ,GAAMzlF,EAAE,CAACye,QAAQ,IAAIze,EAAE,CAAC8c,YAAY,IAAIq2B,QAAQ,CAACuyC,IAAI;QAC7D3/D,WAAW,GAAGhhB,SAAS,CAAC4gF,cAAc,CAAC,OAAOF,QAAQ,KAAK,QAAQ,GAAGtyC,QAAQ,CAACyyC,cAAc,CAACH,QAAQ,CAAC,GAAGA,QAAQ,CAAC;MACvH,IAAI,CAACzlF,EAAE,CAAC6lF,KAAK,IAAI,CAAC9/D,WAAW,CAACja,QAAQ,CAAC9L,EAAE,CAACmE,OAAO,CAAC,EAAE;QAChD4hB,WAAW,CAACxH,WAAW,CAACve,EAAE,CAACmE,OAAO,CAAC;QACnCnE,EAAE,CAAC8lF,qBAAqB,GAAG,IAAI;;;IAGvC,OAAO9lF,EAAE,CAACqlF,oBAAoB;;EAElC/wE,gBAAgBA,GAAG;;IAEf,IAAI,IAAI,CAACwxE,qBAAqB,EAAE;MAC5B,IAAI,CAAC3hF,OAAO,CAACuQ,MAAM,EAAE;MACrB,IAAI,CAACoxE,qBAAqB,GAAG,KAAK;;;IAGtC,IAAI,CAACT,oBAAoB,CAACx3E,cAAc,CAAC6G,MAAM,EAAE;;;AAGzD;AACA;AACA;EACI6pE,gBAAgBA,GAAG;IACf,MACIv+E,EAAE,GAAe,IAAI;;MAErB;QAAE2S;OAAY,GAAG3S,EAAE,CAAC6S,kBAAkB,EAAE;;;MAGxCkzE,MAAM,GAAWhhF,SAAS,CAACkc,aAAa,CAACtO,UAAU,EAAE,CAAC,QAAQ,EAAE,kBAAkB,EAAE,qBAAqB,CAAC,CAAC;MAC3GqzE,WAAW,GAAM/zE,QAAQ,CAAC8zE,MAAM,CAACpwC,MAAM,CAAC;;;MAGxCswC,UAAU,GAAOryD,aAAa,CAACm3C,SAAS,GAAGr3D,UAAU,CAACi7C,gBAAgB,GAAG9tD,IAAI,CAACC,GAAG,CAACD,IAAI,CAACqlF,KAAK,CAACxyE,UAAU,CAACi7C,gBAAgB,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC;MACjIw3B,SAAS,GAAQJ,MAAM,CAAC,kBAAkB,CAAC,GAAGllF,IAAI,CAACmT,KAAK,CAACiyE,UAAU,GAAGG,UAAU,CAACL,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC,GAAG,CAAC;MACjHM,YAAY,GAAKN,MAAM,CAAC,qBAAqB,CAAC,GAAGllF,IAAI,CAACmT,KAAK,CAACiyE,UAAU,GAAGG,UAAU,CAACL,MAAM,CAAC,qBAAqB,CAAC,CAAC,CAAC,GAAG,CAAC;;;IAG3H,IAAI/lF,EAAE,CAAC+D,SAAS,IAAI,IAAI,IAAI/D,EAAE,CAAC+D,SAAS,KAAK/D,EAAE,CAACsmF,mBAAmB,EAAE;MACjEtmF,EAAE,CAAC+D,SAAS,GAAa,CAACrD,KAAK,CAACslF,WAAW,CAAC,IAAIA,WAAW,GAAGA,WAAW,GAAGhmF,EAAE,CAACo6E,gBAAgB;MAC/Fp6E,EAAE,CAACsmF,mBAAmB,GAAGtmF,EAAE,CAAC+D,SAAS;;;IAGzC/D,EAAE,CAAC61C,gBAAgB,GAAGswC,SAAS,GAAGE,YAAY;IAC9CrmF,EAAE,CAACs+E,cAAc,GAAG,IAAI;IACxBt+E,EAAE,CAACsU,gBAAgB,EAAE;;;;;AAK7B;AACA;AACA;EACIiyE,aAAaA,CAAC;IAAE7K;GAAO,EAAE;;IAErB,IAAI,CAAC8K,WAAW,CAAC,kBAAkB,CAAC;IACpC,IAAI,CAACx9E,OAAO,CAAC,OAAO,EAAE;MAAE0yE;KAAO,CAAC;;;;;AAKxC;AACA;AACA;AACA;EACIj6C,WAAWA,CAACoc,WAAW,GAAG,KAAK,EAAE;IAC7B,MAAM;MAAE15C,OAAO;MAAElC;KAAY,GAAG,IAAI;IACpCkC,OAAO,CAAC0H,SAAS,CAACwS,GAAG,CAAC,gBAAgB,CAAC;IACvC,IAAIw/B,WAAW,EAAE;MACb57C,UAAU,CAAC47C,WAAW,EAAE;KAC3B,MACI;MACD57C,UAAU,CAAC8+C,OAAO,EAAE;;IAExB58C,OAAO,CAAC0H,SAAS,CAAC6I,MAAM,CAAC,gBAAgB,CAAC;;;AAGlD;AACA;AACA;AACA;EACImpE,aAAaA,CAACn8E,MAAM,EAAE;IAClB,IAAIA,MAAM,CAACwN,SAAS,EAAE;MAClB,IAAIxN,MAAM,CAACkG,MAAM,EAAE;QACf,IAAI,CAAC3F,UAAU,CAACwN,OAAO,CAAC9O,GAAG,IAAIA,GAAG,CAACyT,UAAU,CAACzT,GAAG,CAAC0D,OAAO,CAAC3C,MAAM,CAACjC,EAAE,CAAC,CAAC,CAAC;OACzE,MACI;QACDiC,MAAM,CAACwG,QAAQ,CAACuH,OAAO,CAACD,KAAK,IAAI,IAAI,CAACquE,aAAa,CAACruE,KAAK,CAAC,CAAC;;;;;;;AAO3E;AACA;AACA;EACIs/C,wBAAwBA,GAAG;;;IAGvB,MACI9uD,EAAE,GAA0B,IAAI;MAChC;QACI43B,eAAe;QACf46C,eAAe;QACfvsB,gBAAgB;QAChBpiD,UAAU;QACV4iF;OACH,GAA2BzmF,EAAE;MAC9B;QAAE6L;OAAW,GAAeo6C,gBAAgB;MAC5CygC,qBAAqB,GAAO,CAAC76E,SAAS,CAACC,QAAQ,CAAC,gBAAgB,CAAC;;;MAGjE66E,qBAAqB,GAAOngF,MAAM,CAACmE,MAAM,CAAC3K,EAAE,CAACy4B,QAAQ,CAAC,CAAC9pB,IAAI,CAACnB,OAAO,IAAIA,OAAO,CAAC2hE,uBAAuB,CAAC;MACvGyX,yBAAyB,GAAGD,qBAAqB,KAAKD,qBAAqB;;;IAG/E,IAAIE,yBAAyB,EAAE;MAC3B3gC,gBAAgB,CAACp6C,SAAS,CAACgE,MAAM,CAAC,gBAAgB,EAAE,CAAC82E,qBAAqB,CAAC;;;IAG/E,IAAI5hF,SAAS,CAAC8mD,cAAc,EAAE;;MAE1B,MAAMg7B,YAAY,GAAGJ,mBAAmB,IAAI5iF,UAAU,CAACm3E,SAAS,KAAK,QAAQ;MAC7EpjD,eAAe,CAAC/rB,SAAS,CAACgE,MAAM,CAAC,wBAAwB,EAAEg3E,YAAY,CAAC;MACxErU,eAAe,CAAC3mE,SAAS,CAACgE,MAAM,CAAC,wBAAwB,EAAEg3E,YAAY,CAAC;MACxE5gC,gBAAgB,CAACp6C,SAAS,CAACgE,MAAM,CAAC,wBAAwB,EAAEg3E,YAAY,CAAC;;;MAGzE,IAAID,yBAAyB,EAAE;;;;QAI3B,IAAID,qBAAqB,EAAE;UACvB3mF,EAAE,CAAC4yE,eAAe,CAAC,mBAAmB,CAAC;;QAE3C5yE,EAAE,CAACouE,cAAc,EAAE;;;;EAI/B,IAAIqY,mBAAmBA,GAAG;IACtB,OAAO,IAAI,CAAC5iF,UAAU,CAACwiD,WAAW,CAAC,GAAG,CAAC;;;AAG/C;AACA;AACA;EACI,IAAIygC,aAAaA,GAAG;IAChB,MAAM7kF,UAAU,GAAG,IAAI,CAACA,UAAU;IAClC,OAAOpB,IAAI,CAACC,GAAG,CAACmB,UAAU,CAACm9C,WAAW,EAAEn9C,UAAU,CAACi9C,SAAS,GAAGj9C,UAAU,CAACi9C,SAAS,CAAC1lB,MAAM,GAAG,CAAC,CAAC;;EAEnGutD,eAAeA,GAAG;IACd,MACI/mF,EAAE,GAAW,IAAI;MACjBiC,UAAU,GAAGjC,EAAE,CAACiC,UAAU;IAC9B,IAAIjC,EAAE,CAACkP,SAAS,EAAE;MACdjN,UAAU,CAAC87C,mBAAmB,EAAE;MAChC/9C,EAAE,CAACgnF,aAAa,GAAG,IAAI;MACvBhnF,EAAE,CAAC0jF,kBAAkB,CAAC1jF,EAAE,CAAC8mF,aAAa,CAAC;MACvC9mF,EAAE,CAAC4yE,eAAe,CAAC,mBAAmB,CAAC;MACvC5yE,EAAE,CAACouE,cAAc,EAAE;;;;;;;SAOlB,IAAI,CAACpuE,EAAE,CAACgnF,aAAa,EAAE;MACxBhnF,EAAE,CAACgnF,aAAa,GAAGhnF,EAAE,CAACoX,GAAG,CAAC;QACtBuJ,KAAK,EAAK,iBAAiB;QAC3BC,IAAI,EAAM,IAAI;QACdrJ,OAAO,EAAGvX;OACb,CAAC;;;EAGVinF,YAAYA,GAAG;IACX,IAAI,CAAC,IAAI,CAACr1C,SAAS,EAAE;MACjB,IAAI,CAACgQ,oBAAoB,EAAE;;IAE/B,KAAK,CAACqlC,YAAY,EAAE;;EAExB7Y,cAAcA,GAAG;IACb,MAAMpuE,EAAE,GAAG,IAAI;;IAEfA,EAAE,CAAC4hD,oBAAoB,EAAE;IACzB5hD,EAAE,CAAC6uD,WAAW,GAAG7uD,EAAE,CAACsM,UAAU,GAAGtM,EAAE,CAAC8mF,aAAa,GAAG9mF,EAAE,CAAC0vB,aAAa,CAACkmB,YAAY;;EAErF6xB,cAAcA,GAAG;IACb,IAAI,CAAC7kB,gBAAgB,EAAE;;EAE3BqlB,aAAaA,CAACj/D,OAAO,EAAE;IACnB,IAAI,IAAI,CAAC45C,gBAAgB,IAAI,IAAG,IAAI,CAACA,gBAAgB,EAAE;MACnD,IAAI55C,OAAO,EAAE;QACT,IAAI,CAACy4B,WAAW,EAAE;;MAEtB,IAAI,CAACz4B,OAAO,CAAC,eAAe,EAAE;QAAEA;OAAS,CAAC;;;;AAItD;AACA;AACA;EACIuc,UAAUA,CAAC2hE,UAAU,GAAG,IAAI,EAAE;IAC1B,MACIlnF,EAAE,GAAY,IAAI;MAClBmnF,WAAW,GAAGD,UAAU,IAAIlnF,EAAE,CAACqnE,WAAW,EAAE;IAChD,IAAIrnE,EAAE,CAAC4iD,gBAAgB,EAAE;MACrB;;;AAGZ;AACA;AACA;AACA;IACQ5iD,EAAE,CAACgJ,OAAO,CAAC,kBAAkB,CAAC;IAC9BhJ,EAAE,CAAC0kD,aAAa,GAAG,IAAI;;IAEvB1kD,EAAE,CAACmE,OAAO,CAAC0H,SAAS,CAACwS,GAAG,CAAC,mBAAmB,CAAC;IAC7C,IAAI,CAAC6oE,UAAU,EAAE;MACblnF,EAAE,CAAC6D,UAAU,CAAC67C,CAAC,GAAG1/C,EAAE,CAACs7E,UAAU,GAAG,CAAC;;IAEvCt7E,EAAE,CAACiC,UAAU,CAAC27C,YAAY,CAAC,CAACspC,UAAU,CAAC;;AAE/C;AACA;AACA;AACA;IACQlnF,EAAE,CAACgJ,OAAO,CAAC,YAAY,CAAC;IACxBhJ,EAAE,CAAC0kD,aAAa,GAAG,KAAK;IACxB1kD,EAAE,CAAC+mF,eAAe,EAAE;IACpB,IAAIG,UAAU,EAAE;MACZlnF,EAAE,CAACmoE,aAAa,CAACgf,WAAW,CAAC;;IAEjCnnF,EAAE,CAACmE,OAAO,CAAC0H,SAAS,CAAC6I,MAAM,CAAC,mBAAmB,CAAC;;;AAGxD;AACA;AACA;EACI8lB,cAAcA,GAAG;IACb,MACIx6B,EAAE,GAA0D,IAAI;MAChE;QAAEmE,OAAO;QAAEyzB,eAAe;QAAE46C,eAAe;QAAEvwE;OAAY,GAAGjC,EAAE;IAClEA,EAAE,CAACwwE,UAAU,EAAE;;IAEf,IAAIxwE,EAAE,CAAC4xC,SAAS,EAAE;;MAEd5xC,EAAE,CAAC4iF,aAAa,GAAG,IAAI;MACvB5iF,EAAE,CAAC4yE,eAAe,CAAC,eAAe,EAAEh7C,eAAe,CAAC;MACpD53B,EAAE,CAAC4yE,eAAe,CAAC,eAAe,EAAEJ,eAAe,CAAC;;MAEpDxyE,EAAE,CAAComC,YAAY,CAACxO,eAAe,EAAEzzB,OAAO,CAAC;MACzCnE,EAAE,CAAConF,YAAY,CAAC5U,eAAe,EAAEruE,OAAO,CAAC;MACzCnE,EAAE,CAACujF,QAAQ,EAAE;;;MAGb,MAAM8D,cAAc,GAAGplF,UAAU,CAACq9C,aAAa,EAAE;MACjDr9C,UAAU,CAAC07C,iBAAiB,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC;MAC/C,IAAI17C,UAAU,CAACgS,QAAQ,EAAE;;;QAGrBhS,UAAU,CAACs9C,WAAW,CAAC8nC,cAAc,CAAC;QACtCrnF,EAAE,CAACulB,UAAU,EAAE;;;;EAI3B+hE,eAAeA,GAAG;;;;;EAKlB7sD,OAAOA,CAAC;IAAE0hB;GAAY,EAAE;IAAA,IAAA2X,cAAA;IACpB,MAAM9zD,EAAE,GAAG,IAAI;IACfA,EAAE,CAACi6E,WAAW,CAAC7jC,YAAY,CAAC,eAAe,EAAEp2C,EAAE,CAACT,KAAK,CAAC0B,KAAK,GAAG,CAAC,CAAC;IAChE,CAAA6yD,cAAA,QAAK,CAACr5B,OAAO,cAAAq5B,cAAA,uBAAbA,cAAA,CAAA5pD,IAAA,OAAgB,GAAGvC,SAAS,CAAC;IAC7B,IAAI3H,EAAE,CAACsnF,eAAe,EAAE,IAAI,CAACnrC,UAAU,EAAE;MACrC;;IAEJ,MACI;QACIl6C,UAAU;QACV1C,KAAK;QACL4E,OAAO;QACPyzB,eAAe;QACflI,aAAa;QACb8iD;OACH,GAAWxyE,EAAE;MACdunF,SAAS,GAAGxiF,SAAS,CAACyiF,mBAAmB;IAC7C,IAAI9f,cAAc;MACd7gB,QAAQ,GAAG,CAAC;;;IAGhB7mD,EAAE,CAACknD,IAAI,GAAG3nD,KAAK,aAALA,KAAK,eAALA,KAAK,CAAEwrB,MAAM,GAAG,UAAU,GAAG,MAAM;;IAE7C/qB,EAAE,CAACC,OAAO,CAACmX,GAAG,CAAC;MACXI,MAAM,EAAGA,MAAMkwD,cAAc,GAAG,IAAI;MACpC9mD,IAAI,EAAK;KACZ,CAAC;;IAEF5gB,EAAE,CAAC+uD,gBAAgB,CAAC/uD,EAAE,CAACgI,KAAK,EAAE,CAAC,CAAC;;IAEhC,IAAI0/D,cAAc,EAAE;MAChB1nE,EAAE,CAAC4yE,eAAe,CAAC,eAAe,EAAEh7C,eAAe,CAAC;MACpD53B,EAAE,CAAC4yE,eAAe,CAAC,eAAe,EAAEJ,eAAe,CAAC;;;;IAIxDxyE,EAAE,CAAComC,YAAY,CAACxO,eAAe,EAAEzzB,OAAO,CAAC;IACzCnE,EAAE,CAAConF,YAAY,CAAC5U,eAAe,EAAEruE,OAAO,CAAC;;;;IAIzCY,SAAS,CAAC8X,MAAM,CAAC+a,eAAe,EAAE2vD,SAAS,CAAC;IAC5CxiF,SAAS,CAAC8X,MAAM,CAAC21D,eAAe,EAAE+U,SAAS,CAAC;IAC5CxiF,SAAS,CAAC8X,MAAM,CAAC7c,EAAE,CAACimD,gBAAgB,EAAEshC,SAAS,CAAC;;;IAGhDvnF,EAAE,CAAC4hD,oBAAoB,EAAE;IACzB,MAAM6lC,gBAAgB,GAAGznF,EAAE,CAAC0vB,aAAa,CAACkmB,YAAY;IACtD,IAAI51C,EAAE,CAACsM,UAAU,EAAE;MACftM,EAAE,CAAC6uD,WAAW,GAAe5sD,UAAU,CAACq7C,cAAc,CAACn5C,OAAO,CAACyxC,YAAY,GAAGhe,eAAe,CAACge,YAAY,GAAG48B,eAAe,CAAC58B,YAAY,EAAE,IAAI,CAAC;MAChJlmB,aAAa,CAACjc,KAAK,CAACkiC,MAAM,GAAG31C,EAAE,CAACkgD,UAAU,GAAG,IAAI;KACpD,MACI;MACDlgD,EAAE,CAAC6uD,WAAW,GAAG44B,gBAAgB;MACjCxlF,UAAU,CAACq7C,cAAc,CAACt9C,EAAE,CAAC6uD,WAAW,EAAE,IAAI,CAAC;;IAEnD7uD,EAAE,CAACsnE,WAAW,CAAC95D,OAAO,IAAI;MACtB,IAAIA,OAAO,CAACkhC,MAAM,CAACmY,QAAQ,GAAGA,QAAQ,EAAE;QACpCA,QAAQ,GAAGr5C,OAAO,CAACkhC,MAAM,CAACmY,QAAQ;;KAEzC,CAAC;IACFjvB,eAAe,CAACz4B,OAAO,CAAC0nD,QAAQ,GAAGA,QAAQ;IAC3C7mD,EAAE,CAACujF,QAAQ,EAAE;IACb,IAAIhkF,KAAK,CAAC0B,KAAK,IAAI,CAAC1B,KAAK,CAAC28E,SAAS,EAAE;MACjCl8E,EAAE,CAACulB,UAAU,EAAE;;;IAGnB,IAAIvlB,EAAE,CAACC,OAAO,CAACwa,cAAc,EAAE;MAC3B,MAAM;QAAEitE;OAAO,GAAGv0C,QAAQ;MAC1B,IAAI,CAAAu0C,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEC,MAAM,MAAK,QAAQ,EAAE;QAC5BD,KAAK,CAACE,KAAK,CAAC1e,IAAI,CAAC,MAAM,CAAClpE,EAAE,CAAC+tB,WAAW,IAAI/tB,EAAE,CAACyhC,WAAW,EAAE,CAAC;;;IAGnEzhC,EAAE,CAAC4lD,UAAU,EAAE;IACf5lD,EAAE,CAACopD,kBAAkB,EAAE;;EAE3Bh+B,MAAMA,GAAG;IACL,MAAMprB,EAAE,GAAG,IAAI;;;IAGfA,EAAE,CAAC6nF,WAAW,GAAG3iF,OAAO,CAAClF,EAAE,CAACyK,KAAK,CAAC;;IAElC,KAAK,CAAC2gB,MAAM,CAAC,GAAGzjB,SAAS,CAAC;IAC1B,IAAI,CAAC3H,EAAE,CAACsM,UAAU,EAAE;;;MAGhB,IAAItM,EAAE,CAAC43B,eAAe,CAACge,YAAY,IAAI,CAAC51C,EAAE,CAAC0vB,aAAa,CAACkmB,YAAY,EAAE;QACnE/3B,OAAO,CAACC,IAAI,CAAC,mGAAmG,CAAC;;;MAGrH,IACI,EAAE,WAAW,IAAI9d,EAAE,CAACk/E,aAAa,CAAC,IAClC,EAAE,QAAQ,IAAIl/E,EAAE,CAACk/E,aAAa,CAAC,IAC/BjtE,QAAQ,CAACyB,UAAU,CAACC,gBAAgB,CAAC3T,EAAE,CAACmE,OAAO,CAAC,CAACujB,SAAS,CAAC,KAAK1nB,EAAE,CAAC21C,MAAM,EAC3E;QACE93B,OAAO,CAACC,IAAI,CACP,OAAM9d,EAAE,CAACge,MAAO,sEAAqE,GACrF,oGAAmG,GACnG,4EAA2E,CAC/E;;;;;;;AAOjB;AACA;AACA;AACA;AACA;AACA;AACA;EACIooB,YAAYA,CAACxO,eAAe,EAAEzzB,OAAO,EAAE;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;EACIijF,YAAYA,CAAC5U,eAAe,EAAEruE,OAAO,EAAE;;EAEvCi1C,gBAAgBA,GAAG;;EAEnB3N,eAAeA,GAAG;EAClBiN,cAAcA,GAAG;;EAEjB0rC,WAAWA,GAAG;;EAEdt3E,iBAAiBA,CAACg7E,YAAY,EAAE;;EAEhCj9C,kBAAkBA,GAAG;;EAErBi3C,WAAWA,CAACiG,WAAW,EAAE;;EAEzBn7C,gBAAgBA,GAAG;;EAEnB4kC,kBAAkBA,GAAG;;;EAGrBwW,aAAaA,CAACrI,IAAI,GAAG,IAAI,CAAC4B,MAAM,EAAE;IAC9B,IAAI5B,IAAI,EAAE;MACN,MACI9pB,QAAQ,GAAQ8pB,IAAI,CAACjF,KAAK,KAAK,MAAM,IAAK,IAAI,CAACuN,WAAW,CAAC,eAAe,CAAC;QAC3ExD,YAAY,GAAG5uB,QAAQ,IAAI,IAAI,CAACoyB,WAAW,CAAC,kBAAkB,CAAC;QAC/D;UAAEx0E;SAAO,GAAMksE,IAAI,CAACx7E,OAAO;;MAE/BsP,KAAK,CAACy0E,SAAS,GAAGryB,QAAQ,GAAI,GAAEA,QAAQ,CAACnW,CAAE,IAAG,GAAG,EAAE;MACnDjsC,KAAK,CAACkiC,MAAM,GAAMkgB,QAAQ,GAAI,GAAEA,QAAQ,CAAClgB,MAAM,IAAI,CAAA8uC,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAE9uC,MAAM,KAAI,CAAC,CAAE,IAAG,GAAG,EAAE;;;;AAIlG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIwyC,QAAQA,CAAC7G,QAAQ,EAAE;IACf,IAAI8G,GAAG;IACP,IAAI,IAAI,CAAC14D,aAAa,EAAE;MACpB,IAAI,CAAC6xD,MAAM,GAAG8G,IAAI,CAACrhE,YAAY,CAAC,IAAI,CAACshE,gBAAgB,EAAEhH,QAAQ,CAAC,CAAC;MACjE8G,GAAG,GAAW,IAAI,CAAC7G,MAAM,CAAC;;;IAE9B,OAAO6G,GAAG;;;AAGlB;AACA;AACA;EACIG,UAAUA,GAAG;IACT,IAAI,CAAChH,MAAM,GAAG,IAAI;;EAEtBiH,eAAeA,CAACrO,SAAS,EAAE;IAAA,IAAAsO,iBAAA,EAAAC,eAAA;IACvB,CAAAD,iBAAA,OAAI,CAAC/V,WAAW,cAAA+V,iBAAA,uBAAhBA,iBAAA,CAAkB/zE,MAAM,EAAE;;IAE1B,IAAI,CAACg+D,WAAW,GAAG3tE,SAAS,CAACu8B,aAAa,CAAC;MACvC70B,MAAM,GAAAi8E,eAAA,GAAyC,IAAI,CAACC,SAAS,cAAAD,eAAA,uBAAdA,eAAA,CAAgBvkF,OAAO;MACtEo9B,SAAS,EAAsC,cAAc;MAC7D,CAAC44C,SAAS,aAATA,SAAS,eAATA,SAAS,CAAE36E,QAAQ,CAAC,GAAG,CAAC,GAAG,MAAM,GAAG,MAAM,GAAI26E;KAClD,CAAC;;EAEN96B,eAAeA,GAAG;IACd,MAAM;MAAE3vB,aAAa;MAAEnwB;KAAO,GAAG,IAAI;IACrCmwB,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAE7jB,SAAS,CAACgE,MAAM,CAAC,cAAc,EAAE,EAAEtQ,KAAK,CAAC0B,KAAK,GAAG,CAAC,IAAI1B,KAAK,CAAC28E,SAAS,IAAI38E,KAAK,CAACqpF,YAAY,CAAC,CAAC;;;EAGhH/sE,cAAcA,CAACC,QAAQ,EAAE48C,GAAG,EAAE;IAC1B,KAAK,CAAC78C,cAAc,CAACC,QAAQ,EAAE48C,GAAG,CAAC;IACnC,IAAI,CAAC,IAAI,CAACpyC,aAAa,EAAE;MACrB,KAAK,MAAM5kB,MAAM,IAAI,IAAI,CAACzB,OAAO,CAACuZ,aAAa,EAAE;QAAA,IAAAqvE,qBAAA;QAC7C,CAAAA,qBAAA,GAAAnnF,MAAM,CAACma,cAAc,cAAAgtE,qBAAA,uBAArBA,qBAAA,CAAA3+E,IAAA,CAAAxI,MAAM,EAAkBoa,QAAQ,CAAC;;;;;;;;EAQ7ClG,gBAAgBA,CAACC,OAAO,EAAE;IACtB,MACInT,MAAM,GAAO,KAAK,CAACkT,gBAAgB,CAACC,OAAO,CAAC;MAC5C;QAAEtW;OAAO,GAAI,IAAI;;MAEjByH,IAAI,GAASzH,KAAK,CAACupF,aAAa,CAACjzE,OAAO,CAAC;;MAEzCkzE,UAAU,GAAGxpF,KAAK,CAACqW,gBAAgB,CAACC,OAAO,CAAC,IAAInT,MAAM,CAACnD,KAAK;IAChE,IAAIyH,IAAI,CAACpF,MAAM,EAAE;MACbc,MAAM,CAACsE,IAAI,GAAGA,IAAI;;;IAGtB,IAAI+hF,UAAU,IAAIxpF,KAAK,CAACypF,kBAAkB,KAAK7J,YAAY,EAAE;MACzD,OAAO4J,UAAU,CAAC/xE,UAAU;;IAEhC,IAAI,CAACjK,YAAY,CAAC8d,OAAO,CAACk+D,UAAU,CAAC,EAAE;MACnCrmF,MAAM,CAACnD,KAAK,GAAGwpF,UAAU;;IAE7B,IAAIrmF,MAAM,CAACnD,KAAK,EAAE;MACd,OAAOmD,MAAM,CAACnD,KAAK,CAACyH,IAAI;;IAE5B,OAAOtE,MAAM;;;AAGrB;AACA;AACAqvE,QAAQ,CAACr0C,SAAS,EAAE;AACpBF,aAAa,CAACyrD,UAAU,CAAC,MAAM,EAAE,OAAO,CAAC;AACzClX,QAAQ,CAAC1sE,MAAM,GAAG,UAAU;;;;"}