{"version":3,"file":"Tree.js","sources":["../../../../Grid/lib/Grid/column/TreeColumn.js","../../../../Grid/lib/Grid/feature/Tree.js"],"sourcesContent":["import Column from './Column.js';\nimport ColumnStore from '../data/ColumnStore.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\n\n/**\n * @module Grid/column/TreeColumn\n */\n\nlet currentParentHasIcon = false;\n\n/**\n * A column that displays a tree structure when using the {@link Grid.feature.Tree tree} feature.\n *\n * Default editor is a {@link Core.widget.TextField TextField}.\n *\n * TreeColumn provides configs to define icons for {@link #config-expandIconCls expanded} /\n * {@link #config-collapseIconCls collapsed} nodes, {@link #config-expandedFolderIconCls expanded folder} /\n * {@link #config-collapsedFolderIconCls collapsed folder} nodes and {@link #config-leafIconCls leaf} nodes.\n *\n * When the TreeColumn renders its cells, it will look for two special fields {@link Grid.data.GridRowModel#field-href}\n * and {@link Grid.data.GridRowModel#field-target}. Specifying `href` will produce a link for the TreeNode,\n * and `target` will have the same meaning as in an A tag:\n *\n * ```javascript\n * {\n *    id        : 1,\n *    name      : 'Some external link'\n *    href      : '//www.website.com\",\n *    target    : '_blank\"\n * }\n * ```\n *\n * ## Snippet\n * ```javascript\n * new TreeGrid({\n *     appendTo : document.body,\n *\n *     columns : [\n *          { type: 'tree', field: 'name' }\n *     ]\n * });\n * ```\n *\n * {@inlineexample Grid/column/TreeColumn.js}\n *\n * ## Cell renderers\n *\n * You can affect the contents and styling of cells in this column using a\n * {@link Grid.column.TreeColumn#config-renderer} function.\n *\n * ```javascript\n * const grid = new Grid({\n *   columns : [{\n *       type       : 'tree',\n *       field      : 'name',\n *       text       : 'Name',\n *       renderer({ value, record }) {\n *         return `${value} (${record.childLevel})`\n *       }\n *     }]\n * });\n * ```\n *\n * @classType tree\n * @extends Grid/column/Column\n * @column\n */\nexport default class TreeColumn extends Column {\n\n    static $name = 'TreeColumn';\n\n    static type = 'tree';\n\n    static get defaults() {\n        return {\n            tree     : true,\n            hideable : false,\n            minWidth : 150\n        };\n    }\n\n    static get fields() {\n        return [\n            /**\n             * The icon to use for the collapse icon in collapsed state\n             * @config {String} expandIconCls\n             */\n            { name : 'expandIconCls', defaultValue : 'b-icon b-icon-tree-expand' },\n\n            /**\n             * The icon to use for the collapse icon in expanded state\n             * @config {String} collapseIconCls\n             */\n            { name : 'collapseIconCls', defaultValue : 'b-icon b-icon-tree-collapse' },\n\n            /**\n             * The icon to use for the collapse icon in expanded state\n             * @config {String} collapsedFolderIconCls\n             */\n            { name : 'collapsedFolderIconCls' },\n\n            /**\n             * The icon to use for the collapse icon in expanded state\n             * @config {String} expandedFolderIconCls\n             */\n            { name : 'expandedFolderIconCls' },\n\n            /**\n             * Size of the child indent in em. Resulting indent is indentSize multiplied by child level.\n             * @config {Number} indentSize\n             * @default 1.7\n             */\n            { name : 'indentSize', defaultValue : 1.7 },\n\n            /**\n             * The icon to use for the leaf nodes in the tree\n             * @config {String} leafIconCls\n             */\n            { name : 'leafIconCls', defaultValue : 'b-icon b-icon-tree-leaf' },\n\n            { name : 'editTargetSelector', defaultValue : '.b-tree-cell-value' },\n\n            /**\n             * Renderer function, used to format and style the content displayed in the cell. Return the cell text you\n             * want to display. Can also affect other aspects of the cell, such as styling.\n             *\n             * <div class=\"note\">\n             * As the TreeColumn adds its own cell content to the column, there is a limit to what is supported in the\n             * renderer function in comparison with an ordinary\n             * {@link Grid.column.Column#config-renderer Column renderer}. Most notably is that changing `cellElement`\n             * content can yield unexpected results as it will be updated later in the rendering process.\n             * </div>\n             *\n             * You can also return a {@link Core.helper.DomHelper#typedef-DomConfig} object describing the markup\n             * ```javascript\n             * new Grid({\n             *     columns : [\n             *         {\n             *              type  : 'tree',\n             *              field : 'name'\n             *              text  : 'Name',\n             *              renderer : ({ record }) => {\n             *                  return {\n             *                      class : 'myClass',\n             *                      children : [\n             *                          {\n             *                              tag : 'i',\n             *                              class : 'fa fa-pen'\n             *                          },\n             *                          {\n             *                              tag : 'span',\n             *                              html : record.name\n             *                          }\n             *                      ]\n             *                  };\n             *              }\n             *         }\n             *     ]\n             * });\n             * ```\n             *\n             * You can modify the row element too from inside a renderer to add custom CSS classes:\n             *\n             * ```javascript\n             * new Grid({\n             *     columns : [\n             *         {\n             *             type     : 'tree',\n             *             field    : 'name',\n             *             text     : 'Name',\n             *             renderer : ({ record, row }) => {\n             *                // Add special CSS class to new rows that have not yet been saved\n             *               row.cls.newRow = record.isPhantom;\n             *\n             *               return record.name;\n             *         }\n             *     ]\n             * });\n             * ```\n             *\n             * @param {Object} renderData Object containing renderer parameters\n             * @param {HTMLElement} [renderData.cellElement] Cell element, for adding CSS classes, styling etc.\n             * Can be `null` in case of export\n             * @param {*} renderData.value Value to be displayed in the cell\n             * @param {Core.data.Model} renderData.record Record for the row\n             * @param {Grid.column.Column} renderData.column This column\n             * @param {Grid.view.Grid} renderData.grid This grid\n             * @param {Grid.row.Row} [renderData.row] Row object. Can be null in case of export. Use the\n             * {@link Grid.row.Row#function-assignCls row's API} to manipulate CSS class names.\n             * @param {Object} [renderData.size] Set `size.height` to specify the desired row height for the current\n             * row. Largest specified height is used, falling back to configured {@link Grid/view/Grid#config-rowHeight}\n             * in case none is specified. Can be null in case of export\n             * @param {Number} [renderData.size.height] Set this to request a certain row height\n             * @param {Number} [renderData.size.configuredHeight] Row height that will be used if none is requested\n             * @param {Boolean} [renderData.isExport] True if record is being exported to allow special handling during\n             * export.\n             * @param {Boolean} [renderData.isMeasuring] True if the column is being measured for a `resizeToFitContent`\n             * call. In which case an advanced renderer might need to take different actions.\n             * @config {Function} renderer\n             * @category Common\n             */\n            'renderer'\n        ];\n    }\n\n    constructor(config, store) {\n        super(...arguments);\n\n        const me = this;\n\n        // We handle htmlEncoding in this class rather than relying on the generic Row DOM manipulation\n        // since this class requires quite a lot of DOM infrastructure around the actual rendered content\n        me.shouldHtmlEncode = me.htmlEncode;\n        me.setData('htmlEncode', false);\n\n        // add tree renderer (which calls original renderer internally)\n        if (me.renderer) {\n            me.originalRenderer = me.renderer;\n        }\n        me.renderer = me.treeRenderer.bind(me);\n    }\n\n    /**\n     * A column renderer that is automatically added to the column with { tree: true }. It adds padding and node icons\n     * to the cell to make the grid appear to be a tree. The original renderer is called in the process.\n     * @private\n     */\n    treeRenderer(renderData) {\n        const\n            me       = this,\n            {\n                grid,\n                column,\n                cellElement,\n                row,\n                record,\n                isExport\n            }           = renderData,\n            gridMeta    = record.instanceMeta(grid.store),\n            isCollapsed = !record.isLeaf && gridMeta.collapsed,\n            innerConfig = {\n                className : 'b-tree-cell-value'\n            },\n            children    = [innerConfig],\n            result      = {\n                className : 'b-tree-cell-inner',\n                tag       : record.href ? 'a' : 'div',\n                href      : record.href,\n                target    : record.target,\n                children\n            },\n            rowClasses  = {\n                'b-tree-parent-row'  : 0,\n                'b-tree-collapsed'   : 0,\n                'b-tree-expanded'    : 0,\n                'b-loading-children' : 0\n            };\n\n        let outputIsObject, iconCls, { value } = renderData;\n\n        if (me.originalRenderer) {\n            const\n                rendererHtml         = me.originalRenderer(renderData),\n                // Check if the cell content is going to be rendered by framework\n                hasFrameworkRenderer = grid.hasFrameworkRenderer?.({\n                    cellContent : rendererHtml,\n                    column\n                });\n\n            outputIsObject = typeof rendererHtml === 'object' && !hasFrameworkRenderer;\n\n            // Reset the value when framework is responsible for the cell content\n            value = hasFrameworkRenderer ? '' : (rendererHtml === false ? cellElement.innerHTML : rendererHtml);\n\n            // Save content to the `rendererHtml` to be used in processCellContent implemented by framework\n            renderData.rendererHtml = rendererHtml;\n        }\n\n        if (!outputIsObject) {\n            value = String(value ?? '');\n        }\n\n        if (isExport) {\n            return value;\n        }\n\n        if (!record.isLeaf) {\n            const\n                isCollapsed     = !record.isExpanded(grid.store),\n                expanderIconCls = isCollapsed ? me.expandIconCls : me.collapseIconCls,\n                folderIconCls   = isCollapsed ? me.collapsedFolderIconCls : me.expandedFolderIconCls;\n\n            rowClasses['b-tree-parent-row']  = 1;\n            rowClasses['b-tree-collapsed']   = isCollapsed;\n            rowClasses['b-tree-expanded']    = !isCollapsed;\n            rowClasses['b-loading-children'] = gridMeta.isLoadingChildren;\n\n            cellElement.classList.add('b-tree-parent-cell');\n\n            children.unshift({\n                tag       : 'i',\n                className : {\n                    'b-tree-expander' : 1,\n                    [expanderIconCls] : 1,\n                    'b-empty-parent'  : !gridMeta.isLoadingChildren && (record.children !== true && !record.children?.length)\n                }\n            });\n\n            // Allow user to customize tree icon or opt out entirely\n            currentParentHasIcon = iconCls = renderData.iconCls || record.iconCls || folderIconCls;\n        }\n        else {\n            // TODO: Cleanup for reusing dom nodes should be done elsewhere, also cleanup selection\n            cellElement.classList.add('b-tree-leaf-cell');\n\n            // Allow user to customize tree icon or opt out entirely\n            iconCls = renderData.iconCls || record.iconCls || me.leafIconCls;\n        }\n\n        if (iconCls) {\n            children.splice(children.length - 1, 0, {\n                tag       : 'i',\n                className : {\n                    'b-tree-icon' : 1,\n                    [iconCls]     : 1\n                }\n            });\n        }\n\n        // Row can be just a dummy object for example when the renderer is called from Column#resizeToFitContent.\n        // Add/remove the various tree node classes.\n        // Keep row's aria state up to date\n        if (row.isRow) {\n            row.assignCls(rowClasses);\n\n            if (!record.isLeaf) {\n                row.setAttribute('aria-expanded', !isCollapsed);\n\n                if (isCollapsed) {\n                    row.removeAttribute('aria-owns');\n                }\n                else {\n                    for (const region in grid.subGrids) {\n                        const el = row.elements[region];\n\n                        // A branch node may be configured expanded, but yet have no children.\n                        // They may be added dynamically.\n                        DomHelper.setAttributes(el, {\n                            'aria-owns' : record.children?.length ? record.children?.map(r => `${grid.id}-${region}-${r.id}`).join(' ') : null\n                        });\n                    }\n                };\n            }\n        }\n\n        // If we are encoding HTML, or there's no raw HTML, we can use the children property\n        // with the raw value as a child, and DomSync will create a TextNode from that.\n        if (outputIsObject || me.shouldHtmlEncode || !value.includes('<')) {\n            if (outputIsObject) {\n                Object.assign(innerConfig, value);\n            }\n            innerConfig.children = innerConfig.children || [];\n\n            innerConfig.children.unshift(outputIsObject ? null : value);\n        }\n        // If we are accepting HTML without encoding it, and there is HTML we must use html property\n        else {\n            innerConfig.html = value;\n        }\n\n        const padding = (record.childLevel * me.indentSize + (record.isLeaf ? (currentParentHasIcon ? 2.0 : (iconCls ? 0.5 : 0.4)) : 0));\n\n        result.style = `padding-inline-start:${padding}em`;\n\n        return result;\n    }\n\n    // This function is not meant to be called by any code other than Base#getCurrentConfig().\n    // It extracts the current configs (fields) for the column, with special handling for the renderer\n    getCurrentConfig(options) {\n        const result = super.getCurrentConfig(options);\n\n        // Use app renderer\n        result.renderer = this.originalRenderer;\n\n        return result;\n    }\n}\n\nColumnStore.registerColumnType(TreeColumn, true);\nTreeColumn.exposeProperties();\n","import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\nimport '../column/TreeColumn.js';\n\n/**\n * @module Grid/feature/Tree\n */\n\nconst immediatePromise = Promise.resolve();\n\n/**\n * Feature that makes the grid work more like a tree. Included by default in {@link Grid.view.TreeGrid}. Requires\n * exactly one {@link Grid.column.TreeColumn} among grids columns. That column will have its renderer replaced with a\n * tree renderer that adds padding and icon to give the appearance of a tree. The original renderer is preserved and\n * also called.\n *\n * {@inlineexample Grid/feature/Tree.js}\n *\n * This feature is <strong>disabled</strong> by default. When enabled, the feature cannot be disabled during runtime.\n *\n * ## Keyboard shortcuts\n * This feature has the following default keyboard shortcuts:\n *\n * | Keys             | Action                 | Action description                                                   |\n * |------------------|------------------------|----------------------------------------------------------------------|\n * | Space            | toggleCollapseByKey    | When focus on a parent node, this expands or collapses it's children |\n * | ArrowRight       | expandIfSingleColumn   | Expands a focused parent node if grid consist of one column only     |\n * | Shift+ArrowRight | expandByKey            | Expands a focused parent node                                        |\n * | ArrowLeft        | collapseIfSingleColumn | Collapses a focused parent node if grid consist of one column only   |\n * | Shift+ArrowLeft  | collapseByKey          | Collapses a focused parent node                                      |\n *\n * For more information on how to customize keyboard shortcuts, please see\n * [our guide](#Grid/guides/customization/keymap.md)\n *\n * @extends Core/mixin/InstancePlugin\n *\n * @demo Grid/tree\n * @classtype tree\n * @feature\n */\nexport default class Tree extends InstancePlugin.mixin(Delayable) {\n    //region Config\n\n    static $name = 'Tree';\n\n    static configurable = {\n        /**\n         * Expand parent nodes when clicking on their cell\n         * @prp {Boolean}\n         * @default\n         */\n        expandOnCellClick : false,\n\n        /**\n         * See {@link #keyboard-shortcuts Keyboard shortcuts} for details\n         * @config {Object<String,String>}\n         */\n        keyMap : {\n            ' '                : 'toggleCollapseByKey',\n            ArrowRight         : 'expandIfSingleColumn',\n            'Shift+ArrowRight' : 'expandByKey',\n            ArrowLeft          : 'collapseIfSingleColumn',\n            'Shift+ArrowLeft'  : 'collapseByKey'\n        }\n    };\n\n    // Plugin configuration. This plugin chains some functions in Grid.\n    static get pluginConfig() {\n        return {\n            assign : ['collapseAll', 'expandAll', 'collapse', 'expand', 'expandTo', 'toggleCollapse'],\n            chain  : ['onElementPointerUp', 'onElementClick', 'bindStore']\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    construct(client, config) {\n        super.construct(client, config);\n\n        // find column\n        if (!this.treeColumn) {\n            console.info('To use the tree feature, one column should be configured with `type: \\'tree\\'`');\n        }\n\n        client.store && this.bindStore(client.store);\n    }\n\n    doDisable(disable) {\n        if (disable) {\n            throw new Error('Tree feature cannot be disabled');\n        }\n    }\n\n    get store() {\n        return this.client.store;\n    }\n\n    get treeColumn() {\n        const\n            me          = this,\n            { columns } = me.client;\n\n        if (!me._treeColumn || !columns.includes(me._treeColumn)) {\n            me._treeColumn = columns.find(column => column.isTreeColumn);\n        }\n\n        return me._treeColumn;\n    }\n\n    bindStore(store) {\n        this.detachListeners('store');\n\n        store.ion({\n            name                  : 'store',\n            beforeLoadChildren    : 'onBeforeLoadChildren',\n            loadChildren          : 'onLoadChildren',\n            loadChildrenException : 'onLoadChildrenException',\n            beforeToggleNode      : 'onBeforeToggleNode',\n            thisObj               : this\n        });\n    }\n\n    //endregion\n\n    //region Expand & collapse\n\n    /**\n     * Collapse an expanded node or expand a collapsed. Optionally forcing a certain state.\n     * This function is exposed on Grid and can thus be called as `grid.toggleCollapse()`\n     * @param {String|Number|Core.data.Model} idOrRecord Record (the node itself) or id of a node to toggle\n     * @param {Boolean} [collapse] Force collapse (true) or expand (false)\n     * @param {Boolean} [skipRefresh] Set to true to not refresh rows (if calling in batch)\n     * @on-owner\n     */\n    async toggleCollapse(idOrRecord, collapse, skipRefresh = false) {\n        if (idOrRecord == null) {\n            throw new Error('Tree#toggleCollapse must be passed a record');\n        }\n\n        const\n            me                = this,\n            { store, client } = me,\n            { rowManager }    = client,\n            record            = store.getById(idOrRecord),\n            meta              = record.instanceMeta(store);\n\n        if (await store.toggleCollapse(record, collapse)) {\n            const row = rowManager.getRowFor(record);\n\n            if (row && record.ancestorsExpanded()) {\n                const cellElement = me.treeColumn && !me.treeColumn.subGrid.collapsed && row.getCell(me.treeColumn.id);\n\n                // Toggle cell's expanded/collapsed state\n                cellElement && row.renderCell(cellElement);\n            }\n\n            // Add a temporary cls, used by Scheduler & Gantt to prevent transitions on events/tasks\n            // Block multiple applications in the case of a recursive collapseAll operation\n            if (!me.isTogglingNode) {\n                client.element.classList.add('b-toggling-node');\n                me.isTogglingNode = true;\n                me.requestAnimationFrame(() => {\n                    client.element.classList.remove('b-toggling-node');\n                    me.isTogglingNode = false;\n                });\n            }\n\n            /**\n             * Fired before a parent node record is collapsed.\n             * @event collapseNode\n             * @param {Grid.view.Grid} source The firing Grid instance.\n             * @param {Core.data.Model} record The record which has been collapsed.\n             * @on-owner\n             */\n\n            /**\n             * Fired after a parent node record is expanded.\n             * @event expandNode\n             * @param {Grid.view.Grid} source The firing Grid instance.\n             * @param {Core.data.Model} record The record which has been expanded.\n             * @on-owner\n             */\n\n            client.trigger(meta.collapsed ? 'collapseNode' : 'expandNode', { record });\n\n            /**\n             * Fired after a parent node record toggles its collapsed state.\n             * @event toggleNode\n             * @param {Core.data.Model} record The record being toggled.\n             * @param {Boolean} collapse `true` if the node is being collapsed.\n             * @on-owner\n             */\n\n            client.trigger('toggleNode', { record, collapse : meta.collapsed });\n        }\n    }\n\n    /**\n     * Collapse a single node.\n     * This function is exposed on Grid and can thus be called as `grid.collapse()`\n     * @param {String|Number|Core.data.Model} idOrRecord Record (the node itself) or id of a node to collapse\n     * @on-owner\n     */\n    async collapse(idOrRecord) {\n        return this.toggleCollapse(idOrRecord, true);\n    }\n\n    /**\n     * Expand a single node.\n     * This function is exposed on Grid and can thus be called as `grid.expand()`\n     * @param {String|Number|Core.data.Model} idOrRecord Record (the node itself) or id of a node to expand\n     * @on-owner\n     */\n    async expand(idOrRecord) {\n        return this.toggleCollapse(idOrRecord, false);\n    }\n\n    onBeforeToggleNode({ record, collapse }) {\n        /**\n         * Fired before a parent node record toggles its collapsed state.\n         * @event beforeToggleNode\n         * @param {Grid.view.Grid} source The firing Grid instance.\n         * @param {Core.data.Model} record The record being toggled.\n         * @param {Boolean} collapse `true` if the node is being collapsed.\n         * @on-owner\n         */\n        this.client.trigger('beforeToggleNode', { record, collapse });\n    }\n\n    onBeforeLoadChildren({ source : store, params }) {\n        const\n            parent = store.getById(params[store.modelClass.idField]),\n            row    = this.client.rowManager.getRowFor(parent);\n\n        row?.addCls('b-loading-children');\n    }\n\n    onLoadChildren({ source : store, params }) {\n        const\n            parent = store.getById(params[store.modelClass.idField]),\n            row    = this.client.rowManager.getRowFor(parent);\n\n        row?.removeCls('b-loading-children');\n    }\n\n    onLoadChildrenException({ record }) {\n        const row = this.client.rowManager.getRowFor(record);\n\n        row?.removeCls('b-loading-children');\n    }\n\n    /**\n     * Expand or collapse all nodes, as specified by param, starting at the passed node (which defaults to the root node)\n     * @param {Boolean} [collapse] Set to true to collapse, false to expand (defaults to true)\n     * @param {Core.data.Model} [topNode] The topmost node from which to cascade a collapse.\n     * Defaults to the {@link Core.data.Store#property-rootNode}. Not included in the cascade if\n     * the root node is being used.\n     */\n    async expandOrCollapseAll(collapse = true, topNode = this.store.rootNode) {\n        // TODO: Some logic here and some in the store, keep in same place maybe\n        const\n            { client, store } = this,\n            promises          = [],\n            childRecords      = [];\n\n        client.trigger('beforeToggleAllNodes', { collapse });\n\n        // Each collapse/expand will trigger events on store, avoid that by suspending\n        store.suspendEvents();\n        store.traverse(record => {\n            const gridMeta = record.instanceMeta(store);\n            if (!record.isLeaf) {\n                if (collapse && !gridMeta.collapsed) {\n                    this.toggleCollapse(record, true, true);\n                    childRecords.push(...record.children);\n                }\n                else if (!collapse && gridMeta.collapsed) {\n                    if (Array.isArray(record.children)) {\n                        childRecords.push(...record.children);\n                    }\n                    promises.push(this.toggleCollapse(record, false, true));\n                }\n            }\n        }, topNode, topNode === store.rootNode);\n        store.resumeEvents();\n\n        return (collapse ? immediatePromise : Promise.all(promises)).then(() => {\n            // Return to top when collapsing all\n            client.refreshRows(collapse);\n\n            if (childRecords.length) {\n                if (collapse) {\n                    store.trigger('remove', { records : childRecords, isCollapse : true, isCollapseAll : true });\n                }\n                else {\n                    store.trigger('add', { records : childRecords, isExpand : true, isExpandAll : true });\n                }\n            }\n\n            client.trigger('toggleAllNodes', { collapse });\n        });\n    }\n\n    /**\n     * Collapse all nodes.\n     * This function is exposed on Grid and can thus be called as `grid.collapseAll()`\n     * @on-owner\n     */\n    async collapseAll() {\n        return this.expandOrCollapseAll(true);\n    }\n\n    /**\n     * Expand all nodes.\n     * This function is exposed on Grid and can thus be called as `grid.expandAll()`\n     * @on-owner\n     */\n    async expandAll() {\n        return this.expandOrCollapseAll(false);\n    }\n\n    /**\n     * Expands parent nodes to make this node \"visible\".\n     * This function is exposed on Grid and can thus be called as `grid.expandTo()`\n     * @param {String|Number|Core.data.Model|String[]|Number[]|Core.data.Model[]} idOrRecord Record (the node itself),\n     * or id of a node. Also accepts arrays of the same types.\n     * @param {Boolean} [scrollIntoView=true] A flag letting you control whether to scroll the record into view\n     * @on-owner\n     * @async\n     */\n    async expandTo(idOrRecord, scrollIntoView = true) {\n        const\n            me                = this,\n            { store, client } = me;\n\n        if (Array.isArray(idOrRecord)) {\n            if (idOrRecord.length > 0) {\n                client.suspendRefresh();\n                for (let i = idOrRecord.length - 1; i >= 0; i--) {\n                    const record = store.getById(idOrRecord[i]);\n\n                    if (i === 0) {\n                        client.resumeRefresh?.();\n                        // Ensure all parents are rendered\n                        client.rowManager.refresh();\n                    }\n\n                    await me.expandTo?.(record, i === 0);\n                }\n            }\n\n            return;\n        }\n\n        const record = store.getById(idOrRecord);\n\n        // Hidden because it's in a collapsed Group: abort\n        if (record.instanceMeta(me.store).hiddenByCollapse === false) {\n            return;\n        }\n\n        // Expand any parents that need to be expanded to allow the record to be rendered.\n        if (!record.ancestorsExpanded()) {\n            const parents = [];\n\n            // Collect parents which need expanding\n            for (let parent = record.parent; parent && !parent.isRoot; parent = parent.parent) {\n                if (!parent.isExpanded(store)) {\n                    parents.unshift(parent);\n                }\n            }\n\n            // Expand them from the top-down\n            for (const parent of parents) {\n                if (!me.isDestroyed) {\n                    await me.toggleCollapse(parent, false, true);\n                }\n            }\n\n            // Refreshing on expand was inhibited in toggleCollapse calls\n            client.refreshRows?.();\n        }\n\n        if (!me.isDestroyed && scrollIntoView) {\n            await client.scrollRowIntoView(record);\n        }\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Called when user clicks somewhere in the grid. Expand/collapse node on icon click.\n     * @private\n     */\n    onElementPointerUp(event) {\n        const\n            me              = this,\n            target          = event.target,\n            cellData        = me.client.getCellDataFromEvent(event),\n            clickedExpander = target.closest('.b-tree-expander');\n\n        // Checks if click is on node expander icon, then toggles expand/collapse. Also toggles on entire cell if expandOnCellClick is true\n        if (clickedExpander || (me.expandOnCellClick && cellData?.record.isParent)) {\n            me.toggleCollapse(cellData.record);\n        }\n    }\n\n    onElementClick(event) {\n        // Prevent default to avoid triggering navigation if the tree node is a link\n        if (event.target.closest('.b-tree-expander')) {\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * Called on key down in grid. Expand/collapse node on [space]\n     * @private\n     */\n    toggleCollapseByKey() {\n        const { focusedCell } = this.client;\n\n        // Only catch space on grid cell element, not in header, editors etc...\n        if (focusedCell?.rowIndex > -1 && !focusedCell.isActionable) {\n            this.toggleCollapse(focusedCell.id);\n            return true;\n        }\n\n        return false;\n    }\n\n    //endregion\n\n    // Expands tree if single column.\n    // Called by default on ArrowRight\n    expandIfSingleColumn() {\n        if (this.client.columns.count === 1) {\n            return this.expandByKey();\n        }\n\n        // Tells keymap to continue with other actions\n        return false;\n    }\n\n    // Expands tree on Shift+ArrowRight by default.\n    expandByKey() {\n        const\n            me              = this,\n            { client }      = me,\n            { focusedCell } = client,\n            record          = focusedCell?.record;\n\n        // shift triggers tree navigation behaviour, also used by default for single column which is tree\n        if (focusedCell?.column.tree && record.isParent && record.instanceMeta(client.store).collapsed) {\n            me.expand(record);\n            return true;\n        }\n\n        // Tells keymap to continue with other actions\n        return false;\n    }\n\n    collapseIfSingleColumn() {\n        if (this.client.columns.count === 1) {\n            return this.collapseByKey();\n        }\n\n        // Tells keymap to continue with other actions\n        return false;\n    }\n\n    collapseByKey() {\n        const\n            me              = this,\n            { client }      = me,\n            { focusedCell } = client,\n            record          = focusedCell?.record;\n\n        // shift triggers tree navigation behaviour, also used by default for single column which is tree\n        if (focusedCell?.column.tree) {\n            // on expanded parent, collapse\n            if (record.isParent && !record.instanceMeta(client.store).collapsed) {\n                me.collapse(record);\n                return true;\n            }\n            // otherwise go to parent\n            if (record.parent && !record.parent.isRoot) {\n                // Deselect everything before doing this.\n                // Causes strange selection ranges otherwise\n                client.deselectAll();\n                client.focusCell({\n                    record : record.parent,\n                    column : focusedCell.column\n                });\n                return true;\n            }\n        }\n\n        // Tells keymap to continue with other actions\n        return false;\n    }\n}\n\nTree.featureClass = 'b-tree';\n\nGridFeatureManager.registerFeature(Tree, false, 'Grid');\nGridFeatureManager.registerFeature(Tree, true, 'TreeGrid');\n"],"names":["currentParentHasIcon","TreeColumn","Column","defaults","tree","hideable","minWidth","fields","name","defaultValue","constructor","config","store","arguments","me","shouldHtmlEncode","htmlEncode","setData","renderer","originalRenderer","treeRenderer","bind","renderData","grid","column","cellElement","row","record","isExport","gridMeta","instanceMeta","isCollapsed","isLeaf","collapsed","innerConfig","className","children","result","tag","href","target","rowClasses","outputIsObject","iconCls","value","_grid$hasFrameworkRen","rendererHtml","hasFrameworkRenderer","call","cellContent","innerHTML","_value","String","_record$children","isExpanded","expanderIconCls","expandIconCls","collapseIconCls","folderIconCls","collapsedFolderIconCls","expandedFolderIconCls","isLoadingChildren","classList","add","unshift","length","leafIconCls","splice","isRow","assignCls","setAttribute","removeAttribute","region","subGrids","_record$children2","_record$children3","el","elements","DomHelper","setAttributes","map","r","id","join","includes","Object","assign","html","padding","childLevel","indentSize","style","getCurrentConfig","options","_defineProperty","ColumnStore","registerColumnType","exposeProperties","_$name","immediatePromise","Promise","resolve","Tree","InstancePlugin","mixin","Delayable","pluginConfig","chain","construct","client","treeColumn","console","info","bindStore","doDisable","disable","Error","columns","_treeColumn","find","isTreeColumn","detachListeners","ion","beforeLoadChildren","loadChildren","loadChildrenException","beforeToggleNode","thisObj","toggleCollapse","idOrRecord","collapse","skipRefresh","rowManager","getById","meta","getRowFor","ancestorsExpanded","subGrid","getCell","renderCell","isTogglingNode","element","requestAnimationFrame","remove","trigger","expand","onBeforeToggleNode","onBeforeLoadChildren","source","params","parent","modelClass","idField","addCls","onLoadChildren","removeCls","onLoadChildrenException","expandOrCollapseAll","topNode","rootNode","promises","childRecords","suspendEvents","traverse","push","Array","isArray","resumeEvents","all","then","refreshRows","records","isCollapse","isCollapseAll","isExpand","isExpandAll","collapseAll","expandAll","expandTo","scrollIntoView","suspendRefresh","i","_me$expandTo","_client$resumeRefresh","resumeRefresh","refresh","hiddenByCollapse","_client$refreshRows","parents","isRoot","isDestroyed","scrollRowIntoView","onElementPointerUp","event","cellData","getCellDataFromEvent","clickedExpander","closest","expandOnCellClick","isParent","onElementClick","preventDefault","toggleCollapseByKey","focusedCell","rowIndex","isActionable","expandIfSingleColumn","count","expandByKey","collapseIfSingleColumn","collapseByKey","deselectAll","focusCell","keyMap","ArrowRight","ArrowLeft","featureClass","GridFeatureManager","registerFeature"],"mappings":";;;AAGA;AACA;AACA;AACA,IAAIA,oBAAoB,GAAG,KAAK;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMC,UAAU,SAASC,MAAM,CAAC;EAG3C,WAAWC,QAAQA,GAAG;IAClB,OAAO;MACHC,IAAI,EAAO,IAAI;MACfC,QAAQ,EAAG,KAAK;MAChBC,QAAQ,EAAG;KACd;;EAEL,WAAWC,MAAMA,GAAG;IAChB,OAAO;;AAEf;AACA;AACA;IACY;MAAEC,IAAI,EAAG,eAAe;MAAEC,YAAY,EAAG;KAA6B;;AAElF;AACA;AACA;IACY;MAAED,IAAI,EAAG,iBAAiB;MAAEC,YAAY,EAAG;KAA+B;;AAEtF;AACA;AACA;IACY;MAAED,IAAI,EAAG;KAA0B;;AAE/C;AACA;AACA;IACY;MAAEA,IAAI,EAAG;KAAyB;;AAE9C;AACA;AACA;AACA;IACY;MAAEA,IAAI,EAAG,YAAY;MAAEC,YAAY,EAAG;KAAK;;AAEvD;AACA;AACA;IACY;MAAED,IAAI,EAAG,aAAa;MAAEC,YAAY,EAAG;KAA2B,EAClE;MAAED,IAAI,EAAG,oBAAoB;MAAEC,YAAY,EAAG;KAAsB;;AAEhF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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"}