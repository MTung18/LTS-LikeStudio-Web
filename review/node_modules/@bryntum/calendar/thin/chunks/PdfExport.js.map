{"version":3,"file":"PdfExport.js","sources":["../../../../Grid/lib/Grid/feature/mixin/SummaryFormatter.js","../../../../Grid/lib/Grid/feature/Summary.js","../../../../Grid/lib/Grid/view/export/field/ExportRowsCombo.js","../../../../Grid/lib/Grid/view/export/field/ExportOrientationCombo.js","../../../../Grid/lib/Grid/view/export/ExportDialog.js","../../../../Grid/lib/Grid/feature/export/exporter/MultiPageExporter.js","../../../../Grid/lib/Grid/feature/export/exporter/MultiPageVerticalExporter.js","../../../../Grid/lib/Grid/feature/export/exporter/SinglePageExporter.js","../../../../Grid/lib/Grid/feature/export/PdfExport.js"],"sourcesContent":["import Base from '../../../Core/Base.js';\n\n/**\n * @module Grid/feature/mixin/SummaryFormatter\n */\n\n/**\n * Mixin for Summary and GroupSummary that handles formatting sums.\n * @mixin\n * @private\n */\nexport default Target => class SummaryFormatter extends (Target || Base) {\n    static get $name() {\n        return 'SummaryFormatter';\n    }\n\n    /**\n     * Calculates sums and returns as a html table\n     * @param {Grid.column.Column} column Column to calculate sum for\n     * @param {Core.data.Model[]} records Records to include in calculation\n     * @param {String} cls CSS class to apply to summary table\n     * @param {Core.data.Model} groupRecord current group row record\n     * @param {String} groupField Current groups field name\n     * @param {String} groupValue Current groups value\n     * @returns {String} html content\n     */\n    generateHtml(column, records, cls, groupRecord, groupField, groupValue) {\n        const\n            store = this.store,\n            summaries = column.summaries ||\n                  (column.sum ? [{ sum : column.sum, renderer : column.summaryRenderer }] : []);\n\n        let html = `<table class=\"${cls}\">`;\n\n        summaries.forEach(config => {\n            let type = config.sum,\n                sum  = null;\n\n            if (type === true) type = 'sum';\n\n            switch (type) {\n                case 'sum':\n                case 'add':\n                    sum = store.sum(column.field, records);\n                    break;\n                case 'max':\n                    sum = store.max(column.field, records);\n                    break;\n                case 'min':\n                    sum = store.min(column.field, records);\n                    break;\n                case 'average':\n                case 'avg':\n                    sum = store.average(column.field, records);\n                    break;\n                case 'count':\n                    sum = records.length;\n                    break;\n                case 'countNotEmpty':\n                    sum = records.reduce((sum, record) => {\n                        const value = record[column.field];\n                        return sum + (value != null ? 1 : 0);\n                    }, 0);\n                    break;\n            }\n\n            if (typeof type === 'function') {\n                sum = records.reduce(type, 'seed' in config ? config.seed : 0);\n            }\n\n            if (sum !== null) {\n                const\n                    valueCls  = 'b-grid-summary-value',\n                    // optional label\n                    labelHtml = config.label\n                        ? `<td class=\"b-grid-summary-label\">${config.label}</td>`\n                        : '';\n\n                // value to display, either using renderer or as is\n                let valueHtml = config.renderer\n                        ? config.renderer({ config, sum })\n                        : sum,\n                    summaryHtml;\n\n                if (valueHtml == null) {\n                    valueHtml = '';\n                }\n\n                // no <td>s in html, wrap it (always the case when not using renderer)\n                if (!String(valueHtml).includes('<td>')) {\n                    summaryHtml = labelHtml\n                        // has label, use returned html as value cell\n                        ? `${labelHtml}<td class=\"${valueCls}\">${valueHtml}</td>`\n                        // no label, span entire table\n                        : `<td colspan=\"2\" class=\"${valueCls}\">${valueHtml}</td>`;\n                }\n                // user is in charge of giving correct formatting\n                else {\n                    summaryHtml = valueHtml;\n                }\n\n                html += `<tr>${summaryHtml}</tr>`;\n            }\n        });\n\n        return html + '</table>';\n    }\n};\n","import DomHelper from '../../Core/helper/DomHelper.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\nimport SummaryFormatter from './mixin/SummaryFormatter.js';\n\n/**\n * @module Grid/feature/Summary\n */\n\n/**\n * @typedef {Object} ColumnSummaryConfig\n * @property {'sum'|'add'|'count'|'countNotEmpty'|'average'|Function} sum Summary type, see\n * {@link Grid/column/Column#config-sum} for details\n * @property {Function} renderer Renderer function for summary, see\n * {@link Grid/column/Column#config-summaryRenderer} for details\n * @property {*} seed Initial value when using a function as `sum`\n */\n\n/**\n * Displays a summary row in the grid footer.\n *\n * {@inlineexample Grid/feature/Summary.js}\n *\n * Specify type of summary on columns, available types are:\n * <dl class=\"wide\">\n * <dt>sum <dd>Sum of all values in the column\n * <dt>add <dd>Alias for sum\n * <dt>count <dd>Number of rows\n * <dt>countNotEmpty <dd>Number of rows containing a value\n * <dt>average <dd>Average of all values in the column\n * <dt>function <dd>A custom function, used with store.reduce. Should take arguments (sum, record)\n * </dl>\n * Columns can also specify a summaryRenderer to format the calculated sum.\n *\n * This feature is <strong>disabled</strong> by default.\n *\n * ```javascript\n * { text : 'Score', data : 'score', width : 80, sum : true }\n * { text : 'Rank', data : 'rank', width : 80, sum : 'average', summaryRenderer: ({ sum }) => return 'Average rank ' + sum }\n * ```\n *\n * Also, it is possible to set up multiple summaries as array of summary configs:\n * ```javascript\n * { text : 'Rank', data : 'rank', summaries : [{ sum : 'average', label : 'Average' }, { sum : 'count', label : 'Count' }] }\n * ```\n *\n * @extends Core/mixin/InstancePlugin\n * @demo Grid/features\n * @classtype summary\n * @feature\n */\nexport default class Summary extends SummaryFormatter(InstancePlugin) {\n    //region Config\n    static get configurable() {\n        return {\n            /**\n             * Set to `true` to sum values of selected row records\n             * @config {Boolean}\n             */\n            selectedOnly : null,\n\n            hideFooters : false\n        };\n    }\n\n    // Plugin configuration. This plugin chains some of the functions in Grid.\n    static get pluginConfig() {\n        return {\n            chain : ['renderRows', 'bindStore']\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    static get $name() {\n        return 'Summary';\n    }\n\n    construct(grid, config) {\n        this.grid = grid;\n\n        super.construct(grid, config);\n\n        this.bindStore(grid.store);\n\n        grid.hideFooters = this.hideFooters;\n    }\n\n    bindStore(store) {\n        this.detachListeners('store');\n\n        store.ion({\n            name    : 'store',\n            change  : 'onStoreChange',\n            thisObj : this\n        });\n    }\n\n    get store() {\n        return this.grid.store;\n    }\n\n    doDestroy() {\n        super.doDestroy();\n    }\n\n    doDisable(disable) {\n        super.doDisable(disable);\n\n        const { client } = this;\n\n        if (disable) {\n            client.element.classList.add('b-summary-disabled');\n        }\n        else {\n            this.updateSummaries();\n            client.element.classList.remove('b-summary-disabled');\n            client.eachSubGrid(subGrid => subGrid.scrollable.syncPartners());\n        }\n    }\n\n    //endregion\n\n    //region Render\n\n    renderRows() {\n        this.updateSummaries();\n    }\n\n    /**\n     * Updates summaries. Summaries are displayed as tables in footer (styling left out to keep brief):\n     * ```\n     * <table>\n     *     <tr><td colspan=\"2\">0</td></tr> // { sum : 'min' } Only a calculation, span entire table\n     *     <tr><td>Max</td><td>10</td></tr> // { sum : 'max', label: 'Max' } Label + calculation\n     *     <tr><td>Max</td><td>10</td></tr> // { sum : 'sum', label: 'Max' } Label + calculation\n     * </table>\n     * ```\n     * @private\n     */\n    updateSummaries() {\n        const\n            me              = this,\n            { grid, store } = me,\n            cells           = DomHelper.children(grid.element, '.b-grid-footer'),\n            selectedOnly    = me.selectedOnly && grid.selectedRecords.length > 0,\n            records         = (store.isFiltered ? store.storage.values : store.allRecords).filter(r => !r.isSpecialRow && (!selectedOnly || grid.isSelected(r)));\n\n        // reset seeds, to not have ever increasing sums :)\n        grid.columns.forEach(column => {\n            column.summaries?.forEach(config => {\n                if ('seed' in config) {\n                    if (!('initialSeed' in config)) {\n                        config.initialSeed = config.seed;\n                    }\n\n                    if (['number', 'string', 'date'].includes(typeof config.initialSeed)) {\n                        config.seed = config.initialSeed;\n                    }\n                    else {\n                        // create shallow copy\n                        config.seed = Object.assign({}, config.initialSeed);\n                    }\n                }\n            });\n        });\n\n        cells.forEach(cellElement => {\n            // Skip for special columns like checkbox selection\n            if (!cellElement.dataset.column) {\n                return;\n            }\n\n            const\n                column = grid.columns.get(cellElement.dataset.column),\n                html   = me.generateHtml(column, records, 'b-grid-footer-summary');\n\n            if (column.summaries ? column.summaries.length : column.sum ? 1 : 0) {\n                // First time, set table\n                if (!cellElement.children.length) {\n                    cellElement.innerHTML = html;\n                }\n                // Following times, sync changes\n                else {\n                    DomHelper.sync(html, cellElement.firstElementChild);\n                }\n            }\n        });\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Updates summaries on store changes (except record update, handled below)\n     * @private\n     */\n    onStoreChange({ action, changes }) {\n        let shouldUpdate = true;\n\n        if (this.disabled) {\n            return;\n        }\n\n        if (action === 'update') {\n            // only update summary when a field that affects summary is changed\n            // TODO: this should maybe be removed, another column might depend on the value for its summary?\n            shouldUpdate = Object.keys(changes).some(field => {\n                const colField = this.grid.columns.get(field);\n                // check existence, since a field not used in a column might have changed\n                return Boolean(colField) && (Boolean(colField.sum) || Boolean(colField.summaries));\n            });\n        }\n\n        if (shouldUpdate) {\n            this.updateSummaries();\n        }\n    }\n\n    //endregion\n\n    updateSelectedOnly(value) {\n        const me = this;\n        me.detachListeners('selectionChange');\n\n        if (value) {\n            me.grid.ion({\n                name            : 'selectionChange',\n                selectionChange : me.refresh,\n                thisObj         : me\n            });\n        }\n        me.refresh();\n    }\n\n    /**\n     * Refreshes the summaries\n     */\n    refresh() {\n        this.updateSummaries();\n    }\n}\n\nSummary.featureClass = 'b-summary';\n\nGridFeatureManager.registerFeature(Summary);\n","import { RowsRange } from '../../../feature/export/Utils.js';\nimport Combo from '../../../../Core/widget/Combo.js';\n\nexport default class ExportRowsCombo extends Combo {\n\n    //region Config\n\n    static get $name() {\n        return 'ExportRowsCombo';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'exportrowscombo';\n    }\n\n    static get defaultConfig() {\n        return {\n            editable : false\n        };\n    }\n\n    //endregion\n\n    buildItems() {\n        const me = this;\n\n        return [\n            { id : RowsRange.all, text : me.L('L{all}') },\n            { id : RowsRange.visible, text : me.L('L{visible}') }\n        ];\n    }\n}\n\n// Register this widget type with its Factory\nExportRowsCombo.initClass();\n","import { Orientation } from '../../../feature/export/Utils.js';\nimport Combo from '../../../../Core/widget/Combo.js';\n\nexport default class ExportOrientationCombo extends Combo {\n\n    //region Config\n\n    static get $name() {\n        return 'ExportOrientationCombo';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'exportorientationcombo';\n    }\n\n    static get defaultConfig() {\n        return {\n            editable : false\n        };\n    }\n\n    //endregion\n\n    buildItems() {\n        const me = this;\n\n        return [\n            { id : Orientation.portrait, text : me.L('L{portrait}') },\n            { id : Orientation.landscape, text : me.L('L{landscape}') }\n        ];\n    }\n}\n\n// Register this widget type with its Factory\nExportOrientationCombo.initClass();\n","import Popup from '../../../Core/widget/Popup.js';\nimport LocaleManager from '../../../Core/localization/LocaleManager.js';\nimport './field/ExportRowsCombo.js';\nimport './field/ExportOrientationCombo.js';\nimport { FileFormat, PaperFormat } from '../../feature/export/Utils.js';\nimport Checkbox from '../../../Core/widget/Checkbox.js';\nimport Field from '../../../Core/widget/Field.js';\n\nfunction buildComboItems(obj, fn = x => x) {\n    return Object.keys(obj).map(key => ({ id : key, text : fn(key) }));\n}\n\n/**\n * @module Grid/view/export/ExportDialog\n */\n\n/**\n * Dialog window used by the {@link Grid/feature/export/PdfExport PDF export feature}. It allows users to select export\n * options like paper format and columns to export. This dialog contains a number of predefined\n * {@link Core/widget/Field fields} which you can access through the popup's {@link #property-widgetMap}.\n *\n * ## Default widgets\n *\n * The default widgets of this dialog are:\n *\n * | Widget ref             | Type                         | Weight | Description                                          |\n * |------------------------|------------------------------|--------|----------------------------------------------------- |\n * | `columnsField`         | {@link Core/widget/Combo}    | 100    | Choose columns to export                             |\n * | `rowsRangeField`       | {@link Core/widget/Combo}    | 200    | Choose which rows to export                          |\n * | `exporterTypeField`    | {@link Core/widget/Combo}    | 300    | Type of the exporter to use                          |\n * | `alignRowsField`       | {@link Core/widget/Checkbox} | 400    | Align row top to the page top on every exported page |\n * | `repeatHeaderField`    | {@link Core/widget/Checkbox} | 500    | Toggle repeating headers on / off                    |\n * | `fileFormatField`      | {@link Core/widget/Combo}    | 600    | Choose file format                                   |\n * | `paperFormatField`     | {@link Core/widget/Combo}    | 700    | Choose paper format                                  |\n * | `orientationField`     | {@link Core/widget/Combo}    | 800    | Choose orientation                                   |\n *\n * The default buttons are:\n *\n * | Widget ref             | Type                       | Weight | Description                                          |\n * |------------------------|----------------------------|--------|------------------------------------------------------|\n * | `exportButton`         | {@link Core/widget/Button} | 100    | Triggers export                                      |\n * | `cancelButton`         | {@link Core/widget/Button} | 200    | Cancel export                                        |\n *\n * Bottom buttons may be customized using `bbar` config passed to `exportDialog`:\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         pdfExport : {\n *             editorConfig : {\n *                 bbar : {\n *                     items : {\n *                         exportButton : { text : 'Go!' }\n *                     }\n *                 }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n *\n * ## Configuring default widgets\n *\n * Widgets can be customized with {@link Grid/feature/export/PdfExport#config-exportDialog} config:\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         pdfExport : {\n *             exportDialog : {\n *                 items : {\n *                     // hide the field\n *                     orientationField  : { hidden : true },\n *\n *                     // reorder fields\n *                     exporterTypeField : { weight : 150 },\n *\n *                     // change default format in exporter\n *                     fileFormatField   : { value : 'png' }\n *                 }\n *             }\n *         }\n *     }\n * });\n *\n * grid.features.pdfExport.showExportDialog();\n * ```\n *\n * ## Configuring default columns\n *\n * By default all visible columns are selected in the export dialog. This is managed by the\n * {@link #config-autoSelectVisibleColumns} config. To change default selected columns you should disable this config\n * and set field value. Value should be an array of valid column ids (or column instances). This way you can\n * preselect hidden columns:\n *\n * ```javascript\n * const grid = new Grid({\n *     columns : [\n *         { id : 'name', text : 'Name', field : 'name' },\n *         { id : 'age', text : 'Age', field : 'age' },\n *         { id : 'city', text : 'City', field : 'city', hidden : true }\n *     ],\n *     features : {\n *         pdfExport : {\n *             exportDialog : {\n *                 autoSelectVisibleColumns : false,\n *                 items : {\n *                     columnsField : { value : ['name', 'city'] }\n *                 }\n *             }\n *         }\n *     }\n * })\n *\n * // This will show export dialog with Name and City columns selected\n * // even though City column is hidden in the UI\n * grid.features.pdfExport.showExportDialog();\n * ```\n *\n * ## Adding fields\n *\n * You can add your own fields to the export dialog. To make such field value acessible to the feature it should follow\n * a specific naming pattern - it should have `ref` config ending with `Field`, see other fields for reference -\n * `orientationField`, `columnsField`, etc. Fields not matching this pattern are ignored. When values are collected from\n * the dialog, `Field` part of the widget reference is removed, so `orientationField` becomes `orientation`, `fooField`\n * becomes `foo`, etc.\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         pdfExport : {\n *             exportDialog : {\n *                 items : {\n *                     // This field gets into export config\n *                     fooField : {\n *                         type : 'text',\n *                         label : 'Foo',\n *                         value : 'FOO'\n *                     },\n *\n *                     // This one does not, because name doesn't end with `Field`\n *                     bar : {\n *                         type : 'text',\n *                         label : 'Bar',\n *                         value : 'BAR'\n *                     },\n *\n *                     // Add a container widget to wrap some fields together\n *                     myContainer : {\n *                         type : 'container',\n *                         items : {\n *                             // This one gets into config too despite the nesting level\n *                             bazField : {\n *                                 type : 'text',\n *                                 label : 'Baz',\n *                                 value : 'BAZ'\n *                             }\n *                         }\n *                     }\n *                 }\n *             }\n *         }\n *     }\n * });\n *\n * // Assuming export dialog is opened and export triggered with default values\n * // you can receive custom field values here\n * grid.on({\n *     beforePdfExport({ config }) {\n *         console.log(config.foo) // 'FOO'\n *         console.log(config.bar) // undefined\n *         console.log(config.baz) // 'BAZ'\n *     }\n * });\n * ```\n *\n * ## Configuring widgets at runtime\n *\n * If you don't know column ids before grid instantiation or you want a flexible config, you can change widget values\n * before dialog pops up:\n *\n * ```javascript\n * const grid = new Grid({\n *     columns : [\n *         { id : 'name', text : 'Name', field : 'name' },\n *         { id : 'age', text : 'Age', field : 'age' },\n *         { id : 'city', text : 'City', field : 'city', hidden : true }\n *     ],\n *     features : {\n *         pdfExport : true\n *     }\n * });\n *\n * // Such listener would ignore autoSelectVisibleColumns config. Similar to the snippet\n * // above this will show Name and City columns\n * grid.features.pdfExport.exportDialog.on({\n *     beforeShow() {\n *         this.widgetMap.columnsField.value = ['age', 'city']\n *     }\n * });\n * ```\n *\n * @extends Core/widget/Popup\n */\nexport default class ExportDialog extends Popup {\n\n    //region Config\n\n    static get $name() {\n        return 'ExportDialog';\n    }\n\n    static get type() {\n        return 'exportdialog';\n    }\n\n    static get configurable() {\n        return {\n            autoShow  : false,\n            autoClose : false,\n            closable  : true,\n            centered  : true,\n\n            /**\n             * Returns map of values of dialog fields.\n             * @member {Object<String,Object>} values\n             * @readonly\n             */\n\n            /**\n             * Grid instance to build export dialog for\n             * @config {Grid.view.Grid}\n             */\n            client : null,\n\n            /**\n             * Set to `false` to not preselect all visible columns when the dialog is shown\n             * @config {Boolean}\n             */\n            autoSelectVisibleColumns : true,\n\n            /**\n             * Set to `false` to allow using PNG + Multipage config in export dialog\n             * @config {Boolean}\n             */\n            hidePNGMultipageOption : true,\n\n            title : 'L{exportSettings}',\n\n            maxHeight : '80%',\n\n            scrollable : {\n                overflowY : true\n            },\n            defaults : {\n                localeClass : this\n            },\n            items : {\n                columnsField : {\n                    type         : 'combo',\n                    label        : 'L{ExportDialog.columns}',\n                    store        : {},\n                    valueField   : 'id',\n                    displayField : 'text',\n                    multiSelect  : true,\n                    weight       : 100,\n                    maxHeight    : 100\n                },\n                rowsRangeField : {\n                    type   : 'exportrowscombo',\n                    label  : 'L{ExportDialog.rows}',\n                    value  : 'all',\n                    weight : 200\n                },\n                exporterTypeField : {\n                    type         : 'combo',\n                    label        : 'L{ExportDialog.exporterType}',\n                    editable     : false,\n                    value        : 'singlepage',\n                    displayField : 'text',\n                    buildItems() {\n                        const dialog = this.parent;\n\n                        return dialog.exporters.map(exporter => ({\n                            id   : exporter.type,\n                            text : dialog.optionalL(exporter.title, this)\n                        }));\n                    },\n                    onChange({ value }) {\n                        this.owner.widgetMap.alignRowsField.hidden    = value === 'singlepage';\n                        this.owner.widgetMap.repeatHeaderField.hidden = value !== 'multipagevertical';\n                    },\n                    weight : 300\n                },\n                alignRowsField : {\n                    type    : 'checkbox',\n                    label   : 'L{ExportDialog.alignRows}',\n                    checked : false,\n                    hidden  : true,\n                    weight  : 400\n                },\n                repeatHeaderField : {\n                    type        : 'checkbox',\n                    label       : 'L{ExportDialog.repeatHeader}',\n                    localeClass : this,\n                    hidden      : true,\n                    weight      : 500\n                },\n                fileFormatField : {\n                    type        : 'combo',\n                    label       : 'L{ExportDialog.fileFormat}',\n                    localeClass : this,\n                    editable    : false,\n                    value       : 'pdf',\n                    items       : [],\n                    onChange({ value, oldValue }) {\n                        const dialog = this.parent;\n                        if (dialog.hidePNGMultipageOption) {\n                            const\n                                exporterField = dialog.widgetMap.exporterTypeField,\n                                exporter      = exporterField.store.find(r => r.id === 'singlepage');\n\n                            if (value === FileFormat.png && exporter) {\n                                this._previousDisabled = exporterField.disabled;\n                                exporterField.disabled = true;\n\n                                this._previousValue = exporterField.value;\n                                exporterField.value = 'singlepage';\n                            }\n                            else if (oldValue === FileFormat.png && this._previousValue) {\n                                exporterField.disabled = this._previousDisabled;\n                                exporterField.value    = this._previousValue;\n                            }\n                        }\n                    },\n                    weight : 600\n                },\n                paperFormatField : {\n                    type     : 'combo',\n                    label    : 'L{ExportDialog.paperFormat}',\n                    editable : false,\n                    value    : 'A4',\n                    items    : [],\n                    weight   : 700\n                },\n                orientationField : {\n                    type   : 'exportorientationcombo',\n                    label  : 'L{ExportDialog.orientation}',\n                    value  : 'portrait',\n                    weight : 800\n                }\n            },\n            bbar : {\n                defaults : {\n                    localeClass : this\n                },\n                items : {\n                    exportButton : {\n                        color   : 'b-green',\n                        text    : 'L{ExportDialog.export}',\n                        weight  : 100,\n                        onClick : 'up.onExportClick'\n                    },\n                    cancelButton : {\n                        color   : 'b-gray',\n                        text    : 'L{ExportDialog.cancel}',\n                        weight  : 200,\n                        onClick : 'up.onCancelClick'\n                    }\n                }\n            }\n        };\n    }\n\n    //endregion\n\n    construct(config = {}) {\n        const\n            me         = this,\n            { client } = config;\n\n        if (!client) {\n            throw new Error('`client` config is required');\n        }\n\n        me.columnsStore = client.columns.chain(column => column.isLeaf && column.exportable, null, { excludeCollapsedRecords : false });\n\n        me.applyInitialValues(config);\n\n        super.construct(config);\n\n        LocaleManager.ion({\n            locale  : 'onLocaleChange',\n            prio    : -1,\n            thisObj : me\n        });\n    }\n\n    applyInitialValues(config) {\n        const\n            me    = this,\n            items = config.items = config.items || {};\n\n        config.width               = config.width || me.L('L{width}');\n        config.defaults            = config.defaults || {};\n        config.defaults.labelWidth = config.defaults.labelWidth || me.L('L{ExportDialog.labelWidth}');\n\n        items.columnsField     = items.columnsField || {};\n        items.fileFormatField  = items.fileFormatField || {};\n        items.paperFormatField = items.paperFormatField || {};\n\n        items.fileFormatField.items  = buildComboItems(FileFormat, value => value.toUpperCase());\n        items.paperFormatField.items = buildComboItems(PaperFormat);\n\n        items.columnsField.store = me.columnsStore;\n    }\n\n    onBeforeShow() {\n        const { columnsField, alignRowsField, exporterTypeField, repeatHeaderField } = this.widgetMap;\n\n        if (this.autoSelectVisibleColumns) {\n            columnsField.value = this.columnsStore.query(c => !c.hidden);\n        }\n        alignRowsField.hidden    = exporterTypeField.value === 'singlepage';\n        repeatHeaderField.hidden = exporterTypeField.value !== 'multipagevertical';\n\n        super.onBeforeShow?.(...arguments);\n    }\n\n    onLocaleChange() {\n        const\n            labelWidth = this.L('L{labelWidth}');\n\n        this.width = this.L('L{width}');\n\n        this.eachWidget(widget => {\n            if (widget instanceof Field) {\n                widget.labelWidth = labelWidth;\n            }\n        });\n    }\n\n    onExportClick() {\n        const values = this.values;\n\n        /**\n         * Fires when export button is clicked\n         * @event export\n         * @param {Object} values Object containing config for {@link Grid.feature.export.PdfExport#function-export export()} method\n         * @category Export\n         */\n        this.trigger('export', { values });\n    }\n\n    onCancelClick() {\n        /**\n         * Fires when cancel button is clicked. Popup will hide itself.\n         * @event cancel\n         * @category Export\n         */\n        this.trigger('cancel');\n        this.hide();\n    }\n\n    get values() {\n        const\n            fieldRe = /field/i,\n            result  = {};\n\n        this.eachWidget(widget => {\n            if (fieldRe.test(widget.ref)) {\n                result[widget.ref.replace(fieldRe, '')] = widget instanceof Checkbox ? widget.checked : widget.value;\n            }\n        });\n\n        return result;\n    }\n}\n\nExportDialog.initClass();\n","import Exporter from './Exporter.js';\nimport { Orientation, PaperFormat, RowsRange } from '../Utils.js';\n\n/**\n * @module Grid/feature/export/exporter/MultiPageExporter\n */\n\n/**\n * A multiple page exporter. Used by the {@link Grid.feature.export.PdfExport} feature to export to multiple pages. You\n * do not need to use this class directly.\n *\n * ### Extending exporter\n *\n * ```javascript\n * class MyMultiPageExporter extends MultiPageExporter {\n *     // type is required for exporter\n *     static get type() {\n *         return 'mymultipageexporter';\n *     }\n *\n *     get stylesheets() {\n *         const stylesheets = super.stylesheets;\n *\n *         stylesheets.forEach(styleNodeOrLinkTag => doSmth(styleNodeOrLinkTag))\n *\n *         return stylesheets;\n *     }\n * }\n *\n * const grid = new Grid({\n *     features : {\n *         pdfExport : {\n *             // this export feature is configured with only one exporter\n *             exporters : [MyMultiPageExporter]\n *         }\n *     }\n * });\n *\n * // run export with the new exporter\n * grid.features.pdfExport.export({ exporter : 'mymultipageexporter' });\n * ```\n *\n * @classType multipage\n * @feature\n * @extends Grid/feature/export/exporter/Exporter\n */\nexport default class MultiPageExporter extends Exporter {\n\n    static get $name() {\n        return 'MultiPageExporter';\n    }\n\n    static get type() {\n        return 'multipage';\n    }\n\n    static get title() {\n        // In case locale is missing exporter is still distinguishable\n        return this.L('L{multipage}');\n    }\n\n    static get exportingPageText() {\n        return 'L{exportingPage}';\n    }\n\n    //region State management\n\n    async stateNextPage({ client, rowsRange, enableDirectRendering }) {\n        const { exportMeta } = this;\n\n        ++exportMeta.currentPage;\n        ++exportMeta.verticalPosition;\n\n        delete exportMeta.lastExportedRowBottom;\n\n        // If current vertical position is greater than max vertical pages, switch to next column\n        if (exportMeta.verticalPosition >= exportMeta.verticalPages) {\n            Object.assign(exportMeta, {\n                verticalPosition     : 0,\n                horizontalPosition   : exportMeta.horizontalPosition + 1,\n                currentPageTopMargin : 0,\n                lastTop              : 0,\n                lastRowIndex         : rowsRange === RowsRange.visible ? client.rowManager.firstVisibleRow.dataIndex : 0\n            });\n\n            delete exportMeta.lastRowDataIndex;\n\n            if (!enableDirectRendering) {\n                await this.scrollRowIntoView(client, exportMeta.firstVisibleDataIndex, { block : 'start' });\n            }\n        }\n    }\n\n    //endregion\n\n    //region Preparation\n\n    async prepareComponent(config) {\n        await super.prepareComponent(config);\n\n        const\n            me              = this,\n            { exportMeta }  = me,\n            {\n                client,\n                headerTpl,\n                footerTpl,\n                alignRows,\n                rowsRange,\n                enableDirectRendering\n            }               = config,\n            paperFormat     = PaperFormat[config.paperFormat],\n            isPortrait      = config.orientation === Orientation.portrait,\n            paperWidth      = isPortrait ? paperFormat.width : paperFormat.height,\n            paperHeight     = isPortrait ? paperFormat.height : paperFormat.width,\n            pageWidth       = me.inchToPx(paperWidth),\n            pageHeight      = me.inchToPx(paperHeight),\n            onlyVisibleRows = rowsRange === RowsRange.visible,\n            horizontalPages = Math.ceil(exportMeta.totalWidth / pageWidth);\n\n        // To estimate amount of pages correctly we need to know height of the header/footer on every page\n        let contentHeight = pageHeight;\n\n        if (headerTpl) {\n            contentHeight -= me.measureElement(headerTpl({\n                totalWidth  : exportMeta.totalWidth,\n                totalPages  : -1,\n                currentPage : -1\n            }));\n        }\n\n        if (footerTpl) {\n            contentHeight -= me.measureElement(footerTpl({\n                totalWidth  : exportMeta.totalWidth,\n                totalPages  : -1,\n                currentPage : -1\n            }));\n        }\n\n        let totalHeight, verticalPages, totalRows = client.store.count;\n\n        if (onlyVisibleRows) {\n            totalRows = me.getVisibleRowsCount(client);\n\n            totalHeight = exportMeta.totalHeight + client.headerHeight + client.footerHeight + client.bodyHeight;\n        }\n        else {\n            totalHeight = exportMeta.totalHeight + client.headerHeight + client.footerHeight + client.scrollable.scrollHeight;\n        }\n\n        // alignRows config specifies if rows should be always fully visible. E.g. if row doesn't fit on the page, it goes\n        // to the top of the next page\n        if (alignRows && !onlyVisibleRows) {\n            // we need to estimate amount of vertical pages for case when we only put row on the page if it fits\n            // first we need to know how much rows would fit one page, keeping in mind first page also contains header\n            // This estimation is loose, because row height might differ much between pages\n            const\n                rowHeight       = client.rowManager.rowOffsetHeight,\n                rowsOnFirstPage = Math.floor((contentHeight - client.headerHeight) / rowHeight),\n                rowsPerPage     = Math.floor(contentHeight / rowHeight),\n                remainingRows   = totalRows - rowsOnFirstPage;\n\n            verticalPages = 1 + Math.ceil(remainingRows / rowsPerPage);\n        }\n        else {\n            verticalPages = Math.ceil(totalHeight / contentHeight);\n        }\n\n        Object.assign(exportMeta, {\n            paperWidth,\n            paperHeight,\n            pageWidth,\n            pageHeight,\n            horizontalPages,\n            verticalPages,\n            totalHeight,\n            contentHeight,\n            totalRows,\n            totalPages           : horizontalPages * verticalPages,\n            currentPage          : 0,\n            verticalPosition     : 0,\n            horizontalPosition   : 0,\n            currentPageTopMargin : 0,\n            lastTop              : 0,\n            lastRowIndex         : onlyVisibleRows ? client.rowManager.firstVisibleRow.dataIndex : 0\n        });\n\n        if (!enableDirectRendering) {\n            this.adjustRowBuffer(client);\n        }\n    }\n\n    async restoreComponent(config) {\n        await super.restoreComponent(config);\n\n        if (!config.enableDirectRendering) {\n            this.restoreRowBuffer(config.client);\n        }\n    }\n\n    //endregion\n\n    async collectRows(config) {\n        const\n            me             = this,\n            { exportMeta } = me,\n            {\n                client,\n                alignRows,\n                rowsRange\n            }              = config,\n            {\n                subGrids,\n                currentPageTopMargin,\n                verticalPosition,\n                contentHeight,\n                totalRows,\n                lastRowDataIndex\n            }              = exportMeta,\n            { rowManager } = client,\n            { rows }       = rowManager,\n            onlyVisible    = rowsRange === RowsRange.visible,\n            hasMergeCells  = client.hasActiveFeature('mergeCells');\n\n        let remainingHeight, index;\n\n        if (onlyVisible && lastRowDataIndex != null) {\n            if (lastRowDataIndex === rows[rows.length - 1].dataIndex) {\n                index = rows.length - 1;\n            }\n            else {\n                index = rows.findIndex(r => r.dataIndex === lastRowDataIndex);\n            }\n        }\n        else {\n            index = onlyVisible\n                ? rows.findIndex(r => r.bottom > Math.ceil(client.scrollable.y))\n                : rows.findIndex(r => r.bottom + currentPageTopMargin + client.headerHeight > 0);\n        }\n\n        const\n            firstRowIndex     = index,\n            // This is a portion of the row which is not visible, which means it shouldn't affect remaining height\n            // Don't calculate for the first page\n            overflowingHeight = (onlyVisible || verticalPosition === 0) ? 0 : rows[index].top + currentPageTopMargin + client.headerHeight;\n\n        // Calculate remaining height to fill with rows\n        // remainingHeight is height of the page content region to fill. When next row is exported, this heights gets\n        // reduced. Since top rows may be partially visible, it would lead to increasing error and eventually to incorrect\n        // exported rows for the page\n        remainingHeight = contentHeight - overflowingHeight;\n\n        // first exported page container header\n        if (verticalPosition === 0) {\n            remainingHeight -= client.headerHeight;\n        }\n\n        // data index of the last collected row\n        let lastDataIndex,\n            offset = 0;\n\n        while (remainingHeight > 0) {\n            const row = rows[index];\n\n            if (alignRows && remainingHeight < row.offsetHeight) {\n                offset = -remainingHeight;\n                remainingHeight = 0;\n                // If we skip a row save its bottom to meta data in order to align canvases height\n                // properly\n                me.exportMeta.lastExportedRowBottom = rows[index - 1].bottom;\n            }\n            else {\n                me.collectRow(row);\n\n                remainingHeight -= row.offsetHeight;\n\n                lastDataIndex = row.dataIndex;\n\n                // Last row is processed, still need to fill the view\n                if (++index === rows.length && remainingHeight > 0) {\n                    remainingHeight = 0;\n                }\n                else if (onlyVisible && (index - firstRowIndex) === totalRows) {\n                    remainingHeight = 0;\n                }\n            }\n        }\n\n        // Collect merged cells per subgrid\n        if (hasMergeCells) {\n            for (const subGridName in subGrids) {\n                const\n                    subGrid     = subGrids[subGridName],\n                    mergedCells = client.subGrids[subGridName].element.querySelectorAll(`.b-grid-merged-cells`);\n\n                subGrid.mergedCellsHtml = [];\n\n                for (const mergedCell of mergedCells) {\n                    subGrid.mergedCellsHtml.push(mergedCell.outerHTML);\n                }\n            }\n        }\n\n        const lastRow = rows[index - 1];\n\n        if (lastRow) {\n            // Calculate exact grid height according to the the last exported row\n            exportMeta.exactGridHeight = lastRow.bottom + client.footerContainer.offsetHeight + client.headerContainer.offsetHeight;\n            exportMeta.lastRowDataIndex = lastRow.dataIndex + 1;\n        }\n\n        await me.onRowsCollected(rows.slice(firstRowIndex, index), config);\n\n        // No scrolling required if we are only exporting currently visible rows\n        if (onlyVisible) {\n            exportMeta.exactGridHeight -= exportMeta.scrollableTopMargin = client.scrollable.y;\n        }\n        else {\n            // With variable row height row manager might relayout rows to fix position, moving them up or down.\n            const detacher = rowManager.ion({ offsetRows : ({ offset : value }) => offset += value });\n\n            await me.scrollRowIntoView(client, lastDataIndex + 1);\n\n            detacher();\n        }\n\n        return offset;\n    }\n\n    async renderRows(config) {\n        const\n            me              = this,\n            { exportMeta }  = me,\n            {\n                client,\n                alignRows,\n                rowsRange\n            }               = config,\n            {\n                currentPageTopMargin,\n                verticalPosition,\n                contentHeight,\n                totalRows,\n                lastRowIndex,\n                fakeRow\n            }               = exportMeta,\n            { store }       = client,\n            hasMergeCells   = client.hasActiveFeature('mergeCells'),\n            onlyVisibleRows = rowsRange === RowsRange.visible;\n\n        let index       = lastRowIndex,\n            { lastTop } = exportMeta,\n            remainingHeight;\n\n        const\n            firstRowIndex     = index,\n            // This is a portion of the row which is not visible, which means it shouldn't affect remaining height\n            // Don't calculate for the first page\n            overflowingHeight = (onlyVisibleRows || verticalPosition === 0) ? 0 : lastTop + currentPageTopMargin + client.headerHeight,\n            rows              = [];\n\n        // Calculate remaining height to fill with rows\n        // remainingHeight is height of the page content region to fill. When next row is exported, this heights gets\n        // reduced. Since top rows may be partially visible, it would lead to increasing error and eventually to incorrect\n        // exported rows for the page\n        remainingHeight = contentHeight - overflowingHeight;\n\n        // first exported page contains header\n        if (verticalPosition === 0) {\n            remainingHeight -= client.headerHeight;\n        }\n\n        // data index of the last collected row\n        let lastDataIndex, previousTop,\n            offset = 0;\n\n        while (remainingHeight > 0) {\n            fakeRow.render(index, store.getAt(index), true, false, true);\n\n            if (alignRows && remainingHeight < fakeRow.offsetHeight) {\n                offset = -remainingHeight;\n                remainingHeight = 0;\n                // If we skip a row save its bottom to meta data in order to align canvases height\n                // properly\n                me.exportMeta.lastExportedRowBottom = lastTop;\n            }\n            else {\n                previousTop = lastTop;\n                lastDataIndex = index;\n\n                lastTop = fakeRow.translate(lastTop);\n                remainingHeight -= fakeRow.offsetHeight;\n\n                me.collectRow(fakeRow);\n\n                // Push an object with data required to build merged cell\n                rows.push({\n                    top          : fakeRow.top,\n                    bottom       : fakeRow.bottom,\n                    offsetHeight : fakeRow.offsetHeight,\n                    dataIndex    : fakeRow.dataIndex\n                });\n\n                // Last row is processed, still need to fill the view\n                if (++index === store.count && remainingHeight > 0) {\n                    remainingHeight = 0;\n                }\n                else if (onlyVisibleRows && (index - firstRowIndex) === totalRows) {\n                    remainingHeight = 0;\n                }\n            }\n        }\n\n        if (hasMergeCells) {\n            me.renderMergedCells(config, firstRowIndex, index, rows);\n        }\n\n        // Store next to last row index and top position so we could proceed on the next page.\n        // In fact, when we take full control of row rendering we don't even need to do this. It is only required\n        // to be compatible with current exporters. When we get rid of scrolling, we can just start rendering rows\n        // on each page from 0 (adjusted by overflow of the previous row)\n        exportMeta.lastRowIndex = alignRows ? index : lastDataIndex;\n        exportMeta.lastTop = alignRows ? lastTop : previousTop;\n\n        if (fakeRow) {\n            // Calculate exact grid height according to the the last exported row\n            exportMeta.exactGridHeight = fakeRow.bottom + client.footerContainer.offsetHeight + client.headerContainer.offsetHeight;\n        }\n\n        await me.onRowsCollected(rows, config);\n\n        return offset;\n    }\n\n    async buildPage(config) {\n        const\n            me             = this,\n            { exportMeta } = me,\n            {\n                client,\n                headerTpl,\n                footerTpl,\n                enableDirectRendering\n            }              = config,\n            {\n                totalWidth,\n                totalPages,\n                currentPage,\n                subGrids\n            }              = exportMeta;\n\n        // Rows are stored in shared state object, need to clean it before exporting next page\n        Object.values(subGrids).forEach(subGrid => subGrid.rows = []);\n\n        // With variable row height total height might change after scroll, update it\n        // to show content completely on the last page\n        if (config.rowsRange === RowsRange.all) {\n            exportMeta.totalHeight = client.height - client.bodyHeight + client.scrollable.scrollHeight - me.getVirtualScrollerHeight(client);\n        }\n\n        let header, footer;\n\n        // Measure header and footer height\n        if (headerTpl) {\n            header = me.prepareHTML(headerTpl({\n                totalWidth,\n                totalPages,\n                currentPage\n            }));\n        }\n\n        if (footerTpl) {\n            footer = me.prepareHTML(footerTpl({\n                totalWidth,\n                totalPages,\n                currentPage\n            }));\n        }\n\n        let offset;\n\n        if (enableDirectRendering) {\n            offset = await me.renderRows(config);\n        }\n        else {\n            offset = await me.collectRows(config);\n        }\n\n        const html = me.buildPageHtml(config);\n\n        return { html, header, footer, offset };\n    }\n\n    async onRowsCollected() {}\n\n    buildPageHtml() {\n        const\n            me           = this,\n            { subGrids } = me.exportMeta;\n\n        // Now when rows are collected, we need to add them to exported grid\n        let html = me.prepareExportElement();\n\n        Object.values(subGrids).forEach(({ placeHolder, rows, mergedCellsHtml }) => {\n            const placeHolderText = placeHolder.outerHTML;\n\n            let contentHtml = rows.reduce((result, row) => {\n                result += row[0];\n\n                return result;\n            }, '');\n\n            if (mergedCellsHtml?.length) {\n                contentHtml += `<div class=\"b-grid-merged-cells-container\">${mergedCellsHtml.join('')}</div>`;\n            }\n\n            html = html.replace(placeHolderText, contentHtml);\n        });\n\n        return html;\n    }\n\n    prepareExportElement() {\n        const\n            me = this,\n            { element, exportMeta } = me;\n\n        if (exportMeta.scrollableTopMargin) {\n            element.querySelector('.b-grid-vertical-scroller').style.marginTop = `-${exportMeta.scrollableTopMargin}px`;\n        }\n\n        return super.prepareExportElement();\n    }\n}\n\n// HACK: terser/obfuscator doesn't yet support async generators, when processing code it converts async generator to regular async\n// function.\nMultiPageExporter.prototype.pagesExtractor = async function * pagesExtractor(config) {\n    const\n        me = this,\n        {\n            exportMeta,\n            stylesheets\n        }  = me,\n        {\n            totalWidth,\n            totalPages,\n            paperWidth,\n            paperHeight,\n            contentHeight\n        }  = exportMeta;\n\n    let currentPage;\n\n    while ((currentPage = exportMeta.currentPage) < totalPages) {\n        me.trigger('exportStep', { text : me.L(MultiPageExporter.exportingPageText, { currentPage, totalPages }), progress : Math.round(((currentPage + 1) / totalPages) * 90) });\n\n        const { html, header, footer, offset } = await me.buildPage(config);\n\n        // TotalHeight might change in case of variable row heights\n        // Move exported content in the visible frame\n        const styles = [\n            ...stylesheets,\n            `\n                <style>\n                    #${config.client.id} {\n                        height: ${exportMeta.exactGridHeight}px !important;\n                        width: ${totalWidth}px !important;\n                    }\n                    \n                    .b-export-body .b-export-viewport {\n                        margin-inline-start : ${-paperWidth * exportMeta.horizontalPosition}in;\n                        margin-top  : ${exportMeta.currentPageTopMargin}px;\n                    }\n                </style>\n            `];\n\n        // when aligning rows, offset gets accumulated, so we need to take it into account\n        exportMeta.currentPageTopMargin -= contentHeight + offset;\n\n        await me.stateNextPage(config);\n\n        yield {\n            html : me.pageTpl({\n                html,\n                header,\n                footer,\n                styles,\n                paperWidth,\n                paperHeight\n            })\n        };\n    }\n};\n","import Exporter from './Exporter.js';\nimport { Orientation, PaperFormat, RowsRange } from '../Utils.js';\n\n/**\n * @module Grid/feature/export/exporter/MultiPageVerticalExporter\n */\n\n/**\n * A vertical multiple page exporter. Used by the {@link Grid.feature.export.PdfExport} feature to export to multiple\n * pages. Content will be scaled in a horizontal direction to fit the page.\n *\n * You do not need to use this class directly.\n *\n * ### Extending exporter\n *\n * ```javascript\n * class MyMultiPageVerticalExporter extends MultiPageVerticalExporter {\n *     // type is required for exporter\n *     static get type() {\n *         return 'mymultipageverticalexporter';\n *     }\n *\n *     get stylesheets() {\n *         const stylesheets = super.stylesheets;\n *\n *         stylesheets.forEach(styleNodeOrLinkTag => doSmth(styleNodeOrLinkTag))\n *\n *         return stylesheets;\n *     }\n * }\n *\n * const grid = new Grid({\n *     features : {\n *         pdfExport : {\n *             // this export feature is configured with only one exporter\n *             exporters : [MyMultiPageVerticalExporter]\n *         }\n *     }\n * });\n *\n * // run export with the new exporter\n * grid.features.pdfExport.export({ exporter : 'mymultipageverticalexporter' });\n * ```\n *\n * @classType multipagevertical\n * @feature\n * @extends Grid/feature/export/exporter/Exporter\n */\nexport default class MultiPageVerticalExporter extends Exporter {\n\n    static get $name() {\n        return 'MultiPageVerticalExporter';\n    }\n\n    static get type() {\n        return 'multipagevertical';\n    }\n\n    static get title() {\n        // In case locale is missing exporter is still distinguishable\n        return this.L('L{multipagevertical}');\n    }\n\n    static get exportingPageText() {\n        return 'L{exportingPage}';\n    }\n\n    //region State management\n\n    async stateNextPage({ client }) {\n        const\n            { exportMeta } = this,\n            {\n                totalRows,\n                processedRows,\n                totalPages\n            } = exportMeta;\n\n        ++exportMeta.currentPage;\n        ++exportMeta.verticalPosition;\n\n        // With variable row heights it is possible that initial pages estimation is wrong. If we're out but there are\n        // more rows to process - continue exporting\n        if (exportMeta.currentPage === totalPages && processedRows.size !== totalRows) {\n            ++exportMeta.totalPages;\n            ++exportMeta.verticalPages;\n        }\n    }\n\n    //endregion\n\n    estimateTotalPages(config) {\n        const\n            me             = this,\n            { exportMeta } = me,\n            {\n                client,\n                headerTpl,\n                footerTpl,\n                alignRows,\n                rowsRange,\n                repeatHeader,\n                enableDirectRendering\n            }              = config,\n            {\n                pageWidth,\n                pageHeight,\n                totalWidth\n            }              = exportMeta,\n            scale          = me.getScaleValue(pageWidth, totalWidth);\n\n        // To estimate amount of pages correctly we need to know height of the header/footer on every page\n        let\n            // bodyHeight does not always report correct value, read it from the DOM element instead, we don't care\n            // about forced reflow at this stage\n            totalHeight   = 0 - me.getVirtualScrollerHeight(client) + client.height - client.bodyElement.offsetHeight + client.scrollable.scrollHeight,\n            // We will be scaling content horizontally, need to adjust content height accordingly\n            contentHeight = pageHeight / scale,\n            totalRows     = client.store.count,\n            initialScroll = 0,\n            rowsHeight    = totalHeight,\n            verticalPages;\n\n        if (headerTpl) {\n            contentHeight -= me.measureElement(headerTpl({\n                totalWidth,\n                totalPages  : -1,\n                currentPage : -1\n            }));\n        }\n\n        if (footerTpl) {\n            contentHeight -= me.measureElement(footerTpl({\n                totalWidth,\n                totalPages  : -1,\n                currentPage : -1\n            }));\n        }\n\n        // If we are repeating header on every page we have smaller contentHeight\n        if (repeatHeader) {\n            contentHeight -= client.headerHeight + client.footerHeight;\n            totalHeight -= client.headerHeight + client.footerHeight;\n        }\n\n        if (rowsRange === RowsRange.visible) {\n            const\n                rowManager = client.rowManager,\n                firstRow = rowManager.firstVisibleRow,\n                lastRow  = rowManager.lastVisibleRow;\n\n            // With direct rendering we start rendering from 0, no need to adjust anything\n            if (!enableDirectRendering) {\n                initialScroll = firstRow.top;\n            }\n\n            totalRows = me.getVisibleRowsCount(client);\n\n            if (enableDirectRendering) {\n                totalHeight = client.headerHeight + client.footerHeight + lastRow.bottom - firstRow.top;\n                rowsHeight = lastRow.bottom - firstRow.top;\n            }\n            else {\n                rowsHeight = totalHeight = totalHeight - client.scrollable.scrollHeight + lastRow.bottom - firstRow.top;\n            }\n\n            exportMeta.lastRowIndex = firstRow.dataIndex;\n            exportMeta.finishRowIndex = lastRow.dataIndex;\n        }\n        else {\n            exportMeta.finishRowIndex = client.store.count - 1;\n        }\n\n        // alignRows config specifies if rows should be always fully visible. E.g. if row doesn't fit on the page, it goes\n        // to the top of the next page\n        if (alignRows && !repeatHeader && rowsRange !== RowsRange.visible) {\n            // we need to estimate amount of vertical pages for case when we only put row on the page if it fits\n            // first we need to know how much rows would fit one page, keeping in mind first page also contains header\n            // This estimation is loose, because row height might differ much between pages\n            const\n                rowHeight       = client.rowManager.rowOffsetHeight,\n                rowsOnFirstPage = Math.floor((contentHeight - client.headerHeight) / rowHeight),\n                rowsPerPage     = Math.floor(contentHeight / rowHeight),\n                remainingRows   = totalRows - rowsOnFirstPage;\n\n            verticalPages = 1 + Math.ceil(remainingRows / rowsPerPage);\n        }\n        else {\n            verticalPages = Math.ceil(rowsHeight / contentHeight);\n        }\n\n        Object.assign(exportMeta, {\n            scale,\n            contentHeight,\n            totalRows,\n            totalHeight,\n            verticalPages,\n            initialScroll,\n            horizontalPages : 1,\n            totalPages      : verticalPages\n        });\n    }\n\n    async prepareComponent(config) {\n        await super.prepareComponent(config);\n\n        const\n            me              = this,\n            { exportMeta }  = me,\n            { client }      = config,\n            paperFormat     = PaperFormat[config.paperFormat],\n            isPortrait      = config.orientation === Orientation.portrait,\n            paperWidth      = isPortrait ? paperFormat.width : paperFormat.height,\n            paperHeight     = isPortrait ? paperFormat.height : paperFormat.width,\n            pageWidth       = me.inchToPx(paperWidth),\n            pageHeight      = me.inchToPx(paperHeight),\n            horizontalPages = 1;\n\n        Object.assign(exportMeta, {\n            paperWidth,\n            paperHeight,\n            pageWidth,\n            pageHeight,\n            horizontalPages,\n            currentPage          : 0,\n            verticalPosition     : 0,\n            horizontalPosition   : 0,\n            currentPageTopMargin : 0,\n            lastTop              : 0,\n            lastRowIndex         : 0,\n            processedRows        : new Set()\n        });\n\n        me.estimateTotalPages(config);\n\n        if (!config.enableDirectRendering) {\n            me.adjustRowBuffer(client);\n        }\n    }\n\n    async restoreComponent(config) {\n        await super.restoreComponent(config);\n\n        if (!config.enableDirectRendering) {\n            this.restoreRowBuffer(config.client);\n        }\n    }\n\n    async collectRows(config) {\n        const\n            me                 = this,\n            { exportMeta }     = me,\n            {\n                client,\n                alignRows,\n                repeatHeader\n            }                  = config,\n            {\n                subGrids,\n                currentPageTopMargin,\n                verticalPosition,\n                totalRows,\n                contentHeight\n            }                  = exportMeta,\n            // If we are repeating header we've already took header height into account when setting content height\n            clientHeaderHeight = repeatHeader ? 0 : client.headerHeight,\n            { rowManager }     = client,\n            { rows }           = rowManager,\n            onlyVisibleRows    = config.rowsRange === RowsRange.visible,\n            hasMergeCells      = client.hasActiveFeature('mergeCells');\n\n        let index = onlyVisibleRows\n                ? rows.findIndex(r => r.bottom > client.scrollable.y)\n                : rows.findIndex(r => r.bottom + currentPageTopMargin + clientHeaderHeight > 0),\n            remainingHeight;\n\n        const\n            firstRowIndex     = index,\n            // This is a portion of the row which is not visible, which means it shouldn't affect remaining height\n            // Don't calculate for the first page\n            overflowingHeight = verticalPosition === 0 ? 0 : rows[index].top + currentPageTopMargin + clientHeaderHeight;\n\n        // Calculate remaining height to fill with rows\n        // remainingHeight is height of the page content region to fill. When next row is exported, this heights gets\n        // reduced. Since top rows may be partially visible, it would lead to increasing error and eventually to incorrect\n        // exported rows for the page\n        remainingHeight = contentHeight - overflowingHeight;\n\n        // first exported page container header\n        if (verticalPosition === 0) {\n            remainingHeight -= clientHeaderHeight;\n        }\n\n        // data index of the last collected row\n        let lastDataIndex,\n            offset = 0;\n\n        while (remainingHeight > 0) {\n            const row = rows[index];\n\n            if (alignRows && remainingHeight < row.offsetHeight) {\n                offset = -remainingHeight;\n                remainingHeight = 0;\n            }\n            else {\n                me.collectRow(row);\n\n                remainingHeight -= row.offsetHeight;\n\n                // only mark row as processed if it fitted without overflow\n                if (remainingHeight > 0) {\n                    // We cannot use simple counter here because some rows appear on 2 pages. Need to track unique identifier\n                    exportMeta.processedRows.add(row.dataIndex);\n                }\n\n                lastDataIndex = row.dataIndex;\n\n                // Last row is processed, still need to fill the view\n                if (++index === rows.length && remainingHeight > 0) {\n                    remainingHeight = 0;\n                }\n                else if (onlyVisibleRows && (index - firstRowIndex) === totalRows) {\n                    remainingHeight = 0;\n                }\n            }\n        }\n\n        // Collect merged cells per subgrid\n        if (hasMergeCells) {\n            for (const subGridName in subGrids) {\n                const\n                    subGrid     = subGrids[subGridName],\n                    mergedCells = client.subGrids[subGridName].element.querySelectorAll(`.b-grid-merged-cells`);\n\n                subGrid.mergedCellsHtml = [];\n\n                for (const mergedCell of mergedCells) {\n                    subGrid.mergedCellsHtml.push(mergedCell.outerHTML);\n                }\n            }\n        }\n\n        const lastRow = rows[index - 1];\n\n        if (lastRow) {\n            // Calculate exact grid height according to the the last exported row\n            exportMeta.exactGridHeight = lastRow.bottom + client.footerContainer.offsetHeight + client.headerContainer.offsetHeight;\n        }\n\n        await me.onRowsCollected(rows.slice(firstRowIndex, index), config);\n\n        // No scrolling required if we are only exporting currently visible rows\n        if (onlyVisibleRows) {\n            exportMeta.scrollableTopMargin = client.scrollable.y;\n        }\n        else {\n            // With variable row height row manager might relayout rows to fix position, moving them up or down.\n            const detacher = rowManager.ion({ offsetRows : ({ offset : value }) => offset += value });\n\n            await me.scrollRowIntoView(client, lastDataIndex + 1);\n\n            detacher();\n        }\n\n        return offset;\n    }\n\n    async renderRows(config) {\n        const\n            me                    = this,\n            { exportMeta }        = me,\n            {\n                client,\n                alignRows,\n                repeatHeader\n            }                     = config,\n            {\n                currentPageTopMargin,\n                verticalPosition,\n                totalRows,\n                contentHeight,\n                lastRowIndex,\n                finishRowIndex,\n                fakeRow\n            }                     = exportMeta,\n            // If we are repeating header we've already took header height into account when setting content height\n            clientHeaderHeight    = repeatHeader ? 0 : client.headerHeight,\n            { store }             = client,\n            hasMergeCells         = client.hasActiveFeature('mergeCells'),\n            onlyVisibleRows       = config.rowsRange === RowsRange.visible;\n\n        let index       = lastRowIndex,\n            { lastTop } = exportMeta,\n            remainingHeight;\n\n        const\n            firstRowIndex     = index,\n            // This is a portion of the row which is not visible, which means it shouldn't affect remaining height\n            // Don't calculate for the first page\n            overflowingHeight = verticalPosition === 0 ? 0 : lastTop + currentPageTopMargin + clientHeaderHeight,\n            rows              = [];\n\n        // Calculate remaining height to fill with rows\n        // remainingHeight is height of the page content region to fill. When next row is exported, this heights gets\n        // reduced. Since top rows may be partially visible, it would lead to increasing error and eventually to incorrect\n        // exported rows for the page\n        remainingHeight = contentHeight - overflowingHeight;\n\n        // first exported page container header\n        if (verticalPosition === 0) {\n            remainingHeight -= clientHeaderHeight;\n        }\n\n        // data index of the last collected row\n        let lastDataIndex,\n            nextPageTop,\n            offset = 0;\n\n        while (remainingHeight > 0) {\n            fakeRow.render(index, store.getAt(index), true, false, true);\n\n            if (alignRows && remainingHeight < fakeRow.offsetHeight) {\n                offset = -remainingHeight;\n                remainingHeight = 0;\n            }\n            else {\n                nextPageTop = lastTop;\n                lastDataIndex = index;\n\n                lastTop = fakeRow.translate(lastTop);\n                remainingHeight -= fakeRow.offsetHeight;\n\n                me.collectRow(fakeRow);\n\n                // Push an object with data required to build merged cell\n                rows.push({\n                    top          : fakeRow.top,\n                    bottom       : fakeRow.bottom,\n                    offsetHeight : fakeRow.offsetHeight,\n                    dataIndex    : fakeRow.dataIndex\n                });\n\n                // only mark row as processed if it fitted without overflow\n                if (remainingHeight > 0) {\n                    // We cannot use simple counter here because some rows appear on 2 pages. Need to track unique identifier\n                    exportMeta.processedRows.add(index);\n                }\n\n                // Last row is processed, still need to fill the view\n                if (index === finishRowIndex) {\n                    remainingHeight = 0;\n                }\n                else if ((++index - firstRowIndex) === totalRows && onlyVisibleRows) {\n                    remainingHeight = 0;\n                }\n            }\n        }\n\n        if (hasMergeCells) {\n            me.renderMergedCells(config, firstRowIndex, index, rows);\n        }\n\n        // Store next to last row index and top position so we could proceed on the next page.\n        // In fact, when we take full control of row rendering we don't even need to do this. It is only required\n        // to be compatible with current exporters. When we get rid of scrolling, we can just start rendering rows\n        // on each page from 0 (adjusted by overflow of the previous row)\n        exportMeta.lastRowIndex = lastDataIndex;\n        exportMeta.lastTop = nextPageTop;\n\n        if (fakeRow) {\n            // Calculate exact grid height according to the the last exported row to constrain column lines to the last\n            // row\n            exportMeta.exactGridHeight = fakeRow.bottom + client.footerContainer.offsetHeight + client.headerContainer.offsetHeight;\n        }\n\n        await me.onRowsCollected(rows, config);\n\n        return offset;\n    }\n\n    async buildPage(config) {\n        const\n            me             = this,\n            { exportMeta } = me,\n            {\n                client,\n                headerTpl,\n                footerTpl,\n                enableDirectRendering\n            }              = config,\n            {\n                totalWidth,\n                totalPages,\n                currentPage,\n                subGrids\n            }              = exportMeta;\n\n        // Rows are stored in shared state object, need to clean it before exporting next page\n        Object.values(subGrids).forEach(subGrid => subGrid.rows = []);\n\n        // With variable row height total height might change after scroll, update it\n        // to show content completely on the last page\n        if (config.rowsRange === RowsRange.all) {\n            exportMeta.totalHeight = client.headerHeight + client.footerHeight + client.scrollable.scrollHeight;\n\n            if (!enableDirectRendering) {\n                exportMeta.totalHeight -= me.getVirtualScrollerHeight(client);\n            }\n        }\n\n        let header, footer, offset;\n\n        // Measure header and footer height\n        if (headerTpl) {\n            header = me.prepareHTML(headerTpl({\n                totalWidth,\n                totalPages,\n                currentPage\n            }));\n        }\n\n        if (footerTpl) {\n            footer = me.prepareHTML(footerTpl({\n                totalWidth,\n                totalPages,\n                currentPage\n            }));\n        }\n\n        if (enableDirectRendering) {\n            offset = await me.renderRows(config);\n        }\n        else {\n            offset = await me.collectRows(config);\n        }\n\n        const html = me.buildPageHtml(config);\n\n        return { html, header, footer, offset };\n    }\n\n    async onRowsCollected() {}\n\n    buildPageHtml() {\n        const\n            me           = this,\n            { subGrids } = me.exportMeta;\n\n        // Now when rows are collected, we need to add them to exported grid\n        let html = me.prepareExportElement();\n\n        Object.values(subGrids).forEach(({ placeHolder, rows, mergedCellsHtml }) => {\n            const placeHolderText = placeHolder.outerHTML;\n\n            let contentHtml = rows.reduce((result, row) => {\n                result += row[0];\n\n                return result;\n            }, '');\n\n            if (mergedCellsHtml?.length) {\n                contentHtml += `<div class=\"b-grid-merged-cells-container\">${mergedCellsHtml.join('')}</div>`;\n            }\n\n            html = html.replace(placeHolderText, contentHtml);\n        });\n\n        return html;\n    }\n}\n\n// HACK: terser/obfuscator doesn't yet support async generators, when processing code it converts async generator to regular async\n// function.\nMultiPageVerticalExporter.prototype.pagesExtractor = async function * pagesExtractor(config) {\n    const\n        me = this,\n        {\n            exportMeta,\n            stylesheets\n        }  = me,\n        {\n            totalWidth,\n            paperWidth,\n            paperHeight,\n            contentHeight,\n            scale,\n            initialScroll\n        }  = exportMeta;\n\n    let\n        { totalPages } = exportMeta,\n        currentPage;\n\n    while ((currentPage = exportMeta.currentPage) < totalPages) {\n        me.trigger('exportStep', {\n            text     : me.L(MultiPageVerticalExporter.exportingPageText, { currentPage, totalPages }),\n            progress : Math.round(((currentPage + 1) / totalPages) * 90)\n        });\n\n        const { html, header, footer, offset } = await me.buildPage(config);\n\n        // TotalHeight might change in case of variable row heights\n        // Move exported content in the visible frame\n        const styles = [\n            ...stylesheets,\n            `\n                <style>\n                    #${config.client.id} {\n                        width: ${totalWidth}px !important;\n                    }\n                    \n                    .b-export .b-export-content {\n                        transform: scale(${scale});\n                        transform-origin: top left;\n                        height: auto;\n                    }\n                </style>\n            `\n        ];\n\n        if (config.repeatHeader) {\n            const gridHeight = exportMeta.exactGridHeight ? `${exportMeta.exactGridHeight + exportMeta.currentPageTopMargin}px` : '100%';\n\n            styles.push(\n                `\n                <style>\n                    #${config.client.id} {\n                        height: ${gridHeight} !important;\n                    }\n                    \n                    .b-export .b-export-content {\n                        height: ${100 / scale}%;\n                    }\n                    \n                    .b-export-body {\n                        height: 100%;\n                        display: flex;\n                    }\n                \n                    .b-export-viewport {\n                        height: 100%;\n                    }\n                    \n                    .b-grid-vertical-scroller {\n                        margin-top: ${exportMeta.currentPageTopMargin - initialScroll}px;\n                    }\n                </style>\n                `\n            );\n        }\n        else {\n            const gridHeight = exportMeta.exactGridHeight || (contentHeight - exportMeta.currentPageTopMargin);\n\n            styles.push(\n                `\n                <style>\n                    #${config.client.id} {\n                        height: ${gridHeight}px !important;\n                    }\n                    \n                    .b-export-body {\n                        overflow: hidden;\n                    }\n                    \n                    .b-export .b-export-content {\n                        height: ${100 / scale}%;\n                    }\n                    \n                    .b-export-body .b-export-viewport {\n                        margin-top: ${exportMeta.currentPageTopMargin}px;\n                    }\n                    \n                    .b-grid-vertical-scroller {\n                        margin-top: -${initialScroll}px;\n                    }\n                </style>\n                `\n            );\n        }\n\n        // when aligning rows, offset gets accumulated, so we need to take it into account\n        exportMeta.currentPageTopMargin -= contentHeight + offset;\n\n        await me.stateNextPage(config);\n\n        ({ totalPages } = exportMeta);\n\n        yield {\n            html : me.pageTpl({\n                html,\n                header,\n                footer,\n                styles,\n                paperWidth,\n                paperHeight\n            })\n        };\n    }\n};\n","import BrowserHelper from '../../../../Core/helper/BrowserHelper.js';\nimport Exporter from './Exporter.js';\nimport { Orientation, PaperFormat, RowsRange } from '../Utils.js';\n\n/**\n * @module Grid/feature/export/exporter/SinglePageExporter\n */\n\n/**\n * A single page exporter. Used by the {@link Grid.feature.export.PdfExport} feature to export to single page. Content\n * will be scaled in both directions to fit the page.\n *\n * You do not need to use this class directly.\n *\n * ### Extending exporter\n *\n * ```javascript\n * class MySinglePageExporter extends SinglePageExporter {\n *     // type is required for exporter\n *     static get type() {\n *         return 'mysinglepageexporter';\n *     }\n *\n *     get stylesheets() {\n *         const stylesheets = super.stylesheets;\n *\n *         stylesheets.forEach(styleNodeOrLinkTag => doSmth(styleNodeOrLinkTag))\n *\n *         return stylesheets;\n *     }\n * }\n *\n * const grid = new Grid({\n *     features : {\n *         pdfExport : {\n *             // this export feature is configured with only one exporter\n *             exporters : [MySinglePageExporter]\n *         }\n *     }\n * });\n *\n * // run export with the new exporter\n * grid.features.pdfExport.export({ exporter : 'mysinglepageexporter' });\n * ```\n *\n * @classType singlepage\n * @feature\n * @extends Grid/feature/export/exporter/Exporter\n */\nexport default class SinglePageExporter extends Exporter {\n\n    static get $name() {\n        return 'SinglePageExporter';\n    }\n\n    static get type() {\n        return 'singlepage';\n    }\n\n    static get title() {\n        // In case locale is missing exporter is still distinguishable\n        return this.localize('L{singlepage}');\n    }\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Set to true to center content horizontally on the page\n             * @config {Boolean}\n             */\n            centerContentHorizontally : false\n        };\n    }\n\n    async prepareComponent(config) {\n        await super.prepareComponent(config);\n\n        Object.assign(this.exportMeta, {\n            verticalPages      : 1,\n            horizontalPages    : 1,\n            totalPages         : 1,\n            currentPage        : 0,\n            verticalPosition   : 0,\n            horizontalPosition : 0\n        });\n    }\n\n    async onRowsCollected() {}\n\n    positionRows(rows, config) {\n        if (config.enableDirectRendering) {\n            return rows.map(r => r[0]);\n        }\n        else {\n            let currentTop = 0;\n\n            // In case of variable row height row vertical position is not guaranteed to increase\n            // monotonously. Position row manually instead\n            return rows.map(([html, , height]) => {\n                const result = html.replace(/translate\\(\\d+px, \\d+px\\)/, `translate(0px, ${currentTop}px)`);\n\n                currentTop += height;\n\n                return result;\n            });\n        }\n    }\n\n    async collectRows(config) {\n        const\n            me                    = this,\n            { client }            = config,\n            { rowManager, store } = client,\n            hasMergeCells         = client.hasActiveFeature('mergeCells'),\n            { subGrids }          = me.exportMeta,\n            totalRows             = config.rowsRange === RowsRange.visible && store.count\n                // visibleRowCount is a projection of how much rows will fit the view, which should be\n                // maximum amount of exported rows. and there can be less\n                ? me.getVisibleRowsCount(client)\n                : store.count;\n\n        let { totalHeight } = me.exportMeta,\n            processedRows   = 0,\n            lastDataIndex   = -1;\n\n        if (rowManager.rows.length > 0) {\n            if (config.rowsRange === RowsRange.visible) {\n                lastDataIndex = rowManager.firstVisibleRow.dataIndex - 1;\n            }\n\n            if (hasMergeCells) {\n                for (const subGrid of Object.values(subGrids)) {\n                    subGrid.mergedCellsHtml = [];\n                }\n            }\n\n            // Collecting rows\n            while (processedRows < totalRows) {\n                const\n                    rows    = rowManager.rows,\n                    lastRow = rows[rows.length - 1],\n                    lastProcessedRowIndex = processedRows;\n\n                rows.forEach(row => {\n                    // When we are scrolling rows will be duplicated even with disabled buffers (e.g. when we are trying to\n                    // scroll last record into view). So we store last processed row dataIndex (which is always growing\n                    // sequence) and filter all rows with lower/same dataIndex\n                    if (row.dataIndex > lastDataIndex && processedRows < totalRows) {\n                        ++processedRows;\n                        totalHeight += row.offsetHeight;\n                        me.collectRow(row);\n                    }\n                });\n\n                // Collect merged cells per subgrid\n                if (hasMergeCells) {\n                    for (const subGridName in subGrids) {\n                        const\n                            subGrid     = subGrids[subGridName],\n                            mergedCells = client.subGrids[subGridName].element.querySelectorAll(`.b-grid-merged-cells`);\n\n                        for (const mergedCell of mergedCells) {\n                            subGrid.mergedCellsHtml.push(mergedCell.outerHTML);\n                        }\n                    }\n                }\n\n                // Calculate new rows processed in this iteration e.g. to collect events\n                const\n                    firstNewRowIndex = rows.findIndex(r => r.dataIndex === lastDataIndex + 1),\n                    lastNewRowIndex  = firstNewRowIndex + (processedRows - lastProcessedRowIndex);\n\n                await me.onRowsCollected(rows.slice(firstNewRowIndex, lastNewRowIndex), config);\n\n                if (processedRows < totalRows) {\n                    lastDataIndex = lastRow.dataIndex;\n                    await me.scrollRowIntoView(client, lastDataIndex + 1);\n                }\n            }\n        }\n\n        return totalHeight;\n    }\n\n    async renderRows(config) {\n        const\n            me                    = this,\n            { client, rowsRange } = config,\n            { rowManager, store } = client,\n            hasMergeCells         = client.hasActiveFeature('mergeCells'),\n            onlyVisibleRows       = rowsRange === RowsRange.visible;\n\n        let { totalHeight } = me.exportMeta;\n\n        if (store.count) {\n            const\n                { fakeRow }         = me.exportMeta,\n                { firstVisibleRow } = rowManager,\n                fromIndex           = onlyVisibleRows ? firstVisibleRow.dataIndex : 0,\n                toIndex             = onlyVisibleRows ? rowManager.lastVisibleRow.dataIndex : store.count - 1,\n                rows                = [];\n\n            let top = 0;\n\n            // Fake row might not have cells if there are no columns\n            if (fakeRow.cells.length) {\n                for (let i = fromIndex; i <= toIndex; i++) {\n                    fakeRow.render(i, store.getAt(i), true, false, true);\n\n                    top = fakeRow.translate(top);\n\n                    me.collectRow(fakeRow);\n\n                    // Push an object with data required to build merged cell\n                    rows.push({\n                        top          : fakeRow.top,\n                        bottom       : fakeRow.bottom,\n                        offsetHeight : fakeRow.offsetHeight,\n                        dataIndex    : fakeRow.dataIndex\n                    });\n                }\n\n                await me.onRowsCollected(rows, config);\n            }\n\n            totalHeight += top;\n\n            if (hasMergeCells) {\n                me.renderMergedCells(config, fromIndex, toIndex, rows);\n            }\n        }\n\n        return totalHeight;\n    }\n\n    buildPageHtml(config) {\n        const\n            me           = this,\n            { subGrids } = me.exportMeta;\n\n        // Now when rows are collected, we need to add them to exported grid\n        let html = me.prepareExportElement();\n\n        Object.values(subGrids).forEach(({ placeHolder, rows, mergedCellsHtml }) => {\n            const placeHolderText = placeHolder.outerHTML;\n            let contentHtml =  me.positionRows(rows, config).join('');\n\n            if (mergedCellsHtml?.length) {\n                contentHtml += `<div class=\"b-grid-merged-cells-container\">${mergedCellsHtml.join('')}</div>`;\n            }\n\n            html = html.replace(placeHolderText, contentHtml);\n        });\n\n        return html;\n    }\n}\n\n// HACK: terser/obfuscator doesn't yet support async generators, when processing code it converts async generator to regular async\n// function.\nSinglePageExporter.prototype.pagesExtractor = async function * pagesExtractor(config) {\n    // When we prepared grid we stretched it horizontally, now we need to gather all rows\n    // There are two ways:\n    // 1. set component height to scrollable.scrollHeight value to render all rows at once (maybe a bit more complex\n    // if rows have variable height)\n    // 2. iterate over rows, scrolling new portion into view once in a while\n    // #1 sounds simpler, but that might require too much rendering, let's scroll rows instead\n\n    const\n        me             = this,\n        { client }     = config,\n        { totalWidth } = me.exportMeta,\n        styles         = me.stylesheets,\n        portrait       = config.orientation === Orientation.portrait,\n        paperFormat    = PaperFormat[config.paperFormat],\n        paperWidth     = portrait ? paperFormat.width : paperFormat.height,\n        paperHeight    = portrait ? paperFormat.height : paperFormat.width;\n\n    let totalHeight, header, footer;\n\n    if (config.enableDirectRendering) {\n        totalHeight = await me.renderRows(config);\n\n        totalHeight += client.headerHeight + client.footerHeight;\n    }\n    else {\n        totalHeight = await me.collectRows(config);\n\n        totalHeight += client.height - client.bodyHeight;\n    }\n\n    const html = me.buildPageHtml(config);\n\n    const totalClientHeight = totalHeight;\n\n    // Measure header and footer height\n    if (config.headerTpl) {\n        header = me.prepareHTML(config.headerTpl({ totalWidth }));\n        const height = me.measureElement(header);\n        totalHeight += height;\n    }\n\n    if (config.footerTpl) {\n        footer = me.prepareHTML(config.footerTpl({ totalWidth }));\n        const height = me.measureElement(footer);\n        totalHeight += height;\n    }\n\n    const\n        widthScale  = Math.min(1, me.getScaleValue(me.inchToPx(paperWidth), totalWidth)),\n        heightScale = Math.min(1, me.getScaleValue(me.inchToPx(paperHeight), totalHeight)),\n        scale       = Math.min(widthScale, heightScale);\n\n    // Now add style to stretch grid vertically\n    styles.push(\n        `<style>\n                #${client.id} {\n                    height: ${totalClientHeight}px !important;\n                    width: ${totalWidth}px !important;\n                }\n                \n                .b-export-content {\n                    ${me.centerContentHorizontally ? 'left: 50%;' : ''}\n                    transform: scale(${scale}) ${me.centerContentHorizontally ? 'translateX(-50%)' : ''};\n                    transform-origin: top left;\n                    height: ${scale === 1 ? 'inherit' : 'auto !important'};\n                }\n            </style>`\n    );\n\n    if (BrowserHelper.isIE11) {\n        styles.push(\n        `<style>\n                .b-export-body {\n                   min-height: ${totalClientHeight}px !important;\n                }\n         </style>`\n        );\n    }\n\n    // This is a single page exporter so we only yield one page\n    yield {\n        html : me.pageTpl({\n            html,\n            header,\n            footer,\n            styles,\n            paperWidth,\n            paperHeight\n        })\n    };\n};\n","import AjaxHelper from '../../../Core/helper/AjaxHelper.js';\nimport EventHelper from '../../../Core/helper/EventHelper.js';\nimport VersionHelper from '../../../Core/helper/VersionHelper.js';\nimport InstancePlugin from '../../../Core/mixin/InstancePlugin.js';\nimport MultiPageExporter from './exporter/MultiPageExporter.js';\nimport MultiPageVerticalExporter from './exporter/MultiPageVerticalExporter.js';\nimport SinglePageExporter from './exporter/SinglePageExporter.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\nimport ExportDialog from '../../view/export/ExportDialog.js';\nimport GridFeatureManager from '../GridFeatureManager.js';\nimport Toast from '../../../Core/widget/Toast.js';\nimport { FileMIMEType } from './Utils.js';\n\n/**\n * @module Grid/feature/export/PdfExport\n */\n\n/**\n * Generates PDF/PNG files from the Grid component.\n *\n * **NOTE:** Server side is required to make export work!\n *\n * The export server is written in nodejs and it is shipped with our examples. You can find setup instructions in\n * `examples/_shared/server/README.md` and `examples/export/README.md` files.\n *\n * When your server is up and running, it listens to requests. The Export feature sends a request to the specified URL\n * with the HTML fragments. The server generates a PDF (or PNG) file and returns a download link (or binary, depending\n * on {@link #config-sendAsBinary} config). Then the Export feature opens the link in a new tab and the file is\n * automatically downloaded by your browser. This is configurable, see {@link #config-openAfterExport} config.\n *\n * The {@link #config-exportServer} URL must be configured. The URL can be localhost if you start the server locally,\n * or your remote server address.\n *\n * ## Usage\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         pdfExport : {\n *             exportServer : 'http://localhost:8080' // Required\n *         }\n *     }\n * })\n *\n * // Opens popup allowing to customize export settings\n * grid.features.pdfExport.showExportDialog();\n *\n * // Simple export\n * grid.features.pdfExport.export({\n *     // Required, set list of column ids to export\n *     columns : grid.columns.map(c => c.id)\n * }).then(result => {\n *     // Response instance and response content in JSON\n *     let { response } = result;\n * });\n * ```\n *\n * ## Exporters\n *\n * There are three exporters available by default: `singlepage`, `multipage` and `multipagevertical`:\n *  * `singlepage` -  generates single page with content scaled to fit the provided {@link #config-paperFormat}\n *  * `multipage` - generates as many pages as required to fit all requested content, unscaled\n *  * `multipagevertical` - a combination of two above: it scales content horizontally to fit into page width and then\n *  puts overflowing content on vertical pages. Like a scroll.\n *\n * ## Loading resources\n *\n * If you face a problem with loading resources when exporting, the cause might be that the application and the export server are hosted on different servers.\n * This is due to [Cross-Origin Resource Sharing](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) (CORS). There are 2 options how to handle this:\n * - Allow cross origin requests from the server where your export is hosted to the server where your application is hosted;\n * - Copy all resources keeping the folder hierarchy from the server where your application is hosted to the server where your export is hosted\n * and setup paths using {@link #config-translateURLsToAbsolute} config and configure the export server to give access to the path:\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         pdfExport : {\n *             exportServer : 'http://localhost:8080',\n *             // '/resources' is hardcoded in WebServer implementation\n *             translateURLsToAbsolute : 'http://localhost:8080/resources'\n *         }\n *     }\n * })\n * ```\n *\n * ```javascript\n * // Following path would be served by this address: http://localhost:8080/resources/\n * node ./src/server.js -h 8080 -r web/application/styles\n * ```\n *\n * where `web/application/styles` is a physical root location of the copied resources, for example:\n *\n * <img src=\"Grid/export-server-resources.png\" style=\"max-width : 500px\" alt=\"Export server structure with copied resources\" />\n *\n * @extends Core/mixin/InstancePlugin\n *\n * @demo Grid/export\n * @classtype pdfExport\n * @feature\n */\nexport default class PdfExport extends InstancePlugin {\n    static get $name() {\n        return 'PdfExport';\n    }\n\n    static get configurable() {\n        return {\n            dialogClass  : ExportDialog,\n            /**\n             * URL of the print server.\n             * @config {String}\n             */\n            exportServer : undefined,\n\n            /**\n             * Returns the instantiated export dialog widget as configured by {@link #config-exportDialog}\n             * @member {Grid.view.export.ExportDialog} exportDialog\n             */\n            /**\n             * A config object to apply to the {@link Grid.view.export.ExportDialog} widget.\n             * @config {ExportDialogConfig}\n             */\n            exportDialog : {\n                value : true,\n\n                $config : ['lazy']\n            },\n\n            /**\n             * Name of the exported file.\n             * @config {String}\n             */\n            fileName : null,\n\n            /**\n             * Format of the exported file, either `pdf` or `png`.\n             * @config {'pdf'|'png'}\n             * @default\n             * @category Export file config\n             */\n            fileFormat : 'pdf',\n\n            /**\n             * Export server will navigate to this url first and then will change page content to whatever client sent.\n             * This option is useful with react dev server, which uses a strict CORS policy.\n             * @config {String}\n             */\n            clientURL : null,\n\n            /**\n             * Export paper format. Available options are A1...A5, Legal, Letter.\n             * @config {'A1'|'A2'|'A3'|'A4'|'A5'|'Legal'|'Letter'}\n             * @default\n             * @category Export file config\n             */\n            paperFormat : 'A4',\n\n            /**\n             * Orientation. Options are `portrait` and `landscape`.\n             * @config {'portrait'|'landscape'}\n             * @default\n             * @category Export file config\n             */\n            orientation : 'portrait',\n\n            /**\n             * Specifies which rows to export. `all` for complete set of rows, `visible` for only rows currently visible.\n             * @config {'all'|'visible'}\n             * @category Export file config\n             */\n            rowsRange : 'all',\n\n            /**\n             * Set to true to align row top to the page top on every exported page. Only applied to multipage export.\n             * @config {Boolean}\n             * @default\n             */\n            alignRows : false,\n\n            /**\n             * Set to true to show column headers on every page. This will also set {@link #config-alignRows} to true.\n             * Only applies to MultiPageVertical exporter.\n             * @config {Boolean}\n             * @default\n             */\n            repeatHeader : false,\n\n            /**\n             * By default, subGrid width is changed to fit all exported columns. To keep certain subGrid size specify it\n             * in the following form:\n             * ```javascript\n             * keepRegionSizes : {\n             *     locked : true\n             * }\n             * ```\n             * @config {Object<String,Boolean>}\n             * @default\n             */\n            keepRegionSizes : null,\n\n            /**\n             * When exporting large views (hundreds of pages) stringified HTML may exceed browser or server request\n             * length limit. This config allows to specify how many pages to send to server in one request.\n             * @config {Number}\n             * @default\n             * @private\n             */\n            pagesPerRequest : 0,\n\n            /**\n             * Config for exporter.\n             * @config {Object}\n             * @private\n             */\n            exporterConfig : null,\n\n            /**\n             * Type of the exporter to use. Should be one of the configured {@link #config-exporters}\n             * @config {String}\n             * @default\n             */\n            exporterType : 'singlepage',\n\n            /**\n             * List of exporter classes to use in export feature\n             * @config {Grid.feature.export.exporter.Exporter[]}\n             * @default\n             */\n            exporters : [SinglePageExporter, MultiPageExporter, MultiPageVerticalExporter],\n\n            /**\n             * `True` to replace all linked CSS files URLs to absolute before passing HTML to the server.\n             * When passing a string the current origin of the CSS files URLS will be replaced by the passed origin.\n             *\n             * For example: css files pointing to /app.css will be translated from current origin to {translateURLsToAbsolute}/app.css\n             * @config {Boolean|String}\n             * @default\n             */\n            translateURLsToAbsolute : true,\n\n            /**\n             * When true links are converted to absolute by combining current window location (with replaced origin) with\n             * resource link.\n             * When false links are converted by combining new origin with resource link (for angular)\n             * @config {Boolean}\n             * @default\n             */\n            keepPathName : true,\n\n            /**\n             * When true, page will attempt to download generated file.\n             * @config {Boolean}\n             * @default\n             */\n            openAfterExport : true,\n\n            /**\n             * Set to true to receive binary file from the server instead of download link.\n             * @config {Boolean}\n             * @default\n             */\n            sendAsBinary : false,\n\n            /**\n             * False to open in the current tab, true - in a new tab\n             * @config {Boolean}\n             * @default\n             */\n            openInNewTab : false,\n\n            /**\n             * A template function used to generate a page header. It is passed an object with ´currentPage´ and `totalPages´ properties.\n             *\n             * ```javascript\n             * let grid = new Grid({\n             *     appendTo   : 'container',\n             *     features : {\n             *         pdfExport : {\n             *             exportServer : 'http://localhost:8080/',\n             *             headerTpl : ({ currentPage, totalPages }) => `\n             *                 <div class=\"demo-export-header\">\n             *                     <img src=\"coolcorp-logo.png\"/>\n             *                     <dl>\n             *                         <dt>Date: ${DateHelper.format(new Date(), 'll LT')}</dt>\n             *                         <dd>${totalPages ? `Page: ${currentPage + 1}/${totalPages}` : ''}</dd>\n             *                     </dl>\n             *                 </div>`\n             *          }\n             *     }\n             * });\n             * ```\n             * @config {Function}\n             */\n            headerTpl : null,\n\n            /**\n             * A template function used to generate a page footer. It is passed an object with ´currentPage´ and `totalPages´ properties.\n             *\n             * ```javascript\n             * let grid = new Grid({\n             *      appendTo   : 'container',\n             *      features : {\n             *          pdfExport : {\n             *              exportServer : 'http://localhost:8080/',\n             *              footerTpl    : () => '<div class=\"demo-export-footer\"><h3>© 2020 CoolCorp Inc</h3></div>'\n             *          }\n             *      }\n             * });\n             * ```\n             * @config {Function}\n             */\n            footerTpl : null,\n\n            /**\n             * An object containing the Fetch options to pass to the export server request. Use this to control if\n             * credentials are sent and other options, read more at\n             * [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch).\n             * @config {FetchOptions}\n             */\n            fetchOptions : null,\n\n            /**\n             * A message to be shown when Export feature is performing export.\n             * @config {String}\n             * @default \"Generating pages...\"\n             */\n            exportMask : 'L{Generating pages}',\n\n            /**\n             * A message to be shown when export is almost done.\n             * @config {String}\n             * @default \"Waiting for response from server...\"\n             */\n            exportProgressMask : 'L{Waiting for response from server}',\n\n            /**\n             * Set to false to not show Toast message on export error.\n             * @config {Boolean}\n             * @default\n             */\n            showErrorToast : true,\n\n            localizableProperties : ['exportMask', 'exportProgressMask'],\n\n            /**\n             * This method accepts all stylesheets (link and style tags) which are supposed to be put on the page. Use\n             * this hook method to filter or modify them.\n             *\n             * ```javascript\n             * new Grid({\n             *     features: {\n             *         pdfExport: {\n             *             // filter out inline styles and bootstrap.css\n             *             filterStyles: styles => styles.filter(item => !/(link|bootstrap.css)/.test(item))\n             *         }\n             *     }\n             * });\n             * ```\n             * @param {String[]} styles\n             * @returns {String[]} List of stylesheets to put on the exported page\n             */\n            filterStyles : styles => styles,\n\n            /**\n             * Enables direct rendering of the component content which significantly improves performance. To enable\n             * old export mode set this flag to false.\n             * @config {Boolean}\n             * @default\n             */\n            enableDirectRendering : true\n        };\n    }\n\n    updateEnableDirectRendering(value) {\n        if (!value) {\n            VersionHelper.deprecate('Grid', '6.0.0', 'Indirect rendering is deprecated');\n        }\n    }\n\n    doDestroy() {\n        this.exportDialog?.destroy();\n\n        this.exportersMap.forEach(exporter => exporter.destroy());\n\n        super.doDestroy();\n    }\n\n    /**\n     * When export is started from GUI ({@link Grid.view.export.ExportDialog}), export promise can be accessed via\n     * this property.\n     * @property {Promise|null}\n     */\n    get currentExportPromise() {\n        return this._currentExportPromise;\n    }\n\n    set currentExportPromise(value) {\n        this._currentExportPromise = value;\n    }\n\n    get exportersMap() {\n        return this._exportersMap || (this._exportersMap = new Map());\n    }\n\n    getExporter(config = {}) {\n        const\n            me               = this,\n            { exportersMap } = me,\n            { type }         = config;\n\n        let exporter;\n\n        if (exportersMap.has(type)) {\n            exporter = exportersMap.get(type);\n\n            Object.assign(exporter, config);\n        }\n        else {\n            const exporterClass = this.exporters.find(cls => cls.type === type);\n\n            if (!exporterClass) {\n                throw new Error(`Exporter type ${type} is not found. Make sure you've configured it`);\n            }\n\n            config = ObjectHelper.clone(config);\n            delete config.type;\n\n            exporter = new exporterClass(config);\n\n            exporter.relayAll(me);\n\n            exportersMap.set(type, exporter);\n        }\n\n        return exporter;\n    }\n\n    buildRequest(pages, config) {\n        return {\n            html        : JSON.stringify(pages),\n            fileFormat  : config.fileFormat,\n            format      : config.paperFormat,\n            orientation : config.orientation\n        };\n    }\n\n    buildExportConfig(config = {}) {\n        const\n            me = this,\n            {\n                client,\n                exportServer,\n                clientURL,\n                fileFormat,\n                fileName,\n                paperFormat,\n                rowsRange,\n                alignRows,\n                repeatHeader,\n                keepRegionSizes,\n                orientation,\n                translateURLsToAbsolute,\n                keepPathName,\n                sendAsBinary,\n                headerTpl,\n                footerTpl,\n                filterStyles,\n                enableDirectRendering\n            }  = me;\n\n        if (!config.columns) {\n            config.columns = client.columns.visibleColumns.filter(column => column.exportable).map(column => column.id);\n        }\n\n        const result = ObjectHelper.assign({\n            client,\n            exportServer,\n            clientURL,\n            fileFormat,\n            paperFormat,\n            rowsRange,\n            alignRows,\n            repeatHeader,\n            keepRegionSizes,\n            orientation,\n            translateURLsToAbsolute,\n            keepPathName,\n            sendAsBinary,\n            headerTpl,\n            footerTpl,\n            enableDirectRendering,\n            exporterType : me.exporterType,\n            fileName     : fileName || client.$$name\n        }, config);\n\n        // slice columns array to not modify it during export\n        result.columns = config.columns.slice();\n\n        // Only vertical exporter is supported\n        if (result.exporterType !== 'multipagevertical') {\n            result.repeatHeader = false;\n        }\n\n        // Align rows by default\n        if (!('alignRows' in config) && config.repeatHeader) {\n            result.alignRows = true;\n        }\n\n        // Only change this setting if it is default (false) and not provided directly in config\n        if (!('keepRegionSizes' in config) && !result.keepRegionSizes) {\n            const\n                collapsed       = [],\n                keepRegionSizes = {};\n\n            // If there's at least one collapsed region - lock other region sizes\n            client.eachSubGrid(s => s.collapsed && collapsed.push(s.region));\n\n            if (collapsed.length) {\n                client.eachSubGrid(s => {\n                    if (!collapsed.includes(s.region)) {\n                        keepRegionSizes[s.region] = true;\n                    }\n                });\n\n                result.keepRegionSizes = keepRegionSizes;\n            }\n        }\n\n        result.exporterConfig = ObjectHelper.assign({\n            type                    : result.exporterType,\n            translateURLsToAbsolute : result.translateURLsToAbsolute,\n            keepPathName            : result.keepPathName,\n            filterStyles\n        }, result.exporterConfig || {});\n\n        delete result.exporterType;\n        delete result.translateURLsToAbsolute;\n        delete result.keepPathName;\n\n        return result;\n    }\n\n    /**\n     * Starts the export process. Accepts a config object which overrides any default configs.\n     * **NOTE**. Component should not be interacted with when export is in progress\n     *\n     * @param {Object} config\n     * @param {String[]} config.columns (required) List of column ids to export. E.g.\n     *\n     * ```javascript\n     * grid.features.pdfExport.export({ columns : grid.columns.map(c => c.id) })\n     * ```\n     * @returns {Promise} Object of the following structure\n     * ```\n     * {\n     *     response // Response instance\n     * }\n     * ```\n     */\n    async export(config = {}) {\n        const\n            me = this,\n            {\n                client,\n                pagesPerRequest\n            }  = me;\n\n        config = me.buildExportConfig(config);\n\n        let result;\n\n        /**\n         * Fires on the owning Grid before export started. Return `false` to cancel the export.\n         * @event beforePdfExport\n         * @preventable\n         * @on-owner\n         * @param {Object} config Export config\n         */\n        if (client.trigger('beforePdfExport', { config }) !== false) {\n            client.isExporting = true;\n\n            // This mask should be always visible to protect grid from changes even if the mask message is not visible\n            // due to the export dialog which is rendered above the grid's mask. The dialog has its own mask which shares the export message.\n            client.mask(me.exportMask);\n\n            try {\n                const exporter = me.getExporter(config.exporterConfig);\n\n                if (pagesPerRequest === 0) {\n                    const pages = await exporter.export(config);\n\n                    if (me.isDestroying) {\n                        return;\n                    }\n\n                    // Hide dialog\n                    me.exportDialog?.close();\n\n                    // We can unmask early\n                    client.unmask();\n\n                    /**\n                     * Fires when export progress changes\n                     * @event exportStep\n                     * @param {Number} progress Current progress, 0-100\n                     * @param {String} text Optional text to show\n                     */\n                    me.trigger('exportStep', { progress : 90, text : me.exportProgressMask, contentGenerated : true });\n\n                    const responsePromise = me.receiveExportContent(pages, config);\n\n                    // Show toast message indicating we're waiting for the server response\n                    me.toast = me.showLoadingToast(responsePromise);\n\n                    const response = await responsePromise;\n\n                    result = { response };\n\n                    await me.processExportContent(response, config);\n                }\n            }\n            catch (error) {\n                if (error instanceof Response) {\n                    result = { response : error };\n                }\n                else {\n                    result = { error };\n                }\n\n                throw error;\n            }\n            finally {\n                if (me.toast && !me.toast.isDestroying) {\n                    // Hide would also destroy the toast\n                    me.toast.hide();\n                }\n\n                if (!me.isDestroying) {\n                    // Close dialog on exception\n                    me.exportDialog?.close();\n                    client.unmask();\n\n                    if (me.showErrorToast) {\n                        // Do not show warning if user has cancelled request\n                        if (result.error) {\n                            if (result.error.name !== 'AbortError') {\n                                Toast.show({\n                                    html        : me.L('L{Export failed}'),\n                                    rootElement : me.rootElement\n                                });\n                            }\n                        }\n                        else if (!result.response.ok) {\n                            Toast.show({\n                                html        : me.L('L{Server error}'),\n                                rootElement : me.rootElement\n                            });\n                        }\n                    }\n\n                    /**\n                     * Fires on the owning Grid when export has finished\n                     * @event pdfExport\n                     * @on-owner\n                     * @param {Response} [response] Optional response, if received\n                     * @param {Error} [error] Optional error, if exception occurred\n                     */\n                    client.trigger('pdfExport', result);\n\n                    client.isExporting = false;\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Sends request to the export server and returns Response instance. This promise can be cancelled by the user\n     * by clicking on the toast message. When the user clicks on the toast, `abort` method is called on the promise\n     * returned by this method. If you override this method you can implement `abort` method like in the snippet\n     * below to cancel the request.\n     *\n     * ```javascript\n     * class MyPdfExport extends PdfExport {\n     *     receiveExportContent(pages, config) {\n     *         let controller;\n     *\n     *         const promise = new Promise(resolve => {\n     *             controller = new AbortController();\n     *             const signal = controller.signal;\n     *\n     *             fetch(url, { signal })\n     *                 .then(response => resolve(response));\n     *         });\n     *\n     *         // This method will be called when user clicks on the toast message to cancel the request\n     *         promise.abort = () => controller.abort();\n     *\n     *         return promise;\n     *     }\n     * }\n     *\n     * const grid = new Grid({ features: { myPdfExport : {...} } });\n     *\n     * grid.features.myPdfExport.export().catch(e => {\n     *     // In case of aborted request do nothing\n     *     if (e.name !== 'AbortError') {\n     *         // handle other exceptions\n     *     }\n     * });\n     * ```\n     * @param {Object[]} pages Array of exported pages.\n     * @param {String} pages[].html pages HTML of the exported page.\n     * @param {Object} config Export config\n     * @param {String} config.exportServer URL of the export server.\n     * @param {String} config.orientation Page orientation. portrait/landscape.\n     * @param {String} config.paperFormat Paper format as supported by puppeteer. A4/A3/...\n     * @param {String} config.fileFormat File format. PDF/PNG.\n     * @param {String} config.fileName Name to use for the saved file.\n     * @param {String} config.clientURL URL to navigate before export. See {@link #config-clientURL}.\n     * @param {String} config.sendAsBinary Tells server whether to return binary file instead of download link.\n     * @returns {Promise} Returns Response instance\n     */\n    receiveExportContent(pages, config) {\n        return AjaxHelper.fetch(\n            config.exportServer,\n            Object.assign({\n                method      : 'POST',\n                credentials : 'omit',\n                headers     : { 'Content-Type' : 'application/json' },\n                body        : JSON.stringify({\n                    html         : pages,\n                    orientation  : config.orientation,\n                    format       : config.paperFormat,\n                    fileFormat   : config.fileFormat,\n                    fileName     : config.fileName,\n                    clientURL    : config.clientURL,\n                    sendAsBinary : config.sendAsBinary\n                })\n            }, this.fetchOptions)\n        );\n    }\n\n    /**\n     * Handles output of the {@link #function-receiveExportContent}. Server response can be of two different types depending\n     * on {@link #config-sendAsBinary} config:\n     * - `application/json` In this case JSON response contains url of the file to download\n     * - `application/octet-stream` In this case response contains stream of file binary data\n     *\n     * If {@link #config-openAfterExport} is true, this method will try to download content.\n     * @param {Response} response\n     * @param {Object} config Export config\n     * @param {String} config.exportServer URL of the export server.\n     * @param {String} config.orientation Page orientation. portrait/landscape.\n     * @param {String} config.paperFormat Paper format as supported by puppeteer. A4/A3/...\n     * @param {String} config.fileFormat File format. PDF/PNG.\n     * @param {String} config.fileName Name to use for the saved file.\n     * @param {String} config.clientURL URL to navigate before export. See {@link #config-clientURL}.\n     * @param {String} config.sendAsBinary Tells server whether to return binary file instead of download link. See {@link #config-sendAsBinary}\n     */\n    async processExportContent(response, config) {\n        const me = this;\n\n        if (response.ok && me.openAfterExport) {\n            // Clone Response to not block response stream\n            response = response.clone();\n\n            const contentType = response.headers.get('content-type');\n\n            if (contentType.match(/application\\/octet-stream/)) {\n                const\n                    MIMEType  = FileMIMEType[config.fileFormat],\n                    objectURL = await me.responseBlobToObjectURL(response, MIMEType),\n                    link      = me.getDownloadLink(config.fileName, objectURL);\n\n                link.click();\n            }\n            else if (contentType.match(/application\\/json/)) {\n                const responseJSON = await response.json();\n\n                if (responseJSON.success) {\n                    const link = me.getDownloadLink(config.fileName, responseJSON.url);\n\n                    link.click();\n                }\n                else {\n                    Toast.show({\n                        html        : responseJSON.msg,\n                        rootElement : this.rootElement\n                    });\n                }\n            }\n        }\n    }\n\n    /**\n     * Creates object URL from response content with given mimeType\n     * @param {Response} response Response instance\n     * @param {String} mimeType\n     * @returns {Promise} Returns string object URL\n     * @private\n     */\n    async responseBlobToObjectURL(response, mimeType) {\n        const blob = await response.blob();\n\n        return URL.createObjectURL(blob.slice(0, blob.size, mimeType));\n    }\n\n    /**\n     * Creates link to download the file.\n     * @param {String} name File name\n     * @param {String} href URL of the resource\n     * @returns {HTMLElement} HTMLAnchorElement\n     * @private\n     */\n    getDownloadLink(name, href) {\n        const link = document.createElement('a');\n\n        link.download = name;\n        link.href = href;\n\n        if (this.openInNewTab) {\n            link.target = '_blank';\n        }\n\n        return link;\n    }\n\n    get defaultExportDialogConfig() {\n        return ObjectHelper.copyProperties({}, this, [\n            'client',\n            'exporters',\n            'exporterType',\n            'orientation',\n            'fileFormat',\n            'paperFormat',\n            'alignRows',\n            'rowsRange',\n            'repeatHeader'\n        ]);\n    }\n\n    changeExportDialog(exportDialog, oldExportDialog) {\n        const me = this;\n\n        oldExportDialog?.destroy();\n\n        if (exportDialog) {\n            const config = me.dialogClass.mergeConfigs({\n                rootElement : me.rootElement,\n                client      : me.client,\n                items       : {\n                    rowsRangeField : {\n                        value : me.rowsRange\n                    },\n\n                    exporterTypeField : {\n                        value : me.exporterType\n                    },\n\n                    orientationField : {\n                        value : me.orientation\n                    },\n\n                    paperFormatField : {\n                        value : me.paperFormat\n                    },\n\n                    repeatHeaderField : {\n                        value : me.repeatHeader\n                    },\n\n                    fileFormatField : {\n                        value : me.fileFormat\n                    },\n\n                    alignRowsField : {\n                        checked : me.alignRows\n                    }\n                }\n            }, me.defaultExportDialogConfig, exportDialog);\n\n            exportDialog = me.dialogClass.new(config);\n\n            exportDialog.ion({\n                export  : me.onExportButtonClick,\n                thisObj : me\n            });\n        }\n\n        return exportDialog;\n    }\n\n    /**\n     * Shows {@link Grid.view.export.ExportDialog export dialog}\n     */\n    async showExportDialog() {\n        return this.exportDialog.show();\n    }\n\n    onExportButtonClick({ values }) {\n        const\n            me         = this,\n            dialogMask = me.exportDialog.mask({\n                progress    : 0,\n                maxProgress : 100,\n                text        : me.exportMask\n            });\n\n        const detacher = me.ion({\n            exportstep({ progress, text, contentGenerated }) {\n                if (contentGenerated) {\n                    me.exportDialog.unmask();\n                    detacher();\n                }\n                else {\n                    dialogMask.progress = progress;\n\n                    if (text != null) {\n                        dialogMask.text = text;\n                    }\n                }\n            }\n        });\n\n        me.currentExportPromise = me.export(values);\n\n        // Clear current export promise\n        me.currentExportPromise.catch(() => {}).finally(() => {\n            detacher();\n            me.exportDialog?.unmask();\n            me.currentExportPromise = null;\n        });\n    }\n\n    showLoadingToast(exportPromise) {\n        const toast = Toast.show({\n            timeout      : 0,\n            showProgress : false,\n            rootElement  : this.rootElement,\n            html         : `\n    <span class=\"b-mask-icon b-icon b-icon-spinner\"></span>\n    <span>${this.L('L{Waiting for response from server}')}</span>\n    <button class=\"b-button\">${this.L('L{Click to abort}')}</button>`\n        });\n\n        EventHelper.on({\n            element : toast.element,\n            click() {\n                exportPromise.abort?.();\n            }\n        });\n\n        return toast;\n    }\n}\n\nGridFeatureManager.registerFeature(PdfExport, false, 'Grid');\n\n// Format expected by export server\n// const pageFormat = {\n//     html       : '',\n//     column     : 1,\n//     number     : 1,\n//     row        : 1,\n//     rowsHeight : 1\n// };\n//\n// const format = {\n//     fileFormat  : 'pdf',\n//     format      : 'A4',\n//     orientation : 'portrait',\n//     range       : 'complete',\n//     html        : { array : JSON.stringify(pageFormat) }\n// };\n"],"names":["Target","SummaryFormatter","Base","$name","generateHtml","column","records","cls","groupRecord","groupField","groupValue","store","summaries","sum","renderer","summaryRenderer","html","forEach","config","type","field","max","min","average","length","reduce","record","value","seed","valueCls","labelHtml","label","valueHtml","summaryHtml","String","includes","Summary","InstancePlugin","configurable","selectedOnly","hideFooters","pluginConfig","chain","construct","grid","bindStore","detachListeners","ion","name","change","thisObj","doDestroy","doDisable","disable","client","element","classList","add","updateSummaries","remove","eachSubGrid","subGrid","scrollable","syncPartners","renderRows","me","cells","DomHelper","children","selectedRecords","isFiltered","storage","values","allRecords","filter","r","isSpecialRow","isSelected","columns","_column$summaries","initialSeed","Object","assign","cellElement","dataset","get","innerHTML","sync","firstElementChild","onStoreChange","action","changes","shouldUpdate","disabled","keys","some","colField","Boolean","updateSelectedOnly","selectionChange","refresh","featureClass","_$name","GridFeatureManager","registerFeature","ExportRowsCombo","Combo","defaultConfig","editable","buildItems","id","RowsRange","all","text","L","visible","initClass","ExportOrientationCombo","Orientation","portrait","landscape","buildComboItems","obj","fn","x","map","key","ExportDialog","Popup","autoShow","autoClose","closable","centered","autoSelectVisibleColumns","hidePNGMultipageOption","title","maxHeight","overflowY","defaults","localeClass","items","columnsField","valueField","displayField","multiSelect","weight","rowsRangeField","exporterTypeField","dialog","parent","exporters","exporter","optionalL","onChange","owner","widgetMap","alignRowsField","hidden","repeatHeaderField","checked","fileFormatField","oldValue","exporterField","find","FileFormat","png","_previousDisabled","_previousValue","paperFormatField","orientationField","bbar","exportButton","color","onClick","cancelButton","Error","columnsStore","isLeaf","exportable","excludeCollapsedRecords","applyInitialValues","LocaleManager","locale","prio","width","labelWidth","toUpperCase","PaperFormat","onBeforeShow","_super$onBeforeShow","query","c","call","arguments","onLocaleChange","eachWidget","widget","Field","onExportClick","trigger","onCancelClick","hide","fieldRe","result","test","ref","replace","Checkbox","MultiPageExporter","Exporter","exportingPageText","stateNextPage","rowsRange","enableDirectRendering","exportMeta","currentPage","verticalPosition","lastExportedRowBottom","verticalPages","horizontalPosition","currentPageTopMargin","lastTop","lastRowIndex","rowManager","firstVisibleRow","dataIndex","lastRowDataIndex","scrollRowIntoView","firstVisibleDataIndex","block","prepareComponent","headerTpl","footerTpl","alignRows","paperFormat","isPortrait","orientation","paperWidth","height","paperHeight","pageWidth","inchToPx","pageHeight","onlyVisibleRows","horizontalPages","Math","ceil","totalWidth","contentHeight","measureElement","totalPages","totalHeight","totalRows","count","getVisibleRowsCount","headerHeight","footerHeight","bodyHeight","scrollHeight","rowHeight","rowOffsetHeight","rowsOnFirstPage","floor","rowsPerPage","remainingRows","adjustRowBuffer","restoreComponent","restoreRowBuffer","collectRows","subGrids","rows","onlyVisible","hasMergeCells","hasActiveFeature","remainingHeight","index","findIndex","bottom","y","firstRowIndex","overflowingHeight","top","lastDataIndex","offset","row","offsetHeight","collectRow","subGridName","mergedCells","querySelectorAll","mergedCellsHtml","mergedCell","push","outerHTML","lastRow","exactGridHeight","footerContainer","headerContainer","onRowsCollected","slice","scrollableTopMargin","detacher","offsetRows","fakeRow","previousTop","render","getAt","translate","renderMergedCells","buildPage","getVirtualScrollerHeight","header","footer","prepareHTML","buildPageHtml","prepareExportElement","placeHolder","placeHolderText","contentHtml","join","querySelector","style","marginTop","prototype","pagesExtractor","stylesheets","progress","round","styles","pageTpl","MultiPageVerticalExporter","processedRows","size","estimateTotalPages","repeatHeader","scale","getScaleValue","bodyElement","initialScroll","rowsHeight","firstRow","lastVisibleRow","finishRowIndex","Set","clientHeaderHeight","nextPageTop","gridHeight","SinglePageExporter","localize","centerContentHorizontally","positionRows","currentTop","lastProcessedRowIndex","firstNewRowIndex","lastNewRowIndex","fromIndex","toIndex","i","totalClientHeight","widthScale","heightScale","BrowserHelper","isIE11","PdfExport","dialogClass","exportServer","undefined","exportDialog","$config","fileName","fileFormat","clientURL","keepRegionSizes","pagesPerRequest","exporterConfig","exporterType","translateURLsToAbsolute","keepPathName","openAfterExport","sendAsBinary","openInNewTab","fetchOptions","exportMask","exportProgressMask","showErrorToast","localizableProperties","filterStyles","updateEnableDirectRendering","VersionHelper","deprecate","_this$exportDialog","destroy","exportersMap","currentExportPromise","_currentExportPromise","_exportersMap","Map","getExporter","has","exporterClass","ObjectHelper","clone","relayAll","set","buildRequest","pages","JSON","stringify","format","buildExportConfig","visibleColumns","$$name","collapsed","s","region","export","isExporting","mask","_me$exportDialog","isDestroying","close","unmask","contentGenerated","responsePromise","receiveExportContent","toast","showLoadingToast","response","processExportContent","error","Response","_me$exportDialog2","Toast","show","rootElement","ok","AjaxHelper","fetch","method","credentials","headers","body","contentType","match","MIMEType","FileMIMEType","objectURL","responseBlobToObjectURL","link","getDownloadLink","click","responseJSON","json","success","url","msg","mimeType","blob","URL","createObjectURL","href","document","createElement","download","target","defaultExportDialogConfig","copyProperties","changeExportDialog","oldExportDialog","mergeConfigs","new","onExportButtonClick","showExportDialog","dialogMask","maxProgress","exportstep","catch","finally","_me$exportDialog3","exportPromise","timeout","showProgress","EventHelper","on","_exportPromise$abort","abort"],"mappings":"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AAGgB,GAAG;IAAEb,IAAI,EAAGU,EAAE,CAACG,GAAG;GAAG,CAAC,CAAC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMC,YAAY,SAASC,KAAK,CAAC;;EAE5C,WAAW7H,KAAKA,GAAG;IACf,OAAO,cAAc;;EAEzB,WAAWgB,IAAIA,GAAG;IACd,OAAO,cAAc;;EAEzB,WAAWmB,YAAYA,GAAG;IACtB,OAAO;MACH2F,QAAQ,EAAI,KAAK;MACjB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,yBAAyB,GAAG,kBAAkB,GAAG,EAAG;AACxG;AACA,8BAA8Bd,KAAK,KAAK,CAAC,GAAG,SAAS,GAAG,iBAAkB;AAC1E;AACA,qBAAqB,CAChB;EACD,IAAI0B,aAAa,CAACC,MAAM,EAAE;IACtBlC,MAAM,CAACpC,IAAI,CACV;AACT;AACA,iCAAiCkE,iBAAkB;AACnD;AACA,kBAAkB,CACT;;;EAGL,MAAM;IACFtV,IAAI,EAAGiD,EAAE,CAACwQ,OAAO,CAAC;MACdzT,IAAI;MACJuS,MAAM;MACNC,MAAM;MACNgB,MAAM;MACN3F,UAAU;MACVE;KACH;GACJ;AACL,CAAC;AACD4G,kBAAkB,CAACrP,MAAM,GAAG,oBAAoB;;AC1RhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMqQ,SAAS,SAAStU,cAAc,CAAC;EAClD,WAAWlC,KAAKA,GAAG;IACf,OAAO,WAAW;;EAEtB,WAAWmC,YAAYA,GAAG;IACtB,OAAO;MACHsU,WAAW,EAAI7O,YAAY;;AAEvC;AACA;AACA;MACY8O,YAAY,EAAGC,SAAS;;AAEpC;AACA;AACA;;AAEA;AACA;AACA;MACYC,YAAY,EAAG;QACXpV,KAAK,EAAG,IAAI;QACZqV,OAAO,EAAG,CAAC,MAAM;OACpB;;AAEb;AACA;AACA;MACYC,QAAQ,EAAG,IAAI;;AAE3B;AACA;AACA;AACA;AACA;MACYC,UAAU,EAAG,KAAK;;AAE9B;AACA;AACA;AACA;MACYC,SAAS,EAAG,IAAI;;AAE5B;AACA;AACA;AACA;AACA;MACYzI,WAAW,EAAG,IAAI;;AAE9B;AACA;AACA;AACA;AACA;MACYE,WAAW,EAAG,UAAU;;AAEpC;AACA;AACA;AACA;MACYxB,SAAS,EAAG,KAAK;;AAE7B;AACA;AACA;AACA;MACYqB,SAAS,EAAG,KAAK;;AAE7B;AACA;AACA;AACA;AACA;MACYqG,YAAY,EAAG,KAAK;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYsC,eAAe,EAAG,IAAI;;AAElC;AACA;AACA;AACA;AACA;AACA;MACYC,eAAe,EAAG,CAAC;;AAE/B;AACA;AACA;AACA;MACYC,cAAc,EAAG,IAAI;;AAEjC;AACA;AACA;AACA;MACYC,YAAY,EAAG,YAAY;;AAEvC;AACA;AACA;AACA;MACYjO,SAAS,EAAG,CAACqM,kBAAkB,EAAE3I,iBAAiB,EAAE0H,yBAAyB,CAAC;;AAE1F;AACA;AACA;AACA;AACA;AACA;AACA;MACY8C,uBAAuB,EAAG,IAAI;;AAE1C;AACA;AACA;AACA;AACA;AACA;MACYC,YAAY,EAAG,IAAI;;AAE/B;AACA;AACA;AACA;MACYC,eAAe,EAAG,IAAI;;AAElC;AACA;AACA;AACA;MACYC,YAAY,EAAG,KAAK;;AAEhC;AACA;AACA;AACA;MACYC,YAAY,EAAG,KAAK;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYrJ,SAAS,EAAG,IAAI;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYC,SAAS,EAAG,IAAI;;AAE5B;AACA;AACA;AACA;AACA;MACYqJ,YAAY,EAAG,IAAI;;AAE/B;AACA;AACA;AACA;MACYC,UAAU,EAAG,qBAAqB;;AAE9C;AACA;AACA;AACA;MACYC,kBAAkB,EAAG,qCAAqC;;AAEtE;AACA;AAC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"}