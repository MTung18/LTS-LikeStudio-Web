{"version":3,"file":"SchedulerBase.js","sources":["../../../../Scheduler/lib/Scheduler/view/VerticalTimeAxis.js","../../../../Scheduler/lib/Scheduler/column/VerticalTimeAxisColumn.js","../../../../Scheduler/lib/Scheduler/eventlayout/HorizontalLayout.js","../../../../Scheduler/lib/Scheduler/eventlayout/HorizontalLayoutPack.js","../../../../Scheduler/lib/Scheduler/eventlayout/HorizontalLayoutStack.js","../../../../Scheduler/lib/Scheduler/feature/base/ResourceTimeRangesBase.js","../../../../Scheduler/lib/Scheduler/view/DependencyEditor.js","../../../../Scheduler/lib/Scheduler/feature/DependencyEdit.js","../../../../Scheduler/lib/Scheduler/feature/ScheduleContext.js","../../../../Scheduler/lib/Scheduler/feature/EventCopyPaste.js","../../../../Scheduler/lib/Scheduler/feature/EventDrag.js","../../../../Scheduler/lib/Scheduler/feature/EventDragCreate.js","../../../../Scheduler/lib/Scheduler/feature/EventTooltip.js","../../../../Scheduler/lib/Scheduler/feature/StickyEvents.js","../../../../Scheduler/lib/Scheduler/feature/TimeRanges.js","../../../../Scheduler/lib/Scheduler/view/mixin/SchedulerDom.js","../../../../Scheduler/lib/Scheduler/view/mixin/SchedulerDomEvents.js","../../../../Scheduler/lib/Scheduler/view/mixin/SchedulerEventRendering.js","../../../../Scheduler/lib/Scheduler/view/mixin/SchedulerStores.js","../../../../Scheduler/lib/Scheduler/view/mixin/SchedulerScroll.js","../../../../Scheduler/lib/Scheduler/view/mixin/SchedulerRegions.js","../../../../Scheduler/lib/Scheduler/view/mixin/SchedulerState.js","../../../../Scheduler/lib/Scheduler/view/orientation/HorizontalRendering.js","../../../../Scheduler/lib/Scheduler/eventlayout/VerticalLayout.js","../../../../Scheduler/lib/Scheduler/view/orientation/VerticalRendering.js","../../../../Scheduler/lib/Scheduler/view/SchedulerBase.js"],"sourcesContent":["import TimeAxisBase from './TimeAxisBase.js';\n\n/**\n * @module Scheduler/view/VerticalTimeAxis\n */\n\n/**\n * Widget that renders a vertical time axis. Only renders ticks in view. Used in vertical mode.\n * @extends Core/widget/Widget\n * @private\n */\nexport default class VerticalTimeAxis extends TimeAxisBase {\n\n    static get $name() {\n        return 'VerticalTimeAxis';\n    }\n\n    static get configurable() {\n        return {\n            cls : 'b-verticaltimeaxis',\n\n            sizeProperty : 'height',\n\n            positionProperty : 'top',\n\n            wrapText : true\n        };\n    }\n\n    // All cells overlayed in the same space.\n    // For future use.\n    buildHorizontalCells() {\n        const\n            me                   = this,\n            { client }           = me,\n            stickyHeaders        = client?.stickyHeaders,\n            featureHeaderConfigs = [],\n            cellConfigs          = me.levels.reduce((result, level, i) => {\n                if (level.cells) {\n                    result.push(...level.cells?.filter(cell => cell.start < me.endDate && cell.end > me.startDate).map((cell, j, cells) => ({\n                        role      : 'presentation',\n                        className : {\n                            'b-sch-header-timeaxis-cell' : 1,\n                            [cell.headerCellCls]         : cell.headerCellCls,\n                            [`b-align-${cell.align}`]    : cell.align,\n                            'b-last'                     : j === cells.length - 1,\n                            'b-lowest'                   : i === me.levels.length - 1\n                        },\n                        dataset : {\n                            tickIndex      : cell.index,\n                            cellId         : `${i}-${cell.index}`,\n                            headerPosition : i,\n                            // Used in export tests to resolve dates from tick elements\n                            ...globalThis.DEBUG && { date : cell.start.getTime() }\n                        },\n                        style : {\n                            // DomHelper appends px to numeric dimensions\n                            top       : cell.coord,\n                            height    : cell.width,\n                            minHeight : cell.width\n                        },\n                        children : [\n                            {\n                                role      : 'presentation',\n                                className : {\n                                    'b-sch-header-text' : 1,\n                                    'b-sticky-header'   : stickyHeaders\n                                },\n                                html : cell.value\n                            }\n                        ]\n                    })));\n                }\n                return result;\n            }, []);\n\n        // When tested in isolation there is no client\n        client?.getHeaderDomConfigs(featureHeaderConfigs);\n\n        cellConfigs.push(...featureHeaderConfigs);\n\n        // noinspection JSSuspiciousNameCombination\n        return {\n            className : me.widgetClassList,\n            dataset   : {\n                headerFeature  : `headerRow0`,\n                headerPosition : 0\n            },\n            syncOptions : {\n                // Keep a maximum of 5 released cells. Might be fine with fewer since ticks are fixed width.\n                // Prevents an unnecessary amount of cells from sticking around when switching from narrow to\n                // wide tickSizes\n                releaseThreshold : 5,\n                syncIdField      : 'cellId'\n            },\n            children : cellConfigs\n        };\n    }\n\n    get height() {\n        return this.size;\n    }\n}\n","import Column from '../../Grid/column/Column.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\nimport VerticalTimeAxis from '../view/VerticalTimeAxis.js';\n\n/**\n * @module Scheduler/column/VerticalTimeAxisColumn\n */\n\n/**\n * A special column containing the time axis labels when the Scheduler is used in vertical mode. You can configure,\n * it using the {@link Scheduler.view.Scheduler#config-verticalTimeAxisColumn} config object.\n *\n * **Note**: this column is sized by flexing to consume full width of its containing {@link Grid.view.SubGrid}. To\n * change width of this column, instead size the subgrid like so:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     mode           : 'vertical',\n *     subGridConfigs : {\n *         locked : {\n *             width : 300\n *         }\n *     }\n * });\n * ```\n *\n * @extends Grid/column/Column\n */\nexport default class VerticalTimeAxisColumn extends Column {\n\n    static $name = 'VerticalTimeAxisColumn';\n\n    static get type() {\n        return 'verticalTimeAxis';\n    }\n\n    static get defaults() {\n        return {\n            /**\n             * @hideconfigs autoWidth, autoHeight\n             */\n\n            /**\n             * Set to false to prevent this column header from being dragged.\n             * @config {Boolean} draggable\n             * @category Interaction\n             * @default false\n             * @hide\n             */\n            draggable : false,\n\n            /**\n             * Set to false to prevent grouping by this column.\n             * @config {Boolean} groupable\n             * @category Interaction\n             * @default false\n             * @hide\n             */\n            groupable : false,\n\n            /**\n             * Allow column visibility to be toggled through UI.\n             * @config {Boolean} hideable\n             * @default false\n             * @category Interaction\n             * @hide\n             */\n            hideable : false,\n\n            /**\n             * Show column picker for the column.\n             * @config {Boolean} showColumnPicker\n             * @default false\n             * @category Menu\n             * @hide\n             */\n            showColumnPicker : false,\n\n            /**\n             * Allow filtering data in the column (if Filter feature is enabled)\n             * @config {Boolean} filterable\n             * @default false\n             * @category Interaction\n             * @hide\n             */\n            filterable : false,\n\n            /**\n             * Allow sorting of data in the column\n             * @config {Boolean} sortable\n             * @category Interaction\n             * @default false\n             * @hide\n             */\n            sortable : false,\n\n            // /**\n            //  * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.\n            //  * @config {Boolean} resizable\n            //  * @default false\n            //  * @category Interaction\n            //  * @hide\n            //  */\n            // resizable : false,\n\n            /**\n             * Allow searching in the column (respected by QuickFind and Search features)\n             * @config {Boolean} searchable\n             * @default false\n             * @category Interaction\n             * @hide\n             */\n            searchable : false,\n\n            /**\n             * Specifies if this column should be editable, and define which editor to use for editing cells in the column (if CellEdit feature is enabled)\n             * @config {String} editor\n             * @default false\n             * @category Interaction\n             * @hide\n             */\n            editor : false,\n\n            /**\n             * Set to `true` to show a context menu on the cell elements in this column\n             * @config {Boolean} enableCellContextMenu\n             * @default false\n             * @category Menu\n             * @hide\n             */\n            enableCellContextMenu : false,\n\n            /**\n             * @config {Function|Boolean} tooltipRenderer\n             * @hide\n             */\n            tooltipRenderer : false,\n\n            /**\n             * Column minimal width. If value is Number then minimal width is in pixels\n             * @config {Number|String} minWidth\n             * @default 0\n             * @category Layout\n             */\n            minWidth : 0,\n\n            resizable : false,\n\n            cellCls : 'b-verticaltimeaxiscolumn',\n\n            flex : 1,\n\n            alwaysClearCell : false\n        };\n    }\n\n    get isFocusable() {\n        return false;\n    }\n\n    construct(data) {\n        super.construct(...arguments);\n\n        this.view = new VerticalTimeAxis({\n            model  : this.grid.timeAxisViewModel,\n            client : this.grid\n        });\n    }\n\n    renderer({ cellElement, size }) {\n        this.view.render(cellElement);\n\n        size.height = this.view.height;\n    }\n\n    // This function is not meant to be called by any code other than Base#getCurrentConfig().\n    // It extracts the current configs (fields) for the column, removing irrelevant ones\n    getCurrentConfig(options) {\n        const result = super.getCurrentConfig(options);\n\n        // Remove irrelevant configs\n        delete result.id;\n        delete result.region;\n        delete result.type;\n        delete result.field;\n        delete result.ariaLabel;\n        delete result.cellAriaLabel;\n\n        return result;\n    }\n}\n\nColumnStore.registerColumnType(VerticalTimeAxisColumn);\n","import Base from '../../Core/Base.js';\n\n/**\n * @module Scheduler/eventlayout/HorizontalLayout\n */\n\n/**\n * Base class for horizontal layouts (HorizontalLayoutPack and HorizontalLayoutStack). Should not be used directly,\n * instead specify {@link Scheduler.view.mixin.SchedulerEventRendering#config-eventLayout} in Scheduler config (stack,\n * pack or none):\n *\n * @example\n * let scheduler = new Scheduler({\n *   eventLayout: 'stack'\n * });\n *\n * @abstract\n * @private\n */\nexport default class HorizontalLayout extends Base {\n    static get defaultConfig() {\n        return {\n            nbrOfBandsByResource        : {},\n            bandIndexToPxConvertFn      : null,\n            bandIndexToPxConvertThisObj : null\n        };\n    }\n\n    clearCache(resource) {\n        if (resource) {\n            delete this.nbrOfBandsByResource[resource.id];\n        }\n        else {\n            this.nbrOfBandsByResource = {};\n        }\n    }\n\n    /**\n     * This method performs layout on an array of event render data and returns amount of _bands_. Band is a multiplier of a\n     * configured {@link Scheduler.view.Scheduler#config-rowHeight} to calculate total row height required to fit all\n     * events.\n     * This method should not be used directly, it is called by the Scheduler during the row rendering process.\n     * @param {EventRenderData[]} events\n     * @param {Scheduler.model.ResourceModel} resource\n     * @returns {Number}\n     */\n    applyLayout(events, resource) {\n        // Return number of bands required\n        return this.nbrOfBandsByResource[resource.id] = this.layoutEventsInBands(events);\n    }\n\n    /**\n     * This method iterates over events and calculates top position for each of them. Default layouts calculate\n     * positions to avoid events overlapping horizontally (except for the 'none' layout). Pack layout will squeeze events to a single\n     * row by reducing their height, Stack layout will increase the row height and keep event height intact.\n     * This method should not be used directly, it is called by the Scheduler during the row rendering process.\n     * @param {EventRenderData[]} events\n     */\n    layoutEventsInBands(events) {\n        throw new Error('Implement in subclass');\n    }\n}\n","import HorizontalLayout from './HorizontalLayout.js';\nimport PackMixin from './PackMixin.js';\n\n/**\n * @module Scheduler/eventlayout/HorizontalLayoutPack\n */\n\n/**\n * Handles layout of events within a row (resource) in horizontal mode. Packs events (adjusts their height) to fit\n * available row height\n *\n * @extends Scheduler/eventlayout/HorizontalLayout\n * @mixes Scheduler/eventlayout/PackMixin\n * @private\n */\nexport default class HorizontalLayoutPack extends HorizontalLayout.mixin(PackMixin) {\n    static get $name() {\n        return 'HorizontalLayoutPack';\n    }\n\n    static get configurable() {\n        return {\n            type : 'pack'\n        };\n    }\n\n    // Packs the events to consume as little space as possible\n    layoutEventsInBands(events) {\n        const result = this.packEventsInBands(events, (event, j, slot, slotSize) => {\n            event.height = slotSize;\n            event.top    = slot.start + (j * slotSize);\n        });\n\n        events.forEach(event => {\n            Object.assign(\n                event,\n                this.bandIndexToPxConvertFn.call(\n                    this.bandIndexToPxConvertThisObj || this,\n                    event.top,\n                    event.height,\n                    event.eventRecord,\n                    event.resourceRecord\n                )\n            );\n        });\n\n        return result;\n    }\n}\n","import HorizontalLayout from './HorizontalLayout.js';\n\n/**\n * @module Scheduler/eventlayout/HorizontalLayoutStack\n */\n\n/**\n * Handles layout of events within a row (resource) in horizontal mode. Stacks events, increasing row height when to fit\n * all overlapping events.\n *\n * This layout is used by default in horizontal mode.\n *\n * @extends Scheduler/eventlayout/HorizontalLayout\n * @private\n */\nexport default class HorizontalLayoutStack extends HorizontalLayout {\n    static get $name() {\n        return 'HorizontalLayoutStack';\n    }\n\n    static get configurable() {\n        return {\n            type : 'stack'\n        };\n    }\n\n    // Input: Array of event layout data\n    // heightRun is used when pre-calculating row heights, taking a cheaper path\n    layoutEventsInBands(events, heightRun = false) {\n        let verticalPosition = 0;\n\n        do {\n            let eventIndex = 0,\n                event      = events[0];\n\n            while (event) {\n                if (!heightRun) {\n                    // Apply band height to the event cfg\n                    event.top = this.bandIndexToPxConvertFn.call(\n                        this.bandIndexToPxConvertThisObj || this,\n                        verticalPosition,\n                        event.eventRecord,\n                        event.resourceRecord\n                    );\n                }\n\n                // Remove it from the array and continue searching\n                events.splice(eventIndex, 1);\n\n                eventIndex = this.findClosestSuccessor(event, events);\n                event = events[eventIndex];\n            }\n\n            verticalPosition++;\n        } while (events.length > 0);\n\n        // Done!\n        return verticalPosition;\n    }\n\n    // TODO: optimize this for better performance with many events per resource\n    findClosestSuccessor(eventRenderData, events) {\n        const\n            { endMS, group } = eventRenderData,\n            isMilestone      = eventRenderData.eventRecord && eventRenderData.eventRecord.duration === 0;\n\n        let minGap      = Infinity,\n            closest,\n            gap,\n            event;\n\n        for (let i = 0, l = events.length; i < l; i++) {\n            event = events[i];\n            gap = event.startMS - endMS;\n\n            if (\n                gap >= 0 && gap < minGap &&\n                // Two milestones should not overlap\n                (gap > 0 || event.endMS - event.startMS > 0 || !isMilestone)\n            ) {\n                // Events are sorted by group, so when we find first event with a different group, we can stop iteration\n                if (this.grouped && group !== event.group) {\n                    break;\n                }\n                closest = i;\n                minGap  = gap;\n            }\n        }\n\n        return closest;\n    }\n}\n","import InstancePlugin from '../../../Core/mixin/InstancePlugin.js';\nimport AttachToProjectMixin from '../../data/mixin/AttachToProjectMixin.js';\n\n/**\n * @module Scheduler/feature/base/ResourceTimeRangesBase\n */\n\n/**\n * Abstract base class for ResourceTimeRanges and ResourceNonWorkingTime features.\n * You should not use this class directly.\n *\n * @extends Core/mixin/InstancePlugin\n * @abstract\n */\nexport default class ResourceTimeRangesBase extends InstancePlugin.mixin(AttachToProjectMixin) {\n    //region Config\n\n    static configurable = {\n        /**\n         * Specify value to use for the tabIndex attribute of range elements\n         * @config {Number}\n         * @category Misc\n         */\n        tabIndex : null\n    };\n\n    static get pluginConfig()  {\n        return {\n            chain    : ['getEventsToRender', 'onEventDataGenerated', 'noFeatureElementsInAxis'],\n            override : ['resolveResourceRecord']\n        };\n    }\n\n    // Let Scheduler know if we have ResourceTimeRanges in view or not\n    noFeatureElementsInAxis() {\n        const { timeAxis } = this.client;\n        return !this.needsRefresh && this.store && !this.store.storage.values.some(t => timeAxis.isTimeSpanInAxis(t));\n    }\n\n    //endregion\n\n    //region Init\n\n    doDisable(disable) {\n        if (this.client.isPainted) {\n            this.client.refresh();\n        }\n\n        super.doDisable(disable);\n    }\n\n    updateTabIndex() {\n        if (!this.isConfiguring) {\n            this.client.refresh();\n        }\n    }\n\n    //endregion\n\n    getEventsToRender(resource, events) {\n        throw new Error('Implement in subclass');\n    }\n\n    // Called for each event during render, allows manipulation of render data. Adjust any resource time ranges\n    // (chained function from Scheduler)\n    onEventDataGenerated(renderData) {\n        const\n            me                       = this,\n            { eventRecord, iconCls } = renderData;\n\n        if (me.shouldInclude(eventRecord)) {\n            if (me.client.isVertical) {\n                renderData.width = renderData.resourceRecord.columnWidth || me.client.resourceColumnWidth;\n            }\n            else {\n                renderData.top = 0;\n            }\n\n            // Flag that we should fill entire row/col\n            renderData.fillSize = true;\n            // Add our own cls\n            renderData.wrapperCls[me.rangeCls] = 1;\n            renderData.wrapperCls[`b-sch-color-${eventRecord.timeRangeColor}`] = eventRecord.timeRangeColor;\n            // Add label\n            renderData.eventContent.text = eventRecord.name;\n            renderData.children.push(renderData.eventContent);\n\n            // Allow configuring tabIndex\n            renderData.tabIndex = me.tabIndex != null ? String(me.tabIndex) : null;\n\n            // Add icon\n            if (iconCls?.length > 0) {\n                renderData.children.unshift({\n                    tag       : 'i',\n                    className : iconCls.toString()\n                });\n            }\n\n            // Event data for DOMSync comparison\n            renderData.eventId = me.generateElementId(eventRecord);\n        }\n    }\n\n    /**\n     * Generates ID from the passed time range record\n     * @param {Scheduler.model.TimeSpan} record\n     * @returns {String} Generated ID for the DOM element\n     * @internal\n     */\n    generateElementId(record) {\n        return record.domId;\n    }\n\n    resolveResourceTimeRangeRecord(rangeElement) {\n        return rangeElement?.closest(`.${this.rangeCls}`)?.elementData.eventRecord;\n    }\n\n    getElementFromResourceTimeRangeRecord(record) {\n        // return this.client.foregroundCanvas.querySelector(`[data-event-id=\"${record.domId}\"]`);\n        return this.client.foregroundCanvas.syncIdMap[record.domId];\n    }\n\n    resolveResourceRecord(event) {\n        const record = this.overridden.resolveResourceRecord(...arguments);\n\n        return record || this.resolveResourceTimeRangeRecord(event.target || event)?.resource;\n    }\n\n    shouldInclude(eventRecord) {\n        throw new Error('Implement in subclass');\n    }\n\n    // Called when a ResourceTimeRangeModel is manipulated, relays to Scheduler#onInternalEventStoreChange which updates to UI\n    onStoreChange(event) {\n        // Edge case for scheduler not using any events, it has to refresh anyway to get rid of ResourceTimeRanges\n        if (event.action === 'removeall' || event.action === 'dataset') {\n            this.needsRefresh = true;\n        }\n\n        this.client.onInternalEventStoreChange(event);\n\n        this.needsRefresh = false;\n    }\n}\n\n// No feature based styling needed, do not add a cls to Scheduler\nResourceTimeRangesBase.featureClass = '';\n","import Popup from '../../Core/widget/Popup.js';\n\n/**\n * @module Scheduler/view/DependencyEditor\n */\n\n/**\n * A dependency editor popup.\n *\n * @extends Core/widget/Popup\n * @private\n */\nexport default class DependencyEditor extends Popup {\n\n    static get $name() {\n        return 'DependencyEditor';\n    }\n\n    static get defaultConfig() {\n        return {\n            items     : [],\n            draggable : {\n                handleSelector : ':not(button,.b-field-inner)' // blacklist buttons and field inners\n            },\n            axisLock : 'flexible'\n        };\n    }\n\n    processWidgetConfig(widget) {\n        const { dependencyEditFeature } = this;\n\n        if (widget.ref === 'lagField' && !dependencyEditFeature.showLagField) {\n            return false;\n        }\n        if (widget.ref === 'deleteButton' && !dependencyEditFeature.showDeleteButton) {\n            return false;\n        }\n\n        return super.processWidgetConfig(widget);\n    }\n\n    afterShow(...args) {\n        const { deleteButton } = this.widgetMap;\n\n        // Only show delete button if the dependency record belongs to a store\n        if (deleteButton) {\n            deleteButton.hidden = !this.record.isPartOfStore();\n        }\n\n        super.afterShow(...args);\n    }\n\n    onInternalKeyDown(event) {\n        this.trigger('keyDown', { event });\n        super.onInternalKeyDown(event);\n    }\n}\n","/* eslint-disable no-unused-expressions */\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\nimport '../../Core/widget/DisplayField.js';\nimport '../../Core/widget/DurationField.js';\nimport DependencyEditor from '../view/DependencyEditor.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport DependencyModel from '../model/DependencyModel.js';\nimport Duration from '../../Core/data/Duration.js';\n\n/**\n * @module Scheduler/feature/DependencyEdit\n */\n\n/**\n * Feature that displays a popup containing fields for editing a dependency. Requires the\n * {@link Scheduler.feature.Dependencies} feature to be enabled. Double click a line in the demo below to show the\n * editor.\n *\n * {@inlineexample Scheduler/feature/Dependencies.js}\n *\n * ## Customizing the built-in widgets\n *\n * ```javascript\n *  const scheduler = new Scheduler({\n *      columns : [\n *          { field : 'name', text : 'Name', width : 100 }\n *      ],\n *      features : {\n *          dependencies   : true,\n *          dependencyEdit : {\n *              editorConfig : {\n *                  items : {\n *                      // Custom label for the type field\n *                      typeField : {\n *                          label : 'Kind'\n *                      }\n *                  },\n *\n *                  bbar : {\n *                      items : {\n *                          // Hiding save button\n *                          saveButton : {\n *                              hidden : true\n *                          }\n *                      }\n *                  }\n *              }\n *          }\n *      }\n *  });\n * ```\n *\n * ## Built in widgets\n *\n * | Widget ref             | Type                              | Weight | Description               |\n * |------------------------|-----------------------------------|--------|---------------------------|\n * | `fromNameField`        | {@link Core.widget.DisplayField}  | 100    | From task name (readonly) |\n * | `toNameField`          | {@link Core.widget.DisplayField}  | 200    | To task name (readonly)   |\n * | `typeField`            | {@link Core.widget.Combo}         | 300    | Edit type                 |\n * | `lagField`             | {@link Core.widget.DurationField} | 400    | Edit lag                  |\n *\n * The built in buttons are:\n *\n * | Widget ref             | Type                       | Weight | Description                       |\n * |------------------------|----------------------------|--------|-----------------------------------|\n * | `saveButton`           | {@link Core.widget.Button} | 100    | Save button on the bbar           |\n * | `deleteButton`         | {@link Core.widget.Button} | 200    | Delete button on the bbar         |\n * | `cancelButton`         | {@link Core.widget.Button} | 300    | Cancel editing button on the bbar |\n *\n * This feature is **off** by default.\n * For info on enabling it, see {@link Grid.view.mixin.GridFeatures}.\n *\n * @extends Core/mixin/InstancePlugin\n * @demo Scheduler/dependencies\n * @classtype dependencyEdit\n * @feature\n */\nexport default class DependencyEdit extends InstancePlugin {\n    //region Config\n\n    static get $name() {\n        return 'DependencyEdit';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * True to hide this editor if a click is detected outside it (defaults to true)\n             * @config {Boolean}\n             * @default\n             * @category Editor\n             */\n            autoClose : true,\n\n            /**\n             * True to save and close this panel if ENTER is pressed in one of the input fields inside the panel.\n             * @config {Boolean}\n             * @default\n             * @category Editor\n             */\n            saveAndCloseOnEnter : true,\n\n            /**\n             * True to show a delete button in the form.\n             * @config {Boolean}\n             * @default\n             * @category Editor widgets\n             */\n            showDeleteButton : true,\n\n            /**\n             * The event that shall trigger showing the editor. Defaults to `dependencydblclick`, set to empty string or\n             * `null` to disable editing of dependencies.\n             * @config {String}\n             * @default\n             * @category Editor\n             */\n            triggerEvent : 'dependencydblclick',\n\n            /**\n             * True to show the lag field for the dependency\n             * @config {Boolean}\n             * @default\n             * @category Editor widgets\n             */\n            showLagField : false,\n\n            dependencyRecord : null,\n\n            /**\n             * Default editor configuration, used to configure the Popup.\n             * @config {PopupConfig}\n             * @category Editor\n             */\n            editorConfig : {\n                title       : 'L{Edit dependency}',\n                localeClass : this,\n                closable    : true,\n\n                defaults : {\n                    localeClass : this\n                },\n                items : {\n                    /**\n                     * Reference to the from name\n                     * @member {Core.widget.DisplayField} fromNameField\n                     * @readonly\n                     */\n                    fromNameField : {\n                        type   : 'display',\n                        weight : 100,\n                        label  : 'L{From}'\n                    },\n                    /**\n                     * Reference to the to name field\n                     * @member {Core.widget.DisplayField} toNameField\n                     * @readonly\n                     */\n                    toNameField : {\n                        type   : 'display',\n                        weight : 200,\n                        label  : 'L{To}'\n                    },\n                    /**\n                     * Reference to the type field\n                     * @member {Core.widget.Combo} typeField\n                     * @readonly\n                     */\n                    typeField : {\n                        type                  : 'combo',\n                        weight                : 300,\n                        label                 : 'L{Type}',\n                        name                  : 'type',\n                        editable              : false,\n                        valueField            : 'id',\n                        displayField          : 'name',\n                        localizeDisplayFields : true,\n                        buildItems            : function() {\n                            const dialog = this.parent;\n\n                            return Object.keys(DependencyModel.Type).map(type => {\n\n                                // Do not remove. Assertion strings for Localization sanity check.\n                                // 'L{StartToStart}'\n                                // 'L{StartToEnd}'\n                                // 'L{EndToStart}'\n                                // 'L{EndToEnd}'\n\n                                return {\n                                    id        : DependencyModel.Type[type],\n                                    name      : dialog.L(type),\n                                    localeKey : type\n                                };\n                            });\n                        }\n                    },\n\n                    /**\n                     * Reference to the lag field\n                     * @member {Core.widget.DurationField} lagField\n                     * @readonly\n                     */\n                    lagField : {\n                        type          : 'duration',\n                        weight        : 400,\n                        label         : 'L{Lag}',\n                        name          : 'lag',\n                        allowNegative : true\n                    }\n                },\n\n                bbar : {\n                    defaults : {\n                        localeClass : this\n                    },\n                    items : {\n                        foo : {\n                            type : 'widget',\n                            cls  : 'b-label-filler'\n                        },\n                        /**\n                         * Reference to the save button, if used\n                         * @member {Core.widget.Button} saveButton\n                         * @readonly\n                         */\n                        saveButton : {\n                            color : 'b-green',\n                            text  : 'L{Save}'\n                        },\n                        /**\n                         * Reference to the delete button, if used\n                         * @member {Core.widget.Button} deleteButton\n                         * @readonly\n                         */\n                        deleteButton : {\n                            color : 'b-gray',\n                            text  : 'L{Delete}'\n                        },\n                        /**\n                         * Reference to the cancel button, if used\n                         * @member {Core.widget.Button} cancelButton\n                         * @readonly\n                         */\n                        cancelButton : {\n                            color : 'b-gray',\n                            text  : 'L{Object.Cancel}'\n                        }\n                    }\n                }\n            }\n        };\n    }\n\n    //endregion\n\n    //region Init & destroy\n\n    construct(client, config) {\n        const me = this;\n\n        client.dependencyEdit = me;\n\n        super.construct(client, config);\n\n        if (!client.features.dependencies) {\n            throw new Error('Dependencies feature required when using DependencyEdit');\n        }\n\n        me.clientListenersDetacher = client.ion({\n            [me.triggerEvent] : me.onActivateEditor,\n            thisObj           : me\n        });\n    }\n\n    doDestroy() {\n        this.clientListenersDetacher();\n        this.editor?.destroy();\n        super.doDestroy();\n    }\n\n    //endregion\n\n    //region Editing\n\n    changeEditorConfig(config) {\n        const\n            me                         = this,\n            { autoClose, cls, client } = me;\n\n        return ObjectHelper.assign({\n            owner        : client,\n            align        : 'b-t',\n            /* eslint-disable quote-props */\n            'id'         : `${client.id}-dependency-editor`,\n            /* eslint-enable quote-props */\n            autoShow     : false,\n            anchor       : true,\n            scrollAction : 'realign',\n            clippedBy    : [client.timeAxisSubGridElement, client.bodyContainer],\n            constrainTo  : globalThis,\n            autoClose,\n            cls\n        }, config);\n    }\n\n    //endregion\n\n    //region Save\n\n    get isValid() {\n        return Object.values(this.editor.widgetMap).every(field => {\n            if (!field.name || field.hidden) {\n                return true;\n            }\n\n            return field.isValid !== false;\n        });\n    }\n\n    get values() {\n        const values = {};\n\n        this.editor.eachWidget(widget => {\n            if (!widget.name || widget.hidden) return;\n\n            values[widget.name] = widget.value;\n        }, true);\n\n        return values;\n    }\n\n    /**\n     * Template method, intended to be overridden. Called before the dependency record has been updated.\n     * @param {Scheduler.model.DependencyModel} dependencyRecord The dependency record\n     *\n     **/\n    onBeforeSave(dependencyRecord) {}\n\n    /**\n     * Template method, intended to be overridden. Called after the dependency record has been updated.\n     * @param {Scheduler.model.DependencyModel} dependencyRecord The dependency record\n     *\n     **/\n    onAfterSave(dependencyRecord) {}\n\n    /**\n     * Updates record being edited with values from the editor\n     * @private\n     */\n    updateRecord(dependencyRecord) {\n        const { values } = this;\n\n        // Engine does not understand { magnitude, unit } syntax\n        if (values.lag) {\n            values.lagUnit = values.lag.unit;\n            values.lag = values.lag.magnitude;\n        }\n\n        // Type replaces fromSide/toSide, if they are used\n        if ('type' in values) {\n            dependencyRecord.fromSide != null && (values.fromSide = null);\n            dependencyRecord.toSide != null && (values.toSide = null);\n        }\n\n        // Chronograph doesn't filter out undefined fields, it nullifies them instead\n        // https://github.com/bryntum/chronograph/issues/11\n        ObjectHelper.cleanupProperties(values, true);\n\n        dependencyRecord.set(values);\n    }\n\n    //endregion\n\n    //region Events\n\n    onPopupKeyDown({ event }) {\n        if (event.key === 'Enter' && this.saveAndCloseOnEnter && event.target.tagName.toLowerCase() === 'input') {\n            // Need to prevent this key events from being fired on whatever receives focus after the editor is hidden\n            event.preventDefault();\n\n            this.onSaveClick();\n        }\n    }\n\n    onSaveClick() {\n        if (this.save()) {\n            this.editor.hide();\n        }\n    }\n\n    onDeleteClick() {\n        this.deleteDependency();\n        this.editor.hide();\n    }\n\n    onCancelClick() {\n        this.editor.hide();\n    }\n\n    //region Editing\n\n    // Called from editDependency() to actually show the editor\n    internalShowEditor(dependencyRecord) {\n        const\n            me         = this,\n            { client } = me;\n\n        let showPoint = me.lastPointerDownCoordinate;\n\n        /**\n         * Fires on the owning Scheduler before an dependency is displayed in the editor.\n         * This may be listened for to allow an application to take over dependency editing duties. Returning `false`\n         * stops the default editing UI from being shown.\n         * @event beforeDependencyEdit\n         * @on-owner\n         * @param {Scheduler.view.Scheduler} source The scheduler\n         * @param {Scheduler.feature.DependencyEdit} dependencyEdit The dependencyEdit feature\n         * @param {Scheduler.model.DependencyModel} dependencyRecord The record about to be shown in the editor.\n         * @preventable\n         */\n        if (client.trigger('beforeDependencyEdit', {\n            dependencyEdit : me,\n            dependencyRecord\n        }) === false) {\n            return;\n        }\n\n        const editor = me.getEditor(dependencyRecord);\n\n        me.loadRecord(dependencyRecord);\n\n        /**\n         * Fires on the owning Scheduler when the editor for a dependency is available but before it is shown. Allows\n         * manipulating fields before the widget is shown.\n         * @event beforeDependencyEditShow\n         * @on-owner\n         * @param {Scheduler.view.Scheduler} source The scheduler\n         * @param {Scheduler.feature.DependencyEdit} dependencyEdit The dependencyEdit feature\n         * @param {Scheduler.model.DependencyModel} dependencyRecord The record about to be shown in the editor.\n         * @param {Core.widget.Popup} editor The editor popup\n         */\n        client.trigger('beforeDependencyEditShow', {\n            dependencyEdit : me,\n            dependencyRecord,\n            editor\n        });\n\n        if (!showPoint) {\n            const center = Rectangle.from(me.client.element).center;\n\n            showPoint = [center.x - editor.width / 2, center.y - editor.height / 2];\n        }\n\n        editor.showBy(showPoint);\n    }\n\n    /**\n     * Opens a popup to edit the passed dependency.\n     * @param {Scheduler.model.DependencyModel} dependencyRecord The dependency to edit\n     */\n    editDependency(dependencyRecord) {\n        if (this.client.readOnly || dependencyRecord.readOnly) {\n            return;\n        }\n\n        this.internalShowEditor(dependencyRecord);\n    }\n\n    //endregion\n\n    //region Save\n\n    /**\n     * Gets an editor instance. Creates on first call, reuses on consecutive\n     * @internal\n     * @returns {Scheduler.view.DependencyEditor} Editor popup\n     */\n    getEditor() {\n        const me = this;\n\n        let { editor } = me;\n\n        if (editor) {\n            return editor;\n        }\n\n        editor = me.editor = DependencyEditor.new({\n            dependencyEditFeature : me,\n            autoShow              : false,\n            anchor                : true,\n            scrollAction          : 'realign',\n            constrainTo           : globalThis,\n            autoClose             : me.autoClose,\n            cls                   : me.cls,\n            rootElement           : me.client.rootElement,\n            internalListeners     : {\n                keydown : me.onPopupKeyDown,\n                thisObj : me\n            }\n        }, me.editorConfig);\n\n        if (editor.items.length === 0) {\n            console.warn('Editor configured without any `items`');\n        }\n\n        // assign widget refs\n        editor.eachWidget(widget => {\n            const ref = widget.ref || widget.id;\n            // don't overwrite if already defined\n            if (ref && !me[ref]) {\n                me[ref] = widget;\n            }\n        });\n\n        me.saveButton?.ion({ click : 'onSaveClick', thisObj : me });\n        me.deleteButton?.ion({ click : 'onDeleteClick', thisObj : me });\n        me.cancelButton?.ion({ click : 'onCancelClick', thisObj : me });\n\n        return me.editor;\n    }\n\n    //endregion\n\n    //region Delete\n\n    /**\n     * Sets fields values from record being edited\n     * @private\n     */\n    loadRecord(dependency) {\n        const me = this;\n\n        me.fromNameField.value = dependency.fromEvent.name;\n        me.toNameField.value = dependency.toEvent.name;\n\n        if (me.lagField) {\n            me.lagField.value = new Duration(dependency.lag, dependency.lagUnit);\n        }\n\n        me.editor.record = me.dependencyRecord = dependency;\n    }\n\n    //endregion\n\n    //region Stores\n\n    /**\n     * Saves the changes (applies them to record if valid, if invalid editor stays open)\n     * @private\n     * @fires beforeDependencySave\n     * @fires beforeDependencyAdd\n     * @fires afterDependencySave\n     * @returns {*}\n     */\n    async save() {\n        const\n            me                           = this,\n            { client, dependencyRecord } = me;\n\n        if (!dependencyRecord || !me.isValid) {\n            return;\n        }\n\n        const { dependencyStore, values } = me;\n\n        /**\n         * Fires on the owning Scheduler before a dependency is saved\n         * @event beforeDependencySave\n         * @on-owner\n         * @param {Scheduler.view.Scheduler} source The scheduler instance\n         * @param {Scheduler.model.DependencyModel} dependencyRecord The dependency about to be saved\n         * @param {Object} values The new values\n         * @preventable\n         */\n        if (client.trigger('beforeDependencySave', {\n            dependencyRecord,\n            values\n        }) !== false) {\n            me.onBeforeSave(dependencyRecord);\n\n            me.updateRecord(dependencyRecord);\n\n            // Check if this is a new record\n            if (dependencyStore && !dependencyRecord.stores.length) {\n                /**\n                 * Fires on the owning Scheduler before a dependency is added\n                 * @event beforeDependencyAdd\n                 * @on-owner\n                 * @param {Scheduler.view.Scheduler} source The scheduler\n                 * @param {Scheduler.feature.DependencyEdit} dependencyEdit The dependency edit feature\n                 * @param {Scheduler.model.DependencyModel} dependencyRecord The dependency about to be added\n                 * @preventable\n                 */\n                if (client.trigger('beforeDependencyAdd', { dependencyRecord, dependencyEdit : me }) === false) {\n                    return;\n                }\n\n                dependencyStore.add(dependencyRecord);\n            }\n\n            await client.project?.commitAsync();\n\n            /**\n             * Fires on the owning Scheduler after a dependency is successfully saved\n             * @event afterDependencySave\n             * @on-owner\n             * @param {Scheduler.view.Scheduler} source The scheduler instance\n             * @param {Scheduler.model.DependencyModel} dependencyRecord The dependency about to be saved\n             */\n            client.trigger('afterDependencySave', { dependencyRecord });\n\n            me.onAfterSave(dependencyRecord);\n        }\n\n        return dependencyRecord;\n    }\n\n    /**\n     * Delete dependency being edited\n     * @private\n     * @fires beforeDependencyDelete\n     */\n    async deleteDependency() {\n        const { client, editor, dependencyRecord } = this;\n\n        /**\n         * Fires on the owning Scheduler before a dependency is deleted\n         * @event beforeDependencyDelete\n         * @on-owner\n         * @param {Scheduler.view.Scheduler} source The scheduler instance\n         * @param {Scheduler.model.DependencyModel} dependencyRecord The dependency record about to be deleted\n         * @preventable\n         */\n        if (client.trigger('beforeDependencyDelete', { dependencyRecord }) !== false) {\n            if (editor.containsFocus) {\n                editor.revertFocus();\n            }\n\n            client.dependencyStore.remove(dependencyRecord);\n            await client.project?.commitAsync();\n\n            return true;\n        }\n\n        return false;\n    }\n\n    get dependencyStore() {\n        return this.client.dependencyStore;\n    }\n    //endregion\n\n    //region Events\n\n    onActivateEditor({ dependency, event }) {\n        if (!this.disabled) {\n            this.lastPointerDownCoordinate = [event.clientX, event.clientY];\n            this.editDependency(dependency);\n        }\n    }\n\n    //endregion\n\n}\n\nGridFeatureManager.registerFeature(DependencyEdit, false);\n","import DomHelper from '../../Core/helper/DomHelper.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\n\n/**\n * @module Scheduler/feature/ScheduleContext\n */\n\n/**\n * Allow visually selecting a schedule \"cell\" by clicking, or {@link #config-triggerEvent any other pointer gesture}.\n *\n * This feature is **disabled** by default\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     features : {\n *         // Configure as a truthy value to enable the feature\n *         scheduleContext : {\n *             triggerEvent : 'hover',\n *             renderer     : (context, element) => {\n *                 element.innerText = '😎';\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * The contextual details are available in the {@link #property-context} property.\n *\n * **Note that the context is cleared upon change of {@link Scheduler.view.Scheduler#property-viewPreset}\n * such as when zooming in or out.**\n *\n * @extends Core/mixin/InstancePlugin\n * @inlineexample Scheduler/feature/ScheduleContext.js\n * @classtype scheduleContext\n * @feature\n */\nexport default class ScheduleContext extends InstancePlugin.mixin(Delayable) {\n    static get $name() {\n        return 'ScheduleContext';\n    }\n\n    static delayable = {\n        syncContextElement : 'raf'\n    }\n\n    static configurable = {\n        /**\n         * The pointer event type to use to update the context. May be `'hover'` to highlight the\n         * tick context when moving the mouse across the timeline.\n         * @config {'click'|'hover'|'contextmenu'|'mousedown'}\n         * @default\n         */\n        triggerEvent : 'click',\n\n        /**\n         * A function (or the name of a function) which may mutate the contents of the context overlay\n         * element which tracks the active resource/tick context.\n         * @config {String|Function}\n         * @param {TimelineContext} context The context being highlighted.\n         * @param {HTMLElement} element The context highlight element. This will be empty each time.\n         */\n        renderer : null,\n\n        /**\n         * The active context.\n         * @member {TimelineContext} timelineContext\n         * @readonly\n         */\n        context : {\n            $config : {\n                // Reject non-changes so that when using mousemove, we only update the context\n                // when it changes.\n                equal(c1, c2) {\n                    return c1?.index === c2?.index &&\n                        c1?.tickParentIndex === c2?.tickParentIndex &&\n                        !((c1?.tickStartDate || 0) - (c2?.tickStartDate || 0));\n                }\n            }\n        }\n    }\n\n    /**\n     * The contextual information about which cell was clicked on and highlighted.\n     *\n     * When the {@link Scheduler.view.Scheduler#property-viewPreset} is changed (such as when zooming)\n     * the context is cleared and the highlight is removed.\n     *\n     * @member {Object} context\n     * @property {Scheduler.view.TimelineBase} context.source The owning Scheduler\n     * @property {Date} context.date Date at mouse position\n     * @property {Scheduler.model.TimeSpan} context.tick A record which encapsulates the time axis tick clicked on.\n     * @property {Number} context.tickIndex The index of the time axis tick clicked on.\n     * @property {Date} context.tickStartDate The start date of the current time axis tick\n     * @property {Date} context.tickEndDate The end date of the current time axis tick\n     * @property {Grid.row.Row} context.row Clicked row (in horizontal mode only)\n     * @property {Number} context.index Index of clicked resource\n     * @property {Scheduler.model.ResourceModel} context.resourceRecord Resource record\n     * @property {MouseEvent} context.event Browser event\n     */\n\n    construct(client, config) {\n        super.construct(client, config);\n\n        const\n            { triggerEvent } = this,\n            listeners        = {\n                datachange              : 'syncContextElement',\n                timeaxisviewmodelupdate : 'onTimeAxisViewModelUpdate',\n                presetchange            : 'clearContext',\n                thisObj                 : this\n            };\n\n        // If mousemove is our trigger, we cab use the client's timelineContextChange event\n        if (triggerEvent === 'mouseover') {\n            listeners.timelineContextChange = 'onTimelineContextChange';\n        }\n        // Otherwise, we have to listen for the required events on Schedule and events\n        else {\n            // Context menu will be expected to update the context if click or mousedown\n            // is the triggerEvent. Context menu is a mousedown gesture.\n            if (triggerEvent === 'click' || triggerEvent === 'mousedown') {\n                listeners.schedulecontextmenu = 'onScheduleContextGesture';\n            }\n\n            Object.assign(listeners, {\n                [`schedule${triggerEvent}`] : 'onScheduleContextGesture',\n                [`event${triggerEvent}`]    : 'onScheduleContextGesture',\n                ...listeners\n            });\n        }\n\n        // required to work\n        client.useBackgroundCanvas = true;\n\n        client.ion(listeners);\n        client.rowManager.ion({\n            rowheight : 'syncContextElement',\n            thisObj   : this\n        });\n    }\n\n    changeTriggerEvent(triggerEvent) {\n        // Both these things should route through to using the client's timelineContextChange event\n        if (triggerEvent === 'hover' || triggerEvent === 'mousemove') {\n            triggerEvent = 'mouseover';\n        }\n        return triggerEvent;\n    }\n\n    get element() {\n        return this._element || (this._element = DomHelper.createElement({\n            parent    : this.client.backgroundCanvas,\n            className : 'b-schedule-selected-tick'\n        }));\n    }\n\n    // Handle the Client's own timelineContextChange event which it maintains on mousemove\n    onTimelineContextChange({ context }) {\n        this.context = context;\n    }\n\n    // Handle the scheduleclick or eventclick Scheduler events if we re not using mouseover\n    onScheduleContextGesture(context) {\n        this.context = context;\n    }\n\n    onTimeAxisViewModelUpdate({ source : timeAxisViewModel }) {\n        // Just a mutation of existing tick details, sync the element\n        if (timeAxisViewModel.timeAxis.includes(this.context?.tick)) {\n            this.syncContextElement();\n        }\n        // The tick has gone, we have moved to a new ViewPreset, so clear the context.\n        else {\n            this.clearContext();\n        }\n    }\n\n    clearContext() {\n        this.context = null;\n    }\n\n    updateContext(context, oldContext) {\n        this.syncContextElement();\n    }\n\n    syncContextElement() {\n        if (this.context && this.enabled) {\n            const\n                me  = this,\n                {\n                    client,\n                    element,\n                    context,\n                    renderer\n                }   = me,\n                {\n                    isVertical\n                }   = client,\n                {\n                    style\n                }   = element,\n                row = isVertical ? client.rowManager.rows[0] : client.getRowFor(context.resourceRecord);\n\n            if (row) {\n                const\n                    {\n                        tickStartDate,\n                        tickEndDate,\n                        resourceRecord\n                    } = context,\n                    // get the position clicked based on dates\n                    renderData = client.currentOrientation.getTimeSpanRenderData({\n                        startDate   : tickStartDate,\n                        endDate     : tickEndDate,\n                        startDateMS : tickStartDate.getTime(),\n                        endDateMS   : tickEndDate.getTime()\n                    }, resourceRecord);\n\n                let top, width, height;\n\n                if (isVertical) {\n                    top = renderData.top;\n                    width = renderData.resourceWidth;\n                    height = renderData.height;\n                }\n                else {\n                    top = row.top;\n                    width = renderData.width;\n                    height = row.height;\n                }\n\n                // Move to current cell\n                style.display = '';\n                style.width = `${width}px`;\n                style.height = `${height}px`;\n                DomHelper.setTranslateXY(element, renderData.left, top);\n\n                // In case we updated on a datachange action : 'remove' or 'add' event.\n                context.index = row.index;\n\n                // Undo any contents added by the renderer last time round.\n                element.innerHTML = '';\n\n                // Show the context and the element to the renderer\n                renderer && me.callback(renderer, me, [context, element]);\n            }\n            // No row for resource might mean it's scrolled out of view or filtered out\n            // so just hide so that the next valid sync can restore it to visibility\n            else {\n                style.display = 'none';\n            }\n        }\n        else {\n            this.element.style.display = 'none';\n        }\n    }\n}\n\nScheduleContext.featureClass = 'b-scheduler-context';\n\nGridFeatureManager.registerFeature(ScheduleContext, false, ['Scheduler']);\n","import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport './ScheduleContext.js';\n\n/**\n * @module Scheduler/feature/EventCopyPaste\n */\n\n/**\n * Allow using [Ctrl/CMD + C/X] and [Ctrl/CMD + V] to copy/cut and paste events.\n *\n * This feature also adds entries to the {@link Scheduler/feature/EventMenu} for copying & cutting (see example below\n * for how to configure) and to the {@link Scheduler/feature/ScheduleMenu} for pasting.\n *\n * You can configure how a newly pasted record is named using {@link #function-generateNewName}.\n *\n * {@inlineexample Scheduler/feature/EventCopyPaste.js}\n *\n * If you want to highlight the paste location when clicking in the schedule, consider enabling the\n * {@link Scheduler/feature/ScheduleContext} feature.\n *\n * <div class=\"note\">When used with Scheduler Pro, pasting will bypass any constraint set on the event to allow the\n * copy to be assigned the targeted date.</div>\n *\n * This feature is **enabled** by default.\n *\n * ## Customize menu items\n *\n * See {@link Scheduler/feature/EventMenu} and {@link Scheduler/feature/ScheduleMenu} for more info on customizing the\n * menu items supplied by the feature. This snippet illustrates the concept:\n *\n * ```javascript\n * // Custom copy text + remove cut option from event menu:\n * const scheduler = new Scheduler({\n *     features : {\n *         eventMenu : {\n *             items : {\n *                 copyEvent : {\n *                     text : 'Copy booking'\n *                 },\n *                 cutEvent  : false\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * ## Keyboard shortcuts\n *\n * The feature has the following default keyboard shortcuts:\n *\n * | Keys   | Action | Action description                                |\n * |--------|--------|---------------------------------------------------|\n * | Ctrl+C | copy   | Copies selected event(s) into the clipboard.      |\n * | Ctrl+X | cut    | Cuts out selected event(s) into the clipboard.    |\n * | Ctrl+V | paste  | Insert copied or cut event(s) from the clipboard. |\n *\n * For more information on how to customize keyboard shortcuts, please see\n * [our guide](#Scheduler/guides/customization/keymap.md).\n *\n * ## Multi assigned events\n *\n * In a Scheduler that uses single assignment, copying and then pasting creates a clone of the event and assigns it\n * to the target resource. Cutting and pasting moves the original event to the target resource.\n *\n * In a Scheduler using multi assignment, the behaviour is slightly more complex. Cutting and pasting reassigns the\n * event to the target, keeping other assignments of the same event intact. The behaviour for copying and pasting is\n * configurable using the {@link #config-copyPasteAction} config. It accepts two values:\n *\n * * `'clone'` - The default, the event is cloned and the clone is assigned to the target resource. Very similar to the\n *   behaviour with single assignment (event count goes up by 1).\n * * `'assign'` - The original event is assigned to the target resource (event count is unaffected).\n *\n * This snippet shows how to reconfigure it:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     features : {\n *         eventCopyPaste : {\n *             copyPasteAction : 'assign'\n *         }\n *     }\n * });\n * ```\n *\n * <div class=\"note\">Copying multiple assignments of the same event will always result in all but the first assignment\n * being removed on paste, since paste targets a single resource and an event can only be assigned to a resource once.\n * </div>\n *\n * @extends Core/mixin/InstancePlugin\n * @classtype eventCopyPaste\n * @feature\n */\n\nexport default class EventCopyPaste extends InstancePlugin {\n    static $name = 'EventCopyPaste';\n\n    static pluginConfig = {\n        assign : [\n            'copyEvents',\n            'pasteEvents'\n        ],\n        chain : [\n            'populateEventMenu',\n            'populateScheduleMenu',\n            'onEventDataGenerated'\n        ]\n    };\n\n    static configurable = {\n        /**\n         * The field to use as the name field when updating the name of copied records\n         * @config {String}\n         * @default\n         */\n        nameField : 'name',\n\n        /**\n         * See {@link #keyboard-shortcuts Keyboard shortcuts} for details\n         * @config {Object<String,String>}\n         */\n        keyMap : {\n            'Ctrl+C' : 'copy',\n            'Ctrl+X' : 'cut',\n            'Ctrl+V' : 'paste'\n        },\n\n        /**\n         * How to handle a copy paste operation when the host uses multi assignment. Either:\n         *\n         * - `'clone'`  - The default, clone the copied event, assigning the clone to the target resource.\n         * - `'assign'` - Add an assignment for the existing event to the target resource.\n         *\n         * For single assignment mode, it always uses the `'clone'` behaviour.\n         *\n         * @config {'clone'|'assign'}\n         * @default\n         */\n        copyPasteAction : 'clone'\n    };\n\n    clipboardRecords = [];\n\n    construct(scheduler, config) {\n        super.construct(scheduler, config);\n\n        scheduler.ion({\n            eventclick    : this.onEventClick,\n            scheduleclick : this.onScheduleClick,\n            projectChange : () => {\n                this.clearClipboard();\n                this._cellClickedContext = null;\n            },\n            thisObj : this\n        });\n\n        this.scheduler = scheduler;\n    }\n\n    // Used in events to separate events from different features from each other\n    entityName = 'event';\n\n    onEventDataGenerated(eventData) {\n        const { assignmentRecord } = eventData;\n\n        // No assignmentRecord for resource time ranges, which we want to ignore anyway\n        if (assignmentRecord) {\n            eventData.cls['b-cut-item'] = assignmentRecord.meta.isCut;\n        }\n    }\n\n    onEventClick(context) {\n        this._cellClickedContext = null;\n    }\n\n    onScheduleClick(context) {\n        this._cellClickedContext = context;\n    }\n\n    isActionAvailable(keyCombination, action, event) {\n        const cellEdit = this.client.features.cellEdit;\n\n        // No action if\n        // 1. there is selected text on the page\n        // 2. cell editing is active\n        // 3. cursor is not in the grid (filter bar etc)\n        // 4. focus is on specialrow\n        return !this.disabled &&\n            globalThis.getSelection().toString().length === 0 &&\n            !cellEdit?.isEditing &&\n            Boolean(event.target.closest('.b-timeaxissubgrid')) &&\n            !this.client.focusedCell?.isSpecialRow;\n    }\n\n    copy() {\n        this.copyEvents();\n    }\n\n    cut() {\n        this.copyEvents(undefined, true);\n    }\n\n    paste() {\n        this.pasteEvents();\n    }\n\n    /**\n     * Copy events (when using single assignment mode) or assignments (when using multi assignment mode) to clipboard to\n     * paste later\n     * @fires beforeCopy\n     * @fires copy\n     * @param {Scheduler.model.EventModel[]|Scheduler.model.AssignmentModel[]} [records] Pass records to copy them,\n     * leave out to copying current selection\n     * @param {Boolean} [isCut] Copies by default, pass `true` to cut instead\n     * @category Edit\n     */\n    copyEvents(records = this.scheduler.selectedAssignments, isCut = false) {\n        const\n            me                        = this,\n            { scheduler, entityName } = me;\n\n        if (!records?.length) {\n            return;\n        }\n\n        let assignmentRecords = records.slice(); // Slice to not lose records if selection changes\n\n        if (records[0].isEventModel) {\n            assignmentRecords = records.map(r => r.assignments).flat();\n        }\n\n        // Prevent cutting readOnly events\n        if (isCut) {\n            assignmentRecords = assignmentRecords.filter(a => !a.event.readOnly);\n        }\n\n        const eventRecords = assignmentRecords.map(a => a.event);\n\n        /**\n         * Fires on the owning Scheduler before a copy action is performed, return `false` to prevent the action\n         * @event beforeCopy\n         * @preventable\n         * @on-owner\n         * @param {Scheduler.view.Scheduler} source Owner scheduler\n         * @param {Scheduler.model.EventModel[]} records Deprecated, will be removed in 6.0. Use eventRecords instead.\n         * @param {Scheduler.model.EventModel[]} eventRecords The event records about to be copied\n         * @param {Scheduler.model.AssignmentModel[]} assignmentRecords The assignment records about to be copied\n         * @param {Boolean} isCut `true` if this is a cut action\n         * @param {String} entityName 'event' to distinguish this event from other beforeCopy events\n         */\n        if (!assignmentRecords.length || scheduler.readOnly || scheduler.trigger('beforeCopy', {\n            assignmentRecords, records : eventRecords, eventRecords, isCut, entityName\n        }) === false) {\n            return;\n        }\n\n        /**\n         * Fires on the owning Scheduler after a copy action is performed.\n         * @event copy\n         * @on-owner\n         * @param {Scheduler.view.Scheduler} source Owner scheduler\n         * @param {Scheduler.model.EventModel[]} eventRecords The event records that were copied\n         * @param {Scheduler.model.AssignmentModel[]} assignmentRecords The assignment records that were copied\n         * @param {Boolean} isCut `true` if this is a cut action\n         * @param {String} entityName 'event' to distinguish this event from other copy events\n         */\n        if (assignmentRecords.length > 0) {\n            scheduler.trigger('copy', { assignmentRecords, eventRecords, isCut, entityName });\n        }\n\n        me._isCut    = isCut;\n        // records is used when call comes from context menu where the current event is the context\n        me.clipboard = { assignmentRecords, eventRecords };\n\n        scheduler.assignmentStore.forEach(assignment => {\n            assignment.meta.isCut = isCut && assignmentRecords.includes(assignment);\n        });\n\n        // refresh to call onEventDataGenerated and reapply the cls for records where the cut was canceled\n        scheduler.refreshWithTransition();\n    }\n\n    /**\n     * Paste events or assignments to specified date and resource\n     * @fires beforePaste\n     * @fires paste\n     * @param {Date} [date] Date where the events or assignments will be pasted\n     * @param {Scheduler.model.ResourceModel} [resourceRecord] Resource to assign the pasted events or assignments to\n     * @category Edit\n     */\n    pasteEvents(date, resourceRecord) {\n        const\n            me                                   = this,\n            { clipboard, scheduler, entityName } = me,\n            { assignmentRecords, eventRecords }  = clipboard,\n            isCut                                = me._isCut;\n\n        if (arguments.length === 0) {\n            const context  = me._cellClickedContext || {};\n            date           = context.date;\n            resourceRecord = context.resourceRecord;\n        }\n\n        if (resourceRecord) {\n            // No pasting to readOnly resources\n            if (resourceRecord.readOnly) {\n                return;\n            }\n\n            resourceRecord = resourceRecord.$original;\n        }\n\n        /**\n         * Fires on the owning Scheduler before a paste action is performed, return `false` to prevent the action\n         * @event beforePaste\n         * @preventable\n         * @on-owner\n         * @param {Scheduler.view.Scheduler} source Owner scheduler\n         * @param {Scheduler.model.EventModel[]} records Deprecated, will be removed in 6.0. Use eventRecords instead.\n         * @param {Scheduler.model.EventModel[]} eventRecords The events about to be pasted\n         * @param {Scheduler.model.AssignmentModel[]} assignmentRecords The assignments about to be pasted\n         * @param {Date} date The date when the pasted events will be scheduled\n         * @param {Scheduler.model.ResourceModel} resourceRecord The target resource record, the clipboard\n         * event records will be assigned to this resource.\n         * @param {Boolean} isCut `true` if this is a cut action\n         * @param {String} entityName 'event' to distinguish this event from other beforePaste events\n         */\n\n        if (\n            !clipboard ||\n            scheduler.trigger('beforePaste',\n                {\n                    assignmentRecords,\n                    records        : eventRecords,\n                    eventRecords,\n                    resourceRecord : resourceRecord || assignmentRecords[0].resource,\n                    date,\n                    isCut,\n                    entityName\n                }) === false\n        ) {\n            return;\n        }\n\n        let toFocus = null;\n\n        const pastedEvents = new Set();\n\n        for (const assignmentRecord of assignmentRecords) {\n            let { event }            = assignmentRecord;\n            const\n                targetResourceRecord = resourceRecord || assignmentRecord.resource,\n                targetDate           = date || assignmentRecord.event.startDate;\n\n            // Pasting targets a specific resource, we cannot have multiple assignments to the same so remove all but\n            // the first (happens when pasting multiple assignments of the same event)\n            if (pastedEvents.has(event)) {\n                if (isCut) {\n                    assignmentRecord.remove();\n                }\n                continue;\n            }\n\n            pastedEvents.add(event);\n\n            // Cut always means reassign\n            if (isCut) {\n                assignmentRecord.meta.isCut = false;\n                assignmentRecord.resource   = targetResourceRecord;\n                toFocus                     = assignmentRecord;\n            }\n            // Copy creates a new event in single assignment, or when configured to copy\n            else if (scheduler.eventStore.usesSingleAssignment || me.copyPasteAction === 'clone') {\n                event      = event.copy();\n                event.name = me.generateNewName(event);\n                scheduler.eventStore.add(event);\n                event.assign(targetResourceRecord);\n                toFocus = scheduler.assignmentStore.last;\n            }\n            // Safeguard against pasting on a resource where the event is already assigned,\n            // a new assignment in multiassign mode will only change the date in such case\n            else if (!event.resources.includes(targetResourceRecord)) {\n                const newAssignmentRecord    = assignmentRecord.copy();\n                newAssignmentRecord.resource = targetResourceRecord;\n                [toFocus]                    = scheduler.assignmentStore.add(newAssignmentRecord);\n            }\n\n            event.startDate = targetDate;\n\n            // Pro specific, to allow event to appear where pasted\n            if (event.constraintDate) {\n                event.constraintDate = null;\n            }\n        }\n\n        /**\n         * Fires on the owning Scheduler after a paste action is performed.\n         * @event paste\n         * @on-owner\n         * @param {Scheduler.view.Scheduler} source Owner scheduler\n         * @param {Scheduler.model.EventModel[]} eventRecords Pasted events\n         * @param {Scheduler.model.AssignmentModel[]} assignmentRecords Pasted assignments\n         * @param {Date} date date Pasted to this date\n         * @param {Scheduler.model.ResourceModel} resourceRecord The target resource record\n         * @param {Boolean} isCut `true` if this is a cut action\n         * @param {String} entityName 'event' to distinguish this event from other paste events\n         */\n        if (clipboard) {\n            scheduler.trigger('paste', { assignmentRecords, eventRecords, resourceRecord, date, isCut, entityName });\n        }\n\n        // Focus the last pasted assignment\n        const detacher = scheduler.ion({\n            renderEvent({ assignmentRecord }) {\n                if (assignmentRecord === toFocus) {\n                    scheduler.navigateTo(assignmentRecord, { scrollIntoView : false });\n                    detacher();\n                }\n            }\n        });\n\n        if (isCut) {\n            me.clearClipboard();\n        }\n    }\n\n    /**\n     * Clears the clipboard and refreshes the UI\n     */\n    clearClipboard() {\n        const me = this;\n        if (me._isCut) {\n            me.clipboard.assignmentRecords.forEach(assignment => {\n                assignment.meta.isCut = false;\n            });\n            me.scheduler.refreshWithTransition();\n            me._isCut = false;\n        }\n        // reset clipboard\n        me.clipboard = null;\n    }\n\n    populateEventMenu({ assignmentRecord, items }) {\n        const me = this;\n\n        if (!me.scheduler.readOnly) {\n            items.copyEvent = {\n                text        : 'L{copyEvent}',\n                localeClass : me,\n                icon        : 'b-icon b-icon-copy',\n                weight      : 110,\n                onItem      : () => me.copyEvents([assignmentRecord].concat(me.scheduler.selectedAssignments.filter(rec => rec !== assignmentRecord)))\n            };\n\n            items.cutEvent = {\n                text        : 'L{cutEvent}',\n                localeClass : me,\n                icon        : 'b-icon b-icon-cut',\n                weight      : 120,\n                disabled    : assignmentRecord.event.readOnly,\n                onItem      : () => me.copyEvents([assignmentRecord].concat(me.scheduler.selectedAssignments.filter(rec => rec !== assignmentRecord)), true)\n            };\n        }\n    }\n\n    populateScheduleMenu({ items, resourceRecord }) {\n        const\n            me            = this,\n            { scheduler } = me;\n\n        if (!scheduler.readOnly && me.clipboard) {\n            items.pasteEvent = {\n                text        : 'L{pasteEvent}',\n                localeClass : me,\n                icon        : 'b-icon b-icon-paste',\n                disabled    : scheduler.resourceStore.count === 0 || resourceRecord.readOnly,\n                weight      : 110,\n                onItem      : ({ date, resourceRecord }) => me.pasteEvents(date, resourceRecord, scheduler.getRowFor(resourceRecord))\n            };\n        }\n    }\n\n    /**\n     * A method used to generate the name for a copy pasted record. By defaults appends \"- 2\", \"- 3\" as a suffix.\n     *\n     * @param {Scheduler.model.EventModel} eventRecord The new eventRecord being pasted\n     * @returns {String}\n     */\n    generateNewName(eventRecord) {\n        const originalName = eventRecord[this.nameField];\n\n        let counter = 2;\n\n        while (this.client.eventStore.findRecord(this.nameField, `${originalName} - ${counter}`)) {\n            counter++;\n        }\n\n        return `${originalName} - ${counter}`;\n    }\n}\n\nEventCopyPaste.featureClass = 'b-event-copypaste';\n\nGridFeatureManager.registerFeature(EventCopyPaste, true, 'Scheduler');\n","/* eslint-disable no-unused-expressions */\nimport DragBase from './base/DragBase.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport DomSync from '../../Core/helper/DomSync.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport EventHelper from '../../Core/helper/EventHelper.js';\n\n/**\n * @module Scheduler/feature/EventDrag\n */\n\n/**\n * Allows user to drag and drop events within the scheduler, to change startDate or resource assignment.\n *\n * This feature is **enabled** by default\n *\n * ## Customizing the drag drop tooltip\n *\n * To show custom HTML in the tooltip, please see the {@link #config-tooltipTemplate} config. Example:\n *\n * ```javascript\n * features: {\n *     eventDrag : {\n *         // A minimal start date tooltip\n *         tooltipTemplate : ({ eventRecord, startDate }) => {\n *             return DateHelper.format(startDate, 'HH:mm');\n *         }\n *     }\n * }\n * ```\n *\n * ## Constraining the drag drop area\n *\n * You can constrain how the dragged event is allowed to move by using the following configs\n * * {@link #config-constrainDragToResource} Resource fixed, only allowed to change start date\n * * {@link #config-constrainDragToTimeSlot} Start date is fixed, only move between resources\n * * {@link Scheduler.view.Scheduler#config-getDateConstraints} A method on the Scheduler instance\n *    which lets you define the date range for the dragged event programmatically\n *\n * ```js\n * // Enable dragging + constrain drag to current resource\n * const scheduler = new Scheduler({\n *     features : {\n *         eventDrag : {\n *             constrainDragToResource : true\n *         }\n *     }\n * });\n * ```\n * ## Drag drop events from outside\n *\n * Dragging unplanned events from an external grid is a very popular use case. There are\n * several demos showing you how to do this. Please see the [Drag from grid demo](../examples/dragfromgrid)\n * and study the **Drag from grid guide** to learn more.\n *\n * ## Drag drop events to outside target\n *\n * You can also drag events outside the schedule area by setting {@link #config-constrainDragToTimeline} to `false`. You\n * should also either:\n * * provide a {@link #config-validatorFn} to programmatically define if a drop location is valid or not\n * * configure a {@link #config-externalDropTargetSelector} CSS selector to define where drops are allowed\n *\n * See [this demo](../examples/drag-outside) to see this in action.\n *\n * ## Validating drag drop\n *\n * It is easy to programmatically decide what is a valid drag drop operation. Use the {@link #config-validatorFn}\n * and return either `true` / `false` (optionally a message to show to the user).\n *\n * ```javascript\n * features : {\n *     eventDrag : {\n *        validatorFn({ eventRecords, newResource }) {\n *            const task  = eventRecords[0],\n *                  valid = newResource.role === task.resource.role;\n *\n *            return {\n *                valid   : newResource.role === task.resource.role,\n *                message : valid ? '' : 'Resource role does not match required role for this task'\n *            };\n *        }\n *     }\n * }\n * ```\n * See [this demo](../examples/validation) to see validation in action.\n *\n * If you instead want to do a single validation upon drop, you can listen to {@link #event-beforeEventDropFinalize}\n * and set the `valid` flag on the context object provided.\n *\n * ```javascript\n *   const scheduler = new Scheduler({\n *      listeners : {\n *          beforeEventDropFinalize({ context }) {\n *              const { eventRecords } = context;\n *              // Don't allow dropping events in the past\n *              context.valid = Date.now() <= eventRecords[0].startDate;\n *          }\n *      }\n *  });\n * ```\n *\n * ## Preventing drag of certain events\n *\n * To prevent certain events from being dragged, you have two options. You can set {@link Scheduler.model.EventModel#field-draggable}\n * to `false` in your data, or you can listen for the {@link Scheduler.view.Scheduler#event-beforeEventDrag} event and\n * return `false` to block the drag.\n *\n * ```javascript\n * new Scheduler({\n *    listeners : {\n *        beforeEventDrag({ eventRecord }) {\n *            // Don't allow dragging events that have already started\n *            return Date.now() <= eventRecord.startDate;\n *        }\n *    }\n * })\n * ```\n *\n * @extends Scheduler/feature/base/DragBase\n * @demo Scheduler/basic\n * @inlineexample Scheduler/feature/EventDrag.js\n * @classtype eventDrag\n * @feature\n */\nexport default class EventDrag extends DragBase {\n    //region Config\n\n    static get $name() {\n        return 'EventDrag';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Template used to generate drag tooltip contents.\n             * ```javascript\n             * const scheduler = new Scheduler({\n             *     features : {\n             *         eventDrag : {\n             *             dragTipTemplate({eventRecord, startText}) {\n             *                 return `${eventRecord.name}: ${startText}`\n             *             }\n             *         }\n             *     }\n             * });\n             * ```\n             * @config {Function} tooltipTemplate\n             * @param {Object} data Tooltip data\n             * @param {Scheduler.model.EventModel} data.eventRecord\n             * @param {Boolean} data.valid Currently over a valid drop target or not\n             * @param {Date} data.startDate New start date\n             * @param {Date} data.endDate New end date\n             * @returns {String}\n             */\n\n            /**\n             * Set to true to only allow dragging events within the same resource.\n             * @member {Boolean} constrainDragToResource\n             */\n            /**\n             * Set to true to only allow dragging events within the same resource.\n             * @config {Boolean}\n             * @default\n             */\n            constrainDragToResource : false,\n\n            /**\n             * Set to true to only allow dragging events to different resources, and disallow rescheduling by dragging.\n             * @member {Boolean} constrainDragToTimeSlot\n             */\n            /**\n             * Set to true to only allow dragging events to different resources, and disallow rescheduling by dragging.\n             * @config {Boolean}\n             * @default\n             */\n            constrainDragToTimeSlot : false,\n\n            /**\n             * A CSS selector specifying elements outside the scheduler element which are valid drop targets.\n             * @config {String}\n             */\n            externalDropTargetSelector : null,\n\n            /**\n             * An empty function by default, but provided so that you can perform custom validation on the item being\n             * dragged. This function is called during the drag and drop process and also after the drop is made.\n             * Return `true` if the new position is valid, `false` to prevent the drag.\n             *\n             * ```javascript\n             * features : {\n             *     eventDrag : {\n             *         validatorFn({ eventRecords, newResource }) {\n             *             const\n             *                 task  = eventRecords[0],\n             *                 valid = newResource.role === task.resource.role;\n             *\n             *             return {\n             *                 valid   : newResource.role === task.resource.role,\n             *                 message : valid ? '' : 'Resource role does not match required role for this task'\n             *             };\n             *         }\n             *     }\n             * }\n             * ```\n             * @param {Object} context A drag drop context object\n             * @param {Date} context.startDate New start date\n             * @param {Date} context.endDate New end date\n             * @param {Scheduler.model.AssignmentModel[]} context.assignmentRecords Assignment records which were dragged\n             * @param {Scheduler.model.EventModel[]} context.eventRecords Event records which were dragged\n             * @param {Scheduler.model.ResourceModel} context.newResource New resource record\n             * @param {Scheduler.model.EventModel} context.targetEventRecord Currently hovering this event record\n             * @param {Event} event The event object\n             * @returns {Boolean|Object} `true` if this validation passes, `false` if it does not.\n             *\n             * Or an object with 2 properties: `valid` -  Boolean `true`/`false` depending on validity,\n             * and `message` - String with a custom error message to display when invalid.\n             * @config {Function}\n             */\n            validatorFn : () => {},\n\n            /**\n             * The `this` reference for the validatorFn\n             * @config {Object}\n             */\n            validatorFnThisObj : null,\n\n            /**\n             * When the host Scheduler is `{@link Scheduler.view.mixin.EventSelection#config-multiEventSelect}: true`\n             * then, there are two modes of dragging *within the same Scheduler*.\n             *\n             * Non unified means that all selected events are dragged by the same number of resource rows.\n             *\n             * Unified means that all selected events are collected together and dragged as one, and are all dropped\n             * on the same targeted resource row at the same targeted time.\n             * @member {Boolean} unifiedDrag\n             */\n            /**\n             * When the host Scheduler is `{@link Scheduler.view.mixin.EventSelection#config-multiEventSelect}: true`\n             * then, there are two modes of dragging *within the same Scheduler*.\n             *\n             * Non unified means that all selected events are dragged by the same number of resource rows.\n             *\n             * Unified means that all selected events are collected together and dragged as one, and are all dropped\n             * on the same targeted resource row at the same targeted time.\n             * @config {Boolean}\n             * @default false\n             */\n            unifiedDrag : null,\n\n            /**\n             * A hook that allows manipulating the position the drag proxy snaps to. Manipulate the `snapTo` property\n             * to alter snap position.\n             *\n             * ```javascript\n             * const scheduler = new Scheduler({\n             *     features : {\n             *         eventDrag : {\n             *             snapToPosition({ eventRecord, snapTo }) {\n             *                 if (eventRecord.late) {\n             *                     snapTo.x = 400;\n             *                 }\n             *             }\n             *         }\n             *     }\n             * });\n             * ```\n             *\n             * @config {Function}\n             * @param {Object} context\n             * @param {Scheduler.model.AssignmentModel} context.assignmentRecord Dragged assignment\n             * @param {Scheduler.model.EventModel} context.eventRecord Dragged event\n             * @param {Scheduler.model.ResourceModel} context.resourceRecord Currently over this resource\n             * @param {Date} context.startDate Start date for current position\n             * @param {Date} context.endDate End date for current position\n             * @param {Object} context.snapTo\n             * @param {Number} context.snapTo.x X to snap to\n             * @param {Number} context.snapTo.y Y to snap to\n             */\n            snapToPosition : null,\n\n            /**\n             * A modifier key (CTRL, SHIFT, ALT, META) that when pressed will copy an event instead of moving it. Set to\n             * empty string to disable copying\n             * @prp {'CTRL'|'ALT'|'SHIFT'|'META'|''}\n             * @default\n             */\n            copyKey : 'SHIFT',\n\n            /**\n             * Event can be copied two ways: either by adding new assignment to an existing event ('assignment'), or\n             * by copying the event itself ('event'). 'auto' mode will pick 'event' for a single-assignment mode (when\n             * event has `resourceId` field) and 'assignment' mode otherwise.\n             * @prp {'auto'|'assignment'|'event'}\n             * @default\n             */\n            copyMode : 'auto',\n\n            /**\n             * Mode of the current drag drop operation.\n             * @member {'move'|'copy'}\n             * @readonly\n             */\n            mode : 'move',\n\n            capitalizedEventName : null\n        };\n    }\n\n    afterConstruct() {\n        this.capitalizedEventName = this.capitalizedEventName || this.client.capitalizedEventName;\n        super.afterConstruct(...arguments);\n    }\n\n    //endregion\n\n    changeMode(value) {\n        const { dragData, copyMode } = this;\n\n        // Do not create assignments in case scheduler doesn't use multiple assignments\n        // Do not allow to copy recurring events\n        if (\n            (copyMode === 'event' || copyMode === 'auto' ||\n                copyMode === 'assignment' && !this.scheduler.eventStore.usesSingleAssignment) &&\n            (!dragData || dragData.eventRecords.every(r => !r.isRecurring))\n        ) {\n            return value;\n        }\n    }\n\n    updateMode(mode) {\n        if (this.dragData) {\n            if (mode === 'copy') {\n                this.setCopying();\n            }\n            else {\n                this.setMoving();\n            }\n\n            /**\n             * Triggered when drag mode is changed, for example when copy key is\n             * pressed or released while dragging.\n             * @event eventDragModeChange\n             * @param {String} mode Drag mode, could be either 'move', 'copy', or 'auto'\n             * @on-owner\n             */\n            this.client.trigger('eventDragModeChange', { mode });\n        }\n    }\n\n    setCopying() {\n        const { dragData } = this;\n\n        if (!dragData) {\n            return;\n        }\n\n        // Check if proxies are added to the DOM by checking if any of them is\n        if (!dragData.eventBarCopies.some(el => el.isConnected)) {\n            dragData.eventBarCopies.forEach(el => {\n                el.classList.add('b-drag-proxy-copy');\n                // hidden class can be added by the drag feature if we're dragging event outside\n                el.classList.remove('b-hidden');\n\n                dragData.context.grabbedParent.appendChild(el);\n                // Mark this node as ignored for the DomSync\n                el.retainElement = true;\n            });\n        }\n        else {\n            dragData.eventBarCopies.forEach(el => {\n                el.classList.remove('b-hidden');\n            });\n        }\n    }\n\n    setMoving() {\n        const { dragData } = this;\n\n        if (!dragData) {\n            return;\n        }\n\n        dragData.eventBarCopies.forEach(el => {\n            el.classList.add('b-hidden');\n        });\n    }\n\n    //region Events\n\n    /**\n     * Fired on the owning Scheduler to allow implementer to use asynchronous finalization by setting `context.async = true`\n     * in the listener, to show a confirmation popup etc.\n     * ```javascript\n     *  scheduler.on('beforeeventdropfinalize', ({ context }) => {\n     *      context.async = true;\n     *      setTimeout(() => {\n     *          // async code don't forget to call finalize\n     *          context.finalize();\n     *      }, 1000);\n     *  })\n     * ```\n     *\n     * For synchronous one-time validation, simply set `context.valid` to true or false.\n     * ```javascript\n     *  scheduler.on('beforeeventdropfinalize', ({ context }) => {\n     *      context.valid = false;\n     *  })\n     * ```\n     * @event beforeEventDropFinalize\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source Scheduler instance\n     * @param {Object} context\n     * @param {Boolean} context.async Set true to not finalize the drag-drop operation immediately (e.g. to wait for user confirmation)\n     * @param {Scheduler.model.EventModel[]} context.eventRecords Event records being dragged\n     * @param {Scheduler.model.AssignmentModel[]} context.assignmentRecords Assignment records being dragged\n     * @param {Scheduler.model.EventModel} context.targetEventRecord Event record for drop target\n     * @param {Scheduler.model.ResourceModel} context.newResource Resource record for drop target\n     * @param {Boolean} context.valid Set this to `false` to abort the drop immediately.\n     * @param {Function} context.finalize Call this method after an **async** finalization flow, to finalize the drag-drop operation. This method accepts one\n     * argument: pass `true` to update records, or `false` to ignore changes\n     * @param {MouseEvent} domEvent Browser event\n     */\n\n    /**\n     * Fired on the owning Scheduler after event drop\n     * @event afterEventDrop\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source\n     * @param {Scheduler.model.AssignmentModel[]} assignmentRecords\n     * @param {Scheduler.model.EventModel[]} eventRecords\n     * @param {Boolean} valid\n     * @param {Object} context\n     * @param {MouseEvent} domEvent Browser event\n     */\n\n    /**\n     * Fired on the owning Scheduler when an event is dropped\n     * @event eventDrop\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source\n     * @param {Scheduler.model.EventModel[]} eventRecords\n     * @param {Scheduler.model.AssignmentModel[]} assignmentRecords\n     * @param {HTMLElement} externalDropTarget The HTML element dropped upon, if drop happened on a valid external drop target\n     * @param {Boolean} isCopy\n     * @param {Object} context\n     * @param {Scheduler.model.EventModel} context.targetEventRecord Event record for drop target\n     * @param {Scheduler.model.ResourceModel} context.newResource Resource record for drop target\n     * @param {MouseEvent} domEvent Browser event\n     */\n\n    /**\n     * Fired on the owning Scheduler before event dragging starts. Return `false` to prevent the action.\n     * @event beforeEventDrag\n     * @on-owner\n     * @preventable\n     * @param {Scheduler.view.Scheduler} source Scheduler instance\n     * @param {Scheduler.model.EventModel} eventRecord Event record the drag starts from\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record the drag starts from\n     * @param {Scheduler.model.EventModel[]} eventRecords Event records being dragged\n     * @param {Scheduler.model.AssignmentModel[]} assignmentRecords Assignment records being dragged\n     * @param {MouseEvent} event Browser event DEPRECATED (replaced by domEvent)\n     * @param {MouseEvent} domEvent Browser event\n     */\n\n    /**\n     * Fired on the owning Scheduler when event dragging starts\n     * @event eventDragStart\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source Scheduler instance\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record the drag starts from\n     * @param {Scheduler.model.EventModel[]} eventRecords Event records being dragged\n     * @param {Scheduler.model.AssignmentModel[]} assignmentRecords Assignment records being dragged\n     * @param {MouseEvent} event Browser event DEPRECATED (replaced by domEvent)\n     * @param {MouseEvent} domEvent Browser event\n     */\n\n    /**\n     * Fired on the owning Scheduler when event is dragged\n     * @event eventDrag\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source Scheduler instance\n     * @param {Scheduler.model.EventModel[]} eventRecords Event records being dragged\n     * @param {Scheduler.model.AssignmentModel[]} assignmentRecords Assignment records being dragged\n     * @param {Date} startDate Start date for the current location\n     * @param {Date} endDate End date for the current location\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record the drag started from\n     * @param {Scheduler.model.ResourceModel} newResource Resource at the current location\n     * @param {Object} context\n     * @param {Boolean} context.valid Set this to `false` to signal that the current drop position is invalid.\n     * @param {MouseEvent} domEvent Browser event\n     */\n\n    /**\n     * Fired on the owning Scheduler after an event drag operation has been aborted\n     * @event eventDragAbort\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source Scheduler instance\n     * @param {Scheduler.model.EventModel[]} eventRecords Event records being dragged\n     * @param {Scheduler.model.AssignmentModel[]} assignmentRecords Assignment records being dragged\n     * @param {MouseEvent} domEvent Browser event\n     */\n    /**\n     * Fired on the owning Scheduler after an event drag operation regardless of the operation being cancelled or not\n     * @event eventDragReset\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source Scheduler instance\n     */\n    //endregion\n\n    //region Data layer\n\n    // Deprecated. Use this.client instead\n    get scheduler() {\n        return this.client;\n    }\n\n    //endregion\n\n    //#region Drag lifecycle\n\n    onAfterDragStart(event) {\n        const\n            me                        = this,\n            { context : { element } } = event;\n\n        super.onAfterDragStart(event);\n\n        me.handleKeyDownOrMove(event.event);\n\n        me.keyEventDetacher = EventHelper.on({\n            // In case we drag event between scheduler focused event gets moved and focus\n            // moves to the body. We only need to read the key from this event\n            element : DomHelper.getRootElement(element),\n            keydown : me.handleKeyDownOrMove,\n            keyup   : me.handleKeyUp,\n            thisObj : me\n        });\n    }\n\n    onDragReset(event) {\n        super.onDragReset(event);\n\n        this.keyEventDetacher?.();\n\n        this.mode = 'move';\n    }\n\n    onDrop(event) {\n        // Always remove proxy on drop\n        this.dragData.eventBarCopies?.forEach(el => el.remove());\n\n        return super.onDrop(event);\n    }\n\n    //#endregion\n\n    //region Drag events\n\n    getDraggableElement(el) {\n        return el?.closest(this.drag.targetSelector);\n    }\n\n    resolveEventRecord(eventElement, client = this.client) {\n        return client.resolveEventRecord(eventElement);\n    }\n\n    isElementDraggable(el, event) {\n        const\n            me              = this,\n            { client }      = me,\n            eventElement    = me.getDraggableElement(el);\n\n        if (!eventElement || me.disabled || client.readOnly) {\n            return false;\n        }\n\n        // displaying something resizable within the event?\n        if (el.matches('[class$=\"-handle\"]')) {\n            return false;\n        }\n\n        const eventRecord = me.resolveEventRecord(eventElement, client);\n\n        if (!eventRecord || !eventRecord.isDraggable || eventRecord.readOnly) {\n            return false;\n        }\n\n        // Hook for features that need to prevent drag\n        const prevented = client[`is${me.capitalizedEventName}ElementDraggable`]?.(\n            eventElement, eventRecord, el, event\n        ) === false;\n\n        return !prevented;\n    }\n\n    getTriggerParams(dragData) {\n        const { assignmentRecords, eventRecords, resourceRecord, browserEvent: domEvent } = dragData;\n\n        return {\n            // `context` is now private, but used in WebSocketHelper\n            context : dragData,\n            eventRecords,\n            resourceRecord,\n            assignmentRecords,\n            event   : domEvent, // Deprecated, remove on  6.0?\n            domEvent\n        };\n    }\n\n    triggerBeforeEventDrag(eventType, event) {\n        return this.client.trigger(eventType, event);\n    }\n\n    triggerEventDrag(dragData, start) {\n        this.client.trigger('eventDrag', Object.assign(this.getTriggerParams(dragData), {\n            startDate   : dragData.startDate,\n            endDate     : dragData.endDate,\n            newResource : dragData.newResource\n        }));\n    }\n\n    triggerDragStart(dragData) {\n        this.client.navigator.skipNextClick = true;\n\n        this.client.trigger('eventDragStart', this.getTriggerParams(dragData));\n    }\n\n    triggerDragAbort(dragData) {\n        this.client.trigger('eventDragAbort', this.getTriggerParams(dragData));\n    }\n\n    triggerDragAbortFinalized(dragData) {\n        this.client.trigger('eventDragAbortFinalized', this.getTriggerParams(dragData));\n    }\n\n    triggerAfterDrop(dragData, valid) {\n        const me = this;\n\n        me.currentOverClient.trigger('afterEventDrop', Object.assign(me.getTriggerParams(dragData), {\n            valid\n        }));\n\n        if (!valid) {\n            // Edge cases:\n            // 1. If this drag was a no-op, and underlying data was changed while drag was ongoing (e.g. web socket\n            // push), we need to manually force a view refresh to ensure a correct render state\n            //\n            // or\n            // 2. Events were removed before we dropped at an invalid point\n            const\n                { assignmentStore, eventStore } = me.client,\n                needRefresh                     = me.dragData.initialAssignmentsState.find(({\n                    resource, assignment\n                }, i) => {\n                    return !assignmentStore.includes(assignment) ||\n                        !eventStore.includes(assignment.event) ||\n                        resource.id !== me.dragData.assignmentRecords[i]?.resourceId;\n                });\n\n            if (needRefresh) {\n                me.client.refresh();\n            }\n        }\n        // Reset the skipNextClick after a potential click event fires. https://github.com/bryntum/support/issues/5135\n        me.client.setTimeout(() => me.client.navigator.skipNextClick = false, 10);\n    }\n\n    handleKeyDownOrMove(event) {\n        if (this.mode !== 'copy') {\n            if (event.key && EventHelper.specialKeyFromEventKey(event.key) === this.copyKey.toLowerCase() || event[`${this.copyKey.toLowerCase()}Key`]) {\n                this.mode = 'copy';\n            }\n        }\n    }\n\n    handleKeyUp(event) {\n        if (EventHelper.specialKeyFromEventKey(event.key) === this.copyKey.toLowerCase()) {\n            this.mode = 'move';\n        }\n    }\n\n    //endregion\n\n    //region Finalization & validation\n\n    /**\n     * Checks if an event can be dropped on the specified position.\n     * @private\n     * @returns {Boolean} Valid (true) or invalid (false)\n     */\n    isValidDrop(dragData) {\n        const\n            { newResource, resourceRecord } = dragData,\n            sourceRecord                    = dragData.draggedEntities[0];\n\n        // Only allowed to drop outside scheduler element if we hit an element matching the externalDropTargetSelector\n        if (!newResource) {\n            return (!this.constrainDragToTimeline && this.externalDropTargetSelector) ? Boolean(dragData.browserEvent.target.closest(this.externalDropTargetSelector)) : false;\n        }\n\n        // Not allowed to drop an event on a group header or a readOnly resource\n        if (newResource.isSpecialRow || newResource.readOnly) {\n            return false;\n        }\n\n        // Not allowed to assign an event twice to the same resource\n        if (resourceRecord !== newResource) {\n            return !sourceRecord.event.resources.includes(newResource);\n        }\n\n        return true;\n    }\n\n    checkDragValidity(dragData, event) {\n        const\n            me        = this,\n            scheduler = me.currentOverClient;\n\n        let result;\n\n        // Cannot assign anything to readOnly resources\n        if (dragData.newResource?.readOnly) {\n            return false;\n        }\n\n        // First make sure there's no overlap, if not run the external validatorFn\n        if (!scheduler.allowOverlap && !scheduler.isDateRangeAvailable(\n            dragData.startDate,\n            dragData.endDate,\n            dragData.draggedEntities[0],\n            dragData.newResource\n        )) {\n            result = {\n                valid   : false,\n                message : me.L('L{eventOverlapsExisting}')\n            };\n        }\n        else {\n            result = me.validatorFn.call(\n                me.validatorFnThisObj || me,\n                dragData,\n                event\n            );\n        }\n\n        if (!result || result.valid) {\n            // Hook for features to have a say on validity\n            result = scheduler['checkEventDragValidity']?.(dragData, event) ?? result;\n        }\n\n        return result;\n    }\n\n    //endregion\n\n    //region Update records\n\n    /**\n     * Update events being dragged.\n     * @private\n     * @param context Drag data.\n     */\n    async updateRecords(context) {\n        const\n            me             = this,\n            fromScheduler  = me.client,\n            toScheduler    = me.currentOverClient,\n            copyKeyPressed = me.mode === 'copy';\n\n        let result;\n\n        if (!context.externalDropTarget) {\n            fromScheduler.eventStore.suspendAutoCommit();\n            toScheduler.eventStore.suspendAutoCommit();\n\n            result = await me.updateAssignments(fromScheduler, toScheduler, context, copyKeyPressed);\n\n            fromScheduler.eventStore.resumeAutoCommit();\n            toScheduler.eventStore.resumeAutoCommit();\n        }\n\n        // Tell the world there was a successful drop\n        toScheduler.trigger('eventDrop', Object.assign(me.getTriggerParams(context), {\n            isCopy               : copyKeyPressed,\n            copyMode             : me.copyMode,\n            domEvent             : context.browserEvent,\n            targetEventRecord    : context.targetEventRecord,\n            targetResourceRecord : context.newResource,\n            externalDropTarget   : context.externalDropTarget\n        }));\n\n        return result;\n    }\n\n    /**\n     * Update assignments being dragged\n     * @private\n     */\n    async updateAssignments(fromScheduler, toScheduler, context, copy) {\n        // The code is written to emit as few store events as possible\n        const\n            me                  = this,\n            { copyMode }        = me,\n            isCrossScheduler    = (fromScheduler !== toScheduler),\n            { isVertical }      = toScheduler,\n            {\n                assignmentStore: fromAssignmentStore,\n                eventStore     : fromEventStore\n            }                   = fromScheduler,\n            {\n                assignmentStore: toAssignmentStore,\n                eventStore     : toEventStore\n            }                   = toScheduler,\n            // When using TreeGroup in horizontal mode, store != resourceStore. Does not apply for vertical mode.\n            fromResourceStore   = fromScheduler.isVertical ? fromScheduler.resourceStore : fromScheduler.store,\n            toResourceStore     = isVertical ? toScheduler.resourceStore : toScheduler.store,\n            {\n                eventRecords,\n                assignmentRecords,\n                timeDiff,\n                initialAssignmentsState,\n                resourceRecord : fromResource,\n                newResource    : toResource\n            }                   = context,\n            { unifiedDrag }     = me,\n            // For an empty target event store, check if it has usesSingleAssignment explicitly set, otherwise use\n            // the value from the source event store\n            useSingleAssignment = (toEventStore.usesSingleAssignment ||\n                (toEventStore.usesSingleAssignment !== false && fromEventStore.usesSingleAssignment)),\n            event1Date          = me.adjustStartDate(assignmentRecords[0].event.startDate, timeDiff),\n            eventsToAdd         = [],\n            eventsToRemove      = [],\n            assignmentsToAdd    = [],\n            assignmentsToRemove = [],\n            eventsToCheck       = [],\n            eventsToBatch       = new Set(),\n            resourcesInStore    = fromResourceStore.getAllDataRecords();\n\n        fromScheduler.suspendRefresh();\n        toScheduler.suspendRefresh();\n\n        let updated      = false,\n            updatedEvent = false,\n            indexDiff; // By how many resource rows has the drag moved.\n\n        if (isCrossScheduler) {\n            // The difference in indices via first dragged event will help us find resources for all the rest of the\n            // events accordingly\n            indexDiff = toResourceStore.indexOf(toResource) - fromResourceStore.indexOf(fromResource);\n        }\n        else if (me.constainDragToResource) {\n            indexDiff = 0;\n        }\n        else if (isVertical && toResourceStore.isGrouped) {\n            indexDiff = resourcesInStore.indexOf(fromResource) - resourcesInStore.indexOf(toResource);\n        }\n        else {\n            indexDiff = fromResourceStore.indexOf(fromResource) - fromResourceStore.indexOf(toResource);\n        }\n\n        if (isVertical) {\n            // TODO : Broken after merge, figure it out\n            eventRecords.forEach((draggedEvent, i) => {\n                const eventBar = context.eventBarEls[i];\n\n                delete draggedEvent.instanceMeta(fromScheduler).hasTemporaryDragElement;\n\n                // If it was created by a call to scheduler.currentOrientation.addTemporaryDragElement\n                // then release it back to be available to DomSync next time the rendered event block\n                // is synced.\n                if (eventBar.dataset.transient) {\n                    eventBar.remove();\n                }\n            });\n        }\n\n        const\n            eventBarEls = context.eventBarEls.slice(),\n            addedEvents = [],\n            // this map holds references between original assignment and its copy\n            copiedAssignmentsMap = {};\n\n        // Using for to support await inside\n        for (let i = 0; i < assignmentRecords.length; i++) {\n            const originalAssignment = assignmentRecords[i];\n\n            // Reassigned when dropped on other scheduler, thus not const\n            let draggedEvent = originalAssignment.event,\n                draggedAssignment;\n\n            if (copy) {\n                draggedAssignment = originalAssignment.copy();\n                copiedAssignmentsMap[originalAssignment.id] = draggedAssignment;\n            }\n            else {\n                draggedAssignment = originalAssignment;\n            }\n\n            if (!draggedAssignment.isOccurrenceAssignment && (!fromAssignmentStore.includes(originalAssignment) || !fromEventStore.includes(draggedEvent))) {\n                // Event was removed externally during the drag, just remove element from DOM (DomSync already has\n                // tried to clean it up at this point, but could not due to retainElement being set)\n                eventBarEls[i].remove();\n                eventBarEls.splice(i, 1);\n                assignmentRecords.splice(i, 1);\n                i--;\n                continue;\n            }\n\n            const\n                initialState           = initialAssignmentsState[i],\n                originalEventRecord    = draggedEvent,\n                originalStartDate      = initialState.startDate,\n                // grabbing resource early, since after \".copy()\" the record won't belong to any store\n                // and \".getResources()\" won't work. If it's a move to another scheduler, ensure the\n                // array still has a length. The process function will do an assign as opposed\n                // to a reassign\n                originalResourceRecord = initialState.resource,\n                // Calculate new startDate (and round it) based on timeDiff up here, might be added to another\n                // event store below in which case it is invalidated. But this is anyway the target date\n                newStartDate           = this.constrainDragToTimeSlot\n                    ? originalStartDate\n                    : (unifiedDrag\n                        ? event1Date\n                        : me.adjustStartDate(originalStartDate, timeDiff));\n\n            if (fromAssignmentStore !== toAssignmentStore) {\n                // Single assignment from a multi assigned event dragged over, event needs to be copied over\n                // Same if we hold the copy key\n                const keepEvent = originalEventRecord.assignments.length > 1 || copy;\n\n                let newAssignment;\n\n                if (copy) {\n                    // In a copy mode dragged assignment is already a copy\n                    newAssignment = draggedAssignment;\n                }\n                else {\n                    newAssignment = draggedAssignment.copy();\n                    copiedAssignmentsMap[draggedAssignment.id] = newAssignment;\n                }\n\n                // Pro Engine does not seem to handle having the event already in place on the copied assignment,\n                // replacing it with id to have events bucket properly set up on commit\n                if (newAssignment.event && !useSingleAssignment) {\n                    newAssignment.event = newAssignment.event.id;\n                    newAssignment.resource = newAssignment.resource.id;\n                }\n\n                if (!copy) {\n                    // If we're not copying, remove assignment from source scheduler\n                    assignmentsToRemove.push(draggedAssignment);\n                }\n\n                // If it was the last assignment, the event should also be removed\n                if (!keepEvent) {\n                    eventsToRemove.push(originalEventRecord);\n                }\n\n                // If event does not already exist in target scheduler a copy is added\n                // if we're copying the event, we always need to create new record\n                if (\n                    copy && (copyMode === 'event' || (copyMode === 'auto' && toEventStore.usesSingleAssignment)) ||\n                    !toEventStore.getById(originalEventRecord.id)\n                ) {\n                    draggedEvent = toEventStore.createRecord({\n                        ...originalEventRecord.data,\n                        // If we're copying the event (not making new assignment to existing), we need to generate\n                        // phantom id to link event to the assignment record\n                        id       : copy && (copyMode === 'event' || copyMode === 'auto') ? undefined : originalEventRecord.id,\n                        // Engine gets mad if not nulled\n                        calendar : null\n                    });\n\n                    newAssignment.set({\n                        eventId : draggedEvent.id,\n                        event   : draggedEvent\n                    });\n\n                    eventsToAdd.push(draggedEvent);\n                }\n\n                // And add it to the target scheduler\n                // TODO: Should be handled on the data layer ideally\n                if (!useSingleAssignment) {\n                    assignmentsToAdd.push(newAssignment);\n                }\n                draggedAssignment = newAssignment;\n            }\n\n            let newResource = toResource,\n                reassignedFrom = null;\n\n            if (!unifiedDrag) {\n                if (!isCrossScheduler) {\n                    // If not dragging events as a unified block, distribute each to a new resource\n                    // using the same offset as the dragged event.\n                    if (indexDiff !== 0) {\n                        let newIndex;\n                        if (isVertical && toResourceStore.isGrouped) {\n                            newIndex = Math.max(\n                                Math.min(\n                                    resourcesInStore.indexOf(originalResourceRecord) - indexDiff,\n                                    resourcesInStore.length - 1\n                                ),\n                                0\n                            );\n                            newResource = resourcesInStore[newIndex];\n                        }\n                        else {\n                            newIndex = Math.max(\n                                Math.min(\n                                    fromResourceStore.indexOf(originalResourceRecord) - indexDiff,\n                                    fromResourceStore.count - 1\n                                ),\n                                0\n                            );\n\n                            newResource = fromResourceStore.getAt(newIndex);\n\n                            // Exclude group headers, footers, summary row etc\n                            if (newResource.isSpecialRow) {\n                                newResource = fromResourceStore.getNext(newResource, false, true) || fromResourceStore.getPrevious(newResource, false, true);\n                            }\n                        }\n\n                        newResource = newResource?.$original;\n                    }\n                    else {\n                        newResource = originalResourceRecord;\n                    }\n                }\n                // we have a resource for first dragged event in toResource\n                else if (i > 0) {\n                    const draggedEventResourceIndex = fromResourceStore.indexOf(originalResourceRecord);\n                    newResource                     = toResourceStore.getAt(draggedEventResourceIndex + indexDiff) || newResource;\n                }\n            }\n\n            // Cannot rely on assignment generation to detect update, since it might be a new assignment\n            // TODO: what about a case when we drag between schedulers which have different resource with same ids?\n            if (draggedAssignment.resourceId !== newResource.id) {\n                reassignedFrom = fromResourceStore.getById(draggedAssignment.resourceId);\n\n                if (copy) {\n                    if (fromAssignmentStore === toAssignmentStore) {\n                        draggedAssignment.resource = newResource;\n                        draggedAssignment.event = toEventStore.getById(draggedAssignment.eventId);\n\n                        if (copyMode === 'event' || (fromEventStore.usesSingleAssignment && copyMode === 'auto')) {\n                            draggedEvent = draggedEvent.copy();\n\n                            draggedAssignment.event = draggedEvent;\n\n                            if (toEventStore.usesSingleAssignment) {\n                                draggedEvent.resource = newResource;\n                                draggedEvent.resourceId = newResource.id;\n                            }\n                        }\n\n                        if (\n                            !toAssignmentStore.find(r => r.eventId === draggedAssignment.eventId && r.resourceId === draggedAssignment.resourceId) &&\n                            !assignmentsToAdd.find(r => r.eventId === draggedAssignment.eventId && r.resourceId === draggedAssignment.resourceId)\n                        ) {\n                            eventsToAdd.push(draggedEvent);\n                            assignmentsToAdd.push(draggedAssignment);\n                        }\n                    }\n                    else {\n                        draggedAssignment.resource = newResource;\n                    }\n                }\n                else {\n                    draggedAssignment.resource = newResource;\n                }\n\n                // Actual events should be batched, not data for new events when dragging between\n                draggedEvent.isEvent && eventsToBatch.add(draggedEvent);\n                updated = true;\n\n                // When dragging an occurrence, the assignment is only temporary. We have to tag the newResource along\n                // to be picked up by the occurrence -> event conversion\n                // TODO: A hack, figure a better way out\n                if (draggedEvent.isOccurrence) {\n                    draggedEvent.set('newResource', newResource);\n                }\n\n                // TODO: Should be handled on the datalayer somehow, but it is kind of edge casey\n                if (isCrossScheduler && useSingleAssignment) {\n                    // In single assignment mode, when dragged to another scheduler it will not copy the assignment\n                    // over but instead set the resourceId of the event. To better match expected behaviour\n                    draggedEvent.resourceId = newResource.id;\n                }\n            }\n            else {\n                if (\n                    copy &&\n                    (copyMode === 'event' || (copyMode === 'auto' && fromEventStore.usesSingleAssignment)) &&\n                    !eventsToAdd.includes(draggedEvent)\n                ) {\n                    draggedEvent = draggedEvent.copy();\n                    eventsToAdd.push(draggedEvent);\n\n                    draggedAssignment.event = draggedEvent;\n\n                    if (toEventStore.usesSingleAssignment) {\n                        draggedEvent.set({\n                            resource   : newResource,\n                            resourceId : newResource.id\n                        });\n                    }\n\n                    // Always add assignment to the store to allow proper element reuse\n                    assignmentsToAdd.push(draggedAssignment);\n                }\n            }\n\n            // Same for event\n            if (!eventsToCheck.find(ev => ev.draggedEvent === draggedEvent) && !DateHelper.isEqual(draggedEvent.startDate, newStartDate)) {\n\n                // only do for non occurence records\n                while (!draggedEvent.isOccurrence && draggedEvent.isBatchUpdating) {\n                    draggedEvent.endBatch(true);\n                }\n\n                draggedEvent.startDate = newStartDate;\n\n                eventsToCheck.push({ draggedEvent, originalStartDate });\n\n                draggedEvent.isEvent && eventsToBatch.add(draggedEvent);\n                updatedEvent = true;\n            }\n\n            // Hook for features that need to do additional processing on drop (used by NestedEvents)\n            toScheduler.processEventDrop({\n                eventRecord    : draggedEvent,\n                resourceRecord : newResource,\n                element        : i === 0 ? context.context.element : context.context.relatedElements[i - 1],\n                context,\n                toScheduler,\n                reassignedFrom,\n                eventsToAdd,\n                addedEvents,\n                draggedAssignment\n            });\n\n            // There are two cases to consider when triggering this event - `copy` and `move` mode. In case we are\n            // copying the assignment (we can also copy the event) draggedAssignment will point to the copy of the\n            // original assignment record. Same for draggedEvent. These records are new records which are not yet added\n            // to the store and they contain correct state of the drop - which event is going to be assigned to which\n            // resource on what time.\n            // These records possess no knowledge about original records which they were cloned from. And that might be\n            // useful. Let's say you want to copy assignment (or event) to every row in the way. You need to know start\n            // row and the end row. That information is kept in the `originalAssignment` record. Which might be identical\n            // to the `draggedAssignment` record in `move` mode.\n            toScheduler.trigger('processEventDrop', {\n                originalAssignment,\n                draggedAssignment,\n                context,\n                copyMode,\n                isCopy : copy\n            });\n        }\n\n        fromAssignmentStore.remove(assignmentsToRemove);\n        fromEventStore.remove(eventsToRemove);\n        toAssignmentStore.add(assignmentsToAdd);\n\n        // Modify syncIdMap on the FGCanvas to make sure elements get animated nicely to new position\n        if (copy && fromAssignmentStore === toAssignmentStore) {\n            const { syncIdMap } = fromScheduler.foregroundCanvas;\n\n            Object.entries(copiedAssignmentsMap).forEach(([originalId, cloneRecord]) => {\n                const element = syncIdMap[originalId];\n                delete syncIdMap[originalId];\n                syncIdMap[cloneRecord.id] = element;\n            });\n        }\n\n        eventsToAdd.length && addedEvents.push(...toEventStore.add(eventsToAdd));\n\n        // When not constrained to timeline we are dragging a clone and need to manually do some cleanup if\n        // dropped in view\n        if (!me.constrainDragToTimeline) {\n            // go through assignmentRecords again after events has been added to toEventStore (if any)\n            // now we have updated assignment ids and can properly reuse event HTML elements\n            for (let i = 0; i < assignmentRecords.length; i++) {\n                const\n                    assignmentRecord     = copiedAssignmentsMap[assignmentRecords[i].id] || assignmentRecords[i],\n                    originalDraggedEvent = assignmentRecord.event,\n                    // try to get dragged event from addedEvents array, it will be there with updated ids\n                    // if toScheduler is different\n                    draggedEvent         = addedEvents?.find(r => r.id === originalDraggedEvent.id) || originalDraggedEvent,\n                    eventBar             = context.eventBarEls[i],\n                    element              = i === 0 ? context.context.element : context.context.relatedElements[i - 1],\n                    // Determine if in time axis here also, since the records date might be invalidated further below\n                    inTimeAxis           = toScheduler.isInTimeAxis(draggedEvent);\n\n                if (!copy) {\n                    // Remove original element properly\n                    DomSync.removeChild(eventBar.parentElement, eventBar);\n                }\n\n                if (draggedEvent.resource && (isVertical || toScheduler.rowManager.getRowFor(draggedEvent.resource)) && inTimeAxis) {\n                    // Nested events are added to correct parent by the feature\n                    if (!draggedEvent.parent || draggedEvent.parent.isRoot) {\n                        const elRect = Rectangle.from(element, toScheduler.foregroundCanvas, true);\n\n                        // Ensure that after inserting the dragged element clone into the toScheduler's foregroundCanvas\n                        // it's at the same visual position that it was dragged to.\n                        DomHelper.setTopLeft(element, elRect.y, elRect.x);\n\n                        // Add element properly, so that DomSync will reuse it on next update\n                        DomSync.addChild(toScheduler.foregroundCanvas, element, draggedEvent.assignments[0].id);\n\n                        isCrossScheduler && toScheduler.processCrossSchedulerEventDrop({\n                            eventRecord : draggedEvent,\n                            toScheduler\n                        });\n                    }\n\n                    element.classList.remove('b-sch-event-hover', 'b-active', 'b-drag-proxy', 'b-dragging');\n                    element.retainElement = false;\n                }\n            }\n        }\n\n        addedEvents?.forEach(added => eventsToBatch.add(added));\n\n        // addedEvents order is the same with [context.element, ..context.relatedElements]\n        // Any added or removed events or assignments => something changed\n        if (assignmentsToRemove.length || eventsToRemove.length || assignmentsToAdd.length || eventsToAdd.length) {\n            updated = true;\n        }\n\n        // Commit changes to affected projects\n        if (updated || updatedEvent) {\n            // By batching event changes when using single assignment we avoid two updates, without it there will be one\n            // for date change and one when changed assignment updates resourceId on the event\n            useSingleAssignment && eventsToBatch.forEach(eventRecord => eventRecord.beginBatch());\n\n            await Promise.all([\n                toScheduler.project !== fromScheduler.project ? toScheduler.project.commitAsync() : null,\n                fromScheduler.project.commitAsync()\n            ]);\n\n            // End batch in engine friendly way, avoiding to have `set()` trigger another round of calculations\n            useSingleAssignment && eventsToBatch.forEach(eventRecord => eventRecord.endBatch(false, true));\n        }\n\n        if (!updated) {\n            // Engine might have reverted the date change, in which case this should be considered an invalid op\n            updated = eventsToCheck.some(({ draggedEvent, originalStartDate }) =>\n                !DateHelper.isEqual(draggedEvent.startDate, originalStartDate)\n            );\n        }\n\n        // Resumes self twice if not cross scheduler, but was suspended twice above also so all good\n        toScheduler.resumeRefresh();\n        fromScheduler.resumeRefresh();\n\n        if (assignmentRecords.length > 0) {\n            if (!updated) {\n                context.valid = false;\n            }\n            else {\n                // https://github.com/bryntum/support/issues/630\n                // Force re-render when using fillTicks. If date changed within same tick the element wont actually\n                // change and since we hijacked it for drag it wont be returned to its original position\n                if (toScheduler.fillTicks) {\n                    eventBarEls.forEach(el => delete el.lastDomConfig);\n                }\n\n                // Not doing full refresh above, to allow for animations\n                toScheduler.refreshWithTransition();\n\n                if (isCrossScheduler) {\n                    fromScheduler.refreshWithTransition();\n\n                    toScheduler.selectedEvents = addedEvents;\n                }\n            }\n        }\n    }\n\n    //endregion\n\n    //region Drag data\n\n    getProductDragContext(dragData) {\n        const\n            me                                = this,\n            { currentOverClient : scheduler } = me,\n            target                            = dragData.browserEvent.target,\n            previousResolvedResource          = dragData.newResource || dragData.resourceRecord,\n            previousTargetEventRecord         = dragData.targetEventRecord;\n\n        let\n            targetEventRecord = scheduler ? me.resolveEventRecord(target, scheduler) : null,\n            newResource, externalDropTarget;\n\n        // Ignore if over dragged event\n        if (dragData.eventRecords.includes(targetEventRecord)) {\n            targetEventRecord = null;\n        }\n\n        if (me.constrainDragToResource) {\n            newResource = dragData.resourceRecord;\n        }\n        else if (!me.constrainDragToTimeline) {\n            newResource = me.resolveResource();\n        }\n        else if (scheduler) {\n            newResource = me.resolveResource() || dragData.newResource || dragData.resourceRecord;\n        }\n\n        const\n            { assignmentRecords, eventRecords } = dragData,\n            isOverNewResource                   = previousResolvedResource !== newResource;\n\n        let valid = Boolean(newResource && !newResource.isSpecialRow);\n\n        if (!newResource && me.externalDropTargetSelector) {\n            externalDropTarget = target.closest(me.externalDropTargetSelector);\n            valid              = Boolean(externalDropTarget);\n        }\n\n        return {\n            valid,\n            externalDropTarget,\n            eventRecords,\n            assignmentRecords,\n            newResource,\n            targetEventRecord,\n            dirty         : isOverNewResource || targetEventRecord !== previousTargetEventRecord,\n            proxyElements : [dragData.context.element, ...dragData.context.relatedElements || []]\n        };\n    }\n\n    getMinimalDragData(info) {\n        const\n            me                = this,\n            { scheduler }     = me,\n            element           = me.getElementFromContext(info),\n            eventRecord       = me.resolveEventRecord(element, scheduler),\n            resourceRecord    = scheduler.resolveResourceRecord(element),\n            assignmentRecord  = scheduler.resolveAssignmentRecord(element),\n            assignmentRecords = assignmentRecord ? [assignmentRecord] : [];\n\n        // We multi drag other selected events if the dragged event is already selected, or the ctrl key is pressed\n        if (assignmentRecord && (scheduler.isAssignmentSelected(assignmentRecords[0]) || me.drag.startEvent.ctrlKey)) {\n            assignmentRecords.push.apply(assignmentRecords, me.getRelatedRecords(assignmentRecord));\n        }\n\n        const eventRecords = [...new Set(assignmentRecords.map(assignment => assignment.event))];\n\n        return {\n            eventRecord,\n            resourceRecord,\n            assignmentRecord,\n            eventRecords,\n            assignmentRecords\n        };\n    }\n\n    setupProductDragData(info) {\n        const\n            me            = this,\n            { scheduler } = me,\n            element       = me.getElementFromContext(info),\n            {\n                eventRecord,\n                resourceRecord,\n                assignmentRecord,\n                assignmentRecords\n            }             = me.getMinimalDragData(info),\n            eventBarEls   = [];\n\n        if (me.constrainDragToResource && !resourceRecord) {\n            throw new Error('Resource could not be resolved for event: ' + eventRecord.id);\n        }\n\n        let dateConstraints;\n\n        if (me.constrainDragToTimeline) {\n            dateConstraints = me.getDateConstraints?.(resourceRecord, eventRecord);\n\n            const\n                constrainRectangle = me.constrainRectangle = me.getConstrainingRectangle(dateConstraints, resourceRecord, eventRecord),\n                eventRegion        = Rectangle.from(element, scheduler.timeAxisSubGridElement);\n\n            super.setupConstraints(\n                constrainRectangle,\n                eventRegion,\n                scheduler.timeAxisViewModel.snapPixelAmount,\n                Boolean(dateConstraints.start)\n            );\n        }\n\n        // Collecting all elements to drag\n        assignmentRecords.forEach(assignment => {\n            let eventBarEl = scheduler.getElementFromAssignmentRecord(assignment, true);\n\n            if (!eventBarEl) {\n                eventBarEl = scheduler.currentOrientation.addTemporaryDragElement(assignment.event, assignment.resource);\n            }\n\n            eventBarEls.push(eventBarEl);\n        });\n\n        return {\n            record          : assignmentRecord,\n            draggedEntities : assignmentRecords,\n            dateConstraints : dateConstraints?.start ? dateConstraints : null,\n            // Create copies of the elements\n            eventBarCopies  : eventBarEls.map(el => me.createProxy(el)),\n            eventBarEls\n        };\n    }\n\n    getDateConstraints(resourceRecord, eventRecord) {\n        const\n            { scheduler }           = this,\n            externalDateConstraints = scheduler.getDateConstraints?.(resourceRecord, eventRecord);\n\n        let minDate, maxDate;\n\n        if (this.constrainDragToTimeSlot) {\n            minDate = eventRecord.startDate;\n            maxDate = eventRecord.endDate;\n        }\n        else if (externalDateConstraints) {\n            minDate = externalDateConstraints.start;\n            maxDate = externalDateConstraints.end;\n        }\n\n        return {\n            start : minDate,\n            end   : maxDate\n        };\n    }\n\n    getConstrainingRectangle(dateRange, resourceRecord, eventRecord) {\n        return this.scheduler.getScheduleRegion(this.constrainDragToResource && resourceRecord, eventRecord, true, dateRange && {\n            start : dateRange.start, end : dateRange.end\n        });\n    }\n\n    /**\n     * Initializes drag data (dates, constraints, dragged events etc). Called when drag starts.\n     * @private\n     * @param info\n     * @returns {*}\n     */\n    getDragData(info) {\n        const dragData = this.getMinimalDragData(info) || {};\n\n        return {\n            ...super.getDragData(info),\n            ...dragData,\n            initialAssignmentsState : dragData.assignmentRecords.map(assignment => ({\n                startDate : assignment.event.startDate,\n                resource  : assignment.resource,\n                assignment\n            }))\n        };\n    }\n\n    /**\n     * Provide your custom implementation of this to allow additional selected records to be dragged together with the original one.\n     * @param {Scheduler.model.AssignmentModel} assignmentRecord The assignment about to be dragged\n     * @returns {Scheduler.model.AssignmentModel[]} An array of assignment records to drag together with the original\n     */\n    getRelatedRecords(assignmentRecord) {\n        return this.scheduler.selectedAssignments.filter(selectedRecord => selectedRecord !== assignmentRecord && !selectedRecord.resource.readOnly && selectedRecord.event.isDraggable);\n    }\n\n    /**\n     * Get correct axis coordinate depending on schedulers mode (horizontal -> x, vertical -> y). Also takes milestone\n     * layout into account.\n     * @private\n     * @param {Scheduler.model.EventModel} eventRecord Record being dragged\n     * @param {HTMLElement} element Element being dragged\n     * @param {Number[]} coord XY coordinates\n     * @returns {Number|Number[]} X,Y or XY\n     */\n    getCoordinate(eventRecord, element, coord) {\n        const scheduler = this.currentOverClient;\n\n        if (scheduler.isHorizontal) {\n            let x = coord[0];\n\n            // Adjust coordinate for milestones if using a layout mode, since they are aligned differently than events\n            if (scheduler.milestoneLayoutMode !== 'default' && eventRecord.isMilestone) {\n                switch (scheduler.milestoneAlign) {\n                    case 'center':\n                        x += element.offsetWidth / 2;\n                        break;\n                    case 'end':\n                        x += element.offsetWidth;\n                        break;\n                }\n            }\n\n            return x;\n        }\n        else {\n            let y = coord[1];\n            // Adjust coordinate for milestones if using a layout mode, since they are aligned differently than events\n            if (scheduler.milestoneLayoutMode !== 'default' && eventRecord.isMilestone) {\n                switch (scheduler.milestoneAlign) {\n                    case 'center':\n                        y += element.offsetHeight / 2;\n                        break;\n                    case 'end':\n                        y += element.offsetHeight;\n                        break;\n                }\n            }\n\n            return y;\n        }\n    }\n\n    /**\n     * Get resource record occluded by the drag proxy.\n     * @private\n     * @returns {Scheduler.model.ResourceModel}\n     */\n    resolveResource() {\n        const\n            me               = this,\n            client           = me.currentOverClient,\n            { isHorizontal } = client,\n            {\n                context,\n                browserEvent,\n                dragProxy\n            }                = me.dragData,\n            element          = dragProxy || context.element,\n            // Page coords for elementFromPoint\n            pageRect         = Rectangle.from(element, null, true),\n            y                = (client.isVertical || me.unifiedDrag) ? context.clientY : pageRect.center.y,\n            // Local coords to resolve resource in vertical\n            localRect        = Rectangle.from(element, client.timeAxisSubGridElement, true),\n            { x: lx, y: ly } = localRect.center,\n            eventTarget      = me.getMouseMoveEventTarget(browserEvent);\n\n        let resource = null;\n\n        if (client.element.contains(eventTarget)) {\n            // This is benchmarked as the fastest way to find a Grid Row from a viewport Y coordinate\n            // so use it in preference to elementFromPoint (which causes a forced synchronous layout) in horizontal mode.\n            if (isHorizontal) {\n                const row = client.rowManager.getRowAt(y);\n\n                resource = row && client.store.getAt(row.dataIndex);\n            }\n            else {\n                // In vertical mode, just use the X coordinate to find out which resource we are under.\n                // The method requires that a .b-sch-timeaxis-cell element be passed.\n                // There is only one in vertical mode, so use that.\n                resource = client.resolveResourceRecord(client.timeAxisSubGridElement.querySelector('.b-sch-timeaxis-cell'), [lx, ly]);\n            }\n        }\n\n        return resource;\n    }\n\n    //endregion\n\n    //region Other stuff\n\n    adjustStartDate(startDate, timeDiff) {\n        const scheduler = this.currentOverClient;\n\n        return scheduler.timeAxis.roundDate(new Date(startDate - 0 + timeDiff), scheduler.snapRelativeToEventStartDate ? startDate : false);\n    }\n\n    getRecordElement(assignmentRecord) {\n        return this.client.getElementFromAssignmentRecord(assignmentRecord, true);\n    }\n\n    // Used by the Dependencies feature to draw lines to the drag proxy instead of the original event element\n    getProxyElement(assignmentRecord) {\n        if (this.isDragging) {\n            const index = this.dragData.assignmentRecords.indexOf(assignmentRecord);\n\n            if (index >= 0) {\n                return this.dragData.proxyElements[index];\n            }\n        }\n\n        return null;\n    }\n\n    //endregion\n\n    //#region Salesforce hooks\n\n    getMouseMoveEventTarget(event) {\n        return event.target;\n    }\n\n    //#endregion\n}\n\nGridFeatureManager.registerFeature(EventDrag, true, 'Scheduler');\nGridFeatureManager.registerFeature(EventDrag, false, 'ResourceHistogram');\n","import DragCreateBase from './base/DragCreateBase.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\n\n/**\n * @module Scheduler/feature/EventDragCreate\n */\n\n/**\n * Feature that allows the user to create new events by dragging in empty parts of the scheduler rows.\n *\n * {@inlineexample Scheduler/feature/EventDragCreate.js}\n *\n * This feature is **enabled** by default.\n *\n * <div class=\"note\">Incompatible with the {@link Scheduler.feature.EventDragSelect EventDragSelect} and\n * {@link Scheduler.feature.Pan Pan} features. If either of those features are enabled, this feature has no effect.\n * </div>\n *\n * ## Conditionally preventing drag creation\n *\n * To conditionally prevent drag creation for a certain resource or a certain timespan, you listen for the\n * {@link #event-beforeDragCreate} event, add your custom logic to it and return `false` to prevent the operation\n * from starting. For example to not allow drag creation on the topmost resource:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     listeners : {\n *         beforeDragCreate({ resource }) {\n *             // Prevent drag creating on the topmost resource\n *             if (resource === scheduler.resourceStore.first) {\n *                 return false;\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * @extends Scheduler/feature/base/DragCreateBase\n * @demo Scheduler/basic\n * @classtype eventDragCreate\n * @feature\n */\nexport default class EventDragCreate extends DragCreateBase {\n    //region Config\n\n    static $name = 'EventDragCreate';\n\n    static configurable = {\n        /**\n         * An empty function by default, but provided so that you can perform custom validation on the event being\n         * created. Return `true` if the new event is valid, `false` to prevent an event being created.\n         * @param {Object} context A drag create context\n         * @param {Date} context.startDate Event start date\n         * @param {Date} context.endDate Event end date\n         * @param {Scheduler.model.EventModel} context.record Event record\n         * @param {Scheduler.model.ResourceModel} context.resourceRecord Resource record\n         * @param {Event} event The event object\n         * @returns {Boolean} `true` if this validation passes\n         * @config {Function}\n         */\n        validatorFn : () => true,\n\n        /**\n         * Locks the layout during drag create, overriding the default behaviour that uses the same rendering\n         * pathway for drag creation as for already existing events.\n         *\n         * This more closely resembles the behaviour of versions prior to 4.2.0.\n         *\n         * @config {Boolean}\n         * @default\n         */\n        lockLayout : false\n    };\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Fires on the owning Scheduler after the new event has been created.\n     * @event dragCreateEnd\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source\n     * @param {Scheduler.model.EventModel} eventRecord The new `EventModel` record.\n     * @param {Scheduler.model.ResourceModel} resourceRecord The resource for the row in which the event is being\n     * created.\n     * @param {MouseEvent} event The ending mouseup event.\n     * @param {HTMLElement} eventElement The DOM element representing the newly created event un the UI.\n     */\n\n    /**\n     * Fires on the owning Scheduler at the beginning of the drag gesture. Returning `false` from a listener prevents\n     * the drag create operation from starting.\n     *\n     * ```javascript\n     * const scheduler = new Scheduler({\n     *     listeners : {\n     *         beforeDragCreate({ date }) {\n     *             // Prevent drag creating events in the past\n     *             return date >= Date.now();\n     *         }\n     *     }\n     * });\n     * ```\n     *\n     * @event beforeDragCreate\n     * @on-owner\n     * @preventable\n     * @param {Scheduler.view.Scheduler} source\n     * @param {Scheduler.model.ResourceModel} resourceRecord\n     * @param {Date} date The datetime associated with the drag start point.\n     */\n\n    /**\n     * Fires on the owning Scheduler after the drag start has created a new Event record.\n     * @event dragCreateStart\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source\n     * @param {Scheduler.model.EventModel} eventRecord The event record being created\n     * @param {Scheduler.model.ResourceModel} resourceRecord The resource record\n     * @param {HTMLElement} eventElement The element representing the new event.\n     */\n\n    /**\n     * Fires on the owning Scheduler to allow implementer to prevent immediate finalization by setting\n     * `data.context.async = true` in the listener, to show a confirmation popup etc\n     * ```javascript\n     *  scheduler.on('beforedragcreatefinalize', ({context}) => {\n     *      context.async = true;\n     *      setTimeout(() => {\n     *          // async code don't forget to call finalize\n     *          context.finalize();\n     *      }, 1000);\n     *  })\n     * ```\n     * @event beforeDragCreateFinalize\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source Scheduler instance\n     * @param {Scheduler.model.EventModel} eventRecord The event record being created\n     * @param {Scheduler.model.ResourceModel} resourceRecord The resource record\n     * @param {HTMLElement} eventElement The element representing the new Event record\n     * @param {Object} context\n     * @param {Boolean} context.async Set true to handle drag create asynchronously (e.g. to wait for user\n     * confirmation)\n     * @param {Function} context.finalize Call this method to finalize drag create. This method accepts one\n     * argument: pass true to update records, or false, to ignore changes\n     */\n\n    /**\n     * Fires on the owning Scheduler at the end of the drag create gesture whether or not\n     * a new event was created by the gesture.\n     * @event afterDragCreate\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source\n     * @param {Scheduler.model.EventModel} eventRecord The event record being created\n     * @param {Scheduler.model.ResourceModel} resourceRecord The resource record\n     * @param {HTMLElement} eventElement The element representing the created event record\n     */\n\n    //endregion\n\n    //region Init\n\n    get scheduler() {\n        return this.client;\n    }\n\n    get store() {\n        return this.client.eventStore;\n    }\n\n    updateLockLayout(lock) {\n        this.dragActiveCls = `b-dragcreating${lock ? ' b-dragcreate-lock' : ''}`;\n    }\n\n    //endregion\n\n    //region Scheduler specific implementation\n\n    handleBeforeDragCreate(drag, eventRecord, event) {\n        const { resourceRecord } = drag;\n\n        if (resourceRecord.readOnly) {\n            return false;\n        }\n\n        const { scheduler }      = this,\n            // For resources with a calendar, ensure the date is inside a working time range\n            isWorkingTime      = !scheduler.isSchedulerPro || eventRecord.ignoreResourceCalendar || resourceRecord.isWorkingTime(drag.mousedownDate),\n            result             = isWorkingTime && scheduler.trigger('beforeDragCreate', {\n                resourceRecord,\n                date : drag.mousedownDate,\n                event\n            });\n\n        // Save date constraints\n        this.dateConstraints = scheduler.getDateConstraints?.(resourceRecord, eventRecord);\n\n        return result;\n    }\n\n    dragStart(drag) {\n        const\n            me               = this,\n            { client }       = me,\n            {\n                eventStore,\n                assignmentStore,\n                enableEventAnimations\n            }                  = client,\n            { resourceRecord } = drag,\n            eventRecord        = me.createEventRecord(drag),\n            resourceRecords    = [resourceRecord];\n\n        eventRecord.set('duration', DateHelper.diff(eventRecord.startDate, eventRecord.endDate, eventRecord.durationUnit, true));\n\n        // It's only a provisional event until gesture is completed (possibly longer if an editor dialog is shown after)\n        eventRecord.isCreating = true;\n\n        // Flag used by rendering to not draw a zero length event being drag created as a milestone\n        eventRecord.meta.isDragCreating = true;\n\n        // force the transaction canceling in the taskeditor early\n        // this is because we are going to add a new event record to the store, and it has to be out of the\n        // task editor's stm transaction\n        // now there's a re-entrant protection in that method, so hopefully when it will be called by the\n        // editor itself that's ok\n        // `taskEdit === false` in some cases, so can't just use `?.` here\n        client.features.taskEdit && client.features.taskEdit.doCancel();\n\n        // This presents the event to be scheduled for validation at the proposed mouse/date point\n        // If rejected, we cancel operation\n        if (me.handleBeforeDragCreate(drag, eventRecord, drag.event) === false) {\n            return false;\n        }\n\n        let assignmentRecords = [];\n\n        if (resourceRecord) {\n            assignmentRecords = assignmentStore.assignEventToResource(eventRecord, resourceRecord);\n        }\n\n        // Vetoable beforeEventAdd allows cancel of this operation\n        if (client.trigger('beforeEventAdd', { eventRecord, resourceRecords, assignmentRecords }) === false) {\n            assignmentStore.remove(assignmentRecords);\n            return false;\n        }\n\n        // When configured to lock layout during drag create, set a flag that HorizontalRendering will pick up to\n        // exclude the new event from the layout calculations. It will then be at the topmost position in the \"cell\"\n        if (me.lockLayout) {\n            eventRecord.meta.excludeFromLayout = true;\n        }\n\n        client.onEventCreated?.(eventRecord);\n\n        client.enableEventAnimations = false;\n        eventStore.addAsync(eventRecord).then(() => client.enableEventAnimations = enableEventAnimations);\n\n        // Element must be created synchronously, not after the project's normalizing delays.\n        // Overrides the check for isEngineReady in VerticalRendering so that the newly added record\n        // will be rendered when we call refreshRows.\n        client.isCreating = true;\n        client.refreshRows();\n        client.isCreating = false;\n\n        // Set the element we are dragging\n        drag.itemElement = drag.element = client.getElementFromEventRecord(eventRecord);\n\n        // If the resource row is very tall, the event may have been rendered outside of the\n        // visible viewport. If so, scroll it into view.\n        if (!DomHelper.isInView(drag.itemElement)) {\n            client.scrollable.scrollIntoView(drag.itemElement, {\n                animate    : true,\n                edgeOffset : client.barMargin\n            });\n        };\n\n        return super.dragStart(drag);\n    }\n\n    checkValidity(context, event) {\n        const\n            me         = this,\n            { client } = me;\n\n        // Nicer for users of validatorFn\n        context.resourceRecord = me.dragging.resourceRecord;\n        return (\n            client.allowOverlap ||\n            client.isDateRangeAvailable(context.startDate, context.endDate, context.eventRecord, context.resourceRecord)\n        ) && me.createValidatorFn.call(me.validatorFnThisObj || me, context, event);\n    }\n\n    // Determine if resource already has events or not\n    isRowEmpty(resourceRecord) {\n        const events = this.store.getEventsForResource(resourceRecord);\n        return !events || !events.length;\n    }\n\n    //endregion\n\n    triggerBeforeFinalize(event) {\n        this.client.trigger(`beforeDragCreateFinalize`, event);\n    }\n\n    /**\n     * Creates an event by the event object coordinates\n     * @param {Object} drag The Bryntum event object\n     * @private\n     */\n    createEventRecord(drag) {\n        const\n            me          = this,\n            { client }  = me,\n            dimension   = client.isHorizontal ? 'X' : 'Y',\n            {\n                timeAxis,\n                eventStore,\n                weekStartDay\n            }           = client,\n            {\n                event,\n                mousedownDate\n            }           = drag,\n            draggingEnd = me.draggingEnd = event[`page${dimension}`] > drag.startEvent[`page${dimension}`],\n            eventConfig = {\n                name      : eventStore.modelClass.fieldMap.name.defaultValue || me.L('L{Object.newEvent}'),\n                startDate : draggingEnd ? DateHelper.floor(mousedownDate, timeAxis.resolution, null, weekStartDay) : mousedownDate,\n                endDate   : draggingEnd ? mousedownDate : DateHelper.ceil(mousedownDate, timeAxis.resolution, null, weekStartDay)\n            };\n\n        // if project model has been imported from Gantt, we have to define constraint data directly to correct\n        // auto-scheduling while dragCreate\n        if (client.project.isGanttProjectMixin) {\n            ObjectHelper.assign(eventConfig, {\n                constraintDate : eventConfig.startDate,\n                constraintType : 'startnoearlierthan'\n            });\n        }\n\n        return eventStore.createRecord(eventConfig);\n    }\n\n    async finalizeDragCreate(context) {\n        const { meta } = context.eventRecord;\n\n        // Remove the layout lock flag, event will jump into place as part of the finalization\n        meta.excludeFromLayout = false;\n        // Also allow new event to become a milestone now\n        meta.isDragCreating    = false;\n\n        if (!this.client.hasEventEditor) {\n            context.eventRecord.isCreating = false;\n        }\n\n        return super.finalizeDragCreate(context);\n    }\n\n    getTipHtml(...args) {\n        const\n            html        = super.getTipHtml(...args),\n            { element } = this.tip;\n\n        element.classList.add('b-sch-dragcreate-tooltip');\n        element.classList.toggle('b-too-narrow', this.dragging.context.tooNarrow);\n\n        return html;\n    }\n\n    onAborted(context) {\n        const { eventRecord, resourceRecord } = context;\n\n        // The product this is being used in may not have resources.\n        this.store.unassignEventFromResource?.(eventRecord, resourceRecord);\n        this.store.remove(eventRecord);\n    }\n}\n\nGridFeatureManager.registerFeature(EventDragCreate, true, 'Scheduler');\nGridFeatureManager.registerFeature(EventDragCreate, false, 'ResourceHistogram');\n","import TooltipBase from './base/TooltipBase.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\n\n/**\n * @module Scheduler/feature/EventTooltip\n */\n\n/**\n * Displays a tooltip when hovering events. The template used to render the tooltip can be customized, see {@link #config-template}.\n * Config options are also applied to the tooltip shown, see {@link Core.widget.Tooltip} for available options.\n *\n * ## Showing local data\n * To show a basic \"local\" tooltip (with data available in the Event record) upon hover:\n * ```javascript\n * new Scheduler({\n *   features : {\n *     eventTooltip : {\n *         // Tooltip configs can be used here\n *         align : 'l-r' // Align left to right,\n *         // A custom HTML template\n *         template : data => `<dl>\n *           <dt>Assigned to:</dt>\n *              <dt>Time:</dt>\n *              <dd>\n *                  ${DateHelper.format(data.eventRecord.startDate, 'LT')} - ${DateHelper.format(data.eventRecord.endDate, 'LT')}\n *              </dd>\n *              ${data.eventRecord.get('note') ? `<dt>Note:</dt><dd>${data.eventRecord.note}</dd>` : ''}\n *\n *              ${data.eventRecord.get('image') ? `<dt>Image:</dt><dd><img class=\"image\" src=\"${data.eventRecord.get('image')}\"/></dd>` : ''}\n *          </dl>`\n *     }\n *   }\n * });\n * ```\n *\n * ## Showing remotely loaded data\n * Loading remote data into the event tooltip is easy. Simply use the {@link #config-template} and return a Promise which yields the content to show.\n * ```javascript\n * new Scheduler({\n *   features : {\n *     eventTooltip : {\n *        template : ({ eventRecord }) => AjaxHelper.get(`./fakeServer?name=${eventRecord.name}`).then(response => response.text())\n *     }\n *   }\n * });\n * ```\n * This feature is **enabled** by default\n *\n * By default, the tooltip {@link Core.widget.Widget#config-scrollAction realigns on scroll}\n * meaning that it will stay aligned with its target should a scroll interaction make the target move.\n *\n * If this is causing performance issues in a Scheduler, such as if there are many dozens of events\n * visible, you can configure this feature with `scrollAction: 'hide'`. This feature's configuration is\n * applied to the tooltip, so that will mean that the tooltip will hide if its target is moved by a\n * scroll interaction.\n *\n * @extends Scheduler/feature/base/TooltipBase\n * @demo Scheduler/basic\n * @inlineexample Scheduler/feature/EventTooltip.js\n * @classtype eventTooltip\n * @feature\n */\nexport default class EventTooltip extends TooltipBase {\n    //region Config\n\n    static get $name() {\n        return 'EventTooltip';\n    }\n\n    static get defaultConfig() {\n        return {\n            /**\n             * A function which receives data about the event and returns a string,\n             * or a Promise yielding a string (for async tooltips), to be displayed in the tooltip.\n             * This method will be called with an object containing the fields below\n             * @param {Object} data\n             * @param {Scheduler.model.EventModel} data.eventRecord\n             * @param {Date} data.startDate\n             * @param {Date} data.endDate\n             * @param {String} data.startText\n             * @param {String} data.endText\n             * @config {Function} template\n             */\n            template : data => `\n                ${data.eventRecord.name ? StringHelper.xss`<div class=\"b-sch-event-title\">${data.eventRecord.name}</div>` : ''}\n                ${data.startClockHtml}\n                ${data.endClockHtml}`,\n\n            cls : 'b-sch-event-tooltip',\n\n            monitorRecordUpdate : true,\n\n            /**\n             * Defines what to do if document is scrolled while the tooltip is visible.\n             *\n             * Valid values: ´null´: do nothing, ´hide´: hide the tooltip or ´realign´: realign to the target if possible.\n             *\n             * @config {'hide'|'realign'|null}\n             * @default\n             */\n            scrollAction : 'hide'\n        };\n    }\n\n    //endregion\n\n    construct(client, config) {\n        const me = this;\n\n        super.construct(client, config);\n\n        if (typeof me.align === 'string') {\n            me.align = { align : me.align };\n        }\n    }\n\n    onPaint({ firstPaint }) {\n        super.onPaint(...arguments);\n\n        if (firstPaint) {\n            const\n                me           = this,\n                dependencies = me.client.features.dependencies;\n\n            if (dependencies) {\n                const configuredOffset = me.align.offset;\n\n                me.tooltip.ion({\n                    beforeShow : ({ source : tooltip }) => {\n                        // Don't let dependency terminal interfere with this tooltip\n                        if (!dependencies.disabled) {\n                            tooltip.align.offset = [0, 10];\n                        }\n                        else {\n                            tooltip.align.offset = configuredOffset;\n                        }\n                    }\n                });\n            }\n        }\n    }\n}\n\nGridFeatureManager.registerFeature(EventTooltip, true, 'Scheduler');\nGridFeatureManager.registerFeature(EventTooltip, false, 'ResourceHistogram');\n","import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport DomSync from '../../Core/helper/DomSync.js';\n\n/**\n * @module Scheduler/feature/StickyEvents\n */\n\nconst zeroMargins = { width : 0, height : 0 };\n\n/**\n * This feature applies native `position: sticky` to event contents in horizontal mode, keeping the contents in view as\n * long as possible on scroll. For vertical mode it uses a programmatic solution to achieve the same result.\n *\n * Assign `eventRecord.stickyContents = false` to disable stickiness on a per event level (docs for\n * {@link Scheduler/model/EventModel#field-stickyContents}).\n *\n * This feature is **enabled** by default.\n *\n * @extends Core/mixin/InstancePlugin\n * @classtype stickyEvents\n * @feature\n */\nexport default class StickyEvents extends InstancePlugin {\n    static $name = 'StickyEvents';\n\n    static type = 'stickyEvents';\n\n    static pluginConfig = {\n        chain : ['onEventDataGenerated']\n    }\n\n    construct(scheduler, config) {\n        super.construct(scheduler, config);\n\n        if (scheduler.isVertical) {\n            this.toUpdate = new Set();\n\n            scheduler.ion({\n                scroll           : 'onSchedulerScroll',\n                horizontalScroll : 'onHorizontalScroll',\n                thisObj          : this,\n                prio             : 10000\n            });\n        }\n    }\n\n    onEventDataGenerated(renderData) {\n        if (this.client.isHorizontal) {\n            renderData.wrapperCls['b-disable-sticky'] = renderData.eventRecord.stickyContents === false;\n        }\n        else {\n            this.syncEventContentPosition(renderData, undefined, true);\n            this.updateStyles();\n        }\n    }\n\n    //region Vertical mode\n\n    onSchedulerScroll() {\n        if (!this.disabled) {\n            this.verticalSyncAllEventsContentPosition(this.client);\n        }\n    }\n\n    // Have to sync also on horizontal scroll, since we reuse elements and dom configs\n    onHorizontalScroll({ subGrid }) {\n        if (subGrid === this.client.timeAxisSubGrid) {\n            this.verticalSyncAllEventsContentPosition(this.client);\n        }\n    }\n\n    updateStyles() {\n        for (const { contentEl, style } of this.toUpdate) {\n            DomHelper.applyStyle(contentEl, style);\n        }\n\n        this.toUpdate.clear();\n    }\n\n    verticalSyncAllEventsContentPosition(scheduler) {\n        const { resourceMap } = scheduler.currentOrientation;\n\n        for (const eventsData of resourceMap.values()) {\n            for (const { renderData, elementConfig } of Object.values(eventsData)) {\n                const args = [renderData];\n\n                if (elementConfig && renderData.eventRecord.isResourceTimeRange) {\n                    args.push(elementConfig.children[0]);\n                }\n\n                this.syncEventContentPosition.apply(this, args);\n            }\n        }\n        this.toUpdate.size && this.updateStyles();\n    }\n\n    syncEventContentPosition(renderData, eventContent = renderData.eventContent, duringGeneration = false) {\n        if (\n            this.disabled ||\n            // Allow client disable stickiness for certain events\n            renderData.eventRecord.stickyContents === false\n        ) {\n            return;\n        }\n\n        const\n            { client }        = this,\n            {\n                eventRecord,\n                resourceRecord,\n                useEventBuffer,\n                bufferAfterWidth,\n                bufferBeforeWidth,\n                top,\n                height\n            }                 = renderData,\n            scrollPosition    = client.scrollable.y,\n            wrapperEl         = duringGeneration ? null : client.getElementFromEventRecord(eventRecord, resourceRecord, true),\n            contentEl         = wrapperEl && DomSync.getChild(wrapperEl, 'event.content'),\n            meta              = eventRecord.instanceMeta(client),\n            style             = typeof eventContent.style === 'string'\n                ? (eventContent.style = DomHelper.parseStyle(eventContent.style))\n                : eventContent.style || (eventContent.style = {});\n\n        // Do not process events being dragged\n        if (wrapperEl?.classList.contains('b-dragging')) {\n            return;\n        }\n\n        let start       = top,\n            contentSize = height,\n            end         = start + contentSize;\n\n        if (useEventBuffer) {\n            start += bufferBeforeWidth;\n            contentSize = contentSize - bufferBeforeWidth - bufferAfterWidth;\n            end = start + contentSize;\n        }\n\n        // Only process non-milestones that are partially out of view\n        if (start < scrollPosition && end >= scrollPosition && !eventRecord.isMilestone) {\n            const\n                contentWidth = contentEl?.offsetWidth,\n                justify      = contentEl?.parentNode && DomHelper.getStyleValue(contentEl.parentNode, 'justifyContent'),\n                c            = justify === 'center' ? (renderData.width - contentWidth) / 2 : 0,\n                eventStart   = start,\n                eventEnd     = eventStart + contentSize - 1;\n\n            // Only process non-milestone events. Milestones have no width.\n            // If there's no offsetWidth, it's still b-released, so we cannot measure it.\n            // If the event starts off the left edge, but its right edge is still visible,\n            // translate the contentEl to compensate. If not, undo any translation.\n            if ((!contentEl || contentWidth) && eventStart < scrollPosition && eventEnd >= scrollPosition) {\n                const\n                    edgeSizes = this.getEventContentMargins(contentEl),\n                    maxOffset = contentEl\n                        ? (contentSize - contentEl.offsetHeight - edgeSizes.height) - c\n                        : Number.MAX_SAFE_INTEGER,\n                    offset = Math.min(scrollPosition - eventStart, maxOffset - 2);\n\n                style.transform = offset > 0 ? `translateY(${offset}px)` : '';\n                meta.stuck = true;\n            }\n            else {\n                style.transform = '';\n                meta.stuck = false;\n            }\n\n            if (contentEl) {\n                this.toUpdate.add({\n                    contentEl,\n                    style\n                });\n            }\n        }\n        else if (contentEl && meta.stuck) {\n            style.transform = '';\n            meta.stuck = false;\n\n            this.toUpdate.add({\n                contentEl,\n                style\n            });\n        }\n    }\n\n    // Only measure the margins of an event's contentEl once\n    getEventContentMargins(contentEl) {\n        if (contentEl?.classList.contains('b-sch-event-content')) {\n            return DomHelper.getEdgeSize(contentEl, 'margin');\n        }\n        return zeroMargins;\n    }\n\n    //endregion\n\n    doDisable() {\n        super.doDisable(...arguments);\n\n        if (!this.isConfiguring) {\n            this.client.refreshWithTransition();\n        }\n    }\n}\n\nGridFeatureManager.registerFeature(StickyEvents, true, 'Scheduler');\nGridFeatureManager.registerFeature(StickyEvents, false, 'ResourceHistogram');\n","import AbstractTimeRanges from './AbstractTimeRanges.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\nimport AttachToProjectMixin from '../data/mixin/AttachToProjectMixin.js';\nimport TimeSpan from '../model/TimeSpan.js';\n\n/**\n * @module Scheduler/feature/TimeRanges\n */\n\n/**\n * Feature that renders global ranges of time in the timeline. Use this feature to visualize a `range` like a 1 hr lunch\n * or some important point in time (a `line`, i.e. a range with 0 duration). This feature can also show a current time\n * indicator if you set {@link #config-showCurrentTimeLine} to true. To style the rendered elements, use the\n * {@link Scheduler.model.TimeSpan#field-cls cls} field of the `TimeSpan` class.\n *\n * {@inlineexample Scheduler/feature/TimeRanges.js}\n *\n * Each time range is represented by an instances of {@link Scheduler.model.TimeSpan}, held in a simple\n * {@link Core.data.Store}. The feature uses {@link Scheduler/model/ProjectModel#property-timeRangeStore} defined on the\n * project by default. The store's persisting/loading is handled by Crud Manager (if it's used by the component).\n *\n * Note that the feature uses virtualized rendering, only the currently visible ranges are available in the DOM.\n *\n * This feature is **off** by default. For info on enabling it, see {@link Grid.view.mixin.GridFeatures}.\n *\n * ## Showing an icon in the time range header\n *\n * You can use Font Awesome icons easily (or set any other icon using CSS) by using the {@link Scheduler.model.TimeSpan#field-iconCls}\n * field. The JSON data below will show a flag icon:\n *\n * ```json\n * {\n *     \"id\"        : 5,\n *     \"iconCls\"   : \"b-fa b-fa-flag\",\n *     \"name\"      : \"v5.0\",\n *     \"startDate\" : \"2019-02-07 15:45\"\n * },\n * ```\n *\n * ## Recurring time ranges\n *\n * The feature supports recurring ranges in case the provided store and models\n * have {@link Scheduler/data/mixin/RecurringTimeSpansMixin} and {@link Scheduler/model/mixin/RecurringTimeSpan}\n * mixins applied:\n *\n * ```javascript\n * // We want to use recurring time ranges so we make a special model extending standard TimeSpan model with\n * // RecurringTimeSpan which adds recurrence support\n * class MyTimeRange extends RecurringTimeSpan(TimeSpan) {}\n *\n * // Define a new store extending standard Store with RecurringTimeSpansMixin mixin to add recurrence support to the\n * // store. This store will contain time ranges.\n * class MyTimeRangeStore extends RecurringTimeSpansMixin(Store) {\n *     static get defaultConfig() {\n *         return {\n *             // use our new MyResourceTimeRange model\n *             modelClass : MyTimeRange\n *         };\n *     }\n * };\n *\n * // Instantiate store for timeRanges using our new classes\n * const timeRangeStore = new MyTimeRangeStore({\n *     data : [{\n *         id             : 1,\n *         resourceId     : 'r1',\n *         startDate      : '2019-01-01T11:00',\n *         endDate        : '2019-01-01T13:00',\n *         name           : 'Lunch',\n *         // this time range should repeat every day\n *         recurrenceRule : 'FREQ=DAILY'\n *     }]\n * });\n *\n * const scheduler = new Scheduler({\n *     ...\n *     features : {\n *         timeRanges : true\n *     },\n *\n *     crudManager : {\n *         // store for \"timeRanges\" feature\n *         timeRangeStore\n *     }\n * });\n * ```\n *\n * @extends Scheduler/feature/AbstractTimeRanges\n * @classtype timeRanges\n * @feature\n * @demo Scheduler/timeranges\n */\nexport default class TimeRanges extends AbstractTimeRanges.mixin(AttachToProjectMixin) {\n    //region Config\n\n    static get $name() {\n        return 'TimeRanges';\n    }\n\n    static get defaultConfig() {\n        return {\n            store : true\n        };\n    }\n\n    static configurable = {\n        /**\n         * Store that holds the time ranges (using the {@link Scheduler.model.TimeSpan} model or subclass thereof).\n         * A store will be automatically created if none is specified.\n         * @config {Core.data.Store|StoreConfig}\n         * @category Misc\n         */\n        store : {\n            modelClass : TimeSpan\n        },\n\n        /**\n         * The interval (as amount of ms) defining how frequently the current timeline will be updated\n         * @config {Number}\n         * @default\n         * @category Misc\n         */\n        currentTimeLineUpdateInterval : 10000,\n\n        /**\n         * The date format to show in the header for the current time line (when {@link #config-showCurrentTimeLine} is configured).\n         * See {@link Core.helper.DateHelper} for the possible formats to use.\n         * @config {String}\n         * @default\n         * @category Common\n         */\n        currentDateFormat : 'HH:mm',\n\n        /**\n         * Show a line indicating current time. Either `true` or `false` or a {@link Scheduler.model.TimeSpan}\n         * configuration object to apply to this special time range (allowing you to provide a custom text):\n         *\n         * ```javascript\n         * showCurrentTimeLine : {\n         *     name : 'Now'\n         * }\n         * ```\n         *\n         * The line carries the CSS class name `b-sch-current-time`, and this may be used to add custom styling to it.\n         *\n         * @prp {Boolean|TimeSpanConfig}\n         * @default\n         * @category Common\n         */\n        showCurrentTimeLine : false\n    }\n\n    //endregion\n\n    //region Init & destroy\n\n    doDestroy() {\n        this.storeDetacher?.();\n\n        super.doDestroy();\n    }\n\n    /**\n     * Returns the TimeRanges which occur within the client Scheduler's time axis.\n     * @property {Scheduler.model.TimeSpan[]}\n     */\n    get timeRanges() {\n        const me        = this;\n\n        if (!me._timeRanges) {\n            const { store } = me;\n\n            let { records } = store;\n\n            if (store.recurringEvents) {\n                const {\n                    startDate,\n                    endDate\n                } = me.client.timeAxis;\n\n                records = records.flatMap(timeSpan => {\n                    // Collect occurrences for the recurring events in the record set\n                    if (timeSpan.isRecurring) {\n                        return timeSpan.getOccurrencesForDateRange(startDate, endDate);\n                    }\n\n                    return timeSpan;\n                });\n            }\n\n            if (me.currentTimeLine) {\n                // Avoid polluting store records\n                if (!store.recurringEvents) {\n                    records = records.slice();\n                }\n\n                records.push(me.currentTimeLine);\n            }\n\n            me._timeRanges = records;\n        }\n\n        return me._timeRanges;\n    }\n    //endregion\n\n    //region Current time line\n\n    attachToProject(project) {\n        super.attachToProject(project);\n        const me = this;\n\n        me.projectTimeZoneChangeDetacher?.();\n\n        if (me.showCurrentTimeLine) {\n\n            // Update currentTimeLine immediately after a time zone change\n            me.projectTimeZoneChangeDetacher = me.client.project?.ion({ timeZoneChange : () => me.updateCurrentTimeLine() });\n\n            // Update currentTimeLine if its already created\n            if (me.currentTimeLine) {\n                me.updateCurrentTimeLine();\n            }\n        }\n    }\n\n    initCurrentTimeLine() {\n        const me = this;\n\n        if (me.currentTimeLine || !me.showCurrentTimeLine) {\n            return;\n        }\n\n        const data = typeof me.showCurrentTimeLine === 'object' ? me.showCurrentTimeLine : {};\n\n        me.currentTimeLine = me.store.modelClass.new({\n            // eslint-disable-next-line quote-props\n            'id' : 'currentTime',\n            cls  : 'b-sch-current-time'\n        }, data);\n\n        me.currentTimeInterval = me.setInterval(() => me.updateCurrentTimeLine(), me.currentTimeLineUpdateInterval);\n\n        me._timeRanges = null;\n\n        me.updateCurrentTimeLine();\n    }\n\n    updateCurrentTimeLine() {\n        const\n            me                  = this,\n            { currentTimeLine } = me;\n\n        currentTimeLine._inTimeZone = me.project?.timeZone;\n        currentTimeLine.setLocalDate('startDate', new Date());\n        currentTimeLine.endDate = currentTimeLine.startDate;\n\n        if (!currentTimeLine.originalData.name) {\n            currentTimeLine.name = DateHelper.format(currentTimeLine.startDate, me.currentDateFormat);\n        }\n\n        me.renderRanges();\n    }\n\n    hideCurrentTimeLine() {\n        const me = this;\n\n        if (!me.currentTimeLine) {\n            return;\n        }\n\n        me.clearInterval(me.currentTimeInterval);\n        me.currentTimeLine = null;\n\n        me.refresh();\n    }\n\n    updateShowCurrentTimeLine(show) {\n        if (show) {\n            this.initCurrentTimeLine();\n        }\n        else {\n            this.hideCurrentTimeLine();\n        }\n    }\n\n    //endregion\n\n    //region Menu items\n\n    /**\n     * Adds a menu item to show/hide current time line.\n     * @param {Object} options Contains menu items and extra data retrieved from the menu target.\n     * @param {Grid.column.Column} options.column Column for which the menu will be shown\n     * @param {Object<String,MenuItemConfig|Boolean|null>} options.items A named object to describe menu items\n     * @internal\n     */\n    populateTimeAxisHeaderMenu({ column, items }) {\n        items.currentTimeLine = {\n            weight   : 400,\n            text     : this.L('L{showCurrentTimeLine}'),\n            checked  : this.showCurrentTimeLine,\n            onToggle : ({ checked }) => {\n                this.showCurrentTimeLine = checked;\n            }\n        };\n    }\n\n    //endregion\n\n    //region Store\n\n    attachToStore(store) {\n        const me = this;\n\n        let renderRanges = false;\n\n        // if we had some store assigned before we need to detach it\n        if (me.storeDetacher) {\n            me.storeDetacher();\n            // then we'll need to render ranges provided by the new store\n            renderRanges = true;\n        }\n\n        me.storeDetacher = store.ion({\n            change  : 'onStoreChange',\n            refresh : 'onStoreChange',\n            thisObj : me\n        });\n\n        me._timeRanges = null;\n\n        // render ranges if needed\n        renderRanges && me.renderRanges();\n    }\n\n    /**\n     * Returns the {@link Core.data.Store store} used by this feature\n     * @property {Core.data.Store}\n     * @category Misc\n     */\n    get store() {\n        return this.client.project.timeRangeStore;\n    }\n\n    updateStore(store) {\n        const\n            me          = this,\n            { client }  = me,\n            { project } = client;\n\n        store = project.timeRangeStore;\n\n        me.attachToStore(store);\n\n        // timeRanges can be set on scheduler/gantt, for convenience. Should only be processed by the TimeRanges and not\n        // any subclasses\n        if (client.timeRanges && !client._timeRangesExposed) {\n            store.add(client.timeRanges);\n            delete client.timeRanges;\n        }\n    }\n\n    // Called by ProjectConsumer after a new store is assigned at runtime\n    attachToTimeRangeStore(store) {\n        this.store = store;\n    }\n\n    resolveTimeRangeRecord(el) {\n        return this.store.getById(el.closest(this.baseSelector).dataset.id);\n    }\n\n    onStoreChange({ type, action }) {\n        const me = this;\n\n        // Force re-evaluating of which ranges to consider for render\n        me._timeRanges = null;\n\n        // https://github.com/bryntum/support/issues/1398 - checking also if scheduler is visible to change elements\n        if (me.disabled || !me.client.isVisible || me.isConfiguring || (type === 'refresh' && action !== 'batch')) {\n            return;\n        }\n\n        me.client.runWithTransition(() => me.renderRanges(), !me.client.refreshSuspended);\n    }\n\n    //endregion\n\n    //region Drag\n\n    onDragStart(event) {\n        const\n            me                = this,\n            { context }       = event,\n            record            = me.resolveTimeRangeRecord(context.element.closest(me.baseSelector)),\n            rangeBodyEl       = me.getBodyElementByRecord(record);\n\n        context.relatedElements = [rangeBodyEl];\n\n        Object.assign(context, {\n            record,\n            rangeBodyEl,\n            originRangeX : DomHelper.getTranslateX(rangeBodyEl),\n            originRangeY : DomHelper.getTranslateY(rangeBodyEl)\n        });\n\n        super.onDragStart(event);\n\n        me.showTip(context);\n    }\n\n    onDrop(event) {\n        const { context } = event;\n\n        if (!context.valid) {\n            return this.onInvalidDrop({ context });\n        }\n\n        const\n            me          = this,\n            { client }  = me,\n            { record }  = context,\n            box         = Rectangle.from(context.rangeBodyEl),\n            newStart    = client.getDateFromCoordinate(box.getStart(client.rtl, client.isHorizontal), 'round', false),\n            wasModified = (record.startDate - newStart !== 0);\n\n        if (wasModified) {\n            record.setStartDate(newStart);\n        }\n        else {\n            me.onInvalidDrop();\n        }\n\n        me.destroyTip();\n\n        super.onDrop(event);\n    }\n\n    //endregion\n\n    //region Resize\n\n    onResizeStart({ context }) {\n        const\n            me          = this,\n            record      = me.resolveTimeRangeRecord(context.element.closest(me.baseSelector)),\n            rangeBodyEl = me.getBodyElementByRecord(record);\n\n        Object.assign(context, {\n            record,\n            rangeBodyEl\n        });\n\n        me.showTip(context);\n    }\n\n    onResizeDrag({ context }) {\n        const\n            me              = this,\n            { rangeBodyEl } = context;\n\n        if (me.client.isVertical) {\n            if (context.edge === 'top') {\n                DomHelper.setTranslateY(rangeBodyEl, context.newY);\n            }\n\n            rangeBodyEl.style.height = context.newHeight + 'px';\n        }\n        else {\n            if (context.edge === 'left') {\n                DomHelper.setTranslateX(rangeBodyEl, context.newX);\n            }\n\n            rangeBodyEl.style.width = context.newWidth + 'px';\n        }\n    }\n\n    onResize({ context }) {\n        if (!context.valid) {\n            return this.onInvalidDrop({ context });\n        }\n\n        const\n            me          = this,\n            { client }  = me,\n            { rtl }     = client,\n            record      = context.record,\n            box         = Rectangle.from(context.element),\n            startPos    = box.getStart(rtl, client.isHorizontal),\n            endPos      = box.getEnd(rtl, client.isHorizontal),\n            newStart    = client.getDateFromCoordinate(startPos, 'round', false),\n            isStart     = (rtl && context.edge === 'right') || (!rtl && context.edge === 'left') || context.edge === 'top',\n            newEnd      = client.getDateFromCoordinate(endPos, 'round', false),\n            wasModified = (isStart && record.startDate - newStart !== 0) ||\n                (newEnd && record.endDate - newEnd !== 0);\n\n        if (wasModified && newEnd > newStart) {\n            if (isStart) {\n                // could be that the drag operation placed the range with start/end outside the axis\n                record.setStartDate(newStart, false);\n            }\n            else {\n                record.setEndDate(newEnd, false);\n            }\n        }\n        else {\n            me.onInvalidResize({ context });\n        }\n\n        me.destroyTip();\n    }\n\n    onInvalidResize({ context }) {\n        const me = this;\n\n        me.resize.reset();\n        // Allow DomSync to reapply original state\n        context.rangeBodyEl.parentElement.lastDomConfig = context.rangeBodyEl.lastDomConfig = null;\n        me.renderRanges();\n\n        me.destroyTip();\n    }\n\n    //endregion\n}\n\nGridFeatureManager.registerFeature(TimeRanges, false, ['Scheduler', 'Gantt']);\n","import Base from '../../../Core/Base.js';\n\n/**\n * @module Scheduler/view/mixin/SchedulerDom\n */\n\n/**\n * Mixin with EventModel and ResourceModel <-> HTMLElement mapping functions\n *\n * @mixin\n */\nexport default Target => class SchedulerDom extends (Target || Base) {\n    static get $name() {\n        return 'SchedulerDom';\n    }\n\n    //region Get\n\n    /**\n     * Returns a single HTMLElement representing an event record assigned to a specific resource.\n     * @param {Scheduler.model.AssignmentModel} assignmentRecord An assignment record\n     * @returns {HTMLElement} The element representing the event record\n     * @category DOM\n     */\n    getElementFromAssignmentRecord(assignmentRecord, returnWrapper = false) {\n        if (this.isPainted && assignmentRecord) {\n            let wrapper = this.foregroundCanvas.syncIdMap?.[assignmentRecord.id];\n\n            // When using links, the original might not be rendered but a link might\n            if (!wrapper && assignmentRecord.resource.hasLinks) {\n                for (const link of assignmentRecord.resource.$links) {\n                    wrapper = this.foregroundCanvas.syncIdMap?.[`${assignmentRecord.id}_${link.id}`];\n\n                    if (wrapper) {\n                        break;\n                    }\n                }\n            }\n\n            // Wrapper wont have syncIdMap when saving dragcreated event from editor\n            return returnWrapper ? wrapper : wrapper?.syncIdMap?.event;\n        }\n\n        return null;\n    }\n\n    /**\n     * Returns a single HTMLElement representing an event record assigned to a specific resource.\n     * @param {Scheduler.model.EventModel} eventRecord An event record\n     * @param {Scheduler.model.ResourceModel} resourceRecord A resource record\n     * @returns {HTMLElement} The element representing the event record\n     * @category DOM\n     */\n    getElementFromEventRecord(eventRecord, resourceRecord = eventRecord.resources?.[0], returnWrapper = false) {\n        if (eventRecord.isResourceTimeRange) {\n            const wrapper = this.foregroundCanvas.syncIdMap?.[eventRecord.domId];\n\n            return returnWrapper ? wrapper : wrapper?.syncIdMap.event;\n        }\n\n        const assignmentRecord = this.assignmentStore.getAssignmentForEventAndResource(eventRecord, resourceRecord);\n        return this.getElementFromAssignmentRecord(assignmentRecord, returnWrapper);\n    }\n\n    /**\n     * Returns all the HTMLElements representing an event record.\n     *\n     * @param {Scheduler.model.EventModel} eventRecord An event record\n     * @param {Scheduler.model.ResourceModel} [resourceRecord] A resource record\n     *\n     * @returns {HTMLElement[]} The element(s) representing the event record\n     * @category DOM\n     */\n    getElementsFromEventRecord(eventRecord, resourceRecord, returnWrapper = false) {\n        // Single event instance, as array\n        if (resourceRecord) {\n            return [this.getElementFromEventRecord(eventRecord, resourceRecord, returnWrapper)];\n        }\n        // All instances\n        else {\n            return eventRecord.resources.reduce((result, resourceRecord) => {\n                const el = this.getElementFromEventRecord(eventRecord, resourceRecord, returnWrapper);\n\n                el && result.push(el);\n\n                return result;\n            }, []);\n        }\n    }\n\n    //endregion\n\n    //region Resolve\n\n    /**\n     * Resolves the resource based on a dom element or event. In vertical mode, if resolving from an element higher up in\n     * the hierarchy than event elements, then it is required to supply an coordinates since resources are virtual\n     * columns.\n     * @param {HTMLElement|Event} elementOrEvent The HTML element or DOM event to resolve a resource from\n     * @param {Number[]} [xy] X and Y coordinates, required in some cases in vertical mode, disregarded in horizontal\n     * @returns {Scheduler.model.ResourceModel} The resource corresponding to the element, or null if not found.\n     * @category DOM\n     */\n    resolveResourceRecord(elementOrEvent, xy) {\n        return this.currentOrientation.resolveRowRecord(elementOrEvent, xy);\n    }\n\n    /**\n     * Product agnostic method which yields the {@link Scheduler.model.ResourceModel} record which underpins the row which\n     * encapsulates the passed element. The element can be a grid cell, or an event element, and the result\n     * will be a {@link Scheduler.model.ResourceModel}\n     * @param {HTMLElement|Event} elementOrEvent The HTML element or DOM event to resolve a record from\n     * @returns {Scheduler.model.ResourceModel} The resource corresponding to the element, or null if not found.\n     */\n    resolveRowRecord(elementOrEvent) {\n        return this.resolveResourceRecord(elementOrEvent);\n    }\n\n    /**\n     * Returns the event record for a DOM element\n     * @param {HTMLElement|Event} elementOrEvent The DOM node to lookup\n     * @returns {Scheduler.model.EventModel} The event record\n     * @category DOM\n     */\n    resolveEventRecord(elementOrEvent) {\n        if (elementOrEvent instanceof Event) {\n            elementOrEvent = elementOrEvent.target;\n        }\n\n        const element = elementOrEvent?.closest(this.eventSelector);\n\n        if (element) {\n            if (element.dataset.eventId) {\n                return this.eventStore.getById(element.dataset.eventId);\n            }\n\n            if (element.dataset.assignmentId) {\n                return this.assignmentStore.getById(element.dataset.assignmentId).event;\n            }\n        }\n\n        return null;\n    }\n\n    // Used by shared features to resolve an event or task\n    resolveTimeSpanRecord(element) {\n        return this.resolveEventRecord(element);\n    }\n\n    /**\n     * Returns an assignment record for a DOM element\n     * @param {HTMLElement} element The DOM node to lookup\n     * @returns {Scheduler.model.AssignmentModel} The assignment record\n     * @category DOM\n     */\n    resolveAssignmentRecord(element) {\n        const\n            eventElement     = element.closest(this.eventSelector),\n            assignmentRecord = eventElement && this.assignmentStore.getById(eventElement.dataset.assignmentId),\n            eventRecord      = eventElement && this.eventStore.getById(eventElement.dataset.eventId);\n\n        // When resolving a recurring event, we might be resolving an occurrence\n        return this.assignmentStore.getOccurrence(assignmentRecord, eventRecord);\n    }\n\n    //endregion\n\n    // Decide if a record is inside a collapsed tree node, or inside a collapsed group (using grouping feature)\n    isRowVisible(resourceRecord) {\n        // records in collapsed groups/branches etc are removed from processedRecords\n        return this.store.indexOf(resourceRecord) >= 0;\n    }\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n","import Base from '../../../Core/Base.js';\n\n/**\n * @module Scheduler/view/mixin/SchedulerDomEvents\n */\n\n/**\n * Mixin that handles dom events (click etc) for scheduler and rendered events.\n *\n * @mixin\n */\nexport default Target => class SchedulerDomEvents extends (Target || Base) {\n    static get $name() {\n        return 'SchedulerDomEvents';\n    }\n\n    //region Events\n\n    /**\n     * Triggered when user mousedowns over an empty area in the schedule.\n     * @event scheduleMouseDown\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Date} date Date at mouse position\n     * @param {Date} tickStartDate The start date of the current time axis tick\n     * @param {Date} tickEndDate The end date of the current time axis tick\n     * @param {Grid.row.Row} row Row under the mouse (in horizontal mode only)\n     * @param {Number} index Resource index\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} event Browser event\n     */\n\n    /**\n     * Triggered when mouse enters an empty area in the schedule.\n     * @event scheduleMouseEnter\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Date} date Date at mouse position\n     * @param {Date} tickStartDate The start date of the current time axis tick\n     * @param {Date} tickEndDate The end date of the current time axis tick\n     * @param {Grid.row.Row} row Row under the mouse (in horizontal mode only)\n     * @param {Number} index Resource index\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} event Browser event\n     */\n\n    /**\n     * Triggered when mouse leaves an empty area in the schedule.\n     * @event scheduleMouseLeave\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Date} date Date at mouse position\n     * @param {Date} tickStartDate The start date of the current time axis tick\n     * @param {Date} tickEndDate The end date of the current time axis tick\n     * @param {Grid.row.Row} row Row under the mouse (in horizontal mode only)\n     * @param {Number} index Resource index\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} event Browser event\n     */\n\n    /**\n     * Triggered when user mouseups over an empty area in the schedule.\n     * @event scheduleMouseUp\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Date} date Date at mouse position\n     * @param {Date} tickStartDate The start date of the current time axis tick\n     * @param {Date} tickEndDate The end date of the current time axis tick\n     * @param {Grid.row.Row} row Row under the mouse (in horizontal mode only)\n     * @param {Number} index Resource index\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} event Browser event\n     */\n\n    /**\n     * Triggered when user moves mouse over an empty area in the schedule.\n     * @event scheduleMouseMove\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Date} date Date at mouse position\n     * @param {Scheduler.model.TimeSpan} tick A record which encapsulates the time axis tick clicked on.\n     * @param {Number} tickIndex The index of the time axis tick clicked on.\n     * @param {Date} tickStartDate The start date of the current time axis tick\n     * @param {Date} tickEndDate The end date of the current time axis tick\n     * @param {Grid.row.Row} row Row under the mouse (in horizontal mode only)\n     * @param {Number} index Resource index\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} event Browser event\n     */\n\n    /**\n     * Triggered when user clicks an empty area in the schedule.\n     * @event scheduleClick\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Date} date Date at mouse position\n     * @param {Scheduler.model.TimeSpan} tick A record which encapsulates the time axis tick clicked on.\n     * @param {Number} tickIndex The index of the time axis tick clicked on.\n     * @param {Date} tickStartDate The start date of the current time axis tick\n     * @param {Date} tickEndDate The end date of the current time axis tick\n     * @param {Grid.row.Row} row Row under the mouse (in horizontal mode only)\n     * @param {Number} index Resource index\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} event Browser event\n     */\n\n    /**\n     * Triggered when user double-clicks an empty area in the schedule.\n     * @event scheduleDblClick\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Date} date Date at mouse position\n     * @param {Scheduler.model.TimeSpan} tick A record which encapsulates the time axis tick clicked on.\n     * @param {Number} tickIndex The index of the time axis tick clicked on.\n     * @param {Date} tickStartDate The start date of the current time axis tick\n     * @param {Date} tickEndDate The end date of the current time axis tick\n     * @param {Grid.row.Row} row Row under the mouse (in horizontal mode only)\n     * @param {Number} index Index of double-clicked resource\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} event Browser event\n     */\n\n    /**\n     * Triggered when user right-clicks an empty area in the schedule.\n     * @event scheduleContextMenu\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Date} date Date at mouse position\n     * @param {Scheduler.model.TimeSpan} tick A record which encapsulates the time axis tick clicked on.\n     * @param {Number} tickIndex The index of the time axis tick clicked on.\n     * @param {Date} tickStartDate The start date of the current time axis tick\n     * @param {Date} tickEndDate The end date of the current time axis tick\n     * @param {Grid.row.Row} row Row under the mouse (in horizontal mode only)\n     * @param {Number} index Resource index\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} event Browser event\n     */\n\n    /**\n     * Triggered for mouse down on an event.\n     * @event eventMouseDown\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Scheduler.model.EventModel} eventRecord Event record\n     * @param {Scheduler.model.AssignmentModel} assignmentRecord Assignment record\n     * @param {MouseEvent} event Browser event\n     */\n\n    /**\n     * Triggered for mouse up on an event.\n     * @event eventMouseUp\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Scheduler.model.EventModel} eventRecord Event record\n     * @param {Scheduler.model.AssignmentModel} assignmentRecord Assignment record\n     * @param {MouseEvent} event Browser event\n     */\n\n    /**\n     * Triggered for click on an event.\n     * @event eventClick\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Scheduler.model.EventModel} eventRecord Event record\n     * @param {Scheduler.model.AssignmentModel} assignmentRecord Assignment record\n     * @param {MouseEvent} event Browser event\n     */\n\n    /**\n     * Triggered for double-click on an event.\n     * @event eventDblClick\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Scheduler.model.EventModel} eventRecord Event record\n     * @param {Scheduler.model.AssignmentModel} assignmentRecord Assignment record\n     * @param {MouseEvent} event Browser event\n     */\n\n    /**\n     * Triggered for right-click on an event.\n     * @event eventContextMenu\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Scheduler.model.EventModel} eventRecord Event record\n     * @param {Scheduler.model.AssignmentModel} assignmentRecord Assignment record\n     * @param {MouseEvent} event Browser event\n     */\n\n    /**\n     * Triggered when the mouse enters an event bar.\n     * @event eventMouseEnter\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Scheduler.model.EventModel} eventRecord Event record\n     * @param {Scheduler.model.AssignmentModel} assignmentRecord Assignment record\n     * @param {MouseEvent} event Browser event\n     */\n\n    /**\n     * Triggered when the mouse leaves an event bar.\n     * @event eventMouseLeave\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Scheduler.model.EventModel} eventRecord Event record\n     * @param {Scheduler.model.AssignmentModel} assignmentRecord Assignment record\n     * @param {MouseEvent} event Browser event\n     */\n\n    /**\n     * Triggered for mouse over events when moving into and within an event bar.\n     *\n     * Note that `mouseover` events bubble, therefore this event will fire while moving from\n     * element to element *within* an event bar.\n     *\n     * _If only an event when moving into the event bar is required, use the {@link #event-eventMouseEnter} event._\n     * @event eventMouseOver\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Scheduler.model.EventModel} eventRecord Event record\n     * @param {Scheduler.model.AssignmentModel} assignmentRecord Assignment record\n     * @param {MouseEvent} event Browser event\n     */\n\n    /**\n     * Triggered for mouse out events within and when moving out of an event bar.\n     *\n     * Note that `mouseout` events bubble, therefore this event will fire while moving from\n     * element to element *within* an event bar.\n     *\n     * _If only an event when moving out of the event bar is required, use the {@link #event-eventMouseLeave} event._\n     * @event eventMouseOut\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Scheduler.model.EventModel} eventRecord Event record\n     * @param {Scheduler.model.AssignmentModel} assignmentRecord Assignment record\n     * @param {MouseEvent} event Browser event\n     */\n\n    //endregion\n\n    //region Event handling\n\n    getTimeSpanMouseEventParams(eventElement, event) {\n        // May have hovered a record being removed / faded out\n        const eventRecord = this.resolveEventRecord(eventElement);\n\n        return eventRecord && {\n            eventRecord,\n            resourceRecord   : this.resolveResourceRecord(eventElement),\n            assignmentRecord : this.resolveAssignmentRecord(eventElement),\n            eventElement,\n            event\n        };\n    }\n\n    getScheduleMouseEventParams(cellData, event) {\n        const resourceRecord = this.isVertical ? this.resolveResourceRecord(event) : this.store.getById(cellData.id);\n\n        return { resourceRecord };\n    }\n\n    /**\n     * Relays keydown events as eventkeydown if we have a selected task.\n     * @private\n     */\n    onElementKeyDown(event) {\n        const\n            result = super.onElementKeyDown(event),\n            me     = this;\n\n        if (me.selectedEvents.length) {\n            me.trigger(me.scheduledEventName + 'KeyDown', {\n                eventRecords      : me.selectedEvents,\n                assignmentRecords : me.selectedAssignments,\n                event,\n                // TODO REMOVE FOR 6.0\n                eventRecord       : me.selectedEvents,\n                assignmentRecord  : me.selectedAssignments\n            });\n        }\n\n        return result;\n    }\n\n    /**\n     * Relays keyup events as eventkeyup if we have a selected task.\n     * @private\n     */\n    onElementKeyUp(event) {\n        super.onElementKeyUp(event);\n\n        const me = this;\n\n        if (me.selectedEvents.length) {\n            me.trigger(me.scheduledEventName + 'KeyUp', {\n                eventRecords      : me.selectedEvents,\n                assignmentRecords : me.selectedAssignments,\n                event,\n\n                // TODO REMOVE FOR 5.0\n                eventRecord      : me.selectedEvents,\n                assignmentRecord : me.selectedAssignments\n            });\n        }\n    }\n\n    //endregion\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n","import Base from '../../../Core/Base.js';\nimport DomClassList from '../../../Core/helper/util/DomClassList.js';\nimport HorizontalLayoutStack from '../../eventlayout/HorizontalLayoutStack.js';\nimport HorizontalLayoutPack from '../../eventlayout/HorizontalLayoutPack.js';\nimport BrowserHelper from '../../../Core/helper/BrowserHelper.js';\nimport DomHelper from '../../../Core/helper/DomHelper.js';\nimport EventHelper from '../../../Core/helper/EventHelper.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\nimport StringHelper from '../../../Core/helper/StringHelper.js';\nimport VersionHelper from '../../../Core/helper/VersionHelper.js';\nimport Rectangle from '../../../Core/helper/util/Rectangle.js';\n\n/**\n * @module Scheduler/view/mixin/SchedulerEventRendering\n */\n\n/**\n * Layout data object used to lay out an event record.\n * @typedef {Object} EventRenderData\n * @property {Scheduler.model.EventModel} eventRecord Event instance\n * @property {Scheduler.model.ResourceModel} resourceRecord Assigned resource\n * @property {Scheduler.model.AssignmentModel} assignmentRecord Assignment instance\n * @property {Number} startMS Event start date time in milliseconds\n * @property {Number} endMS Event end date in milliseconds\n * @property {Number} height Calculated event element height\n * @property {Number} width Calculated event element width\n * @property {Number} top Calculated event element top position in the row (or column)\n * @property {Number} left Calculated event element left position in the row (or column)\n */\n\n/**\n * Functions to handle event rendering (EventModel -> dom elements).\n *\n * @mixin\n */\nexport default Target => class SchedulerEventRendering extends (Target || Base) {\n    static get $name() {\n        return 'SchedulerEventRendering';\n    }\n\n    //region Default config\n\n    static get configurable() {\n        return {\n            /**\n             * Position of the milestone text:\n             * * 'inside' - for short 1-char text displayed inside the diamond, not applicable when using\n             *   {@link #config-milestoneLayoutMode})\n             * * 'outside' - for longer text displayed outside the diamond, but inside it when using\n             *   {@link #config-milestoneLayoutMode}\n             * * 'always-outside' - outside even when combined with {@link #config-milestoneLayoutMode}\n             *\n             * @prp {'inside'|'outside'|'always-outside'}\n             * @default\n             * @category Milestones\n             */\n            milestoneTextPosition : 'outside',\n\n            /**\n             * How to align milestones in relation to their startDate. Only applies when using a `milestoneLayoutMode`\n             * other than `default`. Valid values are:\n             * * start\n             * * center (default)\n             * * end\n             * @prp {'start'|'center'|'end'}\n             * @default\n             * @category Milestones\n             */\n            milestoneAlign : 'center',\n\n            /**\n             * Factor representing the average char width in pixels used to determine milestone width when configured\n             * with `milestoneLayoutMode: 'estimate'`.\n             * @prp {Number}\n             * @default\n             * @category Milestones\n             */\n            milestoneCharWidth : 10,\n\n            /**\n             * How to handle milestones during event layout. How the milestones are displayed when part of the layout\n             * are controlled using {@link #config-milestoneTextPosition}.\n             *\n             * Options are:\n             * * default - Milestones do not affect event layout\n             * * estimate - Milestone width is estimated by multiplying text length with Scheduler#milestoneCharWidth\n             * * data - Milestone width is determined by checking EventModel#milestoneWidth\n             * * measure - Milestone width is determined by measuring label width\n             * Please note that currently text width is always determined using EventModel#name.\n             * Also note that only 'default' is supported by eventStyles line, dashed and minimal.\n             * @prp {'default'|'estimate'|'data'|'measure'}\n             * @default\n             * @category Milestones\n             */\n            milestoneLayoutMode : 'default',\n\n            /**\n             * Defines how to handle overlapping events. Valid values are:\n             * - `stack`, adjusts row height (only horizontal)\n             * - `pack`, adjusts event height\n             * - `mixed`, allows two events to overlap, more packs (only vertical)\n             * - `none`, allows events to overlap\n             *\n             * This config can also accept an object:\n             *\n             * ```javascript\n             * new Scheduler({\n             *     eventLayout : { type : 'stack' }\n             * })\n             * ```\n             *\n             * @prp {'stack'|'pack'|'mixed'|'none'|Object}\n             * @default\n             * @category Scheduled events\n             */\n            eventLayout : 'stack',\n\n            /**\n             * Override this method to provide a custom sort function to sort any overlapping events. See {@link\n             * #config-overlappingEventSorter} for more details.\n             *\n             * @param  {Scheduler.model.EventModel} a First event\n             * @param  {Scheduler.model.EventModel} b Second event\n             * @returns {Number} Return -1 to display `a` above `b`, 1 for `b` above `a`\n             * @member {Function} overlappingEventSorter\n             * @category Misc\n             */\n            /**\n             * Override this method to provide a custom sort function to sort any overlapping events. This only applies\n             * to the horizontal mode, where the order the events are sorted in determines their vertical placement\n             * within a resource.\n             *\n             * By default, overlapping events are laid out based on the start date. If the start date is equal, events\n             * with earlier end date go first. And lastly the name of events is taken into account.\n             *\n             * Here's a sample sort function, sorting on start- and end date. If this function returns -1, then event\n             * `a` is placed above event `b`:\n             *\n             * ```javascript\n             * overlappingEventSorter(a, b) {\n             *\n             *   const startA = a.startDate, endA = a.endDate;\n             *   const startB = b.startDate, endB = b.endDate;\n             *\n             *   const sameStart = (startA - startB === 0);\n             *\n             *   if (sameStart) {\n             *     return endA > endB ? -1 : 1;\n             *   } else {\n             *     return (startA < startB) ? -1 : 1;\n             *   }\n             * }\n             * ```\n             *\n             * NOTE: The algorithms (stack, pack) that lay the events out expects them to be served in chronological\n             * order, be sure to first sort by `startDate` to get predictable results.\n             *\n             * @param  {Scheduler.model.EventModel} a First event\n             * @param  {Scheduler.model.EventModel} b Second event\n             * @returns {Number} Return -1 to display `a` above `b`, 1 for `b` above `a`\n             * @config {function}\n             * @category Misc\n             */\n            overlappingEventSorter : null,\n\n            /**\n             * Deprecated, to be removed in version 6.0. Replaced by {@link #config-overlappingEventSorter}.\n             * @deprecated Since 5.0. Use {@link #config-overlappingEventSorter} instead.\n             * @config {function}\n             */\n            horizontalEventSorterFn : null,\n\n            /**\n             * Control how much space to leave between the first event/last event and the resources edge (top/bottom\n             * margin within the resource row in horizontal mode, left/right margin within the resource column in\n             * vertical mode), in px. Defaults to the value of {@link Scheduler.view.Scheduler#config-barMargin}.\n             *\n             * Can be configured per resource by setting {@link Scheduler.model.ResourceModel#field-resourceMargin\n             * resource.resourceMargin}.\n             *\n             * @prp {Number}\n             * @category Scheduled events\n             */\n            resourceMargin : null,\n\n            /**\n             * By default, scheduler fade events in on load. Specify `false` to prevent this animation or specify one\n             * of the available animation types to use it (`true` equals `'fade-in'`):\n             * * fade-in (default)\n             * * slide-from-left\n             * * slide-from-top\n             * ```\n             * // Slide events in from the left on load\n             * scheduler = new Scheduler({\n             *     useInitialAnimation : 'slide-from-left'\n             * });\n             * ```\n             * @prp {Boolean|String}\n             * @default\n             * @category Misc\n             */\n            useInitialAnimation : true,\n\n            /**\n             * An empty function by default, but provided so that you can override it. This function is called each time\n             * an event is rendered into the schedule to render the contents of the event. It's called with the event,\n             * its resource and a `renderData` object which allows you to populate data placeholders inside the event\n             * template. **IMPORTANT** You should never modify any data on the EventModel inside this method.\n             *\n             * By default, the DOM markup of an event bar includes placeholders for 'cls' and 'style'. The cls property\n             * is a {@link Core.helper.util.DomClassList} which will be added to the event element. The style property\n             * is an inline style declaration for the event element.\n             *\n             * IMPORTANT: When returning content, be sure to consider how that content should be encoded to avoid XSS\n             * (Cross-Site Scripting) attacks. This is especially important when including user-controlled data such as\n             * the event's `name`. The function {@link Core.helper.StringHelper#function-encodeHtml-static} as well as\n             * {@link Core.helper.StringHelper#function-xss-static} can be helpful in these cases.\n             *\n             * ```javascript\n             *  eventRenderer({ eventRecord, resourceRecord, renderData }) {\n             *      renderData.style = 'color:white';                 // You can use inline styles too.\n             *\n             *      // Property names with truthy values are added to the resulting elements CSS class.\n             *      renderData.cls.isImportant = this.isImportant(eventRecord);\n             *      renderData.cls.isModified = eventRecord.isModified;\n             *\n             *      // Remove a class name by setting the property to false\n             *      renderData.cls[scheduler.generatedIdCls] = false;\n             *\n             *      // Or, you can treat it as a string, but this is less efficient, especially\n             *      // if your renderer wants to *remove* classes that may be there.\n             *      renderData.cls += ' extra-class';\n             *\n             *      return StringHelper.xss`${DateHelper.format(eventRecord.startDate, 'YYYY-MM-DD')}: ${eventRecord.name}`;\n             *  }\n             * ```\n             *\n             * @param {Object} detail An object containing the information needed to render an Event.\n             * @param {Scheduler.model.EventModel} detail.eventRecord The event record.\n             * @param {Scheduler.model.ResourceModel} detail.resourceRecord The resource record.\n             * @param {Scheduler.model.AssignmentModel} detail.assignmentRecord The assignment record.\n             * @param {Object} detail.renderData An object containing details about the event rendering.\n             * @param {Scheduler.model.EventModel} detail.renderData.event The event record.\n             * @param {Core.helper.util.DomClassList|String} detail.renderData.cls An object whose property names\n             * represent the CSS class names to be added to the event bar element. Set a property's value to truthy or\n             * falsy to add or remove the class name based on the property name. Using this technique, you do not have\n             * to know whether the class is already there, or deal with concatenation.\n             * @param {Core.helper.util.DomClassList|String} detail.renderData.wrapperCls An object whose property names\n             * represent the CSS class names to be added to the event wrapper element. Set a property's value to truthy\n             * or falsy to add or remove the class name based on the property name. Using this technique, you do not\n             * have to know whether the class is already there, or deal with concatenation.\n             * @param {Core.helper.util.DomClassList|String} detail.renderData.iconCls An object whose property names\n             * represent the CSS class names to be added to an event icon element.\n             *\n             * Note that an element carrying this icon class is injected into the event element *after*\n             * the renderer completes, *before* the renderer's created content.\n             *\n             * To disable this if the renderer takes full control and creates content using the iconCls,\n             * you can set `renderData.iconCls = null`.\n             * @param {Number} detail.renderData.left Vertical offset position (in pixels) on the time axis.\n             * @param {Number} detail.renderData.width Width in pixels of the event element.\n             * @param {Number} detail.renderData.height Height in pixels of the event element.\n             * @param {String|Object<String,String>} detail.renderData.style Inline styles for the event bar DOM element.\n             * Use either 'border: 1px solid black' or `{ border: '1px solid black' }`\n             * @param {String|Object<String,String>} detail.renderData.wrapperStyle Inline styles for wrapper of the\n             * event bar DOM element. Use either 'border: 1px solid green' or `{ border: '1px solid green' }`\n             * @param {String} detail.renderData.eventStyle The `eventStyle` of the event. Use this to apply custom\n             * styles to the event DOM element\n             * @param {String} detail.renderData.eventColor The `eventColor` of the event. Use this to set a custom\n             * color for the rendered event\n             * @param {DomConfig[]} detail.renderData.children An array of DOM configs used as children to the\n             * `b-sch-event` element. Can be populated with additional DOM configs to have more control over contents.\n             * @returns {String|Object} A simple string, or a custom object which will be applied to the\n             * {@link #config-eventBodyTemplate}, creating the actual HTML\n             * @config {Function}\n             * @category Scheduled events\n             */\n            eventRenderer : null,\n\n            /**\n             * `this` reference for the {@link #config-eventRenderer} function\n             * @config {Object}\n             * @category Scheduled events\n             */\n            eventRendererThisObj : null,\n\n            /**\n             * Field from EventModel displayed as text in the bar when rendering\n             * @config {String}\n             * @default\n             * @category Scheduled events\n             */\n            eventBarTextField : 'name',\n\n            /**\n             * The template used to generate the markup of your events in the scheduler. To 'populate' the\n             * eventBodyTemplate with data, use the {@link #config-eventRenderer} method.\n             * @config {Function}\n             * @category Scheduled events\n             */\n            eventBodyTemplate : null,\n\n            /**\n             * The class responsible for the packing horizontal event layout process.\n             * Override this to take control over the layout process.\n             * @config {Scheduler.eventlayout.HorizontalLayout}\n             * @typings {typeof HorizontalLayout}\n             * @default\n             * @private\n             * @category Misc\n             */\n            horizontalLayoutPackClass : HorizontalLayoutPack,\n\n            /**\n             * The class name responsible for the stacking horizontal event layout process.\n             * Override this to take control over the layout process.\n             * @config {Scheduler.eventlayout.HorizontalLayout}\n             * @typings {typeof HorizontalLayout}\n             * @default\n             * @private\n             * @category Misc\n             */\n            horizontalLayoutStackClass : HorizontalLayoutStack,\n\n            /**\n             * A config object used to configure the resource columns in vertical mode.\n             * See {@link Scheduler.view.ResourceHeader} for more details on available properties.\n             *\n             * ```\n             * new Scheduler({\n             *   resourceColumns : {\n             *     columnWidth    : 100,\n             *     headerRenderer : ({ resourceRecord }) => `${resourceRecord.id} - ${resourceRecord.name}`\n             *   }\n             * })\n             * ```\n             * @config {ResourceHeaderConfig}\n             * @category Resources\n             */\n            resourceColumns : null,\n\n            /**\n             * Path to load resource images from. Used by the resource header in vertical mode and the\n             * {@link Scheduler.column.ResourceInfoColumn} in horizontal mode. Set this to display miniature\n             * images for each resource using their `image` or `imageUrl` fields.\n             *\n             * * `image` represents image name inside the specified `resourceImagePath`,\n             * * `imageUrl` represents fully qualified image URL.\n             *\n             *  If set and a resource has no `imageUrl` or `image` specified it will try show miniature using\n             *  the resource's name with {@link #config-resourceImageExtension} appended.\n             *\n             * **NOTE**: The path should end with a `/`:\n             *\n             * ```\n             * new Scheduler({\n             *   resourceImagePath : 'images/resources/'\n             * });\n             * ```\n             * @config {String}\n             * @category Resources\n             */\n            resourceImagePath : null,\n\n            /**\n             * Generic resource image, used when provided `imageUrl` or `image` fields or path calculated from resource\n             * name are all invalid. If left blank, resource name initials will be shown when no image can be loaded.\n             * @default\n             * @config {String}\n             * @category Resources\n             */\n            defaultResourceImageName : null,\n\n            /**\n             * Resource image extension, used when creating image path from resource name.\n             * @default\n             * @config {String}\n             * @category Resources\n             */\n            resourceImageExtension : '.jpg',\n\n            /**\n             * Controls how much space to leave between stacked event bars in px.\n             *\n             * Can be configured per resource by setting {@link Scheduler.model.ResourceModel#field-barMargin\n             * resource.barMargin}.\n             *\n             * @config {Number} barMargin\n             * @default\n             * @category Scheduled events\n             */\n\n            // Used to animate events on first render\n            isFirstRender : true,\n\n            initialAnimationDuration : 2000,\n\n            /**\n             * When an event bar has a width less than this value, it gets the CSS class `b-sch-event-narrow`\n             * added. You may apply custom CSS rules using this class.\n             *\n             * In vertical mode, this class causes the text to be rotated so that it runs vertically.\n             * @default\n             * @config {Number}\n             * @category Scheduled events\n             */\n            narrowEventWidth : 10,\n\n            internalEventLayout : null,\n            eventPositionMode   : 'translate',\n            eventScrollMode     : 'move'\n        };\n    }\n\n    //endregion\n\n    //region Settings\n\n    changeEventLayout(eventLayout) {\n        // Pass layout config to internal config to normalize its form\n        this.internalEventLayout = eventLayout;\n\n        // Return normalized string type\n        return this.internalEventLayout.type;\n    }\n\n    changeInternalEventLayout(eventLayout) {\n        return this.getEventLayout(eventLayout);\n    }\n\n    updateInternalEventLayout(eventLayout, oldEventLayout) {\n        const me = this;\n\n        if (oldEventLayout) {\n            me.element.classList.remove(`b-eventlayout-${oldEventLayout.type}`);\n        }\n\n        me.element.classList.add(`b-eventlayout-${eventLayout.type}`);\n\n        if (!me.isConfiguring) {\n            me.refreshWithTransition();\n\n            me.trigger('stateChange');\n        }\n    }\n\n    changeHorizontalEventSorterFn(fn) {\n        VersionHelper.deprecate('Scheduler', '6.0.0', 'Replaced by overlappingEventSorter()');\n        this.overlappingEventSorter = fn;\n    }\n\n    updateOverlappingEventSorter(fn) {\n        if (!this.isConfiguring) {\n            this.refreshWithTransition();\n        }\n    }\n\n    //endregion\n\n    //region Layout helpers\n\n    // Wraps string config to object with type\n    getEventLayout(value) {\n        if (value?.isModel) {\n            value = value.eventLayout || this.internalEventLayout;\n        }\n\n        if (typeof value === 'string') {\n            value = { type : value };\n        }\n\n        return value;\n    }\n\n    /**\n     * Get event layout handler. The handler decides the vertical placement of events within a resource.\n     * Returns null if no eventLayout is used (if {@link #config-eventLayout} is set to \"none\")\n     * @internal\n     * @returns {Scheduler.eventlayout.HorizontalLayout}\n     * @readonly\n     * @category Scheduled events\n     */\n    getEventLayoutHandler(eventLayout) {\n        const me = this;\n\n        if (!me.isHorizontal) {\n            return null;\n        }\n\n        const\n            { timeAxisViewModel, horizontal } = me,\n            { type }                          = eventLayout;\n\n        if (!me.layouts) {\n            me.layouts = {};\n        }\n\n        switch (type) {\n            // stack, adjust row height to fit all events\n            case 'stack': {\n                if (!me.layouts.horizontalStack) {\n                    me.layouts.horizontalStack = new me.horizontalLayoutStackClass(ObjectHelper.assign({\n                        scheduler                   : me,\n                        timeAxisViewModel,\n                        bandIndexToPxConvertFn      : horizontal.layoutEventVerticallyStack,\n                        bandIndexToPxConvertThisObj : horizontal\n                    }, eventLayout));\n                }\n\n                return me.layouts.horizontalStack;\n            }\n            // pack, fit all events in available height by adjusting their height\n            case 'pack': {\n                if (!me.layouts.horizontalPack) {\n                    me.layouts.horizontalPack = new me.horizontalLayoutPackClass(ObjectHelper.assign({\n                        scheduler                   : me,\n                        timeAxisViewModel,\n                        bandIndexToPxConvertFn      : horizontal.layoutEventVerticallyPack,\n                        bandIndexToPxConvertThisObj : horizontal\n                    }, eventLayout));\n                }\n\n                return me.layouts.horizontalPack;\n            }\n            default:\n                return null;\n        }\n    }\n\n    //endregion\n\n    //region Resource header/columns\n\n    // NOTE: The configs below are initially applied to the resource header in `TimeAxisColumn#set mode`\n\n    /**\n     * Use it to manipulate resource column properties at runtime.\n     * @property {Scheduler.view.ResourceHeader}\n     * @readonly\n     */\n    get resourceColumns() {\n        return this.timeAxisColumn?.resourceColumns || this._resourceColumns;\n    }\n\n    /**\n     * Get resource column width. Only applies to vertical mode. To set it, assign to\n     * `scheduler.resourceColumns.columnWidth`.\n     * @property {Number}\n     * @readonly\n     */\n    get resourceColumnWidth() {\n        return this.resourceColumns?.columnWidth || null;\n    }\n\n    //endregion\n\n    //region Event rendering\n\n    // Chainable function called with the events to render for a specific resource. Allows features to add/remove.\n    // Chained by ResourceTimeRanges\n    getEventsToRender(resource, events) {\n        return events;\n    }\n\n    /**\n     * Rerenders events for specified resource (by rerendering the entire row).\n     * @param {Scheduler.model.ResourceModel} resourceRecord\n     */\n    repaintEventsForResource(resourceRecord) {\n        this.currentOrientation.repaintEventsForResource(resourceRecord);\n    }\n\n    /**\n     * Rerenders the events for all resources connected to the specified event\n     * @param {Scheduler.model.EventModel} eventRecord\n     * @private\n     */\n    repaintEvent(eventRecord) {\n        const resources = this.eventStore.getResourcesForEvent(eventRecord);\n        resources.forEach(resourceRecord => this.repaintEventsForResource(resourceRecord));\n    }\n\n    // Returns a resource specific resourceMargin, falling back to Schedulers setting\n    // This fn could be made public to allow hooking it as an alternative to only setting this in data\n    getResourceMargin(resourceRecord) {\n        return resourceRecord?.resourceMargin ?? this.resourceMargin;\n    }\n\n    // Returns a resource specific barMargin, falling back to Schedulers setting\n    // This fn could be made public to allow hooking it as an alternative to only setting this in data\n    getBarMargin(resourceRecord) {\n        return resourceRecord?.barMargin ?? this.barMargin;\n    }\n\n    // Returns a resource specific rowHeight, falling back to Schedulers setting\n    // Prio order: Height from record, configured height\n    // This fn could be made public to allow hooking it as an alternative to only setting this in data\n    getResourceHeight(resourceRecord) {\n        return resourceRecord.rowHeight ?? (this.isHorizontal ? this.rowHeight : this.getResourceWidth(resourceRecord));\n    }\n\n    getResourceWidth(resourceRecord) {\n        return resourceRecord.columnWidth ?? this.resourceColumnWidth;\n    }\n\n    // Similar to getResourceHeight(), but for usage later in the process to take height set by renderers into account.\n    // Cant be used earlier in the process because then the row will grow\n    // Prio order: Height requested by renderer, height from record, configured height\n    getAppliedResourceHeight(resourceRecord) {\n        const row = this.getRowById(resourceRecord);\n\n        return row?.maxRequestedHeight ?? this.getResourceHeight(resourceRecord);\n    }\n\n    // Combined convenience getter for destructuring on calling side\n    // Second arg only passed for nested events, handled by NestedEvent feature\n    getResourceLayoutSettings(resourceRecord, parentEventRecord = null) {\n        const\n            resourceMargin = this.getResourceMargin(resourceRecord, parentEventRecord),\n            rowHeight      = this.getAppliedResourceHeight(resourceRecord, parentEventRecord);\n\n        return {\n            barMargin     : this.getBarMargin(resourceRecord, parentEventRecord),\n            contentHeight : Math.max(rowHeight - resourceMargin * 2, 1),\n            rowHeight,\n            resourceMargin\n        };\n    }\n\n    getEventStyle(eventRecord, resourceRecord) {\n        return eventRecord.eventStyle || resourceRecord.eventStyle || this.eventStyle;\n    }\n\n    getEventColor(eventRecord, resourceRecord) {\n        return eventRecord.eventColor || eventRecord.event?.eventColor || eventRecord.parent?.eventColor || resourceRecord.eventColor || this.eventColor;\n    }\n\n    //endregion\n\n    //region Template\n\n    /**\n     * Generates data used in the template when rendering an event. For example which css classes to use. Also applies\n     * #eventBodyTemplate and calls the {@link #config-eventRenderer}.\n     * @private\n     * @param {Scheduler.model.EventModel} eventRecord Event to generate data for\n     * @param {Scheduler.model.ResourceModel} resourceRecord Events resource\n     * @param {Boolean|Object} includeOutside Specify true to get boxes for timespans outside the rendered zone in both\n     * dimensions. This option is used when calculating dependency lines, and we need to include routes from timespans\n     * which may be outside the rendered zone.\n     * @param {Boolean} includeOutside.timeAxis Pass as `true` to include timespans outside the TimeAxis's bounds\n     * @param {Boolean} includeOutside.viewport Pass as `true` to include timespans outside the vertical timespan viewport's bounds.\n     * @returns {Object} Data to use in event template, or `undefined` if the event is outside the rendered zone.\n     */\n    generateRenderData(eventRecord, resourceRecord, includeOutside = { viewport : true }) {\n        // TODO: Change this fn to accept an assignment instead of event + resource\n        const\n            me               = this,\n            // generateRenderData calculates layout for events which are outside the vertical viewport\n            // because the RowManager needs to know a row height.\n            renderData       = me.currentOrientation.getTimeSpanRenderData(eventRecord, resourceRecord, includeOutside),\n            { isEvent }      = eventRecord,\n            { eventResize }  = me.features,\n            // Don't want events drag created to zero duration to render as milestones\n            isMilestone      = !eventRecord.meta.isDragCreating && eventRecord.isMilestone,\n            // $originalId allows lookup to yield same result for original resources and linked resources\n            assignmentRecord = isEvent && eventRecord.assignments.find(a => a.resourceId === resourceRecord.$originalId),\n            // Events inner element, will be populated by renderer and/or eventBodyTemplate\n            eventContent     = {\n                className : 'b-sch-event-content',\n                role      : 'presentation',\n                dataset   : {\n                    taskBarFeature : 'content'\n                }\n            };\n\n        if (renderData) {\n            renderData.tabIndex = '0';\n\n            let resizable = eventRecord.isResizable;\n\n            if (eventResize && resizable) {\n                if (renderData.startsOutsideView) {\n                    if (resizable === true) {\n                        resizable = 'end';\n                    }\n                    else if (resizable === 'start') {\n                        resizable = false;\n                    }\n                }\n                if (renderData.endsOutsideView) {\n                    if (resizable === true) {\n                        resizable = 'start';\n                    }\n                    else if (resizable === 'end') {\n                        resizable = false;\n                    }\n                }\n\n                // Let the feature veto start/end handles\n                if (resizable) {\n                    if (me.isHorizontal) {\n                        if ((!me.rtl && !eventResize.leftHandle) || (me.rtl && !eventResize.rightHandle)) {\n                            resizable = resizable === 'start' ? false : 'end';\n                        }\n                        else if ((!me.rtl && !eventResize.rightHandle) || (me.rtl && !eventResize.leftHandle)) {\n                            resizable = resizable === 'end' ? false : 'start';\n                        }\n                    }\n                    else {\n                        if (!eventResize.topHandle) {\n                            resizable = resizable === 'start' ? false : 'end';\n                        }\n                        else if (!eventResize.bottomHandle) {\n                            resizable = resizable === 'end' ? false : 'start';\n                        }\n                    }\n                }\n            }\n\n            // Event record cls properties are now DomClassList instances, so clone them\n            // so that they can be manipulated here and by renderers.\n            // Truthy value means the key will be added as a class name.\n            // ResourceTimeRanges applies custom cls to wrapper.\n            const\n                // Boolean needed here, otherwise DomSync will dig into comparing the modifications\n                isDirty           = Boolean(\n                    eventRecord.hasPersistableChanges || assignmentRecord?.hasPersistableChanges\n                ),\n                clsListObj        = {\n                    [resourceRecord.cls]      : resourceRecord.cls,\n                    [me.generatedIdCls]       : !eventRecord.isOccurrence && eventRecord.hasGeneratedId,\n                    [me.dirtyCls]             : isDirty,\n                    [me.committingCls]        : eventRecord.isCommitting,\n                    [me.endsOutsideViewCls]   : renderData.endsOutsideView,\n                    [me.startsOutsideViewCls] : renderData.startsOutsideView,\n                    'b-clipped-start'         : renderData.clippedStart,\n                    'b-clipped-end'           : renderData.clippedEnd,\n                    'b-iscreating'            : eventRecord.isCreating,\n                    'b-rtl'                   : me.rtl\n                },\n                wrapperClsListObj = {\n                    [`${me.eventCls}-parent`] : resourceRecord.isParent,\n                    'b-readonly'              : eventRecord.readOnly || assignmentRecord?.readOnly,\n                    'b-linked-resource'       : resourceRecord.isLinked,\n                    'b-original-resource'     : resourceRecord.hasLinks\n                },\n                clsList           = eventRecord.isResourceTimeRange ? new DomClassList() : eventRecord.internalCls.clone(),\n                wrapperClsList    = eventRecord.isResourceTimeRange ? eventRecord.internalCls.clone() : new DomClassList();\n\n            renderData.wrapperStyle = '';\n\n            // mark as wrapper to make sure fire render events for this level only\n            renderData.isWrap = true;\n\n            // Event specifics, things that do not apply to ResourceTimeRanges\n            if (isEvent) {\n                const selected = assignmentRecord && me.isAssignmentSelected(assignmentRecord);\n\n                ObjectHelper.assign(clsListObj, {\n                    [me.eventCls]                          : 1,\n                    'b-milestone'                          : isMilestone,\n                    'b-sch-event-narrow'                   : !isMilestone && renderData.width < me.narrowEventWidth,\n                    [me.fixedEventCls]                     : eventRecord.isDraggable === false,\n                    [`b-sch-event-resizable-${resizable}`] : Boolean(eventResize?.enabled && !eventRecord.readOnly),\n                    [me.eventSelectedCls]                  : selected,\n                    [me.eventAssignHighlightCls]           : me.eventAssignHighlightCls && !selected && me.isEventSelected(eventRecord),\n                    'b-recurring'                          : eventRecord.isRecurring,\n                    'b-occurrence'                         : eventRecord.isOccurrence,\n                    'b-inactive'                           : eventRecord.inactive\n                });\n\n                renderData.eventId  = eventRecord.id;\n\n                const\n                    eventStyle   = me.getEventStyle(eventRecord, resourceRecord),\n                    eventColor   = me.getEventColor(eventRecord, resourceRecord),\n                    hasAnimation = me.isFirstRender && me.useInitialAnimation && globalThis.bryntum.noAnimations !== true;\n\n                ObjectHelper.assign(wrapperClsListObj, {\n                    [`${me.eventCls}-wrap`] : 1,\n                    'b-milestone-wrap'      : isMilestone\n                });\n\n                if (hasAnimation) {\n                    const\n                        index   = renderData.row ? renderData.row.index : (renderData.top - me.scrollTop) / me.tickSize,\n                        delayMS = index / 20 * 1000;\n\n                    renderData.wrapperStyle = `animation-delay: ${delayMS}ms;`;\n                    me.maxDelay = Math.max(me.maxDelay || 0, delayMS);\n\n                    // Add an extra delay to wait for the most delayed animation to finish\n                    // before we call stopInitialAnimation. In this way, we allow them all to finish\n                    // before we remove the b-initial-${me._useInitialAnimation} class.\n                    if (!me.initialAnimationDetacher) {\n                        me.initialAnimationDetacher = EventHelper.on({\n                            element  : me.foregroundCanvas,\n                            delegate : me.eventSelector,\n\n                            // Just listen for the first animation end fired by our event els\n                            once         : true,\n                            animationend : () => me.setTimeout({\n                                fn                : 'stopInitialAnimation',\n                                delay             : me.maxDelay,\n                                cancelOutstanding : true\n                            }),\n                            // Fallback in case animation is interrupted\n                            expires : {\n                                alt   : 'stopInitialAnimation',\n                                delay : me.initialAnimationDuration + me.maxDelay\n                            },\n                            thisObj : me\n                        });\n                    }\n                }\n\n                renderData.eventColor = eventColor;\n                renderData.eventStyle = eventStyle;\n\n                // TODO: Deprecate assignment, use assignmentRecord\n                renderData.assignmentRecord = renderData.assignment = assignmentRecord;\n            }\n\n            // If not using a wrapping div, this cls will be added to event div for correct rendering\n            renderData.wrapperCls = ObjectHelper.assign(wrapperClsList, wrapperClsListObj);\n\n            renderData.cls = ObjectHelper.assign(clsList, clsListObj);\n            renderData.iconCls = new DomClassList(eventRecord.get(me.eventBarIconClsField) || eventRecord.iconCls);\n\n            // ResourceTimeRanges applies custom style to the wrapper\n            if (eventRecord.isResourceTimeRange) {\n                renderData.style = '';\n                renderData.wrapperStyle += eventRecord.style || '';\n            }\n            // Others to inner\n            else {\n                renderData.style = eventRecord.style || '';\n            }\n\n            // TODO: Deprecate resource in favor of resourceRecord\n            renderData.resource = renderData.resourceRecord = resourceRecord;\n            renderData.resourceId = renderData.rowId;\n\n            if (isEvent) {\n                let childContent = null,\n                    milestoneLabelConfig = null,\n                    value;\n\n                if (me.eventRenderer) {\n                    // User has specified a renderer fn, either to return a simple string, or an object intended for the eventBodyTemplate\n                    const\n                        rendererValue = me.eventRenderer.call(me.eventRendererThisObj || me, {\n                            eventRecord,\n                            resourceRecord,\n                            assignmentRecord : renderData.assignmentRecord,\n                            renderData\n                        });\n\n                    // If the user's renderer coerced it into a string, recreate a DomClassList.\n                    if (typeof renderData.cls === 'string') {\n                        renderData.cls = new DomClassList(renderData.cls);\n                    }\n\n                    if (typeof renderData.wrapperCls === 'string') {\n                        renderData.wrapperCls = new DomClassList(renderData.wrapperCls);\n                    }\n\n                    // Same goes for iconCls\n                    if (typeof renderData.iconCls === 'string') {\n                        renderData.iconCls = new DomClassList(renderData.iconCls);\n                    }\n\n                    if (me.eventBodyTemplate) {\n                        value = me.eventBodyTemplate(rendererValue);\n                    }\n                    else {\n                        value = rendererValue;\n                    }\n                }\n                else if (me.eventBodyTemplate) {\n                    // User has specified an eventBodyTemplate, but no renderer - just apply the entire event record data.\n                    value = me.eventBodyTemplate(eventRecord);\n                }\n                else if (me.eventBarTextField) {\n                    // User has specified a field in the data model to read from\n                    value = StringHelper.encodeHtml(eventRecord[me.eventBarTextField] || '');\n                }\n\n                if (!me.eventBodyTemplate || Array.isArray(value)) {\n                    eventContent.children = [];\n\n                    // Give milestone a dedicated label element so we can use padding\n                    if (isMilestone && (me.milestoneLayoutMode === 'default' || me.milestoneTextPosition === 'always-outside') && value != null && value !== '') {\n                        eventContent.children.unshift(milestoneLabelConfig = {\n                            tag      : 'label',\n                            children : []\n                        });\n                    }\n\n                    if (renderData.iconCls?.length) {\n                        eventContent.children.unshift({\n                            tag       : 'i',\n                            className : renderData.iconCls\n                        });\n                    }\n\n                    // Array, assumed to contain DOM configs for eventContent children (or milestone label)\n                    if (Array.isArray(value)) {\n                        (milestoneLabelConfig || eventContent).children.push(...value);\n                    }\n                    // Likely HTML content\n                    else if (StringHelper.isHtml(value)) {\n                        if (eventContent.children.length) {\n                            childContent = {\n                                tag   : 'span',\n                                class : 'b-event-text-wrap',\n                                html  : value\n                            };\n                        }\n                        else {\n                            eventContent.children = null;\n                            eventContent.html = value;\n                        }\n                    }\n                    // DOM config or plain string can be used as is\n                    else if (typeof value === 'string' || typeof value === 'object') {\n                        childContent = value;\n                    }\n                    // Other, use string\n                    else if (value != null) {\n                        childContent = String(value);\n                    }\n\n                    // Must allow empty string as valid content\n                    if (childContent != null) {\n                        // Milestones have content in their label, other events in their \"body\"\n                        (milestoneLabelConfig || eventContent).children.push(childContent);\n                        renderData.cls.add('b-has-content');\n                    }\n\n                    if (eventContent.html != null || eventContent.children.length) {\n                        renderData.children.push(eventContent);\n                    }\n                }\n                else {\n                    eventContent.html = value;\n                    renderData.children.push(eventContent);\n                }\n            }\n\n            const { eventStyle, eventColor } = renderData;\n\n            // Renderers have last say on style & color\n            renderData.wrapperCls[`b-sch-style-${eventStyle || 'none'}`] = 1;\n\n            // Named colors are applied as a class to the wrapper\n            if (DomHelper.isNamedColor(eventColor)) {\n                renderData.wrapperCls[`b-sch-color-${eventColor}`] = eventColor;\n            }\n            else if (eventColor) {\n                const colorProp = eventStyle ? 'color' : 'background-color';\n\n                renderData.style = `${colorProp}:${eventColor};` + renderData.style;\n                renderData.wrapperCls['b-sch-custom-color'] = 1;\n            }\n            else {\n                renderData.wrapperCls[`b-sch-color-none`] = 1;\n            }\n\n            // Milestones has to apply styling to b-sch-event-content\n            if (renderData.style && isMilestone && eventContent) {\n                eventContent.style = renderData.style;\n                delete renderData.style;\n            }\n\n            // If there are any iconCls entries...\n            renderData.cls['b-sch-event-withicon'] = renderData.iconCls?.length;\n\n            // For comparison in sync, cheaper than comparing DocumentFragments\n            renderData.eventContent = eventContent;\n\n            renderData.wrapperChildren = [];\n\n            // Method which features may chain in to\n            me.onEventDataGenerated(renderData);\n        }\n\n        return renderData;\n    }\n\n    /**\n     * A method which may be chained by features. It is called when an event's render\n     * data is calculated so that features may update the style, class list or body.\n     * @param {Object} eventData\n     * @internal\n     */\n    onEventDataGenerated(eventData) {}\n\n    //endregion\n\n    //region Initial animation\n\n    changeUseInitialAnimation(name) {\n        return name === true ? 'fade-in' : name;\n    }\n\n    updateUseInitialAnimation(name, old) {\n        const { classList } = this.element;\n\n        if (old) {\n            classList.remove(`b-initial-${old}`);\n        }\n\n        if (name) {\n            classList.add(`b-initial-${name}`);\n\n            // Transition block for FF, to not interfere with animations\n            if (BrowserHelper.isFirefox) {\n                classList.add('b-prevent-event-transitions');\n            }\n        }\n    }\n\n    /**\n     * Restarts initial events animation with new value {@link #config-useInitialAnimation}.\n     * @param {Boolean|String} initialAnimation new initial animation value\n     */\n    restartInitialAnimation(initialAnimation) {\n        const me = this;\n\n        me.initialAnimationDetacher?.();\n        me.initialAnimationDetacher = null;\n\n        me.useInitialAnimation = initialAnimation;\n        me.isFirstRender = true;\n        me.refresh();\n    }\n\n    stopInitialAnimation() {\n        const me = this;\n\n        me.initialAnimationDetacher();\n        me.isFirstRender = false;\n\n        // Prevent any further initial animations\n        me.useInitialAnimation = false;\n\n        // Remove transition block for FF a bit later, to not interfere with animations\n        if (BrowserHelper.isFirefox) {\n            me.setTimeout(() => me.element.classList.remove('b-prevent-event-transitions'), 100);\n        }\n    }\n\n    //endregion\n\n    //region Milestones\n\n    /**\n     * Determines width of a milestones label. How width is determined is decided by configuring\n     * {@link #config-milestoneLayoutMode}. Please note that text width is always determined using the events\n     * {@link Scheduler/model/EventModel#field-name}.\n     * @param {Scheduler.model.EventModel} eventRecord\n     * @param {Scheduler.model.ResourceModel} resourceRecord\n     * @returns {Number}\n     */\n    getMilestoneLabelWidth(eventRecord, resourceRecord) {\n        const\n            me   = this,\n            mode = me.milestoneLayoutMode,\n            size = me.getResourceLayoutSettings(resourceRecord).contentHeight;\n\n        if (mode === 'measure') {\n            const\n                html    = StringHelper.encodeHtml(eventRecord.name),\n                color   = me.getEventColor(eventRecord, resourceRecord),\n                style   = me.getEventStyle(eventRecord, resourceRecord),\n                element = me.milestoneMeasureElement || (me.milestoneMeasureElement = DomHelper.createElement({\n                    className : {\n                        'b-sch-event-wrap'       : 1,\n                        'b-milestone-wrap'       : 1,\n                        'b-measure'              : 1,\n                        [`b-sch-color-${color}`] : color,\n                        [`b-sch-style-${style}`] : style\n                    },\n                    children : [\n                        {\n                            className : 'b-sch-event b-milestone',\n                            children  : [\n                                {\n                                    className : 'b-sch-event-content',\n                                    children  : [\n                                        { tag : 'label' }\n                                    ]\n                                }\n                            ]\n                        }\n                    ],\n                    parent : me.foregroundCanvas\n                }));\n\n            // DomSync should not touch\n            element.retainElement = true;\n\n            element.style.fontSize = `${size}px`;\n\n            if (me.milestoneTextPosition === 'always-outside') {\n                const label = element.firstElementChild.firstElementChild.firstElementChild;\n\n                label.innerHTML = html;\n\n                const bounds = Rectangle.from(label, label.parentElement);\n\n                // +2 for a little margin\n                return bounds.left + bounds.width + 2;\n            }\n            else {\n                // b-sch-event-content\n                element.firstElementChild.firstElementChild.innerHTML = `<label></label>${html}`;\n\n                return element.firstElementChild.offsetWidth;\n            }\n        }\n\n        if (mode === 'estimate') {\n            return eventRecord.name.length * me.milestoneCharWidth + (me.milestoneTextPosition === 'always-outside' ? size : 0);\n        }\n\n        if (mode === 'data') {\n            return eventRecord.milestoneWidth;\n        }\n\n        return 0;\n    }\n\n    updateMilestoneLayoutMode(mode) {\n        const\n            me            = this,\n            alwaysOutside = me.milestoneTextPosition === 'always-outside';\n\n        me.element.classList.toggle('b-sch-layout-milestones', mode !== 'default' && !alwaysOutside);\n        me.element.classList.toggle('b-sch-layout-milestone-labels', mode !== 'default' && alwaysOutside);\n\n        if (!me.isConfiguring) {\n            me.refreshWithTransition();\n        }\n    }\n\n    updateMilestoneTextPosition(position) {\n        this.element.classList.toggle('b-sch-layout-milestone-text-position-inside', position === 'inside');\n\n        this.updateMilestoneLayoutMode(this.milestoneLayoutMode);\n    }\n\n    updateMilestoneAlign() {\n        if (!this.isConfiguring) {\n            this.refreshWithTransition();\n        }\n    }\n\n    updateMilestoneCharWidth() {\n        if (!this.isConfiguring) {\n            this.refreshWithTransition();\n        }\n    }\n\n    // endregion\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n","import Base from '../../../Core/Base.js';\nimport Store from '../../../Core/data/Store.js';\nimport GlobalEvents from '../../../Core/GlobalEvents.js';\nimport DomHelper from '../../../Core/helper/DomHelper.js';\nimport ProjectConsumer from '../../data/mixin/ProjectConsumer.js';\n\n/**\n * @module Scheduler/view/mixin/SchedulerStores\n */\n\n/**\n * Functions for store assignment and store event listeners.\n *\n * @mixin\n * @extends Scheduler/data/mixin/ProjectConsumer\n */\nexport default Target => class SchedulerStores extends ProjectConsumer(Target || Base) {\n    static get $name() {\n        return 'SchedulerStores';\n    }\n\n    //region Default config\n\n    // This is the static definition of the Stores we consume from the project, and\n    // which we must provide *TO* the project if we or our CrudManager is configured\n    // with them.\n    // The property name is the store name, and within that there is the dataName which\n    // is the property which provides static data definition. And there is a listeners\n    // definition which specifies the listeners *on this object* for each store.\n    //\n    // To process incoming stores, implement an updateXxxxxStore method such\n    // as `updateEventStore(eventStore)`.\n    //\n    // To process an incoming Project implement `updateProject`. __Note that\n    // `super.updateProject(...arguments)` must be called first.__\n    static get projectStores() {\n        return {\n            resourceStore : {\n                dataName : 'resources'\n            },\n\n            eventStore : {\n                dataName  : 'events',\n                listeners : {\n                    batchedUpdate   : 'onEventStoreBatchedUpdate',\n                    changePreCommit : 'onInternalEventStoreChange',\n                    commitStart     : 'onEventCommitStart',\n                    commit          : 'onEventCommit',\n                    exception       : 'onEventException',\n                    idchange        : 'onEventIdChange',\n                    beforeLoad      : 'applyStartEndParameters'\n                }\n            },\n\n            assignmentStore : {\n                dataName  : 'assignments',\n                listeners : {\n                    changePreCommit : 'onAssignmentChange', // In EventSelection.js\n                    commitStart     : 'onAssignmentCommitStart',\n                    commit          : 'onAssignmentCommit',\n                    exception       : 'onAssignmentException',\n                    beforeRemove    : {\n                        fn   : 'onAssignmentBeforeRemove',\n                        // We must go last in case an app vetoes a remove\n                        // by returning false from a handler.\n                        prio : -1000\n                    }\n                }\n            },\n\n            dependencyStore : {\n                dataName : 'dependencies'\n            },\n\n            calendarManagerStore   : {},\n            timeRangeStore         : {},\n            resourceTimeRangeStore : {}\n        };\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Overridden to *not* auto create a store at the Scheduler level.\n             * The store is the {@link Scheduler.data.ResourceStore} of the backing project\n             * @config {Core.data.Store}\n             * @private\n             */\n            store : null,\n\n            /**\n             * The name of the start date parameter that will be passed to in every `eventStore` load request.\n             * @config {String}\n             * @category Data\n             */\n            startParamName : 'startDate',\n\n            /**\n             * The name of the end date parameter that will be passed to in every `eventStore` load request.\n             * @config {String}\n             * @category Data\n             */\n            endParamName : 'endDate',\n\n            /**\n             * true to apply start and end dates of the current view to any `eventStore` load requests.\n             * @config {Boolean}\n             * @category Data\n             */\n            passStartEndParameters : false,\n\n            /**\n             * Class that should be used to instantiate a CrudManager in case it's provided as a simple object to\n             * {@link #config-crudManager} config.\n             * @config {Scheduler.data.CrudManager}\n             * @typings {typeof CrudManager}\n             * @category Data\n             */\n            crudManagerClass : null,\n\n            /**\n             * Get/set the CrudManager instance\n             * @member {Scheduler.data.CrudManager} crudManager\n             * @category Data\n             */\n            /**\n             * Supply a {@link Scheduler.data.CrudManager} instance or a config object if you want to use\n             * CrudManager for handling data.\n             * @config {CrudManagerConfig|Scheduler.data.CrudManager}\n             * @category Data\n             */\n            crudManager : null\n        };\n    }\n\n    //endregion\n\n    //region Project\n\n    updateProject(project, oldProject) {\n        super.updateProject(project, oldProject);\n\n        this.detachListeners('schedulerStores');\n\n        project.ion({\n            name    : 'schedulerStores',\n            refresh : 'onProjectRefresh',\n            thisObj : this\n        });\n    }\n\n    // Called when project changes are committed, before data is written back to records (but still ready to render\n    // since data is fetched from engine)\n    onProjectRefresh({ isInitialCommit }) {\n        const me = this;\n\n        // Only update the UI immediately if we are visible\n        if (me.isVisible) {\n            if (isInitialCommit) {\n                if (me.isVertical) {\n                    me.refreshAfterProjectRefresh = false;\n                    me.refreshWithTransition();\n                }\n            }\n\n            if (me.navigateToAfterRefresh) {\n                me.navigateTo(me.navigateToAfterRefresh);\n                me.navigateToAfterRefresh = null;\n            }\n\n            if (me.refreshAfterProjectRefresh) {\n                me.refreshWithTransition(false, !isInitialCommit);\n                me.refreshAfterProjectRefresh = false;\n            }\n        }\n        // Otherwise wait till next time we get painted (shown, or a hidden ancestor shown)\n        else {\n            me.whenVisible('refresh', me, [true]);\n        }\n    }\n\n    //endregion\n\n    //region CrudManager\n\n    changeCrudManager(crudManager) {\n        const me = this;\n\n        if (crudManager && !crudManager.isCrudManager) {\n            //<debug>\n            if (!me.crudManagerClass) {\n                throw new Error('No CrudManager class configured on CrudManager\\'s View');\n            }\n            //</debug>\n\n            // CrudManager injects itself into is Scheduler's _crudManager property\n            // because code it triggers needs to access it through its getter.\n            crudManager = me.crudManagerClass.new({\n                scheduler : me\n            }, crudManager);\n        }\n        // config setter will veto because of above described behaviour\n        // of setting the property early on creation\n        me._crudManager = crudManager;\n\n        me.bindCrudManager(crudManager);\n    }\n\n    //endregion\n\n    //region Row store\n\n    get store() {\n        // Vertical uses a dummy store\n        if (!this._store && this.isVertical) {\n            // TODO: Make this store readonly, since we are using single cell approach\n            this._store = new Store({\n                data : [\n                    {\n                        // Quoted to avoid commit-hook check:\n                        'id' : 'verticalTimeAxisRow', // eslint-disable-line quote-props\n                        cls  : 'b-verticaltimeaxis-row'\n                    }\n                ]\n            });\n        }\n\n        return super.store;\n    }\n\n    set store(store) {\n        super.store = store;\n    }\n\n    // Wrap w/ transition refreshFromRowOnStoreAdd() inherited from Grid\n    refreshFromRowOnStoreAdd(row, { isExpand, records }) {\n        const args = arguments;\n\n        this.runWithTransition(() => {\n            // Postpone drawing of events for a new resource until the following project refresh. Previously the draw\n            // would not happen because engine was not ready, but now when we allow commits and can read values during\n            // commit that block is no longer there\n            this.currentOrientation.suspended = !isExpand && !records.some(r => r.isLinked);\n\n            super.refreshFromRowOnStoreAdd(row, ...args);\n\n            this.currentOrientation.suspended = false;\n        }, !isExpand);\n    }\n\n    onStoreAdd(event) {\n        super.onStoreAdd(event);\n\n        if (this.isPainted) {\n            this.calculateRowHeights(event.records);\n        }\n    }\n\n    onStoreUpdateRecord({ source : store, record, changes }) {\n        // Ignore engine changes that do not affect row rendering\n        let ignoreCount = 0;\n\n        if ('assigned' in changes) {\n            ignoreCount++;\n        }\n\n        if ('calendar' in changes) {\n            ignoreCount++;\n        }\n\n        if (ignoreCount !== Object.keys(changes).length) {\n            super.onStoreUpdateRecord(...arguments);\n        }\n    }\n\n    //endregion\n\n    //region ResourceStore\n\n    updateResourceStore(resourceStore) {\n        // Reconfigure grid if resourceStore is backing the rows\n        if (resourceStore && this.isHorizontal) {\n            resourceStore.metaMapId = this.id;\n            this.store = resourceStore;\n        }\n    }\n\n    get usesDisplayStore() {\n        return this.store !== this.resourceStore;\n    }\n\n    //endregion\n\n    //region Events\n\n    onEventIdChange(params) {\n        this.currentOrientation.onEventStoreIdChange && this.currentOrientation.onEventStoreIdChange(params);\n    }\n\n    /**\n     * Listener to the batchedUpdate event which fires when a field is changed on a record which\n     * is batch updating. Occasionally UIs must keep in sync with batched changes.\n     * For example, the EventResize feature performs batched updating of the startDate/endDate\n     * and it tells its client to listen to batchedUpdate.\n     * @private\n     */\n    onEventStoreBatchedUpdate(event) {\n        if (this.listenToBatchedUpdates) {\n            return this.onInternalEventStoreChange(event);\n        }\n    }\n\n    /**\n     * Calls appropriate functions for current event layout when the event store is modified.\n     * @private\n     */\n    // Named as Internal to avoid naming collision with wrappers that relay events\n    onInternalEventStoreChange(params) {\n        // Too early, bail out\n        // Also bail out if this is a reassign using resourceId, any updates will be handled by AssignmentStore instead\n        if (!this.isPainted || !this._mode || params.isAssign || this.assignmentStore.isRemovingAssignment) {\n            return;\n        }\n\n        this.currentOrientation.onEventStoreChange(params);\n    }\n\n    /**\n     * Refreshes committed events, to remove dirty/committing flag.\n     * CSS is added\n     * @private\n     */\n    onEventCommit({ changes }) {\n        let resourcesToRepaint = [...changes.added, ...changes.modified].map(\n            eventRecord => this.eventStore.getResourcesForEvent(eventRecord)\n        );\n\n        // getResourcesForEvent returns an array, so need to flatten resourcesToRepaint\n        resourcesToRepaint = Array.prototype.concat.apply([], resourcesToRepaint);\n\n        // repaint relevant resource rows\n        new Set(resourcesToRepaint).forEach(\n            resourceRecord => this.repaintEventsForResource(resourceRecord)\n        );\n    }\n\n    /**\n     * Adds the committing flag to changed events before commit.\n     * @private\n     */\n    onEventCommitStart({ changes }) {\n        const { currentOrientation, committingCls } = this;\n        // Committing sets a flag in meta that during event rendering applies a CSS class. But to not mess up drag and\n        // drop between resources no redraw is performed before committing, so class is never applied to the element(s).\n        // Applying here instead\n        [...changes.added, ...changes.modified].forEach(eventRecord =>\n            eventRecord.assignments.forEach(\n                assignmentRecord => currentOrientation.toggleCls(assignmentRecord, committingCls, true)\n            )\n        );\n    }\n\n    // Clear committing flag\n    onEventException({ action }) {\n        if (action === 'commit') {\n            const { changes } = this.eventStore;\n\n            [...changes.added, ...changes.modified, ...changes.removed].forEach(eventRecord =>\n                this.repaintEvent(eventRecord)\n            );\n        }\n    }\n\n    onAssignmentCommit({ changes }) {\n        this.repaintEventsForAssignmentChanges(changes);\n    }\n\n    onAssignmentCommitStart({ changes }) {\n        const { currentOrientation, committingCls } = this;\n\n        [...changes.added, ...changes.modified].forEach(assignmentRecord => {\n            currentOrientation.toggleCls(assignmentRecord, committingCls, true);\n        });\n    }\n\n    // Clear committing flag\n    onAssignmentException({ action }) {\n        if (action === 'commit') {\n            this.repaintEventsForAssignmentChanges(this.assignmentStore.changes);\n        }\n    }\n\n    repaintEventsForAssignmentChanges(changes) {\n        const resourcesToRepaint = [...changes.added, ...changes.modified, ...changes.removed].map(\n            assignmentRecord => assignmentRecord.getResource()\n        );\n\n        // repaint relevant resource rows\n        new Set(resourcesToRepaint).forEach(\n            resourceRecord => this.repaintEventsForResource(resourceRecord)\n        );\n    }\n\n    onAssignmentBeforeRemove({ records, removingAll }) {\n        if (removingAll) {\n            return;\n        }\n\n        const me = this;\n\n        let moveTo;\n\n        // Deassigning the active assignment\n        if (!me.isConfiguring &&\n            // If we have current active assignment or we scheduled navigating to an assignment, we should check\n            // if we're removing that assignment in order to avoid navigating to it\n            (me.navigateToAfterRefresh || me.activeAssignment && records.includes(me.activeAssignment))\n        ) {\n            // If next navigation target is removed, clean up the flag\n            if (records.includes(me.navigateToAfterRefresh)) {\n                me.navigateToAfterRefresh = null;\n            }\n            // If being done by a keyboard gesture then look for a close target until we find an existing record, not\n            // scheduled for removal. Otherwise, push focus outside of the Scheduler.\n            // This condition will react not only on meaningful keyboard action - like pressing DELETE key on selected\n            // event - but also in case user started dragging and pressed CTRL (or any other key) in process.\n            // https://github.com/bryntum/support/issues/3479\n            if (GlobalEvents.lastInteractionType === 'key') {\n                // Look for a close target until we find an existing record, not scheduled for removal. Provided\n                // assignment position in store is arbitrary as well as order of removed records, it does not make much\n                // sense trying to apply any specific order to them. Existing assignment next to any removed one is as\n                // good as any.\n                for (let i = 0, l = records.length; i < l && !moveTo; i++) {\n                    const assignment = records[i];\n\n                    if (assignment.resource && assignment.resource.isModel) {\n                        // Find next record\n                        let next = me.getNext(assignment);\n\n                        // If next record is not found or also removed, look for previous. This should not become a\n                        // performance bottleneck because we only can get to this code if project is committing, if\n                        // records are removed on a dragdrop listener and user pressed any key after mousedown, or if\n                        // user is operating with a keyboard and pressed [DELETE] to remove multiple records.\n                        if (!next || records.includes(next)) {\n                            next = me.getPrevious(assignment);\n                        }\n\n                        if (next && !records.includes(next)) {\n                            moveTo = next;\n                        }\n                    }\n                }\n            }\n\n            // Move focus away from the element which will soon have no backing data.\n            if (moveTo) {\n                // Although removing records from assignment store will trigger project commit and consequently\n                // `refresh` event on the project which will use this record to navigate to, some tests expect\n                // immediate navigation\n                me.navigateTo(moveTo);\n                me.navigateToAfterRefresh = moveTo;\n            }\n            // Focus must exit the Scheduler's subgrid, otherwise, if a navigation\n            // key gesture is delivered before the outgoing event's element has faded\n            // out and been removed, navigation will be attempted from a deleted\n            // event. Animated hiding is problematic.\n            //\n            // We cannot just revertFocus() because that might move focus back to an\n            // element in a floating EventEditor which is not yet faded out and\n            // been removed. Animated hiding is problematic.\n            //\n            // We cannot focus scheduler.timeAxisColumn.element because the browser\n            // would scroll it in some way if we have horizontal overflow.\n            //\n            // The only thing we can know about to focus here is the Scheduler itself.\n            else {\n                DomHelper.focusWithoutScrolling(me.focusElement);\n            }\n        }\n    }\n\n    //endregion\n\n    //region TimeRangeStore & TimeRanges\n\n    /**\n     * Inline time ranges, will be loaded into an internally created store if {@link Scheduler.feature.TimeRanges}\n     * is enabled.\n     * @config {Scheduler.model.TimeSpan[]|TimeSpanConfig[]} timeRanges\n     * @category Data\n     */\n\n    /**\n     * Get/set time ranges, applies to the backing project's TimeRangeStore.\n     * @member {Scheduler.model.TimeSpan[]} timeRanges\n     * @accepts {Scheduler.model.TimeSpan[]|TimeSpanConfig[]}\n     * @category Data\n     */\n\n    /**\n     * Get/set the time ranges store instance or config object for {@link Scheduler.feature.TimeRanges} feature.\n     * @member {Core.data.Store} timeRangeStore\n     * @accepts {Core.data.Store|StoreConfig}\n     * @category Data\n     */\n\n    /**\n     * The time ranges store instance for {@link Scheduler.feature.TimeRanges} feature.\n     * @config {Core.data.Store|StoreConfig} timeRangeStore\n     * @category Data\n     */\n\n    set timeRanges(timeRanges) {\n        this.project.timeRanges = timeRanges;\n    }\n\n    get timeRanges() {\n        return this.project.timeRanges;\n    }\n\n    //endregion\n\n    //region ResourceTimeRangeStore\n\n    /**\n     * Inline resource time ranges, will be loaded into an internally created store if\n     * {@link Scheduler.feature.ResourceTimeRanges ResourceTimeRanges} is enabled.\n     * @config {Scheduler.model.ResourceTimeRangeModel[]|ResourceTimeRangeModelConfig[]} resourceTimeRanges\n     * @category Data\n     */\n\n    /**\n     * Get/set time ranges, applies to the backing project's ResourceTimeRangeStore.\n     * @member {Scheduler.model.ResourceTimeRangeModel[]} resourceTimeRanges\n     * @accepts {Scheduler.model.ResourceTimeRangeModel[]|ResourceTimeRangeModelConfig[]}\n     * @category Data\n     */\n\n    /**\n     * Get/set the resource time ranges store instance for {@link Scheduler.feature.ResourceTimeRanges} feature.\n     * @member {Scheduler.data.ResourceTimeRangeStore} resourceTimeRangeStore\n     * @accepts {Scheduler.data.ResourceTimeRangeStore|ResourceTimeRangeStoreConfig}\n     * @category Data\n     */\n\n    /**\n     * Resource time ranges store instance or config object for {@link Scheduler.feature.ResourceTimeRanges} feature.\n     * @config {Scheduler.data.ResourceTimeRangeStore|ResourceTimeRangeStoreConfig} resourceTimeRangeStore\n     * @category Data\n     */\n\n    set resourceTimeRanges(resourceTimeRanges) {\n        this.project.resourceTimeRanges = resourceTimeRanges;\n    }\n\n    get resourceTimeRanges() {\n        return this.project.resourceTimeRanges;\n    }\n\n    //endregion\n\n    //region Other functions\n\n    /**\n     * Applies the start and end date to each event store request (formatted in the same way as the start date, defined\n     * in the EventStore Model class).\n     * @category Data\n     */\n    applyStartEndParameters({ source : eventStore, params }) {\n        const\n            me = this,\n            field = eventStore.modelClass.fieldMap.startDate;\n\n        if (me.passStartEndParameters) {\n            params[me.startParamName] = field.print(me.startDate);\n            params[me.endParamName] = field.print(me.endDate);\n        }\n    }\n\n    /**\n     * Get events grouped by timeAxis ticks from resources array\n     * @category Data\n     * @param {Scheduler.model.ResourceModel[]} resources An array of resources to process. If not passed, all resources\n     * will be used.\n     * @param {Function} filterFn filter function to filter events if required. Optional.\n     * @private\n     */\n    getResourcesEventsPerTick(resources, filterFn) {\n        const\n            { timeAxis, resourceStore } = this,\n            eventsByTick                = [];\n\n        resources = resources || resourceStore.records;\n        resources.forEach(resource => {\n            resource.events.forEach(event => {\n                if (!timeAxis.isTimeSpanInAxis(event) || (filterFn && !filterFn.call(this, { resource, event }))) {\n                    return;\n                }\n                // getTickFromDate may return float if event starts/ends in a middle of a tick\n                let startTick = Math.floor(timeAxis.getTickFromDate(event.startDate)),\n                    endTick = Math.ceil(timeAxis.getTickFromDate(event.endDate));\n\n                // if startDate/endDate of the event is out of timeAxis' bounds, use first/last tick id instead\n                if (startTick == -1) {\n                    startTick = 0;\n                }\n\n                if (endTick === -1) {\n                    endTick = timeAxis.ticks.length;\n                }\n\n                do {\n                    if (!eventsByTick[startTick]) {\n                        eventsByTick[startTick] = [event];\n                    }\n                    else {\n                        eventsByTick[startTick].push(event);\n                    }\n                } while (++startTick < endTick);\n            });\n        });\n\n        return eventsByTick;\n    }\n\n    //endregion\n\n    //region WidgetClass\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n\n    //endregion\n};\n","import Base from '../../../Core/Base.js';\nimport DomHelper from '../../../Core/helper/DomHelper.js';\n\n/**\n * @module Scheduler/view/mixin/SchedulerScroll\n */\n\nconst\n    defaultScrollOptions = {\n        block      : 'nearest',\n        edgeOffset : 20\n    },\n    unrenderedScrollOptions = {\n        highlight : false,\n        focus     : false\n    };\n\n/**\n * Functions for scrolling to events, dates etc.\n *\n * @mixin\n */\nexport default Target => class SchedulerScroll extends (Target || Base) {\n    static get $name() {\n        return 'SchedulerScroll';\n    }\n\n    //region Scroll to event\n\n    /**\n     * Scrolls an event record into the viewport.\n     * If the resource store is a tree store, this method will also expand all relevant parent nodes to locate the event.\n     *\n     * This function is not applicable for events with multiple assignments, please use #scrollResourceEventIntoView instead.\n     *\n     * @param {Scheduler.model.EventModel} eventRecord the event record to scroll into view\n     * @param {ScrollOptions} [options] How to scroll.\n     * @returns {Promise} A Promise which resolves when the scrolling is complete.\n     * @async\n     * @category Scrolling\n     */\n    async scrollEventIntoView(eventRecord, options = defaultScrollOptions) {\n        const\n            me        = this,\n            resources = eventRecord.resources || [eventRecord];\n\n        if (resources.length > 1) {\n            throw new Error('scrollEventIntoView() is not applicable for events with multiple assignments, please use scrollResourceEventIntoView() instead.');\n        }\n\n        if (!resources.length) {\n            console.warn('You have asked to scroll to an event which is not assigned to a resource');\n        }\n\n        await me.scrollResourceEventIntoView(resources[0], eventRecord, options);\n    }\n\n    /**\n     * Scrolls an assignment record into the viewport.\n     *\n     * If the resource store is a tree store, this method will also expand all relevant parent nodes\n     * to locate the event.\n     *\n     * @param {Scheduler.model.AssignmentModel} assignmentRecord A resource record an event record is assigned to\n     * @param {ScrollOptions} [options] How to scroll.\n     * @returns {Promise} A Promise which resolves when the scrolling is complete.\n     * @category Scrolling\n     */\n    scrollAssignmentIntoView(assignmentRecord, ...args) {\n        return this.scrollResourceEventIntoView(assignmentRecord.resource, assignmentRecord.event, ...args);\n    }\n\n    /**\n     * Scrolls a resource event record into the viewport.\n     *\n     * If the resource store is a tree store, this method will also expand all relevant parent nodes\n     * to locate the event.\n     *\n     * @param {Scheduler.model.ResourceModel} resourceRecord A resource record an event record is assigned to\n     * @param {Scheduler.model.EventModel} eventRecord An event record to scroll into view\n     * @param {ScrollOptions} [options] How to scroll.\n     * @returns {Promise} A Promise which resolves when the scrolling is complete.\n     * @category Scrolling\n     * @async\n     */\n    async scrollResourceEventIntoView(resourceRecord, eventRecord, options = defaultScrollOptions) {\n        const\n            me             = this,\n            eventStart     = eventRecord.startDate,\n            eventEnd       = eventRecord.endDate,\n            eventIsOutside = eventRecord.isScheduled && eventStart < me.timeAxis.startDate | ((eventEnd > me.timeAxis.endDate) << 1);\n\n        // TODO Remove in 6.0\n        if (arguments.length > 3) {\n            options = arguments[3];\n        }\n\n        let el;\n\n        if (options.edgeOffset == null) {\n            options.edgeOffset = 20;\n        }\n\n        // Make sure event is within TimeAxis time span unless extendTimeAxis passed as false.\n        // The EventEdit feature passes false because it must not mutate the TimeAxis.\n        // Bitwise flag:\n        //  1 === start is before TimeAxis start.\n        //  2 === end is after TimeAxis end.\n        if (eventIsOutside && options.extendTimeAxis !== false) {\n            const currentTimeSpanRange = me.timeAxis.endDate - me.timeAxis.startDate;\n\n            // Event is too wide, expand the range to encompass it.\n            if (eventIsOutside === 3) {\n                me.setTimeSpan(\n                    new Date(eventStart.valueOf() - currentTimeSpanRange / 2),\n                    new Date(eventEnd.getTime() + currentTimeSpanRange / 2)\n                );\n            }\n            // Event is partially or wholly outside but will fit.\n            // Move the TimeAxis to include it. That will maintain visual position.\n            else {\n                // Event starts before\n                if (eventIsOutside & 1) {\n                    me.setTimeSpan(\n                        new Date(eventStart),\n                        new Date(eventStart.valueOf() + currentTimeSpanRange)\n                    );\n                }\n                // Event ends after\n                else {\n                    me.setTimeSpan(\n                        new Date(eventEnd.valueOf() - currentTimeSpanRange),\n                        new Date(eventEnd)\n                    );\n                }\n            }\n        }\n\n        if (me.store.tree) {\n            // If we're a tree, ensure parents are expanded first\n            await me.expandTo?.(resourceRecord);\n        }\n\n        // Handle nested events too\n        if (eventRecord.parent && !eventRecord.parent.isRoot) {\n            await this.scrollEventIntoView(eventRecord.parent);\n        }\n\n        // Establishing element to scroll to\n        el = me.getElementFromEventRecord(eventRecord, resourceRecord);\n\n        if (el) {\n            // It's usually the event wrapper that holds focus\n            if (!DomHelper.isFocusable(el)) {\n                el = el.parentNode;\n            }\n\n            const scroller = me.timeAxisSubGrid.scrollable;\n\n            // Force horizontalscroll to be triggered directly on scroll instead of on next frame, to have events\n            // already drawn when promise resolves\n            me.timeAxisSubGrid.forceScrollUpdate = true;\n            // Scroll into view with animation and highlighting if needed.\n            await scroller.scrollIntoView(el, options);\n        }\n        else if (eventIsOutside && options.extendTimeAxis === false) {\n            console.warn('You have asked to scroll to an event which is outside the current view and extending timeaxis is disabled');\n        }\n        else if (!eventRecord.isOccurrence && !me.eventStore.isAvailable(eventRecord)) {\n            console.warn('You have asked to scroll to an event which is not available');\n        }\n        else if (eventRecord.isScheduled) {\n            // Event scheduled but not rendered, scroll to calculated location\n            await me.scrollUnrenderedEventIntoView(resourceRecord, eventRecord, options);\n        }\n        else {\n            // Event not scheduled, just scroll resource row into view\n            await me.scrollResourceIntoView(resourceRecord, options);\n        }\n    }\n\n    /**\n     * Scrolls an unrendered event into view. Internal function used from #scrollResourceEventIntoView.\n     * @private\n     * @category Scrolling\n     */\n    scrollUnrenderedEventIntoView(resourceRec, eventRec, options = defaultScrollOptions) {\n        // We must only resolve when the event's element has been painted\n        // *and* the scroll has fully completed.\n        return new Promise(resolve => {\n            const\n                me               = this,\n                // Knock out highlight and focus options. They must be applied after the scroll\n                // has fully completed and we have an element. Use a default edgeOffset of 20.\n                modifiedOptions  = Object.assign({ edgeOffset : 20 }, options, unrenderedScrollOptions),\n                scroller         = me.timeAxisSubGrid.scrollable,\n                box              = me.getResourceEventBox(eventRec, resourceRec),\n                scrollerViewport = scroller.viewport;\n\n            // Event may fall on a time not included by workingTime settings\n            if (!scrollerViewport || !box) {\n                resolve();\n                return;\n            }\n\n            // In case of subPixel position, scroll the whole pixel into view\n            box.x = Math.ceil(box.x);\n            box.y = Math.ceil(box.y);\n\n            if (me.rtl) {\n                // RTL scrolls in negative direction but coordinates are still LTR\n                box.translate(-me.timeAxisViewModel.totalSize + scrollerViewport.width, 0);\n            }\n\n            // Note use of scroller.scrollLeft here. We need the natural DOM scrollLeft value\n            // not the +ve X position along the scrolling axis.\n            box.translate(scrollerViewport.x - scroller.scrollLeft, scrollerViewport.y - scroller.y);\n\n            const\n                // delta         = scroller.getDeltaTo(box, modifiedOptions)[me.isHorizontal ? 'xDelta' : 'yDelta'],\n                onEventRender = async({ eventRecord, element, targetElement }) => {\n                    if (eventRecord === eventRec) {\n                        // Vertical's renderEvent is different to horizontal's\n                        const el = element || targetElement;\n\n                        detacher();\n\n                        // Don't resolve until the scroll has fully completed.\n                        await initialScrollPromise;\n\n                        options.highlight && DomHelper.highlight(el);\n                        options.focus && el.focus();\n\n                        resolve();\n                    }\n                },\n                // On either paint or repaint of the event, resolve the scroll promise and detach the listeners.\n                detacher = me.ion({\n                    renderEvent : onEventRender\n                }),\n                initialScrollPromise = scroller.scrollIntoView(box, modifiedOptions);\n        });\n    }\n\n    /**\n     * Scrolls the specified resource into view, works for both horizontal and vertical modes.\n     * @param {Scheduler.model.ResourceModel} resourceRecord A resource record an event record is assigned to\n     * @param {ScrollOptions} [options] How to scroll.\n     * @returns {Promise} A promise which is resolved when the scrolling has finished.\n     * @category Scrolling\n     */\n    scrollResourceIntoView(resourceRecord, options = defaultScrollOptions) {\n        if (this.isVertical) {\n            return this.currentOrientation.scrollResourceIntoView(resourceRecord, options);\n        }\n        else {\n            return this.scrollRowIntoView(resourceRecord, options);\n        }\n    }\n\n    //endregion\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n","import Base from '../../../Core/Base.js';\n\n/**\n * @module Scheduler/view/mixin/SchedulerRegions\n */\n\n/**\n * Functions to get regions (bounding boxes) for scheduler, events etc.\n *\n * @mixin\n */\nexport default Target => class SchedulerRegions extends (Target || Base) {\n    static get $name() {\n        return 'SchedulerRegions';\n    }\n\n    //region Orientation dependent regions\n\n    /**\n     * Gets the region represented by the schedule and optionally only for a single resource. The view will ask the\n     * scheduler for the resource availability by calling getResourceAvailability. By overriding that method you can\n     * constrain events differently for different resources.\n     * @param {Scheduler.model.ResourceModel} resourceRecord (optional) The resource record\n     * @param {Scheduler.model.EventModel} eventRecord (optional) The event record\n     * @returns {Core.helper.util.Rectangle} The region of the schedule\n     */\n    getScheduleRegion(resourceRecord, eventRecord, local = true, dateConstraints) {\n        return this.currentOrientation.getScheduleRegion(...arguments);\n    }\n\n    /**\n     * Gets the region, relative to the timeline view element, representing the passed resource and optionally just for a certain date interval.\n     * @param {Scheduler.model.ResourceModel} resourceRecord The resource record\n     * @param {Date} startDate A start date constraining the region\n     * @param {Date} endDate An end date constraining the region\n     * @returns {Core.helper.util.Rectangle} A Rectangle which encapsulates the resource time span\n     */\n    getResourceRegion(resourceRecord, startDate, endDate) {\n        return this.currentOrientation.getRowRegion(...arguments);\n    }\n\n    //endregion\n\n    //region ResourceEventBox\n\n    getAssignmentEventBox(assignmentRecord, includesOutside) {\n        return this.getResourceEventBox(assignmentRecord.event, assignmentRecord.resource, includesOutside);\n    }\n\n    /**\n     * Get the region for a specified resources specified event.\n     * @param {Scheduler.model.EventModel} eventRecord\n     * @param {Scheduler.model.ResourceModel} resourceRecord\n     * @param {Boolean} includeOutside Specify true to get boxes for events outside of the rendered zone in both\n     *   dimensions. This option is used when calculating dependency lines, and we need to include routes from events\n     *   which may be outside the rendered zone.\n     * @returns {Core.helper.util.Rectangle}\n     */\n    getResourceEventBox(eventRecord, resourceRecord, includeOutside = false, roughly = false) {\n        return this.currentOrientation.getResourceEventBox(...arguments);\n    }\n\n    //endregion\n\n    //region Item box\n\n    /**\n     * Gets box for displayed item designated by the record. If several boxes are displayed for the given item\n     * then the method returns all of them. Box coordinates are in view coordinate system.\n     *\n     * Boxes outside scheduling view timeaxis timespan and inside collapsed rows (if row defining store is a tree store)\n     * will not be returned. Boxes outside scheduling view vertical visible area (i.e. boxes above currently visible\n     * top row or below currently visible bottom row) will be calculated approximately.\n     *\n     * @param {Scheduler.model.EventModel} event\n     * @returns {Object|Object[]}\n     * @returns {Boolean} return.isPainted Whether the box was calculated for the rendered scheduled record or was\n     *    approximately calculated for the scheduled record outside of the current vertical view area.\n     * @returns {Number} return.top\n     * @returns {Number} return.bottom\n     * @returns {Number} return.start\n     * @returns {Number} return.end\n     * @returns {'before'|'after'} return.relPos if the item is not rendered then provides a view relative\n     * position one of 'before', 'after'\n     * @internal\n     */\n    getItemBox(event, includeOutside = false) {\n        return event.resources.map(resource => this.getResourceEventBox(event, resource, includeOutside));\n    }\n\n    //endregion\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n","import Base from '../../../Core/Base.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\n\n/**\n * @module Scheduler/view/mixin/SchedulerState\n */\n\nconst copyProperties = [\n    'eventLayout',\n    'mode',\n    'eventColor',\n    'eventStyle',\n    'tickSize',\n    'fillTicks'\n];\n\n/**\n * A Mixin for Scheduler that handles state. It serializes the following scheduler properties, in addition to what\n * is already stored by its superclass {@link Grid/view/mixin/GridState}:\n *\n * * eventLayout\n * * barMargin\n * * mode\n * * tickSize\n * * zoomLevel\n * * eventColor\n * * eventStyle\n *\n * See {@link Grid.view.mixin.GridState} and {@link Core.mixin.State} for more information on state.\n *\n * @mixin\n */\nexport default Target => class SchedulerState extends (Target || Base) {\n    static get $name() {\n        return 'SchedulerState';\n    }\n\n    /**\n     * Gets or sets scheduler's state. Check out {@link Scheduler.view.mixin.SchedulerState} mixin\n     * and {@link Grid.view.mixin.GridState} for more details.\n     * @member {Object} state\n     * @property {String} state.eventLayout\n     * @property {String} state.eventStyle\n     * @property {String} state.eventColor\n     * @property {Number} state.barMargin\n     * @property {Number} state.tickSize\n     * @property {Boolean} state.fillTicks\n     * @property {Number} state.zoomLevel\n     * @property {'horizontal'|'vertical'} state.mode\n     * @property {Object[]} state.columns\n     * @property {Boolean} state.readOnly\n     * @property {Number} state.rowHeight\n     * @property {Object} state.scroll\n     * @property {Number} state.scroll.scrollLeft\n     * @property {Number} state.scroll.scrollTop\n     * @property {Array} state.selectedRecords\n     * @property {String} state.selectedCell\n     * @property {String} state.style\n     * @property {Object} state.subGrids\n     * @property {Object} state.store\n     * @property {Object} state.store.sorters\n     * @property {Object} state.store.groupers\n     * @property {Object} state.store.filters\n     */\n\n    /**\n     * Get scheduler's current state for serialization. State includes rowHeight, headerHeight, readOnly, selectedCell,\n     * selectedRecordId, column states and store state etc.\n     * @returns {Object} State object to be serialized\n     * @private\n     */\n    getState() {\n        return ObjectHelper.copyProperties(super.getState(), this, copyProperties);\n    }\n\n    /**\n     * Apply previously stored state.\n     * @param {Object} state\n     * @private\n     */\n    applyState(state) {\n        this.suspendRefresh();\n\n        let propsToCopy = copyProperties.slice();\n\n        if (state?.eventLayout === 'layoutFn') {\n            delete state.eventLayout;\n            propsToCopy.splice(propsToCopy.indexOf('eventLayout'), 1);\n        }\n\n        // Zoom level will set tick size, no need to update model additionally\n        if (state?.zoomLevelOptions?.width) {\n            propsToCopy = propsToCopy.filter(p => p !== 'tickSize');\n        }\n\n        ObjectHelper.copyProperties(this, state, propsToCopy);\n\n        super.applyState(state);\n\n        this.resumeRefresh(true);\n    }\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n","import BrowserHelper from '../../../Core/helper/BrowserHelper.js';\nimport DomSync from '../../../Core/helper/DomSync.js';\nimport Base from '../../../Core/Base.js';\nimport Model from '../../../Core/data/Model.js';\nimport ArrayHelper from '../../../Core/helper/ArrayHelper.js';\nimport DomHelper from '../../../Core/helper/DomHelper.js';\nimport Rectangle from '../../../Core/helper/util/Rectangle.js';\nimport DateHelper from '../../../Core/helper/DateHelper.js';\nimport AttachToProjectMixin from '../../data/mixin/AttachToProjectMixin.js';\n\n/**\n * @module Scheduler/view/orientation/HorizontalRendering\n */\n\n/**\n * @typedef HorizontalRenderData\n * @property {Scheduler.model.EventModel} eventRecord\n * @property {Date} start Span start\n * @property {Date} end Span end\n * @property {String} rowId Id of the resource row\n * @property {DomConfig[]} children Child elements\n * @property {Number} startMS Wrap element start in milliseconds\n * @property {Number} endMS Span Wrap element end in milliseconds\n * @property {Number} durationMS Wrap duration in milliseconds (not just a difference between start and end)\n * @property {Number} innerStartMS Actual event start in milliseconds\n * @property {Number} innerEndMS Actual event end in milliseconds\n * @property {Number} innerDurationMS Actual event duration in milliseconds\n * @property {Boolean} startsOutsideView True if span starts before time axis start\n * @property {Boolean} endsOutsideView True if span ends after time axis end\n * @property {Number} left Absolute left coordinate of the wrap element\n * @property {Number} width\n * @property {Number} top Absolute top coordinate of the wrap element (can be changed by layout)\n * @property {Number} height\n * @property {Boolean} clippedStart True if start is clipped\n * @property {Boolean} clippedEnd True if end is clipped\n * @private\n */\n\nconst\n    releaseEventActions = {\n        releaseElement : 1, // Not used at all at the moment\n        reuseElement   : 1  // Used by some other element\n    },\n    renderEventActions  = {\n        newElement      : 1,\n        reuseOwnElement : 1,\n        reuseElement    : 1\n    },\n    MAX_WIDTH           = 9999999,\n    heightEventSorter   = ({ startDateMS : lhs }, { startDateMS : rhs }) => lhs - rhs,\n    chronoFields        = {\n        startDate : 1,\n        endDate   : 1,\n        duration  : 1\n    };\n\nfunction getStartEnd(scheduler, eventRecord, useEnd, fieldName, useEventBuffer) {\n    // Must use Model.get in order to get latest values in case we are inside a batch.\n    // EventResize changes the endDate using batching to enable a tentative change\n    // via the batchedUpdate event which is triggered when changing a field in a batch.\n    // Fall back to accessor if propagation has not populated date fields.\n    const\n        { timeAxis }     = scheduler,\n        date             = eventRecord.isBatchUpdating && !useEventBuffer ? eventRecord.get(fieldName) : eventRecord[fieldName],\n        hasBatchedChange = eventRecord.hasBatchedChange?.(fieldName),\n        // fillTicks shouldn't be used during resizing for changing date for smooth animation.\n        // correct date will be applied after resize, when `isResizing` will be falsy\n        useTickDates     = scheduler.fillTicks && (!eventRecord.meta.isResizing || !hasBatchedChange);\n\n    if (useTickDates) {\n        let tick = timeAxis.getTickFromDate(date);\n\n        if (tick >= 0) {\n            // If date matches a tick start/end, use the earlier tick\n            if (useEnd && tick === Math.round(tick) && tick > 0) {\n                tick--;\n            }\n\n            const\n                tickIndex  = Math.floor(tick),\n                tickRecord = timeAxis.getAt(tickIndex);\n\n            return tickRecord[fieldName].getTime();\n        }\n    }\n\n    return date?.getTime();\n}\n\n/**\n * Handles event rendering in Schedulers horizontal mode. Reacts to project/store changes to keep the UI up to date.\n *\n * @internal\n */\nexport default class HorizontalRendering extends Base.mixin(AttachToProjectMixin) {\n    //region Config & Init\n\n    static $name = 'HorizontalRendering';\n\n    static get configurable() {\n        return {\n            // It's needed to adjust visible date range in Export. Set to 100 to render additional 100px\n            // worth of ticks which helps to scroll faster during export and fixes\n            // issue when scrollToDate cannot reach panel end date on exceptionally narrow view\n            scrollBuffer : 0,\n\n            /**\n             * Amount of pixels to extend the current visible range at both ends with when deciding which events to\n             * render. Only applies when using labels or for milestones\n             * @config {Number}\n             * @default\n             */\n            bufferSize : 150,\n\n            verticalBufferSize : 150\n        };\n    }\n\n    static get properties() {\n        return {\n            // Map with event DOM configs, keyed by resource id\n            resourceMap            : new Map(),\n            // Map with visible events DOM configs, keyed by row instance\n            rowMap                 : new Map(),\n            eventConfigs           : [],\n            // Flag to avoid transitioning on first refresh\n            isFirstRefresh         : true,\n            toDrawOnProjectRefresh : new Set(),\n            toDrawOnDataReady      : new Set()\n        };\n    }\n\n    construct(scheduler) {\n        const me = this;\n\n        me.client = me.scheduler = scheduler;\n\n        me.eventSorter = me.eventSorter.bind(scheduler);\n\n        // Catch scroll before renderers are called\n        scheduler.scrollable.ion({\n            scroll  : 'onEarlyScroll',\n            prio    : 1,\n            thisObj : me\n        });\n\n        scheduler.rowManager.ion({\n            name            : 'rowManager',\n            renderDone      : 'onRenderDone',\n            removeRows      : 'onRemoveRows',\n            translateRow    : 'onTranslateRow',\n            offsetRows      : 'onOffsetRows',\n            beforeRowHeight : 'onBeforeRowHeightChange',\n            thisObj         : me\n        });\n\n        super.construct({});\n    }\n\n    init() {}\n\n    updateVerticalBufferSize() {\n        const { rowManager } = this.scheduler;\n\n        if (this.scheduler.isPainted) {\n            // Refresh rows when vertical buffer size changes to trigger event repaint. Required for the export feature.\n            rowManager.renderRows(rowManager.rows);\n        }\n    }\n\n    //endregion\n\n    //region Region, dates & coordinates\n\n    get visibleDateRange() {\n        return this._visibleDateRange;\n    }\n\n    getDateFromXY(xy, roundingMethod, local, allowOutOfRange = false) {\n        const { scheduler } = this;\n\n        let coord = xy[0];\n\n        if (!local) {\n            coord = this.translateToScheduleCoordinate(coord);\n        }\n\n        coord = scheduler.getRtlX(coord);\n\n        return scheduler.timeAxisViewModel.getDateFromPosition(coord, roundingMethod, allowOutOfRange);\n    }\n\n    translateToScheduleCoordinate(x) {\n        const\n            { scheduler } = this,\n            { scrollable } = scheduler.timeAxisSubGrid;\n\n        let result = x - scheduler.timeAxisSubGridElement.getBoundingClientRect().left - globalThis.scrollX;\n\n        // Because we use getBoundingClientRect's left, we have to adjust for page scroll.\n        // The vertical counterpart uses the _bodyRectangle which was created with that adjustment.\n\n        if (scheduler.rtl) {\n            result += scrollable.maxX - Math.abs(scheduler.scrollLeft);\n        }\n        else {\n            result += scheduler.scrollLeft;\n        }\n\n        return result;\n    }\n\n    translateToPageCoordinate(x) {\n        const\n            { scheduler } = this,\n            { scrollable } = scheduler.timeAxisSubGrid;\n\n        let result = x + scheduler.timeAxisSubGridElement.getBoundingClientRect().left;\n\n        if (scheduler.rtl) {\n            result -= scrollable.maxX - Math.abs(scheduler.scrollLeft);\n        }\n        else {\n            result -= scheduler.scrollLeft;\n        }\n\n        return result;\n    }\n\n    /**\n     * Gets the region, relative to the page, represented by the schedule and optionally only for a single resource.\n     * This method will call getDateConstraints to allow for additional resource/event based constraints. By overriding\n     * that method you can constrain events differently for different resources.\n     * @param {Scheduler.model.ResourceModel} [resourceRecord] (optional) The row record\n     * @param {Scheduler.model.EventModel} [eventRecord] (optional) The event record\n     * @returns {Core.helper.util.Rectangle} The region of the schedule\n     */\n    getScheduleRegion(resourceRecord, eventRecord, local = true, dateConstraints, stretch = false) {\n        const\n            me                                   = this,\n            { scheduler }                        = me,\n            { timeAxisSubGridElement, timeAxis } = scheduler,\n            resourceMargin                       = (!stretch || resourceRecord) && scheduler.getResourceMargin(resourceRecord) || 0;\n\n        let region;\n\n        if (resourceRecord) {\n            const eventElement = eventRecord && scheduler.getElementsFromEventRecord(eventRecord, resourceRecord)[0];\n\n            region = Rectangle.from(scheduler.getRowById(resourceRecord.id).getElement('normal'), timeAxisSubGridElement);\n\n            if (eventElement) {\n                const eventRegion = Rectangle.from(eventElement, timeAxisSubGridElement);\n\n                region.y = eventRegion.y;\n                region.bottom = eventRegion.bottom;\n            }\n            else {\n                region.y = region.y + resourceMargin;\n                region.bottom = region.bottom - resourceMargin;\n            }\n        }\n        else {\n            // TODO: This is what the function that was removed here did.\n            // The coordinate space needs to be sorted out here!\n            region = Rectangle.from(timeAxisSubGridElement).moveTo(null, 0);\n            region.width = timeAxisSubGridElement.scrollWidth;\n\n            region.y = region.y + resourceMargin;\n            region.bottom = region.bottom - resourceMargin;\n        }\n\n        const\n            taStart         = timeAxis.startDate,\n            taEnd           = timeAxis.endDate;\n\n        dateConstraints = (dateConstraints?.start && dateConstraints) || scheduler.getDateConstraints?.(resourceRecord, eventRecord) || {\n            start : taStart,\n            end   : taEnd\n        };\n\n        let startX          = scheduler.getCoordinateFromDate(dateConstraints.start ? DateHelper.max(taStart, dateConstraints.start) : taStart),\n            endX            = scheduler.getCoordinateFromDate(dateConstraints.end ? DateHelper.min(taEnd, dateConstraints.end) : taEnd);\n\n        if (!local) {\n            startX = me.translateToPageCoordinate(startX);\n            endX = me.translateToPageCoordinate(endX);\n        }\n\n        region.left = Math.min(startX, endX);\n        region.right = Math.max(startX, endX);\n\n        return region;\n    }\n\n    /**\n     * Gets the Region, relative to the timeline view element, representing the passed row and optionally just for a\n     * certain date interval.\n     * @param {Core.data.Model} rowRecord The row record\n     * @param {Date} startDate A start date constraining the region\n     * @param {Date} endDate An end date constraining the region\n     * @returns {Core.helper.util.Rectangle} The Rectangle which encapsulates the row\n     */\n    getRowRegion(rowRecord, startDate, endDate) {\n        const\n            { scheduler } = this,\n            { timeAxis }  = scheduler,\n            row           = scheduler.getRowById(rowRecord.id);\n\n        // might not be rendered\n        if (!row) {\n            return null;\n        }\n\n        const\n            taStart    = timeAxis.startDate,\n            taEnd      = timeAxis.endDate,\n            start      = startDate ? DateHelper.max(taStart, startDate) : taStart,\n            end        = endDate ? DateHelper.min(taEnd, endDate) : taEnd,\n            startX     = scheduler.getCoordinateFromDate(start),\n            endX       = scheduler.getCoordinateFromDate(end, true, true),\n            y          = row.top,\n            x          = Math.min(startX, endX),\n            bottom     = y + row.offsetHeight;\n\n        return new Rectangle(x, y, Math.max(startX, endX) - x, bottom - y);\n    }\n\n    getResourceEventBox(eventRecord, resourceRecord, includeOutside, roughly = false) {\n        const resourceData = this.resourceMap.get(resourceRecord.id);\n\n        let eventLayout  = null,\n            approx       = false;\n\n        if (resourceData) {\n            eventLayout = resourceData.eventsData.find(d => d.eventRecord === eventRecord);\n        }\n\n        // Outside of view, layout now if supposed to be included\n        if (!eventLayout) {\n            eventLayout = this.getTimeSpanRenderData(\n                eventRecord,\n                resourceRecord,\n                { viewport : true, timeAxis : includeOutside }\n            );\n\n            approx = true;\n        }\n\n        if (eventLayout) {\n            // Event layout is relative to row, need to make to absolute before returning\n            const\n                rowBox      = this.scheduler.rowManager.getRecordCoords(resourceRecord, true, roughly),\n                absoluteTop = eventLayout.top + rowBox.top,\n                box         = new Rectangle(eventLayout.left, absoluteTop, eventLayout.width, eventLayout.height);\n\n            // Flag informing other parts of the code that this box is approximated\n            box.layout = !approx;\n            box.rowTop = rowBox.top;\n            box.rowBottom = rowBox.bottom;\n\n            box.resourceId = resourceRecord.id;\n\n            return box;\n        }\n\n        return null;\n    }\n\n    //endregion\n\n    //region Element <-> Record mapping\n\n    resolveRowRecord(elementOrEvent) {\n        const\n            me             = this,\n            { scheduler }  = me,\n            element        = elementOrEvent.nodeType ? elementOrEvent : elementOrEvent.target,\n            // Fix for FF on Linux having text nodes as event.target\n            el             = element.nodeType === Element.TEXT_NODE ? element.parentElement : element,\n            eventNode      = el.closest(scheduler.eventSelector);\n\n        if (eventNode) {\n            return me.resourceStore.getById(eventNode.dataset.resourceId);\n        }\n\n        return scheduler.getRecordFromElement(el);\n    }\n\n    //endregion\n\n    //region Project\n\n    attachToProject(project) {\n        super.attachToProject(project);\n\n        this.refreshAllWhenReady = true;\n\n        // Perform a full clear when replacing the project, to not leave any references to old project in DOM\n        if (!this.scheduler.isConfiguring) {\n            this.clearAll({ clearDom : true });\n        }\n\n        project?.ion({\n            name            : 'project',\n            refresh         : 'onProjectRefresh',\n            commitFinalized : 'onProjectCommitFinalized',\n            thisObj         : this\n        });\n    }\n\n    onProjectCommitFinalized() {\n        const { scheduler, toDrawOnDataReady, project } = this;\n\n        // Only update the UI immediately if we are visible\n        if (scheduler.isVisible) {\n            if (scheduler.isPainted && !scheduler.refreshSuspended) {\n                // If this is a timezone commit, we got here from a store dataset\n                // We need to do a full refresh\n                if (!toDrawOnDataReady.size && project.timeZone && project.ignoreRecordChanges) {\n                    toDrawOnDataReady.add(...project.resourceStore.records.flatMap(r => r.id));\n                }\n                if (toDrawOnDataReady.size) {\n                    this.clearResources(toDrawOnDataReady);\n                    this.refreshResources(toDrawOnDataReady);\n                }\n\n                toDrawOnDataReady.clear();\n            }\n        }\n        // Otherwise wait till next time we get painted (shown, or a hidden ancestor shown)\n        else {\n            scheduler.whenVisible('refreshRows');\n        }\n    }\n\n    onProjectRefresh({ isCalculated, isInitialCommit }) {\n        const\n            me                                    = this,\n            { scheduler, toDrawOnProjectRefresh } = me;\n\n        // Only update the UI immediately if we are visible\n        if (scheduler.isVisible) {\n            if (scheduler.isPainted && !scheduler.isConfiguring && !scheduler.refreshSuspended) {\n                // Either refresh all rows (on for example dataset or when delayed calculations are finished)\n                if (me.refreshAllWhenReady || (isInitialCommit && isCalculated)) {\n                    scheduler.calculateAllRowHeights(true);\n                    const { rowManager } = scheduler;\n\n                    // Rows rendered? Refresh\n                    if (rowManager.topRow) {\n                        me.clearAll();\n\n                        // Refresh only if it won't be refreshed elsewhere (SchedulerStore#onProjectRefresh())\n                        if (!scheduler.refreshAfterProjectRefresh) {\n                            // If refresh was suspended when replacing the dataset in a scrolled view we might end up with a\n                            // topRow outside of available range -> reset it. Call renderRows() to mimic what normally happens\n                            // when refresh is not suspended\n                            if (rowManager.topRow.dataIndex >= scheduler.store.count) {\n                                scheduler.renderRows(false);\n                            }\n                            else {\n                                // Dont transition first refresh / early render\n                                scheduler.refreshWithTransition(false, !me.isFirstRefresh && isCalculated && !isInitialCommit);\n                            }\n                        }\n\n                        me.isFirstRefresh = false;\n                    }\n                    // No rows yet, reinitialize (happens if initial project empty and then non empty project assigned)\n                    else {\n                        rowManager.reinitialize();\n                    }\n\n                    me.refreshAllWhenReady = false;\n                }\n                // Or only affected rows (if any)\n                else if (toDrawOnProjectRefresh.size) {\n                    me.refreshResources(toDrawOnProjectRefresh);\n                }\n\n                toDrawOnProjectRefresh.clear();\n            }\n        }\n        // Otherwise wait till next time we get painted (shown, or a hidden ancestor shown)\n        else {\n            scheduler.whenVisible('refresh', scheduler, [true]);\n        }\n    }\n\n    //endregion\n\n    //region AssignmentStore\n\n    attachToAssignmentStore(assignmentStore) {\n        this.refreshAllWhenReady = true;\n\n        super.attachToAssignmentStore(assignmentStore);\n\n        if (assignmentStore) {\n            assignmentStore.ion({\n                name             : 'assignmentStore',\n                changePreCommit  : 'onAssignmentStoreChange',\n                refreshPreCommit : 'onAssignmentStoreRefresh',\n                thisObj          : this\n            });\n        }\n    }\n\n    onAssignmentStoreChange({ source, action, records : assignmentRecords = [], replaced, changes }) {\n        const\n            me                = this,\n            { scheduler }     = me,\n            resourceIds       = new Set(assignmentRecords.flatMap(assignmentRecord => ([\n                assignmentRecord.resourceId,\n                // Also include any linked resources (?. twice since resource might not be resolved and point to id)\n                ...assignmentRecord.resource?.$links?.map(link => link.id) ?? []\n            ])));\n\n        // Ignore assignment changes caused by removing resources, the remove will redraw things anyway\n        // Also ignore case when resource id is changed. In this case row will be refreshed by the grid\n        if (me.resourceStore.isRemoving || me.resourceStore.isChangingId) {\n            return;\n        }\n\n        switch (action) {\n            // These operations will invalidate the graph, need to draw later\n            case 'dataset': {\n                // Ignore dataset when using single assignment mode\n                if (!me.eventStore.usesSingleAssignment) {\n                    if (resourceIds.size) {\n                        me.refreshResourcesWhenReady(resourceIds);\n                    }\n                    else {\n                        me.clearAll();\n                        scheduler.refreshWithTransition();\n                    }\n                }\n                return;\n            }\n\n            case 'add':\n            case 'remove':\n            case 'updateMultiple': // TODO: Dont think updateMultiple is covered by any test...\n                me.refreshResourcesWhenReady(resourceIds);\n                return;\n\n            case 'removeall':\n                me.refreshAllWhenReady = true;\n                return;\n\n            case 'replace':\n                // Gather resources from both the old record and the new one\n                replaced.forEach(([oldAssignment, newAssignment]) => {\n                    resourceIds.add(oldAssignment.resourceId);\n                    resourceIds.add(newAssignment.resourceId);\n                });\n                // And refresh them\n                me.refreshResourcesWhenReady(resourceIds);\n                return;\n\n            // These operations wont invalidate the graph, redraw now\n            case 'filter':\n                me.clearAll();\n                scheduler.calculateAllRowHeights(true);\n                scheduler.refreshWithTransition();\n                return;\n\n            case 'update': {\n                if ('eventId' in changes || 'resourceId' in changes || 'id' in changes) {\n                    // When reassigning, clear old resource also\n                    if ('resourceId' in changes) {\n                        resourceIds.add(changes.resourceId.oldValue);\n                    }\n\n                    // When chaining stores in single assignment mode, we might not be the project store\n                    if (source === scheduler.project.assignmentStore) {\n                        me.refreshResourcesOnDataReady(resourceIds);\n                    }\n                    // Refresh directly when we are not\n                    else {\n                        me.refreshResources(resourceIds);\n                    }\n                }\n                break;\n            }\n\n            case 'clearchanges': {\n                const { added, modified, removed } = changes;\n\n                // If modified records appear in the clearchanges action we need to refresh entire view\n                // because we have not enough information about previously assigned resource\n                if (modified) {\n                    scheduler.refreshWithTransition();\n                }\n                else {\n                    added.forEach(r => resourceIds.add(r.resourceId));\n                    removed.forEach(r => resourceIds.add(r.resourceId));\n\n                    me.refreshResourcesOnDataReady(resourceIds);\n                }\n            }\n        }\n    }\n\n    onAssignmentStoreRefresh({ action, records }) {\n        if (action === 'batch') {\n            this.clearAll();\n            this.scheduler.refreshWithTransition();\n        }\n    }\n\n    //endregion\n\n    //region EventStore\n\n    attachToEventStore(eventStore) {\n        this.refreshAllWhenReady = true;\n\n        super.attachToEventStore(eventStore);\n\n        if (eventStore) {\n            eventStore.ion({\n                name             : 'eventStore',\n                refreshPreCommit : 'onEventStoreRefresh',\n                thisObj          : this\n            });\n        }\n    }\n\n    onEventStoreRefresh({ action }) {\n        if (action === 'batch') {\n            const { scheduler } = this;\n            if (scheduler.isEngineReady && scheduler.isPainted) {\n                this.clearAll();\n                scheduler.refreshWithTransition();\n            }\n        }\n    }\n\n    onEventStoreChange({ action, records : eventRecords = [], record, replaced, changes, source }) {\n        const\n            me                  = this,\n            { scheduler }       = me,\n            isResourceTimeRange = source.isResourceTimeRangeStore,\n            resourceIds         = new Set();\n\n        if (!scheduler.isPainted) {\n            return;\n        }\n\n        eventRecords.forEach(eventRecord => {\n            // Update all resource rows to which this event is assigned *if* the resourceStore\n            // contains that resource (We could have filtered the resourceStore)\n            const renderedEventResources = eventRecord.$linkedResources?.filter(r => me.resourceStore.includes(r));\n\n            // When rendering a Gantt project, the project model also passes through here -> no `resources`\n            renderedEventResources?.forEach(resourceRecord => resourceIds.add(resourceRecord.id));\n        });\n\n        if (isResourceTimeRange) {\n            switch (action) {\n                // - dataset cant pass through same path as events, which relies on project being invalidated. and\n                // resource time ranges does not pass through engine\n                // - removeall also needs special path, since no resources to redraw will be collected\n                case 'removeall':\n                case 'dataset':\n                    me.clearAll();\n                    scheduler.refreshWithTransition();\n                    return;\n            }\n\n            me.refreshResources(resourceIds);\n        }\n        else {\n            switch (action) {\n                // No-ops\n                case 'batch': // Handled elsewhere, dont want it to clear again\n                case 'sort':  // Order in EventStore does not matter, so these actions are no-ops\n                case 'group':\n                case 'move':\n                    return;\n\n                case 'remove':\n                    // Remove is a no-op since assignment will also be removed\n                    return;\n\n                case 'clearchanges':\n                    me.clearAll();\n                    scheduler.refreshWithTransition();\n                    return;\n\n                case 'dataset': {\n                    me.clearAll();\n                    // This is mainly for chained stores, where data is set from main store without project being\n                    // invalidated. Nothing to wait for, refresh now\n                    if (scheduler.isEngineReady) {\n                        scheduler.refreshWithTransition();\n                    }\n                    else {\n                        me.refreshAllWhenReady = true;\n                    }\n                    return;\n                }\n\n                case 'add':\n                case 'updateMultiple':\n                    // Just refresh below\n                    break;\n\n                case 'replace':\n                    // Gather resources from both the old record and the new one\n                    replaced.forEach(([, newEvent]) => {\n                        // Old cleared by changed assignment\n                        newEvent.resources.map(resourceRecord => resourceIds.add(resourceRecord.id));\n                    });\n                    break;\n\n                case 'removeall':\n                case 'filter':\n                    // Filter might be caused by add retriggering filters, in which case we need to refresh later\n                    if (!scheduler.isEngineReady) {\n                        me.refreshAllWhenReady = true;\n                        return;\n                    }\n\n                    // Clear all when filtering for simplicity. If that turns out to give bad performance, one would need to\n                    // figure out which events was filtered out and only clear their resources.\n                    me.clearAll();\n                    scheduler.calculateAllRowHeights(true);\n                    scheduler.refreshWithTransition();\n                    return;\n\n                case 'update': {\n                    // Check if changes are graph related or not\n                    const allChrono = record.$entity\n                        ? !Object.keys(changes).some(name => !record.$entity.getField(name))\n                        : !Object.keys(changes).some(name => !chronoFields[name]);\n\n                    let dateChanges = 0;\n                    'startDate' in changes && dateChanges++;\n                    'endDate' in changes && dateChanges++;\n                    'duration' in changes && dateChanges++;\n\n                    if ('resourceId' in changes) {\n                        resourceIds.add(changes.resourceId.oldValue);\n                    }\n\n                    // If we have a set of resources to update, refresh them.\n                    // Always redraw non chrono changes (name etc) and chrono changes that can affect appearance\n                    if (\n                        resourceIds.size && (\n                            !allChrono ||\n                            // skip case when changed \"duration\" only (w/o start/end affected)\n                            dateChanges && !('duration' in changes && dateChanges === 1) ||\n                            'percentDone' in changes ||\n                            'inactive' in changes ||\n                            'segments' in changes\n                        )\n                    ) {\n                        // if we are finalizing data loading let's delay the resources refresh till all the\n                        // propagation results get into stores\n                        if (me.project?.propagatingLoadChanges || me.project?.isWritingData) {\n                            me.refreshResourcesOnDataReady(resourceIds);\n                        }\n                        else {\n                            me.refreshResources(resourceIds);\n                        }\n                    }\n                    return;\n                }\n            }\n\n            me.refreshResourcesWhenReady(resourceIds);\n        }\n    }\n\n    //endregion\n\n    //region ResourceStore\n\n    attachToResourceStore(resourceStore) {\n\n        this.refreshAllWhenReady = true;\n\n        super.attachToResourceStore(resourceStore);\n\n        if (resourceStore) {\n            this.clearAll({ clearLayoutCache : true });\n\n            resourceStore.ion({\n                name            : 'resourceStore',\n                changePreCommit : 'onResourceStoreChange',\n                thisObj         : this\n            });\n        }\n    }\n\n    get resourceStore() {\n        return this.client.store;\n    }\n\n    onResourceStoreChange({ action, isExpand, records, changes }) {\n        const\n            me          = this,\n            // Update link + original when asked for link\n            resourceIds = records?.flatMap(r => r.isLinked ? [r.id, r.$originalId] : [r.id]);\n\n        if (!me.scheduler.isPainted) {\n            return;\n        }\n\n        switch (action) {\n            case 'add':\n                // #635 Events disappear when toggling other node\n                // If we are expanding project won't fire refresh event\n                if (!isExpand) {\n                    // Links won't cause calculations, refresh now\n                    if (records.every(r => r.isLinked)) {\n                        me.refreshResources(resourceIds);\n                    }\n                    // Otherwise refresh when project is ready\n                    else {\n                        me.refreshResourcesWhenReady(resourceIds);\n                    }\n                }\n                return;\n            case 'update': {\n                // Ignore changes from project commit, if they affect events they will be redrawn anyway\n                // Also ignore explicit transformation of leaf <-> parent\n                if (!me.project.isBatchingChanges && !changes.isLeaf) {\n                    // Resource changes might affect events, refresh\n                    me.refreshResources(resourceIds);\n                }\n                return;\n            }\n            case 'filter':\n                // Bail out on filter action. Map was already updated on `refresh` event triggered before this `change`\n                // one. And extra records are removed from rowMap by `onRemoveRows`\n                return;\n            case 'removeall':\n                me.clearAll({ clearLayoutCache : true });\n                return;\n\n                // We must not clear all resources when whole dataset changes\n                // https://github.com/bryntum/support/issues/3292\n            case 'dataset':\n                return;\n        }\n\n        resourceIds && me.clearResources(resourceIds);\n    }\n\n    //endregion\n\n    //region RowManager\n\n    onTranslateRow({ row }) {\n        // Newly added rows are translated prior to having an id, rule those out since they will be rendered later\n        if (row.id != null) {\n            // Event layouts are stored relative to the resource, only need to rerender the row to have its absolute\n            // position updated to match new translation\n            this.refreshEventsForResource(row, false);\n        }\n    }\n\n    // RowManager error correction, cached layouts will no longer match.\n    // Redraw to have events correctly positioned for dependency feature to draw to their elements\n    onOffsetRows() {\n        this.clearAll();\n        this.doUpdateTimeView();\n    }\n\n    // Used to pre-calculate row heights\n    calculateRowHeight(resourceRecord) {\n        const\n            { scheduler } = this,\n            rowHeight     = scheduler.getResourceHeight(resourceRecord),\n            eventLayout   = scheduler.getEventLayout(resourceRecord),\n            layoutType    = eventLayout.type;\n\n        if (\n            layoutType === 'stack' &&\n            scheduler.isEngineReady &&\n            !resourceRecord.isSpecialRow &&\n            // Generated parents when TreeGrouping do not have assigned bucket\n            resourceRecord.assigned?.size > 1\n        ) {\n            const\n                {\n                    assignmentStore,\n                    eventStore,\n                    timeAxis\n                }               = scheduler,\n                {\n                    barMargin,\n                    resourceMargin,\n                    contentHeight\n                }               = scheduler.getResourceLayoutSettings(resourceRecord),\n                // When using an AssignmentStore we will get all events for the resource even if the EventStore is\n                // filtered\n                eventFilter     = (eventStore.isFiltered || assignmentStore.isFiltered) && (eventRecord =>\n                    eventRecord.assignments.some(a => a.resource === resourceRecord.$original && assignmentStore.includes(a))),\n                events          = eventStore\n                    .getEvents({\n                        resourceRecord,\n                        includeOccurrences : scheduler.enableRecurringEvents,\n                        startDate          : timeAxis.startDate,\n                        endDate            : timeAxis.endDate,\n                        filter             : eventFilter\n                    })\n                    .sort(heightEventSorter)\n                    .map(eventRecord => {\n                        const\n                            // Must use Model.get in order to get latest values in case we are inside a batch.\n                            // EventResize changes the endDate using batching to enable a tentative change\n                            // via the batchedUpdate event which is triggered when changing a field in a batch.\n                            // Fall back to accessor if propagation has not populated date fields.\n                            startDate = eventRecord.isBatchUpdating ? eventRecord.get('startDate') : eventRecord.startDate,\n                            endDate   = eventRecord.isBatchUpdating ? eventRecord.get('endDate') : eventRecord.endDate || startDate;\n\n                        return {\n                            eventRecord,\n                            resourceRecord,\n                            startMS : startDate.getTime(),\n                            endMS   : endDate.getTime()\n                        };\n                    }),\n                layoutHandler = scheduler.getEventLayoutHandler(eventLayout),\n                nbrOfBandsRequired = layoutHandler.layoutEventsInBands(events, true);\n\n            if (layoutHandler.type === 'layoutFn') {\n                return nbrOfBandsRequired;\n            }\n\n            return (nbrOfBandsRequired * contentHeight) + ((nbrOfBandsRequired - 1) * barMargin) + resourceMargin * 2;\n        }\n\n        return rowHeight;\n    }\n\n    //endregion\n\n    //region TimeAxis\n\n    doUpdateTimeView() {\n        const { scrollable } = this.scheduler.timeAxisSubGrid;\n\n        // scrollLeft is the DOM's concept which is -ve in RTL mode.\n        // scrollX i always the +ve scroll offset from the origin.\n        // Both may be needed for different calculations.\n        this.updateFromHorizontalScroll(scrollable.x);\n    }\n\n    onTimeAxisViewModelUpdate() {\n        const\n            me            = this,\n            { scheduler } = me;\n\n        me.clearAll();\n\n        // If refresh is suspended, update timeView as soon as refresh gets unsuspended\n        if (scheduler.refreshSuspended) {\n            me.detachListeners('renderingSuspend');\n\n            scheduler.ion({\n                name : 'renderingSuspend',\n                resumeRefresh({ trigger }) {\n                    // This code will try to refresh rows, but resumeRefresh event doesn't guarantee rowManager rows are\n                    // in actual state. e.g. if resources were removed during a suspended refresh rowManager won't get a\n                    // chance to update them until `refresh` event from the project. We can safely update the view only\n                    // if engine in ready (not committing), otherwise we leave refresh a liability of normal project refresh\n                    // logic. Covered by SchedulerRendering.t.js\n                    // https://github.com/bryntum/support/issues/1462\n                    if (scheduler.isEngineReady && trigger) {\n                        me.doUpdateTimeView();\n                    }\n                },\n                thisObj : me,\n                once    : true\n            });\n        }\n\n        // Call update anyway. If refresh is suspended this call will only update visible date range and will not redraw rows\n        me.doUpdateTimeView();\n    }\n\n    //endregion\n\n    //region Dependency connectors\n\n    /**\n     * Gets displaying item start side\n     *\n     * @param {Scheduler.model.EventModel} eventRecord\n     * @returns {'start'|'end'|'top'|'bottom'} 'start' / 'end' / 'top' / 'bottom'\n     */\n    getConnectorStartSide(eventRecord) {\n        return 'start';\n    }\n\n    /**\n     * Gets displaying item end side\n     *\n     * @param {Scheduler.model.EventModel} eventRecord\n     * @returns {'start'|'end'|'top'|'bottom'} 'start' / 'end' / 'top' / 'bottom'\n     */\n    getConnectorEndSide(eventRecord) {\n        return 'end';\n    }\n\n    //endregion\n\n    //region Scheduler hooks\n\n    refreshRows(reLayoutEvents) {\n        if (reLayoutEvents) {\n            this.clearAll();\n        }\n    }\n\n    // Clear events in case they use date as part of displayed info\n    onLocaleChange() {\n        this.clearAll();\n    }\n\n    // Called when viewport size changes\n    onViewportResize(width, height, oldWidth, oldHeight) {\n        // We dont draw events for all rendered rows, \"refresh\" when height changes to make sure events in previously\n        // invisible rows gets displayed\n        if (height > oldHeight) {\n            this.onRenderDone();\n        }\n    }\n\n    // Called from EventDrag\n    onDragAbort({ context, dragData }) {\n        // Aborted a drag in a scrolled scheduler, with origin now out of view. Element is no longer needed\n        if (this.resourceStore.indexOf(dragData.record.resource) < this.scheduler.topRow.dataIndex) {\n            context.element.remove();\n        }\n    }\n\n    // Called from EventSelection\n    toggleCls(assignmentRecord, cls, add = true, useWrapper = false) {\n        const\n            element      = this.client.getElementFromAssignmentRecord(assignmentRecord, useWrapper),\n            // TODO: Should be assignmentRecord.resourceId, but breaks engine. Hoping https://github.com/bryntum/bryntum-suite/pull/1252 will fix it\n            resourceData = this.resourceMap.get(assignmentRecord.isModel ? assignmentRecord.get('resourceId') : assignmentRecord.resourceId),\n            eventData    = resourceData?.eventsData.find(d => d.eventId === assignmentRecord.eventId);\n\n        // Update cached config\n        if (eventData) {\n            eventData[useWrapper ? 'wrapperCls' : 'cls'][cls] = add;\n        }\n\n        // Live update element\n        if (element) {\n            // Update element\n            element.classList[add ? 'add' : 'remove'](cls);\n            // And its DOM config\n            element.lastDomConfig.className[cls] = add;\n        }\n    }\n\n    // React to rows being removed, refreshes view without any relayouting needed since layout is cached relative to row\n    onRemoveRows({ rows }) {\n        rows.forEach(row => this.rowMap.delete(row));\n        this.onRenderDone();\n    }\n\n    // Reset renderer flag before any renderers are called\n    onEarlyScroll() {\n        this.rendererCalled = false;\n    }\n\n    // If vertical scroll did not cause a renderer to be called we still want to update since we only draw events in\n    // view, \"independent\" from their rows\n    updateFromVerticalScroll() {\n        this.fromScroll = true;\n        if (!this.rendererCalled) {\n            this.onRenderDone();\n        }\n    }\n\n    // Update header range on horizontal scroll. No need to draw any tasks, Gantt only cares about vertical scroll\n    updateFromHorizontalScroll(scrollX) {\n        const\n            me            = this,\n            {\n                scheduler,\n                // scrollBuffer is an export only thing\n                scrollBuffer\n            } = me,\n            {\n                timeAxisSubGrid,\n                timeAxis,\n                rtl\n            }             = scheduler,\n            { width }     = timeAxisSubGrid,\n            { totalSize } = scheduler.timeAxisViewModel,\n            start         = scrollX,\n            // If there are few pixels left from the right most position then just render all remaining ticks,\n            // there wouldn't be many. It makes end date reachable with more page zoom levels while not having any poor\n            // implications.\n            // 5px to make TimeViewRangePageZoom test stable in puppeteer.\n            returnEnd     = timeAxisSubGrid.scrollable.maxX !== 0 && Math.abs(timeAxisSubGrid.scrollable.maxX) <= Math.round(start) + 5,\n            startDate     = scheduler.getDateFromCoord({ coord : Math.max(0, start - scrollBuffer), ignoreRTL : true }),\n            endDate       = returnEnd ? timeAxis.endDate : (scheduler.getDateFromCoord({ coord : start + width + scrollBuffer, ignoreRTL : true }) || timeAxis.endDate);\n\n        if (startDate && !scheduler._viewPresetChanging) {\n            me._visibleDateRange = { startDate, endDate, startMS : startDate.getTime(), endMS : endDate.getTime() };\n            me.viewportCoords  = rtl\n                // RTL starts all the way to the right (and goes in opposite direction)\n                ? { left : totalSize - scrollX - width + scrollBuffer, right : totalSize - scrollX - scrollBuffer }\n                // LTR all the way to the left\n                : { left : scrollX - scrollBuffer, right : scrollX + width + scrollBuffer };\n\n            // Update timeaxis header making it display the new dates\n            const range = scheduler.timeView.range = { startDate, endDate };\n\n            scheduler.onVisibleDateRangeChange(range);\n\n            // If refresh is suspended, someone else is responsible for updating the UI later\n            if (!scheduler.refreshSuspended && scheduler.rowManager.rows.length) {\n                // Gets here too early in Safari for ResourceHistogram. ResizeObserver triggers a scroll before rows are\n                // rendered first time. Could not track down why, bailing out\n                if (scheduler.rowManager.rows[0].id === null) {\n                    return;\n                }\n\n                me.fromScroll = true;\n                scheduler.rowManager.rows.forEach(row => me.refreshEventsForResource(row, false, false));\n\n                me.onRenderDone();\n            }\n        }\n    }\n\n    // Called from SchedulerEventRendering\n    repaintEventsForResource(resourceRecord) {\n        this.refreshResources([resourceRecord.id]);\n    }\n\n    onBeforeRowHeightChange() {\n        // Row height is cached per resource, all have to be re-laid out\n        this.clearAll();\n    }\n\n    //endregion\n\n    //region Refresh resources\n\n    refreshResourcesOnDataReady(resourceIds) {\n        resourceIds.forEach(id => this.toDrawOnDataReady.add(id));\n    }\n\n    /**\n     * Clears resources directly and redraws them on next project refresh\n     * @param {Number[]|String[]} resourceIds\n     * @private\n     */\n    refreshResourcesWhenReady(resourceIds) {\n        this.clearResources(resourceIds);\n        resourceIds.forEach(id => this.toDrawOnProjectRefresh.add(id));\n    }\n\n    /**\n     * Clears and redraws resources directly. Respects schedulers refresh suspension\n     * @param {Number[]|String[]} ids Resource ids\n     * @param {Boolean} [transition] Use transition or not\n     * @private\n     */\n    refreshResources(ids, transition = true) {\n        const\n            me            = this,\n            { scheduler } = me,\n            rows          = [],\n            noRows        = [];\n\n        me.clearResources(ids);\n\n        if (!scheduler.refreshSuspended) {\n            ids.forEach(id => {\n                const row = scheduler.getRowById(id);\n                if (row) {\n                    rows.push(row);\n                }\n                else {\n                    noRows.push(row);\n                }\n            });\n\n            scheduler.runWithTransition(() => {\n                // Rendering rows populates row heights, but not all resources might have a row in view\n                scheduler.calculateRowHeights(noRows.map(id => this.resourceStore.getById(id)), true);\n\n                // Render those that do\n                scheduler.rowManager.renderRows(rows);\n            }, transition);\n        }\n    }\n\n    //endregion\n\n    //region Stack & pack\n\n    layoutEventVerticallyStack(bandIndex, eventRecord, resourceRecord) {\n        const { barMargin, resourceMargin, contentHeight } = this.scheduler.getResourceLayoutSettings(resourceRecord, eventRecord.parent);\n\n        return bandIndex === 0\n            ? resourceMargin\n            : resourceMargin + bandIndex * contentHeight + bandIndex * barMargin;\n    }\n\n    layoutEventVerticallyPack(topFraction, heightFraction, eventRecord, resourceRecord) {\n        const\n            {\n                barMargin,\n                resourceMargin,\n                contentHeight\n            }               = this.scheduler.getResourceLayoutSettings(resourceRecord, eventRecord.parent),\n            count           = 1 / heightFraction,\n            bandIndex       = topFraction * count, // \"y\" within row\n            height          = (contentHeight - ((count - 1) * barMargin)) * heightFraction,\n            top             = resourceMargin + bandIndex * height + bandIndex * barMargin;\n\n        return {\n            top, height\n        };\n    }\n\n    //endregion\n\n    //region Render\n\n    /**\n     * Used by event drag features to bring into existence event elements that are outside of the rendered block.\n     * @param {Scheduler.model.TimeSpan} eventRecord The event to render\n     * @param {Scheduler.model.ResourceModel} [resourceRecord] The event to render\n     * @private\n     */\n    addTemporaryDragElement(eventRecord, resourceRecord = eventRecord.resource) {\n        const\n            { scheduler } = this,\n            renderData    = scheduler.generateRenderData(eventRecord, resourceRecord, { timeAxis : true, viewport : true });\n\n        renderData.absoluteTop = renderData.row\n            ? (renderData.top + renderData.row.top)\n            : scheduler.getResourceEventBox(eventRecord, resourceRecord, true).top;\n\n        const\n            domConfig = this.renderEvent(renderData),\n            { dataset } = domConfig;\n\n        delete domConfig.tabIndex;\n        delete dataset.eventId;\n        delete dataset.resourceId;\n        delete dataset.assignmentId;\n        delete dataset.syncId;\n        dataset.transient = true;\n        domConfig.parent = this.scheduler.foregroundCanvas;\n\n        // So that the regular DomSyncing which may happen during scroll does not\n        // sweep up and reuse the temporary element.\n        domConfig.retainElement = true;\n\n        const result = DomHelper.createElement(domConfig);\n\n        result.innerElement = result.firstChild;\n\n        eventRecord.instanceMeta(scheduler).hasTemporaryDragElement = true;\n\n        return result;\n    }\n\n    // Earlier start dates are above later tasks\n    // If same start date, longer tasks float to top\n    // If same start + duration, sort by name\n    // Fn can be called with layout date or event records (from EventNavigation)\n    eventSorter(a, b) {\n        if (this.overlappingEventSorter) {\n            return this.overlappingEventSorter(a.eventRecord || a, b.eventRecord || b);\n        }\n\n        const\n            // TODO: Rename startMS -> startDateMS to not have to have isModel check here (and to be consistent)\n            startA    = a.isModel ? a.startDateMS : a.dataStartMS || a.startMS, // dataXX are used if configured with fillTicks\n            endA      = a.isModel ? a.endDateMS : a.dataEndMS || a.endMS,\n            startB    = b.isModel ? b.startDateMS : b.dataStartMS || b.startMS,\n            endB      = b.isModel ? b.endDateMS :  b.dataEndMS || b.endMS,\n            nameA     = a.isModel ? a.name : a.eventRecord.name,\n            nameB     = b.isModel ? b.name : b.eventRecord.name;\n\n        return startA - startB || endB - endA || (nameA < nameB ? -1 : nameA == nameB ? 0 : 1);\n    }\n\n    /**\n     * Converts a start/endDate into a MS value used when rendering the event. If scheduler is configured with\n     * `fillTicks: true` the value returned will be snapped to tick start/end.\n     * @private\n     * @param {Scheduler.model.TimeSpan} eventRecord\n     * @param {String} startDateField\n     * @param {String} endDateField\n     * @param {Boolean} useEventBuffer\n     * @param {Scheduler.model.ResourceModel} resourceRecord\n     * @returns {Object} Object of format { startMS, endMS, durationMS }\n     */\n    calculateMS(eventRecord, startDateField, endDateField, useEventBuffer, resourceRecord) {\n        const\n            me                    = this,\n            { scheduler }         = me,\n            { timeAxisViewModel } = scheduler;\n\n        let startMS    = getStartEnd(scheduler, eventRecord, false, startDateField, useEventBuffer),\n            endMS      = getStartEnd(scheduler, eventRecord, true, endDateField, useEventBuffer),\n            durationMS = endMS - startMS;\n\n        if (scheduler.milestoneLayoutMode !== 'default' && durationMS === 0) {\n            const\n                pxPerMinute = timeAxisViewModel.getSingleUnitInPixels('minute'),\n                lengthInPx  = scheduler.getMilestoneLabelWidth(eventRecord, resourceRecord),\n                duration    = lengthInPx * (1 / pxPerMinute);\n\n            durationMS = duration * 60 * 1000;\n\n            if (scheduler.milestoneTextPosition === 'always-outside') {\n                // Milestone is offset half a diamond to the left (compensated in CSS with padding) for the layout pass,\n                // to take diamond corner into account\n                const\n                    diamondSize = scheduler.getResourceLayoutSettings(resourceRecord, eventRecord.parent).contentHeight,\n                    diamondMS   = diamondSize * (1 / pxPerMinute) * 60 * 1000;\n                startMS -= diamondMS / 2;\n                endMS = startMS + durationMS;\n            }\n            else {\n                switch (scheduler.milestoneAlign) {\n                    case 'start':\n                    case 'left':\n                        endMS = startMS + durationMS;\n                        break;\n                    case 'end':\n                    case 'right':\n                        endMS = startMS;\n                        startMS = endMS - durationMS;\n                        break;\n                    default: // using center as default\n                        endMS = startMS + durationMS / 2;\n                        startMS = endMS - durationMS;\n                        break;\n                }\n            }\n        }\n\n        return {\n            startMS,\n            endMS,\n            durationMS\n        };\n    }\n\n    /**\n     * Returns event render data except actual position information.\n     * @param timeSpan\n     * @param rowRecord\n     * @returns {HorizontalRenderData}\n     * @private\n     */\n    setupRenderData(timeSpan, rowRecord) {\n        const\n            me                             = this,\n            { scheduler }                  = me,\n            {\n                timeAxis,\n                timeAxisViewModel\n            }                              = scheduler,\n            {\n                preamble,\n                postamble\n            }                              = timeSpan,\n            useEventBuffer                 = me.isProHorizontalRendering && scheduler.features.eventBuffer?.enabled &&\n                (preamble || postamble) && !timeSpan.isMilestone,\n            pxPerMinute                    = timeAxisViewModel.getSingleUnitInPixels('minute'),\n            { isBatchUpdating }            = timeSpan,\n            startDateField                 = useEventBuffer ? 'wrapStartDate' : 'startDate',\n            endDateField                   = useEventBuffer ? 'wrapEndDate' : 'endDate',\n            // Must use Model.get in order to get latest values in case we are inside a batch.\n            // EventResize changes the endDate using batching to enable a tentative change\n            // via the batchedUpdate event which is triggered when changing a field in a batch.\n            // Fall back to accessor if propagation has not populated date fields.\n            // Use endDate accessor if duration has not been propagated to create endDate\n            timespanStart                  = isBatchUpdating && !useEventBuffer ? timeSpan.get(startDateField) : timeSpan[startDateField],\n            // Allow timespans to be rendered even when they are missing an end date\n            timespanEnd                    = isBatchUpdating && !useEventBuffer ? timeSpan.get(endDateField) : timeSpan[endDateField] || timespanStart,\n            viewStartMS                    = timeAxis.startMS,\n            viewEndMS                      = timeAxis.endMS,\n            { startMS, endMS, durationMS } = me.calculateMS(timeSpan, startDateField, endDateField, useEventBuffer, rowRecord),\n            // These flags have two components because includeOutsideViewport\n            // means that we can be calculating data for events either side of\n            // the TimeAxis.\n            // The start is outside of the view if it's before *or after* the TimeAxis range.\n            // 1 set means the start is before the TimeAxis\n            // 2 set means the start is after the TimeAxis\n            // Either way, a truthy value means that the start is outside of the TimeAxis.\n            startsOutsideView              = startMS < viewStartMS | ((startMS > viewEndMS) << 1),\n            // The end is outside of the view if it's before *or after* the TimeAxis range.\n            // 1 set means the end is after the TimeAxis\n            // 2 set means the end is before the TimeAxis\n            // Either way, a truthy value means that the end is outside of the TimeAxis.\n            endsOutsideView                = endMS > viewEndMS | ((endMS <= viewStartMS) << 1),\n            durationMinutes                = durationMS / (1000 * 60),\n            width                          = endsOutsideView ? pxPerMinute * durationMinutes : null,\n            row                            = scheduler.getRowById(rowRecord);\n\n        return {\n            eventRecord : timeSpan,\n            taskRecord  : timeSpan, // Helps with using Gantt projects in Scheduler Pro\n            start       : timespanStart,\n            end         : timespanEnd,\n            rowId       : rowRecord.id,\n            children    : [],\n            startMS,\n            endMS,\n            durationMS,\n            startsOutsideView,\n            endsOutsideView,\n            width,\n            row,\n            useEventBuffer\n        };\n    }\n\n    /**\n     * Populates render data with information about width and horizontal position of the wrap.\n     * @param {HorizontalRenderData} renderData\n     * @returns {Boolean}\n     * @private\n     */\n    fillTimeSpanHorizontalPosition(renderData) {\n        const\n            { startMS, endMS, durationMS } = renderData,\n            // With delayed calculation there is no guarantee data is normalized, might be missing a crucial component\n            result = startMS != null && endMS != null && this.calculateHorizontalPosition(renderData, startMS, endMS, durationMS);\n\n        if (result) {\n            Object.assign(renderData, result);\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Fills render data with `left` and `width` properties\n     * @param {HorizontalRenderData} renderData\n     * @param {Number} startMS\n     * @param {Number} endMS\n     * @param {Number} durationMS\n     * @returns {{left: number, width: number, clippedStart: boolean, clippedEnd: boolean}|null}\n     * @private\n     */\n    calculateHorizontalPosition(renderData, startMS, endMS, durationMS) {\n        const\n            { scheduler }   = this,\n            {\n                timeAxis,\n                timeAxisViewModel\n            }               = scheduler,\n            {\n                startsOutsideView,\n                endsOutsideView,\n                eventRecord\n            }               = renderData,\n            viewStartMS     = timeAxis.startMS,\n            pxPerMinute     = timeAxisViewModel.getSingleUnitInPixels('minute'),\n            durationMinutes = durationMS / (1000 * 60),\n            width           = endsOutsideView ? pxPerMinute * durationMinutes : null;\n\n        let endX = scheduler.getCoordinateFromDate(endMS, {\n                local            : true,\n                respectExclusion : true,\n                isEnd            : true\n            }), startX, clippedStart = false, clippedEnd = false;\n\n        // If event starts outside of view, estimate where.\n        if (startsOutsideView) {\n            startX = (startMS - viewStartMS) / (1000 * 60) * pxPerMinute;\n\n            // Flip -ve startX to being to the right of the viewport end\n            if (scheduler.rtl) {\n                startX = scheduler.timeAxisSubGrid.scrollable.scrollWidth - startX;\n            }\n        }\n        // Starts in view, calculate exactly\n        else {\n            // If end date is included in time axis but start date is not (when using time axis exclusions), snap start date to next included data\n            startX = scheduler.getCoordinateFromDate(startMS, {\n                local              : true,\n                respectExclusion   : true,\n                isEnd              : false,\n                snapToNextIncluded : endX !== -1\n            });\n\n            clippedStart = startX === -1;\n        }\n\n        if (endsOutsideView) {\n            // Have to clip the events in Safari when using stickyEvents, it does not support `overflow: clip`\n            if (BrowserHelper.isSafari && scheduler.features.stickyEvents) {\n                endX = scheduler.getCoordinateFromDate(timeAxis.endMS);\n            }\n            else {\n                // Parentheses needed\n                endX = startX + width * (scheduler.rtl ? -1 : 1);\n            }\n        }\n        else {\n            clippedEnd = endX === -1;\n        }\n\n        if (clippedEnd && !clippedStart) {\n            // We know where to start but not where to end, snap it (the opposite is already handled by the\n            // snapToNextIncluded flag when calculating startX above)\n            endX = scheduler.getCoordinateFromDate(endMS, {\n                local              : true,\n                respectExclusion   : true,\n                isEnd              : true,\n                snapToNextIncluded : true\n            });\n        }\n\n        // If the element is very wide there's no point in displaying it all.\n        // Indeed the element may not be displayable at extremely large widths.\n        if (width > MAX_WIDTH) {\n            // The start is before the TimeAxis start\n            if (startsOutsideView === 1) {\n                // Both ends outside - spans TimeAxis\n                if (endsOutsideView === 1) {\n                    startX = -100;\n                    endX = scheduler.timeAxisColumn.width + 100;\n                }\n                // End is in view\n                else {\n                    startX = endX - MAX_WIDTH;\n                }\n            }\n            // The end is after, but the start is in view\n            else if (endsOutsideView === 1) {\n                endX = startX + MAX_WIDTH;\n            }\n        }\n\n        if (clippedStart && clippedEnd) {\n            // Both ends excluded, but there might be some part in between that should be displayed...\n            startX = scheduler.getCoordinateFromDate(startMS, {\n                local              : true,\n                respectExclusion   : true,\n                isEnd              : false,\n                snapToNextIncluded : true,\n                max                : endMS\n            });\n\n            endX = scheduler.getCoordinateFromDate(endMS, {\n                local              : true,\n                respectExclusion   : true,\n                isEnd              : true,\n                snapToNextIncluded : true,\n                min                : startMS\n            });\n\n            if (startX === endX) {\n                // Raise flag on instance meta to avoid duplicating this logic\n                eventRecord.instanceMeta(scheduler).excluded = true;\n                // Excluded by time axis exclusion rules, render nothing\n                return null;\n            }\n        }\n\n        return {\n            left  : Math.min(startX, endX),\n            // Use min width 5 for normal events, 0 for milestones (wont have width specified at all in the\n            // end). During drag create a normal event can get 0 duration, in this case we still want it to\n            // get a min width of 5 (6px for wrapper, -1 px for event element\n            width : Math.abs(endX - startX) || (eventRecord.isMilestone && !eventRecord.meta.isDragCreating ? 0 : 6),\n            clippedStart,\n            clippedEnd\n        };\n    }\n\n    fillTimeSpanVerticalPosition(renderData, rowRecord) {\n        const\n            { scheduler }  = this,\n            { start, end } = renderData,\n            {\n                resourceMargin,\n                contentHeight\n            }              = scheduler.getResourceLayoutSettings(rowRecord);\n\n        // If filling ticks we need to also keep data's MS values, since they are used for sorting timespans\n        if (scheduler.fillTicks) {\n            renderData.dataStartMS = start.getTime();\n            renderData.dataEndMS = end.getTime();\n        }\n\n        renderData.top = Math.max(0, resourceMargin);\n\n        if (scheduler.managedEventSizing) {\n            // Timespan height should be at least 1px\n            renderData.height = contentHeight;\n        }\n    }\n\n    /**\n     * Gets timespan coordinates etc. Relative to containing row. If the timespan is outside of the zone in\n     * which timespans are rendered, that is outside of the TimeAxis, or outside of the vertical zone in which timespans\n     * are rendered, then `undefined` is returned.\n     * @private\n     * @param {Scheduler.model.TimeSpan} timeSpan TimeSpan record\n     * @param {Core.data.Model} rowRecord Row record\n     * @param {Boolean|Object} includeOutside Specify true to get boxes for timespans outside of the rendered zone in both\n     * dimensions. This option is used when calculating dependency lines, and we need to include routes from timespans\n     * which may be outside the rendered zone.\n     * @param {Boolean} includeOutside.timeAxis Pass as `true` to include timespans outside of the TimeAxis's bounds\n     * @param {Boolean} includeOutside.viewport Pass as `true` to include timespans outside of the vertical timespan viewport's bounds.\n     * @returns {{event/task: *, left: number, width: number, start: (Date), end: (Date), startMS: number, endMS: number, startsOutsideView: boolean, endsOutsideView: boolean}}\n     */\n    getTimeSpanRenderData(timeSpan, rowRecord, includeOutside = false) {\n        const\n            me                     = this,\n            { scheduler }          = me,\n            { timeAxis }           = scheduler,\n            includeOutsideTimeAxis = includeOutside === true || includeOutside.timeAxis,\n            includeOutsideViewport = includeOutside === true || includeOutside.viewport;\n\n        // If timespan is outside the TimeAxis, give up trying to calculate a layout (Unless we're including timespans\n        // outside our zone)\n        if (includeOutsideTimeAxis || timeAxis.isTimeSpanInAxis(timeSpan)) {\n            const row = scheduler.getRowById(rowRecord);\n\n            if (row || includeOutsideViewport) {\n                const data = me.setupRenderData(timeSpan, rowRecord);\n\n                if (!me.fillTimeSpanHorizontalPosition(data)) {\n                    return null;\n                }\n\n                me.fillTimeSpanVerticalPosition(data, rowRecord);\n\n                return data;\n            }\n        }\n    }\n\n    // Layout a set of events, code shared by normal event render path and nested events\n    layoutEvents(resourceRecord, allEvents, includeOutside = false, parentEventRecord, eventSorter) {\n        const\n            me                   = this,\n            { scheduler }        = me,\n            { timeAxis }         = scheduler,\n            // Generate layout data\n            eventsData           = allEvents.reduce((result, eventRecord) => {\n                // Only those in time axis (by default)\n                if ((includeOutside || timeAxis.isTimeSpanInAxis(eventRecord))) {\n                    const eventBox = scheduler.generateRenderData(eventRecord, resourceRecord, false);\n\n                    // Collect layouts of visible events\n                    if (eventBox) {\n                        result.push(eventBox);\n                    }\n                }\n\n                return result;\n            }, []);\n\n        // Ensure the events are rendered in natural order so that navigation works.\n        eventsData.sort(eventSorter ?? me.eventSorter);\n\n        let rowHeight = scheduler.getAppliedResourceHeight(resourceRecord, parentEventRecord);\n\n        const\n            // Only events and tasks should be considered during layout (not resource time ranges if any, or events\n            // being drag created when configured with lockLayout)\n            layoutEventData = eventsData.filter(({ eventRecord }) => eventRecord.isEvent && !eventRecord.meta.excludeFromLayout),\n            eventLayout     = scheduler.getEventLayout(resourceRecord, parentEventRecord),\n            layoutHandler   = scheduler.getEventLayoutHandler(eventLayout);\n\n        if (layoutHandler) {\n            const\n                {\n                    barMargin,\n                    resourceMargin,\n                    contentHeight\n                }              = scheduler.getResourceLayoutSettings(resourceRecord, parentEventRecord),\n                bandsRequired  = layoutHandler.applyLayout(layoutEventData, resourceRecord) || 1;\n\n            if (layoutHandler.type === 'layoutFn') {\n                rowHeight = bandsRequired;\n            }\n            else {\n                rowHeight = (bandsRequired * contentHeight) + ((bandsRequired - 1) * barMargin) + resourceMargin * 2;\n            }\n        }\n        // Apply z-index when event elements might overlap, to keep \"overlap order\" consistent\n        else if (layoutEventData.length > 0) {\n            for (let i = 0; i < layoutEventData.length; i++) {\n                const data = layoutEventData[i];\n                // $event-zindex scss var is 5\n                data.wrapperStyle += `;z-index:${i + 5}`;\n            }\n        }\n\n        return { rowHeight, eventsData };\n    }\n\n    // Lay out events within a resource, relative to the resource\n    layoutResourceEvents(resourceRecord, includeOutside = false) {\n        const\n            me                   = this,\n            { scheduler }        = me,\n            {\n                eventStore,\n                assignmentStore,\n                timeAxis\n            }                    = scheduler,\n            // Events for this resource\n            resourceEvents = eventStore.getEvents({\n                includeOccurrences : scheduler.enableRecurringEvents,\n                resourceRecord,\n                startDate          : timeAxis.startDate,\n                endDate            : timeAxis.endDate,\n                filter             : (assignmentStore.isFiltered || eventStore.isFiltered) && (eventRecord =>\n                    eventRecord.assignments.some(a => a.resource === resourceRecord.$original && assignmentStore.includes(a)))\n            }),\n            // Call a chainable template function on scheduler to allow features to add additional \"events\" to render\n            // Currently used by ResourceTimeRanges, CalendarHighlight & NestedEvents\n            allEvents            = scheduler.getEventsToRender(resourceRecord, resourceEvents) || [];\n\n        return me.layoutEvents(resourceRecord, allEvents, includeOutside);\n    }\n\n    // Generates a DOMConfig for an EventRecord\n    renderEvent(data, rowHeight) {\n        const\n            { scheduler }                                     = this,\n            { resourceRecord, assignmentRecord, eventRecord } = data,\n            {\n                milestoneLayoutMode    : layoutMode,\n                milestoneTextPosition  : textPosition\n            }    = scheduler,\n            // Sync using assignment id for events and event id for ResourceTimeRanges. Add eventId for occurrences to make them unique\n            syncId                                            = assignmentRecord\n                // Assignment, might be an occurrence\n                ? this.assignmentStore.getOccurrence(assignmentRecord, eventRecord).id\n                // Something else, probably a ResourceTimeRange\n                : data.eventId,\n            eventElementConfig = {\n                className : data.cls,\n                style     : data.style || '',\n                children  : data.children,\n                role      : 'presentation',\n                dataset   : {\n                    // Each feature putting contents in the event wrap should have this to simplify syncing and\n                    // element retrieval after sync\n                    taskFeature : 'event'\n                },\n                syncOptions : {\n                    syncIdField : 'taskBarFeature'\n                }\n            },\n            // Event element config, applied to existing element or used to create a new one below\n            elementConfig                        = {\n                className : data.wrapperCls,\n                tabIndex  : ('tabIndex' in data) ? data.tabIndex : -1,\n                children  : [\n                    eventElementConfig,\n                    ...data.wrapperChildren\n                ],\n                style : {\n                    top    : data.absoluteTop,\n                    left   : data.left,\n                    // ResourceTimeRanges fill row height, cannot be done earlier than this since row height is not\n                    // known initially\n                    height : data.fillSize ? rowHeight : data.height,\n                    // DomHelper appends px to dimensions when using numbers.\n                    // Do not ignore width for normal milestones, use height value. It is required to properly center\n                    // pseudo element with top/bottom labels.\n                    // Milestone part of layout that contain the label gets a width\n                    width  : (eventRecord.isMilestone && !eventRecord.meta.isDragCreating) &&\n                             ((layoutMode === 'default' && (textPosition === 'outside' || (textPosition === 'inside' && !data.width))) ||\n                                 textPosition === 'always-outside') ? data.height : data.width,\n                    style    : data.wrapperStyle,\n                    fontSize : data.height + 'px'\n                },\n                dataset : {\n                    // assignmentId is set in this function conditionally\n                    resourceId : resourceRecord.id,\n                    eventId    : data.eventId, // Not using eventRecord.id to distinguish between Event and ResourceTimeRange\n                    syncId     : resourceRecord.isLinked ? `${syncId}_${resourceRecord.id}` : syncId\n                },\n                // Will not be part of DOM, but attached to the element\n                elementData   : data,\n                // Dragging etc. flags element as retained, to not reuse/release it during that operation. Events\n                // always use assignments, but ResourceTimeRanges does not\n                retainElement : assignmentRecord?.instanceMeta(scheduler).retainElement || eventRecord.instanceMeta(scheduler).retainElement,\n                // Options for this level of sync, lower levels can have their own\n                syncOptions   : {\n                    syncIdField      : 'taskFeature',\n                    // Remove instead of release when a feature is disabled\n                    releaseThreshold : 0\n                }\n            };\n\n        // Write back the correct height for elements filling the row, to not derender them later based on wrong height\n        if (data.fillSize) {\n            data.height = rowHeight;\n        }\n\n        // Some browsers throw warnings on zIndex = ''\n        if (data.zIndex) {\n            elementConfig.zIndex = data.zIndex;\n        }\n\n        // Do not want to spam dataset with empty prop when not using assignments (ResourceTimeRanges)\n        if (assignmentRecord) {\n            elementConfig.dataset.assignmentId = assignmentRecord.id;\n        }\n\n        data.elementConfig = elementConfig;\n\n        return elementConfig;\n    }\n\n    /**\n     * Refresh events for resource record (or Row), clearing its cache and forcing DOM refresh.\n     * @param {Scheduler.model.ResourceModel} recordOrRow Record or row to refresh\n     * @param {Boolean} [force] Specify `false` to prevent clearing cache and forcing DOM refresh\n     * @internal\n     */\n    refreshEventsForResource(recordOrRow, force = true, draw = true) {\n        const\n            me     = this,\n            record = me.scheduler.store.getById(recordOrRow.isRow ? recordOrRow.id : recordOrRow),\n            row    = me.scheduler.rowManager.getRowFor(record);\n\n        if (force) {\n            me.clearResources([record]);\n        }\n\n        if (row && record) {\n            me.renderer({ row, record });\n\n            if (force && draw) {\n                me.onRenderDone();\n            }\n        }\n    }\n\n    // Returns layout for the current resource. Used by the renderer and exporter\n    getResourceLayout(resourceRecord) {\n        const me = this;\n\n        // Use cached layout if available\n        let resourceLayout = me.resourceMap.get(resourceRecord.id);\n\n        if (!resourceLayout || resourceLayout.invalid) {\n            // Previously we would bail out here if engine wasn't ready. Now we instead allow drawing in most cases,\n            // since data can be read and written during commit (previously it could not)\n            if (me.suspended) {\n                return;\n            }\n\n            resourceLayout = me.layoutResourceEvents(resourceRecord, false);\n            me.resourceMap.set(resourceRecord.id, resourceLayout);\n        }\n\n        return resourceLayout;\n    }\n\n    getEventDOMConfigForCurrentView(resourceLayout, row, left, right) {\n        const\n            me                        = this,\n            { bufferSize, scheduler } = me,\n            { labels, eventBuffer }   = scheduler.features,\n            // Left/right labels and event buffer elements require using a buffer to not derender too early\n            usesLabels                = eventBuffer?.enabled || (labels?.enabled && (labels.left || labels.right || labels.before || labels.after)),\n            { eventsData }            = resourceLayout,\n            // When scrolling, layout will be reused and any events that are still in view can reuse their DOM configs\n            reusableDOMConfigs        = me.fromScroll ? me.rowMap.get(row) : null,\n            eventDOMConfigs           = [];\n\n        let useLeft, useRight;\n\n        // Only collect configs for those actually in view\n        for (let i = 0; i < eventsData.length; i++) {\n            const layout = eventsData[i];\n\n            useLeft = left;\n            useRight = right;\n\n            // Labels/milestones requires keeping events rendered longer\n            if (usesLabels || layout.width === 0) {\n                useLeft -= bufferSize;\n                useRight += bufferSize;\n            }\n\n            if ((layout.left + layout.width) >= useLeft && layout.left <= useRight) {\n                layout.absoluteTop = layout.top + row.top;\n                // TODO: Consider using a map of maps instead of having to find() here. But it is anyhow much faster\n                //  than not reusing dom configs\n                const prevDomConfig = reusableDOMConfigs?.find(config => config.elementData.eventId === layout.eventId);\n                eventDOMConfigs.push(prevDomConfig ?? me.renderEvent(layout, resourceLayout.rowHeight));\n            }\n        }\n\n        return eventDOMConfigs;\n    }\n\n    // Called per row in \"view\", collect configs\n    renderer({ row, record : resourceRecord, size = {} }) {\n        const me = this;\n\n        // Bail out for group headers/footers\n        if (resourceRecord.isSpecialRow) {\n            // Clear any cached layout for row retooled to special row, and bail out\n            me.rowMap.delete(row);\n            return;\n        }\n\n        const\n            { left, right } = me.viewportCoords,\n            resourceLayout  = me.getResourceLayout(resourceRecord);\n\n        // Layout is suspended\n        if (!resourceLayout) {\n            return;\n        }\n\n        // Size row to fit events\n        size.height = resourceLayout.rowHeight;\n        // Avoid storing our calculated height as the rows max height, to not affect next round of calculations\n        size.transient = true;\n\n        const eventDOMConfigs = me.getEventDOMConfigForCurrentView(resourceLayout, row, left, right);\n\n        me.rowMap.set(row, eventDOMConfigs);\n\n        // Keep track if we need to draw on vertical scroll or not, to not get multiple onRenderDone() calls\n        me.rendererCalled = true;\n    }\n\n    // Called when the current row rendering \"pass\" is complete, sync collected configs to DOM\n    onRenderDone() {\n        const\n            { scheduler, rowMap, verticalBufferSize }  = this,\n            visibleEventDOMConfigs                     = [],\n            bodyTop                                    = scheduler._scrollTop ?? 0,\n            viewTop                                    = bodyTop - verticalBufferSize,\n            viewBottom                                 = bodyTop + scheduler._bodyRectangle.height + verticalBufferSize,\n            unbuffered                                 = verticalBufferSize < 0,\n            unmanagedSize                              = !scheduler.managedEventSizing;\n\n        // Event configs are collected when rows are rendered, but we do not want to waste resources on rendering\n        // events far out of view. Especially with many events per row giving large row heights, rows in the RowManagers\n        // buffer might far away -> collect events for rows within viewport + small vertical buffer\n        rowMap.forEach((eventDOMConfigs, row) => {\n            // Render events \"in view\". Export specifies a negative verticalBufferSize to disable it\n            if (unbuffered || (row.bottom > viewTop && row.top < viewBottom)) {\n                for (let i = 0; i < eventDOMConfigs.length; i++) {\n                    const\n                        config = eventDOMConfigs[i],\n                        data   = config.elementData,\n                        {\n                            absoluteTop,\n                            eventRecord\n                        } = data;\n\n                    // Conditions under which event bars are included in the DOM:\n                    //   If bufferSize is -ve, meaning render all events.\n                    //   scheduler.managedEventSizing is false.\n                    //   The event is beig drag-created or drag-resized\n                    //   The event is within the bounds of the rendered region.\n                    if (unbuffered || unmanagedSize || eventRecord.meta.isDragCreating || eventRecord.meta.isResizing || (absoluteTop + data.height > viewTop && absoluteTop < viewBottom)) {\n                        visibleEventDOMConfigs.push(config);\n                    }\n                }\n            }\n\n            // We are using cached DomConfigs. When DomSync releases an element, it also flags the config as released.\n            // Next time we pass it that very same config, it says it is released and nothing shows up.\n            //\n            // We are breaching the DomSync contract a bit with the cached approach. DomSync expects new configs on each\n            // call, so to facilitate that we clone the configs shallowly (nothing deep is affected by sync releasing).\n            // That way we can always pass it fresh unreleased configs.\n            for (let i = 0; i < eventDOMConfigs.length; i++) {\n                eventDOMConfigs[i] = { ...eventDOMConfigs[i] };\n            }\n        });\n\n        this.fromScroll = false;\n        this.visibleEventDOMConfigs = visibleEventDOMConfigs;\n\n        DomSync.sync({\n            domConfig : {\n                onlyChildren : true,\n                children     : visibleEventDOMConfigs\n            },\n            targetElement : scheduler.foregroundCanvas,\n            syncIdField   : 'syncId',\n\n            // Called by DomSync when it creates, releases or reuses elements\n            callback({ action, domConfig, lastDomConfig, targetElement, jsx }) {\n                const { reactComponent } = scheduler;\n                const\n                    // Some actions are considered first a release and then a render (reusing another element).\n                    // This gives clients code a chance to clean up before reusing an element\n                    isRelease = releaseEventActions[action],\n                    isRender  = renderEventActions[action];\n\n                if (!isRelease && scheduler.processEventContent?.({\n                    jsx,\n                    action,\n                    domConfig,\n                    targetElement,\n                    isRelease,\n                    reactComponent\n                })) return;\n\n                if (action === 'none' || !domConfig?.elementData?.isWrap) {\n                    return;\n                }\n\n                // Trigger release for events (it might be a proxy element, skip those)\n                if (isRelease && lastDomConfig?.elementData) {\n                    const\n                        { eventRecord, resourceRecord, assignmentRecord } = lastDomConfig.elementData,\n                        event = {\n                            renderData : lastDomConfig.elementData,\n                            element    : targetElement,\n                            eventRecord,\n                            resourceRecord,\n                            assignmentRecord\n                        };\n\n                    // Process event necessary in the case of release\n                    scheduler.processEventContent?.({\n                        isRelease,\n                        targetElement,\n                        reactComponent,\n                        assignmentRecord\n                    });\n\n                    // Some browsers do not blur on set to display:none, so releasing the active element\n                    // must *explicitly* move focus outwards to the view.\n                    if (targetElement === DomHelper.getActiveElement(targetElement)) {\n                        scheduler.focusElement.focus();\n                    }\n\n                    // This event is documented on Scheduler\n                    scheduler.trigger('releaseEvent', event);\n                }\n\n                if (isRender) {\n                    const\n                        { eventRecord, resourceRecord, assignmentRecord } = domConfig.elementData,\n                        event = {\n                            renderData       : domConfig.elementData,\n                            element          : targetElement,\n                            isReusingElement : action === 'reuseElement',\n                            isRepaint        : action === 'reuseOwnElement',\n                            eventRecord,\n                            resourceRecord,\n                            assignmentRecord\n                        };\n\n                    // This event is documented on Scheduler\n                    scheduler.trigger('renderEvent', event);\n                }\n            }\n        });\n    }\n\n    //endregion\n\n    //region Cache\n\n    // Clears cached resource layout\n    clearResources(recordsOrIds) {\n        recordsOrIds = ArrayHelper.asArray(recordsOrIds);\n\n        const resourceIds = recordsOrIds.map(Model.asId);\n\n        //<debug>\n        if (globalThis.DEBUG) {\n            console.log('%Clearing resources ' + Array.from(resourceIds).join(','), 'color: #770000');\n        }\n        //</debug>\n\n        resourceIds.forEach(resourceId => {\n            // Invalidate resourceLayout, keeping it around in case we need it before next refresh\n            const cached = this.resourceMap.get(resourceId);\n            if (cached) {\n                cached.invalid = true;\n            }\n\n            const row = this.scheduler.getRowById(resourceId);\n            row && this.rowMap.delete(row);\n        });\n    }\n\n    clearAll({ clearDom = false, clearLayoutCache = false } = {}) {\n        const\n            me                            = this,\n            { layouts, foregroundCanvas } = me.scheduler;\n\n        //<debug>\n        if (globalThis.DEBUG) {\n            console.log('%Clearing all', 'color: #770000');\n        }\n        //</debug>\n\n        if (clearLayoutCache && layouts) {\n            for (const layout in layouts) {\n                layouts[layout].clearCache();\n            }\n        }\n\n        // it seems `foregroundCanvas` can be missing at this point\n        // for example if scheduler instance is created w/o of `appendTo` config\n        if (foregroundCanvas && clearDom) {\n            // Start from scratch when replacing the project, to not retain anything in maps or released elements\n            foregroundCanvas.syncIdMap = foregroundCanvas.lastDomConfig = null;\n\n            for (const child of foregroundCanvas.children) {\n                child.lastDomConfig = child.elementData = null;\n            }\n        }\n\n        me.resourceMap.clear();\n        me.rowMap.clear();\n    }\n\n    //endregion\n}\n","import PackMixin from './PackMixin.js';\n\n/**\n * @module Scheduler/eventlayout/VerticalLayout\n */\n\n/**\n * Assists with event layout in vertical mode, handles `eventLayout: none|pack|mixed`\n * @private\n * @mixes Scheduler/eventlayout/PackMixin\n */\nexport default class VerticalLayout extends PackMixin() {\n\n    static get defaultConfig() {\n        return {\n            coordProp : 'leftFactor',\n            sizeProp  : 'widthFactor'\n        };\n    }\n\n    // Try to pack the events to consume as little space as possible\n    applyLayout(events, columnWidth, resourceMargin, barMargin, columnIndex, eventLayout) {\n        const\n            me         = this,\n            layoutType = eventLayout.type;\n\n        return me.packEventsInBands(events, (tplData, clusterIndex, slot, slotSize) => {\n            // Stretch events to fill available width\n            if (layoutType === 'none') {\n                tplData.width = columnWidth - resourceMargin * 2;\n                tplData.left += resourceMargin;\n            }\n            else {\n                // Fractions of resource column\n                tplData.widthFactor = slotSize;\n\n                const\n                    leftFactor      = tplData.leftFactor = slot.start + (clusterIndex * slotSize),\n                    // Number of \"columns\" in the current slot\n                    packColumnCount = Math.round(1 / slotSize),\n                    // Index among those columns for current event\n                    packColumnIndex = leftFactor / slotSize,\n                    // Width with all bar margins subtracted\n                    availableWidth  = columnWidth - resourceMargin * 2 - barMargin * (packColumnCount - 1);\n\n                // Allowing two events to overlap? Slightly offset the second\n                if (layoutType === 'mixed' && packColumnCount === 2) {\n                    tplData.left += leftFactor * columnWidth / 5 + barMargin;\n                    tplData.width = columnWidth - leftFactor * columnWidth / 5 - barMargin * 2;\n                    tplData.zIndex = 5 + packColumnIndex;\n                }\n                // Pack by default\n                else {\n                    // Fractional width\n                    tplData.width = slotSize * availableWidth;\n                    // Translate to absolute position\n                    tplData.left += leftFactor * availableWidth + resourceMargin + barMargin * packColumnIndex;\n                }\n            }\n            tplData.cls['b-sch-event-narrow'] = tplData.width < me.scheduler.narrowEventWidth;\n        });\n    }\n}\n","import Base from '../../../Core/Base.js';\nimport Delayable from '../../../Core/mixin/Delayable.js';\nimport DomHelper from '../../../Core/helper/DomHelper.js';\nimport DomSync from '../../../Core/helper/DomSync.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\nimport VerticalLayout from '../../eventlayout/VerticalLayout.js';\nimport Rectangle from '../../../Core/helper/util/Rectangle.js';\nimport DateHelper from '../../../Core/helper/DateHelper.js';\nimport AttachToProjectMixin from '../../data/mixin/AttachToProjectMixin.js';\n\n/**\n * @module Scheduler/view/orientation/VerticalRendering\n */\n\nconst\n    releaseEventActions = {\n        releaseElement : 1, // Not used at all at the moment\n        reuseElement   : 1  // Used by some other element\n    },\n    renderEventActions  = {\n        newElement      : 1,\n        reuseOwnElement : 1,\n        reuseElement    : 1\n    },\n    chronoFields        = {\n        startDate : 1,\n        endDate   : 1,\n        duration  : 1\n    },\n    emptyObject        = Object.freeze({});\n\n/**\n * Handles event rendering in Schedulers vertical mode. Reacts to project/store changes to keep the UI up to date.\n *\n * @internal\n */\nexport default class VerticalRendering extends Base.mixin(Delayable, AttachToProjectMixin) {\n\n    //region Config & Init\n\n    static get properties() {\n        return {\n            eventMap               : new Map(),\n            resourceMap            : new Map(),\n            releasedElements       : {},\n            toDrawOnProjectRefresh : new Set(),\n            resourceBufferSize     : 1\n        };\n    }\n\n    construct(scheduler) {\n        this.client         = this.scheduler = scheduler;\n        this.verticalLayout = new VerticalLayout({ scheduler });\n\n        super.construct({});\n    }\n\n    init() {\n        const\n            me                             = this,\n            { scheduler, resourceColumns } = me;\n\n        // Resource header/columns\n        resourceColumns.resourceStore = me.resourceStore;\n\n        resourceColumns.ion({\n            name              : 'resourceColumns',\n            columnWidthChange : 'onResourceColumnWidthChange',\n            thisObj           : me\n        });\n\n        me.initialized = true;\n\n        if (scheduler.isPainted) {\n            me.renderer();\n        }\n\n        resourceColumns.availableWidth = scheduler.timeAxisSubGridElement.offsetWidth;\n    }\n\n    //endregion\n\n    //region Elements <-> Records\n\n    resolveRowRecord(elementOrEvent, xy) {\n        const\n            me            = this,\n            { scheduler } = me,\n            event         = elementOrEvent.nodeType ? null : elementOrEvent,\n            element       = event ? event.target : elementOrEvent,\n            coords        = event ? [event.borderOffsetX, event.borderOffsetY] : xy,\n            // Fix for FF on Linux having text nodes as event.target\n            el            = element.nodeType === Element.TEXT_NODE ? element.parentElement : element,\n            eventElement  = el.closest(scheduler.eventSelector);\n\n        if (eventElement) {\n            return scheduler.resourceStore.getById(eventElement.dataset.resourceId);\n        }\n\n        // Need to be inside schedule at least\n        if (!element.closest('.b-sch-timeaxis-cell')) {\n            return null;\n        }\n\n        if (!coords) {\n            throw new Error(`Vertical mode needs coordinates to resolve this element. Can also be called with a browser\n                event instead of element to extract element and coordinates from`);\n        }\n\n        if (scheduler.variableColumnWidths || scheduler.resourceStore.isGrouped) {\n            let totalWidth = 0;\n\n            for (const col of me.resourceStore) {\n                if (!col.isSpecialRow) {\n                    totalWidth += col.columnWidth || me.resourceColumns.columnWidth;\n                }\n                if (totalWidth >= coords[0]) {\n                    return col;\n                }\n            }\n\n            return null;\n        }\n\n        const index = Math.floor(coords[0] / me.resourceColumns.columnWidth);\n\n        return me.allResourceRecords[index];\n    }\n\n    toggleCls(assignmentRecord, cls, add = true, useWrapper = false) {\n        const eventData = this.eventMap.get(assignmentRecord.eventId)?.[assignmentRecord.resourceId];\n\n        if (eventData) {\n            eventData.renderData[useWrapper ? 'wrapperCls' : 'cls'][cls] = add;\n            // Element from the map cannot be trusted, might be reused in which case map is not updated to reflect that.\n            // To be safe, retrieve using `getElementFromAssignmentRecord`\n            const element = this.client.getElementFromAssignmentRecord(assignmentRecord, useWrapper);\n\n            if (element) {\n                element.classList[add ? 'add' : 'remove'](cls);\n            }\n        }\n    }\n\n    //endregion\n\n    //region Coordinate <-> Date\n\n    getDateFromXY(xy, roundingMethod, local, allowOutOfRange = false) {\n        let coord = xy[1];\n\n        if (!local) {\n            coord = this.translateToScheduleCoordinate(coord);\n        }\n\n        return this.scheduler.timeAxisViewModel.getDateFromPosition(coord, roundingMethod, allowOutOfRange);\n    }\n\n    translateToScheduleCoordinate(y) {\n        return y - this.scheduler.timeAxisSubGridElement.getBoundingClientRect().top - globalThis.scrollY;\n    }\n\n    translateToPageCoordinate(y) {\n        return y + this.scheduler.timeAxisSubGridElement.getBoundingClientRect().top + globalThis.scrollY;\n    }\n\n    //endregion\n\n    //region Regions\n\n    getResourceEventBox(event, resource) {\n        const\n            eventId    = event.id,\n            resourceId = resource.id;\n\n        let { renderData } = this.eventMap.get(eventId)?.[resourceId] || emptyObject;\n\n        if (!renderData) {\n            // Never been in view, lay it out\n            this.layoutResource(this.scheduler.resourceStore.getById(resourceId));\n\n            // Have another go at getting the layout data\n            renderData = this.eventMap.get(eventId)?.[resourceId]?.renderData;\n        }\n\n        return renderData\n            ? new Rectangle(renderData.left, renderData.top, renderData.width, renderData.bottom - renderData.top)\n            : null;\n    }\n\n    getScheduleRegion(resourceRecord, eventRecord, local) {\n        const\n            me            = this,\n            { scheduler } = me,\n            // Only interested in width / height (in \"local\" coordinates)\n            region        = Rectangle.from(scheduler.timeAxisSubGridElement, scheduler.timeAxisSubGridElement);\n\n        if (resourceRecord) {\n            // TODO: How to account for eventRecord here?\n            region.left  = me.allResourceRecords.indexOf(resourceRecord) * scheduler.resourceColumnWidth;\n            region.right = region.left + scheduler.resourceColumnWidth;\n        }\n\n        const\n            start           = scheduler.timeAxis.startDate,\n            end             = scheduler.timeAxis.endDate,\n            dateConstraints = scheduler.getDateConstraints?.(resourceRecord, eventRecord) || {\n                start,\n                end\n            },\n            startY          = scheduler.getCoordinateFromDate(DateHelper.max(start, dateConstraints.start)),\n            endY            = scheduler.getCoordinateFromDate(DateHelper.min(end, dateConstraints.end));\n\n        if (!local) {\n            region.top    = me.translateToPageCoordinate(startY);\n            region.bottom = me.translateToPageCoordinate(endY);\n        }\n        else {\n            region.top    = startY;\n            region.bottom = endY;\n        }\n\n        return region;\n    }\n\n    getRowRegion(resourceRecord, startDate, endDate) {\n        const\n            me            = this,\n            { scheduler } = me,\n            x             = me.allResourceRecords.indexOf(resourceRecord) * scheduler.resourceColumnWidth,\n            taStart       = scheduler.timeAxis.startDate,\n            taEnd         = scheduler.timeAxis.endDate,\n            start         = startDate ? DateHelper.max(taStart, startDate) : taStart,\n            end           = endDate ? DateHelper.min(taEnd, endDate) : taEnd,\n            startY        = scheduler.getCoordinateFromDate(start),\n            endY          = scheduler.getCoordinateFromDate(end, true, true),\n            y             = Math.min(startY, endY),\n            height        = Math.abs(startY - endY);\n\n        return new Rectangle(x, y, scheduler.resourceColumnWidth, height);\n    }\n\n    get visibleDateRange() {\n        const\n            scheduler = this.scheduler,\n            scrollPos = scheduler.scrollable.y,\n            height    = scheduler.scrollable.clientHeight,\n            startDate = scheduler.getDateFromCoordinate(scrollPos) || scheduler.timeAxis.startDate,\n            endDate   = scheduler.getDateFromCoordinate(scrollPos + height) || scheduler.timeAxis.endDate;\n\n        return {\n            startDate,\n            endDate,\n            startMS : startDate.getTime(),\n            endMS   : endDate.getTime()\n        };\n    }\n\n    //endregion\n\n    //region Events\n\n    // Column width changed, rerender fully\n    onResourceColumnWidthChange({ width, oldWidth }) {\n        const\n            me            = this,\n            { scheduler } = me;\n\n        // Fix width of column & header\n        me.resourceColumns.width = scheduler.timeAxisColumn.width = me.allResourceRecords.length * width;\n        me.clearAll();\n\n        // Only transition large changes, otherwise it is janky when dragging slider in demo\n        me.refresh(Math.abs(width - oldWidth) > 30);\n\n        // Not detected by resizeobserver? Need to call this for virtual scrolling to react to update\n        //        scheduler.callEachSubGrid('refreshFakeScroll');\n        //        scheduler.refreshVirtualScrollbars();\n    }\n\n    //endregion\n\n    //region Project\n\n    attachToProject(project) {\n        super.attachToProject(project);\n\n        if (project) {\n            project.ion({\n                name    : 'project',\n                refresh : 'onProjectRefresh',\n                thisObj : this\n            });\n        }\n    }\n\n    onProjectRefresh() {\n        const\n            me                                    = this,\n            { scheduler, toDrawOnProjectRefresh } = me;\n\n        // Only update the UI immediately if we are visible\n        if (scheduler.isVisible) {\n            if (scheduler.rendered && !scheduler.refreshSuspended) {\n                // Either refresh all rows (on for example dataset)\n                if (me.refreshAllWhenReady) {\n                    me.clearAll();\n                    //scheduler.refreshWithTransition();\n                    me.refresh();\n                    me.refreshAllWhenReady = false;\n                }\n                // Or only affected rows (if any)\n                else if (toDrawOnProjectRefresh.size) {\n                    me.refresh();\n                }\n\n                toDrawOnProjectRefresh.clear();\n            }\n        }\n        // Otherwise wait till next time we get painted (shown, or a hidden ancestor shown)\n        else {\n            scheduler.whenVisible('refresh', scheduler, [true]);\n        }\n    }\n\n    //endregion\n\n    //region EventStore\n\n    attachToEventStore(eventStore) {\n        super.attachToEventStore(eventStore);\n\n        this.refreshAllWhenReady = true;\n\n        if (eventStore) {\n            eventStore.ion({\n                name             : 'eventStore',\n                refreshPreCommit : 'onEventStoreRefresh',\n                thisObj          : this\n            });\n        }\n    }\n\n    onEventStoreRefresh({ action }) {\n        if (action === 'batch') {\n            this.refreshAllWhenReady = true;\n        }\n    }\n\n    onEventStoreChange({ action, records : eventRecords = [], record, replaced, changes, isAssign }) {\n        const\n            me          = this,\n            resourceIds = new Set();\n\n        eventRecords.forEach(eventRecord => {\n            // Update all resource rows to which this event is assigned *if* the resourceStore\n            // contains that resource (We could have filtered the resourceStore)\n            const renderedEventResources = eventRecord.$linkedResources?.filter(r => me.resourceStore.includes(r));\n\n            renderedEventResources?.forEach(resourceRecord => resourceIds.add(resourceRecord.id));\n        });\n\n        switch (action) {\n            // No-ops\n            case 'sort':  // Order in EventStore does not matter, so these actions are no-ops\n            case 'group':\n            case 'move':\n            case 'remove': // Remove is a no-op since assignment will also be removed\n                return;\n\n            case 'dataset':\n                me.refreshAllResourcesWhenReady();\n                return;\n\n            case 'add':\n            case 'updateMultiple':\n                // Just refresh below\n                break;\n\n            case 'replace':\n                // Gather resources from both the old record and the new one\n                replaced.forEach(([, newEvent]) => {\n                    // Old cleared by changed assignment\n                    newEvent.resources.map(resourceRecord => resourceIds.add(resourceRecord.id));\n                });\n                // And clear them\n                me.clearResources(resourceIds);\n                break;\n\n            case 'removeall':\n            case 'filter':\n                // Clear all when filtering for simplicity. If that turns out to give bad performance, one would need to\n                // figure out which events was filtered out and only clear their resources.\n                me.clearAll();\n                me.refresh();\n                return;\n\n            case 'update': {\n                // Check if changes are graph related or not\n                const allChrono = record.$entity\n                    ? !Object.keys(changes).some(name => !record.$entity.getField(name))\n                    : !Object.keys(changes).some(name => !chronoFields[name]);\n\n                // If any one of these in changes, it will affect visuals\n                let changeCount = 0;\n                if ('startDate' in changes) changeCount++;\n                if ('endDate' in changes) changeCount++;\n                if ('duration' in changes) changeCount++;\n\n                // Always redraw non chrono changes (name etc)\n                if (!allChrono || changeCount || 'percentDone' in changes || 'inactive' in changes || 'segments' in changes) {\n                    me.clearResources(resourceIds);\n                    me.refresh();\n                }\n                return;\n            }\n        }\n\n        me.refreshResourcesWhenReady(resourceIds);\n    }\n\n    //endregion\n\n    //region ResourceStore\n\n    attachToResourceStore(resourceStore) {\n        const me = this;\n\n        super.attachToResourceStore(resourceStore);\n\n        me.refreshAllWhenReady = true;\n\n        if (me.resourceColumns) {\n            me.resourceColumns.resourceStore = resourceStore;\n        }\n\n        resourceStore.ion({\n            name             : 'resourceStore',\n            changePreCommit  : 'onResourceStoreChange',\n            refreshPreCommit : 'onResourceStoreRefresh',\n            // In vertical, resource store is not the row store but should toggle the load mask\n            load             : () => me.scheduler.unmaskBody(),\n            thisObj          : me,\n            prio             : 1 // Call before others to clear cache before redraw\n        });\n\n        if (me.initialized && me.scheduler.isPainted) {\n            // Invalidate resource range and events\n            me.firstResource = me.lastResource = null;\n            me.clearAll();\n\n            me.renderer();\n        }\n    }\n\n    onResourceStoreChange({ source : resourceStore, action, records = [], record, replaced, changes }) {\n        const\n            me              = this,\n            // records for add, record for update, replaced [[old, new]] for replace\n            resourceRecords = replaced ? replaced.map(r => r[1]) : records,\n            resourceIds     = new Set(resourceRecords.map(resourceRecord => resourceRecord.id));\n\n        // Invalidate resource range\n        me.firstResource                  = me.lastResource = null;\n        resourceStore._allResourceRecords = null;\n\n        const { allResourceRecords } = resourceStore;\n\n        // Operation that did not invalidate engine, refresh directly\n        if (me.scheduler.isEngineReady) {\n            switch (action) {\n                case 'update':\n                    if (changes?.id) {\n                        me.clearResources([changes.id.oldValue, changes.id.value]);\n                    }\n                    else {\n                        me.clearResources([record.id]);\n                    }\n                    // Only the invalidation above needed\n                    break;\n\n                case 'filter':\n                    // All filtered out resources needs clearing and so does those not filtered out since they might have\n                    // moved horizontally when others hide\n                    me.clearAll();\n                    break;\n            }\n\n            // Changing a column width means columns after that will have to be recalculated\n            // so clear all cached layouts.\n            if (changes && ('columnWidth' in changes)) {\n                me.clearAll();\n            }\n            me.refresh(true);\n        }\n        // Operation that did invalidate project, update on project refresh\n        else {\n            switch (action) {\n                case 'dataset':\n                case 'remove': // Cannot tell from which index it was removed\n                case 'removeall':\n                    me.refreshAllResourcesWhenReady();\n                    return;\n\n                case 'replace':\n                case 'add': {\n                    // Make sure all existing events following added resources are offset correctly\n                    const\n                        firstIndex = resourceRecords.reduce(\n                            (index, record) => Math.min(index, allResourceRecords.indexOf(record)),\n                            allResourceRecords.length\n                        );\n\n                    for (let i = firstIndex; i < allResourceRecords.length; i++) {\n                        resourceIds.add(allResourceRecords[i].id);\n                    }\n                }\n            }\n\n            me.refreshResourcesWhenReady(resourceIds);\n        }\n    }\n\n    onResourceStoreRefresh({ action }) {\n        const me = this;\n\n        if (action === 'sort' || action === 'group') {\n            // Invalidate resource range & cache\n            me.firstResource = me.lastResource = me.resourceStore._allResourceRecords = null;\n            me.clearAll();\n            me.refresh();\n        }\n    }\n\n    //endregion\n\n    //region AssignmentStore\n\n    attachToAssignmentStore(assignmentStore) {\n        super.attachToAssignmentStore(assignmentStore);\n\n        this.refreshAllWhenReady = true;\n\n        if (assignmentStore) {\n            assignmentStore.ion({\n                name             : 'assignmentStore',\n                changePreCommit  : 'onAssignmentStoreChange',\n                refreshPreCommit : 'onAssignmentStoreRefresh',\n                thisObj          : this\n            });\n        }\n    }\n\n    onAssignmentStoreChange({ action, records : assignmentRecords = [], replaced, changes }) {\n        const\n            me          = this,\n            resourceIds = new Set(assignmentRecords.map(assignmentRecord => assignmentRecord.resourceId));\n\n        // Operation that did not invalidate engine, refresh directly\n        if (me.scheduler.isEngineReady) {\n            switch (action) {\n                case 'remove':\n                    me.clearResources(resourceIds);\n                    break;\n\n                case 'filter':\n                    me.clearAll();\n                    break;\n\n                case 'update': {\n                    // When reassigning, clear old resource also\n                    if ('resourceId' in changes) {\n                        resourceIds.add(changes.resourceId.oldValue);\n                    }\n\n                    // Ignore engine resolving resourceId -> resource, eventId -> event\n                    if (!Object.keys(changes).filter(field => field !== 'resource' && field !== 'event').length) {\n                        return;\n                    }\n\n                    me.clearResources(resourceIds);\n                }\n            }\n\n            me.refresh(true);\n        }\n        // Operation that did invalidate project, update on project refresh\n        else {\n            if (changes && 'resourceId' in changes) {\n                resourceIds.add(changes.resourceId.oldValue);\n            }\n\n            switch (action) {\n                case 'removeall':\n                    me.refreshAllResourcesWhenReady();\n                    return;\n\n                case 'replace':\n                    // Gather resources from both the old record and the new one\n                    replaced.forEach(([oldAssignment, newAssignment]) => {\n                        resourceIds.add(oldAssignment.resourceId);\n                        resourceIds.add(newAssignment.resourceId);\n                    });\n            }\n\n            me.refreshResourcesWhenReady(resourceIds);\n        }\n    }\n\n    onAssignmentStoreRefresh({ action, records }) {\n        if (action === 'batch') {\n            this.clearAll();\n            this.refreshAllResourcesWhenReady();\n        }\n    }\n\n    //endregion\n\n    //region View hooks\n\n    refreshRows(reLayoutEvents) {\n        if (reLayoutEvents) {\n            this.clearAll();\n            this.scheduler.refreshFromRerender = false;\n        }\n    }\n\n    // Called from SchedulerEventRendering\n    repaintEventsForResource(resourceRecord) {\n        this.renderResource(resourceRecord);\n    }\n\n    updateFromHorizontalScroll(scrollX) {\n        if (scrollX !== this.prevScrollX) {\n            this.renderer();\n            this.prevScrollX = scrollX;\n        }\n    }\n\n    updateFromVerticalScroll() {\n        this.renderer();\n    }\n\n    scrollResourceIntoView(resourceRecord, options) {\n        const\n            { scheduler } = this,\n            x             = this.allResourceRecords.indexOf(resourceRecord) * scheduler.resourceColumnWidth;\n\n        return scheduler.scrollHorizontallyTo(x, options);\n    }\n\n    get allResourceRecords() {\n        return this.scheduler.resourceStore.allResourceRecords;\n    }\n\n    // Called when viewport size changes\n    onViewportResize(width) {\n        this.resourceColumns.availableWidth = width;\n        this.renderer();\n    }\n\n    get resourceColumns() {\n        return this.scheduler.timeAxisColumn?.resourceColumns;\n    }\n\n    // Clear events in case they use date as part of displayed info\n    onLocaleChange() {\n        this.clearAll();\n    }\n\n    // No need to do anything special\n    onDragAbort() {}\n\n    onBeforeRowHeightChange() {}\n\n    onTimeAxisViewModelUpdate() {}\n\n    updateElementId() {}\n\n    releaseTimeSpanDiv() {}\n\n    //endregion\n\n    //region Dependency connectors\n\n    /**\n     * Gets displaying item start side\n     *\n     * @param {Scheduler.model.EventModel} eventRecord\n     * @returns {'top'|'left'|'bottom'|'right'} 'left' / 'right' / 'top' / 'bottom'\n     */\n    getConnectorStartSide(eventRecord) {\n        return 'top';\n    }\n\n    /**\n     * Gets displaying item end side\n     *\n     * @param {Scheduler.model.EventModel} eventRecord\n     * @returns {'top'|'left'|'bottom'|'right'} 'left' / 'right' / 'top' / 'bottom'\n     */\n    getConnectorEndSide(eventRecord) {\n        return 'bottom';\n    }\n\n    //endregion\n\n    //region Refresh resources\n\n    /**\n     * Clears resources directly and redraws them on next project refresh\n     * @param {Number[]|String[]} resourceIds\n     * @private\n     */\n    refreshResourcesWhenReady(resourceIds) {\n        this.clearResources(resourceIds);\n        resourceIds.forEach(id => this.toDrawOnProjectRefresh.add(id));\n    }\n\n    /**\n     * Clears all resources directly and redraws them on next project refresh\n     * @private\n     */\n    refreshAllResourcesWhenReady() {\n        this.clearAll();\n        this.refreshAllWhenReady = true;\n    }\n\n    //region Rendering\n\n    // Resources in view + buffer\n    get resourceRange() {\n        return this.getResourceRange(true);\n    }\n\n    // Resources strictly in view\n    get visibleResources() {\n        const { first, last } = this.getResourceRange();\n\n        return {\n            first : this.allResourceRecords[first],\n            last  : this.allResourceRecords[last]\n        };\n    }\n\n    getResourceRange(withBuffer) {\n        const\n            {\n                scheduler,\n                resourceStore\n            }                  = this,\n            {\n                resourceColumnWidth,\n                scrollX\n            }                  = scheduler,\n            {\n                scrollWidth\n            }                  = scheduler.timeAxisSubGrid.scrollable,\n            resourceBufferSize = withBuffer ? this.resourceBufferSize : 0,\n            viewportStart      = scrollX - resourceBufferSize,\n            viewportEnd        = scrollX + scrollWidth + resourceBufferSize;\n\n        if (!resourceStore?.count) {\n            return { first : -1, last : -1 };\n        }\n\n        // Some resources define their own width\n        if (scheduler.variableColumnWidths) {\n            let first, last, start, end = 0;\n            this.allResourceRecords.forEach((resource, i) => {\n                resource.instanceMeta(scheduler).insetStart = start = end;\n                end                                         = start + resource.columnWidth;\n\n                if (start > viewportEnd) {\n                    return false;\n                }\n                if (end > viewportStart && first == null) {\n                    first = i;\n                }\n                else if (start < viewportEnd) {\n                    last = i;\n                }\n            });\n            return { first, last };\n        }\n        // We are using fixed column widths\n        else {\n            return {\n                first : Math.max(Math.floor(scrollX / resourceColumnWidth) - resourceBufferSize, 0),\n                last  : Math.min(\n                    Math.floor((scrollX + scheduler.timeAxisSubGrid.width) / resourceColumnWidth) + resourceBufferSize,\n                    this.allResourceRecords.length - 1\n                )\n            };\n        }\n    }\n\n    // Dates in view + buffer\n    get dateRange() {\n        const\n            { scheduler } = this;\n\n        let bottomDate = scheduler.getDateFromCoordinate(Math.min(\n            scheduler.scrollTop + scheduler.bodyHeight + scheduler.tickSize - 1,\n            (scheduler.virtualScrollHeight || scheduler.scrollable.scrollHeight) - 1)\n        );\n\n        // Might end up below time axis (out of ticks)\n        // TODO: Change call order on refresh to make sure this is not needed?\n        if (!bottomDate) {\n            bottomDate = scheduler.timeAxis.last.endDate;\n        }\n\n        let topDate = scheduler.getDateFromCoordinate(Math.max(scheduler.scrollTop - scheduler.tickSize, 0));\n\n        // Might end up above time axis when reconfiguring (since this happens as part of rendering)\n        if (!topDate) {\n            topDate    = scheduler.timeAxis.first.startDate;\n            bottomDate = scheduler.getDateFromCoordinate(scheduler.bodyHeight + scheduler.tickSize - 1);\n        }\n\n        return {\n            topDate,\n            bottomDate\n        };\n    }\n\n    getTimeSpanRenderData(eventRecord, resourceRecord, includeOutside = false) {\n        const\n            me             = this,\n            {\n                scheduler\n            }              = me,\n            {\n                preamble,\n                postamble\n            }              = eventRecord,\n            {\n                variableColumnWidths\n            }              = scheduler,\n            useEventBuffer = scheduler.features.eventBuffer?.enabled && me.isProVerticalRendering &&\n                (preamble || postamble) && !eventRecord.isMilestone,\n            startDateField = useEventBuffer ? 'wrapStartDate' : 'startDate',\n            endDateField   = useEventBuffer ? 'wrapEndDate' : 'endDate',\n            // Must use Model.get in order to get latest values in case we are inside a batch.\n            // EventResize changes the endDate using batching to enable a tentative change\n            // via the batchedUpdate event which is triggered when changing a field in a batch.\n            // Fall back to accessor if propagation has not populated date fields.\n            startDate      = eventRecord.isBatchUpdating && eventRecord.hasBatchedChange(startDateField) && !useEventBuffer\n                ? eventRecord.get(startDateField) : eventRecord[startDateField],\n            endDate        = eventRecord.isBatchUpdating && eventRecord.hasBatchedChange(endDateField) && !useEventBuffer\n                ? eventRecord.get(endDateField) : eventRecord[endDateField],\n            resourceMargin = scheduler.getResourceMargin(resourceRecord),\n            top            = scheduler.getCoordinateFromDate(startDate),\n            instanceMeta   = resourceRecord.instanceMeta(scheduler),\n            // Preliminary values for left & width, used for proxy. Will be changed on layout.\n            // The property \"left\" is utilized based on Scheduler's rtl setting.\n            // If RTL, then it's used as the \"right\" style position.\n            left           = variableColumnWidths ? instanceMeta.insetStart : me.allResourceRecords.indexOf(resourceRecord) * scheduler.resourceColumnWidth,\n            resourceWidth  = scheduler.getResourceWidth(resourceRecord),\n            width          = resourceWidth - resourceMargin * 2,\n            startDateMS    = startDate.getTime(),\n            endDateMS      = endDate.getTime();\n\n        let bottom = scheduler.getCoordinateFromDate(endDate),\n            height = bottom - top;\n\n        // Below, estimate height\n        if (bottom === -1) {\n            height = Math.round((endDateMS - startDateMS) * scheduler.timeAxisViewModel.getSingleUnitInPixels('millisecond'));\n            bottom = top + height;\n        }\n\n        return {\n            eventRecord,\n            resourceRecord,\n            left,\n            top,\n            bottom,\n            resourceWidth,\n            width,\n            height,\n            startDate,\n            endDate,\n            startDateMS,\n            endDateMS,\n            useEventBuffer,\n\n            children : [],\n\n            // to match horizontal, TODO: should change there\n            start   : startDate,\n            end     : endDate,\n            startMS : startDateMS,\n            endMS   : endDateMS\n        };\n    }\n\n    // Earlier start dates are above later tasks\n    // If same start date, longer tasks float to top\n    // If same start + duration, sort by name\n    eventSorter(a, b) {\n        const\n            startA = a.dataStartMs || a.startDateMS, // dataXX are used if configured with fillTicks\n            endA   = a.dataEndMs || a.endDateMS,\n            startB = b.dataStartMs || b.startDateMS,\n            endB   = b.dataEndMs || b.endDateMS,\n            nameA  = a.isModel ? a.name : a.eventRecord.name,\n            nameB  = b.isModel ? b.name : b.eventRecord.name;\n\n        return startA - startB || endB - endA || (nameA < nameB ? -1 : nameA == nameB ? 0 : 1);\n    }\n\n    // Calculate the layout for all events assigned to a resource. Since we are never stacking, the layout of one\n    // resource will never affect the others\n    layoutResource(resourceRecord) {\n        const\n            me                  = this,\n            { scheduler }       = me,\n            {\n                variableColumnWidths\n            }                   = scheduler,\n            { id : resourceId } = resourceRecord,\n            instanceMeta        = resourceRecord.instanceMeta(scheduler),\n            // Used in loop, reduce access time a wee bit\n            {\n                assignmentStore,\n                eventStore,\n                timeAxis\n            }                   = scheduler,\n            // Cache per resource\n            cache               = me.resourceMap.set(resourceId, {}).get(resourceId),\n            // Resource \"column\"\n            resourceIndex       = me.allResourceRecords.indexOf(resourceRecord),\n            {\n                barMargin,\n                resourceMargin\n            }                   = scheduler.getResourceLayoutSettings(resourceRecord);\n\n        // Events for the resource, minus those that are filtered out by filtering assignments and events\n\n        let events = eventStore.getEvents({\n            includeOccurrences : scheduler.enableRecurringEvents,\n            resourceRecord,\n            startDate          : timeAxis.startDate,\n            endDate            : timeAxis.endDate,\n            filter             : (assignmentStore.isFiltered || eventStore.isFiltered) && (eventRecord =>\n                eventRecord.assignments.some(a => a.resource === resourceRecord && assignmentStore.includes(a)))\n        });\n\n        // Hook for features to inject additional timespans to render\n        events = scheduler.getEventsToRender(resourceRecord, events);\n\n        const layoutData = events.reduce((toLayout, eventRecord) => {\n            if (eventRecord.isScheduled) {\n                const\n                    renderData     = scheduler.generateRenderData(eventRecord, resourceRecord, false),\n                    // Elements will be appended to eventData during syncing\n                    eventData      = { renderData },\n                    eventResources = ObjectHelper.getMapPath(me.eventMap, renderData.eventId, {});\n\n                // Cache per event, { e1 : { r1 : { xxx }, r2 : ... }, e2 : ... }\n                // Uses renderData.eventId in favor of eventRecord.id to work with ResourceTimeRanges\n                eventResources[resourceId] = eventData;\n\n                // Cache per resource\n                cache[renderData.eventId] = eventData;\n\n                // Position ResourceTimeRanges directly, they do not affect the layout of others\n                if (renderData.fillSize) {\n                    // The property \"left\" is utilized based on Scheduler's rtl setting.\n                    // If RTL, then it's used as the \"right\" style position.\n                    renderData.left = variableColumnWidths ? instanceMeta.insetStart : resourceIndex * scheduler.resourceColumnWidth;\n\n                    renderData.width = scheduler.getResourceWidth(resourceRecord);\n                }\n                // Anything not flagged with `fillSize` should take part in layout\n                else {\n                    toLayout.push(renderData);\n                }\n            }\n\n            return toLayout;\n        }, []);\n\n        // Ensure the events are rendered in natural order so that navigation works.\n        layoutData.sort(me.eventSorter);\n\n        // Apply per resource event layout (pack, overlap or mixed)\n        me.verticalLayout.applyLayout(\n            layoutData,\n            scheduler.getResourceWidth(resourceRecord),\n            resourceMargin,\n            barMargin,\n            resourceIndex,\n            scheduler.getEventLayout(resourceRecord)\n        );\n\n        return cache;\n    }\n\n    /**\n     * Used by event drag features to bring into existence event elements that are outside of the rendered block.\n     * @param {Scheduler.model.TimeSpan} eventRecord The event to render\n     * @private\n     */\n    addTemporaryDragElement(eventRecord) {\n        const\n            { scheduler } = this,\n            renderData    = scheduler.generateRenderData(\n                eventRecord,\n                eventRecord.resource,\n                { timeAxis : true, viewport : true }\n            );\n\n        renderData.top = renderData.row\n            ? (renderData.top + renderData.row.top)\n            : scheduler.getResourceEventBox(eventRecord, eventRecord.resource, true).top;\n\n        const\n            domConfig   = this.renderEvent({ renderData }),\n            { dataset } = domConfig;\n\n        delete domConfig.tabIndex;\n        delete dataset.eventId;\n        delete dataset.resourceId;\n        delete dataset.assignmentId;\n        delete dataset.syncId;\n        dataset.transient = true;\n        domConfig.parent  = this.scheduler.foregroundCanvas;\n\n        // So that the regular DomSyncing which may happen during scroll does not\n        // sweep up and reuse the temporary element.\n        domConfig.retainElement = true;\n\n        const result = DomHelper.createElement(domConfig);\n\n        result.innerElement = result.firstChild;\n\n        eventRecord.instanceMeta(scheduler).hasTemporaryDragElement = true;\n\n        return result;\n    }\n\n    // TODO: Pretty much identical to HorizontalRendering#renderEvent. Make shared base class\n    // Render a single event, aborting if already in DOM. To update an event, first release its element and then render\n    // it again. The element will be reused and updated. Keeps code simpler\n    renderEvent(eventData) {\n        // No point in rendering event that already has an element\n        const\n            { scheduler } = this,\n            data          = eventData.renderData,\n            {\n                resourceRecord,\n                assignmentRecord,\n                eventRecord\n            }             = data,\n            // Event element config, applied to existing element or used to create a new one below\n            elementConfig = {\n                className : data.wrapperCls,\n                tabIndex  : -1,\n                children  : [\n                    {\n                        role      : 'presentation',\n                        className : data.cls,\n                        style     : (data.internalStyle || '') + (data.style || ''),\n                        children  : data.children,\n                        dataset   : {\n                            // Each feature putting contents in the event wrap should have this to simplify syncing and\n                            // element retrieval after sync\n                            taskFeature : 'event'\n                        },\n                        syncOptions : {\n                            syncIdField : 'taskBarFeature'\n                        }\n                    },\n                    ...data.wrapperChildren\n                ],\n                style : {\n                    top                                : data.top,\n                    [scheduler.rtl ? 'right' : 'left'] : data.left,\n                    // DomHelper appends px to dimensions when using numbers\n                    height                             : eventRecord.isMilestone ? '1em' : data.height,\n                    width                              : data.width,\n                    style                              : data.wrapperStyle || '',\n                    fontSize                           : eventRecord.isMilestone ? Math.min(data.width, 40) : null\n                },\n                dataset : {\n                    // assignmentId is set in this function conditionally\n                    resourceId : resourceRecord.id,\n                    eventId    : data.eventId, // Not using eventRecord.id to distinguish between Event and ResourceTimeRange\n                    // Sync using assignment id for events and event id for ResourceTimeRanges\n                    syncId     : assignmentRecord ? this.assignmentStore.getOccurrence(assignmentRecord, eventRecord).id : data.eventId\n\n                },\n                // Will not be part of DOM, but attached to the element\n                elementData   : eventData,\n                // Dragging etc. flags element as retained, to not reuse/release it during that operation. Events\n                // always use assignments, but ResourceTimeRanges does not\n                retainElement : (assignmentRecord || eventRecord).instanceMeta(this.scheduler).retainElement,\n                // Options for this level of sync, lower levels can have their own\n                syncOptions   : {\n                    syncIdField      : 'taskFeature',\n                    // Remove instead of release when a feature is disabled\n                    releaseThreshold : 0\n                }\n            };\n\n        elementConfig.className['b-sch-vertical'] = 1;\n\n        // Some browsers throw warnings on zIndex = ''\n        if (data.zIndex) {\n            elementConfig.zIndex = data.zIndex;\n        }\n\n        // Do not want to spam dataset with empty prop when not using assignments (ResourceTimeRanges)\n        if (assignmentRecord) {\n            elementConfig.dataset.assignmentId = assignmentRecord.id;\n        }\n\n        // Allows access to the used config later, for example to retrieve element\n        eventData.elementConfig = elementConfig;\n\n        return elementConfig;\n    }\n\n    renderResource(resourceRecord) {\n        const\n            me                          = this,\n            // Date at top and bottom for determining which events to include\n            { topDateMS, bottomDateMS } = me,\n            // Will hold element configs\n            eventDOMConfigs             = [];\n\n        let resourceEntry = me.resourceMap.get(resourceRecord.id);\n\n        // Layout all events for the resource unless already done\n        if (!resourceEntry) {\n            resourceEntry = me.layoutResource(resourceRecord);\n        }\n\n        // Iterate over all events for the resource\n        for (const eventId in resourceEntry) {\n            const\n                eventData                               = resourceEntry[eventId],\n                { endDateMS, startDateMS, eventRecord } = eventData.renderData;\n\n            if (\n                // Only collect configs for those actually in view\n                endDateMS >= topDateMS && startDateMS <= bottomDateMS &&\n                // And not being dragged, those have a temporary element already\n                !eventRecord.instanceMeta(me.scheduler).hasTemporaryDragElement\n            ) {\n                // Reuse DomConfig if available, otherwise render event to create one\n                const domConfig = eventData.elementConfig?.className !== 'b-released' && eventData.elementConfig || me.renderEvent(eventData);\n                eventDOMConfigs.push(domConfig);\n            }\n        }\n\n        return eventDOMConfigs;\n    }\n\n    isEventElement(domConfig) {\n        const className = domConfig && domConfig.className;\n\n        return className && className[this.scheduler.eventCls + '-wrap'];\n    }\n\n    // Single cell so only one call to this renderer, determine which events are in view and draw them.\n    // Drawing on scroll is triggered by `updateFromVerticalScroll()` and `updateFromHorizontalScroll()`\n    renderer() {\n        const\n            me                                           = this,\n            { scheduler }                                = me,\n            // Determine resource range to draw events for\n            { first : firstResource, last : lastResource } = me.resourceRange,\n            // Date at top and bottom for determining which events to include\n            { topDate, bottomDate }                        = me.dateRange,\n            syncConfigs                                    = [],\n            featureDomConfigs                              = [];\n\n        // If scheduler is creating a new event, the render needs to be synchronous, so\n        // we cannot wait for the engine to normalize - the new event will have correct data set.\n        if (!me.initialized || (!scheduler.isEngineReady && !scheduler.isCreating)) {\n            return;\n        }\n\n        //<debug>\n        if (globalThis.DEBUG) {\n            if (me.firstResource !== firstResource || me.lastResource !== lastResource) {\n                console.log(`Resources in view ${me.allResourceRecords[firstResource].id} -> ${me.allResourceRecords[lastResource].id}`);\n            }\n        }\n        //</debug>\n\n        // Update current time range, reflecting the change on the vertical time axis header\n        if (!DateHelper.isEqual(topDate, me.topDate) || !DateHelper.isEqual(bottomDate, me.bottomDate)) {\n            // Calculated values used by `renderResource()`\n            me.topDate      = topDate;\n            me.bottomDate   = bottomDate;\n            me.topDateMS    = topDate.getTime();\n            me.bottomDateMS = bottomDate.getTime();\n\n            const range = me.timeView.range = { startDate : topDate, endDate : bottomDate };\n\n            scheduler.onVisibleDateRangeChange(range);\n        }\n\n        if (firstResource !== -1 && lastResource !== -1) {\n            // Collect all events for resources in view\n            for (let i = firstResource; i <= lastResource; i++) {\n                syncConfigs.push.apply(syncConfigs, me.renderResource(me.allResourceRecords[i]));\n            }\n        }\n\n        scheduler.getForegroundDomConfigs(featureDomConfigs);\n\n        syncConfigs.push.apply(syncConfigs, featureDomConfigs);\n\n        DomSync.sync({\n            domConfig : {\n                onlyChildren : true,\n                children     : syncConfigs\n            },\n            targetElement : scheduler.foregroundCanvas,\n            syncIdField   : 'syncId',\n\n            // Called by DomHelper when it creates, releases or reuses elements\n            callback({ action, domConfig, lastDomConfig, targetElement, jsx }) {\n                const { reactComponent } = scheduler;\n                // If element is an event wrap, trigger appropriate events\n                if (me.isEventElement(domConfig) || jsx || domConfig?.elementData?.jsx) {\n                    const\n                        // Some actions are considered first a release and then a render (reusing another element).\n                        // This gives clients code a chance to clean up before reusing an element\n                        isRelease = releaseEventActions[action],\n                        isRender  = renderEventActions[action];\n\n                    if (scheduler.processEventContent?.({\n                        action,\n                        domConfig,\n                        isRelease : false,\n                        targetElement,\n                        reactComponent,\n                        jsx\n\n                    })) return;\n\n                    // If we are reusing an element that was previously released we should not trigger again\n                    if (isRelease && me.isEventElement(lastDomConfig) && !lastDomConfig.isReleased) {\n                        const\n                            data  = lastDomConfig.elementData.renderData,\n                            event = {\n                                renderData       : data,\n                                assignmentRecord : data.assignmentRecord,\n                                eventRecord      : data.eventRecord,\n                                resourceRecord   : data.resourceRecord,\n                                element          : targetElement\n                            };\n\n                        // Release any portal in React event content\n                        scheduler.processEventContent?.({\n                            isRelease,\n                            targetElement,\n                            reactComponent,\n                            assignmentRecord : data.assignmentRecord\n                        });\n\n                        // Some browsers do not blur on set to display:none, so releasing the active element\n                        // must *explicitly* move focus outwards to the view.\n                        if (targetElement === DomHelper.getActiveElement(targetElement)) {\n                            scheduler.focusElement.focus();\n                        }\n\n                        // This event is documented on Scheduler\n                        scheduler.trigger('releaseEvent', event);\n                    }\n\n                    if (isRender) {\n                        const\n                            data  = domConfig.elementData.renderData,\n                            event = {\n                                renderData       : data,\n                                assignmentRecord : data.assignmentRecord,\n                                eventRecord      : data.eventRecord,\n                                resourceRecord   : data.resourceRecord,\n                                element          : targetElement,\n                                isReusingElement : action === 'reuseElement',\n                                isRepaint        : action === 'reuseOwnElement'\n                            };\n\n                        event.reusingElement = action === 'reuseElement';\n\n                        // This event is documented on Scheduler\n                        scheduler.trigger('renderEvent', event);\n                    }\n                }\n            }\n        });\n\n        // Change in displayed resources?\n        if (me.firstResource !== firstResource || me.lastResource !== lastResource) {\n            // Update header to match\n            const range = me.resourceColumns.visibleResources = { firstResource, lastResource };\n\n            // Store which resources are currently in view\n            me.firstResource = firstResource;\n            me.lastResource  = lastResource;\n\n            scheduler.onVisibleResourceRangeChange(range);\n            scheduler.trigger('resourceRangeChange', range);\n        }\n    }\n\n    refresh(transition) {\n        this.scheduler.runWithTransition(() => this.renderer(), transition);\n    }\n\n    // To match horizontals API, used from EventDrag\n    refreshResources(resourceIds) {\n        this.clearResources(resourceIds);\n        this.refresh();\n    }\n\n    // To match horizontals API, used from EventDrag\n    refreshEventsForResource(recordOrRow, force = true, draw = true) {\n        this.refreshResources([recordOrRow.id]);\n    }\n\n    onRenderDone() {\n\n    }\n\n    //endregion\n\n    //region Other\n\n    get timeView() {\n        return this.scheduler.timeView;\n    }\n\n    //endregion\n\n    //region Cache\n\n    // Clears cached resource layout\n    clearResources(resourceIds) {\n        const { resourceMap, eventMap } = this;\n\n        //<debug>\n        if (globalThis.DEBUG) console.log('%Clearing resources ' + Array.from(resourceIds).join(','), 'color: #770000');\n        //</debug>\n\n        resourceIds.forEach(resourceId => {\n            if (resourceMap.has(resourceId)) {\n                // The *keys* of an Object are strings, so we must iterate the values\n                // and use the original eventId to look up in the Map which preserves key type.\n                Object.values(resourceMap.get(resourceId)).forEach(({ renderData : { eventId } }) => {\n                    delete eventMap.get(eventId)[resourceId];\n                });\n\n                resourceMap.delete(resourceId);\n            }\n        });\n    }\n\n    clearAll() {\n        //<debug>\n        if (globalThis.DEBUG) console.log('%Clearing all', 'color: #770000');\n        //</debug>\n\n        this.resourceMap.clear();\n        this.eventMap.clear();\n    }\n\n    //endregion\n}\n","import TimelineBase from './TimelineBase.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport CrudManager from '../data/CrudManager.js';\nimport DomSync from '../../Core/helper/DomSync.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\nimport '../localization/En.js';\n\nimport CurrentConfig from './mixin/CurrentConfig.js';\nimport Describable from './mixin/Describable.js';\nimport SchedulerDom from './mixin/SchedulerDom.js';\nimport SchedulerDomEvents from './mixin/SchedulerDomEvents.js';\nimport SchedulerEventRendering from './mixin/SchedulerEventRendering.js';\nimport SchedulerStores from './mixin/SchedulerStores.js';\nimport SchedulerScroll from './mixin/SchedulerScroll.js';\nimport SchedulerRegions from './mixin/SchedulerRegions.js';\nimport SchedulerState from './mixin/SchedulerState.js';\nimport EventSelection from './mixin/EventSelection.js';\nimport EventNavigation from './mixin/EventNavigation.js';\nimport CrudManagerView from '../crud/mixin/CrudManagerView.js';\nimport HorizontalRendering from './orientation/HorizontalRendering.js';\nimport VerticalRendering from './orientation/VerticalRendering.js';\nimport '../column/TimeAxisColumn.js';\nimport '../column/VerticalTimeAxisColumn.js';\n\n// Should always be present in Scheduler\nimport '../../Grid/feature/RegionResize.js';\n\n/**\n * @module Scheduler/view/SchedulerBase\n */\n\nconst\n    descriptionFormats = {\n        month : 'MMMM, YYYY',\n        week  : ['MMMM YYYY (Wp)', 'S{MMM} - E{MMM YYYY} (S{Wp})'],\n        day   : 'MMMM D, YYYY'\n    };\n\n/**\n * A thin base class for {@link Scheduler.view.Scheduler}. Does not include any features by default, allowing smaller\n * custom built bundles if used in place of {@link Scheduler.view.Scheduler}.\n *\n * **NOTE:** In most scenarios you do probably want to use Scheduler instead of SchedulerBase.\n *\n * @mixes Scheduler/view/mixin/Describable\n * @mixes Scheduler/view/mixin/EventNavigation\n * @mixes Scheduler/view/mixin/EventSelection\n * @mixes Scheduler/view/mixin/SchedulerDom\n * @mixes Scheduler/view/mixin/SchedulerDomEvents\n * @mixes Scheduler/view/mixin/SchedulerEventRendering\n * @mixes Scheduler/view/mixin/SchedulerRegions\n * @mixes Scheduler/view/mixin/SchedulerScroll\n * @mixes Scheduler/view/mixin/SchedulerState\n * @mixes Scheduler/view/mixin/SchedulerStores\n * @mixes Scheduler/view/mixin/TimelineDateMapper\n * @mixes Scheduler/view/mixin/TimelineDomEvents\n * @mixes Scheduler/view/mixin/TimelineEventRendering\n * @mixes Scheduler/view/mixin/TimelineScroll\n * @mixes Scheduler/view/mixin/TimelineViewPresets\n * @mixes Scheduler/view/mixin/TimelineZoomable\n * @mixes Scheduler/crud/mixin/CrudManagerView\n * @mixes Scheduler/data/mixin/ProjectConsumer\n *\n * @features Scheduler/feature/ColumnLines\n * @features Scheduler/feature/Dependencies\n * @features Scheduler/feature/DependencyEdit\n * @features Scheduler/feature/EventCopyPaste\n * @features Scheduler/feature/EventDrag\n * @features Scheduler/feature/EventDragCreate\n * @features Scheduler/feature/EventDragSelect\n * @features Scheduler/feature/EventEdit\n * @features Scheduler/feature/EventFilter\n * @features Scheduler/feature/EventMenu\n * @features Scheduler/feature/EventNonWorkingTime\n * @features Scheduler/feature/EventResize\n * @features Scheduler/feature/EventTooltip\n * @features Scheduler/feature/GroupSummary\n * @features Scheduler/feature/HeaderZoom\n * @features Scheduler/feature/Labels\n * @features Scheduler/feature/NonWorkingTime\n * @features Scheduler/feature/Pan\n * @features Scheduler/feature/ResourceTimeRanges\n * @features Scheduler/feature/ScheduleContext\n * @features Scheduler/feature/ScheduleMenu\n * @features Scheduler/feature/ScheduleTooltip\n * @features Scheduler/feature/SimpleEventEdit\n * @features Scheduler/feature/StickyEvents\n * @features Scheduler/feature/Summary\n * @features Scheduler/feature/TimeAxisHeaderMenu\n * @features Scheduler/feature/TimeRanges\n * @features Scheduler/feature/TimeSelection\n *\n * @features Scheduler/feature/experimental/ExcelExporter\n *\n * @features Scheduler/feature/export/PdfExport\n * @features Scheduler/feature/export/exporter/MultiPageExporter\n * @features Scheduler/feature/export/exporter/MultiPageVerticalExporter\n * @features Scheduler/feature/export/exporter/SinglePageExporter\n *\n * @extends Scheduler/view/TimelineBase\n * @widget\n */\nexport default class SchedulerBase extends TimelineBase.mixin(\n    CrudManagerView,\n    Describable,\n    SchedulerDom,\n    SchedulerDomEvents,\n    SchedulerStores,\n    SchedulerScroll,\n    SchedulerState,\n    SchedulerEventRendering,\n    SchedulerRegions,\n    EventSelection,\n    EventNavigation,\n    CurrentConfig\n) {\n    //region Config\n\n    static get $name() {\n        return 'SchedulerBase';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'schedulerbase';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Get/set the scheduler's read-only state. When set to `true`, any UIs for modifying data are disabled.\n             * @member {Boolean} readOnly\n             */\n            /**\n             * Configure as `true` to make the scheduler read-only, by disabling any UIs for modifying data.\n             *\n             * __Note that checks MUST always also be applied at the server side.__\n             * @config {Boolean} readOnly\n             * @default false\n             */\n\n            /**\n             * The date to display when used as a component of a Calendar.\n             *\n             * This is required by the Calendar Mode Interface.\n             *\n             * @config {Date}\n             * @category Calendar integration\n             */\n            date : {\n                value : null,\n\n                $config : {\n                    equal : 'date'\n                }\n            },\n\n            /**\n             * Unit used to control how large steps to take when clicking the previous and next buttons in the Calendar\n             * UI. Only applies when used as a component of a Calendar.\n             *\n             * Suitable units depend on configured {@link #config-range}, a smaller or equal unit is recommended.\n             *\n             * @config {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'}\n             * @category Calendar integration\n             */\n            stepUnit : 'week',\n\n            /**\n             * Unit used to set the length of the time axis when used as a component of a Calendar. Suitable units are\n             * `'month'`, `'week'` and `'day'`.\n             *\n             * @config {'day'|'week'|'month'}\n             * @category Calendar integration\n             */\n            range : 'week',\n\n            /**\n             * When the scheduler is used in a Calendar, this function provides the textual description for the\n             * Calendar's toolbar.\n             *\n             * ```javascript\n             *  descriptionRenderer : scheduler => {\n             *      const\n             *          count = scheduler.eventStore.records.filter(\n             *              eventRec => DateHelper.intersectSpans(\n             *                  scheduler.startDate, scheduler.endDate,\n             *                  eventRec.startDate, eventRec.endDate)).length,\n             *          startDate = DateHelper.format(scheduler.startDate, 'DD/MM/YYY'),\n             *          endData = DateHelper.format(scheduler.endDate, 'DD/MM/YYY');\n             *\n             *      return `${startDate} - ${endData}, ${count} event${count === 1 ? '' : 's'}`;\n             *  }\n             * ```\n             * @config {Function}\n             * @param {Scheduler.view.SchedulerBase} view The active view.\n             * @category Calendar integration\n             */\n\n            /**\n             * A method allowing you to define date boundaries that will constrain resize, create and drag drop\n             * operations. The method will be called with the Resource record, and the Event record.\n             *\n             * ```javascript\n             *  new Scheduler({\n             *      getDateConstraints(resourceRecord, eventRecord) {\n             *          // Assuming you have added these extra fields to your own EventModel subclass\n             *          const { minStartDate, maxEndDate } = eventRecord;\n             *\n             *          return {\n             *              start : minStartDate,\n             *              end   : maxEndDate\n             *          };\n             *      }\n             *  });\n             * ```\n             * @param {Scheduler.model.ResourceModel} [resourceRecord] The resource record\n             * @param {Scheduler.model.EventModel} [eventRecord] The event record\n             * @returns {Object} Constraining object containing `start` and `end` constraints. Omitting either\n             * will mean that end is not constrained. So you can prevent a resize or move from moving *before*\n             * a certain time while not constraining the end date.\n             * @returns {Date} [return.start] Start date\n             * @returns {Date} [return.end] End date\n             * @config {Function}\n             * @category Scheduled events\n             */\n            getDateConstraints : null,\n\n            /**\n             * The time axis column config for vertical {@link Scheduler.view.SchedulerBase#config-mode}.\n             *\n             * Object with {@link Scheduler.column.VerticalTimeAxisColumn} configuration.\n             *\n             * This object will be used to configure the vertical time axis column instance.\n             *\n             * The config allows configuring the `VerticalTimeAxisColumn` instance used in vertical mode with any Column options that apply to it.\n             *\n             * Example:\n             *\n             * ```javascript\n             * new Scheduler({\n             *     mode     : 'vertical',\n             *     features : {\n             *         filterBar : true\n             *     },\n             *     verticalTimeAxisColumn : {\n             *         text  : 'Filter by event name',\n             *         width : 180,\n             *         filterable : {\n             *             // add a filter field to the vertical column access header\n             *             filterField : {\n             *                 type        : 'text',\n             *                 placeholder : 'Type to search',\n             *                 onChange    : ({ value }) => {\n             *                     // filter event by name converting to lowerCase to be equal comparison\n             *                     scheduler.eventStore.filter({\n             *                         filters : event => event.name.toLowerCase().includes(value.toLowerCase()),\n             *                         replace : true\n             *                     });\n             *                 }\n             *             }\n             *         }\n             *     },\n             *     ...\n             * });\n             * ```\n             *\n             * @config {VerticalTimeAxisColumnConfig}\n             * @category Time axis\n             */\n            verticalTimeAxisColumn : {},\n\n            /**\n             * See {@link Scheduler.view.Scheduler#keyboard-shortcuts Keyboard shortcuts} for details\n             * @config {Object<String,String>} keyMap\n             * @category Common\n             */\n\n            /**\n             * If true, a new event will be created when user double-clicks on a time axis cell (if scheduler is not in\n             * read only mode).\n             *\n             * The duration / durationUnit of the new event will be 1 time axis tick (default), or it can be read from\n             * the {@link Scheduler.model.EventModel#field-duration} and\n             * {@link Scheduler.model.EventModel#field-durationUnit} fields.\n             *\n             * Set to `false` to not create events on double click.\n             * @config {Boolean|Object} createEventOnDblClick\n             * @param {Boolean} [createEventOnDblClick.useEventModelDefaults] set to `true` to set default duration\n             * based on the defaults specified by the {@link Scheduler.model.EventModel#field-duration} and\n             * {@link Scheduler.model.EventModel#field-durationUnit} fields.\n             * @default\n             * @category Scheduled events\n             */\n            createEventOnDblClick : true,\n\n            // A CSS class identifying areas where events can be scheduled using drag-create, double click etc.\n            schedulableAreaSelector : '.b-sch-timeaxis-cell',\n            scheduledEventName      : 'event',\n            sortFeatureStore        : 'resourceStore'\n        };\n    }\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Scheduler mode. Supported values: horizontal, vertical\n             * @config {'horizontal'|'vertical'} mode\n             * @default\n             */\n            mode : 'horizontal',\n\n            /**\n             * CSS class to add to rendered events\n             * @config {String}\n             * @category CSS\n             * @private\n             * @default\n             */\n            eventCls : 'b-sch-event',\n\n            /**\n             * CSS class to add to cells in the timeaxis column\n             * @config {String}\n             * @category CSS\n             * @private\n             * @default\n             */\n            timeCellCls : 'b-sch-timeaxis-cell',\n\n            /**\n             * A CSS class to apply to each event in the view on mouseover (defaults to 'b-sch-event-hover').\n             * @config {String}\n             * @default\n             * @category CSS\n             * @private\n             */\n            overScheduledEventClass : 'b-sch-event-hover',\n\n            /**\n             * Set to false if you don't want to allow events overlapping times for any one resource (defaults to true).\n             * @config {Boolean}\n             * @default\n             * @category Scheduled events\n             */\n            allowOverlap : true,\n\n            /**\n             * The height in pixels of Scheduler rows.\n             * @config {Number}\n             * @default\n             */\n            rowHeight : 60,\n\n            /**\n             * Scheduler overrides Grids default implementation of {@link Grid.view.GridBase#config-getRowHeight} to\n             * pre-calculate row heights based on events in the rows.\n             *\n             * The amount of rows that are pre-calculated is limited for performance reasons. The limit is configurable\n             * by specifying the {@link Scheduler.view.SchedulerBase#config-preCalculateHeightLimit} config.\n             *\n             * The results of the calculation are cached internally.\n             *\n             * @config {Function} getRowHeight\n             * @param {Scheduler.model.ResourceModel} getRowHeight.record Resource record to determine row height for\n             * @returns {Number} Desired row height\n             * @category Layout\n             */\n\n            /**\n             * Maximum number of resources for which height is pre-calculated. If you have many events per\n             * resource you might want to lower this number to gain some initial rendering performance.\n             *\n             * Specify a falsy value to opt out of row height pre-calculation.\n             *\n             * @config {Number}\n             * @default\n             * @category Layout\n             */\n            preCalculateHeightLimit : 10000,\n\n            crudManagerClass : CrudManager,\n\n            testConfig : {\n                loadMaskError : {\n                    autoClose : 10,\n                    showDelay : 0\n                }\n            }\n        };\n    }\n\n    static properties = {\n        timeCellSelector          : '.b-sch-timeaxis-cell',\n        resourceTimeRangeSelector : '.b-sch-resourcetimerange'\n    }\n\n    // Keep this commented out to have easy access to the syntax next time we need to use it\n    // static get deprecatedEvents() {\n    //     return {\n    //         eventContextMenuBeforeShow : {\n    //             product            : 'Scheduler',\n    //             invalidAsOfVersion : '5.0.0',\n    //             message            : '`eventContextMenuBeforeShow` event is deprecated, in favor of `eventMenuBeforeShow` event. Please see https://bryntum.com/products/scheduler/docs/guide/Scheduler/upgrades/3.1.0 for more information.'\n    //         }\n    //     };\n    // }\n\n    //endregion\n\n    //region Store & model docs\n\n    // Documented here instead of in SchedulerStores since SchedulerPro uses different types\n\n    // Configs\n\n    /**\n     * Inline events, will be loaded into an internally created EventStore.\n     * @config {Scheduler.model.EventModel[]|EventModelConfig[]} events\n     * @category Data\n     */\n\n    /**\n     * The {@link Scheduler.data.EventStore} holding the events to be rendered into the scheduler (required).\n     * @config {Scheduler.data.EventStore|EventStoreConfig} eventStore\n     * @category Data\n     */\n\n    /**\n     * Inline resources, will be loaded into an internally created ResourceStore.\n     * @config {Scheduler.model.ResourceModel[]|ResourceModelConfig[]} resources\n     * @category Data\n     */\n\n    /**\n     * The {@link Scheduler.data.ResourceStore} holding the resources to be rendered into the scheduler (required).\n     * @config {Scheduler.data.ResourceStore|ResourceStoreConfig} resourceStore\n     * @category Data\n     */\n\n    /**\n     * Inline assignments, will be loaded into an internally created AssignmentStore.\n     * @config {Scheduler.model.AssignmentModel[]|Object[]} assignments\n     * @category Data\n     */\n\n    /**\n     * The optional {@link Scheduler.data.AssignmentStore}, holding assignments between resources and events.\n     * Required for multi assignments.\n     * @config {Scheduler.data.AssignmentStore|AssignmentStoreConfig} assignmentStore\n     * @category Data\n     */\n\n    /**\n     * Inline dependencies, will be loaded into an internally created DependencyStore.\n     * @config {Scheduler.model.DependencyModel[]|DependencyModelConfig[]} dependencies\n     * @category Data\n     */\n\n    /**\n     * The optional {@link Scheduler.data.DependencyStore}.\n     * @config {Scheduler.data.DependencyStore|DependencyStoreConfig} dependencyStore\n     * @category Data\n     */\n\n    // Properties\n\n    /**\n     * Get/set events, applies to the backing project's EventStore.\n     * @member {Scheduler.model.EventModel[]} events\n     * @accepts {Scheduler.model.EventModel[]|EventModelConfig[]}\n     * @category Data\n     */\n\n    /**\n     * Get/set the event store instance of the backing project.\n     * @member {Scheduler.data.EventStore} eventStore\n     * @category Data\n     */\n\n    /**\n     * Get/set resources, applies to the backing project's ResourceStore.\n     * @member {Scheduler.model.ResourceModel[]} resources\n     * @accepts {Scheduler.model.ResourceModel[]|ResourceModelConfig[]}\n     * @category Data\n     */\n\n    /**\n     * Get/set the resource store instance of the backing project\n     * @member {Scheduler.data.ResourceStore} resourceStore\n     * @category Data\n     */\n\n    /**\n     * Get/set assignments, applies to the backing project's AssignmentStore.\n     * @member {Scheduler.model.AssignmentModel[]} assignments\n     * @accepts {Scheduler.model.AssignmentModel[]|Object[]}\n     * @category Data\n     */\n\n    /**\n     * Get/set the event store instance of the backing project.\n     * @member {Scheduler.data.AssignmentStore} assignmentStore\n     * @category Data\n     */\n\n    /**\n     * Get/set dependencies, applies to the backing projects DependencyStore.\n     * @member {Scheduler.model.DependencyModel[]} dependencies\n     * @accepts {Scheduler.model.DependencyModel[]|DependencyModelConfig[]}\n     * @category Data\n     */\n\n    /**\n     * Get/set the dependencies store instance of the backing project.\n     * @member {Scheduler.data.DependencyStore} dependencyStore\n     * @category Data\n     */\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Fired after rendering an event, when its element is available in DOM.\n     * @event renderEvent\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Scheduler.model.EventModel} eventRecord The event record\n     * @param {Scheduler.model.ResourceModel} resourceRecord The resource record\n     * @param {Scheduler.model.AssignmentModel} assignmentRecord The assignment record\n     * @param {Object} renderData An object containing details about the event rendering, see\n     *   {@link Scheduler.view.mixin.SchedulerEventRendering#config-eventRenderer} for details\n     * @param {Boolean} isRepaint `true` if this render is a repaint of the event, updating its existing element\n     * @param {Boolean} isReusingElement `true` if this render lead to the event reusing a released events element\n     * @param {HTMLElement} element The event bar element\n     */\n\n    /**\n     * Fired after releasing an event, useful to cleanup of custom content added on `renderEvent` or in `eventRenderer`.\n     * @event releaseEvent\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Scheduler.model.EventModel} eventRecord The event record\n     * @param {Scheduler.model.ResourceModel} resourceRecord The resource record\n     * @param {Scheduler.model.AssignmentModel} assignmentRecord The assignment record\n     * @param {Object} renderData An object containing details about the event rendering\n     * @param {HTMLElement} element The event bar element\n     */\n\n    /**\n     * Fired when clicking a resource header cell\n     * @event resourceHeaderClick\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Scheduler.model.ResourceModel} resourceRecord The resource record\n     * @param {Event} event The event\n     */\n\n    /**\n     * Fired when double clicking a resource header cell\n     * @event resourceHeaderDblclick\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Scheduler.model.ResourceModel} resourceRecord The resource record\n     * @param {Event} event The event\n     */\n\n    /**\n     * Fired when activating context menu on a resource header cell\n     * @event resourceHeaderContextmenu\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Scheduler.model.ResourceModel} resourceRecord The resource record\n     * @param {Event} event The event\n     */\n\n    /**\n     * Triggered when a keydown event is observed if there are selected events.\n     * @event eventKeyDown\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Scheduler.model.EventModel[]} eventRecords The selected event records\n     * @param {Scheduler.model.AssignmentModel[]} assignmentRecords The selected assignment records\n     * @param {KeyboardEvent} event Browser event\n     */\n\n    /**\n     * Triggered when a keyup event is observed if there are selected events.\n     * @event eventKeyUp\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Scheduler.model.EventModel[]} eventRecords The selected event records\n     * @param {Scheduler.model.AssignmentModel[]} assignmentRecords The selected assignment records\n     * @param {KeyboardEvent} event Browser event\n     */\n\n    //endregion\n\n    //region Functions injected by features\n\n    // For documentation & typings purposes\n\n    /**\n     * Opens an editor UI to edit the passed event.\n     *\n     * *NOTE: Only available when the {@link Scheduler/feature/EventEdit EventEdit} feature is enabled.*\n     *\n     * @function editEvent\n     * @param {Scheduler.model.EventModel} eventRecord Event to edit\n     * @param {Scheduler.model.ResourceModel} [resourceRecord] The Resource record for the event.\n     * This parameter is needed if the event is newly created for a resource and has not been assigned, or when using\n     * multi assignment.\n     * @param {HTMLElement} [element] Element to anchor editor to (defaults to events element)\n     * @category Feature shortcuts\n     */\n\n    /**\n     * Returns the dependency record for a DOM element\n     *\n     * *NOTE: Only available when the {@link Scheduler/feature/Dependencies Dependencies} feature is enabled.*\n     *\n     * @function resolveDependencyRecord\n     * @param {HTMLElement} element The dependency line element\n     * @returns {Scheduler.model.DependencyModel} The dependency record\n     * @category Feature shortcuts\n     */\n\n    //endregion\n\n    //region Init\n\n    afterConstruct() {\n        const me = this;\n\n        super.afterConstruct();\n\n        me.ion({ scroll : 'onVerticalScroll', thisObj : me });\n\n        if (me.createEventOnDblClick) {\n            me.ion({ scheduledblclick : me.onTimeAxisCellDblClick });\n        }\n    }\n\n    //endregion\n\n    //region Overrides\n\n    onPaintOverride() {\n        // Internal procedure used for paint method overrides\n        // Not used in onPaint() because it may be chained on instance and Override won't be applied\n    }\n\n    //endregion\n\n    //region Config getters/setters\n\n    // Placeholder getter/setter for mixins, please make any changes needed to SchedulerStores#store instead\n    get store() {\n        return super.store;\n    }\n\n    set store(store) {\n        super.store = store;\n    }\n\n    /**\n     * Returns an object defining the range of visible resources\n     * @property {Object}\n     * @property {Scheduler.model.ResourceModel} visibleResources.first First visible resource\n     * @property {Scheduler.model.ResourceModel} visibleResources.last Last visible resource\n     * @readonly\n     */\n    get visibleResources() {\n        const me = this;\n\n        if (me.isVertical) {\n            return me.currentOrientation.visibleResources;\n        }\n\n        return {\n            first : me.store.getById(me.firstVisibleRow?.id),\n            last  : me.store.getById(me.lastVisibleRow?.id)\n        };\n    }\n\n    //endregion\n\n    //region Event handlers\n\n    onLocaleChange() {\n        this.currentOrientation.onLocaleChange();\n\n        super.onLocaleChange();\n    }\n\n    onTimeAxisCellDblClick({ date : startDate, resourceRecord, row }) {\n        const me = this;\n\n        if (me.readOnly || resourceRecord.isSpecialRow || resourceRecord.readOnly) {\n            return;\n        }\n\n        me.createEvent(startDate, resourceRecord, row);\n    }\n\n    onVerticalScroll({ scrollTop }) {\n        this.currentOrientation.updateFromVerticalScroll(scrollTop);\n    }\n\n    /**\n     * Called when new event is created.\n     * Сan be overridden to supply default record values etc.\n     * @param {Scheduler.model.EventModel} eventRecord Newly created event\n     * @category Scheduled events\n     */\n    onEventCreated(eventRecord) {}\n\n    //endregion\n\n    //region Mode\n\n    /**\n     * Checks if scheduler is in horizontal mode\n     * @returns {Boolean}\n     * @readonly\n     * @category Common\n     * @private\n     */\n    get isHorizontal() {\n        return this.mode === 'horizontal';\n    }\n\n    /**\n     * Checks if scheduler is in vertical mode\n     * @returns {Boolean}\n     * @readonly\n     * @category Common\n     * @private\n     */\n    get isVertical() {\n        return this.mode === 'vertical';\n    }\n\n    /**\n     * Get mode (horizontal/vertical)\n     * @property {'horizontal'|'vertical'}\n     * @readonly\n     * @category Common\n     */\n    get mode() {\n        return this._mode;\n    }\n\n    set mode(mode) {\n        const me = this;\n\n        me._mode = mode;\n\n        if (!me[mode]) {\n            me.element.classList.add(`b-sch-${mode}`);\n\n            if (mode === 'horizontal') {\n                me.horizontal = new HorizontalRendering(me);\n                if (me.isPainted) {\n                    me.horizontal.init();\n                }\n            }\n            else if (mode === 'vertical') {\n                me.vertical = new VerticalRendering(me);\n\n                if (me.rendered) {\n                    me.vertical.init();\n                }\n            }\n        }\n    }\n\n    get currentOrientation() {\n        return this[this.mode];\n    }\n\n    //endregion\n\n    //region Dom event dummies\n\n    // this is ugly, but needed since super cannot be called from SchedulerDomEvents mixin...\n\n    onElementKeyDown(event) {\n        return super.onElementKeyDown(event);\n    }\n\n    onElementKeyUp(event) {\n        return super.onElementKeyUp(event);\n    }\n\n    onElementMouseOver(event) {\n        return super.onElementMouseOver(event);\n    }\n\n    onElementMouseOut(event) {\n        return super.onElementMouseOut(event);\n    }\n\n    //endregion\n\n    //region Feature hooks\n\n    // Called for each event during drop\n    processEventDrop() {}\n    processCrossSchedulerEventDrop() {}\n\n    // Called before event drag starts\n    beforeEventDragStart() {}\n\n    // Called after event drag starts\n    afterEventDragStart() {}\n\n    // Called after aborting a drag\n    afterEventDragAbortFinalized() {}\n\n    // Called during event drag validation\n    checkEventDragValidity() {}\n\n    // Called after event resizing starts\n    afterEventResizeStart() {}\n\n    //endregion\n\n    //region Scheduler specific date mapping functions\n\n    get hasEventEditor() {\n        const {\n            eventEdit,\n            taskEdit,\n            simpleEventEdit\n        } = this.features;\n\n        return Boolean(\n            eventEdit?.enabled || taskEdit?.enabled || simpleEventEdit?.enabled\n        );\n    }\n\n    // Method is chained by event editing features. Ensure that the event is in the store.\n    editEvent(eventRecord, resourceRecord, element) {\n        const\n            me = this,\n            {\n                eventStore,\n                assignmentStore\n            } = me;\n\n        // Abort the chain if no event editing features available\n        if (!me.hasEventEditor) {\n            return false;\n        }\n\n        if (eventRecord.eventStore !== eventStore) {\n            const\n                { enableEventAnimations } = me,\n                resourceRecords           = [];\n\n            // It's only a provisional event because we are going to edit it which will\n            // allow an opportunity to cancel the add (by removing it).\n            eventRecord.isCreating = true;\n\n            let assignmentRecords = [];\n\n            if (resourceRecord) {\n                resourceRecords.push(resourceRecord);\n                assignmentRecords = assignmentStore.assignEventToResource(eventRecord, resourceRecord);\n            }\n\n            // Vetoable beforeEventAdd allows cancel of this operation\n            if (me.trigger('beforeEventAdd', { eventRecord, resourceRecords, assignmentRecords }) === false) {\n                // Remove any assignment created above, to leave store as it was\n                assignmentStore?.remove(assignmentRecords);\n\n                return false;\n            }\n\n            me.enableEventAnimations = false;\n            eventStore.add(eventRecord);\n            me.project.commitAsync().then(() => me.enableEventAnimations = enableEventAnimations);\n\n            // Element must be created synchronously, not after the project's normalizing delays.\n            me.refreshRows();\n        }\n    }\n\n    /**\n     * Creates an event on the specified date, for the specified resource which conforms to this\n     * scheduler's {@link #config-createEventOnDblClick} setting.\n     *\n     * NOTE: If the scheduler is readonly, or resource type is invalid (group header), or if `allowOverlap` is `false`\n     * and slot is already occupied - no event is created.\n     *\n     * This method may be called programmatically by application code if the `createEventOnDblClick` setting\n     * is `false`, in which case the default values for `createEventOnDblClick` will be used.\n     *\n     * If the {@link Scheduler.feature.EventEdit} feature is active, the new event\n     * will be displayed in the event editor.\n     * @param {Date} date The date to add the event at.\n     * @param {Scheduler.model.ResourceModel} resourceRecord The resource to create the event for.\n     * @category Scheduled events\n     */\n    async createEvent(startDate, resourceRecord) {\n        const\n            me                    = this,\n            {\n                enableEventAnimations,\n                features,\n                eventStore,\n                assignmentStore\n            }                     = me,\n            resourceRecords       = [resourceRecord],\n            useEventModelDefaults = me.createEventOnDblClick.useEventModelDefaults,\n            defaultDuration       = useEventModelDefaults ? eventStore.modelClass.defaultValues.duration : 1,\n            defaultDurationUnit   = useEventModelDefaults ? eventStore.modelClass.defaultValues.durationUnit : me.timeAxis.unit,\n            eventRecord           = eventStore.createRecord({\n                startDate,\n                endDate      : DateHelper.add(startDate, defaultDuration, defaultDurationUnit),\n                duration     : defaultDuration,\n                durationUnit : defaultDurationUnit,\n                name         : me.L('L{Object.newEvent}')\n            }),\n            eventEditAvailable    = Boolean(features.eventEdit?.enabled || features.taskEdit?.enabled || features.simpleEventEdit?.enabled);\n\n        if (me.readOnly || resourceRecord.isSpecialRow || (!me.allowOverlap && !me.isDateRangeAvailable(\n            eventRecord.startDate,\n            eventRecord.endDate,\n            null,\n            resourceRecord\n        ))) {\n            return;\n        }\n\n        // It's only a provisional event if there is an event edit feature available to\n        // cancel the add (by removing it). Otherwise it's a definite event creation.\n        eventRecord.isCreating = eventEditAvailable;\n\n        me.onEventCreated(eventRecord);\n\n        const assignmentRecords = assignmentStore?.assignEventToResource(eventRecord, resourceRecord);\n\n        /**\n         * Fires before an event is added. Can be triggered by schedule double click or drag create action.\n         * @event beforeEventAdd\n         * @param {Scheduler.view.Scheduler} source The Scheduler instance\n         * @param {Scheduler.model.EventModel} eventRecord The record about to be added\n         * @param {Scheduler.model.ResourceModel[]} resourceRecords Resources that the record is assigned to\n         * @param {Scheduler.model.AssignmentModel[]} assignmentRecords The assignment records\n         * @preventable\n         */\n        if (me.trigger('beforeEventAdd', { eventRecord, resourceRecords, assignmentRecords }) === false) {\n            // Remove any assignment created above, to leave store as it was\n            assignmentStore?.remove(assignmentRecords);\n\n            return;\n        }\n\n        me.enableEventAnimations = false;\n        eventStore.add(eventRecord);\n        me.project.commitAsync().then(() => me.enableEventAnimations = enableEventAnimations);\n\n        // Element must be created synchronously, not after the project's normalizing delays.\n        // Overrides the check for isEngineReady in VerticalRendering so that the newly added record\n        // will be rendered when we call refreshRows.\n        me.isCreating = true;\n        me.refreshRows();\n        me.isCreating = false;\n\n        /**\n         * Fired when a double click or drag gesture has created a new event and added it to the event store.\n         * @event eventAutoCreated\n         * @param {Scheduler.view.Scheduler} source This Scheduler.\n         * @param {Scheduler.model.EventModel} eventRecord The new event record.\n         * @param {Scheduler.model.ResourceModel} resourceRecord The resource assigned to the new event.\n         */\n        me.trigger('eventAutoCreated', {\n            eventRecord,\n            resourceRecord\n        });\n\n        if (eventEditAvailable) {\n            me.editEvent(eventRecord, resourceRecord, me.getEventElement(eventRecord));\n        }\n    }\n\n    /**\n     * Checks if a date range is allocated or not for a given resource.\n     * @param {Date} start The start date\n     * @param {Date} end The end date\n     * @param {Scheduler.model.EventModel|null} excludeEvent An event to exclude from the check (or null)\n     * @param {Scheduler.model.ResourceModel} resource The resource\n     * @returns {Boolean} True if the timespan is available for the resource\n     * @category Dates\n     */\n    isDateRangeAvailable(start, end, excludeEvent, resource) {\n        return this.eventStore.isDateRangeAvailable(start, end, excludeEvent, resource);\n    }\n    //endregion\n\n    /**\n     * Suspends UI refresh on store operations.\n     *\n     * Multiple calls to `suspendRefresh` stack up, and will require an equal number of `resumeRefresh` calls to\n     * actually resume UI refresh.\n     *\n     * @function suspendRefresh\n     * @category Rendering\n     */\n\n    /**\n     * Resumes UI refresh on store operations.\n     *\n     * Multiple calls to `suspendRefresh` stack up, and will require an equal number of `resumeRefresh` calls to\n     * actually resume UI refresh.\n     *\n     * Specify `true` as the first param to trigger a refresh if this call unblocked the refresh suspension.\n     * If the underlying project is calculating changes, the refresh will be postponed until it is done.\n     *\n     * @param {Boolean} trigger `true` to trigger a refresh, if this resume unblocks suspension\n     * @category Rendering\n     */\n    async resumeRefresh(trigger) {\n        super.resumeRefresh(false);\n\n        const me = this;\n\n        if (!me.refreshSuspended && trigger) {\n            // Do not refresh until project is in a valid state\n            if (!me.isEngineReady) {\n                // Refresh will happen because of the commit, bail out of this one after forcing rendering to consider\n                // next one a full refresh\n                me.currentOrientation.refreshAllWhenReady = true;\n                return me.project.commitAsync();\n            }\n\n            // View could've been destroyed while we waited for engine\n            if (!me.isDestroyed) {\n                // If it already is, refresh now\n                me.refreshWithTransition();\n            }\n        }\n    }\n\n    //region Appearance\n\n    // Overrides grid to take crudManager loading into account\n    toggleEmptyText() {\n        const\n            me = this;\n\n        if (me.bodyContainer) {\n            DomHelper.toggleClasses(me.bodyContainer, 'b-grid-empty', !(me.resourceStore.count > 0 || me.crudManager?.isLoading));\n        }\n    }\n\n    // Overrides Grids base implementation to return a correctly calculated height for the row. Also stores it in\n    // RowManagers height map, which is used to calculate total height etc.\n    getRowHeight(resourceRecord) {\n        if (this.isHorizontal) {\n            const height = this.currentOrientation.calculateRowHeight(resourceRecord);\n            this.rowManager.storeKnownHeight(resourceRecord.id, height);\n            return height;\n        }\n    }\n\n    // Calculates the height for specified rows. Call when changes potentially makes its height invalid\n    calculateRowHeights(resourceRecords, silent = false) {\n        // Array allowed to have nulls in it for easier code when calling this fn\n        resourceRecords.forEach(resourceRecord => resourceRecord && this.getRowHeight(resourceRecord));\n\n        if (!silent) {\n            this.rowManager.estimateTotalHeight(true);\n        }\n    }\n\n    // Calculate heights for all rows (up to the preCalculateHeightLimit)\n    calculateAllRowHeights(silent = false) {\n        const\n            { store, rowManager } = this,\n            count                 = Math.min(store.count, this.preCalculateHeightLimit);\n\n        // Allow opt out by specifying falsy value.\n        if (count) {\n            rowManager.clearKnownHeights();\n\n            for (let i = 0; i < count; i++) {\n                // This will both calculate and store the height\n                this.getRowHeight(store.getAt(i));\n            }\n\n            // Make sure height is reflected on scroller etc.\n            if (!silent) {\n                rowManager.estimateTotalHeight(true);\n            }\n        }\n    }\n\n    //endregion\n\n    //region Calendar Mode Interface\n\n    // These are all internal and match up w/CalendarMixin\n\n    /**\n     * Returns the date or ranges of included dates as an array. If only the {@link #config-startDate} is significant,\n     * the array will have that date as its only element. Otherwise, a range of dates is returned as a two-element\n     * array with `[0]` is the {@link #config-startDate} and `[1]` is the {@link #property-lastDate}.\n     * @member {Date[]}\n     * @internal\n     */\n    get dateBounds() {\n        const\n            me  = this,\n            ret = [me.startDate];\n\n        if (me.range === 'week') {\n            ret.push(me.lastDate);\n        }\n\n        return ret;\n    }\n\n    get defaultDescriptionFormat() {\n        return descriptionFormats[this.range];\n    }\n\n    /**\n     * The last day that is included in the date range. This is different than {@link #config-endDate} since that date\n     * is not inclusive. For example, an `endDate` of 2022-07-21 00:00:00 indicates that the time range ends at that\n     * time, and so 2022-07-21 is _not_ in the range. In this example, `lastDate` would be 2022-07-20 since that is the\n     * last day included in the range.\n     * @member {Date}\n     * @internal\n     */\n    get lastDate() {\n        const lastDate = this.endDate;\n\n        // endDate is \"exclusive\" because it means 00:00:00 of that day, so subtract 1\n        // to keep description consistent with human expectations.\n        return lastDate && DateHelper.add(lastDate, -1, 'day');\n    }\n\n    getEventRecord(target) {\n        target = DomHelper.getEventElement(target);\n\n        return this.resolveEventRecord(target);\n    }\n\n    getEventElement(eventRecord) {\n        return this.getElementFromEventRecord(eventRecord);\n    }\n\n    changeRange(unit) {\n        return DateHelper.normalizeUnit(unit);\n    }\n\n    updateRange(unit) {\n        if (!this.isConfiguring) {\n            const\n                currentDate = this.date,\n                newDate     = this.date = DateHelper.startOf(currentDate, unit);\n\n            // Force a span update if changing the range did not change the date\n            if (currentDate.getTime() === newDate.getTime()) {\n                this.updateDate(newDate);\n            }\n        }\n    }\n\n    changeStepUnit(unit) {\n        return DateHelper.normalizeUnit(unit);\n    }\n\n    updateDate(newDate) {\n        const\n            me    = this,\n            start = DateHelper.startOf(newDate, me.range);\n\n        me.setTimeSpan(start, DateHelper.add(start, 1, me.range));\n\n        // Cant always use newDate here in case timeAxis is filtered\n        me.visibleDate = {\n            date    : DateHelper.max(newDate, me.timeAxis.startDate),\n            block   : 'start',\n            animate : true\n        };\n\n        me.trigger('descriptionChange');\n    }\n\n    previous() {\n        this.date = DateHelper.add(this.date, -1, this.stepUnit);\n    }\n\n    next() {\n        this.date = DateHelper.add(this.date, 1, this.stepUnit);\n    }\n\n    //endregion\n\n    /**\n     * Assigns and schedules an unassigned event record (+ adds it to this Scheduler's event store unless already in it).\n     * @param {Object} config The config containing data about the event record to schedule\n     * @param {Date} config.startDate The start date\n     * @param {Scheduler.model.EventModel|EventModelConfig} config.eventRecord Event (or data for it) to assign and schedule\n     * @param {Scheduler.model.EventModel} [config.parentEventRecord] Parent event to add the event to (to nest it),\n     * only applies when using the NestedEvents feature\n     * @param {Scheduler.model.ResourceModel} config.resourceRecord Resource to assign the event to\n     * @param {HTMLElement} [config.element] The element if you are dragging an element from outside the scheduler\n     * @category Scheduled events\n     */\n    async scheduleEvent({ startDate, eventRecord, resourceRecord, element }) {\n        const me = this;\n\n        // NestedEvents has an override for this function to handle parentEventRecord\n\n        if (!me.eventStore.includes(eventRecord)) {\n            [eventRecord] = me.eventStore.add(eventRecord);\n        }\n\n        eventRecord.startDate = startDate;\n        eventRecord.assign(resourceRecord);\n\n        if (element) {\n            const eventRect = Rectangle.from(element, me.foregroundCanvas);\n\n            // Clear translate styles used by DragHelper\n            DomHelper.setTranslateXY(element, 0, 0);\n            DomHelper.setTopLeft(element, eventRect.y, eventRect.x);\n\n            DomSync.addChild(me.foregroundCanvas, element, eventRecord.assignments[0].id);\n        }\n\n        await me.project.commitAsync();\n    }\n\n    // This GridSelection override disables drag-selection in timeaxis column for scheduler\n    onSelectionDrag(event) {\n        if (event.target.classList.contains('b-timeaxis-cell')) {\n            return;\n        }\n        super.onSelectionDrag(event);\n    }\n}\n\n// Register this widget type with its Factory\nSchedulerBase.initClass();\n\n// Scheduler version is specified in TimelineBase because Gantt extends it\n"],"names":["VerticalTimeAxis","TimeAxisBase","$name","configurable","cls","sizeProperty","positionProperty","wrapText","buildHorizontalCells","me","client","stickyHeaders","featureHeaderConfigs","cellConfigs","levels","reduce","result","level","i","cells","_level$cells","push","filter","cell","start","endDate","end","startDate","map","j","role","className","headerCellCls","align","length","dataset","_objectSpread","tickIndex","index","cellId","headerPosition","globalThis","DEBUG","date","getTime","style","top","coord","height","width","minHeight","children","html","value","getHeaderDomConfigs","widgetClassList","headerFeature","syncOptions","releaseThreshold","syncIdField","size","_$name","VerticalTimeAxisColumn","Column","type","defaults","draggable","groupable","hideable","showColumnPicker","filterable","sortable","searchable","editor","enableCellContextMenu","tooltipRenderer","minWidth","resizable","cellCls","flex","alwaysClearCell","isFocusable","construct","data","arguments","view","model","grid","timeAxisViewModel","renderer","cellElement","render","getCurrentConfig","options","id","region","field","ariaLabel","cellAriaLabel","_defineProperty","ColumnStore","registerColumnType","HorizontalLayout","Base","defaultConfig","nbrOfBandsByResource","bandIndexToPxConvertFn","bandIndexToPxConvertThisObj","clearCache","resource","applyLayout","events","layoutEventsInBands","Error","HorizontalLayoutPack","mixin","PackMixin","packEventsInBands","event","slot","slotSize","forEach","Object","assign","call","eventRecord","resourceRecord","HorizontalLayoutStack","heightRun","verticalPosition","eventIndex","splice","findClosestSuccessor","eventRenderData","endMS","group","isMilestone","duration","minGap","Infinity","closest","gap","l","startMS","grouped","ResourceTimeRangesBase","InstancePlugin","AttachToProjectMixin","pluginConfig","chain","override","noFeatureElementsInAxis","timeAxis","needsRefresh","store","storage","values","some","t","isTimeSpanInAxis","doDisable","disable","isPainted","refresh","updateTabIndex","isConfiguring","getEventsToRender","onEventDataGenerated","renderData","iconCls","shouldInclude","isVertical","columnWidth","resourceColumnWidth","fillSize","wrapperCls","rangeCls","timeRangeColor","eventContent","text","name","tabIndex","String","unshift","tag","toString","eventId","generateElementId","record","domId","resolveResourceTimeRangeRecord","rangeElement","_rangeElement$closest","elementData","getElementFromResourceTimeRangeRecord","foregroundCanvas","syncIdMap","resolveResourceRecord","_this$resolveResource","overridden","target","onStoreChange","action","onInternalEventStoreChange","featureClass","DependencyEditor","Popup","items","handleSelector","axisLock","processWidgetConfig","widget","dependencyEditFeature","ref","showLagField","showDeleteButton","afterShow","args","deleteButton","widgetMap","hidden","isPartOfStore","onInternalKeyDown","trigger","DependencyEdit","autoClose","saveAndCloseOnEnter","triggerEvent","dependencyRecord","editorConfig","title","localeClass","closable","fromNameField","weight","label","toNameField","typeField","editable","valueField","displayField","localizeDisplayFields","buildItems","dialog","parent","keys","DependencyModel","Type","L","localeKey","lagField","allowNegative","bbar","foo","saveButton","color","cancelButton","config","dependencyEdit","features","dependencies","clientListenersDetacher","ion","onActivateEditor","thisObj","doDestroy","_this$editor","destroy","changeEditorConfig","ObjectHelper","owner","autoShow","anchor","scrollAction","clippedBy","timeAxisSubGridElement","bodyContainer","constrainTo","isValid","every","eachWidget","onBeforeSave","onAfterSave","updateRecord","lag","lagUnit","unit","magnitude","fromSide","toSide","cleanupProperties","set","onPopupKeyDown","key","tagName","toLowerCase","preventDefault","onSaveClick","save","hide","onDeleteClick","deleteDependency","onCancelClick","internalShowEditor","showPoint","lastPointerDownCoordinate","getEditor","loadRecord","center","Rectangle","from","element","x","y","showBy","editDependency","readOnly","_me$saveButton","_me$deleteButton","_me$cancelButton","new","rootElement","internalListeners","keydown","console","warn","click","dependency","fromEvent","toEvent","Duration","dependencyStore","_client$project","stores","add","project","commitAsync","_client$project2","containsFocus","revertFocus","remove","disabled","clientX","clientY","GridFeatureManager","registerFeature","ScheduleContext","Delayable","listeners","datachange","timeaxisviewmodelupdate","presetchange","timelineContextChange","schedulecontextmenu","useBackgroundCanvas","rowManager","rowheight","changeTriggerEvent","_element","DomHelper","createElement","backgroundCanvas","onTimelineContextChange","context","onScheduleContextGesture","onTimeAxisViewModelUpdate","source","_this$context","includes","tick","syncContextElement","clearContext","updateContext","oldContext","enabled","row","rows","getRowFor","tickStartDate","tickEndDate","currentOrientation","getTimeSpanRenderData","startDateMS","endDateMS","resourceWidth","display","setTranslateXY","left","innerHTML","callback","$config","equal","c1","c2","tickParentIndex","EventCopyPaste","constructor","scheduler","eventclick","onEventClick","scheduleclick","onScheduleClick","projectChange","clearClipboard","_cellClickedContext","eventData","assignmentRecord","meta","isCut","isActionAvailable","keyCombination","_this$client$focusedC","cellEdit","getSelection","isEditing","Boolean","focusedCell","isSpecialRow","copy","copyEvents","cut","undefined","paste","pasteEvents","records","selectedAssignments","entityName","assignmentRecords","slice","isEventModel","r","assignments","flat","a","eventRecords","_isCut","clipboard","assignmentStore","assignment","refreshWithTransition","$original","toFocus","pastedEvents","Set","targetResourceRecord","targetDate","has","eventStore","usesSingleAssignment","copyPasteAction","generateNewName","last","resources","newAssignmentRecord","constraintDate","detacher","renderEvent","navigateTo","scrollIntoView","populateEventMenu","copyEvent","icon","onItem","concat","rec","cutEvent","populateScheduleMenu","pasteEvent","resourceStore","count","originalName","nameField","counter","findRecord","keyMap","EventDrag","DragBase","constrainDragToResource","constrainDragToTimeSlot","externalDropTargetSelector","validatorFn","validatorFnThisObj","unifiedDrag","snapToPosition","copyKey","copyMode","mode","capitalizedEventName","afterConstruct","changeMode","dragData","isRecurring","updateMode","setCopying","setMoving","eventBarCopies","el","isConnected","classList","grabbedParent","appendChild","retainElement","onAfterDragStart","handleKeyDownOrMove","keyEventDetacher","EventHelper","on","getRootElement","keyup","handleKeyUp","onDragReset","_this$keyEventDetache","onDrop","_this$dragData$eventB","getDraggableElement","drag","targetSelector","resolveEventRecord","eventElement","isElementDraggable","_client","matches","isDraggable","prevented","getTriggerParams","browserEvent","domEvent","triggerBeforeEventDrag","eventType","triggerEventDrag","newResource","triggerDragStart","navigator","skipNextClick","triggerDragAbort","triggerDragAbortFinalized","triggerAfterDrop","valid","currentOverClient","needRefresh","initialAssignmentsState","find","_me$dragData$assignme","resourceId","setTimeout","specialKeyFromEventKey","isValidDrop","sourceRecord","draggedEntities","constrainDragToTimeline","checkDragValidity","_dragData$newResource","allowOverlap","isDateRangeAvailable","message","_scheduler$checkEvent","_scheduler$checkEvent2","updateRecords","fromScheduler","toScheduler","copyKeyPressed","externalDropTarget","suspendAutoCommit","updateAssignments","resumeAutoCommit","isCopy","targetEventRecord","isCrossScheduler","fromAssignmentStore","fromEventStore","toAssignmentStore","toEventStore","fromResourceStore","toResourceStore","timeDiff","fromResource","toResource","useSingleAssignment","event1Date","adjustStartDate","eventsToAdd","eventsToRemove","assignmentsToAdd","assignmentsToRemove","eventsToCheck","eventsToBatch","resourcesInStore","getAllDataRecords","suspendRefresh","updated","updatedEvent","indexDiff","indexOf","constainDragToResource","isGrouped","draggedEvent","eventBar","eventBarEls","instanceMeta","hasTemporaryDragElement","transient","addedEvents","copiedAssignmentsMap","originalAssignment","draggedAssignment","isOccurrenceAssignment","initialState","originalEventRecord","originalStartDate","originalResourceRecord","newStartDate","keepEvent","newAssignment","getById","createRecord","calendar","reassignedFrom","_newResource","newIndex","Math","max","min","getAt","getNext","getPrevious","draggedEventResourceIndex","isEvent","isOccurrence","ev","DateHelper","isEqual","isBatchUpdating","endBatch","processEventDrop","relatedElements","entries","originalId","cloneRecord","originalDraggedEvent","inTimeAxis","isInTimeAxis","DomSync","removeChild","parentElement","isRoot","elRect","setTopLeft","addChild","processCrossSchedulerEventDrop","added","beginBatch","Promise","all","resumeRefresh","fillTicks","lastDomConfig","selectedEvents","getProductDragContext","previousResolvedResource","previousTargetEventRecord","resolveResource","isOverNewResource","dirty","proxyElements","getMinimalDragData","info","getElementFromContext","resolveAssignmentRecord","isAssignmentSelected","startEvent","ctrlKey","apply","getRelatedRecords","setupProductDragData","_dateConstraints","dateConstraints","_me$getDateConstraint","getDateConstraints","constrainRectangle","getConstrainingRectangle","eventRegion","setupConstraints","snapPixelAmount","eventBarEl","getElementFromAssignmentRecord","addTemporaryDragElement","createProxy","_scheduler$getDateCon","externalDateConstraints","minDate","maxDate","dateRange","getScheduleRegion","getDragData","selectedRecord","getCoordinate","isHorizontal","milestoneLayoutMode","milestoneAlign","offsetWidth","offsetHeight","dragProxy","pageRect","localRect","lx","ly","eventTarget","getMouseMoveEventTarget","contains","getRowAt","dataIndex","querySelector","roundDate","Date","snapRelativeToEventStartDate","getRecordElement","getProxyElement","isDragging","EventDragCreate","DragCreateBase","updateLockLayout","lock","dragActiveCls","handleBeforeDragCreate","isWorkingTime","isSchedulerPro","ignoreResourceCalendar","mousedownDate","dragStart","_client$onEventCreate","enableEventAnimations","createEventRecord","resourceRecords","diff","durationUnit","isCreating","isDragCreating","taskEdit","doCancel","assignEventToResource","lockLayout","excludeFromLayout","onEventCreated","addAsync","then","refreshRows","itemElement","getElementFromEventRecord","isInView","scrollable","animate","edgeOffset","barMargin","checkValidity","dragging","createValidatorFn","isRowEmpty","getEventsForResource","triggerBeforeFinalize","dimension","weekStartDay","draggingEnd","eventConfig","modelClass","fieldMap","defaultValue","floor","resolution","ceil","isGanttProjectMixin","constraintType","finalizeDragCreate","hasEventEditor","getTipHtml","tip","toggle","tooNarrow","onAborted","_this$store$unassignE","_this$store","unassignEventFromResource","EventTooltip","TooltipBase","template","StringHelper","xss","startClockHtml","endClockHtml","monitorRecordUpdate","onPaint","firstPaint","configuredOffset","offset","tooltip","beforeShow","zeroMargins","StickyEvents","toUpdate","scroll","horizontalScroll","prio","stickyContents","syncEventContentPosition","updateStyles","onSchedulerScroll","verticalSyncAllEventsContentPosition","onHorizontalScroll","subGrid","timeAxisSubGrid","contentEl","applyStyle","clear","resourceMap","eventsData","elementConfig","isResourceTimeRange","duringGeneration","useEventBuffer","bufferAfterWidth","bufferBeforeWidth","scrollPosition","wrapperEl","getChild","parseStyle","contentSize","contentWidth","justify","parentNode","getStyleValue","c","eventStart","eventEnd","edgeSizes","getEventContentMargins","maxOffset","Number","MAX_SAFE_INTEGER","transform","stuck","getEdgeSize","TimeRanges","AbstractTimeRanges","_this$storeDetacher","storeDetacher","timeRanges","_timeRanges","recurringEvents","flatMap","timeSpan","getOccurrencesForDateRange","currentTimeLine","attachToProject","_me$projectTimeZoneCh","projectTimeZoneChangeDetacher","showCurrentTimeLine","_me$client$project","timeZoneChange","updateCurrentTimeLine","initCurrentTimeLine","currentTimeInterval","setInterval","currentTimeLineUpdateInterval","_me$project","_inTimeZone","timeZone","setLocalDate","originalData","format","currentDateFormat","renderRanges","hideCurrentTimeLine","clearInterval","updateShowCurrentTimeLine","show","populateTimeAxisHeaderMenu","column","checked","onToggle","attachToStore","change","timeRangeStore","updateStore","_timeRangesExposed","attachToTimeRangeStore","resolveTimeRangeRecord","baseSelector","isVisible","runWithTransition","refreshSuspended","onDragStart","rangeBodyEl","getBodyElementByRecord","originRangeX","getTranslateX","originRangeY","getTranslateY","showTip","onInvalidDrop","box","newStart","getDateFromCoordinate","getStart","rtl","wasModified","setStartDate","destroyTip","onResizeStart","onResizeDrag","edge","setTranslateY","newY","newHeight","setTranslateX","newX","newWidth","onResize","startPos","endPos","getEnd","isStart","newEnd","setEndDate","onInvalidResize","resize","reset","TimeSpan","Target","SchedulerDom","returnWrapper","_this$foregroundCanva","_wrapper","_wrapper$syncIdMap","wrapper","hasLinks","link","$links","_this$foregroundCanva2","_eventRecord$resource","_this$foregroundCanva3","getAssignmentForEventAndResource","getElementsFromEventRecord","elementOrEvent","xy","resolveRowRecord","_elementOrEvent","Event","eventSelector","assignmentId","resolveTimeSpanRecord","getOccurrence","isRowVisible","widgetClass","SchedulerDomEvents","getTimeSpanMouseEventParams","getScheduleMouseEventParams","cellData","onElementKeyDown","scheduledEventName","onElementKeyUp","SchedulerEventRendering","milestoneTextPosition","milestoneCharWidth","eventLayout","overlappingEventSorter","horizontalEventSorterFn","resourceMargin","useInitialAnimation","eventRenderer","eventRendererThisObj","eventBarTextField","eventBodyTemplate","horizontalLayoutPackClass","horizontalLayoutStackClass","resourceColumns","resourceImagePath","defaultResourceImageName","resourceImageExtension","isFirstRender","initialAnimationDuration","narrowEventWidth","internalEventLayout","eventPositionMode","eventScrollMode","changeEventLayout","changeInternalEventLayout","getEventLayout","updateInternalEventLayout","oldEventLayout","changeHorizontalEventSorterFn","fn","VersionHelper","deprecate","updateOverlappingEventSorter","_value","isModel","getEventLayoutHandler","horizontal","layouts","horizontalStack","layoutEventVerticallyStack","horizontalPack","layoutEventVerticallyPack","_this$timeAxisColumn","timeAxisColumn","_resourceColumns","_this$resourceColumns","repaintEventsForResource","repaintEvent","getResourcesForEvent","getResourceMargin","_resourceRecord$resou","getBarMargin","_resourceRecord$barMa","getResourceHeight","_resourceRecord$rowHe","rowHeight","getResourceWidth","_resourceRecord$colum","getAppliedResourceHeight","_row$maxRequestedHeig","getRowById","maxRequestedHeight","getResourceLayoutSettings","parentEventRecord","contentHeight","getEventStyle","eventStyle","getEventColor","_eventRecord$event","_eventRecord$parent","eventColor","generateRenderData","includeOutside","viewport","eventResize","$originalId","taskBarFeature","_renderData$iconCls2","isResizable","startsOutsideView","endsOutsideView","leftHandle","rightHandle","topHandle","bottomHandle","isDirty","hasPersistableChanges","clsListObj","generatedIdCls","hasGeneratedId","dirtyCls","committingCls","isCommitting","endsOutsideViewCls","startsOutsideViewCls","clippedStart","clippedEnd","wrapperClsListObj","eventCls","isParent","isLinked","clsList","DomClassList","internalCls","clone","wrapperClsList","wrapperStyle","isWrap","selected","fixedEventCls","eventSelectedCls","eventAssignHighlightCls","isEventSelected","inactive","hasAnimation","bryntum","noAnimations","scrollTop","tickSize","delayMS","maxDelay","initialAnimationDetacher","delegate","once","animationend","delay","cancelOutstanding","expires","alt","get","eventBarIconClsField","rowId","childContent","milestoneLabelConfig","rendererValue","encodeHtml","Array","isArray","_renderData$iconCls","isHtml","class","isNamedColor","colorProp","wrapperChildren","changeUseInitialAnimation","updateUseInitialAnimation","old","BrowserHelper","isFirefox","restartInitialAnimation","initialAnimation","_me$initialAnimationD","stopInitialAnimation","getMilestoneLabelWidth","milestoneMeasureElement","fontSize","firstElementChild","bounds","milestoneWidth","updateMilestoneLayoutMode","alwaysOutside","updateMilestoneTextPosition","position","updateMilestoneAlign","updateMilestoneCharWidth","SchedulerStores","ProjectConsumer","projectStores","dataName","batchedUpdate","changePreCommit","commitStart","commit","exception","idchange","beforeLoad","beforeRemove","calendarManagerStore","resourceTimeRangeStore","startParamName","endParamName","passStartEndParameters","crudManagerClass","crudManager","updateProject","oldProject","detachListeners","onProjectRefresh","isInitialCommit","refreshAfterProjectRefresh","navigateToAfterRefresh","whenVisible","changeCrudManager","isCrudManager","_crudManager","bindCrudManager","_store","Store","refreshFromRowOnStoreAdd","isExpand","suspended","onStoreAdd","calculateRowHeights","onStoreUpdateRecord","changes","ignoreCount","updateResourceStore","metaMapId","usesDisplayStore","onEventIdChange","params","onEventStoreIdChange","onEventStoreBatchedUpdate","listenToBatchedUpdates","_mode","isAssign","isRemovingAssignment","onEventStoreChange","onEventCommit","resourcesToRepaint","modified","prototype","onEventCommitStart","toggleCls","onEventException","removed","onAssignmentCommit","repaintEventsForAssignmentChanges","onAssignmentCommitStart","onAssignmentException","getResource","onAssignmentBeforeRemove","removingAll","moveTo","activeAssignment","GlobalEvents","lastInteractionType","next","focusWithoutScrolling","focusElement","resourceTimeRanges","applyStartEndParameters","print","getResourcesEventsPerTick","filterFn","eventsByTick","startTick","getTickFromDate","endTick","ticks","defaultScrollOptions","block","unrenderedScrollOptions","highlight","focus","SchedulerScroll","scrollEventIntoView","scrollResourceEventIntoView","scrollAssignmentIntoView","eventIsOutside","isScheduled","extendTimeAxis","currentTimeSpanRange","setTimeSpan","valueOf","tree","_me$expandTo","expandTo","scroller","forceScrollUpdate","isAvailable","scrollUnrenderedEventIntoView","scrollResourceIntoView","resourceRec","eventRec","resolve","modifiedOptions","getResourceEventBox","scrollerViewport","translate","totalSize","scrollLeft","onEventRender","targetElement","initialScrollPromise","scrollRowIntoView","SchedulerRegions","local","getResourceRegion","getRowRegion","getAssignmentEventBox","includesOutside","roughly","getItemBox","copyProperties","SchedulerState","getState","applyState","state","_state$zoomLevelOptio","propsToCopy","zoomLevelOptions","p","releaseEventActions","releaseElement","reuseElement","renderEventActions","newElement","reuseOwnElement","MAX_WIDTH","heightEventSorter","lhs","rhs","chronoFields","getStartEnd","useEnd","fieldName","_eventRecord$hasBatch","hasBatchedChange","useTickDates","isResizing","round","tickRecord","HorizontalRendering","scrollBuffer","bufferSize","verticalBufferSize","properties","Map","rowMap","eventConfigs","isFirstRefresh","toDrawOnProjectRefresh","toDrawOnDataReady","eventSorter","bind","renderDone","removeRows","translateRow","offsetRows","beforeRowHeight","init","updateVerticalBufferSize","renderRows","visibleDateRange","_visibleDateRange","getDateFromXY","roundingMethod","allowOutOfRange","translateToScheduleCoordinate","getRtlX","getDateFromPosition","getBoundingClientRect","scrollX","maxX","abs","translateToPageCoordinate","stretch","getElement","bottom","scrollWidth","taStart","taEnd","startX","getCoordinateFromDate","endX","right","rowRecord","resourceData","approx","d","rowBox","getRecordCoords","absoluteTop","layout","rowTop","rowBottom","nodeType","Element","TEXT_NODE","eventNode","getRecordFromElement","refreshAllWhenReady","clearAll","clearDom","commitFinalized","onProjectCommitFinalized","ignoreRecordChanges","clearResources","refreshResources","isCalculated","calculateAllRowHeights","topRow","reinitialize","attachToAssignmentStore","refreshPreCommit","onAssignmentStoreChange","replaced","resourceIds","_assignmentRecord$res","_assignmentRecord$res2","_assignmentRecord$res3","isRemoving","isChangingId","refreshResourcesWhenReady","oldAssignment","oldValue","refreshResourcesOnDataReady","onAssignmentStoreRefresh","attachToEventStore","onEventStoreRefresh","isEngineReady","isResourceTimeRangeStore","_eventRecord$$linkedR","renderedEventResources","$linkedResources","newEvent","allChrono","$entity","getField","dateChanges","_me$project2","propagatingLoadChanges","isWritingData","attachToResourceStore","clearLayoutCache","onResourceStoreChange","isBatchingChanges","isLeaf","onTranslateRow","refreshEventsForResource","onOffsetRows","doUpdateTimeView","calculateRowHeight","_resourceRecord$assig","layoutType","assigned","eventFilter","isFiltered","getEvents","includeOccurrences","enableRecurringEvents","sort","layoutHandler","nbrOfBandsRequired","updateFromHorizontalScroll","getConnectorStartSide","getConnectorEndSide","reLayoutEvents","onLocaleChange","onViewportResize","oldWidth","oldHeight","onRenderDone","onDragAbort","useWrapper","onRemoveRows","delete","onEarlyScroll","rendererCalled","updateFromVerticalScroll","fromScroll","returnEnd","getDateFromCoord","ignoreRTL","_viewPresetChanging","viewportCoords","range","timeView","onVisibleDateRangeChange","onBeforeRowHeightChange","ids","transition","noRows","bandIndex","topFraction","heightFraction","domConfig","syncId","innerElement","firstChild","b","startA","dataStartMS","endA","dataEndMS","startB","endB","nameA","nameB","calculateMS","startDateField","endDateField","durationMS","pxPerMinute","getSingleUnitInPixels","lengthInPx","diamondSize","diamondMS","setupRenderData","_scheduler$features$e","preamble","postamble","isProHorizontalRendering","eventBuffer","timespanStart","timespanEnd","viewStartMS","viewEndMS","durationMinutes","taskRecord","fillTimeSpanHorizontalPosition","calculateHorizontalPosition","respectExclusion","isEnd","snapToNextIncluded","isSafari","stickyEvents","excluded","fillTimeSpanVerticalPosition","managedEventSizing","includeOutsideTimeAxis","includeOutsideViewport","layoutEvents","allEvents","eventBox","layoutEventData","bandsRequired","layoutResourceEvents","resourceEvents","layoutMode","textPosition","eventElementConfig","taskFeature","zIndex","recordOrRow","force","draw","isRow","getResourceLayout","resourceLayout","invalid","getEventDOMConfigForCurrentView","labels","usesLabels","before","after","reusableDOMConfigs","eventDOMConfigs","useLeft","useRight","prevDomConfig","_scheduler$_scrollTop","visibleEventDOMConfigs","bodyTop","_scrollTop","viewTop","viewBottom","_bodyRectangle","unbuffered","unmanagedSize","sync","onlyChildren","jsx","_scheduler$processEve","_domConfig$elementDat","reactComponent","isRelease","isRender","processEventContent","_scheduler$processEve2","getActiveElement","isReusingElement","isRepaint","recordsOrIds","ArrayHelper","asArray","Model","asId","cached","child","VerticalLayout","coordProp","sizeProp","columnIndex","tplData","clusterIndex","widthFactor","leftFactor","packColumnCount","packColumnIndex","availableWidth","emptyObject","freeze","VerticalRendering","eventMap","releasedElements","resourceBufferSize","verticalLayout","columnWidthChange","initialized","coords","borderOffsetX","borderOffsetY","variableColumnWidths","totalWidth","col","allResourceRecords","_this$eventMap$get","scrollY","_this$eventMap$get2","_this$eventMap$get3","_this$eventMap$get3$r","layoutResource","startY","endY","scrollPos","clientHeight","onResourceColumnWidthChange","rendered","refreshAllResourcesWhenReady","changeCount","load","unmaskBody","firstResource","lastResource","_allResourceRecords","firstIndex","onResourceStoreRefresh","refreshFromRerender","renderResource","prevScrollX","scrollHorizontallyTo","_this$scheduler$timeA","updateElementId","releaseTimeSpanDiv","resourceRange","getResourceRange","visibleResources","first","withBuffer","viewportStart","viewportEnd","insetStart","bottomDate","bodyHeight","virtualScrollHeight","scrollHeight","topDate","isProVerticalRendering","dataStartMs","dataEndMs","cache","resourceIndex","layoutData","toLayout","eventResources","getMapPath","internalStyle","topDateMS","bottomDateMS","resourceEntry","_eventData$elementCon","isEventElement","syncConfigs","featureDomConfigs","getForegroundDomConfigs","isReleased","reusingElement","onVisibleResourceRangeChange","descriptionFormats","month","week","day","SchedulerBase","TimelineBase","CrudManagerView","Describable","EventSelection","EventNavigation","CurrentConfig","stepUnit","verticalTimeAxisColumn","createEventOnDblClick","schedulableAreaSelector","sortFeatureStore","timeCellCls","overScheduledEventClass","preCalculateHeightLimit","CrudManager","testConfig","loadMaskError","showDelay","scheduledblclick","onTimeAxisCellDblClick","onPaintOverride","_me$firstVisibleRow","_me$lastVisibleRow","firstVisibleRow","lastVisibleRow","createEvent","onVerticalScroll","vertical","onElementMouseOver","onElementMouseOut","beforeEventDragStart","afterEventDragStart","afterEventDragAbortFinalized","checkEventDragValidity","afterEventResizeStart","eventEdit","simpleEventEdit","editEvent","_features$eventEdit","_features$taskEdit","_features$simpleEvent","useEventModelDefaults","defaultDuration","defaultValues","defaultDurationUnit","eventEditAvailable","getEventElement","excludeEvent","isDestroyed","toggleEmptyText","_me$crudManager","toggleClasses","isLoading","getRowHeight","storeKnownHeight","silent","estimateTotalHeight","clearKnownHeights","dateBounds","ret","lastDate","defaultDescriptionFormat","getEventRecord","changeRange","normalizeUnit","updateRange","currentDate","newDate","startOf","updateDate","changeStepUnit","visibleDate","previous","scheduleEvent","eventRect","onSelectionDrag","timeCellSelector","resourceTimeRangeSelector","initClass"],"mappings":"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AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMmK,cAAc,SAAS9E,cAAc,CAAC;;EAEvD,WAAWhJ,KAAKA,GAAG;IACf,OAAO,gBAAgB;;EAE3B,WAAWC,YAAYA,GAAG;IACtB,OAAO;;AAEf;AACA;AACA;AACA;AACA;MACY8N,SAAS,EAAG,IAAI;;AAE5B;AACA;AACA;AACA;AACA;MACYC,mBAAmB,EAAG,IAAI;;AAEtC;AACA;AACA;AACA;AACA;MACYX,gBAAgB,EAAG,IAAI;;AAEnC;AACA;AACA;AACA;AACA;AACA;MACYY,YAAY,EAAG,oBAAoB;;AAE/C;AACA;AACA;AACA;AACA;MACYb,YAAY,EAAG,KAAK;MACpBc,gBAAgB,EAAG,IAAI;;AAEnC;AACA;AACA;AACA;MACYC,YAAY,EAAG;QACXC,KAAK,EAAS,oBAAoB;QAClCC,WAAW,EAAG,IAAI;QAClBC,QAAQ,EAAM,IAAI;QAClBvK,QAAQ,EAAG;UACPsK,WAAW,EAAG;SACjB;QACDxB,KAAK,EAAG;;AAExB;AACA;AACA;AACA;UACoB0B,aAAa,EAAG;YACZzK,IAAI,EAAK,SAAS;YAClB0K,MAAM,EAAG,GAAG;YACZC,KAAK,EAAI;WACZ;;AAErB;AACA;AACA;AACA;UACoBC,WAAW,EAAG;YACV5K,IAAI,EAAK,SAAS;YAClB0K,MAAM,EAAG,GAAG;YACZC,KAAK,EAAI;WACZ;;AAErB;AACA;AACA;AACA;UACoBE,SAAS,EAAG;YACR7K,IAAI,EAAoB,OAAO;YAC/B0K,MAAM,EAAkB,GAAG;YAC3BC,KAAK,EAAmB,SAAS;YACjCvD,IAAI,EAAoB,MAAM;YAC9B0D,QAAQ,EAAgB,KAAK;YAC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ET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACQzB,eAAe,EAAG;AACtB,CAAC;AAqTLtD,cAAc,CAAC/L,YAAY,GAAG,mBAAmB;AACjD+L,cAAc,CAAC9U,MAAM,GAAG,gBAAgB;AAAE2R,kBAAkB,CAACC,eAAe,CAACkD,cAAc,EAAE,IAAI,EAAE,WAAW,CAAC;;AClbe,MAAMgF,SAAS,SAASC,QAAQ,CAAC;;EAE5C,WAAW1d,KAAKA,GAAG;IACf,OAAO,WAAW;;EAEtB,WAAWC,YAAYA,GAAG;IACtB,OAAO;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;MACY0d,uBAAuB,EAAG,KAAK;;AAE3C;AACA;AACA;;AAEA;AACA;AACA;AACA;MACYC,uBAAuB,EAAG,KAAK;;AAE3C;AACA;AACA;MACYC,0BAA0B,EAAG,IAAI;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYC,WAAW,EAAGA,MAAM,EAAE;;AAElC;AACA;AACA;MACYC,kBAAkB,EAAG,IAAI;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYC,WAAW,EAAG,IAAI;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYC,cAAc,EAAG,IAAI;;AAEjC;AACA;AACA;AACA;AACA;MACYC,OAAO,EAAG,OAAO;;AAE7B;AACA;AACA;AACA;AACA;AACA;MACYC,QAAQ,EAAG,MAAM;;AAE7B;AACA;AACA;AACA;MACYC,IAAI,EAAG,MAAM;MACbC,oBAAoB,EAAG;KAC1B;;EAELC,cAAcA,GAAG;IACb,IAAI,CAACD,oBAAoB,GAAG,IAAI,CAACA,oBAAoB,IAAI,IAAI,CAAC7d,MAAM,CAAC6d,oBAAoB;IACzF,KAAK,CAACC,cAAc,CAAC,GAAGpZ,SAAS,CAAC;;;EAGtCqZ,UAAUA,CAACpb,KAAK,EAAE;IACd,MAAM;MAAEqb,QAAQ;MAAEL;KAAU,GAAG,IAAI;;;IAGnC,IACI,CAACA,QAAQ,KAAK,OAAO,IAAIA,QAAQ,KAAK,MAAM,IACxCA,QAAQ,KAAK,YAAY,IAAI,CAAC,IAAI,CAACxF,SAAS,CAACkD,UAAU,CAACC,oBAAoB,MAC/E,CAAC0C,QAAQ,IAAIA,QAAQ,CAACxD,YAAY,CAAC3J,KAAK,CAACuJ,CAAC,IAAI,CAACA,CAAC,CAAC6D,WAAW,CAAC,CAAC,EACjE;MACE,OAAOtb,KAAK;;;EAGpBub,UAAUA,CAACN,IAAI,EAAE;IACb,IAAI,IAAI,CAACI,QAAQ,EAAE;MACf,IAAIJ,IAAI,KAAK,MAAM,EAAE;QACjB,IAAI,CAACO,UAAU,EAAE;OACpB,MACI;QACD,IAAI,CAACC,SAAS,EAAE;;;AAGhC;AACA;AACA;AACA;AACA;AACA;MACY,IAAI,CAACpe,MAAM,CAACqN,OAAO,CAAC,qBAAqB,EAAE;QAAEuQ;OAAM,CAAC;;;EAG5DO,UAAUA,GAAG;IACT,MAAM;MAAEH;KAAU,GAAG,IAAI;IACzB,IAAI,CAACA,QAAQ,EAAE;MACX;;;IAGJ,IAAI,CAACA,QAAQ,CAACK,cAAc,CAAClV,IAAI,CAACmV,EAAE,IAAIA,EAAE,CAACC,WAAW,CAAC,EAAE;MACrDP,QAAQ,CAACK,cAAc,CAACtX,OAAO,CAACuX,EAAE,IAAI;QAClCA,EAAE,CAACE,SAAS,CAACpK,GAAG,CAAC,mBAAmB,CAAC;;QAErCkK,EAAE,CAACE,SAAS,CAAC9J,MAAM,CAAC,UAAU,CAAC;QAC/BsJ,QAAQ,CAAC/H,OAAO,CAACwI,aAAa,CAACC,WAAW,CAACJ,EAAE,CAAC;;QAE9CA,EAAE,CAACK,aAAa,GAAG,IAAI;OAC1B,CAAC;KACL,MACI;MACDX,QAAQ,CAACK,cAAc,CAACtX,OAAO,CAACuX,EAAE,IAAI;QAClCA,EAAE,CAACE,SAAS,CAAC9J,MAAM,CAAC,UAAU,CAAC;OAClC,CAAC;;;EAGV0J,SAASA,GAAG;IACR,MAAM;MAAEJ;KAAU,GAAG,IAAI;IACzB,IAAI,CAACA,QAAQ,EAAE;MACX;;IAEJA,QAAQ,CAACK,cAAc,CAACtX,OAAO,CAACuX,EAAE,IAAI;MAClCA,EAAE,CAACE,SAAS,CAACpK,GAAG,CAAC,UAAU,CAAC;KAC/B,CAAC;;;;AAIV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;EAII,IAAI+D,SAASA,GAAG;IACZ,OAAO,IAAI,CAACnY,MAAM;;;;EAItB4e,gBAAgBA,CAAChY,KAAK,EAAE;IACpB,MACI7G,EAAE,GAA0B,IAAI;MAChC;QAAEkW,OAAO,EAAG;UAAEpD;;OAAW,GAAGjM,KAAK;IACrC,KAAK,CAACgY,gBAAgB,CAAChY,KAAK,CAAC;IAC7B7G,EAAE,CAAC8e,mBAAmB,CAACjY,KAAK,CAACA,KAAK,CAAC;IACnC7G,EAAE,CAAC+e,gBAAgB,GAAGC,WAAW,CAACC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8BAA8B,CAACtR,gBAAgB,EAAE,IAAI,CAAC;;;EAG7EsT,eAAeA,CAACtT,gBAAgB,EAAE;IAC9B,IAAI,IAAI,CAACuT,UAAU,EAAE;MACjB,MAAMvqB,KAAK,GAAG,IAAI,CAACoc,QAAQ,CAAC/D,iBAAiB,CAACqK,OAAO,CAAC1L,gBAAgB,CAAC;MACvE,IAAIhX,KAAK,IAAI,CAAC,EAAE;QACZ,OAAO,IAAI,CAACoc,QAAQ,CAAC6K,aAAa,CAACjnB,KAAK,CAAC;;;IAGjD,OAAO,IAAI;;;;EAIf6pB,uBAAuBA,CAAC7kB,KAAK,EAAE;IAC3B,OAAOA,KAAK,CAACkF,MAAM;;;AAG3B;;AACAmR,SAAS,CAAC9Z,MAAM,GAAG,WAAW;AAAE2R,kBAAkB,CAACC,eAAe,CAACkI,SAAS,EAAE,IAAI,EAAE,WAAW,CAAC;AAChGnI,kBAAkB,CAACC,eAAe,CAACkI,SAAS,EAAE,KAAK,EAAE,mBAAmB,CAAC;;ACx2CzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMmP,eAAe,SAASC,cAAc,CAAC;;;;;;AA+B5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EAGI,IAAIlU,SAASA,GAAG;IACZ,OAAO,IAAI,CAACnY,MAAM;;EAEtB,IAAIgJ,KAAKA,G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YAAY,kBAGP;EAClBvoB,KAAK,EAAG,CAAC,sBAAsB;AACnC,CAAC;AAoJLuoB,YAAY,CAAC/tB,MAAM,GAAG,cAAc;AAAE2R,kBAAkB,CAACC,eAAe,CAACmc,YAAY,EAAE,IAAI,EAAE,WAAW,CAAC;AACzGpc,kBAAkB,CAACC,eAAe,CAACmc,YAAY,EAAE,KAAK,EAAE,mBAAmB,CAAC;;ACxK5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAM4C,UAAU,SAASC,kBAAkB,CAACttB,KAAK,CAACgC,oBAAoB,CAAC,CAAC;;EAEnF,WAAWjJ,KAAKA,GAAG;IACf,OAAO,YAAY;;EAEvB,WAAWsG,aAAaA,GAAG;IACvB,OAAO;MACHkD,KAAK,EAAG;KACX;;;;EA+CL+G,SAASA,GAAG;IAAA,IAAAikB,mBAAA;IACR,CAAAA,mBAAA,OAAI,CAACC,aAAa,cAAAD,mBAAA,uBAAlBA,mBAAA,CAAA9sB,IAAA,KAAI,CAAkB;IACtB,KAAK,CAAC6I,SAAS,EAAE;;;AAGzB;AACA;AACA;EACI,IAAImkB,UAAUA,GAAG;IACb,MAAMn0B,EAAE,GAAU,IAAI;IACtB,IAAI,CAACA,EAAE,CAACo0B,WAAW,EAAE;MACjB,MAAM;QAAEnrB;OAAO,GAAGjJ,EAAE;MACpB,IAAI;QAAE+Z;OAAS,GAAG9Q,KAAK;MACvB,IAAIA,KAAK,CAACorB,eAAe,EAAE;QACvB,MAAM;UACFnz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AELO,WAAW,EAAQpH,EAAE,CAACuoB,cAAc;QACpC1P,gBAAgB,EAAG7Y,EAAE,CAACga;OACzB,CAAC;;;;;;;EAOV,IAAI8gB,WAAWA,GAAG;AACtB,CAAC;;ACzPD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAAezB,MAAM,IAAI,MAAMiC,uBAAuB,UAAUjC,MAAM,IAAIvzB,IAAI,EAAE;EAC5E,WAAWrG,KAAKA,GAAG;IACf,OAAO,yBAAyB;;;EAGpC,WAAWC,YAAYA,GAAG;IACtB,OAAO;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACY67B,qBAAqB,EAAG,SAAS;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYtQ,cAAc,EAAG,QAAQ;;AAErC;AACA;AACA;AACA;AACA;AACA;MACYuQ,kBAAkB,EAAG,EAAE;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYxQ,mBAAmB,EAAG,SAAS;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYyQ,WAAW,EAAG,OAAO;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYC,sBAAsB,EAAG,IAAI;;AAEzC;AACA;AACA;AACA;MACYC,uBAAuB,EAAG,IAAI;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYC,cAAc,EAAG,IAAI;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYC,mBAAmB,EAAG,IAAI;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYC,aAAa,EAAG,IAAI;;AAEhC;AACA;AACA;AACA;MACYC,oBAAoB,EAAG,IAAI;;AAEvC;AACA;AACA;AACA;AACA;MACYC,iBAAiB,EAAG,MAAM;;AAEtC;AACA;AACA;AACA;AACA;MACYC,iBAAiB,EAAG,IAAI;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYC,yBAAyB,EAAGz1B,oBAAoB;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACY01B,0BAA0B,EAAG70B,qBAAqB;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACY80B,eAAe,EAAG,IAAI;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYC,iBAAiB,EAAG,IAAI;;AAEpC;AACA;AACA;AACA;AACA;AACA;MACYC,wBAAwB,EAAG,IAAI;;AAE3C;AACA;AACA;AACA;AACA;MACYC,sBAAsB,EAAG,MAAM;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAEYC,aAAa,EAAG,IAAI;MACpBC,wBAAwB,EAAG,IAAI;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYC,gBAAgB,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CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMC,aAAa,SAASC,YAAY,CAACh/C,KAAK,CACzDi/C,eAAe,EACfC,WAAW,EACXtsB,YAAY,EACZyB,kBAAkB,EAClB6K,eAAe,EACf0F,eAAe,EACfwC,cAAc,EACdxS,uBAAuB,EACvB+R,gBAAgB,EAChBwY,uBAAc,EACdC,wBAAe,EACfC,aAAa,CAChB,CAAC;;EAEE,WAAWtmD,KAAKA,GAAG;IACf,OAAO,eAAe;;;EAG1B,WAAW8D,IAAIA,GAAG;IACd,OAAO,eAAe;;EAE1B,WAAW7D,YAAYA,GAAG;IACtB,OAAO;;AAEf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;MACYwC,IAAI,EAAG;QACHU,KAAK,EAAG,IAAI;QACZiV,OAAO,EAAG;UACNC,KAAK,EAAG;;OAEf;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYkuC,QAAQ,EAAG,MAAM;;AAE7B;AACA;AACA;AACA;AACA;AACA;MACYtN,KAAK,EAAG,MAAM;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACY9uB,kBAAkB,EAAG,IAAI;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYq8B,sBAAsB,EAAG,EAAE;;AAEvC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYC,qBAAqB,EAAG,IAAI;;MAE5BC,uBAAuB,EAAG,sBAAsB;MAChD/qB,kBAAkB,EAAQ,OAAO;MACjCgrB,gBAAgB,EAAU;KAC7B;;EAEL,WAAWrgD,aAAaA,GAAG;IACvB,OAAO;;AAEf;AACA;AACA;AACA;MACY8X,IAAI,EAAG,YAAY;;AAE/B;AACA;AACA;AACA;AACA;AACA;MACY4jB,QAAQ,EAAG,aAAa;;AAEpC;AACA;AACA;AACA;AACA;AACA;MACY4kB,WAAW,EAAG,qBAAqB;;AAE/C;AACA;AACA;AACA;AACA;AACA;MACYC,uBAAuB,EAAG,mBAAmB;;AAEzD;AACA;AACA;AACA;AACA;MACYvkC,YAAY,EAAG,IAAI;;AAE/B;AACA;AACA;AACA;MACY+c,SAAS,EAAG,EAAE;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYynB,uBAAuB,EAAG,KAAK;MAC/B1f,gBAAgB,EAAG2f,WAAW;MAC9BC,UAAU,EAAG;QACTC,aAAa,EAAG;UACZl5C,SAAS,EAAG,EAAE;UACdm5C,SAAS,EAAG;;;KAGvB;;;;;;;;;;;;;;;;;AAqBT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA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"}