{"version":3,"file":"AvatarRendering.js","sources":["../../../../Core/lib/Core/data/stm/action/ActionBase.js","../../../../Core/lib/Core/data/stm/state/StateBase.js","../../../../Core/lib/Core/data/stm/Props.js","../../../../Core/lib/Core/data/stm/state/Registry.js","../../../../Core/lib/Core/data/stm/Helpers.js","../../../../Core/lib/Core/data/stm/state/DisabledState.js","../../../../Core/lib/Core/data/stm/Transaction.js","../../../../Core/lib/Core/data/stm/state/ReadyState.js","../../../../Core/lib/Core/data/stm/state/RecordingState.js","../../../../Core/lib/Core/data/stm/state/RestoringState.js","../../../../Core/lib/Core/data/stm/state/AutoReadyState.js","../../../../Core/lib/Core/data/stm/state/AutoRecordingState.js","../../../../Core/lib/Core/data/stm/action/UpdateAction.js","../../../../Core/lib/Core/data/stm/action/InsertChildAction.js","../../../../Core/lib/Core/data/stm/action/RemoveChildAction.js","../../../../Core/lib/Core/data/stm/action/AddAction.js","../../../../Core/lib/Core/data/stm/action/InsertAction.js","../../../../Core/lib/Core/data/stm/action/RemoveAction.js","../../../../Core/lib/Core/data/stm/action/RemoveAllAction.js","../../../../Core/lib/Core/data/stm/StateTrackingManager.js","../../../../Core/lib/Core/mixin/Finalizable.js","../../../../Core/lib/Core/util/drag/DragContext.js","../../../../Core/lib/Core/util/drag/DragProxy.js","../../../../Core/lib/Core/mixin/Draggable.js","../../../../Core/lib/Core/mixin/Droppable.js","../../../../Core/lib/Core/widget/util/AvatarRendering.js"],"sourcesContent":["/**\n * @module Core/data/stm/action/ActionBase\n */\nimport Base from '../../../Base.js';\n\nconst throwAbstractMethodCall = () => {\n    throw new Error('Abstract method call!');\n};\n\n/**\n * Base class for STM actions.\n *\n * @abstract\n */\nexport default class ActionBase extends Base {\n\n    /**\n     * Gets the type of the action (stringified class name).\n     * @readonly\n     * @property {String}\n     */\n    get type() {\n        return this.constructor.name;\n    }\n\n    /**\n     * Undoes an action\n     */\n    undo() {\n        throwAbstractMethodCall();\n    }\n\n    /**\n     * Redoes an action\n     */\n    redo() {\n        throwAbstractMethodCall();\n    }\n}\n","/**\n * @module Core/data/stm/state/StateBase\n */\nimport Base from '../../../Base.js';\n\nexport const throwAbstractMethodCall = () => {\n    throw new Error('Abstract method call!');\n};\n\nexport const throwInvalidMethodCall = () => {\n    throw new Error('Method cannot be called at this state!');\n};\n\n/**\n * Abstract class for STM states\n *\n * Every on* method should return a state for the STM which it should switch to\n * or throw an exception that this call at this state is illegal.\n *\n * Interface of this class mirrors interface of {@link Core.data.stm.StateTrackingManager}.\n *\n * @abstract\n */\nexport default class StateBase extends Base {\n\n    canUndo(stm) {\n        throwAbstractMethodCall();\n    }\n\n    canRedo(stm) {\n        throwAbstractMethodCall();\n    }\n\n    onUndo(stm) {\n        throwAbstractMethodCall();\n    }\n\n    onRedo(stm) {\n        throwAbstractMethodCall();\n    }\n\n    onStartTransaction(stm) {\n        throwAbstractMethodCall();\n    }\n\n    onStopTransaction(stm) {\n        throwAbstractMethodCall();\n    }\n\n    onStopTransactionDelayed(stm) {\n        throwAbstractMethodCall();\n    }\n\n    onRejectTransaction(stm) {\n        throwAbstractMethodCall();\n    }\n\n    onEnable(stm) {\n        throwAbstractMethodCall();\n    }\n\n    onDisable(stm) {\n        throwAbstractMethodCall();\n    }\n\n    onAutoRecordOn(stm) {\n        throwAbstractMethodCall();\n    }\n\n    onAutoRecordOff(stm) {\n        throwAbstractMethodCall();\n    }\n\n    onResetQueue(stm) {\n        throwAbstractMethodCall();\n    }\n\n    onModelUpdate(stm) {\n        throwAbstractMethodCall();\n    }\n\n    onStoreModelAdd(stm) {\n        throwAbstractMethodCall();\n    }\n\n    onStoreModelInsert(stm) {\n        throwAbstractMethodCall();\n    }\n\n    onStoreModelRemove(stm) {\n        throwAbstractMethodCall();\n    }\n\n    onStoreModelRemoveAll(stm) {\n        throwAbstractMethodCall();\n    }\n\n    onModelInsertChild(stm) {\n        throwAbstractMethodCall();\n    }\n\n    onModelRemoveChild(stm) {\n        throwAbstractMethodCall();\n    }\n}\n","/**\n * @module Core/data/stm/Props.js\n * @internal\n */\n\nexport const STATE_PROP             = Symbol('STATE_PROP');\nexport const STORES_PROP            = Symbol('STORES_PROP');\nexport const QUEUE_PROP             = Symbol('QUEUE_PROP');\nexport const POS_PROP               = Symbol('POS_PROP');\nexport const TRANSACTION_PROP       = Symbol('TRANSACTION_PROP');\nexport const TRANSACTION_TIMER_PROP = Symbol('TRANSACTION_TIMER_PROP');\nexport const AUTO_RECORD_PROP       = Symbol('AUTO_RECORD_PROP');\nexport const PROPS                  = Object.freeze([\n    STATE_PROP,\n    STORES_PROP,\n    QUEUE_PROP,\n    POS_PROP,\n    TRANSACTION_PROP,\n    TRANSACTION_TIMER_PROP,\n    AUTO_RECORD_PROP\n]);\n","import StateBase from './StateBase.js';\n\n/**\n * @module Core/data/stm/state/Registry\n *\n * Provides map of registered STM states.\n *\n * Needed to remove states circular dependency.\n *\n * @internal\n */\nconst registry = new Map();\n\n/**\n * Registers STM state class with the given name.\n *\n * @private\n *\n * @param {String} name\n * @param {Core.data.stm.state.StateBase} state\n */\nexport const registerStmState = (name, state) => {\n    //<debug>\n    console.assert(\n        state instanceof StateBase,\n        `Can't register STM state ${name}, invalid state class provided!`\n    );\n    //</debug>\n\n    registry.set(name, state);\n};\n\n/**\n * Resolves STM state class with the given name.\n *\n * @private\n *\n * @param {String} name\n * @returns {Core.data.stm.state.StateBase} state\n */\nexport const resolveStmState = (state) => {\n    if (typeof state === 'string') {\n        state = registry.get(state);\n    }\n\n    //<debug>\n    console.assert(\n        state instanceof StateBase,\n        `Can't resolve STM state ${state}, state class hasn't been registered!`\n    );\n    //</debug>\n\n    return state;\n};\n\n// UMD/module compatible export\n// NOTE: the most compatible way of exporting is:\n//       import registry from './Registry.js';\n//       { registerStmState, resolveStmState } = registry;\n//          or\n//       registry.registerStmState(...);\nexport default {\n    registerStmState,\n    resolveStmState\n};\n","import { QUEUE_PROP, POS_PROP } from './Props.js';\n\nexport const resetQueue = (stm, options) => {\n    const { undo, redo } = options;\n\n    let newProps;\n\n    if (undo && !redo) {\n        newProps = {\n            [QUEUE_PROP] : stm[QUEUE_PROP].slice(stm.position),\n            [POS_PROP]   : 0\n        };\n    }\n    else if (redo && !undo) {\n        newProps = {\n            [QUEUE_PROP] : stm[QUEUE_PROP].slice(0, stm.position)\n        };\n    }\n    else {\n        newProps = {\n            [QUEUE_PROP] : [],\n            [POS_PROP]   : 0\n        };\n    };\n\n    return [\n        newProps,\n        () => {\n            stm.notifyStoresAboutQueueReset(options);\n        }\n    ];\n};\n","/**\n * @module Core/data/stm/state/DisabledState\n */\nimport StateBase, { throwInvalidMethodCall } from './StateBase.js';\nimport { AUTO_RECORD_PROP } from '../Props.js';\nimport Registry from './Registry.js';\nimport { resetQueue } from '../Helpers.js';\n\n/**\n * STM disabled state class.\n *\n * @internal\n */\nexport class DisabledStateClass extends StateBase {\n\n    canUndo() {\n        return false;\n    }\n\n    canRedo() {\n        return false;\n    }\n\n    onUndo() {\n        throwInvalidMethodCall();\n    }\n\n    onRedo() {\n        throwInvalidMethodCall();\n    }\n\n    onEnable(stm) {\n        return stm.autoRecord ? 'autoreadystate' : 'readystate';\n    }\n\n    onDisable() {\n        throwInvalidMethodCall();\n    }\n\n    onAutoRecordOn() {\n        return {\n            [AUTO_RECORD_PROP] : true\n        };\n    }\n\n    onAutoRecordOff() {\n        return {\n            [AUTO_RECORD_PROP] : false\n        };\n    }\n\n    onStartTransaction() {\n        throwInvalidMethodCall();\n    }\n\n    onStopTransaction()  {\n        throwInvalidMethodCall();\n    }\n\n    onStopTransactionDelayed() {\n        throwInvalidMethodCall();\n    }\n\n    onRejectTransaction() {\n        throwInvalidMethodCall();\n    }\n\n    onResetQueue(stm, options) {\n        return resetQueue(stm, options);\n    }\n\n    onModelUpdate()      {}\n    onModelInsertChild() {}\n    onModelRemoveChild() {}\n    onStoreModelAdd()    {}\n    onStoreModelInsert() {}\n    onStoreModelRemove() {}\n    onStoreRemoveAll()   {}\n}\n\n/**\n * STM disabled state.\n *\n * @internal\n */\nconst DisabledState = new DisabledStateClass();\nexport default DisabledState;\n\nRegistry.registerStmState('disabledstate', DisabledState);\n","/**\n * @module Core/data/stm/Transaction\n */\nimport Base from '../../Base.js';\n\nconst ACTION_QUEUE_PROP = Symbol('ACTION_QUEUE_PROP');\n\n/**\n * STM transaction class, holds list of actions constituting a transaction.\n *\n * A transaction can be undone and redone. Upon undo all the actions being held\n * are undone in reverse order. Upon redo all the actions being held are redone\n * in forward order.\n */\nexport default class Transaction extends Base {\n\n    get defaultConfig() {\n        return {\n            /**\n             * Transaction title\n             *\n             * @config {String}\n             */\n            title : null\n        };\n    }\n\n    construct(...args) {\n        this[ACTION_QUEUE_PROP] = [];\n\n        super.construct(...args);\n    }\n\n    /**\n     * Gets transaction's actions queue\n     *\n     * @property {Core.data.stm.action.ActionBase[]}\n     */\n    get queue() {\n        return this[ACTION_QUEUE_PROP].slice(0);\n    }\n\n    /**\n     * Gets transaction's actions queue length\n     *\n     * @property {Number}\n     */\n    get length() {\n        return this[ACTION_QUEUE_PROP].length;\n    }\n\n    /**\n     * Adds an action to the transaction.\n     *\n     * @param {Core.data.stm.action.ActionBase|Object} action\n     */\n    addAction(action) {\n        //<debug>\n        console.assert(\n            action && typeof action.undo == 'function' && typeof action.redo == 'function',\n            \"Can't add action to a STM transaction, action must have `undo` and `redo` methods, inheriting from `ActionBase` might help!\"\n        );\n        //</debug>\n\n        this[ACTION_QUEUE_PROP].push(action);\n    }\n\n    /**\n     * Undoes actions held\n     */\n    undo() {\n        const queue = this[ACTION_QUEUE_PROP];\n\n        for (let i = queue.length - 1; i >= 0; --i) {\n            queue[i].undo();\n        }\n    }\n\n    /**\n     * Redoes actions held\n     */\n    redo() {\n        const queue = this[ACTION_QUEUE_PROP];\n\n        for (let i = 0, len = queue.length; i < len; ++i) {\n            queue[i].redo();\n        }\n    }\n}\n","/**\n * @module Core/data/stm/state/ReadyState\n */\nimport StateBase, { throwInvalidMethodCall } from './StateBase.js';\nimport Transaction from '../Transaction.js';\nimport { STATE_PROP, QUEUE_PROP, POS_PROP, TRANSACTION_PROP, AUTO_RECORD_PROP } from '../Props.js';\nimport Registry from './Registry.js';\nimport { resetQueue } from '../Helpers.js';\n\n/**\n * STM ready state class.\n *\n * @internal\n */\nexport class ReadyStateClass extends StateBase {\n\n    canUndo(stm) {\n        //      v\n        // |*|*|\n        return 0 < stm.position && stm.position <= stm.length;\n    }\n\n    canRedo(stm) {\n        //  v\n        // |*|*|\n        return 0 <= stm.position && stm.position < stm.length;\n    }\n\n    onUndo(stm, steps) {\n        let curPos = stm.position;\n\n        const\n            queue  = stm[QUEUE_PROP],\n            newPos = Math.max(0, curPos - steps),\n            next = () => {\n                stm.notifyStoresAboutStateRestoringStart();\n\n                const undoneTransactions = [];\n                while (curPos !== newPos) {\n                    const transaction = queue[--curPos];\n                    transaction.undo();\n                    undoneTransactions.push(transaction);\n                }\n\n                return [stm.autoRecord ? 'autoreadystate' : 'readystate', () => {\n                    stm.notifyStoresAboutStateRestoringStop({ cause : 'undo', transactions : undoneTransactions });\n                }];\n            };\n\n        return [{\n            [STATE_PROP] : 'restoringstate',\n            [POS_PROP]   : newPos\n        }, next];\n    }\n\n    onRedo(stm, steps) {\n        let curPos = stm.position;\n\n        const\n            queue  = stm[QUEUE_PROP],\n            newPos = Math.min(queue.length, curPos + steps);\n\n        const next = () => {\n            stm.notifyStoresAboutStateRestoringStart();\n\n            const redoneTransactions = [];\n            do {\n                const transaction = queue[curPos++];\n                transaction.redo();\n                redoneTransactions.push(transaction);\n            }\n            while (curPos !== newPos);\n\n            return [stm.autoRecord ? 'autoreadystate' : 'readystate', () => {\n                stm.notifyStoresAboutStateRestoringStop({ cause : 'redo', transactions : redoneTransactions });\n            }];\n        };\n\n        return [{\n            [STATE_PROP] : 'restoringstate',\n            [POS_PROP]   : newPos\n        }, next];\n    }\n\n    onEnable() {\n        throwInvalidMethodCall();\n    }\n\n    onDisable() {\n        return 'disabledstate';\n    }\n\n    onAutoRecordOn() {\n        return {\n            [STATE_PROP]       : 'autoreadystate',\n            [AUTO_RECORD_PROP] : true\n        };\n    }\n\n    onAutoRecordOff() {\n        throwInvalidMethodCall();\n    }\n\n    onStartTransaction(stm, title) {\n        const transaction = new Transaction({ title : title });\n\n        return [{\n            [STATE_PROP]       : 'recordingstate',\n            [TRANSACTION_PROP] : transaction\n        }, () => {\n            stm.notifyStoresAboutStateRecordingStart(transaction);\n        }];\n    }\n\n    onStopTransaction() {\n        throwInvalidMethodCall();\n    }\n\n    onStopTransactionDelayed() {\n        throwInvalidMethodCall();\n    }\n\n    onRejectTransaction() {\n        throwInvalidMethodCall();\n    }\n\n    onResetQueue(stm, options) {\n        return resetQueue(stm, options);\n    }\n\n    onModelUpdate()      {}\n    onModelInsertChild() {}\n    onModelRemoveChild() {}\n    onStoreModelAdd()    {}\n    onStoreModelInsert() {}\n    onStoreModelRemove() {}\n    onStoreRemoveAll()   {}\n}\n\n/**\n * STM ready state.\n *\n * @internal\n */\nconst ReadyState = new ReadyStateClass();\nexport default ReadyState;\n\nRegistry.registerStmState('readystate', ReadyState);\n","/**\n * @module Core/data/stm/state/RecordingState\n */\nimport StateBase, { throwInvalidMethodCall } from './StateBase.js';\nimport { STATE_PROP, TRANSACTION_PROP, QUEUE_PROP, POS_PROP, AUTO_RECORD_PROP } from '../Props.js';\nimport Registry from './Registry.js';\nimport { resetQueue } from '../Helpers.js';\n\n/**\n * STM recording state class.\n *\n * @internal\n */\nexport class RecordingStateClass extends StateBase {\n\n    canUndo() {\n        return false;\n    }\n\n    canRedo() {\n        return false;\n    }\n\n    onEnable() {}\n\n    onDisable(stm) {\n        const transaction = stm[TRANSACTION_PROP];\n\n        stm.notifyStoresAboutStateRecordingStop(transaction, { disabled : true });\n\n        return {\n            [STATE_PROP]       : 'disabledstate',\n            [TRANSACTION_PROP] : null\n        };\n    }\n\n    onAutoRecordOn(stm) {\n        return [{\n            [STATE_PROP]       : 'autorecordingstate',\n            [AUTO_RECORD_PROP] : true\n        }, () => {\n            stm.stopTransactionDelayed();\n        }];\n    }\n\n    onAutoRecordOff() {\n        throwInvalidMethodCall();\n    }\n\n    onStartTransaction() {\n        throwInvalidMethodCall();\n    }\n\n    onStopTransaction(stm, title) {\n        const\n            transaction = stm[TRANSACTION_PROP],\n            queue       = stm[QUEUE_PROP];\n\n        let position = stm[POS_PROP];\n\n        if (transaction.length) {\n\n            if (!transaction.title && !title && stm.getTransactionTitle) {\n                transaction.title = stm.getTransactionTitle(transaction);\n            }\n            else if (title) {\n                transaction.title = title;\n            }\n\n            queue[position] = transaction;\n            queue.length    = ++position;\n        }\n\n        return [{\n            [STATE_PROP]       : 'readystate',\n            [POS_PROP]         : position,\n            [TRANSACTION_PROP] : null\n        }, () => {\n            stm.notifyStoresAboutStateRecordingStop(transaction, { stop : true });\n        }];\n    }\n\n    onRejectTransaction(stm) {\n        const transaction = stm[TRANSACTION_PROP];\n\n        return [{\n            [STATE_PROP]       : 'restoringstate',\n            [TRANSACTION_PROP] : null\n        }, () => {\n\n            if (transaction.length) {\n                transaction.undo();\n            }\n\n            return [\n                'readystate',\n                () => {\n                    stm.notifyStoresAboutStateRecordingStop(transaction, { rejected : true });\n                }\n            ];\n        }];\n    }\n\n    onStopTransactionDelayed() {\n        throwInvalidMethodCall();\n    }\n\n    onResetQueue(stm, options) {\n        return resetQueue(stm, options);\n    }\n\n    onModelUpdate(stm, model, newData, oldData, isInitialUserAction) {\n        const transaction = stm[TRANSACTION_PROP];\n        transaction.addAction(stm.makeModelUpdateAction(model, newData, oldData, isInitialUserAction));\n    }\n\n    onModelInsertChild(stm, parentModel, index, childModel, previousParent, previousIndex) {\n        const transaction = stm[TRANSACTION_PROP];\n        transaction.addAction(stm.makeModelInsertChildAction(parentModel, index, childModel, previousParent, previousIndex));\n    }\n\n    onModelRemoveChild(stm, parentModel, childModels, context) {\n        const transaction = stm[TRANSACTION_PROP];\n        transaction.addAction(stm.makeModelRemoveChildAction(parentModel, childModels, context));\n    }\n\n    onStoreModelAdd(stm, store, models, silent)    {\n        const transaction = stm[TRANSACTION_PROP];\n        transaction.addAction(stm.makeStoreModelAddAction(store, models, silent));\n    }\n\n    onStoreModelInsert(stm, store, index, models, context, silent) {\n        const transaction = stm[TRANSACTION_PROP];\n        transaction.addAction(stm.makeStoreModelInsertAction(store, index, models, context, silent));\n    }\n\n    onStoreModelRemove(stm, store, models, context, silent) {\n        const transaction = stm[TRANSACTION_PROP];\n        transaction.addAction(stm.makeStoreModelRemoveAction(store, models, context, silent));\n    }\n\n    onStoreRemoveAll(stm, store, allRecords, silent)   {\n        const transaction = stm[TRANSACTION_PROP];\n        transaction.addAction(stm.makeStoreRemoveAllAction(store, allRecords, silent));\n    }\n}\n\n/**\n * STM recording state.\n *\n * @internal\n */\nconst RecordingState = new RecordingStateClass();\nexport default RecordingState;\n\nRegistry.registerStmState('recordingstate', RecordingState);\n","/**\n * @module Core/data/stm/state/RestoringState\n */\nimport StateBase, { throwInvalidMethodCall } from './StateBase.js';\nimport { AUTO_RECORD_PROP } from '../Props.js';\nimport Registry from './Registry.js';\n\n/**\n * STM restoring state class.\n *\n * @internal\n */\nexport class RestoringStateClass extends StateBase {\n    static get $name() {\n        return 'RestoringStateClass';\n    }\n\n    canUndo() {\n        return false;\n    }\n\n    canRedo() {\n        return false;\n    }\n\n    onUndo() {\n        throwInvalidMethodCall();\n    }\n\n    onRedo() {\n        throwInvalidMethodCall();\n    }\n\n    onEnable() {\n        throwInvalidMethodCall();\n    }\n\n    onDisable() {\n        throwInvalidMethodCall();\n    }\n\n    onAutoRecordOn() {\n        return {\n            [AUTO_RECORD_PROP] : true\n        };\n    }\n\n    onAutoRecordOff() {\n        return {\n            [AUTO_RECORD_PROP] : false\n        };\n    }\n\n    onStartTransaction() {\n        throwInvalidMethodCall();\n    }\n\n    onStopTransaction()  {\n        throwInvalidMethodCall();\n    }\n\n    onStopTransactionDelayed() {\n        throwInvalidMethodCall();\n    }\n\n    onRejectTransaction() {\n        throwInvalidMethodCall();\n    }\n\n    onQueueReset() {\n        throwInvalidMethodCall();\n    }\n\n    onModelUpdate()      {}\n    onModelInsertChild() {}\n    onModelRemoveChild() {}\n    onStoreModelAdd()    {}\n    onStoreModelInsert() {}\n    onStoreModelRemove() {}\n    onStoreRemoveAll()   {}\n}\n\n/**\n * STM restoring state.\n *\n * @internal\n */\nconst RestoringState = new RestoringStateClass();\nexport default RestoringState;\n\nRegistry.registerStmState('restoringstate', RestoringState);\n","/**\n * @module Core/data/stm/state/AutoReadyState\n */\nimport { throwInvalidMethodCall } from './StateBase.js';\nimport Transaction from '../Transaction.js';\nimport { ReadyStateClass } from './ReadyState.js';\nimport { STATE_PROP, TRANSACTION_PROP, AUTO_RECORD_PROP } from '../Props.js';\nimport Registry from './Registry.js';\n\n/**\n * STM transaction autostart ready state class.\n *\n * @internal\n */\nexport class AutoReadyStateClass extends ReadyStateClass {\n\n    onAutoRecordOn() {\n        throwInvalidMethodCall();\n    }\n\n    onAutoRecordOff() {\n        return {\n            [STATE_PROP]       : 'readystate',\n            [AUTO_RECORD_PROP] : false\n        };\n    }\n\n    onStartTransaction(stm, title) {\n        const transaction = new Transaction({ title : title });\n\n        return [{\n            [STATE_PROP]       : 'autorecordingstate',\n            [TRANSACTION_PROP] : transaction\n        }, () => {\n            stm.notifyStoresAboutStateRecordingStart(transaction);\n            stm.stopTransactionDelayed();\n        }];\n    }\n\n    onModelUpdate(stm, model, newData, oldData) {\n        stm.startTransaction();\n        stm.onModelUpdate(model, newData, oldData);\n    }\n\n    onModelInsertChild(stm, parentModel, index, childModels, context) {\n        stm.startTransaction();\n        stm.onModelInsertChild(parentModel, index, childModels, context);\n    }\n\n    onModelRemoveChild(stm, parentModel, childModels, context) {\n        stm.startTransaction();\n        stm.onModelRemoveChild(parentModel, childModels, context);\n    }\n\n    onStoreModelAdd(stm, store, models, silent) {\n        stm.startTransaction();\n        stm.onStoreModelAdd(store, models, silent);\n    }\n\n    onStoreModelInsert(stm, store, index, models, context, silent) {\n        stm.startTransaction();\n        stm.onStoreModelInsert(store, index, models, context, silent);\n    }\n\n    onStoreModelRemove(stm, store, models, context, silent) {\n        stm.startTransaction();\n        stm.onStoreModelRemove(store, models, context, silent);\n    }\n\n    onStoreRemoveAll(stm, store, allRecords, silent) {\n        stm.startTransaction();\n        stm.onStoreRemoveAll(store, allRecords, silent);\n    }\n}\n\n/**\n * STM transaction autostart ready state.\n *\n * @internal\n */\nconst AutoReadyState = new AutoReadyStateClass();\nexport default AutoReadyState;\n\nRegistry.registerStmState('autoreadystate', AutoReadyState);\n","/**\n * @module Core/data/stm/state/AutoRecordingState\n */\nimport Delayable from '../../../mixin/Delayable.js';\nimport { throwInvalidMethodCall } from './StateBase.js';\nimport { RecordingStateClass } from './RecordingState.js';\nimport { STATE_PROP, TRANSACTION_PROP, TRANSACTION_TIMER_PROP, QUEUE_PROP, POS_PROP, AUTO_RECORD_PROP } from '../Props.js';\nimport Registry from './Registry.js';\nimport { resetQueue } from '../Helpers.js';\n\n/**\n * STM recording state class.\n *\n * @internal\n */\nexport class AutoRecordingStateClass extends RecordingStateClass.mixin(Delayable) {\n\n    onDisable(stm) {\n        const\n            transaction = stm[TRANSACTION_PROP],\n            timer       = stm[TRANSACTION_TIMER_PROP];\n\n        if (timer) {\n            this.clearTimeout(timer);\n        }\n\n        stm.notifyStoresAboutStateRecordingStop(transaction, { disabled : true });\n\n        return {\n            [STATE_PROP]             : 'disabledstate',\n            [TRANSACTION_PROP]       : null,\n            [TRANSACTION_TIMER_PROP] : null\n        };\n    }\n\n    onAutoRecordOn(stm) {\n        throwInvalidMethodCall();\n    }\n\n    onAutoRecordOff(stm) {\n        const timer       = stm[TRANSACTION_TIMER_PROP];\n\n        if (timer) {\n            this.clearTimeout(timer);\n        }\n\n        return {\n            [STATE_PROP]             : 'recordingstate',\n            [AUTO_RECORD_PROP]       : false,\n            [TRANSACTION_TIMER_PROP] : null\n        };\n    }\n\n    onStopTransaction(stm, title) {\n        const\n            transaction = stm[TRANSACTION_PROP],\n            timer       = stm[TRANSACTION_TIMER_PROP],\n            queue       = stm[QUEUE_PROP];\n\n        let position = stm[POS_PROP];\n\n        if (timer) {\n            this.clearTimeout(timer);\n        }\n\n        if (transaction.length) {\n\n            if (!transaction.title && !title && stm.getTransactionTitle) {\n                transaction.title = stm.getTransactionTitle(transaction);\n            }\n            else if (title) {\n                transaction.title = title;\n            }\n\n            queue[position] = transaction;\n            queue.length    = ++position;\n        }\n\n        return [{\n            [STATE_PROP]             : 'autoreadystate',\n            [POS_PROP]               : position,\n            [TRANSACTION_PROP]       : null,\n            [TRANSACTION_TIMER_PROP] : null\n        }, () => {\n            stm.notifyStoresAboutStateRecordingStop(transaction, { stop : true });\n        }];\n    }\n\n    onStopTransactionDelayed(stm) {\n        let timer = stm[TRANSACTION_TIMER_PROP];\n\n        if (timer) {\n            this.clearTimeout(timer);\n        }\n\n        timer = this.setTimeout(\n            () => {\n                stm.stopTransaction();\n            },\n            stm.autoRecordTransactionStopTimeout\n        );\n\n        return {\n            [STATE_PROP]             : AutoRecordingState,\n            [TRANSACTION_TIMER_PROP] : timer\n        };\n    }\n\n    onResetQueue(stm, options) {\n        return resetQueue(stm, options);\n    }\n\n    onRejectTransaction(stm) {\n        const\n            transaction = stm[TRANSACTION_PROP],\n            timer = stm[TRANSACTION_TIMER_PROP];\n\n        if (timer) {\n            this.clearTimeout(timer);\n        }\n\n        return [{\n            [STATE_PROP]             : 'restoringstate',\n            [TRANSACTION_PROP]       : null,\n            [TRANSACTION_TIMER_PROP] : null\n        }, () => {\n\n            if (transaction.length) {\n                transaction.undo();\n            }\n\n            return [\n                'autoreadystate',\n                () => {\n                    stm.notifyStoresAboutStateRecordingStop(transaction, { rejected : true });\n                }\n            ];\n        }];\n    }\n\n    onModelUpdate(stm, ...rest) {\n        super.onModelUpdate(stm, ...rest);\n        stm.stopTransactionDelayed();\n    }\n\n    onModelInsertChild(stm, ...rest) {\n        super.onModelInsertChild(stm, ...rest);\n        stm.stopTransactionDelayed();\n    }\n\n    onModelRemoveChild(stm, ...rest) {\n        super.onModelRemoveChild(stm, ...rest);\n        stm.stopTransactionDelayed();\n    }\n\n    onStoreModelAdd(stm, ...rest)    {\n        super.onStoreModelAdd(stm, ...rest);\n        stm.stopTransactionDelayed();\n    }\n\n    onStoreModelInsert(stm, ...rest) {\n        super.onStoreModelInsert(stm, ...rest);\n        stm.stopTransactionDelayed();\n    }\n\n    onStoreModelRemove(stm, ...rest) {\n        super.onStoreModelRemove(stm, ...rest);\n        stm.stopTransactionDelayed();\n    }\n\n    onStoreRemoveAll(stm, ...rest)   {\n        super.onStoreRemoveAll(stm, ...rest);\n        stm.stopTransactionDelayed();\n    }\n}\n\n/**\n * STM recording state.\n *\n * @internal\n */\nconst AutoRecordingState = new AutoRecordingStateClass();\nexport default AutoRecordingState;\n\nRegistry.registerStmState('autorecordingstate', AutoRecordingState);\n","/**\n * @module Core/data/stm/action/UpdateAction\n */\nimport ActionBase from './ActionBase.js';\n\nconst\n    MODEL_PROP    = Symbol('MODEL_PROP'),\n    NEW_DATA_PROP = Symbol('NEW_DATA_PROP'),\n    OLD_DATA_PROP = Symbol('OLD_DATA_PROP');\n\n/**\n * Action to record the fact that a model has been updated.\n * @extends Core/data/stm/action/ActionBase\n */\nexport default class UpdateAction extends ActionBase {\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Reference to a model which has been updated.\n             *\n             * @config {Core.data.Model}\n             * @default\n             */\n            model : undefined,\n\n            /**\n             * Map of updated properties with new values.\n             *\n             * @config {Object}\n             * @default\n             */\n            newData : undefined,\n\n            /**\n             * Map of updated properties with old values.\n             *\n             * @config {Object}\n             * @default\n             */\n            oldData : undefined,\n\n            isInitialUserAction : false\n        };\n    }\n\n    get type() {\n        return 'UpdateAction';\n    }\n\n    //<debug>\n    afterConfig() {\n        super.afterConfig();\n\n        console.assert(\n            this.model.isModel && typeof this.newData == 'object' && typeof this.oldData == 'object',\n            \"Can't create action, bad configuration!\"\n        );\n    }\n    //</debug>\n\n    get model() {\n        return this[MODEL_PROP];\n    }\n\n    set model(value) {\n        //<debug>\n        console.assert(\n            !this[MODEL_PROP] && value.isModel,\n            \"Can't set model, model should be instanceof `Model` class and can be set only once!\"\n        );\n        //</debug>\n        this[MODEL_PROP] = value;\n    }\n\n    get newData() {\n        return this[NEW_DATA_PROP];\n    }\n\n    set newData(value) {\n        //<debug>\n        console.assert(\n            !this[NEW_DATA_PROP] && value && typeof value == 'object',\n            \"Can't set new data, new data should be an object and can be set only once!\"\n        );\n        //</debug>\n        this[NEW_DATA_PROP] = { ...value };\n    }\n\n    get oldData() {\n        return this[OLD_DATA_PROP];\n    }\n\n    set oldData(value) {\n        //<debug>\n        console.assert(\n            !this[OLD_DATA_PROP] && value && typeof value == 'object',\n            \"Can't set old data, old data should be an object and can be set only once!\"\n        );\n        //</debug>\n        this[OLD_DATA_PROP] = { ...value };\n    }\n\n    undo() {\n        const { model, oldData } = this;\n\n        // engine needs the setters to be activated, since there's some additional logic (for example, invalidate\n        // dispatcher)\n        if (model.$) {\n            Object.assign(model, oldData);\n        }\n\n        // it seems STM has to use `model.set()` because of `model.inSet` overrides or smth\n        // w/o this call, just with `Object.assign()` above, the view is not refreshed\n        // Since invoking accessor will just forward change to the engine, we need to pass `skipAccessors = true`\n        // to this call to make this change on data level.\n        // Covered by TaskEdit.t `autoSync` subtest\n        model.set(oldData, null, null, null, true);\n    }\n\n    redo() {\n        const { model, newData } = this;\n\n        // see comments above\n        if (model.$) {\n            Object.assign(model, newData);\n        }\n\n        model.set(newData, null, null, null, true);\n    }\n}\n","/**\n * @module Core/data/stm/action/InsertChildAction\n */\nimport ActionBase from './ActionBase.js';\n\nconst\n    PARENT_MODEL_PROP = Symbol('PARENT_MODEL_PROP'),\n    CHILD_MODELS_PROP = Symbol('CHILD_MODELS_PROP'),\n    INSERT_INDEX_PROP = Symbol('INSERT_INDEX_PROP'),\n    CONTEXT_PROP      = Symbol('CONTEXT_PROP');\n\n/**\n * Action to record the fact of adding a children models into a parent model.\n * @extends Core/data/stm/action/ActionBase\n */\nexport default class InsertChildAction extends ActionBase {\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Reference to a parent model a child model has been added to.\n             *\n             * @config {Core.data.Model}\n             * @default\n             */\n            parentModel : undefined,\n\n            /**\n             * Children models inserted.\n             *\n             * @config {Core.data.Model[]}\n             * @default\n             */\n            childModels : undefined,\n\n            /**\n             * Index a children models are inserted at\n             *\n             * @config {Number}\n             * @default\n             */\n            insertIndex : undefined,\n\n            /**\n             * Map having children models as keys and values containing previous parent\n             * of each model and index at the previous parent.\n             *\n             * @config {Object}\n             * @default\n             */\n            context : undefined\n        };\n    }\n\n    get type() {\n        return 'InsertChildAction';\n    }\n\n    //<debug>\n    afterConfig() {\n        super.afterConfig();\n\n        console.assert(\n            this.parentModel.isModel &&\n            Array.isArray(this.childModels) &&\n            this.childModels.every(m => m.isModel) &&\n            this.insertIndex !== undefined &&\n            this.context instanceof Map,\n            \"Can't create action, bad configuration!\"\n        );\n    }\n    //</debug>\n\n    get parentModel() {\n        return this[PARENT_MODEL_PROP];\n    }\n\n    set parentModel(model) {\n        //<debug>\n        console.assert(\n            !this[PARENT_MODEL_PROP] && model,\n            \"Can't set parent model, model is required and can be set only once!\"\n        );\n        //</debug>\n\n        this[PARENT_MODEL_PROP] = model;\n    }\n\n    get childModels() {\n        return this[CHILD_MODELS_PROP];\n    }\n\n    set childModels(models) {\n        //<debug>\n        console.assert(\n            !this[CHILD_MODELS_PROP] &&\n            Array.isArray(models) &&\n            models.every(m => m.isModel),\n            \"Can't set child models, models are required, it should be array of Model class and can be set only once!\"\n        );\n        //</debug>\n\n        this[CHILD_MODELS_PROP] = models.slice(0);\n    }\n\n    get insertIndex() {\n        return this[INSERT_INDEX_PROP];\n    }\n\n    set insertIndex(index) {\n        //<debug>\n        console.assert(\n            this[INSERT_INDEX_PROP] === undefined && index !== undefined,\n            \"Can't set insert index, the value is required and can be set only once!\"\n        );\n        //</debug>\n\n        this[INSERT_INDEX_PROP] = index;\n    }\n\n    get context() {\n        return this[CONTEXT_PROP];\n    }\n\n    set context(ctx) {\n        //<debug>\n        console.assert(\n            !this[CONTEXT_PROP] &&\n            ctx instanceof Map &&\n            Array.from(ctx.entries()).every(([k, v]) => {\n                return k.isModel && typeof v == 'object' && v && Object.prototype.hasOwnProperty.call(v, 'parent') && Object.prototype.hasOwnProperty.call(v, 'index');\n            }),\n            \"Can't set context, the value is required it should be Map keyed by inserted models with object values containing `parent` and `index` properties, and it can be set only once!\"\n        );\n        //</debug>\n\n        this[CONTEXT_PROP] = ctx;\n    }\n\n    undo() {\n        const { parentModel, context, childModels } = this;\n\n        // Let's sort models by parent index such that models with lesser index\n        // were inserted back first, thus making valid parent index of models following.\n        childModels.sort((lhs, rhs) => {\n            const\n                { lhsParent, lhsIndex } = context.get(lhs) || {},\n                { rhsParent, rhsIndex } = context.get(rhs) || {};\n\n            return lhsParent && lhsParent === rhsParent ? (lhsIndex - rhsIndex) : 0;\n        });\n\n        // Now let's re-insert records back to where they were or remove them\n        // if they weren't anywhere\n        childModels.forEach(m => {\n            const { parent, index } = context.get(m) || {};\n\n            if (parent) {\n                // If we move within same parent then index must be adjusted\n                if (parent === parentModel) {\n                    let adjustedIndex;\n\n                    // we need to increment index if the node was moved up\n                    adjustedIndex = index > m.parentIndex ? index + 1 : index;\n\n                    // null index if we need to move to the end\n                    adjustedIndex = index === parent.children.length - 1 ? null : adjustedIndex;\n\n                    // if insertBefore is undefined the node will be appended to the end\n                    const insertBefore = parent.children[adjustedIndex];\n\n                    parent.insertChild(m, insertBefore);\n                }\n                else {\n                    // Insert at previous index\n                    parent.insertChild(m, parent.children[index]);\n                }\n            }\n            else {\n                // Just remove\n                parentModel.removeChild(m);\n            }\n        });\n    }\n\n    redo() {\n        const\n            { parentModel, insertIndex, childModels } = this,\n            insertBefore = parentModel.children[insertIndex];\n\n        parentModel.insertChild(childModels, insertBefore);\n    }\n}\n","/**\n * @module Core/data/stm/action/RemoveChildAction\n */\nimport ActionBase from './ActionBase.js';\n\nconst\n    PARENT_MODEL_PROP = Symbol('PARENT_MODEL_PROP'),\n    CHILD_MODELS_PROP = Symbol('CHILD_MODELS_PROP'),\n    CONTEXT_PROP      = Symbol('CONTEXT_PROP');\n\n/**\n * Action to record store remove child operation.\n * @extends Core/data/stm/action/ActionBase\n */\nexport default class RemoveChildAction extends ActionBase {\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Reference to a parent model a child model has been removed to.\n             *\n             * @config {Core.data.Model}\n             * @default\n             */\n            parentModel : undefined,\n\n            /**\n             * Children models removed.\n             *\n             * @config {Core.data.Model[]}\n             * @default\n             */\n            childModels : undefined,\n\n            /**\n             * Map having children models as keys and values containing previous parent\n             * index at the parent.\n             *\n             * @config {Object}\n             * @default\n             */\n            context : undefined\n        };\n    }\n\n    get type() {\n        return 'RemoveChildAction';\n    }\n\n    //<debug>\n    afterConfig() {\n        super.afterConfig();\n\n        console.assert(\n            this.parentModel.isModel &&\n            Array.isArray(this.childModels) &&\n            this.childModels.every(m => m.isModel) &&\n            this.context instanceof Map,\n            \"Can't create action, bad configuration!\"\n        );\n    }\n    //</debug>\n\n    get parentModel() {\n        return this[PARENT_MODEL_PROP];\n    }\n\n    set parentModel(model) {\n        //<debug>\n        console.assert(\n            !this[PARENT_MODEL_PROP] && model,\n            \"Can't set parent model, model is required and can be set only once!\"\n        );\n        //</debug>\n\n        this[PARENT_MODEL_PROP] = model;\n    }\n\n    get childModels() {\n        return this[CHILD_MODELS_PROP];\n    }\n\n    set childModels(models) {\n        //<debug>\n        console.assert(\n            !this[CHILD_MODELS_PROP] &&\n            Array.isArray(models) &&\n            models.every(m => m.isModel),\n            \"Can't set child models, models are required, it should be array of Model class and can be set only once!\"\n        );\n        //</debug>\n\n        this[CHILD_MODELS_PROP] = models.slice(0);\n    }\n\n    get context() {\n        return this[CONTEXT_PROP];\n    }\n\n    set context(ctx) {\n        //<debug>\n        console.assert(\n            !this[CONTEXT_PROP] &&\n            ctx instanceof Map &&\n            Array.from(ctx.entries()).every(([k, v]) => {\n                return k.isModel && typeof v == 'number';\n            }),\n            \"Can't set context, the value is required it should be Map keyed by inserted models with `index` values, and it can be set only once!\"\n        );\n        //</debug>\n\n        this[CONTEXT_PROP] = ctx;\n    }\n\n    undo() {\n        const { parentModel, context, childModels } = this;\n\n        // Let's sort models by parent index such that models with lesser index\n        // were inserted back first, thus making valid parent index of models following.\n\n        childModels.sort((lhs, rhs) => {\n            const\n                lhsIndex = context.get(lhs),\n                rhsIndex = context.get(rhs);\n\n            return (lhsIndex - rhsIndex);\n        });\n\n        // Now let's re-insert records back to where they were\n        childModels.forEach(m => {\n            parentModel.insertChild(m, context.get(m));\n        });\n    }\n\n    redo() {\n        this.parentModel.removeChild(this.childModels);\n    }\n}\n","import ActionBase from './ActionBase.js';\nimport Store from '../../Store.js';\n\n/**\n * @module Core/data/stm/action/AddAction\n */\nconst\n    STORE_PROP      = Symbol('STORE_PROP'),\n    MODEL_LIST_PROP = Symbol('MODEL_LIST_PROP');\n\n/**\n * Action to record the fact of models adding to a store.\n * @extends Core/data/stm/action/ActionBase\n */\nexport default class AddAction extends ActionBase {\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Reference to a store models have been added into.\n             *\n             * @config {Core.data.Store}\n             * @default\n             */\n            store : undefined,\n\n            /**\n             * List of models added into the store.\n             *\n             * @config {Core.data.Model[]}\n             * @default\n             */\n            modelList : undefined,\n\n            /**\n             * Flag showing if undo/redo should be done silently i.e. with events suppressed\n             *\n             * @config {Boolean}\n             * @default\n             */\n            silent : false\n        };\n    }\n\n    get type() {\n        return 'AddAction';\n    }\n\n    //<debug>\n    afterConfig() {\n        super.afterConfig();\n\n        console.assert(\n            this.store instanceof Store &&\n            Array.isArray(this.modelList) &&\n            this.modelList.length &&\n            this.modelList.every(m => m.isModel),\n            \"Can't create action, bad configuration!\"\n        );\n    }\n    //</debug>\n\n    get store() {\n        return this[STORE_PROP];\n    }\n\n    set store(store) {\n        //<debug>\n        console.assert(\n            !this[STORE_PROP] && store && store instanceof Store,\n            \"Can't set store, store is required and can be set only once!\"\n        );\n        //</debug>\n\n        this[STORE_PROP] = store;\n    }\n\n    get modelList() {\n        return this[MODEL_LIST_PROP];\n    }\n\n    set modelList(list) {\n        //<debug>\n        console.assert(\n            !this[MODEL_LIST_PROP] &&\n            Array.isArray(list) &&\n            list.length,\n            list.every(m => m.isModel),\n            \"Can't set model list, model list is required it should be array of Models and it can be set only once!\"\n        );\n        //</debug>\n\n        this[MODEL_LIST_PROP] = list.slice(0);\n    }\n\n    undo() {\n        this.store.remove(this.modelList, this.silent);\n    }\n\n    redo() {\n        this.store.add(this.modelList, this.silent);\n    }\n}\n","import ActionBase from './ActionBase.js';\nimport Store from '../../Store.js';\n\n/**\n * @module Core/data/stm/action/InsertAction\n */\n\nconst\n    STORE_PROP        = Symbol('STORE_PROP'),\n    MODEL_LIST_PROP   = Symbol('MODEL_LIST_PROP'),\n    INSERT_INDEX_PROP = Symbol('INSERT_INDEX_PROP'),\n    CONTEXT_PROP      = Symbol('CONTEXT_PROP');\n\n/**\n * Action to record the fact of models inserting into a store.\n * @extends Core/data/stm/action/ActionBase\n */\nexport default class InsertAction extends ActionBase {\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Reference to a store models have been inserted into.\n             *\n             * @config {Core.data.Store}\n             * @default\n             */\n            store : undefined,\n\n            /**\n             * List of models inserted into the store.\n             *\n             * @config {Core.data.Model[]}\n             * @default\n             */\n            modelList : undefined,\n\n            /**\n             * Index the models have been inserted at.\n             *\n             * @config {Number}\n             * @default\n             */\n            insertIndex : undefined,\n\n            /**\n             * Models move context (if models has been moved), if any.\n             * Map this {@link Core/data/Model} instances as keys and their\n             * previous index as values\n             *\n             * @config {Map}\n             * @default\n             */\n            context : undefined,\n\n            /**\n             * Flag showing if undo/redo should be done silently i.e. with events suppressed\n             *\n             * @config {Boolean}\n             * @default\n             */\n            silent : false\n        };\n    }\n\n    get type() {\n        return 'InsertAction';\n    }\n\n    //<debug>\n    afterConfig() {\n        super.afterConfig();\n\n        console.assert(\n            this.store instanceof Store &&\n            Array.isArray(this.modelList) &&\n            this.modelList.length &&\n            this.modelList.every(m => m.isModel) &&\n            this.insertIndex !== undefined &&\n            this.context instanceof Map,\n            \"Can't create action, bad configuration!\"\n        );\n    }\n    //</debug>\n\n    get store() {\n        return this[STORE_PROP];\n    }\n\n    set store(store) {\n        //<debug>\n        console.assert(\n            !this[STORE_PROP] && store && store instanceof Store,\n            \"Can't set store, store is required and can be set only once!\"\n        );\n        //</debug>\n\n        this[STORE_PROP] = store;\n    }\n\n    get modelList() {\n        return this[MODEL_LIST_PROP];\n    }\n\n    set modelList(list) {\n        //<debug>\n        console.assert(\n            !this[MODEL_LIST_PROP] &&\n            Array.isArray(list) &&\n            list.length &&\n            list.every(m => m.isModel),\n            \"Can't set model list, model list is required, it should be array of Models and it can be set only once!\"\n        );\n        //</debug>\n\n        this[MODEL_LIST_PROP] = list.slice(0);\n    }\n\n    get insertIndex() {\n        return this[INSERT_INDEX_PROP];\n    }\n\n    set insertIndex(index) {\n        //<debug>\n        console.assert(\n            this[INSERT_INDEX_PROP] === undefined && index !== undefined,\n            \"Can't set insert index, the value is required and can be set only once!\"\n        );\n        //</debug>\n\n        this[INSERT_INDEX_PROP] = index;\n    }\n\n    get context() {\n        return this[CONTEXT_PROP];\n    }\n\n    set context(context) {\n        //<debug>\n        console.assert(\n            !this[CONTEXT_PROP] &&\n            context instanceof Map &&\n            Array.from(context.entries()).every(([k, v]) => k.isModel && v !== undefined),\n            \"Can't set move context, context is required, it should be Map with keys set to Model instances and numeric values, and it can be set only once!\"\n        );\n        //</debug>\n\n        this[CONTEXT_PROP] = context;\n    }\n\n    undo() {\n        const { store, modelList, context, silent } = this;\n\n        // Let's sort models by index such that models with lesser index\n        // were inserted back first, thus making valid index of models following.\n\n        modelList.sort((lhs, rhs) => {\n            const\n                lhsIndex = context.get(lhs),\n                rhsIndex = context.get(rhs);\n\n            return lhsIndex !== undefined && rhsIndex !== undefined ? lhsIndex - rhsIndex : 0;\n        });\n\n        modelList.forEach(m => {\n            const index = context.get(m);\n\n            // Flag the inserted record that we undo to skip adding it to \"store.removed\"\n            m._undoingInsertion = true;\n\n            if (index !== undefined) {\n                // Insert at previous index\n                store.insert(index, m, silent);\n            }\n            else {\n                // Just remove\n                store.remove(m, silent);\n            }\n\n            m._undoingInsertion = false;\n        });\n    }\n\n    redo() {\n        const me = this;\n        me.store.insert(me.insertIndex, me.modelList, me.silent);\n    }\n}\n","/**\n * @module Core/data/stm/action/RemoveAction\n */\nimport ActionBase from './ActionBase.js';\nimport Store from '../../Store.js';\n\nconst\n    STORE_PROP      = Symbol('STORE_PROP'),\n    MODEL_LIST_PROP = Symbol('MODEL_LIST_PROP'),\n    CONTEXT_PROP    = Symbol('CONTEXT_PROP');\n\n/**\n * Action to record the fact of models removed from a store.\n * @extends Core/data/stm/action/ActionBase\n */\nexport default class RemoveAction extends ActionBase {\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Reference to a store models have been removed from.\n             *\n             * @config {Core.data.Store}\n             * @default\n             */\n            store : undefined,\n\n            /**\n             * List of models removed from the store.\n             *\n             * @config {Core.data.Model[]}\n             * @default\n             */\n            modelList : undefined,\n\n            /**\n             * Models removing context.\n             *\n             * @config {Object}\n             * @default\n             */\n            context : undefined,\n\n            /**\n             * Flag showing if undo/redo should be done silently i.e. with events suppressed\n             *\n             * @config {Boolean}\n             * @default\n             */\n            silent : false\n        };\n    }\n\n    get type() {\n        return 'RemoveAction';\n    }\n\n    //<debug>\n    afterConfig() {\n        super.afterConfig();\n\n        console.assert(\n            this.store instanceof Store &&\n            Array.isArray(this.modelList) &&\n            this.modelList.length &&\n            this.modelList.every(m => m.isModel) &&\n            \"Can't create action, bad configuration!\"\n        );\n    }\n    //</debug>\n\n    get store() {\n        return this[STORE_PROP];\n    }\n\n    set store(store) {\n        //<debug>\n        console.assert(\n            !this[STORE_PROP] && store && store instanceof Store,\n            \"Can't set store, store is required and can be set only once!\"\n        );\n        //</debug>\n\n        this[STORE_PROP] = store;\n    }\n\n    get modelList() {\n        return this[MODEL_LIST_PROP];\n    }\n\n    set modelList(list) {\n        //<debug>\n        console.assert(\n            !this[MODEL_LIST_PROP] &&\n            Array.isArray(list) &&\n            list.length &&\n            list.every(m => m.isModel),\n            \"Can't set model list, model list is required, it should be array of Models and it can be set only once!\"\n        );\n        //</debug>\n\n        this[MODEL_LIST_PROP] = list.slice(0);\n    }\n\n    get context() {\n        return this[CONTEXT_PROP];\n    }\n\n    set context(context) {\n        //<debug>\n        console.assert(\n            !this[CONTEXT_PROP] &&\n            context instanceof Map &&\n            Array.from(context.entries()).every(([k, v]) => k.isModel && typeof v === 'number'),\n            \"Can't set removal context, removal context is required, it should be Map with Model instances as keys and numeric values, and it can be set only once!\"\n        );\n        //</debug>\n\n        this[CONTEXT_PROP] = context;\n    }\n\n    undo() {\n        const { store, context, modelList, silent } = this;\n\n        // Let's sort models by index such that models with lesser index\n        // were inserted back first, thus making valid index of models following.\n        modelList.sort((lhs, rhs) => {\n            const\n                lhsIndex = context.get(lhs),\n                rhsIndex = context.get(rhs);\n\n            // Here, in contrast to InsertAction, index is always present\n            return lhsIndex - rhsIndex;\n        });\n\n        modelList.forEach(m => {\n            const index = context.get(m);\n\n            // Insert at previous index\n            store.insert(index, m, silent);\n        });\n    }\n\n    redo() {\n        this.store.remove(this.modelList, this.silent);\n    }\n}\n","/**\n * @module Core/data/stm/action/RemoveAllAction\n */\nimport ActionBase from './ActionBase.js';\nimport Store from '../../Store.js';\n\nconst\n    STORE_PROP       = Symbol('STORE_PROP'),\n    ALL_RECORDS_PROP = Symbol('ALL_RECORDS_PROP');\n\n/**\n * Action to record store remove all operation.\n * @extends Core/data/stm/action/ActionBase\n */\nexport default class RemoveAllAction extends ActionBase {\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Reference to a store cleared.\n             *\n             * @config {Core.data.Store}\n             * @default\n             */\n            store : undefined,\n\n            /**\n             * All store records removed\n             *\n             * @config {Core.data.Model[]}\n             * @default\n             */\n            allRecords : undefined,\n\n            /**\n             * Flag showing if undo/redo should be done silently i.e. with events suppressed\n             *\n             * @config {Boolean}\n             * @default\n             */\n            silent : false\n        };\n    }\n\n    get type() {\n        return 'RemoveAllAction';\n    }\n\n    //<debug>\n    afterConfig() {\n        super.afterConfig();\n\n        console.assert(\n            this.store instanceof Store,\n            Array.isArray(this.allRecords) &&\n            this.allRecords.length &&\n            this.allRecords.every(m => m.isModel),\n            \"Can't create action, bad configuration!\"\n        );\n    }\n    //</debug>\n\n    get store() {\n        return this[STORE_PROP];\n    }\n\n    set store(store) {\n        //<debug>\n        console.assert(\n            !this[STORE_PROP] && store && store instanceof Store,\n            \"Can't set store, store is required and can be set only once!\"\n        );\n        //</debug>\n\n        this[STORE_PROP] = store;\n    }\n\n    get allRecords() {\n        return this[ALL_RECORDS_PROP];\n    }\n\n    set allRecords(records) {\n        //<debug>\n        console.assert(\n            !this[ALL_RECORDS_PROP] &&\n            Array.isArray(records) &&\n            records.length,\n            records.every(m => m.isModel),\n            \"Can't all records list, all records list is required it should be array of Models and it can be set only once!\"\n        );\n        //</debug>\n\n        this[ALL_RECORDS_PROP] = records.slice(0);\n    }\n\n    undo() {\n        const { store, allRecords, silent } = this;\n        store.add(allRecords, silent);\n    }\n\n    redo() {\n        this.store.removeAll(this.silent);\n    }\n}\n","/**\n * @module Core/data/stm/StateTrackingManager\n */\nimport Base from '../../Base.js';\nimport Events from '../../mixin/Events.js';\nimport StateBase from './state/StateBase.js';\nimport DisabledState from './state/DisabledState.js';\nimport ReadyState from './state/ReadyState.js';\nimport RecordingState from './state/RecordingState.js';\nimport RestoringState from './state/RestoringState.js';\nimport AutoReadyState from './state/AutoReadyState.js';\nimport AutoRecordingState from './state/AutoRecordingState.js';\nimport Registry from './state/Registry.js';\nimport UpdateAction from './action/UpdateAction.js';\nimport InsertChildAction from './action/InsertChildAction.js';\nimport RemoveChildAction from './action/RemoveChildAction.js';\nimport AddAction from './action/AddAction.js';\nimport InsertAction from './action/InsertAction.js';\nimport RemoveAction from './action/RemoveAction.js';\nimport RemoveAllAction from './action/RemoveAllAction.js';\nimport { STATE_PROP, STORES_PROP, QUEUE_PROP, POS_PROP, TRANSACTION_PROP, TRANSACTION_TIMER_PROP, AUTO_RECORD_PROP } from './Props.js';\n\nexport const makeModelUpdateAction = (model, newData, oldData, isInitialUserAction) => {\n    return new UpdateAction({\n        model,\n        newData,\n        oldData,\n        isInitialUserAction\n    });\n};\n\nexport const makeModelInsertChildAction = (parentModel, insertIndex, childModels, context) => {\n    return new InsertChildAction({\n        parentModel,\n        childModels,\n        insertIndex,\n        context\n    });\n};\n\nexport const makeModelRemoveChildAction = (parentModel, childModels, context) => {\n    return new RemoveChildAction({\n        parentModel,\n        childModels,\n        context\n    });\n};\n\nexport const makeStoreModelAddAction = (store, modelList, silent) => {\n    return new AddAction({\n        store,\n        modelList,\n        silent\n    });\n};\n\nexport const makeStoreModelInsertAction = (store, insertIndex, modelList, context, silent) => {\n    return new InsertAction({\n        store,\n        insertIndex,\n        modelList,\n        context,\n        silent\n    });\n};\n\nexport const makeStoreModelRemoveAction = (store, modelList, context, silent) => {\n    return new RemoveAction({\n        store,\n        modelList,\n        context,\n        silent\n    });\n};\n\nexport const makeStoreRemoveAllAction = (store, allRecords, silent) => {\n    return new RemoveAllAction({\n        store,\n        allRecords,\n        silent\n    });\n};\n\nconst stateTransition = (stm, event, ...args) => {\n    const\n        oldState = stm.state,\n        newState = event.call(stm[STATE_PROP], stm, ...args);\n\n    if (typeof newState === 'string') {\n        stm[STATE_PROP] = Registry.resolveStmState(newState);\n    }\n    else if (newState instanceof StateBase) {\n        stm[STATE_PROP] = newState;\n    }\n    else if (Array.isArray(newState)) {\n        const [state, next] = newState;\n\n        if (typeof state === 'string') {\n            stm[STATE_PROP] = Registry.resolveStmState(state);\n        }\n        else if (state instanceof StateBase) {\n            stm[STATE_PROP] = state;\n        }\n        else if (state && typeof state === 'object') {\n            stm = Object.assign(stm, state);\n            stm[STATE_PROP] = Registry.resolveStmState(stm[STATE_PROP]);\n        }\n\n        if (typeof next === 'function') {\n            stateTransition(stm, next, ...args);\n        }\n    }\n    else if (newState && typeof newState === 'object') {\n        stm = Object.assign(stm, newState);\n        stm[STATE_PROP] = Registry.resolveStmState(stm[STATE_PROP]);\n    }\n\n    if (oldState !== ReadyState && oldState !== AutoReadyState && (newState !== ReadyState && newState !== AutoReadyState)) {\n        stm.trigger('ready');\n    }\n};\n\n/**\n * Tracks the state of every store registered via {@link #function-addStore}. It is {@link #config-disabled} by default\n * so remember to call {@link #function-enable} when your stores are registered and initial dataset is loaded.\n * Use {@link #function-undo} / {@link #function-redo} method calls to restore state to a particular\n * point in time\n *\n * ```javascript\n * stm = new StateTrackingManager({\n *     autoRecord : true,\n *     listeners  : {\n *        'recordingstop' : () => {\n *            // your custom code to update undo/redo GUI controls\n *            updateUndoRedoControls();\n *        },\n *        'restoringstop' : ({ stm }) => {\n *            // your custom code to update undo/redo GUI controls\n *            updateUndoRedoControls();\n *        }\n *    },\n *    getTransactionTitle : (transaction) => {\n *        // your custom code to analyze the transaction and return custom transaction title\n *        const lastAction = transaction.queue[transaction.queue.length - 1];\n *\n *        if (lastAction instanceof AddAction) {\n *            let title = 'Add new record';\n *        }\n *\n *        return title;\n *    }\n * });\n *\n * stm.addStore(userStore);\n * stm.addStore(companyStore);\n * stm.addStore(otherStore);\n *\n * stm.enable();\n * ```\n *\n * **Note:** STM currently does not support undoing server side added and saved records.\n * Therefore it's recommended to {@link #function-resetQueue reset the queue}\n * each time a tracked store(s) loads from or saves its changes to the server.\n * If Crud Manager is used it can be done like this:\n * ```javascript\n * crudManager.on({\n *     requestDone() {\n *         stm.resetQueue();\n *     }\n * });\n * ```\n * and in case individual stores are used:\n * ```javascript\n * ajaxStore.on({\n *     afterRequest({ exception }) {\n *         if (!exception) {\n *             stm.resetQueue();\n *         }\n *     }\n * });\n * ```\n *\n * @mixes Core/mixin/Events\n * @extends Core/Base\n */\nexport default class StateTrackingManager extends Events(Base) {\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Default manager disabled state\n             *\n             * @config {Boolean}\n             * @default\n             */\n            disabled : true,\n\n            /**\n             * Whether to start transaction recording automatically in case the Manager is enabled.\n             *\n             * In the auto recording mode, the manager waits for the first change in any store being managed and starts a transaction, i.e.\n             * records any changes in its monitored stores. The transaction lasts for {@link #config-autoRecordTransactionStopTimeout} and\n             * afterwards creates one undo/redo step, including all changes in the stores during that period of time.\n             *\n             * In non auto recording mode you have to call {@link #function-startTransaction} / {@link #function-stopTransaction} to start and end\n             * a transaction.\n             *\n             * @config {Boolean}\n             * @default\n             */\n            autoRecord : false,\n\n            /**\n             * The transaction duration (in ms) for the auto recording mode {@link #config-autoRecord}\n             *\n             * @config {Number}\n             * @default\n             */\n            autoRecordTransactionStopTimeout : 100,\n\n            /**\n             * Store model update action factory\n             *\n             * @config {Function}\n             * @default\n             * @private\n             */\n            makeModelUpdateAction : makeModelUpdateAction,\n\n            /**\n             * Store insert child model action factory.\n             *\n             * @config {Function}\n             * @default\n             * @private\n             */\n            makeModelInsertChildAction : makeModelInsertChildAction,\n\n            /**\n             * Store remove child model action factory.\n             *\n             * @config {Function}\n             * @default\n             * @private\n             */\n            makeModelRemoveChildAction : makeModelRemoveChildAction,\n\n            /**\n             * Store add model action factory.\n             *\n             * @config {Function}\n             * @default\n             * @private\n             */\n            makeStoreModelAddAction : makeStoreModelAddAction,\n\n            /**\n             * Store insert model action factory.\n             *\n             * @config {Function}\n             * @default\n             * @private\n             */\n            makeStoreModelInsertAction : makeStoreModelInsertAction,\n\n            /**\n             * Store remove model action factory.\n             *\n             * @config {Function}\n             * @default\n             * @private\n             */\n            makeStoreModelRemoveAction : makeStoreModelRemoveAction,\n\n            /**\n             * Store remove all models action factory.\n             *\n             * @config {Function}\n             * @default\n             * @private\n             */\n            makeStoreRemoveAllAction : makeStoreRemoveAllAction,\n\n            /**\n             * Function to create a transaction title if none is provided.\n             *\n             * The function receives a transaction and should return a title.\n             *\n             * @config {Function}\n             * @default\n             */\n            getTransactionTitle : null\n        };\n    }\n\n    construct(...args) {\n        Object.assign(this, {\n            [STATE_PROP]             : ReadyState,\n            [STORES_PROP]            : [],\n            [QUEUE_PROP]             : [],\n            [POS_PROP]               : 0,\n            [TRANSACTION_PROP]       : null,\n            [TRANSACTION_TIMER_PROP] : null,\n            [AUTO_RECORD_PROP]       : false\n        });\n\n        super.construct(...args);\n    }\n\n    // TODO: This destroys the current state, which makes successive tests fail. Not sure what should be done\n    // doDestroy() {\n    //     super.doDestroy();\n    //     this.destroyProperties(STATE_PROP);\n    // }\n\n    /**\n     * Gets current state of the manager\n     *\n     * @property {Core.data.stm.state.StateBase}\n     */\n    get state() {\n        return this[STATE_PROP];\n    }\n\n    /**\n     * Gets current undo/redo queue position\n     *\n     * @property {Number}\n     */\n    get position() {\n        return this[POS_PROP];\n    }\n\n    /**\n     * Gets current undo/redo queue length\n     *\n     * @property {Number}\n     */\n    get length() {\n        return this[QUEUE_PROP].length;\n    }\n\n    /**\n     * Gets all the stores registered in STM\n     *\n     * @property {Core.data.Store[]}\n     */\n    get stores() {\n        return Array.from(this[STORES_PROP]);\n    }\n\n    /**\n     * Checks if a store has been added to the manager\n     *\n     * @param  {Core.data.Store} store\n     * @returns {Boolean}\n     */\n    hasStore(store) {\n        return this[STORES_PROP].includes(store);\n    }\n\n    /**\n     * Adds a store to the manager\n     *\n     * @param {Core.data.Store} store\n     */\n    addStore(store) {\n        //<debug>\n        console.assert(\n            !this.hasStore(store),\n            'Can\\'t add store to the STM manager, store is already added into the STM manager!'\n        );\n        //</debug>\n\n        if (!this.hasStore(store)) {\n\n            this[STORES_PROP].push(store);\n\n            store.stm = this;\n        }\n    }\n\n    /**\n     * Removes a store from the manager\n     *\n     * @param {Core.data.Store} store\n     */\n    removeStore(store) {\n        //<debug>\n        console.assert(\n            this.hasStore(store),\n            'Can\\'t remove store from the STM manager, store isn\\'t registered in the STM manager!'\n        );\n        //</debug>\n\n        if (this.hasStore(store)) {\n            this[STORES_PROP] = this[STORES_PROP].filter(s => s !== store);\n            store.stm = null;\n        }\n    }\n\n    /**\n     * Calls `fn` for each store registered in STM.\n     *\n     * @param {Function} fn (store, id) => ...\n     */\n    forEachStore(fn) {\n        this[STORES_PROP].forEach(s => fn(s, s.id));\n    }\n\n    //#region Disabled state\n\n    /**\n     * Get/set manager disabled state\n     *\n     * @property {Boolean}\n     */\n    get disabled() {\n        return this.state === DisabledState;\n    }\n\n    set disabled(val) {\n        const me = this;\n\n        if (me.disabled !== val) {\n            if (val) {\n                stateTransition(me, me.state.onDisable, me);\n            }\n            else {\n                stateTransition(me, me.state.onEnable, me);\n            }\n\n            me.trigger('stmDisabled', { disabled : val });\n\n            /**\n             * Fired when the disabled state of the STM changes\n             *\n             * @event disabled\n             * @param {Core.data.stm.StateTrackingManager} source\n             * @param {Boolean} disabled The current disabled state of the STM\n             */\n            me.trigger('disabled', { disabled : val });\n        }\n    }\n\n    get enabled() {\n        return !this.disabled;\n    }\n\n    /**\n     * Enables manager\n     */\n    enable() {\n        this.disabled = false;\n    }\n\n    /**\n     * Disables manager\n     */\n    disable() {\n        this.disabled = true;\n    }\n\n    //#endregion\n\n    /**\n     * Checks manager ready state\n     * @readonly\n     * @property {Boolean}\n     */\n    get isReady() {\n        return this.state === ReadyState || this.state === AutoReadyState;\n    }\n\n    waitForReadiness() {\n        return this.await('ready', false);\n    }\n\n    /**\n     * Checks manager recording state\n     * @readonly\n     * @property {Boolean}\n     */\n    get isRecording() {\n        return this.state === RecordingState || this.state === AutoRecordingState;\n    }\n\n    /**\n     * Gets/sets manager auto record option\n     *\n     * @property {Boolean}\n     */\n    get autoRecord() {\n        return this[AUTO_RECORD_PROP];\n    }\n\n    set autoRecord(value) {\n        const me = this;\n\n        if (me.autoRecord != value) {\n            if (value) {\n                stateTransition(me, me.state.onAutoRecordOn, me);\n            }\n            else {\n                stateTransition(me, me.state.onAutoRecordOff, me);\n            }\n        }\n    }\n\n    /**\n     * Starts undo/redo recording transaction.\n     *\n     * @param {String} [title]\n     */\n    startTransaction(title = null) {\n        stateTransition(this, this.state.onStartTransaction, title);\n    }\n\n    /**\n     * Stops undo/redo recording transaction\n     *\n     * @param {String} [title]\n     */\n    stopTransaction(title = null) {\n        stateTransition(this, this.state.onStopTransaction, title);\n    }\n\n    /**\n     * Stops undo/redo recording transaction after {@link #config-autoRecordTransactionStopTimeout} delay.\n     *\n     * @private\n     */\n    stopTransactionDelayed() {\n        stateTransition(this, this.state.onStopTransactionDelayed);\n    }\n\n    /**\n     * Rejects currently recorded transaction.\n     */\n    rejectTransaction() {\n        stateTransition(this, this.state.onRejectTransaction);\n    }\n\n    /**\n     * Gets currently recording STM transaction.\n     * @readonly\n     * @property {Core.data.stm.Transaction}\n     */\n    get transaction() {\n        return this[TRANSACTION_PROP];\n    }\n\n    /**\n     * Gets titles of all recorded undo/redo transactions\n     * @readonly\n     * @property {String[]}\n     */\n    get queue() {\n        return this[QUEUE_PROP].map((t) => t.title);\n    }\n\n    //<debug>\n    get rawQueue() {\n        return this[QUEUE_PROP];\n    }\n    //</debug>\n\n    /**\n     * Gets manager restoring state.\n     * @readonly\n     * @property {Boolean}\n     */\n    get isRestoring() {\n        return this.state === RestoringState;\n    }\n\n    /**\n     * Checks if the manager can undo.\n     *\n     * @property {Boolean}\n     */\n    get canUndo() {\n        return this.state.canUndo(this);\n    }\n\n    /**\n     * Checks if the manager can redo.\n     *\n     * @property {Boolean}\n     */\n    get canRedo() {\n        return this.state.canRedo(this);\n    }\n\n    /**\n     * Undoes current undo/redo transaction.\n     * @param {Number} [steps=1]\n     * @returns {Promise} A promise which is resolved when undo action has been performed\n     */\n    async undo(steps = 1) {\n        if (!this.isReady) {\n            await this.waitForReadiness();\n        }\n        stateTransition(this, this.state.onUndo, steps);\n    }\n\n    /**\n     * Undoes all transactions.\n     * @returns {Promise} A promise which is resolved when undo actions has been performed\n     */\n    async undoAll() {\n        if (!this.isReady) {\n            await this.waitForReadiness();\n        }\n        this.undo(this.length);\n    }\n\n    /**\n     * Redoes current undo/redo transaction.\n     *\n     * @param {Number} [steps=1]\n     * @returns {Promise} A promise which is resolved when redo action has been performed\n     */\n    async redo(steps = 1) {\n        if (!this.isReady) {\n            await this.waitForReadiness();\n        }\n        stateTransition(this, this.state.onRedo, steps);\n    }\n\n    /**\n     * Redoes all transactions.\n     * @returns {Promise} A promise which is resolved when redo actions has been performed\n     */\n    async redoAll() {\n        if (!this.isReady) {\n            await this.waitForReadiness();\n        }\n        this.redo(this.length);\n    }\n\n    /**\n     * Resets undo/redo queue.\n     */\n    resetQueue(/* private */options = { undo : true, redo : true }) {\n        stateTransition(this, this.state.onResetQueue, options);\n    }\n\n    /**\n     * Resets undo queue.\n     */\n    resetUndoQueue() {\n        this.resetQueue({ undo : true });\n    }\n\n    /**\n     * Resets redo queue.\n     */\n    resetRedoQueue() {\n        this.resetQueue({ redo : true });\n    }\n\n    notifyStoresAboutStateRecordingStart(transaction) {\n        this.forEachStore((store) => store.onStmRecordingStart?.(this, transaction));\n\n        /**\n         * Fired upon state recording operation starts.\n         *\n         * @event recordingStart\n         * @param {Core.data.stm.StateTrackingManager} stm\n         * @param {Core.data.stm.Transaction} transaction\n         */\n        this.trigger('recordingStart', { stm : this, transaction });\n    }\n\n    notifyStoresAboutStateRecordingStop(transaction, reason) {\n        this.forEachStore((store) => store.onStmRecordingStop?.(this, transaction, reason));\n\n        /**\n         * Fired upon state recording operation stops.\n         *\n         * @event recordingStop\n         * @param {Core.data.stm.StateTrackingManager} stm\n         * @param {Core.data.stm.Transaction} transaction\n         * @param {Object} reason Transaction stop reason\n         * @param {Boolean} reason.stop Transaction recording has been stopped in a normal way.\n         * @param {Boolean} reason.disabled Transaction recording has been stopped due to STM has been disabled.\n         * @param {Boolean} reason.rejected Transaction recording has been stopped due to transaction has been rejected.\n         */\n        this.trigger('recordingStop', { stm : this, transaction, reason });\n    }\n\n    notifyStoresAboutStateRestoringStart() {\n        this.forEachStore((store) => store.onStmRestoringStart?.(this));\n\n        /**\n         * Fired upon state restoration operation starts.\n         *\n         * @event restoringStart\n         * @param {Core.data.stm.StateTrackingManager} stm\n         */\n        this.trigger('restoringStart', { stm : this });\n    }\n\n    /**\n     * @param {'undo'|'redo'} cause The cause of the restore, if applicable\n     * @internal\n     */\n    notifyStoresAboutStateRestoringStop({ cause, transactions }) {\n        this.forEachStore((store) => store.onStmRestoringStop?.(this));\n\n        /**\n         * Fired upon state restoration operation stops.\n         *\n         * @event restoringStop\n         * @param {Core.data.stm.StateTrackingManager} stm\n         */\n        this.trigger('restoringStop', { stm : this, cause, transactions });\n    }\n\n    notifyStoresAboutQueueReset(options) {\n        this.forEachStore((store) => store.onStmQueueReset?.(this, options));\n\n        /**\n         * Fired upon state undo/redo queue reset.\n         *\n         * @event queueReset\n         * @param {Core.data.stm.StateTrackingManager} stm\n         */\n        this.trigger('queueReset', { stm : this, options });\n    }\n\n    /**\n     * Method to call from model STM mixin upon model update\n     *\n     * @param {Core.data.Model} model\n     * @param {Object} newData\n     * @param {Object} oldData\n     *\n     * @private\n     */\n    onModelUpdate(model, newData, oldData, isInitialUserAction) {\n        stateTransition(this, this.state.onModelUpdate, model, newData, oldData, isInitialUserAction);\n    }\n\n    /**\n     * Method to call from model STM mixin upon tree model child insertion\n     *\n     * @param {Core.data.Model} parentModel Parent model\n     * @param {Number} index Insertion index\n     * @param {Core.data.Model[]} childModels Array of models inserted\n     * @param {Map} context Map with inserted models as keys and objects with previous parent,\n     *                      and index at previous parent.\n     *\n     * @private\n     */\n    onModelInsertChild(parentModel, index, childModels, context) {\n        stateTransition(this, this.state.onModelInsertChild, parentModel, index, childModels, context);\n    }\n\n    /**\n     * Method to call from model STM mixin upon tree model child removal\n     *\n     * @param {Core.data.Model} parentModel\n     * @param {Core.data.Model[]} childModels\n     * @param {Map} context\n     *\n     * @private\n     */\n    onModelRemoveChild(parentModel, childModels, context) {\n        stateTransition(this, this.state.onModelRemoveChild, parentModel, childModels, context);\n    }\n\n    /**\n     * Method to call from store STM mixin upon store models adding\n     *\n     * @param {Core.data.Store} store\n     * @param {Core.data.Model[]} models\n     * @param {Boolean} silent\n     *\n     * @private\n     */\n    onStoreModelAdd(store, models, silent) {\n        stateTransition(this, this.state.onStoreModelAdd, store, models, silent);\n    }\n\n    /**\n     * Method to call from store STM mixin upon store models insertion\n     *\n     * @param {Core.data.Store} store\n     * @param {Number} index\n     * @param {Core.data.Model[]} models\n     * @param {Map} context\n     * @param {Boolean} silent\n     *\n     * @private\n     */\n    onStoreModelInsert(store, index, models, context, silent) {\n        stateTransition(this, this.state.onStoreModelInsert, store, index, models, context, silent);\n    }\n\n    /**\n     * Method to call from store STM mixin upon store models removal\n     *\n     * @param {Core.data.Store} store\n     * @param {Core.data.Model[]} models\n     * @param {Object} context\n     * @param {Boolean} silent\n     *\n     * @private\n     */\n    onStoreModelRemove(store, models, context, silent) {\n        stateTransition(this, this.state.onStoreModelRemove, store, models, context, silent);\n    }\n\n    /**\n     * Method to call from store STM mixin upon store clear\n     *\n     * @param {Core.data.Store} store\n     * @param {Core.data.Model[]} allRecords\n     * @param {Boolean} silent\n     *\n     * @private\n     */\n    onStoreRemoveAll(store, allRecords, silent) {\n        stateTransition(this, this.state.onStoreRemoveAll, store, allRecords, silent);\n    }\n\n    // UI key event handling\n    onUndoKeyPress(event) {\n        const me = this;\n\n        if (me.enabled) {\n            if (event.shiftKey) {\n                if (me.canRedo) {\n                    event.preventDefault();\n                    me.redo();\n                }\n            }\n            else if (me.canUndo) {\n                event.preventDefault();\n                me.undo();\n            }\n        }\n    }\n\n    stash() {\n        if (this.transaction) {\n            this.stashedTransaction = this.transaction;\n\n            this.rejectTransaction();\n        }\n    }\n\n    applyStash() {\n        if (this.stashedTransaction) {\n            this.startTransaction(this.stashedTransaction.title);\n\n            this.stashedTransaction.redo();\n\n            delete this.stashedTransaction;\n        }\n    }\n}\n","import Base from '../Base.js';\n\n/**\n * @module Core/mixin/Finalizable\n */\n\n/**\n * This mixin provides an asynchronous completion mechanism. This allows a process to coordinate its async actions\n * (such as Ajax requests or user interaction) with cleanup.\n *\n * Consider a context tracking helper class, for example:\n * ```\n *  class Context extends Base.mixin(Finalizable) {\n *      // ...\n *\n *      async finish() {\n *          this.owner.trigger('finish', {\n *              context : this\n *          });\n *\n *          // Wait for any scheduled finalizer to run...\n *          await this.finalize();\n *      }\n *\n *      doFinalize() {\n *          this.destroy();\n *      }\n *  }\n * ```\n *\n * When the `finish` event is processed, the receiver can register a promise for whatever processing it would like to\n * perform:\n * ```\n *  class Foo {\n *      onFinish({ context }) {\n *          context.finalizer = this.askUser(context);\n *      }\n *\n *      async askUser(context) {\n *          //\n *      }\n *  }\n * ```\n * @mixin\n * @internal\n */\nexport default Target => class Finalizable extends (Target || Base) {\n    static get $name() {\n        return 'Finalizable';\n    }\n\n    construct(...args) {\n        super.construct(...args);\n\n        /**\n         * This property can be set any time prior to calling {@link #function-finalize} (i.e., when the\n         * {@link #property-isFinalizing} property goes to `true`). When set, this instance will `await` this\n         * promise before completing the finalization process by calling {@link #function-doFinalize}.\n         * @member {Promise} finalizer\n         */\n        this.finalizer = null;\n\n        /**\n         * This property holds the `Promise` that will resolve when {@link #function-finalize} has completed. It is\n         * set when {@link #function-finalize} is called and cleared on return.\n         * @member {Boolean} finalizing\n         * @readonly\n         * @private\n         */\n        this.finalizing = null;\n\n        /**\n         * This property is `true` once the instance completes the {@link #function-finalize} method.\n         * @member {Boolean} isFinalized\n         * @readonly\n         */\n        this.isFinalized = false;\n\n        /**\n         * This property is set to `true` when {@link #function-finalize} is called.\n         * @member {Boolean} isFinalizing\n         * @readonly\n         */\n        this.isFinalizing = false;\n    }\n\n    /**\n     * This template method is called at the end of {@link #function-finalize}. By default it calls `destroy()`, but\n     * can be replaced by the derived class. This can be useful if it is not the `Finalizable` instance that awaits\n     * the {@link #function-finalize} method.\n     */\n    doFinalize() {\n        this.destroy();\n    }\n\n    /**\n     * This method is called (typically by this instance or its owner) to cleanup this instance while possibly first\n     * waiting for the {@link #property-finalizer} promise to settle. Once settled, the {@link #function-doFinalize}\n     * method is called.\n     * @async\n     */\n    finalize() {\n        const me = this;\n\n        let ret = me.finalizing;\n\n        if (!ret && !me.isFinalized) {\n            me.isFinalizing = true;  // note: we never clear this flag (use isFinalized to know if we're done)\n            // If we are called during finalization, we want to return the same promise, so we cache it away.\n            me.finalizing = ret = me._awaitFinalizer();\n        }\n\n        return ret;\n    }\n\n    async _awaitFinalizer() {\n        const me = this;\n\n        try {\n            await me.finalizer;\n        }\n        finally {\n            // be sure we clean up even if an exception is thrown by the finalizer...\n\n            me.finalizing = null;\n            me.isFinalized = true;\n\n            me.doFinalize();\n        }\n    }\n};\n","import Base from '../../Base.js';\nimport DomHelper from '../../helper/DomHelper.js';\nimport EventHelper from '../../helper/EventHelper.js';\nimport Delayable from '../../mixin/Delayable.js';\nimport Finalizable from '../../mixin/Finalizable.js';\nimport Identifiable from '../../mixin/Identifiable.js';\nimport DomDataStore from '../../data/DomDataStore.js';\nimport Objects from '../../helper/util/Objects.js';\n\n/**\n * @module Core/util/drag/DragContext\n */\n\nconst\n    ABORTED  = Symbol('dragAbort'), // Drag has been aborted\n    INIT     = Symbol('dragInit'),  // Button is down but insufficient movement to start the drag\n    DRAGGING = Symbol('dragDrag'),  // Button is down and movement has started a drag\n    DROPPED  = Symbol('dragDrop'),  // Button has been released and drop has occurred\n    lockDirections = {\n        x : 'horizontal',\n        y : 'vertical'\n    };\n\n/**\n * This class is created during drag operations of {@link Core/mixin/Draggable}. It holds the state of an ongoing drag\n * operation.\n * @extends Core/Base\n * @internal\n */\nexport default class DragContext extends Base.mixin(Finalizable, Delayable, Identifiable) {\n\n    static $name = 'DragContext';\n\n    static get configurable() {\n        return {\n            /**\n             * The element that will have the {@link Core.mixin.Draggable#property-draggingItemCls}. This element is\n             * determined by the {@link Core.mixin.Draggable#config-dragItemSelector}.\n             * @config {HTMLElement}\n             */\n            itemElement : null,\n\n            /**\n             * The `ScrollManager` instance to use for scrolling while dragging.\n             * @config {Core.util.ScrollManager}\n             * @private\n             */\n            scrollManager : null,\n\n            /**\n             * Config for `startMonitoring` call.\n             * @config {Object}\n             * @private\n             */\n            monitoringConfig : null,\n\n            /**\n             * The source of the drag operation.\n             * @config {Core.mixin.Draggable}\n             * @default\n             * @readonly\n             */\n            source : null,\n\n            /**\n             * The current target of the drag.\n             * @member {Core.mixin.Droppable}\n             * @readonly\n             */\n            target : null,\n\n            /**\n             * The current target element of the drag.\n             * @member {HTMLElement}\n             * @private\n             */\n            targetElement : null,\n\n            /**\n             * The minimum distance from the touchstart/mousedown/pointerdown that must be moved to actually start a\n             * drag operation.\n             * @config {Number}\n             * @default\n             * @readonly\n             */\n            threshold : 5,\n\n            /**\n             * The minimum amount of time a touch must be maintained before it will initiate a drag. Movement prior to\n             * this time will cancel the drag in order to allow touch scrolling.\n             * @config {Number}\n             * @default\n             */\n            touchStartDelay : 300\n        };\n    }\n\n    static get identifiable() {\n        return {};\n    }\n\n    /**\n     * The current DOM event being processed.\n     * @member {Event} event\n     * @readonly\n     */\n\n    construct(...args) {\n        super.construct(...args);\n\n        const\n            me = this,\n            { event } = me;\n\n        Object.assign(me, {\n            /**\n             * This property holds the `altKey` state of the most recent event.\n             * @member {Boolean}\n             */\n            altKey : null,\n\n            /**\n             * An array of functions to call when cleaning up the context instance.\n             * @member {Function[]}\n             * @private\n             */\n            cleaners : [],\n\n            /**\n             * This property holds the `ctrlKey` state of the most recent event.\n             * @member {Boolean}\n             */\n            ctrlKey : null,\n\n            /**\n             * Container for data associated with the drag. Data items are added by the {@link Core.mixin.Draggable}\n             * when the drag starts.\n             * @member {Map}\n             * @private\n             */\n            data : new Map(),\n\n            /**\n             * The element from which the drag operation started.\n             * @member {HTMLElement}\n             * @readonly\n             */\n            element : event.target,\n\n            /**\n             * The event that completed the drag (a `mouseup`, `pointerup` or `touchend`).\n             * @member {Event}\n             * @readonly\n             */\n            endEvent : null,\n\n            /**\n             * The most recent `mousemove`, `pointermove` or `touchmove` event.\n             * @member {Event}\n             * @private\n             */\n            lastMoveEvent : null,\n\n            /**\n             * This property holds the `metaKey` state of the most recent event.\n             * @member {Boolean}\n             */\n            metaKey : null,\n\n            /**\n             * The previous {@link #property-target} of the drag.\n             * @member {Core.mixin.Droppable}\n             * @readonly\n             */\n            previousTarget : null,\n\n            /**\n             * The scroll actions reported by the {@link #config-scrollManager}.\n             * @member {Object}\n             * @private\n             */\n            scrollerAction : null,\n\n            /**\n             * This property holds the `shiftKey` state of the most recent event.\n             * @member {Boolean}\n             */\n            shiftKey : null,\n\n            /**\n             * This property holds the current state of the drag process.\n             *\n             * This will be one of the following values:\n             *\n             *  - `DragContext.STATE.INIT` - The button is down but there is insufficient movement to start the drag.\n             *  - `DragContext.STATE.DRAGGING` - The button is down and movement has started the drag.\n             *  - `DragContext.STATE.DROPPED` - The button has been released and drop has occurred.\n             *  - `DragContext.STATE.ABORTED` - The drag has been aborted (this happens if the user presses the `ESC`\n             *    key or if the {@link #function-abort} method is called).\n             *\n             * @member {Symbol}\n             * @readonly\n             * @internal\n             */\n            state : INIT,\n\n            /**\n             * The event that started the drag operation.\n             * @member {Event}\n             * @readonly\n             */\n            startEvent : event,\n\n            /**\n             * The timer that fires when a touch pointermove is allowed to start the drag. A touch pointermove event\n             * prior to this will `abort()` the drag to allow touch scrolling.\n             * @member {Number}\n             * @private\n             */\n            touchStartTimer : null,\n\n            /**\n             * Stores the value from writes to the {@link #property-valid} property.\n             * @member {Boolean}\n             * @private\n             */\n            _valid : true\n        });\n\n        if (('touches' in event) && me.touchStartDelay) {\n            me.touchStartTimer = me.setTimeout(() => me.touchStartTimer = null, me.touchStartDelay, 'touchStartDelay');\n        }\n\n        EventHelper.on({\n            element : globalThis,\n            blur    : 'onWindowBlur',\n            thisObj : me\n        });\n    }\n\n    doDestroy() {\n        const\n            me = this,\n            { source, target } = me;\n\n        me.cleanup();\n\n        if (target?.dropping === me) {\n            target.dropping = null;\n        }\n\n        if (source?.dragging === me) {\n            source.dragging = null;\n        }\n\n        super.doDestroy();\n    }\n\n    onWindowBlur() {\n        if (this.started) {\n            this.abort();\n        }\n    }\n\n    /**\n     * This property is `true` if the {@link #function-abort} method was called and `false` otherwise. This\n     * is typically because the user pressed the ESC key, however, a drag can be aborted for other reasons.\n     * @property {Boolean}\n     * @readonly\n     */\n    get aborted() {\n        return this.state === ABORTED;\n    }\n\n    /**\n     * Returns `true` if the drag has completed either by mouse/pointerup or the {@link #function-abort} method.\n     * @property {Boolean}\n     * @readonly\n     */\n    get completed() {\n        return this.isDestroying || this.aborted || this.endEvent !== null;\n    }\n\n    /**\n     * This property is `true` if the drag {@link #config-threshold} has not yet been reached.\n     * @property {Boolean}\n     * @readonly\n     */\n    get pending() {\n        return this.state === INIT;\n    }\n\n    /**\n     * This property is `true` if the drag {@link #config-threshold} has been reached and the drag operation is active.\n     * @property {Boolean}\n     * @readonly\n     */\n    get started() {\n        return this.state !== INIT && !this.aborted;\n    }\n\n    /**\n     * This property is `true` when the drag is in a valid drop state. This can be set to `false` to indicate the drop\n     * is invalid. Setting to `true` does not ensure that the property will be `true` when next read due to other factors\n     * that are required to make the drop valid. For example, setting `valid = true` will still return `false` if called\n     * before the drag {@link #config-threshold} has not been reached or if the {@link #function-abort} method has been\n     * called.\n     * @property {Boolean}\n     */\n    get valid() {\n        return this.started && this.targetElement != null && this._valid;\n    }\n\n    set valid(v) {\n        this._valid = v;\n    }\n\n    //region Data Access\n\n    /**\n     * Retrieves a data item from the drag source. This method can only be called after the drag has completed.\n     * @param {String|String[]} name The name of the data item.\n     * @returns {*}\n     */\n    async get(name) {\n        if (this.aborted) {\n            throw new Error('Data is not available on aborted drag');\n        }\n        if (!this.completed) {\n            throw new Error('Data is not available until drag completion');\n        }\n\n        if (Array.isArray(name)) {\n            return Promise.all(name.map(s => this.get(s)));\n        }\n\n        let value = this.data.get(name);\n\n        if (typeof value === 'function') {\n            value = await value();\n\n            this.data.set(name, value);\n        }\n\n        return value;\n    }\n\n    /**\n     * Returns `true` if the named data item is present.\n     * @param {String} name The name of the data item.\n     * @returns {Boolean}\n     */\n    has(name) {\n        return this.data.has(name);\n    }\n\n    /**\n     * Retrieves a data item from the drag source if it is available. This will return `true` for an item that was\n     * {@link #function-set} using a renderer function.\n     * @param {String|String[]} name The name of the data item.\n     * @returns {*}\n     */\n    peek(name) {\n        if (this.aborted) {\n            throw new Error('Data is not available on aborted drag');\n        }\n\n        if (Array.isArray(name)) {\n            return name.map(s => this.peek(s));\n        }\n\n        let value = this.data.get(name);\n\n        if (typeof value === 'function') {\n            value = true;\n        }\n\n        return value;\n    }\n\n    /**\n     * Sets a data item for the drag. If a function is passed, it is called to render the data only if that data is\n     * actually requested via the {@link #function-get} method. A data renderer function can be `async`.\n     * @param {String} name The name of the data item.\n     * @param {*} value The value of the data item.\n     */\n    set(name, value) {\n        this.data.set(name, value);\n    }\n\n    //endregion\n    //region Configs\n\n    changeTarget(target, was) {\n        if (target !== was) {\n            const me = this;\n\n            me._target = target;\n            me.previousTarget = was;\n\n            if (was) {\n                was.dropping = null;\n            }\n\n            if (target) {\n                target.dropping = me;  // calls dragEnter/Leave on the target\n\n                if (target.dropping !== me) {  // if (target did not accept us)\n                    target = null;\n\n                    me.valid = false;\n                }\n            }\n\n            me._target = was;\n        }\n\n        return target;\n    }\n\n    updateTarget(target, was) {\n        const me = this;\n\n        if (was) {\n            me.source.dragLeaveTarget(me, was);\n        }\n\n        if (target) {\n            me.valid = true;\n\n            // Always give the target an initial dragMove since feedback/indicators will need to update on move and\n            // the lack of a move on entry will just make that a special case.\n            target.dragMove(me);\n\n            me.source.dragEnterTarget(me);\n        }\n    }\n\n    updateTargetElement(targetElement) {\n        let droppable,\n            droppables,\n            droppableSelector,\n            i,\n            t;\n\n        // We interrogate all encapsulating DOM elements to see if we are in a Droppable's element.\n        // If we find an element which has Droppables registered for it, we attempt to set each as\n        // our target, and go with the first one that accepts us.\n        // changeTarget sets target.dropping to this Context, and the target's dragEnter implementation\n        // may reject it by returning false.\n        for (t = targetElement; t; t = t.parentElement) {\n            droppables = DomDataStore.get(t, 'droppables');\n\n            if (droppables) {\n                for (i = 0; i < droppables.length; ++i) {\n                    droppable = droppables[i];\n\n                    // If the event target is *inside* the Droppable's root, we can ask the Droppable\n                    // to accept this DragContext.\n                    // Otherwise we can get a hit on borders.\n                    if (droppable.dropRootElement.contains(targetElement)) {\n                        droppableSelector = droppable.droppableSelector;\n\n                        // If the target element is not inside the Droppable's selector, give up.\n                        if (!droppableSelector || targetElement.closest(`#${DomHelper.getId(droppable.dropRootElement)} ${droppableSelector}`)) {\n                            this.target = droppable;\n\n                            // The found Droppable accepted this DragContext, so we're done -\n                            // we are using this Droppable.\n                            if (this.target === droppable) {\n                                return;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    //endregion\n    //region Operations\n\n    /**\n     * Aborts the drag. After calling this method, {@link #property-aborted} will be `true`, {@link #property-valid}\n     * will be `false` and {@link #property-completed} will be `true`.\n     */\n    abort() {\n        const\n            me = this,\n            { element, source } = me;\n\n        // Force a synchronous layout so that transitions from this point will work.\n        element?.getBoundingClientRect();\n\n        if (me.state !== DROPPED) {\n            me.state = ABORTED;\n            me.cleanup();\n        }\n\n        source?.endDrag(me);\n    }\n\n    begin() {\n        const\n            me = this,\n            { source } = me,\n            ret = source.beforeDrag(me);\n\n        if (ret !== false) {\n            source.dragging = me;\n        }\n\n        return ret;\n    }\n\n    cleanup() {\n        let cleaner;\n\n        while ((cleaner = this.cleaners.pop())) {\n            cleaner();\n        }\n    }\n\n    end(event) {\n        const\n            me = this,\n            { lastMoveEvent : lastEvent, target } = me,\n            { dragSwallowClickTime } = me.source;\n\n        me.event = me.endEvent = event;\n        me.syncFlags();\n\n        if (me.started) {\n            if (lastEvent?.clientX !== event.clientX || lastEvent?.clientY !== event.clientY ||\n                lastEvent?.target !== event.target) {\n                // Make sure the drop event is preceded by a move to the final position...\n                me.track();\n            }\n\n            if (dragSwallowClickTime) {\n                // Prevent the impending document click from the mouseup event from propagating\n                // into a click on our element.\n                EventHelper.on({\n                    element : document,\n                    capture : true,\n                    expires : dragSwallowClickTime, // In case a click did not ensue, remove the listener\n                    once    : true,\n                    click(event) {\n                        event.stopPropagation();\n                    }\n                });\n            }\n\n            me.state = DROPPED;\n\n            if (target !== me.source) {\n                // If we are the target and not also the source, we need to call dragDrop() now. If we are\n                // the source, dragDrop() will be called by Draggable.\n                target?.dragDrop(me);\n            }\n        }\n    }\n\n    fakeKey(event, down) {\n        const\n            me = this,\n            { lastMoveEvent } = me;\n\n        if (lastMoveEvent && me.element) {\n            let changed;\n\n            // Indicate that this is a 'fake' mousemove event as a result of the keydown\n            lastMoveEvent.isKey = true;\n\n            if (event.key === 'Alt') {\n                if (me.altKey !== down) {\n                    me.altKey = down;\n                    changed = true;\n                }\n            }\n            else if (event.key === 'Control') {\n                if (me.ctrlKey !== down) {\n                    me.ctrlKey = down;\n                    changed = true;\n                }\n            }\n\n            if (changed) {\n                me.event = lastMoveEvent;\n\n                me.track();\n            }\n        }\n    }\n\n    keyDown(event) {\n        if (!this.completed) {\n            if (event.key === 'Escape') {\n                this.abort();\n            }\n            else if (this.isDragToggleKey(event.key)) {\n                this.fakeKey(event, true);\n            }\n        }\n    }\n\n    keyUp(event) {\n        if (!this.completed && this.isDragToggleKey(event.key)) {\n            this.fakeKey(event, false);\n        }\n    }\n\n    getDistance(event) {\n        return EventHelper.getDistanceBetween(this.startEvent, event);\n    }\n\n    isDragToggleKey(key) {\n        return key === 'Control' || key === 'Alt';\n    }\n\n    move(event) {\n        const\n            me = this,\n            { target } = event,\n            distance = me.getDistance(event),\n            significant = distance >= me.threshold;\n\n        me.syncFlags();\n\n        if (me.touchStartTimer) {\n            if (significant) {\n                me.abort();\n            }\n            return;\n        }\n\n        if (target && target.nodeType === Node.ELEMENT_NODE) {\n            if (significant && !me.started) {\n                me.event = event;\n\n                // triggers beforeDragStart, dragStart. returning false from beforeDragStart aborts drag\n                if (me.start() === false) {\n                    me.abort();\n                    return;\n                }\n            }\n\n            // With resize observer polyfill scroll event might fire after drop is completed but before listener is\n            // removed\n            if (me.started && !me.completed) {\n                me.lastMoveEvent = me.event = event;\n\n                // to prevent view drag (scroll) on ipad\n                if (event.type === 'touchmove') {\n                    event.preventDefault();\n                    event.stopImmediatePropagation();\n                }\n\n                me.track();\n            }\n        }\n    }\n\n    start() {\n        const\n            me = this,\n            { scrollManager, monitoringConfig, source } = me,\n            { draggingBodyCls : activeCls, dragLock } = source,\n            element = /* source.dragWithin || */ source.dragRootElement;\n\n        me.state = DRAGGING;\n\n        // Now that the drag drop is confirmed to be starting, activate the configured scrollManager if present\n        if (scrollManager) {\n            const detacher = scrollManager.startMonitoring(Objects.merge({\n                scrollables : [{\n                    element\n                }],\n                direction : lockDirections[dragLock] || dragLock || 'both',\n                callback(scrollerAction) {\n                    const { lastMoveEvent } = me;\n\n                    if (lastMoveEvent && me.element) {\n                        // Indicate that this is a 'fake' mousemove event as a result of the scrolling\n                        lastMoveEvent.isScroll = true;\n\n                        me.event = lastMoveEvent;\n                        me.scrollerAction = scrollerAction;\n\n                        me.track();\n\n                        me.scrollerAction = null;\n                    }\n                }\n            }, monitoringConfig));\n\n            me.cleaners.push(detacher);\n        }\n\n        // Global informational class for when DragHelper is dragging\n        const rootEl = source.dragRootElement.closest('.b-outer') || document.body;\n        rootEl.classList.add(activeCls);\n\n        me.cleaners.push(() => rootEl.classList.remove(activeCls));\n\n        if (source.startDrag(me) === false) {\n            me.cleanup();\n\n            return false;\n        }\n    }\n\n    syncFlags() {\n        const\n            me = this,\n            { event } = me;\n\n        me.altKey = event.altKey;\n\n        // Our EventHelper events are \"unfixed\" after processing, so the meta->ctrl\n        // modifier mapping will not persist. We must do the mapping here.\n        me.ctrlKey = event.ctrlKey || event.metaKey;\n        me.metaKey = event.metaKey;\n        me.shiftKey = event.shiftKey;\n    }\n\n    track() {\n        const\n            me = this,\n            { event, source, target } = me;\n\n        let targetElement = event.target,\n            touch;\n\n        // NOTE: we cannot syncFlags here since we are called to pass along keydown events as movement updates\n\n        // \"pointer-events:none\" touchmove has no effect for the touchmove event target, meaning we cannot know\n        // what's under the cursor as easily in touch devices\n        if (event.type === 'touchmove') {\n            touch = event.changedTouches[0];\n\n            // From MDN:\n            //  * clientX/Y - the coordinates of the touch point relative to the left/top edge of the browser viewport,\n            //    not including any scroll offset.\n            //  * The elementFromPoint() method returns the topmost Element at the specified coordinates (relative to\n            //    the viewport).\n            targetElement = DomHelper.elementFromPoint(touch.clientX, touch.clientY);\n        }\n\n        me.targetElement = targetElement;  // when we change elements, update me.target\n\n        if (target === me.target) {\n            // if we have a target and that did not change due to setting targetElement, we need to inform the target\n            // of the drag move\n            target?.dragMove(me);\n        }\n\n        source.trackDrag(me);\n    }\n\n    //endregion\n}\n\nDragContext.prototype.STATE = DragContext.STATE = Object.freeze({\n    ABORTED,\n    INIT,\n    DRAGGING,\n    DROPPED\n});\n","import Base from '../../Base.js';\nimport Factoryable from '../../mixin/Factoryable.js';\n\n/**\n * @module Core/util/drag/DragProxy\n */\n\n/**\n * Drag proxies are helper classes that represent the object being dragged in some visual way. This is an abstract\n * base with which particular drag proxy classes (such as, {@link Core.util.drag.DragTipProxy} are registered.\n *\n * Derived classes the various template methods of this class to manage their particular form of visual feedback.\n * @extends Core/Base\n * @internal\n */\nexport default class DragProxy extends Base.mixin(Factoryable) {\n    static get type() {\n        return 'default';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * The currently active `DragContext`. This context will be active prior to be passed to the proxy. This\n             * config is set by {@link #function-dragStart} and cleared by {@link #function-dragEnd}.\n             * @config {Core.util.drag.DragContext}\n             */\n            dragging : null\n        };\n    }\n\n    static get factoryable() {\n        return {\n            defaultType : DragProxy\n        };\n    }\n\n    /**\n     * The `Draggable` instance that owns this drag proxy.\n     * @member {Core.mixin.Draggable} owner\n     * @readonly\n     */\n\n    //region Configs\n\n    updateDragging(drag, was) {\n        if (was) {\n            this.close(was);\n        }\n\n        if (drag) {\n            this.open(drag);\n        }\n    }\n\n    //endregion\n\n    //region Operations\n\n    /**\n     * This template method is called when {@link #config-dragging} is reset to `null`.\n     * @param {Core.util.drag.DragContext} drag The drag instance.\n     */\n    close(drag) {\n        // template\n    }\n\n    /**\n     * This template method is called when {@link #config-dragging} is set to a non-`null` value.\n     * @param {Core.util.drag.DragContext} drag The drag instance.\n     */\n    open(drag) {\n        // template\n    }\n\n    //endregion\n\n    //region Drag Processing\n\n    /**\n     * This template method is called by the `Draggable` instance when the drag officially starts.\n\n     * This sets the {@link #config-dragging} config to `drag`, which triggers the call to {@link #function-open}.\n     * @param {Core.util.drag.DragContext} drag The drag instance.\n     */\n    dragStart(drag) {\n        this.dragging = drag;\n    }\n\n    /**\n     * This template method is called by the `Draggable` instance as drag movement occurs.\n     * @param {Core.util.drag.DragContext} drag The drag instance.\n     */\n    dragMove(drag) {\n        // template\n    }\n\n    /**\n     * This template method is called by the `Draggable` instance when the drag completes.\n     *\n     * This sets the {@link #config-dragging} config to `null`, which triggers the call to {@link #function-close}.\n     * @param {Core.util.drag.DragContext} drag The drag instance.\n     */\n    dragEnd(drag) {\n        this.dragging = null;\n    }\n\n    //endregion\n}\n\nDragProxy.initClass();\n","import Base from '../Base.js';\nimport EventHelper from '../helper/EventHelper.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\n\nimport DragContext from '../util/drag/DragContext.js';\nimport DragProxy from '../util/drag/DragProxy.js';\n\n/**\n * @module Core/mixin/Draggable\n */\n\n/**\n * Mix this into another class to enable drag/drop support.\n *\n * To use a draggable, it must be associated with an element that contains draggable content:\n *\n * ```javascript\n *  let draggable = new MyDraggable({\n *      dragRootElement : someElement\n *  });\n * ```\n *\n * Once the `dragRootElement` is assigned, any element inside that root is a candidate for dragging. To limit the\n * allowed element, set the {@link #config-dragSelector} config.\n *\n * ```javascript\n *  let draggable = new MyDraggable({\n *      dragRootElement : someElement,\n *      dragSelector    : '.drag-this'\n *  });\n * ```\n * @mixin\n * @internal\n */\nexport default Target => class Draggable extends (Target || Base) {\n    static get $name() {\n        return 'Draggable';\n    }\n\n    //region Configs\n\n    static get configurable() {\n        return {\n            /**\n             * The current `DragContext`. This is created immediately on pointerdown but does not become active until\n             * some movement occurs. This {@link #config-dragThreshold threshold} is configurable.\n             * @member {Core.util.drag.DragContext}\n             * @readonly\n             */\n            dragging : {\n                $config : 'nullify',\n                value   : null\n            },\n\n            /**\n             * A CSS selector to use to ascend from the {@link #config-dragRootElement} to find the element that will\n             * gain the {@link #property-draggingCls} and {@link #property-draggingStartedCls} CSS classes.\n             * @config {String}\n             */\n            draggingClsSelector : null,\n\n            /**\n             * The listeners to add to the `document` during a drag.\n             * @config {Object}\n             * @private\n             */\n            dragDocumentListeners : {\n                element : document,\n                keydown : 'onDragKeyDown',\n                keyup   : 'onDragKeyUp',\n\n                // On mobile, a long-press will (sometimes) trigger a context menu, so we suppress it:\n                contextmenu : 'onDragContextMenu',\n\n                // We don't use pointermove/up because they get snared in the \"touch-action\" vs \"pan-x/y\" trap and we\n                // cannot prevent panning (aka scrolling) in response to move events if we go that way:\n                mousemove : 'onDragPointerMove',\n                mouseup   : 'onDragPointerUp',\n\n                // Touch desktops don't fire touchend event when touch has ended, instead pointerup is fired. iOS does\n                // fire touchend:\n                pointerup : 'onDragPointerUp',\n                touchend  : 'onDragPointerUp',\n                touchmove : {\n                    handler : 'onDragPointerMove',\n                    passive : false // We need to be able to preventDefault on the touchmove\n                }\n            },\n\n            /**\n             * A CSS selector to use to ascend from the drag element to find the element that will gain the\n             * {@link #property-draggingItemCls} CSS class. If not supplied, the drag element will gain this CSS\n             * class.\n             * @config {String}\n             */\n            dragItemSelector : null,\n\n            /**\n             * A CSS class to add to items identified by the {@link #config-dragItemSelector} when the mouse\n             * enters.\n             * @config {String}\n             */\n            dragItemOverCls : null,\n\n            /**\n             * A function to call when the pointer enters a {@link #config-dragItemSelector}.\n             * @config {Function} onDragItemMouseEnter\n             */\n\n            /**\n             * A function to call when the pointer moves inside a {@link #config-dragItemSelector}.\n             * @config {Function} onDragItemMouseMove\n             */\n\n            /**\n             * A function to call when the pointer leaves a {@link #config-dragItemSelector}.\n             * @config {Function} onDragItemMouseLeave\n             */\n\n            /**\n             * Configure as `'x'` to lock dragging to the `X` axis (the drag will only move horizontally) or `'y'`\n             * to lock dragging to the `Y` axis (the drag will only move vertically).\n             * @config {'x'|'y'|null}\n             */\n            dragLock : null,\n\n            /**\n             * The minimum distance a drag must move to be considered a drop and not\n             * {@link Core.util.drag.DragContext#property-aborted aborted}.\n             * @config {Number}\n             * @default\n             */\n            dragMinDistance : 1,\n\n            /**\n             * The {@link Core.util.drag.DragProxy drag proxy} is a helper object that can be used to display feedback\n             * during a drag.\n             * @config {DragProxyConfig|Core.util.drag.DragProxy}\n             */\n            dragProxy : {\n                $config : ['lazy', 'nullify'],\n\n                value : null\n            },\n\n            /**\n             * The outer element where dragging will operate (attach events to it and use as root limit when looking\n             * for ancestors).\n             * @config {HTMLElement}\n             */\n            dragRootElement : {\n                $config : 'nullify',\n\n                value : null\n            },\n\n            /**\n             * Set to `true` to allow a drag to drop on to the same element from which the drag started.\n             * @config {Boolean}\n             * @default\n             */\n            dragSameTargetDrop : false,\n\n            /**\n             * A CSS selector used to determine which element(s) can be dragged.\n             * @config {String}\n             * @default\n             */\n            dragSelector : null,\n\n            /**\n             * A CSS selector used to identify child element(s) that should not trigger drag.\n             * @config {String}\n             */\n            ignoreSelector : null,\n\n            /**\n             * The number of milliseconds after a pointerup to ignore click events on the document. This\n             * is used to avoid the \"up\" event itself generating a `click` on the target.\n             * @config {Number}\n             * @default\n             */\n            dragSwallowClickTime : 50,\n\n            /**\n             * The amount of pixels to move pointer/mouse before it counts as a drag operation.\n             * @config {Number}\n             * @default\n             */\n            dragThreshold : 5,\n\n            /**\n             * The number of milliseconds that must elapse after a `touchstart` event before it is considered a drag. If\n             * movement occurs before this time, the drag is aborted. This is to allow touch swipes and scroll gestures.\n             * @config {Number}\n             * @default\n             */\n            dragTouchStartDelay : 300,\n\n            /**\n             * The CSS selector to use to identify the closest valid target from the event target.\n             * @config {String}\n             */\n            dropTargetSelector : null,\n\n            /**\n             * The {@link #config-dragSelector} item the mouse is currently over.\n             * @member {HTMLElement} overItem\n             * @readonly\n             */\n            overItem : null,\n\n            testConfig : {\n                dragSwallowClickTime : 50\n            }\n        };\n    }\n\n    static get properties() {\n        return {\n            /**\n             * The CSS class to add to the {@link #config-dragRootElement} (or {@link #config-draggingClsSelector} from\n             * there) as soon as the pointerdown event occurs.\n             * @member {String}\n             * @readonly\n             */\n            draggingCls : 'b-draggable-active',\n\n            /**\n             * The CSS class to add to the `body` element as soon as the {@link #config-dragThreshold} is reached and\n             * an actual drag is in progress.\n             * @member {String}\n             * @readonly\n             */\n            draggingBodyCls : 'b-draghelper-active',  // match DragHelper since we need the same treatment\n\n            /**\n             * The CSS class to add to the element being dragged as soon as the pointerdown event occurs.\n             * @member {String}\n             * @readonly\n             */\n            draggingItemCls : 'b-dragging-item',\n\n            /**\n             * The CSS class to add to the {@link #config-dragRootElement} (or {@link #config-draggingClsSelector} from\n             * there) as soon as the {@link #config-dragThreshold} is reached and an actual drag is in progress.\n             * @member {String}\n             * @readonly\n             */\n            draggingStartedCls : 'b-draggable-started',\n\n            /**\n             * The CSS class that is added to the {@link #config-dragRootElement}, i.e., `'b-draggable'`.\n             * @property {String}\n             * @readonly\n             */\n            draggableCls : 'b-draggable'\n        };\n    }\n\n    //endregion\n\n    //region Drag Processing\n    // These template methods are implemented by derived classes as desired. There is only one overlap with Droppable's\n    // template methods (dragDrop) so that a class can easily mixin both Draggable and Droppable and always distinguish\n    // whether it is acting as the source, the target, or both.\n\n    /**\n     * This template method is called when the mousedown of a potential drag operation occurs. This happens before the\n     * gesture is known to be a drag, meaning the {@link #config-dragThreshold} has not been reached. This method\n     * should initialize the {@link Core.util.drag.DragContext} using the {@link Core.util.drag.DragContext#function-set}\n     * method. Alternatively, this method may return `false` to prevent the drag operation.\n     *\n     * *Important:* Because no drag has occurred at the time this method is called, only minimal processing should be\n     * done (such as initializing the {@link Core.util.drag.DragContext}). Anything more should be done in the\n     * {@link #function-dragStart} method or in response to the {@link #event-dragStart} event which happen only if\n     * the user drags the mouse before releasing the mouse button.\n     * @param {Core.util.drag.DragContext} drag\n     */\n    beforeDrag(drag) {\n        const\n            { dragRootElement, dragSelector, ignoreSelector } = this,\n            target = dragSelector && drag.element.closest(dragSelector);\n\n        return !dragSelector || Boolean(target &&\n            target === dragRootElement ||\n            (dragRootElement.contains(target) && (!ignoreSelector || !drag.element.matches(ignoreSelector)))\n        );\n    }\n\n    /**\n     * This template method is called when the drag operation starts. This occurs when the {@link #config-dragThreshold}\n     * has been reached.\n     * Your implementation may return `false` to prevent the startup of the drag operation.\n     * @param {Core.util.drag.DragContext} drag\n     */\n    dragStart(drag) {\n        // template\n    }\n\n    /**\n     * This template method is called as the drag moves. This occurs on each mouse/pointer/touchmove event.\n     * @param {Core.util.drag.DragContext} drag\n     */\n    dragOver(drag) {\n        // template\n    }\n\n    /**\n     * This template method is called when the drag enters a {@link Core.mixin.Droppable target}.\n     * @param {Core.util.drag.DragContext} drag\n     */\n    dragEnterTarget(drag) {\n        // template\n    }\n\n    /**\n     * This template method is called when the drag leaves a {@link Core.mixin.Droppable target}.\n     * @param {Core.util.drag.DragContext} drag\n     * @param {Core.mixin.Droppable} oldTarget The previous value of `drag.target`.\n     */\n    dragLeaveTarget(drag, oldTarget) {\n        // template\n    }\n\n    /**\n     * This template method is called when the drag operation completes. This occurs on the pointerup event.\n     *\n     * This method is not called if the drag is {@link Core.util.drag.DragContext#property-aborted aborted}.\n     * @param {Core.util.drag.DragContext} drag\n     */\n    dragDrop(drag) {\n        // template\n    }\n\n    /**\n     * This template method is called when the drag operation completes. This occurs on the pointerup event or perhaps\n     * a keypress event.\n     *\n     * This method is always called, even if the drag is {@link Core.util.drag.DragContext#property-aborted aborted}.\n     * @param {Core.util.drag.DragContext} drag\n     */\n    dragEnd(drag) {\n        // template\n    }\n\n    //endregion\n\n    //region Drag Management\n    // These methods are called by the DragContext and generally manage element updates (adding/removing classes) or\n    // event firing. In most cases these methods then call a corresponding Drag Processing template method intended\n    // for derived classes to implement.\n\n    get activeDrag() {\n        const { dragging : drag } = this;\n\n        return (drag?.started && !drag.completed) ? drag : null;\n    }\n\n    /**\n     * Return the `Events` instance from which drag events are fired.\n     * @internal\n     * @property {Core.mixin.Events}\n     */\n    get dragEventer() {\n        return this.trigger ? this : null;  // simple Events feature detector\n    }\n\n    get draggingClassElement() {\n        const { draggingClsSelector, dragRootElement } = this;\n\n        return draggingClsSelector ? dragRootElement?.closest(draggingClsSelector) : dragRootElement;\n    }\n\n    beginDrag(drag) {\n        const { draggingCls, draggingClassElement } = this;\n\n        if (draggingCls && draggingClassElement) {\n            draggingClassElement.classList.add(draggingCls);\n            drag.cleaners.push(() => draggingClassElement.classList.remove(draggingCls));\n        }\n    }\n\n    async endDrag(drag) {\n        const\n            me = this,\n            { dragEventer, dragProxy } = me;\n\n        if (drag.valid) {\n            // The implementation may be async. If so, any Promise must always be\n            // propagated back to a point which may have to await it\n            await me.dragDrop(drag);\n        }\n\n        if (me.isDestroyed) {\n            return;\n        }\n\n        if (drag.pending) {\n            drag.destroy();\n        }\n        else {\n            me.dragEnd(drag);\n            dragProxy?.dragEnd(drag);\n\n            /**\n             * This event is fired when a drag gesture is completed due to the user aborting it (with the `ESC` key) or\n             * if the {@link Core.util.drag.DragContext#function-abort} method was called.\n             * @event dragCancel\n             * @param {Core.mixin.Draggable} source The draggable instance that fired the event.\n             * @param {Core.util.drag.DragContext} drag The drag context.\n             * @param {Event} event The browser event.\n             */\n            /**\n             * This event is fired when a drag gesture is completed successfully.\n             *\n             * This event is **not** fired if the drag was aborted by the user pressing the `ESC` key or if the\n             * {@link Core.util.drag.DragContext#function-abort} method was called.\n             * @event drop\n             * @param {Core.mixin.Draggable} source The draggable instance that fired the event.\n             * @param {Core.util.drag.DragContext} drag The drag context.\n             * @param {Event} event The browser event.\n             */\n            dragEventer?.trigger(drag.valid ? 'drop' : 'dragCancel', { drag, event : drag.event });\n\n            // The drag context could have registered finalizers added by the above methods or event. If so, we need to\n            // wait for finalization of the drag before we clear our \"dragging\" config.\n            me.finalizeDrag(drag);\n        }\n    }\n\n    async finalizeDrag(drag) {\n        await drag.finalize?.();\n\n        // The doFinalize() method of DragContext is called by the above await... which nulls our \"dragging\" config\n    }\n\n    moveDrag(drag) {\n        if (this.dragOver(drag) !== false) {\n            const { dragEventer, dragProxy } = this;\n\n            dragProxy?.dragMove(drag);\n\n            /**\n             * This event is fired as a drag gesture progresses due to cursor movement.\n             * @event drag\n             * @param {Core.mixin.Draggable} source The draggable instance that fired the event.\n             * @param {Core.util.drag.DragContext} drag The drag context.\n             * @param {Event} event The browser event.\n             */\n            dragEventer?.trigger('drag', { drag, event : drag.event });\n        }\n    }\n\n    setupDragContext(event) {\n        const\n            me = this,\n            { dragItemSelector, id } = me,\n            { target } = event;\n\n        return {\n            event,\n            id              : id ? `${id}-drag-${me._nextDragId = (me._nextDragId || 0) + 1}` : null,\n            itemElement     : dragItemSelector ? target.closest(dragItemSelector) : target,\n            touchStartDelay : me.dragTouchStartDelay,\n            source          : me,\n            threshold       : me.dragThreshold\n        };\n    }\n\n    startDrag(drag) {\n        const\n            { draggingStartedCls, draggingClassElement, draggingItemCls, dragEventer, dragProxy } = this,\n            { itemElement } = drag;\n\n        /**\n         * This event is fired prior to starting a drag gesture. This does not occur immediately after the user\n         * performs the pointer/mousedown/touchstart but only after the {@link #config-dragThreshold} amount of\n         * movement has taken place.\n         *\n         * The drag is canceled if a listener returns `false`.\n         * @event beforeDragStart\n         * @param {Core.mixin.Draggable} source The draggable instance that fired the event.\n         * @param {Core.util.drag.DragContext} drag The drag context.\n         * @param {Event} event The browser event.\n         * @preventable\n         */\n        if (dragEventer?.trigger('beforeDragStart', { drag, event : drag.event }) === false) {\n            return false;\n        }\n\n        if (draggingStartedCls && draggingClassElement) {\n            draggingClassElement.classList.add(draggingStartedCls);\n            drag.cleaners.push(() => draggingClassElement.classList.remove(draggingStartedCls));\n        }\n\n        if (draggingItemCls && itemElement) {\n            itemElement.classList.add(draggingItemCls);\n            drag.cleaners.push(() => itemElement.classList.remove(draggingItemCls));\n        }\n\n        dragProxy?.dragStart(drag);\n\n        const result = this.dragStart(drag);\n\n        if (result !== false) {\n            /**\n             * This event is fired when a drag gesture has started. This does not occur immediately after the user\n             * performs the pointer/mousedown/touchstart but only after the {@link #config-dragThreshold} amount of\n             * movement has taken place.\n             * @event dragStart\n             * @param {Core.mixin.Draggable} source The draggable instance that fired the event.\n             * @param {Core.util.drag.DragContext} drag The drag context.\n             * @param {Event} event The browser event.\n             */\n            dragEventer?.trigger('dragStart', { drag, event : drag.event });\n        }\n\n        return result;\n    }\n\n    trackDrag(drag) {\n        const { dropTargetSelector } = this;\n\n        drag.valid = !(dropTargetSelector && !drag.targetElement?.closest(dropTargetSelector));\n\n        this.moveDrag(drag);\n    }\n\n    //endregion\n\n    //region Configs\n\n    configureListeners(drag) {\n        const\n            me = this,\n            listeners = ObjectHelper.assign({\n                thisObj : me\n            }, me.dragDocumentListeners);\n\n        // Only listen for the events related to how the drag was initiated:\n        if ('touches' in drag.startEvent) {\n            delete listeners.mousemove;\n            delete listeners.mouseup;\n        }\n        else {\n            delete listeners.contextmenu;\n            delete listeners.touchmove;\n            delete listeners.touchend;\n            delete listeners.pointerup;\n        }\n\n        return listeners;\n    }\n\n    //endregion\n\n    //region Configs\n\n    updateDragging(drag, old) {\n        const me = this;\n\n        if (drag) {\n            const listeners = me.configureListeners(drag);\n\n            drag.cleaners.push(EventHelper.on(listeners));\n\n            me.beginDrag(drag);\n        }\n        else if (old) {\n            old.destroy();\n        }\n    }\n\n    changeDragProxy(config, existing) {\n        return DragProxy.reconfigure(existing, config, {\n            owner : this,\n\n            defaults : {\n                owner : this\n            }\n        });\n    }\n\n    updateDragRootElement(rootEl, was) {\n        const\n            me = this,\n            {\n                draggableCls,\n                dragItemSelector,\n                onDragItemMouseMove\n            }  = me;\n\n        was?.classList.remove(draggableCls);\n        me._dragRootDetacher?.();\n\n        if (rootEl) {\n            const listeners = {\n                thisObj    : me,\n                element    : rootEl,\n                mousedown  : 'onDragMouseDown',\n                // We have touchstart listener in place since Siesta/Chrome can send these events even on non-touch\n                // devices:\n                touchstart : 'onDragTouchStart',\n\n                // On iOS, because we use pointerup to represent the drop gesture,\n                // the initiating pointerdown event is captured, and its target is\n                // the original start target. We must always release pointer capture.\n                // https://github.com/bryntum/support/issues/4111\n                pointerdown : e => e.pointerId && e.target.releasePointerCapture?.(e.pointerId)\n            };\n\n            if (onDragItemMouseMove) {\n                listeners.mousemove = {\n                    delegate : dragItemSelector,\n                    handler  : 'onDragItemMouseMove'\n                };\n            }\n\n            if (me.dragItemOverCls || onDragItemMouseMove || me.onDragItemMouseEnter || me.onDragItemMouseLeave) {\n                Object.assign(listeners, {\n                    mouseover : {\n                        delegate : dragItemSelector,\n                        handler  : 'onDragItemMouseOver'\n                    },\n                    mouseout : {\n                        delegate : dragItemSelector,\n                        handler  : 'onDragItemMouseOut'\n                    }\n                });\n            }\n\n            rootEl.classList.add(draggableCls);\n            me._dragRootDetacher = EventHelper.on(listeners);\n        }\n    }\n\n    //endregion\n\n    //region Events\n\n    onDragItemMouseOver(event) {\n        this.overItem = event;\n    }\n\n    onDragItemMouseOut(event) {\n        if (!this.dragging) {\n            this.overItem = event;\n        }\n    }\n\n    changeOverItem(event) {\n        this.enterLeaveEvent = event;\n\n        if (event.type === 'mouseout') {\n            // Must return null, not undefined to unset the overItem property\n            return event.relatedTarget?.closest(this.dragItemSelector) || null;\n        }\n        else {\n            return event.target.closest(this.dragItemSelector);\n        }\n    }\n\n    updateOverItem(overItem, oldOverItem) {\n        const\n            me                  = this,\n            { dragItemOverCls } = me;\n\n        if (oldOverItem) {\n            dragItemOverCls && oldOverItem.classList.remove(dragItemOverCls);\n            me.onDragItemMouseLeave?.(me.enterLeaveEvent, oldOverItem);\n        }\n\n        if (overItem) {\n            dragItemOverCls && overItem.classList.add(dragItemOverCls);\n            me.onDragItemMouseEnter?.(me.enterLeaveEvent, overItem);\n        }\n    }\n\n    onDragContextMenu(event) {\n        event.preventDefault();\n    }\n\n    onDragKeyDown(event) {\n        this.dragging.keyDown(event);\n    }\n\n    onDragKeyUp(event) {\n        this.dragging.keyUp(event);\n    }\n\n    /**\n     * Grab draggable element on mouse down.\n     * @param {Event} event\n     * @private\n     */\n    onDragMouseDown(event) {\n        // only dragging with left mouse button\n        if (event.button === 0) {\n            this.onDragPointerDown(event);\n        }\n    }\n\n    /**\n     * Grab draggable element on pointerdown.\n     * @param {Event} event\n     * @private\n     */\n    onDragPointerDown(event) {\n        let { dragging : drag } = this;\n\n        // If a drag is ongoing already, finalize it and don't proceed with new drag (happens if user does pointerup\n        // outside browser window). Also handles the edge case of trying to start a new drag while previous is awaiting\n        // finalization, in which case it just bails out.\n        if (!drag) {\n            drag = this.setupDragContext(event);\n\n            // The DragContext consults our beforeDrag handler, and if that succeeds, the Context injects itself into\n            // this instance as our draggable (\"this.dragging\").\n            // NOTE: This is not yet an actual drag. At this stage, the context is used to detect movement prior to\n            // mouseup (aka \"a drag\"). Should the requisite amount of movement occur, the drag will be started.\n            if (drag) {\n                drag = new DragContext(drag);\n\n                if (drag.begin() === false) {\n                    drag.destroy();\n                }\n            }\n        }\n        else if (!drag.isFinalizing) {\n            drag.abort();\n        }\n    }\n\n    // Set by the DragContext in its begin method, and auto-nullified at destruction.\n    changeDragging(value, was) {\n        was?.destroy();\n        return value;\n    }\n\n    onDragPointerMove(event) {\n        const { dragging : drag } = this;\n\n        if (drag && !drag.completed) {\n            drag?.move(event);\n        }\n    }\n\n    onDragPointerUp(event) {\n        const { dragging : drag } = this;\n\n        if (drag && !drag.completed) {\n            drag.end(event);\n\n            this.endDrag(drag);\n        }\n    }\n\n    /**\n     * @param {Event} event\n     * @private\n     */\n    onDragTouchStart(event) {\n        // only allowing one finger for now...\n        if (event.touches.length === 1) {\n            this.onDragPointerDown(event);\n        }\n    }\n\n    //endregion\n};\n","import Base from '../Base.js';\nimport DomDataStore from '../data/DomDataStore.js';\n\n/**\n * @module Core/mixin/Droppable\n */\n\n/**\n * Mix this into another class to enable drop support and receive drops from {@link Core.mixin.Draggable draggables}.\n *\n * There are 4 basic methods that a droppable implements. These methods are called as drag operations occur:\n *\n * ```javascript\n *  class MyDroppable extends Base.mixin(Droppable) {\n *      dragEnter(drag) {\n *          // a drag has entered the drop zone... create some type of drop indicator perhaps\n *      }\n *\n *      dragMove(drag) {\n *          // a drag has changed position... update drop indicators\n *      }\n *\n *      dragDrop(drag) {\n *          // drop has occurred... process data from the drag context\n *      }\n *\n *      dragLeave(drag) {\n *          // the drag has left the drop zone... cleanup indicators\n *      }\n *  }\n * ```\n *\n * Instances of `Droppable` are associated with an element to receive drag operations:\n *\n * ```javascript\n *  let target = new MyDroppable({\n *      dropRootElement : someElement\n *  });\n * ```\n * @mixin\n * @internal\n */\nexport default Target => class Droppable extends (Target || Base) {\n    static get $name() {\n        return 'Droppable';\n    }\n\n    //region Configs\n\n    static get configurable() {\n        return {\n            /**\n             * A selector, which, if specified, narrows the dropability to child elements of the\n             * {@link #config-dropRootElement} which match this selector.\n             * @config {String}\n             */\n            droppableSelector : null,\n\n            /**\n             * The current `DragContext`. This is set when a drag enters this target. Changing this config causes the\n             * {@link #function-dragEnter} and {@link #function-dragLeave} methods to be called. If `dragEnter` returns\n             * `false` for a drag, this value will be set to `null`.\n             * @member {Core.util.drag.DragContext}\n             * @readonly\n             */\n            dropping : null,\n\n            /**\n             * Set this config to the element where drops should be received. When set, the `b-droppable` CSS class is\n             * added to the element and the `Droppable` instance is associated with that element so that it can be\n             * found by {@link Core.mixin.Draggable draggables}.\n             * @config {HTMLElement}\n             */\n            dropRootElement : {\n                $config : 'nullify',\n\n                value : null\n            }\n        };\n    }\n\n    /**\n     * Return the `Events` instance from which drop events are fired.\n     * @internal\n     * @property {Core.mixin.Events}\n     */\n    get dropEventer() {\n        return this.trigger ? this : null;  // simple Events feature detector\n    }\n\n    /**\n     * Returns the CSS class that is added to the {@link #config-dropRootElement}, i.e., `'b-droppable'`.\n     * @property {String}\n     * @readonly\n     */\n    get droppableCls() {\n        return 'b-droppable';\n    }\n\n    //endregion\n    //region Drop Management\n\n    /**\n     * This method is called when a drag enters this droppable's `dropRootElement`. In many cases, this method is used\n     * to create some sort of drop indicator to provide user feedback.\n     *\n     * If this method does not return `false`, the {@link #property-dropping} config will retain the given `drag` context\n     * which was set prior to this method being called.\n     *\n     * If this method returns `false`, the drop will not be accepted. Neither {@link #function-dragDrop} nor\n     * {@link #function-dragLeave} will be called for this drop. If the drag leaves this target and re-enters, this\n     * method will be called again. While `dropping` will already be updated before this method is called, it will be\n     * reset to `null` in this case.\n     *\n     * The base class implementation of this method fires the {@link #event-dragEnter} event.\n     * @param {Core.util.drag.DragContext} drag\n     * @returns {Boolean}\n     */\n    dragEnter(drag) {\n        /**\n         * This event is fired when a drag enters this droppable's `dropRootElement`. It is fired by the droppable's\n         * {@link #function-dragEnter} method.\n         * @event dragEnter\n         * @param {Core.mixin.Draggable} source The draggable instance that fired the event.\n         * @param {Core.util.drag.DragContext} drag The drag context.\n         * @param {Event} event The browser event.\n         */\n        return this.dropEventer?.trigger('dragEnter', { drag, event : drag.event });\n    }\n\n    /**\n     * This method is called when the drag that was previously announced via {@link #function-dragEnter} moves to a new\n     * position. This is typically where drop indicators are updated to reflect the new position.\n     *\n     * The base class implementation of this method fires the {@link #event-dragMove} event.\n     * @param {Core.util.drag.DragContext} drag\n     */\n    dragMove(drag) {\n        /**\n         * This event is fired when the drag that was previously announced via {@link #event-dragEnter} moves to a new\n         * position. It is fired by the droppable's {@link #function-dragMove} method.\n         * @event dragMove\n         * @param {Core.mixin.Draggable} source The draggable instance that fired the event.\n         * @param {Core.util.drag.DragContext} drag The drag context.\n         * @param {Event} event The browser event.\n         */\n        return this.dropEventer?.trigger('dragMove', { drag, event : drag.event });\n    }\n\n    /**\n     * This method is called when the drag that was previously announced via {@link #function-dragEnter} has ended with\n     * a drop. In addition to any cleanup (since {@link #function-dragLeave} will not be called), this method handles\n     * any updates associated with the data from the drag context and the position of the drop.\n     *\n     * The base class implementation of this method fires the {@link #event-drop} event.\n     * @param {Core.util.drag.DragContext} drag\n     */\n    dragDrop(drag) {\n        /**\n         * This event is fired when the drag that was previously announced via {@link #event-dragEnter} has ended with\n         * a drop. It is fired by the droppable's {@link #function-dragDrop} method.\n         *\n         * This event is **not** fired when a drag gesture is aborted by the user pressing the `ESC` key or if the\n         * {@link Core.util.drag.DragContext#function-abort} method is called.\n         * @event drop\n         * @param {Core.mixin.Draggable} source The draggable instance that fired the event.\n         * @param {Core.util.drag.DragContext} drag The drag context.\n         * @param {Event} event The browser event.\n         */\n        return this.dropEventer?.trigger('drop', { drag, event : drag.event });\n    }\n\n    /**\n     * This method is called when the drag that was previously announced via {@link #function-dragEnter} leaves this\n     * droppable's `dropRootElement`, or the drag is {@link Core.util.drag.DragContext#property-aborted} by the user\n     * pressing the `ESC` key, or the {@link Core.util.drag.DragContext#function-abort} method is called.\n     *\n     * This is the time to cleanup anything created by `dragEnter`.\n     *\n     * The base class implementation of this method fires the {@link #event-dragLeave} event.\n     * @param {Core.util.drag.DragContext} drag\n     */\n    dragLeave(drag) {\n        /**\n         * This event is fired when the drag that was previously announced via {@link #event-dragEnter} leaves this\n         * droppable's `dropRootElement`. It is fired by the droppable's {@link #function-dragLeave} method.\n         * @event dragLeave\n         * @param {Core.mixin.Draggable} source The draggable instance that fired the event.\n         * @param {Core.util.drag.DragContext} drag The drag context.\n         * @param {Event} event The browser event.\n         */\n        return this.dropEventer?.trigger('dragLeave', { drag, event : drag.event });\n    }\n\n    //endregion\n    //region Configs\n\n    changeDropping(dropping, was) {\n        if (dropping !== was) {\n            const me = this;\n\n            if (was) {\n                if (was.aborted || !was.completed) {\n                    me.dragLeave(was);\n                }\n            }\n\n            if (dropping) {\n                me._dropping = dropping;  // update config value early in case dragEnter et al refer to it\n\n                if (me.dragEnter(dropping) === false) {\n                    dropping = null;\n                }\n\n                me._dropping = was;  // restore the value so that updateDropping is called as it should be\n            }\n        }\n\n        return dropping;\n    }\n\n    updateDropRootElement(rootEl, was) {\n        const\n            me = this,\n            { droppableCls } = me;\n\n        let droppables, i, removeCls;\n\n        if (was) {\n            droppables = DomDataStore.get(was, 'droppables');\n            removeCls = true;\n\n            if (Array.isArray(droppables) && (i = droppables.indexOf(me)) > -1) {\n                if (droppables.length < 2) {\n                    DomDataStore.remove(was, 'droppables');\n                }\n                else {\n                    droppables.splice(i, 1);\n                    droppables.forEach(d => {\n                        if (droppableCls === d.droppableCls) {\n                            removeCls = false;  // our droppableCls may need to stay\n                        }\n                    });\n                }\n            }\n\n            removeCls && was.classList.remove(droppableCls);\n        }\n\n        if (rootEl) {\n            droppables = DomDataStore.get(rootEl, 'droppables');\n\n            if (droppables) {\n                droppables.push(me);\n            }\n            else {\n                DomDataStore.set(rootEl, 'droppables', [me]);\n            }\n\n            rootEl.classList.add(droppableCls);\n        }\n    }\n\n    //endregion\n};\n","import Base from '../../Base.js';\nimport DomHelper from '../../helper/DomHelper.js';\nimport EventHelper from '../../helper/EventHelper.js';\nimport Tooltip from '../../widget/Tooltip.js';\nimport StringHelper from '../../helper/StringHelper.js';\n\n/**\n * @module Core/widget/util/AvatarRendering\n */\n\n/**\n * A utility class providing rendering of avatars / resource initials.\n *\n * {@inlineexample Core/widget/AvatarRendering.js}\n * @extends Core/Base\n */\nexport default class AvatarRendering extends Base {\n    static get $name() {\n        return 'AvatarRendering';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Element used to listen for load errors. Normally the owning widgets own element.\n             * @config {HTMLElement}\n             */\n            element : null,\n\n            /**\n             * Prefix prepended to a supplied color to create a CSS class applied when showing initials.\n             * @config {String}\n             * @default\n             */\n            colorPrefix : 'b-sch-',\n\n            /**\n             * A tooltip config object to enable using a custom tooltip for the avatars. Listen for `beforeShow` and set\n             * your html there.\n             * @config {TooltipConfig}\n             */\n            tooltip : null,\n\n            size : null\n        };\n    }\n\n    doDestroy() {\n        this.tooltip?.destroy();\n\n        super.doDestroy();\n    }\n\n    updateElement(element) {\n        // Error listener\n        EventHelper.on({\n            element,\n            delegate : '.b-resource-image',\n            error    : 'onImageErrorEvent',\n            thisObj  : this,\n            capture  : true\n        });\n    }\n\n    changeTooltip(config) {\n        return Tooltip.new({\n            forElement  : this.element,\n            forSelector : '.b-resource-avatar',\n            cls         : 'b-resource-avatar-tooltip'\n        }, config);\n    }\n\n    static get failedUrls() {\n        if (!this._failedUrls) {\n            this._failedUrls = new Set();\n        }\n        return this._failedUrls;\n    }\n\n    /**\n     * Returns a DOM config object containing a resource avatar, icon or resource initials. Display priority in that\n     * order.\n     * @param {Object} options Avatar options\n     * @param {String} options.initials Resource initials\n     * @param {String} options.color Background color for initials\n     * @param {String} options.iconCls Icon cls\n     * @param {String} options.imageUrl Image url\n     * @param {String} options.defaultImageUrl Default image url, fallback if image fails to load or there is none\n     * specified. Leave out to show initials instead.\n     * @param {Object} [options.dataset] Dataset to apply to the resulting element\n     * @param {String} [options.alt] Image description\n     * @returns {DomConfig}\n     */\n    getResourceAvatar({ initials, color, iconCls, imageUrl, defaultImageUrl, dataset = {}, resourceRecord, alt = StringHelper.encodeHtml(resourceRecord?.name) }) {\n        return this.getImageConfig(initials, color, imageUrl, defaultImageUrl, dataset, alt) ||\n            this.getIconConfig(iconCls, dataset) ||\n            this.getResourceInitialsConfig(initials, color, dataset);\n    }\n\n    getImageConfig(initials, color, imageUrl, defaultImageUrl, dataset, alt) {\n        const { size } = this;\n        // Fall back to defaultImageUrl if imageUrl is known to fail\n        imageUrl = AvatarRendering.failedUrls.has(imageUrl) ? defaultImageUrl : (imageUrl  || defaultImageUrl);\n\n        if (imageUrl) {\n            return {\n                tag       : 'img',\n                draggable : 'false',\n                loading   : 'lazy',\n                class     : {\n                    'b-resource-avatar' : 1,\n                    'b-resource-image'  : 1\n                },\n                ...(size ? { style : { height : size + 'px', width : size + 'px' } } : undefined),\n                alt,\n                elementData : {\n                    defaultImageUrl,\n                    imageUrl,\n                    initials,\n                    color,\n                    dataset\n                },\n                src : imageUrl,\n                dataset\n            };\n        }\n    }\n\n    getIconConfig(iconCls, dataset) {\n        if (iconCls) {\n            return iconCls && {\n                tag   : 'i',\n                class : {\n                    'b-resource-avatar' : 1,\n                    'b-resource-icon'   : 1,\n                    [iconCls]           : 1\n                },\n                dataset\n            };\n        }\n    }\n\n    getResourceInitialsConfig(initials, color, dataset) {\n        const\n            { size }   = this,\n            // eventColor = #FF5555, apply as background-color\n            namedColor = DomHelper.isNamedColor(color) && color,\n            // eventColor = red, add b-sch-red cls\n            hexColor   = !namedColor && color;\n\n        return {\n            tag   : 'div',\n            class : {\n                'b-resource-avatar'                  : 1,\n                'b-resource-initials'                : 1,\n                [`${this.colorPrefix}${namedColor}`] : namedColor\n            },\n            style : {\n                backgroundColor : hexColor || null,\n                ...(size ? { height : size + 'px', width : size + 'px' } : undefined)\n            },\n            children : [initials],\n            dataset\n        };\n    }\n\n    onImageErrorEvent({ target }) {\n        if (!target.matches('.b-resource-avatar')) {\n            return;\n        }\n\n        const { defaultImageUrl, initials, color, imageUrl, dataset } = target.elementData;\n\n        if (defaultImageUrl && !target.src.endsWith(defaultImageUrl.replace(/^[./]*/gm, ''))) {\n            target.src = defaultImageUrl;\n        }\n        else {\n            const initialsEl = DomHelper.createElement(this.getResourceInitialsConfig(initials, color, dataset));\n            initialsEl.elementData = target.elementData;\n            target.parentElement.replaceChild(initialsEl, target);\n        }\n\n        // Remember failed urls, to avoid trying to load them again next time\n        AvatarRendering.failedUrls.add(imageUrl);\n    }\n}\n"],"names":["throwAbstractMethodCall","Error","ActionBase","Base","type","constructor","name","undo","redo","_$name","throwInvalidMethodCall","StateBase","canUndo","stm","canRedo","onUndo","onRedo","onStartTransaction","onStopTransaction","onStopTransactionDelayed","onRejectTransaction","onEnable","onDisable","onAutoRecordOn","onAutoRecordOff","onResetQueue","onModelUpdate","onStoreModelAdd","onStoreModelInsert","onStoreModelRemove","onStoreModelRemoveAll","onModelInsertChild","onModelRemoveChild","STATE_PROP","Symbol","STORES_PROP","QUEUE_PROP","POS_PROP","TRANSACTION_PROP","TRANSACTION_TIMER_PROP","AUTO_RECORD_PROP","Object","freeze","registry","Map","registerStmState","state","set","resolveStmState","get","resetQueue","options","newProps","slice","position","notifyStoresAboutQueueReset","DisabledStateClass","autoRecord","onStoreRemoveAll","DisabledState","Registry","ACTION_QUEUE_PROP","Transaction","defaultConfig","title","construct","args","queue","length","addAction","action","push","i","len","ReadyStateClass","steps","curPos","newPos","Math","max","next","notifyStoresAboutStateRestoringStart","undoneTransactions","transaction","notifyStoresAboutStateRestoringStop","cause","transactions","min","redoneTransactions","notifyStoresAboutStateRecordingStart","ReadyState","RecordingStateClass","notifyStoresAboutStateRecordingStop","disabled","stopTransactionDelayed","getTransactionTitle","stop","rejected","model","newData","oldData","isInitialUserAction","makeModelUpdateAction","parentModel","index","childModel","previousParent","previousIndex","makeModelInsertChildAction","childModels","context","makeModelRemoveChildAction","store","models","silent","makeStoreModelAddAction","makeStoreModelInsertAction","makeStoreModelRemoveAction","allRecords","makeStoreRemoveAllAction","RecordingState","RestoringStateClass","$name","onQueueReset","RestoringState","AutoReadyStateClass","startTransaction","AutoReadyState","AutoRecordingStateClass","mixin","Delayable","timer","clearTimeout","setTimeout","stopTransaction","autoRecordTransactionStopTimeout","AutoRecordingState","rest","MODEL_PROP","NEW_DATA_PROP","OLD_DATA_PROP","UpdateAction","undefined","value","_objectSpread","$","assign","PARENT_MODEL_PROP","CHILD_MODELS_PROP","INSERT_INDEX_PROP","CONTEXT_PROP","InsertChildAction","insertIndex","ctx","sort","lhs","rhs","lhsParent","lhsIndex","rhsParent","rhsIndex","forEach","m","parent","adjustedIndex","parentIndex","children","insertBefore","insertChild","removeChild","RemoveChildAction","STORE_PROP","MODEL_LIST_PROP","AddAction","modelList","list","remove","add","InsertAction","_undoingInsertion","insert","me","RemoveAction","ALL_RECORDS_PROP","RemoveAllAction","records","removeAll","stateTransition","event","oldState","newState","call","Array","isArray","trigger","StateTrackingManager","Events","stores","from","hasStore","includes","addStore","removeStore","filter","s","forEachStore","fn","id","val","enabled","enable","disable","isReady","waitForReadiness","await","isRecording","rejectTransaction","map","t","isRestoring","undoAll","redoAll","resetUndoQueue","resetRedoQueue","_store$onStmRecording","onStmRecordingStart","reason","_store$onStmRecording2","onStmRecordingStop","_store$onStmRestoring","onStmRestoringStart","_store$onStmRestoring2","onStmRestoringStop","_store$onStmQueueRese","onStmQueueReset","onUndoKeyPress","shiftKey","preventDefault","stash","stashedTransaction","applyStash","Target","Finalizable","finalizer","finalizing","isFinalized","isFinalizing","doFinalize","destroy","finalize","ret","_awaitFinalizer","ABORTED","INIT","DRAGGING","DROPPED","lockDirections","x","y","DragContext","Identifiable","configurable","itemElement","scrollManager","monitoringConfig","source","target","targetElement","threshold","touchStartDelay","identifiable","altKey","cleaners","ctrlKey","data","element","endEvent","lastMoveEvent","metaKey","previousTarget","scrollerAction","startEvent","touchStartTimer","_valid","EventHelper","on","globalThis","blur","thisObj","doDestroy","cleanup","dropping","dragging","onWindowBlur","started","abort","aborted","completed","isDestroying","pending","valid","v","Promise","all","has","peek","changeTarget","was","_target","updateTarget","dragLeaveTarget","dragMove","dragEnterTarget","updateTargetElement","droppable","droppables","droppableSelector","parentElement","DomDataStore","dropRootElement","contains","closest","DomHelper","getId","getBoundingClientRect","endDrag","begin","beforeDrag","cleaner","pop","end","lastEvent","dragSwallowClickTime","syncFlags","clientX","clientY","track","document","capture","expires","once","click","stopPropagation","dragDrop","fakeKey","down","changed","isKey","key","keyDown","isDragToggleKey","keyUp","getDistance","getDistanceBetween","move","distance","significant","nodeType","Node","ELEMENT_NODE","start","stopImmediatePropagation","draggingBodyCls","activeCls","dragLock","dragRootElement","detacher","startMonitoring","Objects","merge","scrollables","direction","callback","isScroll","rootEl","body","classList","startDrag","touch","changedTouches","elementFromPoint","trackDrag","_defineProperty","prototype","STATE","DragProxy","Factoryable","factoryable","defaultType","updateDragging","drag","close","open","dragStart","dragEnd","initClass","Draggable","$config","draggingClsSelector","dragDocumentListeners","keydown","keyup","contextmenu","mousemove","mouseup","pointerup","touchend","touchmove","handler","passive","dragItemSelector","dragItemOverCls","dragMinDistance","dragProxy","dragSameTargetDrop","dragSelector","ignoreSelector","dragThreshold","dragTouchStartDelay","dropTargetSelector","overItem","testConfig","properties","draggingCls","draggingItemCls","draggingStartedCls","draggableCls","Boolean","matches","dragOver","oldTarget","activeDrag","dragEventer","draggingClassElement","beginDrag","isDestroyed","finalizeDrag","_drag$finalize","moveDrag","setupDragContext","_nextDragId","result","_drag$targetElement","configureListeners","listeners","ObjectHelper","old","changeDragProxy","config","existing","reconfigure","owner","defaults","updateDragRootElement","_me$_dragRootDetacher","onDragItemMouseMove","_dragRootDetacher","mousedown","touchstart","pointerdown","e","_e$target$releasePoin","_e$target","pointerId","releasePointerCapture","delegate","onDragItemMouseEnter","onDragItemMouseLeave","mouseover","mouseout","onDragItemMouseOver","onDragItemMouseOut","changeOverItem","enterLeaveEvent","_event$relatedTarget","relatedTarget","updateOverItem","oldOverItem","_me$onDragItemMouseLe","_me$onDragItemMouseEn","onDragContextMenu","onDragKeyDown","onDragKeyUp","onDragMouseDown","button","onDragPointerDown","changeDragging","onDragPointerMove","onDragPointerUp","onDragTouchStart","touches","Droppable","dropEventer","droppableCls","dragEnter","_this$dropEventer","_this$dropEventer2","_this$dropEventer3","dragLeave","_this$dropEventer4","changeDropping","_dropping","updateDropRootElement","removeCls","indexOf","splice","d","AvatarRendering","colorPrefix","tooltip","size","_this$tooltip","updateElement","error","changeTooltip","Tooltip","new","forElement","forSelector","cls","failedUrls","_failedUrls","Set","getResourceAvatar","initials","color","iconCls","imageUrl","defaultImageUrl","dataset","resourceRecord","alt","StringHelper","encodeHtml","getImageConfig","getIconConfig","getResourceInitialsConfig","tag","draggable","loading","class","style","height","width","elementData","src","namedColor","isNamedColor","hexColor","backgroundColor","onImageErrorEvent","endsWith","replace","initialsEl","createElement","replaceChild"],"mappings":"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"}