{"version":3,"file":"AvatarRendering.js","sources":["../../../../Core/lib/Core/data/stm/action/ActionBase.js","../../../../Core/lib/Core/data/stm/state/StateBase.js","../../../../Core/lib/Core/data/stm/Props.js","../../../../Core/lib/Core/data/stm/state/Registry.js","../../../../Core/lib/Core/data/stm/Helpers.js","../../../../Core/lib/Core/data/stm/state/DisabledState.js","../../../../Core/lib/Core/data/stm/Transaction.js","../../../../Core/lib/Core/data/stm/state/ReadyState.js","../../../../Core/lib/Core/data/stm/state/RecordingState.js","../../../../Core/lib/Core/data/stm/state/RestoringState.js","../../../../Core/lib/Core/data/stm/state/AutoReadyState.js","../../../../Core/lib/Core/data/stm/state/AutoRecordingState.js","../../../../Core/lib/Core/data/stm/action/UpdateAction.js","../../../../Core/lib/Core/data/stm/action/InsertChildAction.js","../../../../Core/lib/Core/data/stm/action/RemoveChildAction.js","../../../../Core/lib/Core/data/stm/action/AddAction.js","../../../../Core/lib/Core/data/stm/action/InsertAction.js","../../../../Core/lib/Core/data/stm/action/RemoveAction.js","../../../../Core/lib/Core/data/stm/action/RemoveAllAction.js","../../../../Core/lib/Core/data/stm/StateTrackingManager.js","../../../../Core/lib/Core/mixin/Finalizable.js","../../../../Core/lib/Core/util/drag/DragContext.js","../../../../Core/lib/Core/util/drag/DragProxy.js","../../../../Core/lib/Core/mixin/Draggable.js","../../../../Core/lib/Core/mixin/Droppable.js","../../../../Core/lib/Core/widget/util/AvatarRendering.js"],"sourcesContent":["/**\n * @module Core/data/stm/action/ActionBase\n */\nimport Base from '../../../Base.js';\n\nconst throwAbstractMethodCall = () => {\n    throw new Error('Abstract method call!');\n};\n\n/**\n * Base class for STM actions.\n *\n * @abstract\n */\nexport default class ActionBase extends Base {\n\n    /**\n     * Gets the type of the action (stringified class name).\n     * @readonly\n     * @property {String}\n     */\n    get type() {\n        return this.constructor.name;\n    }\n\n    /**\n     * Undoes an action\n     */\n    undo() {\n        throwAbstractMethodCall();\n    }\n\n    /**\n     * Redoes an action\n     */\n    redo() {\n        throwAbstractMethodCall();\n    }\n}\n","/**\n * @module Core/data/stm/state/StateBase\n */\nimport Base from '../../../Base.js';\n\nexport const throwAbstractMethodCall = () => {\n    throw new Error('Abstract method call!');\n};\n\nexport const throwInvalidMethodCall = () => {\n    throw new Error('Method cannot be called at this state!');\n};\n\n/**\n * Abstract class for STM states\n *\n * Every on* method should return a state for the STM which it should switch to\n * or throw an exception that this call at this state is illegal.\n *\n * Interface of this class mirrors interface of {@link Core.data.stm.StateTrackingManager}.\n *\n * @abstract\n */\nexport default class StateBase extends Base {\n\n    canUndo(stm) {\n        throwAbstractMethodCall();\n    }\n\n    canRedo(stm) {\n        throwAbstractMethodCall();\n    }\n\n    onUndo(stm) {\n        throwAbstractMethodCall();\n    }\n\n    onRedo(stm) {\n        throwAbstractMethodCall();\n    }\n\n    onStartTransaction(stm) {\n        throwAbstractMethodCall();\n    }\n\n    onStopTransaction(stm) {\n        throwAbstractMethodCall();\n    }\n\n    onStopTransactionDelayed(stm) {\n        throwAbstractMethodCall();\n    }\n\n    onRejectTransaction(stm) {\n        throwAbstractMethodCall();\n    }\n\n    onEnable(stm) {\n        throwAbstractMethodCall();\n    }\n\n    onDisable(stm) {\n        throwAbstractMethodCall();\n    }\n\n    onAutoRecordOn(stm) {\n        throwAbstractMethodCall();\n    }\n\n    onAutoRecordOff(stm) {\n        throwAbstractMethodCall();\n    }\n\n    onResetQueue(stm) {\n        throwAbstractMethodCall();\n    }\n\n    onModelUpdate(stm) {\n        throwAbstractMethodCall();\n    }\n\n    onStoreModelAdd(stm) {\n        throwAbstractMethodCall();\n    }\n\n    onStoreModelInsert(stm) {\n        throwAbstractMethodCall();\n    }\n\n    onStoreModelRemove(stm) {\n        throwAbstractMethodCall();\n    }\n\n    onStoreModelRemoveAll(stm) {\n        throwAbstractMethodCall();\n    }\n\n    onModelInsertChild(stm) {\n        throwAbstractMethodCall();\n    }\n\n    onModelRemoveChild(stm) {\n        throwAbstractMethodCall();\n    }\n}\n","/**\n * @module Core/data/stm/Props.js\n * @internal\n */\n\nexport const STATE_PROP             = Symbol('STATE_PROP');\nexport const STORES_PROP            = Symbol('STORES_PROP');\nexport const QUEUE_PROP             = Symbol('QUEUE_PROP');\nexport const POS_PROP               = Symbol('POS_PROP');\nexport const TRANSACTION_PROP       = Symbol('TRANSACTION_PROP');\nexport const TRANSACTION_TIMER_PROP = Symbol('TRANSACTION_TIMER_PROP');\nexport const AUTO_RECORD_PROP       = Symbol('AUTO_RECORD_PROP');\nexport const PROPS                  = Object.freeze([\n    STATE_PROP,\n    STORES_PROP,\n    QUEUE_PROP,\n    POS_PROP,\n    TRANSACTION_PROP,\n    TRANSACTION_TIMER_PROP,\n    AUTO_RECORD_PROP\n]);\n","import StateBase from './StateBase.js';\n\n/**\n * @module Core/data/stm/state/Registry\n *\n * Provides map of registered STM states.\n *\n * Needed to remove states circular dependency.\n *\n * @internal\n */\nconst registry = new Map();\n\n/**\n * Registers STM state class with the given name.\n *\n * @private\n *\n * @param {String} name\n * @param {Core.data.stm.state.StateBase} state\n */\nexport const registerStmState = (name, state) => {\n    //<debug>\n    console.assert(\n        state instanceof StateBase,\n        `Can't register STM state ${name}, invalid state class provided!`\n    );\n    //</debug>\n\n    registry.set(name, state);\n};\n\n/**\n * Resolves STM state class with the given name.\n *\n * @private\n *\n * @param {String} name\n * @returns {Core.data.stm.state.StateBase} state\n */\nexport const resolveStmState = (state) => {\n    if (typeof state === 'string') {\n        state = registry.get(state);\n    }\n\n    //<debug>\n    console.assert(\n        state instanceof StateBase,\n        `Can't resolve STM state ${state}, state class hasn't been registered!`\n    );\n    //</debug>\n\n    return state;\n};\n\n// UMD/module compatible export\n// NOTE: the most compatible way of exporting is:\n//       import registry from './Registry.js';\n//       { registerStmState, resolveStmState } = registry;\n//          or\n//       registry.registerStmState(...);\nexport default {\n    registerStmState,\n    resolveStmState\n};\n","import { QUEUE_PROP, POS_PROP } from './Props.js';\n\nexport const resetQueue = (stm, options) => {\n    const { undo, redo } = options;\n\n    let newProps;\n\n    if (undo && !redo) {\n        newProps = {\n            [QUEUE_PROP] : stm[QUEUE_PROP].slice(stm.position),\n            [POS_PROP]   : 0\n        };\n    }\n    else if (redo && !undo) {\n        newProps = {\n            [QUEUE_PROP] : stm[QUEUE_PROP].slice(0, stm.position)\n        };\n    }\n    else {\n        newProps = {\n            [QUEUE_PROP] : [],\n            [POS_PROP]   : 0\n        };\n    };\n\n    return [\n        newProps,\n        () => {\n            stm.notifyStoresAboutQueueReset(options);\n        }\n    ];\n};\n","/**\n * @module Core/data/stm/state/DisabledState\n */\nimport StateBase, { throwInvalidMethodCall } from './StateBase.js';\nimport { AUTO_RECORD_PROP } from '../Props.js';\nimport Registry from './Registry.js';\nimport { resetQueue } from '../Helpers.js';\n\n/**\n * STM disabled state class.\n *\n * @internal\n */\nexport class DisabledStateClass extends StateBase {\n\n    canUndo() {\n        return false;\n    }\n\n    canRedo() {\n        return false;\n    }\n\n    onUndo() {\n        throwInvalidMethodCall();\n    }\n\n    onRedo() {\n        throwInvalidMethodCall();\n    }\n\n    onEnable(stm) {\n        return stm.autoRecord ? 'autoreadystate' : 'readystate';\n    }\n\n    onDisable() {\n        throwInvalidMethodCall();\n    }\n\n    onAutoRecordOn() {\n        return {\n            [AUTO_RECORD_PROP] : true\n        };\n    }\n\n    onAutoRecordOff() {\n        return {\n            [AUTO_RECORD_PROP] : false\n        };\n    }\n\n    onStartTransaction() {\n        throwInvalidMethodCall();\n    }\n\n    onStopTransaction()  {\n        throwInvalidMethodCall();\n    }\n\n    onStopTransactionDelayed() {\n        throwInvalidMethodCall();\n    }\n\n    onRejectTransaction() {\n        throwInvalidMethodCall();\n    }\n\n    onResetQueue(stm, options) {\n        return resetQueue(stm, options);\n    }\n\n    onModelUpdate()      {}\n    onModelInsertChild() {}\n    onModelRemoveChild() {}\n    onStoreModelAdd()    {}\n    onStoreModelInsert() {}\n    onStoreModelRemove() {}\n    onStoreRemoveAll()   {}\n}\n\n/**\n * STM disabled state.\n *\n * @internal\n */\nconst DisabledState = new DisabledStateClass();\nexport default DisabledState;\n\nRegistry.registerStmState('disabledstate', DisabledState);\n","/**\n * @module Core/data/stm/Transaction\n */\nimport Base from '../../Base.js';\n\nconst ACTION_QUEUE_PROP = Symbol('ACTION_QUEUE_PROP');\n\n/**\n * STM transaction class, holds list of actions constituting a transaction.\n *\n * A transaction can be undone and redone. Upon undo all the actions being held\n * are undone in reverse order. Upon redo all the actions being held are redone\n * in forward order.\n */\nexport default class Transaction extends Base {\n\n    get defaultConfig() {\n        return {\n            /**\n             * Transaction title\n             *\n             * @config {String}\n             */\n            title : null\n        };\n    }\n\n    construct(...args) {\n        this[ACTION_QUEUE_PROP] = [];\n\n        super.construct(...args);\n    }\n\n    /**\n     * Gets transaction's actions queue\n     *\n     * @property {Core.data.stm.action.ActionBase[]}\n     */\n    get queue() {\n        return this[ACTION_QUEUE_PROP].slice(0);\n    }\n\n    /**\n     * Gets transaction's actions queue length\n     *\n     * @property {Number}\n     */\n    get length() {\n        return this[ACTION_QUEUE_PROP].length;\n    }\n\n    /**\n     * Adds an action to the transaction.\n     *\n     * @param {Core.data.stm.action.ActionBase|Object} action\n     */\n    addAction(action) {\n        //<debug>\n        console.assert(\n            action && typeof action.undo == 'function' && typeof action.redo == 'function',\n            \"Can't add action to a STM transaction, action must have `undo` and `redo` methods, inheriting from `ActionBase` might help!\"\n        );\n        //</debug>\n\n        this[ACTION_QUEUE_PROP].push(action);\n    }\n\n    /**\n     * Undoes actions held\n     */\n    undo() {\n        const queue = this[ACTION_QUEUE_PROP];\n\n        for (let i = queue.length - 1; i >= 0; --i) {\n            queue[i].undo();\n        }\n    }\n\n    /**\n     * Redoes actions held\n     */\n    redo() {\n        const queue = this[ACTION_QUEUE_PROP];\n\n        for (let i = 0, len = queue.length; i < len; ++i) {\n            queue[i].redo();\n        }\n    }\n}\n","/**\n * @module Core/data/stm/state/ReadyState\n */\nimport StateBase, { throwInvalidMethodCall } from './StateBase.js';\nimport Transaction from '../Transaction.js';\nimport { STATE_PROP, QUEUE_PROP, POS_PROP, TRANSACTION_PROP, AUTO_RECORD_PROP } from '../Props.js';\nimport Registry from './Registry.js';\nimport { resetQueue } from '../Helpers.js';\n\n/**\n * STM ready state class.\n *\n * @internal\n */\nexport class ReadyStateClass extends StateBase {\n\n    canUndo(stm) {\n        //      v\n        // |*|*|\n        return 0 < stm.position && stm.position <= stm.length;\n    }\n\n    canRedo(stm) {\n        //  v\n        // |*|*|\n        return 0 <= stm.position && stm.position < stm.length;\n    }\n\n    onUndo(stm, steps) {\n        let curPos = stm.position;\n\n        const\n            queue  = stm[QUEUE_PROP],\n            newPos = Math.max(0, curPos - steps),\n            next = () => {\n                stm.notifyStoresAboutStateRestoringStart();\n\n                const undoneTransactions = [];\n                while (curPos !== newPos) {\n                    const transaction = queue[--curPos];\n                    transaction.undo();\n                    undoneTransactions.push(transaction);\n                }\n\n                return [stm.autoRecord ? 'autoreadystate' : 'readystate', () => {\n                    stm.notifyStoresAboutStateRestoringStop({ cause : 'undo', transactions : undoneTransactions });\n                }];\n            };\n\n        return [{\n            [STATE_PROP] : 'restoringstate',\n            [POS_PROP]   : newPos\n        }, next];\n    }\n\n    onRedo(stm, steps) {\n        let curPos = stm.position;\n\n        const\n            queue  = stm[QUEUE_PROP],\n            newPos = Math.min(queue.length, curPos + steps);\n\n        const next = () => {\n            stm.notifyStoresAboutStateRestoringStart();\n\n            const redoneTransactions = [];\n            do {\n                const transaction = queue[curPos++];\n                transaction.redo();\n                redoneTransactions.push(transaction);\n            }\n            while (curPos !== newPos);\n\n            return [stm.autoRecord ? 'autoreadystate' : 'readystate', () => {\n                stm.notifyStoresAboutStateRestoringStop({ cause : 'redo', transactions : redoneTransactions });\n            }];\n        };\n\n        return [{\n            [STATE_PROP] : 'restoringstate',\n            [POS_PROP]   : newPos\n        }, next];\n    }\n\n    onEnable() {\n        throwInvalidMethodCall();\n    }\n\n    onDisable() {\n        return 'disabledstate';\n    }\n\n    onAutoRecordOn() {\n        return {\n            [STATE_PROP]       : 'autoreadystate',\n            [AUTO_RECORD_PROP] : true\n        };\n    }\n\n    onAutoRecordOff() {\n        throwInvalidMethodCall();\n    }\n\n    onStartTransaction(stm, title) {\n        const transaction = new Transaction({ title : title });\n\n        return [{\n            [STATE_PROP]       : 'recordingstate',\n            [TRANSACTION_PROP] : transaction\n        }, () => {\n            stm.notifyStoresAboutStateRecordingStart(transaction);\n        }];\n    }\n\n    onStopTransaction() {\n        throwInvalidMethodCall();\n    }\n\n    onStopTransactionDelayed() {\n        throwInvalidMethodCall();\n    }\n\n    onRejectTransaction() {\n        throwInvalidMethodCall();\n    }\n\n    onResetQueue(stm, options) {\n        return resetQueue(stm, options);\n    }\n\n    onModelUpdate()      {}\n    onModelInsertChild() {}\n    onModelRemoveChild() {}\n    onStoreModelAdd()    {}\n    onStoreModelInsert() {}\n    onStoreModelRemove() {}\n    onStoreRemoveAll()   {}\n}\n\n/**\n * STM ready state.\n *\n * @internal\n */\nconst ReadyState = new ReadyStateClass();\nexport default ReadyState;\n\nRegistry.registerStmState('readystate', ReadyState);\n","/**\n * @module Core/data/stm/state/RecordingState\n */\nimport StateBase, { throwInvalidMethodCall } from './StateBase.js';\nimport { STATE_PROP, TRANSACTION_PROP, QUEUE_PROP, POS_PROP, AUTO_RECORD_PROP } from '../Props.js';\nimport Registry from './Registry.js';\nimport { resetQueue } from '../Helpers.js';\n\n/**\n * STM recording state class.\n *\n * @internal\n */\nexport class RecordingStateClass extends StateBase {\n\n    canUndo() {\n        return false;\n    }\n\n    canRedo() {\n        return false;\n    }\n\n    onEnable() {}\n\n    onDisable(stm) {\n        const transaction = stm[TRANSACTION_PROP];\n\n        stm.notifyStoresAboutStateRecordingStop(transaction, { disabled : true });\n\n        return {\n            [STATE_PROP]       : 'disabledstate',\n            [TRANSACTION_PROP] : null\n        };\n    }\n\n    onAutoRecordOn(stm) {\n        return [{\n            [STATE_PROP]       : 'autorecordingstate',\n            [AUTO_RECORD_PROP] : true\n        }, () => {\n            stm.stopTransactionDelayed();\n        }];\n    }\n\n    onAutoRecordOff() {\n        throwInvalidMethodCall();\n    }\n\n    onStartTransaction() {\n        throwInvalidMethodCall();\n    }\n\n    onStopTransaction(stm, title) {\n        const\n            transaction = stm[TRANSACTION_PROP],\n            queue       = stm[QUEUE_PROP];\n\n        let position = stm[POS_PROP];\n\n        if (transaction.length) {\n\n            if (!transaction.title && !title && stm.getTransactionTitle) {\n                transaction.title = stm.getTransactionTitle(transaction);\n            }\n            else if (title) {\n                transaction.title = title;\n            }\n\n            queue[position] = transaction;\n            queue.length    = ++position;\n        }\n\n        return [{\n            [STATE_PROP]       : 'readystate',\n            [POS_PROP]         : position,\n            [TRANSACTION_PROP] : null\n        }, () => {\n            stm.notifyStoresAboutStateRecordingStop(transaction, { stop : true });\n        }];\n    }\n\n    onRejectTransaction(stm) {\n        const transaction = stm[TRANSACTION_PROP];\n\n        return [{\n            [STATE_PROP]       : 'restoringstate',\n            [TRANSACTION_PROP] : null\n        }, () => {\n\n            if (transaction.length) {\n                transaction.undo();\n            }\n\n            return [\n                'readystate',\n                () => {\n                    stm.notifyStoresAboutStateRecordingStop(transaction, { rejected : true });\n                }\n            ];\n        }];\n    }\n\n    onStopTransactionDelayed() {\n        throwInvalidMethodCall();\n    }\n\n    onResetQueue(stm, options) {\n        return resetQueue(stm, options);\n    }\n\n    onModelUpdate(stm, model, newData, oldData, isInitialUserAction) {\n        const transaction = stm[TRANSACTION_PROP];\n        transaction.addAction(stm.makeModelUpdateAction(model, newData, oldData, isInitialUserAction));\n    }\n\n    onModelInsertChild(stm, parentModel, index, childModel, previousParent, previousIndex) {\n        const transaction = stm[TRANSACTION_PROP];\n        transaction.addAction(stm.makeModelInsertChildAction(parentModel, index, childModel, previousParent, previousIndex));\n    }\n\n    onModelRemoveChild(stm, parentModel, childModels, context) {\n        const transaction = stm[TRANSACTION_PROP];\n        transaction.addAction(stm.makeModelRemoveChildAction(parentModel, childModels, context));\n    }\n\n    onStoreModelAdd(stm, store, models, silent)    {\n        const transaction = stm[TRANSACTION_PROP];\n        transaction.addAction(stm.makeStoreModelAddAction(store, models, silent));\n    }\n\n    onStoreModelInsert(stm, store, index, models, context, silent) {\n        const transaction = stm[TRANSACTION_PROP];\n        transaction.addAction(stm.makeStoreModelInsertAction(store, index, models, context, silent));\n    }\n\n    onStoreModelRemove(stm, store, models, context, silent) {\n        const transaction = stm[TRANSACTION_PROP];\n        transaction.addAction(stm.makeStoreModelRemoveAction(store, models, context, silent));\n    }\n\n    onStoreRemoveAll(stm, store, allRecords, silent)   {\n        const transaction = stm[TRANSACTION_PROP];\n        transaction.addAction(stm.makeStoreRemoveAllAction(store, allRecords, silent));\n    }\n}\n\n/**\n * STM recording state.\n *\n * @internal\n */\nconst RecordingState = new RecordingStateClass();\nexport default RecordingState;\n\nRegistry.registerStmState('recordingstate', RecordingState);\n","/**\n * @module Core/data/stm/state/RestoringState\n */\nimport StateBase, { throwInvalidMethodCall } from './StateBase.js';\nimport { AUTO_RECORD_PROP } from '../Props.js';\nimport Registry from './Registry.js';\n\n/**\n * STM restoring state class.\n *\n * @internal\n */\nexport class RestoringStateClass extends StateBase {\n    static get $name() {\n        return 'RestoringStateClass';\n    }\n\n    canUndo() {\n        return false;\n    }\n\n    canRedo() {\n        return false;\n    }\n\n    onUndo() {\n        throwInvalidMethodCall();\n    }\n\n    onRedo() {\n        throwInvalidMethodCall();\n    }\n\n    onEnable() {\n        throwInvalidMethodCall();\n    }\n\n    onDisable() {\n        throwInvalidMethodCall();\n    }\n\n    onAutoRecordOn() {\n        return {\n            [AUTO_RECORD_PROP] : true\n        };\n    }\n\n    onAutoRecordOff() {\n        return {\n            [AUTO_RECORD_PROP] : false\n        };\n    }\n\n    onStartTransaction() {\n        throwInvalidMethodCall();\n    }\n\n    onStopTransaction()  {\n        throwInvalidMethodCall();\n    }\n\n    onStopTransactionDelayed() {\n        throwInvalidMethodCall();\n    }\n\n    onRejectTransaction() {\n        throwInvalidMethodCall();\n    }\n\n    onQueueReset() {\n        throwInvalidMethodCall();\n    }\n\n    onModelUpdate()      {}\n    onModelInsertChild() {}\n    onModelRemoveChild() {}\n    onStoreModelAdd()    {}\n    onStoreModelInsert() {}\n    onStoreModelRemove() {}\n    onStoreRemoveAll()   {}\n}\n\n/**\n * STM restoring state.\n *\n * @internal\n */\nconst RestoringState = new RestoringStateClass();\nexport default RestoringState;\n\nRegistry.registerStmState('restoringstate', RestoringState);\n","/**\n * @module Core/data/stm/state/AutoReadyState\n */\nimport { throwInvalidMethodCall } from './StateBase.js';\nimport Transaction from '../Transaction.js';\nimport { ReadyStateClass } from './ReadyState.js';\nimport { STATE_PROP, TRANSACTION_PROP, AUTO_RECORD_PROP } from '../Props.js';\nimport Registry from './Registry.js';\n\n/**\n * STM transaction autostart ready state class.\n *\n * @internal\n */\nexport class AutoReadyStateClass extends ReadyStateClass {\n\n    onAutoRecordOn() {\n        throwInvalidMethodCall();\n    }\n\n    onAutoRecordOff() {\n        return {\n            [STATE_PROP]       : 'readystate',\n            [AUTO_RECORD_PROP] : false\n        };\n    }\n\n    onStartTransaction(stm, title) {\n        const transaction = new Transaction({ title : title });\n\n        return [{\n            [STATE_PROP]       : 'autorecordingstate',\n            [TRANSACTION_PROP] : transaction\n        }, () => {\n            stm.notifyStoresAboutStateRecordingStart(transaction);\n            stm.stopTransactionDelayed();\n        }];\n    }\n\n    onModelUpdate(stm, model, newData, oldData) {\n        stm.startTransaction();\n        stm.onModelUpdate(model, newData, oldData);\n    }\n\n    onModelInsertChild(stm, parentModel, index, childModels, context) {\n        stm.startTransaction();\n        stm.onModelInsertChild(parentModel, index, childModels, context);\n    }\n\n    onModelRemoveChild(stm, parentModel, childModels, context) {\n        stm.startTransaction();\n        stm.onModelRemoveChild(parentModel, childModels, context);\n    }\n\n    onStoreModelAdd(stm, store, models, silent) {\n        stm.startTransaction();\n        stm.onStoreModelAdd(store, models, silent);\n    }\n\n    onStoreModelInsert(stm, store, index, models, context, silent) {\n        stm.startTransaction();\n        stm.onStoreModelInsert(store, index, models, context, silent);\n    }\n\n    onStoreModelRemove(stm, store, models, context, silent) {\n        stm.startTransaction();\n        stm.onStoreModelRemove(store, models, context, silent);\n    }\n\n    onStoreRemoveAll(stm, store, allRecords, silent) {\n        stm.startTransaction();\n        stm.onStoreRemoveAll(store, allRecords, silent);\n    }\n}\n\n/**\n * STM transaction autostart ready state.\n *\n * @internal\n */\nconst AutoReadyState = new AutoReadyStateClass();\nexport default AutoReadyState;\n\nRegistry.registerStmState('autoreadystate', AutoReadyState);\n","/**\n * @module Core/data/stm/state/AutoRecordingState\n */\nimport Delayable from '../../../mixin/Delayable.js';\nimport { throwInvalidMethodCall } from './StateBase.js';\nimport { RecordingStateClass } from './RecordingState.js';\nimport { STATE_PROP, TRANSACTION_PROP, TRANSACTION_TIMER_PROP, QUEUE_PROP, POS_PROP, AUTO_RECORD_PROP } from '../Props.js';\nimport Registry from './Registry.js';\nimport { resetQueue } from '../Helpers.js';\n\n/**\n * STM recording state class.\n *\n * @internal\n */\nexport class AutoRecordingStateClass extends RecordingStateClass.mixin(Delayable) {\n\n    onDisable(stm) {\n        const\n            transaction = stm[TRANSACTION_PROP],\n            timer       = stm[TRANSACTION_TIMER_PROP];\n\n        if (timer) {\n            this.clearTimeout(timer);\n        }\n\n        stm.notifyStoresAboutStateRecordingStop(transaction, { disabled : true });\n\n        return {\n            [STATE_PROP]             : 'disabledstate',\n            [TRANSACTION_PROP]       : null,\n            [TRANSACTION_TIMER_PROP] : null\n        };\n    }\n\n    onAutoRecordOn(stm) {\n        throwInvalidMethodCall();\n    }\n\n    onAutoRecordOff(stm) {\n        const timer       = stm[TRANSACTION_TIMER_PROP];\n\n        if (timer) {\n            this.clearTimeout(timer);\n        }\n\n        return {\n            [STATE_PROP]             : 'recordingstate',\n            [AUTO_RECORD_PROP]       : false,\n            [TRANSACTION_TIMER_PROP] : null\n        };\n    }\n\n    onStopTransaction(stm, title) {\n        const\n            transaction = stm[TRANSACTION_PROP],\n            timer       = stm[TRANSACTION_TIMER_PROP],\n            queue       = stm[QUEUE_PROP];\n\n        let position = stm[POS_PROP];\n\n        if (timer) {\n            this.clearTimeout(timer);\n        }\n\n        if (transaction.length) {\n\n            if (!transaction.title && !title && stm.getTransactionTitle) {\n                transaction.title = stm.getTransactionTitle(transaction);\n            }\n            else if (title) {\n                transaction.title = title;\n            }\n\n            queue[position] = transaction;\n            queue.length    = ++position;\n        }\n\n        return [{\n            [STATE_PROP]             : 'autoreadystate',\n            [POS_PROP]               : position,\n            [TRANSACTION_PROP]       : null,\n            [TRANSACTION_TIMER_PROP] : null\n        }, () => {\n            stm.notifyStoresAboutStateRecordingStop(transaction, { stop : true });\n        }];\n    }\n\n    onStopTransactionDelayed(stm) {\n        let timer = stm[TRANSACTION_TIMER_PROP];\n\n        if (timer) {\n            this.clearTimeout(timer);\n        }\n\n        timer = this.setTimeout(\n            () => {\n                stm.stopTransaction();\n            },\n            stm.autoRecordTransactionStopTimeout\n        );\n\n        return {\n            [STATE_PROP]             : AutoRecordingState,\n            [TRANSACTION_TIMER_PROP] : timer\n        };\n    }\n\n    onResetQueue(stm, options) {\n        return resetQueue(stm, options);\n    }\n\n    onRejectTransaction(stm) {\n        const\n            transaction = stm[TRANSACTION_PROP],\n            timer = stm[TRANSACTION_TIMER_PROP];\n\n        if (timer) {\n            this.clearTimeout(timer);\n        }\n\n        return [{\n            [STATE_PROP]             : 'restoringstate',\n            [TRANSACTION_PROP]       : null,\n            [TRANSACTION_TIMER_PROP] : null\n        }, () => {\n\n            if (transaction.length) {\n                transaction.undo();\n            }\n\n            return [\n                'autoreadystate',\n                () => {\n                    stm.notifyStoresAboutStateRecordingStop(transaction, { rejected : true });\n                }\n            ];\n        }];\n    }\n\n    onModelUpdate(stm, ...rest) {\n        super.onModelUpdate(stm, ...rest);\n        stm.stopTransactionDelayed();\n    }\n\n    onModelInsertChild(stm, ...rest) {\n        super.onModelInsertChild(stm, ...rest);\n        stm.stopTransactionDelayed();\n    }\n\n    onModelRemoveChild(stm, ...rest) {\n        super.onModelRemoveChild(stm, ...rest);\n        stm.stopTransactionDelayed();\n    }\n\n    onStoreModelAdd(stm, ...rest)    {\n        super.onStoreModelAdd(stm, ...rest);\n        stm.stopTransactionDelayed();\n    }\n\n    onStoreModelInsert(stm, ...rest) {\n        super.onStoreModelInsert(stm, ...rest);\n        stm.stopTransactionDelayed();\n    }\n\n    onStoreModelRemove(stm, ...rest) {\n        super.onStoreModelRemove(stm, ...rest);\n        stm.stopTransactionDelayed();\n    }\n\n    onStoreRemoveAll(stm, ...rest)   {\n        super.onStoreRemoveAll(stm, ...rest);\n        stm.stopTransactionDelayed();\n    }\n}\n\n/**\n * STM recording state.\n *\n * @internal\n */\nconst AutoRecordingState = new AutoRecordingStateClass();\nexport default AutoRecordingState;\n\nRegistry.registerStmState('autorecordingstate', AutoRecordingState);\n","/**\n * @module Core/data/stm/action/UpdateAction\n */\nimport ActionBase from './ActionBase.js';\n\nconst\n    MODEL_PROP    = Symbol('MODEL_PROP'),\n    NEW_DATA_PROP = Symbol('NEW_DATA_PROP'),\n    OLD_DATA_PROP = Symbol('OLD_DATA_PROP');\n\n/**\n * Action to record the fact that a model has been updated.\n * @extends Core/data/stm/action/ActionBase\n */\nexport default class UpdateAction extends ActionBase {\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Reference to a model which has been updated.\n             *\n             * @config {Core.data.Model}\n             * @default\n             */\n            model : undefined,\n\n            /**\n             * Map of updated properties with new values.\n             *\n             * @config {Object}\n             * @default\n             */\n            newData : undefined,\n\n            /**\n             * Map of updated properties with old values.\n             *\n             * @config {Object}\n             * @default\n             */\n            oldData : undefined,\n\n            isInitialUserAction : false\n        };\n    }\n\n    get type() {\n        return 'UpdateAction';\n    }\n\n    //<debug>\n    afterConfig() {\n        super.afterConfig();\n\n        console.assert(\n            this.model.isModel && typeof this.newData == 'object' && typeof this.oldData == 'object',\n            \"Can't create action, bad configuration!\"\n        );\n    }\n    //</debug>\n\n    get model() {\n        return this[MODEL_PROP];\n    }\n\n    set model(value) {\n        //<debug>\n        console.assert(\n            !this[MODEL_PROP] && value.isModel,\n            \"Can't set model, model should be instanceof `Model` class and can be set only once!\"\n        );\n        //</debug>\n        this[MODEL_PROP] = value;\n    }\n\n    get newData() {\n        return this[NEW_DATA_PROP];\n    }\n\n    set newData(value) {\n        //<debug>\n        console.assert(\n            !this[NEW_DATA_PROP] && value && typeof value == 'object',\n            \"Can't set new data, new data should be an object and can be set only once!\"\n        );\n        //</debug>\n        this[NEW_DATA_PROP] = { ...value };\n    }\n\n    get oldData() {\n        return this[OLD_DATA_PROP];\n    }\n\n    set oldData(value) {\n        //<debug>\n        console.assert(\n            !this[OLD_DATA_PROP] && value && typeof value == 'object',\n            \"Can't set old data, old data should be an object and can be set only once!\"\n        );\n        //</debug>\n        this[OLD_DATA_PROP] = { ...value };\n    }\n\n    undo() {\n        const { model, oldData } = this;\n\n        // engine needs the setters to be activated, since there's some additional logic (for example, invalidate\n        // dispatcher)\n        if (model.$) {\n            Object.assign(model, oldData);\n        }\n\n        // it seems STM has to use `model.set()` because of `model.inSet` overrides or smth\n        // w/o this call, just with `Object.assign()` above, the view is not refreshed\n        // Since invoking accessor will just forward change to the engine, we need to pass `skipAccessors = true`\n        // to this call to make this change on data level.\n        // Covered by TaskEdit.t `autoSync` subtest\n        model.set(oldData, null, null, null, true);\n    }\n\n    redo() {\n        const { model, newData } = this;\n\n        // see comments above\n        if (model.$) {\n            Object.assign(model, newData);\n        }\n\n        model.set(newData, null, null, null, true);\n    }\n}\n","/**\n * @module Core/data/stm/action/InsertChildAction\n */\nimport ActionBase from './ActionBase.js';\n\nconst\n    PARENT_MODEL_PROP = Symbol('PARENT_MODEL_PROP'),\n    CHILD_MODELS_PROP = Symbol('CHILD_MODELS_PROP'),\n    INSERT_INDEX_PROP = Symbol('INSERT_INDEX_PROP'),\n    CONTEXT_PROP      = Symbol('CONTEXT_PROP');\n\n/**\n * Action to record the fact of adding a children models into a parent model.\n * @extends Core/data/stm/action/ActionBase\n */\nexport default class InsertChildAction extends ActionBase {\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Reference to a parent model a child model has been added to.\n             *\n             * @config {Core.data.Model}\n             * @default\n             */\n            parentModel : undefined,\n\n            /**\n             * Children models inserted.\n             *\n             * @config {Core.data.Model[]}\n             * @default\n             */\n            childModels : undefined,\n\n            /**\n             * Index a children models are inserted at\n             *\n             * @config {Number}\n             * @default\n             */\n            insertIndex : undefined,\n\n            /**\n             * Map having children models as keys and values containing previous parent\n             * of each model and index at the previous parent.\n             *\n             * @config {Object}\n             * @default\n             */\n            context : undefined\n        };\n    }\n\n    get type() {\n        return 'InsertChildAction';\n    }\n\n    //<debug>\n    afterConfig() {\n        super.afterConfig();\n\n        console.assert(\n            this.parentModel.isModel &&\n            Array.isArray(this.childModels) &&\n            this.childModels.every(m => m.isModel) &&\n            this.insertIndex !== undefined &&\n            this.context instanceof Map,\n            \"Can't create action, bad configuration!\"\n        );\n    }\n    //</debug>\n\n    get parentModel() {\n        return this[PARENT_MODEL_PROP];\n    }\n\n    set parentModel(model) {\n        //<debug>\n        console.assert(\n            !this[PARENT_MODEL_PROP] && model,\n            \"Can't set parent model, model is required and can be set only once!\"\n        );\n        //</debug>\n\n        this[PARENT_MODEL_PROP] = model;\n    }\n\n    get childModels() {\n        return this[CHILD_MODELS_PROP];\n    }\n\n    set childModels(models) {\n        //<debug>\n        console.assert(\n            !this[CHILD_MODELS_PROP] &&\n            Array.isArray(models) &&\n            models.every(m => m.isModel),\n            \"Can't set child models, models are required, it should be array of Model class and can be set only once!\"\n        );\n        //</debug>\n\n        this[CHILD_MODELS_PROP] = models.slice(0);\n    }\n\n    get insertIndex() {\n        return this[INSERT_INDEX_PROP];\n    }\n\n    set insertIndex(index) {\n        //<debug>\n        console.assert(\n            this[INSERT_INDEX_PROP] === undefined && index !== undefined,\n            \"Can't set insert index, the value is required and can be set only once!\"\n        );\n        //</debug>\n\n        this[INSERT_INDEX_PROP] = index;\n    }\n\n    get context() {\n        return this[CONTEXT_PROP];\n    }\n\n    set context(ctx) {\n        //<debug>\n        console.assert(\n            !this[CONTEXT_PROP] &&\n            ctx instanceof Map &&\n            Array.from(ctx.entries()).every(([k, v]) => {\n                return k.isModel && typeof v == 'object' && v && Object.prototype.hasOwnProperty.call(v, 'parent') && Object.prototype.hasOwnProperty.call(v, 'index');\n            }),\n            \"Can't set context, the value is required it should be Map keyed by inserted models with object values containing `parent` and `index` properties, and it can be set only once!\"\n        );\n        //</debug>\n\n        this[CONTEXT_PROP] = ctx;\n    }\n\n    undo() {\n        const { parentModel, context, childModels } = this;\n\n        // Let's sort models by parent index such that models with lesser index\n        // were inserted back first, thus making valid parent index of models following.\n        childModels.sort((lhs, rhs) => {\n            const\n                { lhsParent, lhsIndex } = context.get(lhs) || {},\n                { rhsParent, rhsIndex } = context.get(rhs) || {};\n\n            return lhsParent && lhsParent === rhsParent ? (lhsIndex - rhsIndex) : 0;\n        });\n\n        // Now let's re-insert records back to where they were or remove them\n        // if they weren't anywhere\n        childModels.forEach(m => {\n            const { parent, index } = context.get(m) || {};\n\n            if (parent) {\n                // If we move within same parent then index must be adjusted\n                if (parent === parentModel) {\n                    let adjustedIndex;\n\n                    // we need to increment index if the node was moved up\n                    adjustedIndex = index > m.parentIndex ? index + 1 : index;\n\n                    // null index if we need to move to the end\n                    adjustedIndex = index === parent.children.length - 1 ? null : adjustedIndex;\n\n                    // if insertBefore is undefined the node will be appended to the end\n                    const insertBefore = parent.children[adjustedIndex];\n\n                    parent.insertChild(m, insertBefore);\n                }\n                else {\n                    // Insert at previous index\n                    parent.insertChild(m, parent.children[index]);\n                }\n            }\n            else {\n                // Just remove\n                parentModel.removeChild(m);\n            }\n        });\n    }\n\n    redo() {\n        const\n            { parentModel, insertIndex, childModels } = this,\n            insertBefore = parentModel.children[insertIndex];\n\n        parentModel.insertChild(childModels, insertBefore);\n    }\n}\n","/**\n * @module Core/data/stm/action/RemoveChildAction\n */\nimport ActionBase from './ActionBase.js';\n\nconst\n    PARENT_MODEL_PROP = Symbol('PARENT_MODEL_PROP'),\n    CHILD_MODELS_PROP = Symbol('CHILD_MODELS_PROP'),\n    CONTEXT_PROP      = Symbol('CONTEXT_PROP');\n\n/**\n * Action to record store remove child operation.\n * @extends Core/data/stm/action/ActionBase\n */\nexport default class RemoveChildAction extends ActionBase {\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Reference to a parent model a child model has been removed to.\n             *\n             * @config {Core.data.Model}\n             * @default\n             */\n            parentModel : undefined,\n\n            /**\n             * Children models removed.\n             *\n             * @config {Core.data.Model[]}\n             * @default\n             */\n            childModels : undefined,\n\n            /**\n             * Map having children models as keys and values containing previous parent\n             * index at the parent.\n             *\n             * @config {Object}\n             * @default\n             */\n            context : undefined\n        };\n    }\n\n    get type() {\n        return 'RemoveChildAction';\n    }\n\n    //<debug>\n    afterConfig() {\n        super.afterConfig();\n\n        console.assert(\n            this.parentModel.isModel &&\n            Array.isArray(this.childModels) &&\n            this.childModels.every(m => m.isModel) &&\n            this.context instanceof Map,\n            \"Can't create action, bad configuration!\"\n        );\n    }\n    //</debug>\n\n    get parentModel() {\n        return this[PARENT_MODEL_PROP];\n    }\n\n    set parentModel(model) {\n        //<debug>\n        console.assert(\n            !this[PARENT_MODEL_PROP] && model,\n            \"Can't set parent model, model is required and can be set only once!\"\n        );\n        //</debug>\n\n        this[PARENT_MODEL_PROP] = model;\n    }\n\n    get childModels() {\n        return this[CHILD_MODELS_PROP];\n    }\n\n    set childModels(models) {\n        //<debug>\n        console.assert(\n            !this[CHILD_MODELS_PROP] &&\n            Array.isArray(models) &&\n            models.every(m => m.isModel),\n            \"Can't set child models, models are required, it should be array of Model class and can be set only once!\"\n        );\n        //</debug>\n\n        this[CHILD_MODELS_PROP] = models.slice(0);\n    }\n\n    get context() {\n        return this[CONTEXT_PROP];\n    }\n\n    set context(ctx) {\n        //<debug>\n        console.assert(\n            !this[CONTEXT_PROP] &&\n            ctx instanceof Map &&\n            Array.from(ctx.entries()).every(([k, v]) => {\n                return k.isModel && typeof v == 'number';\n            }),\n            \"Can't set context, the value is required it should be Map keyed by inserted models with `index` values, and it can be set only once!\"\n        );\n        //</debug>\n\n        this[CONTEXT_PROP] = ctx;\n    }\n\n    undo() {\n        const { parentModel, context, childModels } = this;\n\n        // Let's sort models by parent index such that models with lesser index\n        // were inserted back first, thus making valid parent index of models following.\n\n        childModels.sort((lhs, rhs) => {\n            const\n                lhsIndex = context.get(lhs),\n                rhsIndex = context.get(rhs);\n\n            return (lhsIndex - rhsIndex);\n        });\n\n        // Now let's re-insert records back to where they were\n        childModels.forEach(m => {\n            parentModel.insertChild(m, context.get(m));\n        });\n    }\n\n    redo() {\n        this.parentModel.removeChild(this.childModels);\n    }\n}\n","import ActionBase from './ActionBase.js';\nimport Store from '../../Store.js';\n\n/**\n * @module Core/data/stm/action/AddAction\n */\nconst\n    STORE_PROP      = Symbol('STORE_PROP'),\n    MODEL_LIST_PROP = Symbol('MODEL_LIST_PROP');\n\n/**\n * Action to record the fact of models adding to a store.\n * @extends Core/data/stm/action/ActionBase\n */\nexport default class AddAction extends ActionBase {\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Reference to a store models have been added into.\n             *\n             * @config {Core.data.Store}\n             * @default\n             */\n            store : undefined,\n\n            /**\n             * List of models added into the store.\n             *\n             * @config {Core.data.Model[]}\n             * @default\n             */\n            modelList : undefined,\n\n            /**\n             * Flag showing if undo/redo should be done silently i.e. with events suppressed\n             *\n             * @config {Boolean}\n             * @default\n             */\n            silent : false\n        };\n    }\n\n    get type() {\n        return 'AddAction';\n    }\n\n    //<debug>\n    afterConfig() {\n        super.afterConfig();\n\n        console.assert(\n            this.store instanceof Store &&\n            Array.isArray(this.modelList) &&\n            this.modelList.length &&\n            this.modelList.every(m => m.isModel),\n            \"Can't create action, bad configuration!\"\n        );\n    }\n    //</debug>\n\n    get store() {\n        return this[STORE_PROP];\n    }\n\n    set store(store) {\n        //<debug>\n        console.assert(\n            !this[STORE_PROP] && store && store instanceof Store,\n            \"Can't set store, store is required and can be set only once!\"\n        );\n        //</debug>\n\n        this[STORE_PROP] = store;\n    }\n\n    get modelList() {\n        return this[MODEL_LIST_PROP];\n    }\n\n    set modelList(list) {\n        //<debug>\n        console.assert(\n            !this[MODEL_LIST_PROP] &&\n            Array.isArray(list) &&\n            list.length,\n            list.every(m => m.isModel),\n            \"Can't set model list, model list is required it should be array of Models and it can be set only once!\"\n        );\n        //</debug>\n\n        this[MODEL_LIST_PROP] = list.slice(0);\n    }\n\n    undo() {\n        this.store.remove(this.modelList, this.silent);\n    }\n\n    redo() {\n        this.store.add(this.modelList, this.silent);\n    }\n}\n","import ActionBase from './ActionBase.js';\nimport Store from '../../Store.js';\n\n/**\n * @module Core/data/stm/action/InsertAction\n */\n\nconst\n    STORE_PROP        = Symbol('STORE_PROP'),\n    MODEL_LIST_PROP   = Symbol('MODEL_LIST_PROP'),\n    INSERT_INDEX_PROP = Symbol('INSERT_INDEX_PROP'),\n    CONTEXT_PROP      = Symbol('CONTEXT_PROP');\n\n/**\n * Action to record the fact of models inserting into a store.\n * @extends Core/data/stm/action/ActionBase\n */\nexport default class InsertAction extends ActionBase {\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Reference to a store models have been inserted into.\n             *\n             * @config {Core.data.Store}\n             * @default\n             */\n            store : undefined,\n\n            /**\n             * List of models inserted into the store.\n             *\n             * @config {Core.data.Model[]}\n             * @default\n             */\n            modelList : undefined,\n\n            /**\n             * Index the models have been inserted at.\n             *\n             * @config {Number}\n             * @default\n             */\n            insertIndex : undefined,\n\n            /**\n             * Models move context (if models has been moved), if any.\n             * Map this {@link Core/data/Model} instances as keys and their\n             * previous index as values\n             *\n             * @config {Map}\n             * @default\n             */\n            context : undefined,\n\n            /**\n             * Flag showing if undo/redo should be done silently i.e. with events suppressed\n             *\n             * @config {Boolean}\n             * @default\n             */\n            silent : false\n        };\n    }\n\n    get type() {\n        return 'InsertAction';\n    }\n\n    //<debug>\n    afterConfig() {\n        super.afterConfig();\n\n        console.assert(\n            this.store instanceof Store &&\n            Array.isArray(this.modelList) &&\n            this.modelList.length &&\n            this.modelList.every(m => m.isModel) &&\n            this.insertIndex !== undefined &&\n            this.context instanceof Map,\n            \"Can't create action, bad configuration!\"\n        );\n    }\n    //</debug>\n\n    get store() {\n        return this[STORE_PROP];\n    }\n\n    set store(store) {\n        //<debug>\n        console.assert(\n            !this[STORE_PROP] && store && store instanceof Store,\n            \"Can't set store, store is required and can be set only once!\"\n        );\n        //</debug>\n\n        this[STORE_PROP] = store;\n    }\n\n    get modelList() {\n        return this[MODEL_LIST_PROP];\n    }\n\n    set modelList(list) {\n        //<debug>\n        console.assert(\n            !this[MODEL_LIST_PROP] &&\n            Array.isArray(list) &&\n            list.length &&\n            list.every(m => m.isModel),\n            \"Can't set model list, model list is required, it should be array of Models and it can be set only once!\"\n        );\n        //</debug>\n\n        this[MODEL_LIST_PROP] = list.slice(0);\n    }\n\n    get insertIndex() {\n        return this[INSERT_INDEX_PROP];\n    }\n\n    set insertIndex(index) {\n        //<debug>\n        console.assert(\n            this[INSERT_INDEX_PROP] === undefined && index !== undefined,\n            \"Can't set insert index, the value is required and can be set only once!\"\n        );\n        //</debug>\n\n        this[INSERT_INDEX_PROP] = index;\n    }\n\n    get context() {\n        return this[CONTEXT_PROP];\n    }\n\n    set context(context) {\n        //<debug>\n        console.assert(\n            !this[CONTEXT_PROP] &&\n            context instanceof Map &&\n            Array.from(context.entries()).every(([k, v]) => k.isModel && v !== undefined),\n            \"Can't set move context, context is required, it should be Map with keys set to Model instances and numeric values, and it can be set only once!\"\n        );\n        //</debug>\n\n        this[CONTEXT_PROP] = context;\n    }\n\n    undo() {\n        const { store, modelList, context, silent } = this;\n\n        // Let's sort models by index such that models with lesser index\n        // were inserted back first, thus making valid index of models following.\n\n        modelList.sort((lhs, rhs) => {\n            const\n                lhsIndex = context.get(lhs),\n                rhsIndex = context.get(rhs);\n\n            return lhsIndex !== undefined && rhsIndex !== undefined ? lhsIndex - rhsIndex : 0;\n        });\n\n        modelList.forEach(m => {\n            const index = context.get(m);\n\n            // Flag the inserted record that we undo to skip adding it to \"store.removed\"\n            m._undoingInsertion = true;\n\n            if (index !== undefined) {\n                // Insert at previous index\n                store.insert(index, m, silent);\n            }\n            else {\n                // Just remove\n                store.remove(m, silent);\n            }\n\n            m._undoingInsertion = false;\n        });\n    }\n\n    redo() {\n        const me = this;\n        me.store.insert(me.insertIndex, me.modelList, me.silent);\n    }\n}\n","/**\n * @module Core/data/stm/action/RemoveAction\n */\nimport ActionBase from './ActionBase.js';\nimport Store from '../../Store.js';\n\nconst\n    STORE_PROP      = Symbol('STORE_PROP'),\n    MODEL_LIST_PROP = Symbol('MODEL_LIST_PROP'),\n    CONTEXT_PROP    = Symbol('CONTEXT_PROP');\n\n/**\n * Action to record the fact of models removed from a store.\n * @extends Core/data/stm/action/ActionBase\n */\nexport default class RemoveAction extends ActionBase {\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Reference to a store models have been removed from.\n             *\n             * @config {Core.data.Store}\n             * @default\n             */\n            store : undefined,\n\n            /**\n             * List of models removed from the store.\n             *\n             * @config {Core.data.Model[]}\n             * @default\n             */\n            modelList : undefined,\n\n            /**\n             * Models removing context.\n             *\n             * @config {Object}\n             * @default\n             */\n            context : undefined,\n\n            /**\n             * Flag showing if undo/redo should be done silently i.e. with events suppressed\n             *\n             * @config {Boolean}\n             * @default\n             */\n            silent : false\n        };\n    }\n\n    get type() {\n        return 'RemoveAction';\n    }\n\n    //<debug>\n    afterConfig() {\n        super.afterConfig();\n\n        console.assert(\n            this.store instanceof Store &&\n            Array.isArray(this.modelList) &&\n            this.modelList.length &&\n            this.modelList.every(m => m.isModel) &&\n            \"Can't create action, bad configuration!\"\n        );\n    }\n    //</debug>\n\n    get store() {\n        return this[STORE_PROP];\n    }\n\n    set store(store) {\n        //<debug>\n        console.assert(\n            !this[STORE_PROP] && store && store instanceof Store,\n            \"Can't set store, store is required and can be set only once!\"\n        );\n        //</debug>\n\n        this[STORE_PROP] = store;\n    }\n\n    get modelList() {\n        return this[MODEL_LIST_PROP];\n    }\n\n    set modelList(list) {\n        //<debug>\n        console.assert(\n            !this[MODEL_LIST_PROP] &&\n            Array.isArray(list) &&\n            list.length &&\n            list.every(m => m.isModel),\n            \"Can't set model list, model list is required, it should be array of Models and it can be set only once!\"\n        );\n        //</debug>\n\n        this[MODEL_LIST_PROP] = list.slice(0);\n    }\n\n    get context() {\n        return this[CONTEXT_PROP];\n    }\n\n    set context(context) {\n        //<debug>\n        console.assert(\n            !this[CONTEXT_PROP] &&\n            context instanceof Map &&\n            Array.from(context.entries()).every(([k, v]) => k.isModel && typeof v === 'number'),\n            \"Can't set removal context, removal context is required, it should be Map with Model instances as keys and numeric values, and it can be set only once!\"\n        );\n        //</debug>\n\n        this[CONTEXT_PROP] = context;\n    }\n\n    undo() {\n        const { store, context, modelList, silent } = this;\n\n        // Let's sort models by index such that models with lesser index\n        // were inserted back first, thus making valid index of models following.\n        modelList.sort((lhs, rhs) => {\n            const\n                lhsIndex = context.get(lhs),\n                rhsIndex = context.get(rhs);\n\n            // Here, in contrast to InsertAction, index is always present\n            return lhsIndex - rhsIndex;\n        });\n\n        modelList.forEach(m => {\n            const index = context.get(m);\n\n            // Insert at previous index\n            store.insert(index, m, silent);\n        });\n    }\n\n    redo() {\n        this.store.remove(this.modelList, this.silent);\n    }\n}\n","/**\n * @module Core/data/stm/action/RemoveAllAction\n */\nimport ActionBase from './ActionBase.js';\nimport Store from '../../Store.js';\n\nconst\n    STORE_PROP       = Symbol('STORE_PROP'),\n    ALL_RECORDS_PROP = Symbol('ALL_RECORDS_PROP');\n\n/**\n * Action to record store remove all operation.\n * @extends Core/data/stm/action/ActionBase\n */\nexport default class RemoveAllAction extends ActionBase {\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Reference to a store cleared.\n             *\n             * @config {Core.data.Store}\n             * @default\n             */\n            store : undefined,\n\n            /**\n             * All store records removed\n             *\n             * @config {Core.data.Model[]}\n             * @default\n             */\n            allRecords : undefined,\n\n            /**\n             * Flag showing if undo/redo should be done silently i.e. with events suppressed\n             *\n             * @config {Boolean}\n             * @default\n             */\n            silent : false\n        };\n    }\n\n    get type() {\n        return 'RemoveAllAction';\n    }\n\n    //<debug>\n    afterConfig() {\n        super.afterConfig();\n\n        console.assert(\n            this.store instanceof Store,\n            Array.isArray(this.allRecords) &&\n            this.allRecords.length &&\n            this.allRecords.every(m => m.isModel),\n            \"Can't create action, bad configuration!\"\n        );\n    }\n    //</debug>\n\n    get store() {\n        return this[STORE_PROP];\n    }\n\n    set store(store) {\n        //<debug>\n        console.assert(\n            !this[STORE_PROP] && store && store instanceof Store,\n            \"Can't set store, store is required and can be set only once!\"\n        );\n        //</debug>\n\n        this[STORE_PROP] = store;\n    }\n\n    get allRecords() {\n        return this[ALL_RECORDS_PROP];\n    }\n\n    set allRecords(records) {\n        //<debug>\n        console.assert(\n            !this[ALL_RECORDS_PROP] &&\n            Array.isArray(records) &&\n            records.length,\n            records.every(m => m.isModel),\n            \"Can't all records list, all records list is required it should be array of Models and it can be set only once!\"\n        );\n        //</debug>\n\n        this[ALL_RECORDS_PROP] = records.slice(0);\n    }\n\n    undo() {\n        const { store, allRecords, silent } = this;\n        store.add(allRecords, silent);\n    }\n\n    redo() {\n        this.store.removeAll(this.silent);\n    }\n}\n","/**\n * @module Core/data/stm/StateTrackingManager\n */\nimport Base from '../../Base.js';\nimport Events from '../../mixin/Events.js';\nimport StateBase from './state/StateBase.js';\nimport DisabledState from './state/DisabledState.js';\nimport ReadyState from './state/ReadyState.js';\nimport RecordingState from './state/RecordingState.js';\nimport RestoringState from './state/RestoringState.js';\nimport AutoReadyState from './state/AutoReadyState.js';\nimport AutoRecordingState from './state/AutoRecordingState.js';\nimport Registry from './state/Registry.js';\nimport UpdateAction from './action/UpdateAction.js';\nimport InsertChildAction from './action/InsertChildAction.js';\nimport RemoveChildAction from './action/RemoveChildAction.js';\nimport AddAction from './action/AddAction.js';\nimport InsertAction from './action/InsertAction.js';\nimport RemoveAction from './action/RemoveAction.js';\nimport RemoveAllAction from './action/RemoveAllAction.js';\nimport { STATE_PROP, STORES_PROP, QUEUE_PROP, POS_PROP, TRANSACTION_PROP, TRANSACTION_TIMER_PROP, AUTO_RECORD_PROP } from './Props.js';\n\nexport const makeModelUpdateAction = (model, newData, oldData, isInitialUserAction) => {\n    return new UpdateAction({\n        model,\n        newData,\n        oldData,\n        isInitialUserAction\n    });\n};\n\nexport const makeModelInsertChildAction = (parentModel, insertIndex, childModels, context) => {\n    return new InsertChildAction({\n        parentModel,\n        childModels,\n        insertIndex,\n        context\n    });\n};\n\nexport const makeModelRemoveChildAction = (parentModel, childModels, context) => {\n    return new RemoveChildAction({\n        parentModel,\n        childModels,\n        context\n    });\n};\n\nexport const makeStoreModelAddAction = (store, modelList, silent) => {\n    return new AddAction({\n        store,\n        modelList,\n        silent\n    });\n};\n\nexport const makeStoreModelInsertAction = (store, insertIndex, modelList, context, silent) => {\n    return new InsertAction({\n        store,\n        insertIndex,\n        modelList,\n        context,\n        silent\n    });\n};\n\nexport const makeStoreModelRemoveAction = (store, modelList, context, silent) => {\n    return new RemoveAction({\n        store,\n        modelList,\n        context,\n        silent\n    });\n};\n\nexport const makeStoreRemoveAllAction = (store, allRecords, silent) => {\n    return new RemoveAllAction({\n        store,\n        allRecords,\n        silent\n    });\n};\n\nconst stateTransition = (stm, event, ...args) => {\n    const\n        oldState = stm.state,\n        newState = event.call(stm[STATE_PROP], stm, ...args);\n\n    if (typeof newState === 'string') {\n        stm[STATE_PROP] = Registry.resolveStmState(newState);\n    }\n    else if (newState instanceof StateBase) {\n        stm[STATE_PROP] = newState;\n    }\n    else if (Array.isArray(newState)) {\n        const [state, next] = newState;\n\n        if (typeof state === 'string') {\n            stm[STATE_PROP] = Registry.resolveStmState(state);\n        }\n        else if (state instanceof StateBase) {\n            stm[STATE_PROP] = state;\n        }\n        else if (state && typeof state === 'object') {\n            stm = Object.assign(stm, state);\n            stm[STATE_PROP] = Registry.resolveStmState(stm[STATE_PROP]);\n        }\n\n        if (typeof next === 'function') {\n            stateTransition(stm, next, ...args);\n        }\n    }\n    else if (newState && typeof newState === 'object') {\n        stm = Object.assign(stm, newState);\n        stm[STATE_PROP] = Registry.resolveStmState(stm[STATE_PROP]);\n    }\n\n    if (oldState !== ReadyState && oldState !== AutoReadyState && (newState !== ReadyState && newState !== AutoReadyState)) {\n        stm.trigger('ready');\n    }\n};\n\n/**\n * Tracks the state of every store registered via {@link #function-addStore}. It is {@link #config-disabled} by default\n * so remember to call {@link #function-enable} when your stores are registered and initial dataset is loaded.\n * Use {@link #function-undo} / {@link #function-redo} method calls to restore state to a particular\n * point in time\n *\n * ```javascript\n * stm = new StateTrackingManager({\n *     autoRecord : true,\n *     listeners  : {\n *        'recordingstop' : () => {\n *            // your custom code to update undo/redo GUI controls\n *            updateUndoRedoControls();\n *        },\n *        'restoringstop' : ({ stm }) => {\n *            // your custom code to update undo/redo GUI controls\n *            updateUndoRedoControls();\n *        }\n *    },\n *    getTransactionTitle : (transaction) => {\n *        // your custom code to analyze the transaction and return custom transaction title\n *        const lastAction = transaction.queue[transaction.queue.length - 1];\n *\n *        if (lastAction instanceof AddAction) {\n *            let title = 'Add new record';\n *        }\n *\n *        return title;\n *    }\n * });\n *\n * stm.addStore(userStore);\n * stm.addStore(companyStore);\n * stm.addStore(otherStore);\n *\n * stm.enable();\n * ```\n *\n * **Note:** STM currently does not support undoing server side added and saved records.\n * Therefore it's recommended to {@link #function-resetQueue reset the queue}\n * each time a tracked store(s) loads from or saves its changes to the server.\n * If Crud Manager is used it can be done like this:\n * ```javascript\n * crudManager.on({\n *     requestDone() {\n *         stm.resetQueue();\n *     }\n * });\n * ```\n * and in case individual stores are used:\n * ```javascript\n * ajaxStore.on({\n *     afterRequest({ exception }) {\n *         if (!exception) {\n *             stm.resetQueue();\n *         }\n *     }\n * });\n * ```\n *\n * @mixes Core/mixin/Events\n * @extends Core/Base\n */\nexport default class StateTrackingManager extends Events(Base) {\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Default manager disabled state\n             *\n             * @config {Boolean}\n             * @default\n             */\n            disabled : true,\n\n            /**\n             * Whether to start transaction recording automatically in case the Manager is enabled.\n             *\n             * In the auto recording mode, the manager waits for the first change in any store being managed and starts a transaction, i.e.\n             * records any changes in its monitored stores. The transaction lasts for {@link #config-autoRecordTransactionStopTimeout} and\n             * afterwards creates one undo/redo step, including all changes in the stores during that period of time.\n             *\n             * In non auto recording mode you have to call {@link #function-startTransaction} / {@link #function-stopTransaction} to start and end\n             * a transaction.\n             *\n             * @config {Boolean}\n             * @default\n             */\n            autoRecord : false,\n\n            /**\n             * The transaction duration (in ms) for the auto recording mode {@link #config-autoRecord}\n             *\n             * @config {Number}\n             * @default\n             */\n            autoRecordTransactionStopTimeout : 100,\n\n            /**\n             * Store model update action factory\n             *\n             * @config {Function}\n             * @default\n             * @private\n             */\n            makeModelUpdateAction : makeModelUpdateAction,\n\n            /**\n             * Store insert child model action factory.\n             *\n             * @config {Function}\n             * @default\n             * @private\n             */\n            makeModelInsertChildAction : makeModelInsertChildAction,\n\n            /**\n             * Store remove child model action factory.\n             *\n             * @config {Function}\n             * @default\n             * @private\n             */\n            makeModelRemoveChildAction : makeModelRemoveChildAction,\n\n            /**\n             * Store add model action factory.\n             *\n             * @config {Function}\n             * @default\n             * @private\n             */\n            makeStoreModelAddAction : makeStoreModelAddAction,\n\n            /**\n             * Store insert model action factory.\n             *\n             * @config {Function}\n             * @default\n             * @private\n             */\n            makeStoreModelInsertAction : makeStoreModelInsertAction,\n\n            /**\n             * Store remove model action factory.\n             *\n             * @config {Function}\n             * @default\n             * @private\n             */\n            makeStoreModelRemoveAction : makeStoreModelRemoveAction,\n\n            /**\n             * Store remove all models action factory.\n             *\n             * @config {Function}\n             * @default\n             * @private\n             */\n            makeStoreRemoveAllAction : makeStoreRemoveAllAction,\n\n            /**\n             * Function to create a transaction title if none is provided.\n             *\n             * The function receives a transaction and should return a title.\n             *\n             * @config {Function}\n             * @default\n             */\n            getTransactionTitle : null\n        };\n    }\n\n    construct(...args) {\n        Object.assign(this, {\n            [STATE_PROP]             : ReadyState,\n            [STORES_PROP]            : [],\n            [QUEUE_PROP]             : [],\n            [POS_PROP]               : 0,\n            [TRANSACTION_PROP]       : null,\n            [TRANSACTION_TIMER_PROP] : null,\n            [AUTO_RECORD_PROP]       : false\n        });\n\n        super.construct(...args);\n    }\n\n    // TODO: This destroys the current state, which makes successive tests fail. Not sure what should be done\n    // doDestroy() {\n    //     super.doDestroy();\n    //     this.destroyProperties(STATE_PROP);\n    // }\n\n    /**\n     * Gets current state of the manager\n     *\n     * @property {Core.data.stm.state.StateBase}\n     */\n    get state() {\n        return this[STATE_PROP];\n    }\n\n    /**\n     * Gets current undo/redo queue position\n     *\n     * @property {Number}\n     */\n    get position() {\n        return this[POS_PROP];\n    }\n\n    /**\n     * Gets current undo/redo queue length\n     *\n     * @property {Number}\n     */\n    get length() {\n        return this[QUEUE_PROP].length;\n    }\n\n    /**\n     * Gets all the stores registered in STM\n     *\n     * @property {Core.data.Store[]}\n     */\n    get stores() {\n        return Array.from(this[STORES_PROP]);\n    }\n\n    /**\n     * Checks if a store has been added to the manager\n     *\n     * @param  {Core.data.Store} store\n     * @returns {Boolean}\n     */\n    hasStore(store) {\n        return this[STORES_PROP].includes(store);\n    }\n\n    /**\n     * Adds a store to the manager\n     *\n     * @param {Core.data.Store} store\n     */\n    addStore(store) {\n        //<debug>\n        console.assert(\n            !this.hasStore(store),\n            'Can\\'t add store to the STM manager, store is already added into the STM manager!'\n        );\n        //</debug>\n\n        if (!this.hasStore(store)) {\n\n            this[STORES_PROP].push(store);\n\n            store.stm = this;\n        }\n    }\n\n    /**\n     * Removes a store from the manager\n     *\n     * @param {Core.data.Store} store\n     */\n    removeStore(store) {\n        //<debug>\n        console.assert(\n            this.hasStore(store),\n            'Can\\'t remove store from the STM manager, store isn\\'t registered in the STM manager!'\n        );\n        //</debug>\n\n        if (this.hasStore(store)) {\n            this[STORES_PROP] = this[STORES_PROP].filter(s => s !== store);\n            store.stm = null;\n        }\n    }\n\n    /**\n     * Calls `fn` for each store registered in STM.\n     *\n     * @param {Function} fn (store, id) => ...\n     */\n    forEachStore(fn) {\n        this[STORES_PROP].forEach(s => fn(s, s.id));\n    }\n\n    //#region Disabled state\n\n    /**\n     * Get/set manager disabled state\n     *\n     * @property {Boolean}\n     */\n    get disabled() {\n        return this.state === DisabledState;\n    }\n\n    set disabled(val) {\n        const me = this;\n\n        if (me.disabled !== val) {\n            if (val) {\n                stateTransition(me, me.state.onDisable, me);\n            }\n            else {\n                stateTransition(me, me.state.onEnable, me);\n            }\n\n            me.trigger('stmDisabled', { disabled : val });\n\n            /**\n             * Fired when the disabled state of the STM changes\n             *\n             * @event disabled\n             * @param {Core.data.stm.StateTrackingManager} source\n             * @param {Boolean} disabled The current disabled state of the STM\n             */\n            me.trigger('disabled', { disabled : val });\n        }\n    }\n\n    get enabled() {\n        return !this.disabled;\n    }\n\n    /**\n     * Enables manager\n     */\n    enable() {\n        this.disabled = false;\n    }\n\n    /**\n     * Disables manager\n     */\n    disable() {\n        this.disabled = true;\n    }\n\n    //#endregion\n\n    /**\n     * Checks manager ready state\n     * @readonly\n     * @property {Boolean}\n     */\n    get isReady() {\n        return this.state === ReadyState || this.state === AutoReadyState;\n    }\n\n    waitForReadiness() {\n        return this.await('ready', false);\n    }\n\n    /**\n     * Checks manager recording state\n     * @readonly\n     * @property {Boolean}\n     */\n    get isRecording() {\n        return this.state === RecordingState || this.state === AutoRecordingState;\n    }\n\n    /**\n     * Gets/sets manager auto record option\n     *\n     * @property {Boolean}\n     */\n    get autoRecord() {\n        return this[AUTO_RECORD_PROP];\n    }\n\n    set autoRecord(value) {\n        const me = this;\n\n        if (me.autoRecord != value) {\n            if (value) {\n                stateTransition(me, me.state.onAutoRecordOn, me);\n            }\n            else {\n                stateTransition(me, me.state.onAutoRecordOff, me);\n            }\n        }\n    }\n\n    /**\n     * Starts undo/redo recording transaction.\n     *\n     * @param {String} [title]\n     */\n    startTransaction(title = null) {\n        stateTransition(this, this.state.onStartTransaction, title);\n    }\n\n    /**\n     * Stops undo/redo recording transaction\n     *\n     * @param {String} [title]\n     */\n    stopTransaction(title = null) {\n        stateTransition(this, this.state.onStopTransaction, title);\n    }\n\n    /**\n     * Stops undo/redo recording transaction after {@link #config-autoRecordTransactionStopTimeout} delay.\n     *\n     * @private\n     */\n    stopTransactionDelayed() {\n        stateTransition(this, this.state.onStopTransactionDelayed);\n    }\n\n    /**\n     * Rejects currently recorded transaction.\n     */\n    rejectTransaction() {\n        stateTransition(this, this.state.onRejectTransaction);\n    }\n\n    /**\n     * Gets currently recording STM transaction.\n     * @readonly\n     * @property {Core.data.stm.Transaction}\n     */\n    get transaction() {\n        return this[TRANSACTION_PROP];\n    }\n\n    /**\n     * Gets titles of all recorded undo/redo transactions\n     * @readonly\n     * @property {String[]}\n     */\n    get queue() {\n        return this[QUEUE_PROP].map((t) => t.title);\n    }\n\n    //<debug>\n    get rawQueue() {\n        return this[QUEUE_PROP];\n    }\n    //</debug>\n\n    /**\n     * Gets manager restoring state.\n     * @readonly\n     * @property {Boolean}\n     */\n    get isRestoring() {\n        return this.state === RestoringState;\n    }\n\n    /**\n     * Checks if the manager can undo.\n     *\n     * @property {Boolean}\n     */\n    get canUndo() {\n        return this.state.canUndo(this);\n    }\n\n    /**\n     * Checks if the manager can redo.\n     *\n     * @property {Boolean}\n     */\n    get canRedo() {\n        return this.state.canRedo(this);\n    }\n\n    /**\n     * Undoes current undo/redo transaction.\n     * @param {Number} [steps=1]\n     * @returns {Promise} A promise which is resolved when undo action has been performed\n     */\n    async undo(steps = 1) {\n        if (!this.isReady) {\n            await this.waitForReadiness();\n        }\n        stateTransition(this, this.state.onUndo, steps);\n    }\n\n    /**\n     * Undoes all transactions.\n     * @returns {Promise} A promise which is resolved when undo actions has been performed\n     */\n    async undoAll() {\n        if (!this.isReady) {\n            await this.waitForReadiness();\n        }\n        this.undo(this.length);\n    }\n\n    /**\n     * Redoes current undo/redo transaction.\n     *\n     * @param {Number} [steps=1]\n     * @returns {Promise} A promise which is resolved when redo action has been performed\n     */\n    async redo(steps = 1) {\n        if (!this.isReady) {\n            await this.waitForReadiness();\n        }\n        stateTransition(this, this.state.onRedo, steps);\n    }\n\n    /**\n     * Redoes all transactions.\n     * @returns {Promise} A promise which is resolved when redo actions has been performed\n     */\n    async redoAll() {\n        if (!this.isReady) {\n            await this.waitForReadiness();\n        }\n        this.redo(this.length);\n    }\n\n    /**\n     * Resets undo/redo queue.\n     */\n    resetQueue(/* private */options = { undo : true, redo : true }) {\n        stateTransition(this, this.state.onResetQueue, options);\n    }\n\n    /**\n     * Resets undo queue.\n     */\n    resetUndoQueue() {\n        this.resetQueue({ undo : true });\n    }\n\n    /**\n     * Resets redo queue.\n     */\n    resetRedoQueue() {\n        this.resetQueue({ redo : true });\n    }\n\n    notifyStoresAboutStateRecordingStart(transaction) {\n        this.forEachStore((store) => store.onStmRecordingStart?.(this, transaction));\n\n        /**\n         * Fired upon state recording operation starts.\n         *\n         * @event recordingStart\n         * @param {Core.data.stm.StateTrackingManager} stm\n         * @param {Core.data.stm.Transaction} transaction\n         */\n        this.trigger('recordingStart', { stm : this, transaction });\n    }\n\n    notifyStoresAboutStateRecordingStop(transaction, reason) {\n        this.forEachStore((store) => store.onStmRecordingStop?.(this, transaction, reason));\n\n        /**\n         * Fired upon state recording operation stops.\n         *\n         * @event recordingStop\n         * @param {Core.data.stm.StateTrackingManager} stm\n         * @param {Core.data.stm.Transaction} transaction\n         * @param {Object} reason Transaction stop reason\n         * @param {Boolean} reason.stop Transaction recording has been stopped in a normal way.\n         * @param {Boolean} reason.disabled Transaction recording has been stopped due to STM has been disabled.\n         * @param {Boolean} reason.rejected Transaction recording has been stopped due to transaction has been rejected.\n         */\n        this.trigger('recordingStop', { stm : this, transaction, reason });\n    }\n\n    notifyStoresAboutStateRestoringStart() {\n        this.forEachStore((store) => store.onStmRestoringStart?.(this));\n\n        /**\n         * Fired upon state restoration operation starts.\n         *\n         * @event restoringStart\n         * @param {Core.data.stm.StateTrackingManager} stm\n         */\n        this.trigger('restoringStart', { stm : this });\n    }\n\n    /**\n     * @param {'undo'|'redo'} cause The cause of the restore, if applicable\n     * @internal\n     */\n    notifyStoresAboutStateRestoringStop({ cause, transactions }) {\n        this.forEachStore((store) => store.onStmRestoringStop?.(this));\n\n        /**\n         * Fired upon state restoration operation stops.\n         *\n         * @event restoringStop\n         * @param {Core.data.stm.StateTrackingManager} stm\n         */\n        this.trigger('restoringStop', { stm : this, cause, transactions });\n    }\n\n    notifyStoresAboutQueueReset(options) {\n        this.forEachStore((store) => store.onStmQueueReset?.(this, options));\n\n        /**\n         * Fired upon state undo/redo queue reset.\n         *\n         * @event queueReset\n         * @param {Core.data.stm.StateTrackingManager} stm\n         */\n        this.trigger('queueReset', { stm : this, options });\n    }\n\n    /**\n     * Method to call from model STM mixin upon model update\n     *\n     * @param {Core.data.Model} model\n     * @param {Object} newData\n     * @param {Object} oldData\n     *\n     * @private\n     */\n    onModelUpdate(model, newData, oldData, isInitialUserAction) {\n        stateTransition(this, this.state.onModelUpdate, model, newData, oldData, isInitialUserAction);\n    }\n\n    /**\n     * Method to call from model STM mixin upon tree model child insertion\n     *\n     * @param {Core.data.Model} parentModel Parent model\n     * @param {Number} index Insertion index\n     * @param {Core.data.Model[]} childModels Array of models inserted\n     * @param {Map} context Map with inserted models as keys and objects with previous parent,\n     *                      and index at previous parent.\n     *\n     * @private\n     */\n    onModelInsertChild(parentModel, index, childModels, context) {\n        stateTransition(this, this.state.onModelInsertChild, parentModel, index, childModels, context);\n    }\n\n    /**\n     * Method to call from model STM mixin upon tree model child removal\n     *\n     * @param {Core.data.Model} parentModel\n     * @param {Core.data.Model[]} childModels\n     * @param {Map} context\n     *\n     * @private\n     */\n    onModelRemoveChild(parentModel, childModels, context) {\n        stateTransition(this, this.state.onModelRemoveChild, parentModel, childModels, context);\n    }\n\n    /**\n     * Method to call from store STM mixin upon store models adding\n     *\n     * @param {Core.data.Store} store\n     * @param {Core.data.Model[]} models\n     * @param {Boolean} silent\n     *\n     * @private\n     */\n    onStoreModelAdd(store, models, silent) {\n        stateTransition(this, this.state.onStoreModelAdd, store, models, silent);\n    }\n\n    /**\n     * Method to call from store STM mixin upon store models insertion\n     *\n     * @param {Core.data.Store} store\n     * @param {Number} index\n     * @param {Core.data.Model[]} models\n     * @param {Map} context\n     * @param {Boolean} silent\n     *\n     * @private\n     */\n    onStoreModelInsert(store, index, models, context, silent) {\n        stateTransition(this, this.state.onStoreModelInsert, store, index, models, context, silent);\n    }\n\n    /**\n     * Method to call from store STM mixin upon store models removal\n     *\n     * @param {Core.data.Store} store\n     * @param {Core.data.Model[]} models\n     * @param {Object} context\n     * @param {Boolean} silent\n     *\n     * @private\n     */\n    onStoreModelRemove(store, models, context, silent) {\n        stateTransition(this, this.state.onStoreModelRemove, store, models, context, silent);\n    }\n\n    /**\n     * Method to call from store STM mixin upon store clear\n     *\n     * @param {Core.data.Store} store\n     * @param {Core.data.Model[]} allRecords\n     * @param {Boolean} silent\n     *\n     * @private\n     */\n    onStoreRemoveAll(store, allRecords, silent) {\n        stateTransition(this, this.state.onStoreRemoveAll, store, allRecords, silent);\n    }\n\n    // UI key event handling\n    onUndoKeyPress(event) {\n        const me = this;\n\n        if (me.enabled) {\n            if (event.shiftKey) {\n                if (me.canRedo) {\n                    event.preventDefault();\n                    me.redo();\n                }\n            }\n            else if (me.canUndo) {\n                event.preventDefault();\n                me.undo();\n            }\n        }\n    }\n\n    stash() {\n        if (this.transaction) {\n            this.stashedTransaction = this.transaction;\n\n            this.rejectTransaction();\n        }\n    }\n\n    applyStash() {\n        if (this.stashedTransaction) {\n            this.startTransaction(this.stashedTransaction.title);\n\n            this.stashedTransaction.redo();\n\n            delete this.stashedTransaction;\n        }\n    }\n}\n","import Base from '../Base.js';\n\n/**\n * @module Core/mixin/Finalizable\n */\n\n/**\n * This mixin provides an asynchronous completion mechanism. This allows a process to coordinate its async actions\n * (such as Ajax requests or user interaction) with cleanup.\n *\n * Consider a context tracking helper class, for example:\n * ```\n *  class Context extends Base.mixin(Finalizable) {\n *      // ...\n *\n *      async finish() {\n *          this.owner.trigger('finish', {\n *              context : this\n *          });\n *\n *          // Wait for any scheduled finalizer to run...\n *          await this.finalize();\n *      }\n *\n *      doFinalize() {\n *          this.destroy();\n *      }\n *  }\n * ```\n *\n * When the `finish` event is processed, the receiver can register a promise for whatever processing it would like to\n * perform:\n * ```\n *  class Foo {\n *      onFinish({ context }) {\n *          context.finalizer = this.askUser(context);\n *      }\n *\n *      async askUser(context) {\n *          //\n *      }\n *  }\n * ```\n * @mixin\n * @internal\n */\nexport default Target => class Finalizable extends (Target || Base) {\n    static get $name() {\n        return 'Finalizable';\n    }\n\n    construct(...args) {\n        super.construct(...args);\n\n        /**\n         * This property can be set any time prior to calling {@link #function-finalize} (i.e., when the\n         * {@link #property-isFinalizing} property goes to `true`). When set, this instance will `await` this\n         * promise before completing the finalization process by calling {@link #function-doFinalize}.\n         * @member {Promise} finalizer\n         */\n        this.finalizer = null;\n\n        /**\n         * This property holds the `Promise` that will resolve when {@link #function-finalize} has completed. It is\n         * set when {@link #function-finalize} is called and cleared on return.\n         * @member {Boolean} finalizing\n         * @readonly\n         * @private\n         */\n        this.finalizing = null;\n\n        /**\n         * This property is `true` once the instance completes the {@link #function-finalize} method.\n         * @member {Boolean} isFinalized\n         * @readonly\n         */\n        this.isFinalized = false;\n\n        /**\n         * This property is set to `true` when {@link #function-finalize} is called.\n         * @member {Boolean} isFinalizing\n         * @readonly\n         */\n        this.isFinalizing = false;\n    }\n\n    /**\n     * This template method is called at the end of {@link #function-finalize}. By default it calls `destroy()`, but\n     * can be replaced by the derived class. This can be useful if it is not the `Finalizable` instance that awaits\n     * the {@link #function-finalize} method.\n     */\n    doFinalize() {\n        this.destroy();\n    }\n\n    /**\n     * This method is called (typically by this instance or its owner) to cleanup this instance while possibly first\n     * waiting for the {@link #property-finalizer} promise to settle. Once settled, the {@link #function-doFinalize}\n     * method is called.\n     * @async\n     */\n    finalize() {\n        const me = this;\n\n        let ret = me.finalizing;\n\n        if (!ret && !me.isFinalized) {\n            me.isFinalizing = true;  // note: we never clear this flag (use isFinalized to know if we're done)\n            // If we are called during finalization, we want to return the same promise, so we cache it away.\n            me.finalizing = ret = me._awaitFinalizer();\n        }\n\n        return ret;\n    }\n\n    async _awaitFinalizer() {\n        const me = this;\n\n        try {\n            await me.finalizer;\n        }\n        finally {\n            // be sure we clean up even if an exception is thrown by the finalizer...\n\n            me.finalizing = null;\n            me.isFinalized = true;\n\n            me.doFinalize();\n        }\n    }\n};\n","import Base from '../../Base.js';\nimport DomHelper from '../../helper/DomHelper.js';\nimport EventHelper from '../../helper/EventHelper.js';\nimport Delayable from '../../mixin/Delayable.js';\nimport Finalizable from '../../mixin/Finalizable.js';\nimport Identifiable from '../../mixin/Identifiable.js';\nimport DomDataStore from '../../data/DomDataStore.js';\nimport Objects from '../../helper/util/Objects.js';\n\n/**\n * @module Core/util/drag/DragContext\n */\n\nconst\n    ABORTED  = Symbol('dragAbort'), // Drag has been aborted\n    INIT     = Symbol('dragInit'),  // Button is down but insufficient movement to start the drag\n    DRAGGING = Symbol('dragDrag'),  // Button is down and movement has started a drag\n    DROPPED  = Symbol('dragDrop'),  // Button has been released and drop has occurred\n    lockDirections = {\n        x : 'horizontal',\n        y : 'vertical'\n    };\n\n/**\n * This class is created during drag operations of {@link Core/mixin/Draggable}. It holds the state of an ongoing drag\n * operation.\n * @extends Core/Base\n * @internal\n */\nexport default class DragContext extends Base.mixin(Finalizable, Delayable, Identifiable) {\n\n    static $name = 'DragContext';\n\n    static get configurable() {\n        return {\n            /**\n             * The element that will have the {@link Core.mixin.Draggable#property-draggingItemCls}. This element is\n             * determined by the {@link Core.mixin.Draggable#config-dragItemSelector}.\n             * @config {HTMLElement}\n             */\n            itemElement : null,\n\n            /**\n             * The `ScrollManager` instance to use for scrolling while dragging.\n             * @config {Core.util.ScrollManager}\n             * @private\n             */\n            scrollManager : null,\n\n            /**\n             * Config for `startMonitoring` call.\n             * @config {Object}\n             * @private\n             */\n            monitoringConfig : null,\n\n            /**\n             * The source of the drag operation.\n             * @config {Core.mixin.Draggable}\n             * @default\n             * @readonly\n             */\n            source : null,\n\n            /**\n             * The current target of the drag.\n             * @member {Core.mixin.Droppable}\n             * @readonly\n             */\n            target : null,\n\n            /**\n             * The current target element of the drag.\n             * @member {HTMLElement}\n             * @private\n             */\n            targetElement : null,\n\n            /**\n             * The minimum distance from the touchstart/mousedown/pointerdown that must be moved to actually start a\n             * drag operation.\n             * @config {Number}\n             * @default\n             * @readonly\n             */\n            threshold : 5,\n\n            /**\n             * The minimum amount of time a touch must be maintained before it will initiate a drag. Movement prior to\n             * this time will cancel the drag in order to allow touch scrolling.\n             * @config {Number}\n             * @default\n             */\n            touchStartDelay : 300\n        };\n    }\n\n    static get identifiable() {\n        return {};\n    }\n\n    /**\n     * The current DOM event being processed.\n     * @member {Event} event\n     * @readonly\n     */\n\n    construct(...args) {\n        super.construct(...args);\n\n        const\n            me = this,\n            { event } = me;\n\n        Object.assign(me, {\n            /**\n             * This property holds the `altKey` state of the most recent event.\n             * @member {Boolean}\n             */\n            altKey : null,\n\n            /**\n             * An array of functions to call when cleaning up the context instance.\n             * @member {Function[]}\n             * @private\n             */\n            cleaners : [],\n\n            /**\n             * This property holds the `ctrlKey` state of the most recent event.\n             * @member {Boolean}\n             */\n            ctrlKey : null,\n\n            /**\n             * Container for data associated with the drag. Data items are added by the {@link Core.mixin.Draggable}\n             * when the drag starts.\n             * @member {Map}\n             * @private\n             */\n            data : new Map(),\n\n            /**\n             * The element from which the drag operation started.\n             * @member {HTMLElement}\n             * @readonly\n             */\n            element : event.target,\n\n            /**\n             * The event that completed the drag (a `mouseup`, `pointerup` or `touchend`).\n             * @member {Event}\n             * @readonly\n             */\n            endEvent : null,\n\n            /**\n             * The most recent `mousemove`, `pointermove` or `touchmove` event.\n             * @member {Event}\n             * @private\n             */\n            lastMoveEvent : null,\n\n            /**\n             * This property holds the `metaKey` state of the most recent event.\n             * @member {Boolean}\n             */\n            metaKey : null,\n\n            /**\n             * The previous {@link #property-target} of the drag.\n             * @member {Core.mixin.Droppable}\n             * @readonly\n             */\n            previousTarget : null,\n\n            /**\n             * The scroll actions reported by the {@link #config-scrollManager}.\n             * @member {Object}\n             * @private\n             */\n            scrollerAction : null,\n\n            /**\n             * This property holds the `shiftKey` state of the most recent event.\n             * @member {Boolean}\n             */\n            shiftKey : null,\n\n            /**\n             * This property holds the current state of the drag process.\n             *\n             * This will be one of the following values:\n             *\n             *  - `DragContext.STATE.INIT` - The button is down but there is insufficient movement to start the drag.\n             *  - `DragContext.STATE.DRAGGING` - The button is down and movement has started the drag.\n             *  - `DragContext.STATE.DROPPED` - The button has been released and drop has occurred.\n             *  - `DragContext.STATE.ABORTED` - The drag has been aborted (this happens if the user presses the `ESC`\n             *    key or if the {@link #function-abort} method is called).\n             *\n             * @member {Symbol}\n             * @readonly\n             * @internal\n             */\n            state : INIT,\n\n            /**\n             * The event that started the drag operation.\n             * @member {Event}\n             * @readonly\n             */\n            startEvent : event,\n\n            /**\n             * The timer that fires when a touch pointermove is allowed to start the drag. A touch pointermove event\n             * prior to this will `abort()` the drag to allow touch scrolling.\n             * @member {Number}\n             * @private\n             */\n            touchStartTimer : null,\n\n            /**\n             * Stores the value from writes to the {@link #property-valid} property.\n             * @member {Boolean}\n             * @private\n             */\n            _valid : true\n        });\n\n        if (('touches' in event) && me.touchStartDelay) {\n            me.touchStartTimer = me.setTimeout(() => me.touchStartTimer = null, me.touchStartDelay, 'touchStartDelay');\n        }\n\n        EventHelper.on({\n            element : globalThis,\n            blur    : 'onWindowBlur',\n            thisObj : me\n        });\n    }\n\n    doDestroy() {\n        const\n            me = this,\n            { source, target } = me;\n\n        me.cleanup();\n\n        if (target?.dropping === me) {\n            target.dropping = null;\n        }\n\n        if (source?.dragging === me) {\n            source.dragging = null;\n        }\n\n        super.doDestroy();\n    }\n\n    onWindowBlur() {\n        if (this.started) {\n            this.abort();\n        }\n    }\n\n    /**\n     * This property is `true` if the {@link #function-abort} method was called and `false` otherwise. This\n     * is typically because the user pressed the ESC key, however, a drag can be aborted for other reasons.\n     * @property {Boolean}\n     * @readonly\n     */\n    get aborted() {\n        return this.state === ABORTED;\n    }\n\n    /**\n     * Returns `true` if the drag has completed either by mouse/pointerup or the {@link #function-abort} method.\n     * @property {Boolean}\n     * @readonly\n     */\n    get completed() {\n        return this.isDestroying || this.aborted || this.endEvent !== null;\n    }\n\n    /**\n     * This property is `true` if the drag {@link #config-threshold} has not yet been reached.\n     * @property {Boolean}\n     * @readonly\n     */\n    get pending() {\n        return this.state === INIT;\n    }\n\n    /**\n     * This property is `true` if the drag {@link #config-threshold} has been reached and the drag operation is active.\n     * @property {Boolean}\n     * @readonly\n     */\n    get started() {\n        return this.state !== INIT && !this.aborted;\n    }\n\n    /**\n     * This property is `true` when the drag is in a valid drop state. This can be set to `false` to indicate the drop\n     * is invalid. Setting to `true` does not ensure that the property will be `true` when next read due to other factors\n     * that are required to make the drop valid. For example, setting `valid = true` will still return `false` if called\n     * before the drag {@link #config-threshold} has not been reached or if the {@link #function-abort} method has been\n     * called.\n     * @property {Boolean}\n     */\n    get valid() {\n        return this.started && this.targetElement != null && this._valid;\n    }\n\n    set valid(v) {\n        this._valid = v;\n    }\n\n    //region Data Access\n\n    /**\n     * Retrieves a data item from the drag source. This method can only be called after the drag has completed.\n     * @param {String|String[]} name The name of the data item.\n     * @returns {*}\n     */\n    async get(name) {\n        if (this.aborted) {\n            throw new Error('Data is not available on aborted drag');\n        }\n        if (!this.completed) {\n            throw new Error('Data is not available until drag completion');\n        }\n\n        if (Array.isArray(name)) {\n            return Promise.all(name.map(s => this.get(s)));\n        }\n\n        let value = this.data.get(name);\n\n        if (typeof value === 'function') {\n            value = await value();\n\n            this.data.set(name, value);\n        }\n\n        return value;\n    }\n\n    /**\n     * Returns `true` if the named data item is present.\n     * @param {String} name The name of the data item.\n     * @returns {Boolean}\n     */\n    has(name) {\n        return this.data.has(name);\n    }\n\n    /**\n     * Retrieves a data item from the drag source if it is available. This will return `true` for an item that was\n     * {@link #function-set} using a renderer function.\n     * @param {String|String[]} name The name of the data item.\n     * @returns {*}\n     */\n    peek(name) {\n        if (this.aborted) {\n            throw new Error('Data is not available on aborted drag');\n        }\n\n        if (Array.isArray(name)) {\n            return name.map(s => this.peek(s));\n        }\n\n        let value = this.data.get(name);\n\n        if (typeof value === 'function') {\n            value = true;\n        }\n\n        return value;\n    }\n\n    /**\n     * Sets a data item for the drag. If a function is passed, it is called to render the data only if that data is\n     * actually requested via the {@link #function-get} method. A data renderer function can be `async`.\n     * @param {String} name The name of the data item.\n     * @param {*} value The value of the data item.\n     */\n    set(name, value) {\n        this.data.set(name, value);\n    }\n\n    //endregion\n    //region Configs\n\n    changeTarget(target, was) {\n        if (target !== was) {\n            const me = this;\n\n            me._target = target;\n            me.previousTarget = was;\n\n            if (was) {\n                was.dropping = null;\n            }\n\n            if (target) {\n                target.dropping = me;  // calls dragEnter/Leave on the target\n\n                if (target.dropping !== me) {  // if (target did not accept us)\n                    target = null;\n\n                    me.valid = false;\n                }\n            }\n\n            me._target = was;\n        }\n\n        return target;\n    }\n\n    updateTarget(target, was) {\n        const me = this;\n\n        if (was) {\n            me.source.dragLeaveTarget(me, was);\n        }\n\n        if (target) {\n            me.valid = true;\n\n            // Always give the target an initial dragMove since feedback/indicators will need to update on move and\n            // the lack of a move on entry will just make that a special case.\n            target.dragMove(me);\n\n            me.source.dragEnterTarget(me);\n        }\n    }\n\n    updateTargetElement(targetElement) {\n        let droppable,\n            droppables,\n            droppableSelector,\n            i,\n            t;\n\n        // We interrogate all encapsulating DOM elements to see if we are in a Droppable's element.\n        // If we find an element which has Droppables registered for it, we attempt to set each as\n        // our target, and go with the first one that accepts us.\n        // changeTarget sets target.dropping to this Context, and the target's dragEnter implementation\n        // may reject it by returning false.\n        for (t = targetElement; t; t = t.parentElement) {\n            droppables = DomDataStore.get(t, 'droppables');\n\n            if (droppables) {\n                for (i = 0; i < droppables.length; ++i) {\n                    droppable = droppables[i];\n\n                    // If the event target is *inside* the Droppable's root, we can ask the Droppable\n                    // to accept this DragContext.\n                    // Otherwise we can get a hit on borders.\n                    if (droppable.dropRootElement.contains(targetElement)) {\n                        droppableSelector = droppable.droppableSelector;\n\n                        // If the target element is not inside the Droppable's selector, give up.\n                        if (!droppableSelector || targetElement.closest(`#${DomHelper.getId(droppable.dropRootElement)} ${droppableSelector}`)) {\n                            this.target = droppable;\n\n                            // The found Droppable accepted this DragContext, so we're done -\n                            // we are using this Droppable.\n                            if (this.target === droppable) {\n                                return;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    //endregion\n    //region Operations\n\n    /**\n     * Aborts the drag. After calling this method, {@link #property-aborted} will be `true`, {@link #property-valid}\n     * will be `false` and {@link #property-completed} will be `true`.\n     */\n    abort() {\n        const\n            me = this,\n            { element, source } = me;\n\n        // Force a synchronous layout so that transitions from this point will work.\n        element?.getBoundingClientRect();\n\n        if (me.state !== DROPPED) {\n            me.state = ABORTED;\n            me.cleanup();\n        }\n\n        source?.endDrag(me);\n    }\n\n    begin() {\n        const\n            me = this,\n            { source } = me,\n            ret = source.beforeDrag(me);\n\n        if (ret !== false) {\n            source.dragging = me;\n        }\n\n        return ret;\n    }\n\n    cleanup() {\n        let cleaner;\n\n        while ((cleaner = this.cleaners.pop())) {\n            cleaner();\n        }\n    }\n\n    end(event) {\n        const\n            me = this,\n            { lastMoveEvent : lastEvent, target } = me,\n            { dragSwallowClickTime } = me.source;\n\n        me.event = me.endEvent = event;\n        me.syncFlags();\n\n        if (me.started) {\n            if (lastEvent?.clientX !== event.clientX || lastEvent?.clientY !== event.clientY ||\n                lastEvent?.target !== event.target) {\n                // Make sure the drop event is preceded by a move to the final position...\n                me.track();\n            }\n\n            if (dragSwallowClickTime) {\n                // Prevent the impending document click from the mouseup event from propagating\n                // into a click on our element.\n                EventHelper.on({\n                    element : document,\n                    capture : true,\n                    expires : dragSwallowClickTime, // In case a click did not ensue, remove the listener\n                    once    : true,\n                    click(event) {\n                        event.stopPropagation();\n                    }\n                });\n            }\n\n            me.state = DROPPED;\n\n            if (target !== me.source) {\n                // If we are the target and not also the source, we need to call dragDrop() now. If we are\n                // the source, dragDrop() will be called by Draggable.\n                target?.dragDrop(me);\n            }\n        }\n    }\n\n    fakeKey(event, down) {\n        const\n            me = this,\n            { lastMoveEvent } = me;\n\n        if (lastMoveEvent && me.element) {\n            let changed;\n\n            // Indicate that this is a 'fake' mousemove event as a result of the keydown\n            lastMoveEvent.isKey = true;\n\n            if (event.key === 'Alt') {\n                if (me.altKey !== down) {\n                    me.altKey = down;\n                    changed = true;\n                }\n            }\n            else if (event.key === 'Control') {\n                if (me.ctrlKey !== down) {\n                    me.ctrlKey = down;\n                    changed = true;\n                }\n            }\n\n            if (changed) {\n                me.event = lastMoveEvent;\n\n                me.track();\n            }\n        }\n    }\n\n    keyDown(event) {\n        if (!this.completed) {\n            if (event.key === 'Escape') {\n                this.abort();\n            }\n            else if (this.isDragToggleKey(event.key)) {\n                this.fakeKey(event, true);\n            }\n        }\n    }\n\n    keyUp(event) {\n        if (!this.completed && this.isDragToggleKey(event.key)) {\n            this.fakeKey(event, false);\n        }\n    }\n\n    getDistance(event) {\n        return EventHelper.getDistanceBetween(this.startEvent, event);\n    }\n\n    isDragToggleKey(key) {\n        return key === 'Control' || key === 'Alt';\n    }\n\n    move(event) {\n        const\n            me = this,\n            { target } = event,\n            distance = me.getDistance(event),\n            significant = distance >= me.threshold;\n\n        me.syncFlags();\n\n        if (me.touchStartTimer) {\n            if (significant) {\n                me.abort();\n            }\n            return;\n        }\n\n        if (target && target.nodeType === Node.ELEMENT_NODE) {\n            if (significant && !me.started) {\n                me.event = event;\n\n                // triggers beforeDragStart, dragStart. returning false from beforeDragStart aborts drag\n                if (me.start() === false) {\n                    me.abort();\n                    return;\n                }\n            }\n\n            // With resize observer polyfill scroll event might fire after drop is completed but before listener is\n            // removed\n            if (me.started && !me.completed) {\n                me.lastMoveEvent = me.event = event;\n\n                // to prevent view drag (scroll) on ipad\n                if (event.type === 'touchmove') {\n                    event.preventDefault();\n                    event.stopImmediatePropagation();\n                }\n\n                me.track();\n            }\n        }\n    }\n\n    start() {\n        const\n            me = this,\n            { scrollManager, monitoringConfig, source } = me,\n            { draggingBodyCls : activeCls, dragLock } = source,\n            element = /* source.dragWithin || */ source.dragRootElement;\n\n        me.state = DRAGGING;\n\n        // Now that the drag drop is confirmed to be starting, activate the configured scrollManager if present\n        if (scrollManager) {\n            const detacher = scrollManager.startMonitoring(Objects.merge({\n                scrollables : [{\n                    element\n                }],\n                direction : lockDirections[dragLock] || dragLock || 'both',\n                callback(scrollerAction) {\n                    const { lastMoveEvent } = me;\n\n                    if (lastMoveEvent && me.element) {\n                        // Indicate that this is a 'fake' mousemove event as a result of the scrolling\n                        lastMoveEvent.isScroll = true;\n\n                        me.event = lastMoveEvent;\n                        me.scrollerAction = scrollerAction;\n\n                        me.track();\n\n                        me.scrollerAction = null;\n                    }\n                }\n            }, monitoringConfig));\n\n            me.cleaners.push(detacher);\n        }\n\n        // Global informational class for when DragHelper is dragging\n        const rootEl = source.dragRootElement.closest('.b-outer') || document.body;\n        rootEl.classList.add(activeCls);\n\n        me.cleaners.push(() => rootEl.classList.remove(activeCls));\n\n        if (source.startDrag(me) === false) {\n            me.cleanup();\n\n            return false;\n        }\n    }\n\n    syncFlags() {\n        const\n            me = this,\n            { event } = me;\n\n        me.altKey = event.altKey;\n\n        // Our EventHelper events are \"unfixed\" after processing, so the meta->ctrl\n        // modifier mapping will not persist. We must do the mapping here.\n        me.ctrlKey = event.ctrlKey || event.metaKey;\n        me.metaKey = event.metaKey;\n        me.shiftKey = event.shiftKey;\n    }\n\n    track() {\n        const\n            me = this,\n            { event, source, target } = me;\n\n        let targetElement = event.target,\n            touch;\n\n        // NOTE: we cannot syncFlags here since we are called to pass along keydown events as movement updates\n\n        // \"pointer-events:none\" touchmove has no effect for the touchmove event target, meaning we cannot know\n        // what's under the cursor as easily in touch devices\n        if (event.type === 'touchmove') {\n            touch = event.changedTouches[0];\n\n            // From MDN:\n            //  * clientX/Y - the coordinates of the touch point relative to the left/top edge of the browser viewport,\n            //    not including any scroll offset.\n            //  * The elementFromPoint() method returns the topmost Element at the specified coordinates (relative to\n            //    the viewport).\n            targetElement = DomHelper.elementFromPoint(touch.clientX, touch.clientY);\n        }\n\n        me.targetElement = targetElement;  // when we change elements, update me.target\n\n        if (target === me.target) {\n            // if we have a target and that did not change due to setting targetElement, we need to inform the target\n            // of the drag move\n            target?.dragMove(me);\n        }\n\n        source.trackDrag(me);\n    }\n\n    //endregion\n}\n\nDragContext.prototype.STATE = DragContext.STATE = Object.freeze({\n    ABORTED,\n    INIT,\n    DRAGGING,\n    DROPPED\n});\n","import Base from '../../Base.js';\nimport Factoryable from '../../mixin/Factoryable.js';\n\n/**\n * @module Core/util/drag/DragProxy\n */\n\n/**\n * Drag proxies are helper classes that represent the object being dragged in some visual way. This is an abstract\n * base with which particular drag proxy classes (such as, {@link Core.util.drag.DragTipProxy} are registered.\n *\n * Derived classes the various template methods of this class to manage their particular form of visual feedback.\n * @extends Core/Base\n * @internal\n */\nexport default class DragProxy extends Base.mixin(Factoryable) {\n    static get type() {\n        return 'default';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * The currently active `DragContext`. This context will be active prior to be passed to the proxy. This\n             * config is set by {@link #function-dragStart} and cleared by {@link #function-dragEnd}.\n             * @config {Core.util.drag.DragContext}\n             */\n            dragging : null\n        };\n    }\n\n    static get factoryable() {\n        return {\n            defaultType : DragProxy\n        };\n    }\n\n    /**\n     * The `Draggable` instance that owns this drag proxy.\n     * @member {Core.mixin.Draggable} owner\n     * @readonly\n     */\n\n    //region Configs\n\n    updateDragging(drag, was) {\n        if (was) {\n            this.close(was);\n        }\n\n        if (drag) {\n            this.open(drag);\n        }\n    }\n\n    //endregion\n\n    //region Operations\n\n    /**\n     * This template method is called when {@link #config-dragging} is reset to `null`.\n     * @param {Core.util.drag.DragContext} drag The drag instance.\n     */\n    close(drag) {\n        // template\n    }\n\n    /**\n     * This template method is called when {@link #config-dragging} is set to a non-`null` value.\n     * @param {Core.util.drag.DragContext} drag The drag instance.\n     */\n    open(drag) {\n        // template\n    }\n\n    //endregion\n\n    //region Drag Processing\n\n    /**\n     * This template method is called by the `Draggable` instance when the drag officially starts.\n\n     * This sets the {@link #config-dragging} config to `drag`, which triggers the call to {@link #function-open}.\n     * @param {Core.util.drag.DragContext} drag The drag instance.\n     */\n    dragStart(drag) {\n        this.dragging = drag;\n    }\n\n    /**\n     * This template method is called by the `Draggable` instance as drag movement occurs.\n     * @param {Core.util.drag.DragContext} drag The drag instance.\n     */\n    dragMove(drag) {\n        // template\n    }\n\n    /**\n     * This template method is called by the `Draggable` instance when the drag completes.\n     *\n     * This sets the {@link #config-dragging} config to `null`, which triggers the call to {@link #function-close}.\n     * @param {Core.util.drag.DragContext} drag The drag instance.\n     */\n    dragEnd(drag) {\n        this.dragging = null;\n    }\n\n    //endregion\n}\n\nDragProxy.initClass();\n","import Base from '../Base.js';\nimport EventHelper from '../helper/EventHelper.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\n\nimport DragContext from '../util/drag/DragContext.js';\nimport DragProxy from '../util/drag/DragProxy.js';\n\n/**\n * @module Core/mixin/Draggable\n */\n\n/**\n * Mix this into another class to enable drag/drop support.\n *\n * To use a draggable, it must be associated with an element that contains draggable content:\n *\n * ```javascript\n *  let draggable = new MyDraggable({\n *      dragRootElement : someElement\n *  });\n * ```\n *\n * Once the `dragRootElement` is assigned, any element inside that root is a candidate for dragging. To limit the\n * allowed element, set the {@link #config-dragSelector} config.\n *\n * ```javascript\n *  let draggable = new MyDraggable({\n *      dragRootElement : someElement,\n *      dragSelector    : '.drag-this'\n *  });\n * ```\n * @mixin\n * @internal\n */\nexport default Target => class Draggable extends (Target || Base) {\n    static get $name() {\n        return 'Draggable';\n    }\n\n    //region Configs\n\n    static get configurable() {\n        return {\n            /**\n             * The current `DragContext`. This is created immediately on pointerdown but does not become active until\n             * some movement occurs. This {@link #config-dragThreshold threshold} is configurable.\n             * @member {Core.util.drag.DragContext}\n             * @readonly\n             */\n            dragging : {\n                $config : 'nullify',\n                value   : null\n            },\n\n            /**\n             * A CSS selector to use to ascend from the {@link #config-dragRootElement} to find the element that will\n             * gain the {@link #property-draggingCls} and {@link #property-draggingStartedCls} CSS classes.\n             * @config {String}\n             */\n            draggingClsSelector : null,\n\n            /**\n             * The listeners to add to the `document` during a drag.\n             * @config {Object}\n             * @private\n             */\n            dragDocumentListeners : {\n                element : document,\n                keydown : 'onDragKeyDown',\n                keyup   : 'onDragKeyUp',\n\n                // On mobile, a long-press will (sometimes) trigger a context menu, so we suppress it:\n                contextmenu : 'onDragContextMenu',\n\n                // We don't use pointermove/up because they get snared in the \"touch-action\" vs \"pan-x/y\" trap and we\n                // cannot prevent panning (aka scrolling) in response to move events if we go that way:\n                mousemove : 'onDragPointerMove',\n                mouseup   : 'onDragPointerUp',\n\n                // Touch desktops don't fire touchend event when touch has ended, instead pointerup is fired. iOS does\n                // fire touchend:\n                pointerup : 'onDragPointerUp',\n                touchend  : 'onDragPointerUp',\n                touchmove : {\n                    handler : 'onDragPointerMove',\n                    passive : false // We need to be able to preventDefault on the touchmove\n                }\n            },\n\n            /**\n             * A CSS selector to use to ascend from the drag element to find the element that will gain the\n             * {@link #property-draggingItemCls} CSS class. If not supplied, the drag element will gain this CSS\n             * class.\n             * @config {String}\n             */\n            dragItemSelector : null,\n\n            /**\n             * A CSS class to add to items identified by the {@link #config-dragItemSelector} when the mouse\n             * enters.\n             * @config {String}\n             */\n            dragItemOverCls : null,\n\n            /**\n             * A function to call when the pointer enters a {@link #config-dragItemSelector}.\n             * @config {Function} onDragItemMouseEnter\n             */\n\n            /**\n             * A function to call when the pointer moves inside a {@link #config-dragItemSelector}.\n             * @config {Function} onDragItemMouseMove\n             */\n\n            /**\n             * A function to call when the pointer leaves a {@link #config-dragItemSelector}.\n             * @config {Function} onDragItemMouseLeave\n             */\n\n            /**\n             * Configure as `'x'` to lock dragging to the `X` axis (the drag will only move horizontally) or `'y'`\n             * to lock dragging to the `Y` axis (the drag will only move vertically).\n             * @config {'x'|'y'|null}\n             */\n            dragLock : null,\n\n            /**\n             * The minimum distance a drag must move to be considered a drop and not\n             * {@link Core.util.drag.DragContext#property-aborted aborted}.\n             * @config {Number}\n             * @default\n             */\n            dragMinDistance : 1,\n\n            /**\n             * The {@link Core.util.drag.DragProxy drag proxy} is a helper object that can be used to display feedback\n             * during a drag.\n             * @config {DragProxyConfig|Core.util.drag.DragProxy}\n             */\n            dragProxy : {\n                $config : ['lazy', 'nullify'],\n\n                value : null\n            },\n\n            /**\n             * The outer element where dragging will operate (attach events to it and use as root limit when looking\n             * for ancestors).\n             * @config {HTMLElement}\n             */\n            dragRootElement : {\n                $config : 'nullify',\n\n                value : null\n            },\n\n            /**\n             * Set to `true` to allow a drag to drop on to the same element from which the drag started.\n             * @config {Boolean}\n             * @default\n             */\n            dragSameTargetDrop : false,\n\n            /**\n             * A CSS selector used to determine which element(s) can be dragged.\n             * @config {String}\n             * @default\n             */\n            dragSelector : null,\n\n            /**\n             * A CSS selector used to identify child element(s) that should not trigger drag.\n             * @config {String}\n             */\n            ignoreSelector : null,\n\n            /**\n             * The number of milliseconds after a pointerup to ignore click events on the document. This\n             * is used to avoid the \"up\" event itself generating a `click` on the target.\n             * @config {Number}\n             * @default\n             */\n            dragSwallowClickTime : 50,\n\n            /**\n             * The amount of pixels to move pointer/mouse before it counts as a drag operation.\n             * @config {Number}\n             * @default\n             */\n            dragThreshold : 5,\n\n            /**\n             * The number of milliseconds that must elapse after a `touchstart` event before it is considered a drag. If\n             * movement occurs before this time, the drag is aborted. This is to allow touch swipes and scroll gestures.\n             * @config {Number}\n             * @default\n             */\n            dragTouchStartDelay : 300,\n\n            /**\n             * The CSS selector to use to identify the closest valid target from the event target.\n             * @config {String}\n             */\n            dropTargetSelector : null,\n\n            /**\n             * The {@link #config-dragSelector} item the mouse is currently over.\n             * @member {HTMLElement} overItem\n             * @readonly\n             */\n            overItem : null,\n\n            testConfig : {\n                dragSwallowClickTime : 50\n            }\n        };\n    }\n\n    static get properties() {\n        return {\n            /**\n             * The CSS class to add to the {@link #config-dragRootElement} (or {@link #config-draggingClsSelector} from\n             * there) as soon as the pointerdown event occurs.\n             * @member {String}\n             * @readonly\n             */\n            draggingCls : 'b-draggable-active',\n\n            /**\n             * The CSS class to add to the `body` element as soon as the {@link #config-dragThreshold} is reached and\n             * an actual drag is in progress.\n             * @member {String}\n             * @readonly\n             */\n            draggingBodyCls : 'b-draghelper-active',  // match DragHelper since we need the same treatment\n\n            /**\n             * The CSS class to add to the element being dragged as soon as the pointerdown event occurs.\n             * @member {String}\n             * @readonly\n             */\n            draggingItemCls : 'b-dragging-item',\n\n            /**\n             * The CSS class to add to the {@link #config-dragRootElement} (or {@link #config-draggingClsSelector} from\n             * there) as soon as the {@link #config-dragThreshold} is reached and an actual drag is in progress.\n             * @member {String}\n             * @readonly\n             */\n            draggingStartedCls : 'b-draggable-started',\n\n            /**\n             * The CSS class that is added to the {@link #config-dragRootElement}, i.e., `'b-draggable'`.\n             * @property {String}\n             * @readonly\n             */\n            draggableCls : 'b-draggable'\n        };\n    }\n\n    //endregion\n\n    //region Drag Processing\n    // These template methods are implemented by derived classes as desired. There is only one overlap with Droppable's\n    // template methods (dragDrop) so that a class can easily mixin both Draggable and Droppable and always distinguish\n    // whether it is acting as the source, the target, or both.\n\n    /**\n     * This template method is called when the mousedown of a potential drag operation occurs. This happens before the\n     * gesture is known to be a drag, meaning the {@link #config-dragThreshold} has not been reached. This method\n     * should initialize the {@link Core.util.drag.DragContext} using the {@link Core.util.drag.DragContext#function-set}\n     * method. Alternatively, this method may return `false` to prevent the drag operation.\n     *\n     * *Important:* Because no drag has occurred at the time this method is called, only minimal processing should be\n     * done (such as initializing the {@link Core.util.drag.DragContext}). Anything more should be done in the\n     * {@link #function-dragStart} method or in response to the {@link #event-dragStart} event which happen only if\n     * the user drags the mouse before releasing the mouse button.\n     * @param {Core.util.drag.DragContext} drag\n     */\n    beforeDrag(drag) {\n        const\n            { dragRootElement, dragSelector, ignoreSelector } = this,\n            target = dragSelector && drag.element.closest(dragSelector);\n\n        return !dragSelector || Boolean(target &&\n            target === dragRootElement ||\n            (dragRootElement.contains(target) && (!ignoreSelector || !drag.element.matches(ignoreSelector)))\n        );\n    }\n\n    /**\n     * This template method is called when the drag operation starts. This occurs when the {@link #config-dragThreshold}\n     * has been reached.\n     * Your implementation may return `false` to prevent the startup of the drag operation.\n     * @param {Core.util.drag.DragContext} drag\n     */\n    dragStart(drag) {\n        // template\n    }\n\n    /**\n     * This template method is called as the drag moves. This occurs on each mouse/pointer/touchmove event.\n     * @param {Core.util.drag.DragContext} drag\n     */\n    dragOver(drag) {\n        // template\n    }\n\n    /**\n     * This template method is called when the drag enters a {@link Core.mixin.Droppable target}.\n     * @param {Core.util.drag.DragContext} drag\n     */\n    dragEnterTarget(drag) {\n        // template\n    }\n\n    /**\n     * This template method is called when the drag leaves a {@link Core.mixin.Droppable target}.\n     * @param {Core.util.drag.DragContext} drag\n     * @param {Core.mixin.Droppable} oldTarget The previous value of `drag.target`.\n     */\n    dragLeaveTarget(drag, oldTarget) {\n        // template\n    }\n\n    /**\n     * This template method is called when the drag operation completes. This occurs on the pointerup event.\n     *\n     * This method is not called if the drag is {@link Core.util.drag.DragContext#property-aborted aborted}.\n     * @param {Core.util.drag.DragContext} drag\n     */\n    dragDrop(drag) {\n        // template\n    }\n\n    /**\n     * This template method is called when the drag operation completes. This occurs on the pointerup event or perhaps\n     * a keypress event.\n     *\n     * This method is always called, even if the drag is {@link Core.util.drag.DragContext#property-aborted aborted}.\n     * @param {Core.util.drag.DragContext} drag\n     */\n    dragEnd(drag) {\n        // template\n    }\n\n    //endregion\n\n    //region Drag Management\n    // These methods are called by the DragContext and generally manage element updates (adding/removing classes) or\n    // event firing. In most cases these methods then call a corresponding Drag Processing template method intended\n    // for derived classes to implement.\n\n    get activeDrag() {\n        const { dragging : drag } = this;\n\n        return (drag?.started && !drag.completed) ? drag : null;\n    }\n\n    /**\n     * Return the `Events` instance from which drag events are fired.\n     * @internal\n     * @property {Core.mixin.Events}\n     */\n    get dragEventer() {\n        return this.trigger ? this : null;  // simple Events feature detector\n    }\n\n    get draggingClassElement() {\n        const { draggingClsSelector, dragRootElement } = this;\n\n        return draggingClsSelector ? dragRootElement?.closest(draggingClsSelector) : dragRootElement;\n    }\n\n    beginDrag(drag) {\n        const { draggingCls, draggingClassElement } = this;\n\n        if (draggingCls && draggingClassElement) {\n            draggingClassElement.classList.add(draggingCls);\n            drag.cleaners.push(() => draggingClassElement.classList.remove(draggingCls));\n        }\n    }\n\n    async endDrag(drag) {\n        const\n            me = this,\n            { dragEventer, dragProxy } = me;\n\n        if (drag.valid) {\n            // The implementation may be async. If so, any Promise must always be\n            // propagated back to a point which may have to await it\n            await me.dragDrop(drag);\n        }\n\n        if (me.isDestroyed) {\n            return;\n        }\n\n        if (drag.pending) {\n            drag.destroy();\n        }\n        else {\n            me.dragEnd(drag);\n            dragProxy?.dragEnd(drag);\n\n            /**\n             * This event is fired when a drag gesture is completed due to the user aborting it (with the `ESC` key) or\n             * if the {@link Core.util.drag.DragContext#function-abort} method was called.\n             * @event dragCancel\n             * @param {Core.mixin.Draggable} source The draggable instance that fired the event.\n             * @param {Core.util.drag.DragContext} drag The drag context.\n             * @param {Event} event The browser event.\n             */\n            /**\n             * This event is fired when a drag gesture is completed successfully.\n             *\n             * This event is **not** fired if the drag was aborted by the user pressing the `ESC` key or if the\n             * {@link Core.util.drag.DragContext#function-abort} method was called.\n             * @event drop\n             * @param {Core.mixin.Draggable} source The draggable instance that fired the event.\n             * @param {Core.util.drag.DragContext} drag The drag context.\n             * @param {Event} event The browser event.\n             */\n            dragEventer?.trigger(drag.valid ? 'drop' : 'dragCancel', { drag, event : drag.event });\n\n            // The drag context could have registered finalizers added by the above methods or event. If so, we need to\n            // wait for finalization of the drag before we clear our \"dragging\" config.\n            me.finalizeDrag(drag);\n        }\n    }\n\n    async finalizeDrag(drag) {\n        await drag.finalize?.();\n\n        // The doFinalize() method of DragContext is called by the above await... which nulls our \"dragging\" config\n    }\n\n    moveDrag(drag) {\n        if (this.dragOver(drag) !== false) {\n            const { dragEventer, dragProxy } = this;\n\n            dragProxy?.dragMove(drag);\n\n            /**\n             * This event is fired as a drag gesture progresses due to cursor movement.\n             * @event drag\n             * @param {Core.mixin.Draggable} source The draggable instance that fired the event.\n             * @param {Core.util.drag.DragContext} drag The drag context.\n             * @param {Event} event The browser event.\n             */\n            dragEventer?.trigger('drag', { drag, event : drag.event });\n        }\n    }\n\n    setupDragContext(event) {\n        const\n            me = this,\n            { dragItemSelector, id } = me,\n            { target } = event;\n\n        return {\n            event,\n            id              : id ? `${id}-drag-${me._nextDragId = (me._nextDragId || 0) + 1}` : null,\n            itemElement     : dragItemSelector ? target.closest(dragItemSelector) : target,\n            touchStartDelay : me.dragTouchStartDelay,\n            source          : me,\n            threshold       : me.dragThreshold\n        };\n    }\n\n    startDrag(drag) {\n        const\n            { draggingStartedCls, draggingClassElement, draggingItemCls, dragEventer, dragProxy } = this,\n            { itemElement } = drag;\n\n        /**\n         * This event is fired prior to starting a drag gesture. This does not occur immediately after the user\n         * performs the pointer/mousedown/touchstart but only after the {@link #config-dragThreshold} amount of\n         * movement has taken place.\n         *\n         * The drag is canceled if a listener returns `false`.\n         * @event beforeDragStart\n         * @param {Core.mixin.Draggable} source The draggable instance that fired the event.\n         * @param {Core.util.drag.DragContext} drag The drag context.\n         * @param {Event} event The browser event.\n         * @preventable\n         */\n        if (dragEventer?.trigger('beforeDragStart', { drag, event : drag.event }) === false) {\n            return false;\n        }\n\n        if (draggingStartedCls && draggingClassElement) {\n            draggingClassElement.classList.add(draggingStartedCls);\n            drag.cleaners.push(() => draggingClassElement.classList.remove(draggingStartedCls));\n        }\n\n        if (draggingItemCls && itemElement) {\n            itemElement.classList.add(draggingItemCls);\n            drag.cleaners.push(() => itemElement.classList.remove(draggingItemCls));\n        }\n\n        dragProxy?.dragStart(drag);\n\n        const result = this.dragStart(drag);\n\n        if (result !== false) {\n            /**\n             * This event is fired when a drag gesture has started. This does not occur immediately after the user\n             * performs the pointer/mousedown/touchstart but only after the {@link #config-dragThreshold} amount of\n             * movement has taken place.\n             * @event dragStart\n             * @param {Core.mixin.Draggable} source The draggable instance that fired the event.\n             * @param {Core.util.drag.DragContext} drag The drag context.\n             * @param {Event} event The browser event.\n             */\n            dragEventer?.trigger('dragStart', { drag, event : drag.event });\n        }\n\n        return result;\n    }\n\n    trackDrag(drag) {\n        const { dropTargetSelector } = this;\n\n        drag.valid = !(dropTargetSelector && !drag.targetElement?.closest(dropTargetSelector));\n\n        this.moveDrag(drag);\n    }\n\n    //endregion\n\n    //region Configs\n\n    configureListeners(drag) {\n        const\n            me = this,\n            listeners = ObjectHelper.assign({\n                thisObj : me\n            }, me.dragDocumentListeners);\n\n        // Only listen for the events related to how the drag was initiated:\n        if ('touches' in drag.startEvent) {\n            delete listeners.mousemove;\n            delete listeners.mouseup;\n        }\n        else {\n            delete listeners.contextmenu;\n            delete listeners.touchmove;\n            delete listeners.touchend;\n            delete listeners.pointerup;\n        }\n\n        return listeners;\n    }\n\n    //endregion\n\n    //region Configs\n\n    updateDragging(drag, old) {\n        const me = this;\n\n        if (drag) {\n            const listeners = me.configureListeners(drag);\n\n            drag.cleaners.push(EventHelper.on(listeners));\n\n            me.beginDrag(drag);\n        }\n        else if (old) {\n            old.destroy();\n        }\n    }\n\n    changeDragProxy(config, existing) {\n        return DragProxy.reconfigure(existing, config, {\n            owner : this,\n\n            defaults : {\n                owner : this\n            }\n        });\n    }\n\n    updateDragRootElement(rootEl, was) {\n        const\n            me = this,\n            {\n                draggableCls,\n                dragItemSelector,\n                onDragItemMouseMove\n            }  = me;\n\n        was?.classList.remove(draggableCls);\n        me._dragRootDetacher?.();\n\n        if (rootEl) {\n            const listeners = {\n                thisObj    : me,\n                element    : rootEl,\n                mousedown  : 'onDragMouseDown',\n                // We have touchstart listener in place since Siesta/Chrome can send these events even on non-touch\n                // devices:\n                touchstart : 'onDragTouchStart',\n\n                // On iOS, because we use pointerup to represent the drop gesture,\n                // the initiating pointerdown event is captured, and its target is\n                // the original start target. We must always release pointer capture.\n                // https://github.com/bryntum/support/issues/4111\n                pointerdown : e => e.pointerId && e.target.releasePointerCapture?.(e.pointerId)\n            };\n\n            if (onDragItemMouseMove) {\n                listeners.mousemove = {\n                    delegate : dragItemSelector,\n                    handler  : 'onDragItemMouseMove'\n                };\n            }\n\n            if (me.dragItemOverCls || onDragItemMouseMove || me.onDragItemMouseEnter || me.onDragItemMouseLeave) {\n                Object.assign(listeners, {\n                    mouseover : {\n                        delegate : dragItemSelector,\n                        handler  : 'onDragItemMouseOver'\n                    },\n                    mouseout : {\n                        delegate : dragItemSelector,\n                        handler  : 'onDragItemMouseOut'\n                    }\n                });\n            }\n\n            rootEl.classList.add(draggableCls);\n            me._dragRootDetacher = EventHelper.on(listeners);\n        }\n    }\n\n    //endregion\n\n    //region Events\n\n    onDragItemMouseOver(event) {\n        this.overItem = event;\n    }\n\n    onDragItemMouseOut(event) {\n        if (!this.dragging) {\n            this.overItem = event;\n        }\n    }\n\n    changeOverItem(event) {\n        this.enterLeaveEvent = event;\n\n        if (event.type === 'mouseout') {\n            // Must return null, not undefined to unset the overItem property\n            return event.relatedTarget?.closest(this.dragItemSelector) || null;\n        }\n        else {\n            return event.target.closest(this.dragItemSelector);\n        }\n    }\n\n    updateOverItem(overItem, oldOverItem) {\n        const\n            me                  = this,\n            { dragItemOverCls } = me;\n\n        if (oldOverItem) {\n            dragItemOverCls && oldOverItem.classList.remove(dragItemOverCls);\n            me.onDragItemMouseLeave?.(me.enterLeaveEvent, oldOverItem);\n        }\n\n        if (overItem) {\n            dragItemOverCls && overItem.classList.add(dragItemOverCls);\n            me.onDragItemMouseEnter?.(me.enterLeaveEvent, overItem);\n        }\n    }\n\n    onDragContextMenu(event) {\n        event.preventDefault();\n    }\n\n    onDragKeyDown(event) {\n        this.dragging.keyDown(event);\n    }\n\n    onDragKeyUp(event) {\n        this.dragging.keyUp(event);\n    }\n\n    /**\n     * Grab draggable element on mouse down.\n     * @param {Event} event\n     * @private\n     */\n    onDragMouseDown(event) {\n        // only dragging with left mouse button\n        if (event.button === 0) {\n            this.onDragPointerDown(event);\n        }\n    }\n\n    /**\n     * Grab draggable element on pointerdown.\n     * @param {Event} event\n     * @private\n     */\n    onDragPointerDown(event) {\n        let { dragging : drag } = this;\n\n        // If a drag is ongoing already, finalize it and don't proceed with new drag (happens if user does pointerup\n        // outside browser window). Also handles the edge case of trying to start a new drag while previous is awaiting\n        // finalization, in which case it just bails out.\n        if (!drag) {\n            drag = this.setupDragContext(event);\n\n            // The DragContext consults our beforeDrag handler, and if that succeeds, the Context injects itself into\n            // this instance as our draggable (\"this.dragging\").\n            // NOTE: This is not yet an actual drag. At this stage, the context is used to detect movement prior to\n            // mouseup (aka \"a drag\"). Should the requisite amount of movement occur, the drag will be started.\n            if (drag) {\n                drag = new DragContext(drag);\n\n                if (drag.begin() === false) {\n                    drag.destroy();\n                }\n            }\n        }\n        else if (!drag.isFinalizing) {\n            drag.abort();\n        }\n    }\n\n    // Set by the DragContext in its begin method, and auto-nullified at destruction.\n    changeDragging(value, was) {\n        was?.destroy();\n        return value;\n    }\n\n    onDragPointerMove(event) {\n        const { dragging : drag } = this;\n\n        if (drag && !drag.completed) {\n            drag?.move(event);\n        }\n    }\n\n    onDragPointerUp(event) {\n        const { dragging : drag } = this;\n\n        if (drag && !drag.completed) {\n            drag.end(event);\n\n            this.endDrag(drag);\n        }\n    }\n\n    /**\n     * @param {Event} event\n     * @private\n     */\n    onDragTouchStart(event) {\n        // only allowing one finger for now...\n        if (event.touches.length === 1) {\n            this.onDragPointerDown(event);\n        }\n    }\n\n    //endregion\n};\n","import Base from '../Base.js';\nimport DomDataStore from '../data/DomDataStore.js';\n\n/**\n * @module Core/mixin/Droppable\n */\n\n/**\n * Mix this into another class to enable drop support and receive drops from {@link Core.mixin.Draggable draggables}.\n *\n * There are 4 basic methods that a droppable implements. These methods are called as drag operations occur:\n *\n * ```javascript\n *  class MyDroppable extends Base.mixin(Droppable) {\n *      dragEnter(drag) {\n *          // a drag has entered the drop zone... create some type of drop indicator perhaps\n *      }\n *\n *      dragMove(drag) {\n *          // a drag has changed position... update drop indicators\n *      }\n *\n *      dragDrop(drag) {\n *          // drop has occurred... process data from the drag context\n *      }\n *\n *      dragLeave(drag) {\n *          // the drag has left the drop zone... cleanup indicators\n *      }\n *  }\n * ```\n *\n * Instances of `Droppable` are associated with an element to receive drag operations:\n *\n * ```javascript\n *  let target = new MyDroppable({\n *      dropRootElement : someElement\n *  });\n * ```\n * @mixin\n * @internal\n */\nexport default Target => class Droppable extends (Target || Base) {\n    static get $name() {\n        return 'Droppable';\n    }\n\n    //region Configs\n\n    static get configurable() {\n        return {\n            /**\n             * A selector, which, if specified, narrows the dropability to child elements of the\n             * {@link #config-dropRootElement} which match this selector.\n             * @config {String}\n             */\n            droppableSelector : null,\n\n            /**\n             * The current `DragContext`. This is set when a drag enters this target. Changing this config causes the\n             * {@link #function-dragEnter} and {@link #function-dragLeave} methods to be called. If `dragEnter` returns\n             * `false` for a drag, this value will be set to `null`.\n             * @member {Core.util.drag.DragContext}\n             * @readonly\n             */\n            dropping : null,\n\n            /**\n             * Set this config to the element where drops should be received. When set, the `b-droppable` CSS class is\n             * added to the element and the `Droppable` instance is associated with that element so that it can be\n             * found by {@link Core.mixin.Draggable draggables}.\n             * @config {HTMLElement}\n             */\n            dropRootElement : {\n                $config : 'nullify',\n\n                value : null\n            }\n        };\n    }\n\n    /**\n     * Return the `Events` instance from which drop events are fired.\n     * @internal\n     * @property {Core.mixin.Events}\n     */\n    get dropEventer() {\n        return this.trigger ? this : null;  // simple Events feature detector\n    }\n\n    /**\n     * Returns the CSS class that is added to the {@link #config-dropRootElement}, i.e., `'b-droppable'`.\n     * @property {String}\n     * @readonly\n     */\n    get droppableCls() {\n        return 'b-droppable';\n    }\n\n    //endregion\n    //region Drop Management\n\n    /**\n     * This method is called when a drag enters this droppable's `dropRootElement`. In many cases, this method is used\n     * to create some sort of drop indicator to provide user feedback.\n     *\n     * If this method does not return `false`, the {@link #property-dropping} config will retain the given `drag` context\n     * which was set prior to this method being called.\n     *\n     * If this method returns `false`, the drop will not be accepted. Neither {@link #function-dragDrop} nor\n     * {@link #function-dragLeave} will be called for this drop. If the drag leaves this target and re-enters, this\n     * method will be called again. While `dropping` will already be updated before this method is called, it will be\n     * reset to `null` in this case.\n     *\n     * The base class implementation of this method fires the {@link #event-dragEnter} event.\n     * @param {Core.util.drag.DragContext} drag\n     * @returns {Boolean}\n     */\n    dragEnter(drag) {\n        /**\n         * This event is fired when a drag enters this droppable's `dropRootElement`. It is fired by the droppable's\n         * {@link #function-dragEnter} method.\n         * @event dragEnter\n         * @param {Core.mixin.Draggable} source The draggable instance that fired the event.\n         * @param {Core.util.drag.DragContext} drag The drag context.\n         * @param {Event} event The browser event.\n         */\n        return this.dropEventer?.trigger('dragEnter', { drag, event : drag.event });\n    }\n\n    /**\n     * This method is called when the drag that was previously announced via {@link #function-dragEnter} moves to a new\n     * position. This is typically where drop indicators are updated to reflect the new position.\n     *\n     * The base class implementation of this method fires the {@link #event-dragMove} event.\n     * @param {Core.util.drag.DragContext} drag\n     */\n    dragMove(drag) {\n        /**\n         * This event is fired when the drag that was previously announced via {@link #event-dragEnter} moves to a new\n         * position. It is fired by the droppable's {@link #function-dragMove} method.\n         * @event dragMove\n         * @param {Core.mixin.Draggable} source The draggable instance that fired the event.\n         * @param {Core.util.drag.DragContext} drag The drag context.\n         * @param {Event} event The browser event.\n         */\n        return this.dropEventer?.trigger('dragMove', { drag, event : drag.event });\n    }\n\n    /**\n     * This method is called when the drag that was previously announced via {@link #function-dragEnter} has ended with\n     * a drop. In addition to any cleanup (since {@link #function-dragLeave} will not be called), this method handles\n     * any updates associated with the data from the drag context and the position of the drop.\n     *\n     * The base class implementation of this method fires the {@link #event-drop} event.\n     * @param {Core.util.drag.DragContext} drag\n     */\n    dragDrop(drag) {\n        /**\n         * This event is fired when the drag that was previously announced via {@link #event-dragEnter} has ended with\n         * a drop. It is fired by the droppable's {@link #function-dragDrop} method.\n         *\n         * This event is **not** fired when a drag gesture is aborted by the user pressing the `ESC` key or if the\n         * {@link Core.util.drag.DragContext#function-abort} method is called.\n         * @event drop\n         * @param {Core.mixin.Draggable} source The draggable instance that fired the event.\n         * @param {Core.util.drag.DragContext} drag The drag context.\n         * @param {Event} event The browser event.\n         */\n        return this.dropEventer?.trigger('drop', { drag, event : drag.event });\n    }\n\n    /**\n     * This method is called when the drag that was previously announced via {@link #function-dragEnter} leaves this\n     * droppable's `dropRootElement`, or the drag is {@link Core.util.drag.DragContext#property-aborted} by the user\n     * pressing the `ESC` key, or the {@link Core.util.drag.DragContext#function-abort} method is called.\n     *\n     * This is the time to cleanup anything created by `dragEnter`.\n     *\n     * The base class implementation of this method fires the {@link #event-dragLeave} event.\n     * @param {Core.util.drag.DragContext} drag\n     */\n    dragLeave(drag) {\n        /**\n         * This event is fired when the drag that was previously announced via {@link #event-dragEnter} leaves this\n         * droppable's `dropRootElement`. It is fired by the droppable's {@link #function-dragLeave} method.\n         * @event dragLeave\n         * @param {Core.mixin.Draggable} source The draggable instance that fired the event.\n         * @param {Core.util.drag.DragContext} drag The drag context.\n         * @param {Event} event The browser event.\n         */\n        return this.dropEventer?.trigger('dragLeave', { drag, event : drag.event });\n    }\n\n    //endregion\n    //region Configs\n\n    changeDropping(dropping, was) {\n        if (dropping !== was) {\n            const me = this;\n\n            if (was) {\n                if (was.aborted || !was.completed) {\n                    me.dragLeave(was);\n                }\n            }\n\n            if (dropping) {\n                me._dropping = dropping;  // update config value early in case dragEnter et al refer to it\n\n                if (me.dragEnter(dropping) === false) {\n                    dropping = null;\n                }\n\n                me._dropping = was;  // restore the value so that updateDropping is called as it should be\n            }\n        }\n\n        return dropping;\n    }\n\n    updateDropRootElement(rootEl, was) {\n        const\n            me = this,\n            { droppableCls } = me;\n\n        let droppables, i, removeCls;\n\n        if (was) {\n            droppables = DomDataStore.get(was, 'droppables');\n            removeCls = true;\n\n            if (Array.isArray(droppables) && (i = droppables.indexOf(me)) > -1) {\n                if (droppables.length < 2) {\n                    DomDataStore.remove(was, 'droppables');\n                }\n                else {\n                    droppables.splice(i, 1);\n                    droppables.forEach(d => {\n                        if (droppableCls === d.droppableCls) {\n                            removeCls = false;  // our droppableCls may need to stay\n                        }\n                    });\n                }\n            }\n\n            removeCls && was.classList.remove(droppableCls);\n        }\n\n        if (rootEl) {\n            droppables = DomDataStore.get(rootEl, 'droppables');\n\n            if (droppables) {\n                droppables.push(me);\n            }\n            else {\n                DomDataStore.set(rootEl, 'droppables', [me]);\n            }\n\n            rootEl.classList.add(droppableCls);\n        }\n    }\n\n    //endregion\n};\n","import Base from '../../Base.js';\nimport DomHelper from '../../helper/DomHelper.js';\nimport EventHelper from '../../helper/EventHelper.js';\nimport Tooltip from '../../widget/Tooltip.js';\nimport StringHelper from '../../helper/StringHelper.js';\n\n/**\n * @module Core/widget/util/AvatarRendering\n */\n\n/**\n * A utility class providing rendering of avatars / resource initials.\n *\n * {@inlineexample Core/widget/AvatarRendering.js}\n * @extends Core/Base\n */\nexport default class AvatarRendering extends Base {\n    static get $name() {\n        return 'AvatarRendering';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Element used to listen for load errors. Normally the owning widgets own element.\n             * @config {HTMLElement}\n             */\n            element : null,\n\n            /**\n             * Prefix prepended to a supplied color to create a CSS class applied when showing initials.\n             * @config {String}\n             * @default\n             */\n            colorPrefix : 'b-sch-',\n\n            /**\n             * A tooltip config object to enable using a custom tooltip for the avatars. Listen for `beforeShow` and set\n             * your html there.\n             * @config {TooltipConfig}\n             */\n            tooltip : null,\n\n            size : null\n        };\n    }\n\n    doDestroy() {\n        this.tooltip?.destroy();\n\n        super.doDestroy();\n    }\n\n    updateElement(element) {\n        // Error listener\n        EventHelper.on({\n            element,\n            delegate : '.b-resource-image',\n            error    : 'onImageErrorEvent',\n            thisObj  : this,\n            capture  : true\n        });\n    }\n\n    changeTooltip(config) {\n        return Tooltip.new({\n            forElement  : this.element,\n            forSelector : '.b-resource-avatar',\n            cls         : 'b-resource-avatar-tooltip'\n        }, config);\n    }\n\n    static get failedUrls() {\n        if (!this._failedUrls) {\n            this._failedUrls = new Set();\n        }\n        return this._failedUrls;\n    }\n\n    /**\n     * Returns a DOM config object containing a resource avatar, icon or resource initials. Display priority in that\n     * order.\n     * @param {Object} options Avatar options\n     * @param {String} options.initials Resource initials\n     * @param {String} options.color Background color for initials\n     * @param {String} options.iconCls Icon cls\n     * @param {String} options.imageUrl Image url\n     * @param {String} options.defaultImageUrl Default image url, fallback if image fails to load or there is none\n     * specified. Leave out to show initials instead.\n     * @param {Object} [options.dataset] Dataset to apply to the resulting element\n     * @param {String} [options.alt] Image description\n     * @returns {DomConfig}\n     */\n    getResourceAvatar({ initials, color, iconCls, imageUrl, defaultImageUrl, dataset = {}, resourceRecord, alt = StringHelper.encodeHtml(resourceRecord?.name) }) {\n        return this.getImageConfig(initials, color, imageUrl, defaultImageUrl, dataset, alt) ||\n            this.getIconConfig(iconCls, dataset) ||\n            this.getResourceInitialsConfig(initials, color, dataset);\n    }\n\n    getImageConfig(initials, color, imageUrl, defaultImageUrl, dataset, alt) {\n        const { size } = this;\n        // Fall back to defaultImageUrl if imageUrl is known to fail\n        imageUrl = AvatarRendering.failedUrls.has(imageUrl) ? defaultImageUrl : (imageUrl  || defaultImageUrl);\n\n        if (imageUrl) {\n            return {\n                tag       : 'img',\n                draggable : 'false',\n                loading   : 'lazy',\n                class     : {\n                    'b-resource-avatar' : 1,\n                    'b-resource-image'  : 1\n                },\n                ...(size ? { style : { height : size + 'px', width : size + 'px' } } : undefined),\n                alt,\n                elementData : {\n                    defaultImageUrl,\n                    imageUrl,\n                    initials,\n                    color,\n                    dataset\n                },\n                src : imageUrl,\n                dataset\n            };\n        }\n    }\n\n    getIconConfig(iconCls, dataset) {\n        if (iconCls) {\n            return iconCls && {\n                tag   : 'i',\n                class : {\n                    'b-resource-avatar' : 1,\n                    'b-resource-icon'   : 1,\n                    [iconCls]           : 1\n                },\n                dataset\n            };\n        }\n    }\n\n    getResourceInitialsConfig(initials, color, dataset) {\n        const\n            { size }   = this,\n            // eventColor = #FF5555, apply as background-color\n            namedColor = DomHelper.isNamedColor(color) && color,\n            // eventColor = red, add b-sch-red cls\n            hexColor   = !namedColor && color;\n\n        return {\n            tag   : 'div',\n            class : {\n                'b-resource-avatar'                  : 1,\n                'b-resource-initials'                : 1,\n                [`${this.colorPrefix}${namedColor}`] : namedColor\n            },\n            style : {\n                backgroundColor : hexColor || null,\n                ...(size ? { height : size + 'px', width : size + 'px' } : undefined)\n            },\n            children : [initials],\n            dataset\n        };\n    }\n\n    onImageErrorEvent({ target }) {\n        if (!target.matches('.b-resource-avatar')) {\n            return;\n        }\n\n        const { defaultImageUrl, initials, color, imageUrl, dataset } = target.elementData;\n\n        if (defaultImageUrl && !target.src.endsWith(defaultImageUrl.replace(/^[./]*/gm, ''))) {\n            target.src = defaultImageUrl;\n        }\n        else {\n            const initialsEl = DomHelper.createElement(this.getResourceInitialsConfig(initials, color, dataset));\n            initialsEl.elementData = target.elementData;\n            target.parentElement.replaceChild(initialsEl, target);\n        }\n\n        // Remember failed urls, to avoid trying to load them again next time\n        AvatarRendering.failedUrls.add(imageUrl);\n    }\n}\n"],"names":["throwAbstractMethodCall","Error","ActionBase","Base","type","this","constructor","name","undo","redo","_$name","throwInvalidMethodCall","StateBase","canUndo","stm","canRedo","onUndo","onRedo","onStartTransaction","onStopTransaction","onStopTransactionDelayed","onRejectTransaction","onEnable","onDisable","onAutoRecordOn","onAutoRecordOff","onResetQueue","onModelUpdate","onStoreModelAdd","onStoreModelInsert","onStoreModelRemove","onStoreModelRemoveAll","onModelInsertChild","onModelRemoveChild","STATE_PROP","Symbol","STORES_PROP","QUEUE_PROP","POS_PROP","TRANSACTION_PROP","TRANSACTION_TIMER_PROP","AUTO_RECORD_PROP","Object","freeze","registry","Map","registerStmState","state","set","get","resetQueue","options","newProps","slice","position","notifyStoresAboutQueueReset","DisabledState","autoRecord","onStoreRemoveAll","Registry","ACTION_QUEUE_PROP","Transaction","defaultConfig","title","construct","args","super","queue","length","addAction","action","push","i","len","ReadyStateClass","steps","curPos","newPos","Math","max","next","notifyStoresAboutStateRestoringStart","undoneTransactions","transaction","notifyStoresAboutStateRestoringStop","cause","transactions","min","redoneTransactions","notifyStoresAboutStateRecordingStart","ReadyState","RecordingStateClass","notifyStoresAboutStateRecordingStop","disabled","stopTransactionDelayed","getTransactionTitle","stop","rejected","model","newData","oldData","isInitialUserAction","makeModelUpdateAction","parentModel","index","childModel","previousParent","previousIndex","makeModelInsertChildAction","childModels","context","makeModelRemoveChildAction","store","models","silent","makeStoreModelAddAction","makeStoreModelInsertAction","makeStoreModelRemoveAction","allRecords","makeStoreRemoveAllAction","RecordingState","RestoringState","$name","onQueueReset","AutoReadyState","startTransaction","AutoRecordingStateClass","mixin","Delayable","timer","clearTimeout","setTimeout","stopTransaction","autoRecordTransactionStopTimeout","AutoRecordingState","rest","MODEL_PROP","NEW_DATA_PROP","OLD_DATA_PROP","UpdateAction","undefined","value","_objectSpread","$","assign","PARENT_MODEL_PROP","CHILD_MODELS_PROP","INSERT_INDEX_PROP","CONTEXT_PROP","InsertChildAction","insertIndex","ctx","sort","lhs","rhs","lhsParent","lhsIndex","rhsParent","rhsIndex","forEach","m","parent","adjustedIndex","parentIndex","children","insertBefore","insertChild","removeChild","RemoveChildAction","STORE_PROP","MODEL_LIST_PROP","AddAction","modelList","list","remove","add","InsertAction","_undoingInsertion","insert","me","RemoveAction","ALL_RECORDS_PROP","RemoveAllAction","records","removeAll","stateTransition","event","oldState","newState","call","Array","isArray","trigger","StateTrackingManager","Events","stores","from","hasStore","includes","addStore","removeStore","filter","s","forEachStore","fn","id","val","enabled","enable","disable","isReady","waitForReadiness","await","isRecording","rejectTransaction","map","t","isRestoring","undoAll","redoAll","resetUndoQueue","resetRedoQueue","_store$onStmRecording","onStmRecordingStart","reason","_store$onStmRecording2","onStmRecordingStop","_store$onStmRestoring","onStmRestoringStart","_store$onStmRestoring2","onStmRestoringStop","_store$onStmQueueRese","onStmQueueReset","onUndoKeyPress","shiftKey","preventDefault","stash","stashedTransaction","applyStash","Target","finalizer","finalizing","isFinalized","isFinalizing","doFinalize","destroy","finalize","ret","_awaitFinalizer","ABORTED","INIT","DRAGGING","DROPPED","lockDirections","x","y","DragContext","Finalizable","Identifiable","configurable","itemElement","scrollManager","monitoringConfig","source","target","targetElement","threshold","touchStartDelay","identifiable","altKey","cleaners","ctrlKey","data","element","endEvent","lastMoveEvent","metaKey","previousTarget","scrollerAction","startEvent","touchStartTimer","_valid","EventHelper","on","globalThis","blur","thisObj","doDestroy","cleanup","dropping","dragging","onWindowBlur","started","abort","aborted","completed","isDestroying","pending","valid","v","Promise","all","has","peek","changeTarget","was","_target","updateTarget","dragLeaveTarget","dragMove","dragEnterTarget","updateTargetElement","droppable","droppables","droppableSelector","parentElement","DomDataStore","dropRootElement","contains","closest","DomHelper","getId","getBoundingClientRect","endDrag","begin","beforeDrag","cleaner","pop","end","lastEvent","dragSwallowClickTime","syncFlags","clientX","clientY","track","document","capture","expires","once","click","stopPropagation","dragDrop","fakeKey","down","changed","isKey","key","keyDown","isDragToggleKey","keyUp","getDistance","getDistanceBetween","move","significant","nodeType","Node","ELEMENT_NODE","start","stopImmediatePropagation","draggingBodyCls","activeCls","dragLock","dragRootElement","detacher","startMonitoring","Objects","merge","scrollables","direction","callback","isScroll","rootEl","body","classList","startDrag","touch","changedTouches","elementFromPoint","trackDrag","_defineProperty","prototype","STATE","DragProxy","Factoryable","factoryable","defaultType","updateDragging","drag","close","open","dragStart","dragEnd","initClass","$config","draggingClsSelector","dragDocumentListeners","keydown","keyup","contextmenu","mousemove","mouseup","pointerup","touchend","touchmove","handler","passive","dragItemSelector","dragItemOverCls","dragMinDistance","dragProxy","dragSameTargetDrop","dragSelector","ignoreSelector","dragThreshold","dragTouchStartDelay","dropTargetSelector","overItem","testConfig","properties","draggingCls","draggingItemCls","draggingStartedCls","draggableCls","Boolean","matches","dragOver","oldTarget","activeDrag","dragEventer","draggingClassElement","beginDrag","isDestroyed","finalizeDrag","_drag$finalize","moveDrag","setupDragContext","_nextDragId","result","_drag$targetElement","configureListeners","listeners","ObjectHelper","old","changeDragProxy","config","existing","reconfigure","owner","defaults","updateDragRootElement","_me$_dragRootDetacher","onDragItemMouseMove","_dragRootDetacher","mousedown","touchstart","pointerdown","e","_e$target$releasePoin","_e$target","pointerId","releasePointerCapture","delegate","onDragItemMouseEnter","onDragItemMouseLeave","mouseover","mouseout","onDragItemMouseOver","onDragItemMouseOut","changeOverItem","_event$relatedTarget","enterLeaveEvent","relatedTarget","updateOverItem","oldOverItem","_me$onDragItemMouseLe","_me$onDragItemMouseEn","onDragContextMenu","onDragKeyDown","onDragKeyUp","onDragMouseDown","button","onDragPointerDown","changeDragging","onDragPointerMove","onDragPointerUp","onDragTouchStart","touches","dropEventer","droppableCls","dragEnter","_this$dropEventer","_this$dropEventer2","_this$dropEventer3","dragLeave","_this$dropEventer4","changeDropping","_dropping","updateDropRootElement","removeCls","indexOf","splice","d","AvatarRendering","colorPrefix","tooltip","size","_this$tooltip","updateElement","error","changeTooltip","Tooltip","new","forElement","forSelector","cls","failedUrls","_failedUrls","Set","getResourceAvatar","initials","color","iconCls","imageUrl","defaultImageUrl","dataset","resourceRecord","alt","StringHelper","encodeHtml","getImageConfig","getIconConfig","getResourceInitialsConfig","tag","draggable","loading","class","style","height","width","elementData","src","namedColor","isNamedColor","hexColor","backgroundColor","onImageErrorEvent","endsWith","replace","initialsEl","createElement","replaceChild"],"mappings":"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"}