{"version":3,"file":"PdfExport.js","sources":["../../../../Grid/lib/Grid/feature/mixin/SummaryFormatter.js","../../../../Grid/lib/Grid/feature/Summary.js","../../../../Grid/lib/Grid/view/export/field/ExportRowsCombo.js","../../../../Grid/lib/Grid/view/export/field/ExportOrientationCombo.js","../../../../Grid/lib/Grid/view/export/ExportDialog.js","../../../../Grid/lib/Grid/feature/export/exporter/MultiPageExporter.js","../../../../Grid/lib/Grid/feature/export/exporter/MultiPageVerticalExporter.js","../../../../Grid/lib/Grid/feature/export/exporter/SinglePageExporter.js","../../../../Grid/lib/Grid/feature/export/PdfExport.js"],"sourcesContent":["import Base from '../../../Core/Base.js';\n\n/**\n * @module Grid/feature/mixin/SummaryFormatter\n */\n\n/**\n * Mixin for Summary and GroupSummary that handles formatting sums.\n * @mixin\n * @private\n */\nexport default Target => class SummaryFormatter extends (Target || Base) {\n    static get $name() {\n        return 'SummaryFormatter';\n    }\n\n    /**\n     * Calculates sums and returns as a html table\n     * @param {Grid.column.Column} column Column to calculate sum for\n     * @param {Core.data.Model[]} records Records to include in calculation\n     * @param {String} cls CSS class to apply to summary table\n     * @param {Core.data.Model} groupRecord current group row record\n     * @param {String} groupField Current groups field name\n     * @param {String} groupValue Current groups value\n     * @returns {String} html content\n     */\n    generateHtml(column, records, cls, groupRecord, groupField, groupValue) {\n        const\n            store = this.store,\n            summaries = column.summaries ||\n                  (column.sum ? [{ sum : column.sum, renderer : column.summaryRenderer }] : []);\n\n        let html = `<table class=\"${cls}\">`;\n\n        summaries.forEach(config => {\n            let type = config.sum,\n                sum  = null;\n\n            if (type === true) type = 'sum';\n\n            switch (type) {\n                case 'sum':\n                case 'add':\n                    sum = store.sum(column.field, records);\n                    break;\n                case 'max':\n                    sum = store.max(column.field, records);\n                    break;\n                case 'min':\n                    sum = store.min(column.field, records);\n                    break;\n                case 'average':\n                case 'avg':\n                    sum = store.average(column.field, records);\n                    break;\n                case 'count':\n                    sum = records.length;\n                    break;\n                case 'countNotEmpty':\n                    sum = records.reduce((sum, record) => {\n                        const value = record[column.field];\n                        return sum + (value != null ? 1 : 0);\n                    }, 0);\n                    break;\n            }\n\n            if (typeof type === 'function') {\n                sum = records.reduce(type, 'seed' in config ? config.seed : 0);\n            }\n\n            if (sum !== null) {\n                const\n                    valueCls  = 'b-grid-summary-value',\n                    // optional label\n                    labelHtml = config.label\n                        ? `<td class=\"b-grid-summary-label\">${config.label}</td>`\n                        : '';\n\n                // value to display, either using renderer or as is\n                let valueHtml = config.renderer\n                        ? config.renderer({ config, sum })\n                        : sum,\n                    summaryHtml;\n\n                if (valueHtml == null) {\n                    valueHtml = '';\n                }\n\n                // no <td>s in html, wrap it (always the case when not using renderer)\n                if (!String(valueHtml).includes('<td>')) {\n                    summaryHtml = labelHtml\n                        // has label, use returned html as value cell\n                        ? `${labelHtml}<td class=\"${valueCls}\">${valueHtml}</td>`\n                        // no label, span entire table\n                        : `<td colspan=\"2\" class=\"${valueCls}\">${valueHtml}</td>`;\n                }\n                // user is in charge of giving correct formatting\n                else {\n                    summaryHtml = valueHtml;\n                }\n\n                html += `<tr>${summaryHtml}</tr>`;\n            }\n        });\n\n        return html + '</table>';\n    }\n};\n","import DomHelper from '../../Core/helper/DomHelper.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\nimport SummaryFormatter from './mixin/SummaryFormatter.js';\n\n/**\n * @module Grid/feature/Summary\n */\n\n/**\n * @typedef {Object} ColumnSummaryConfig\n * @property {'sum'|'add'|'count'|'countNotEmpty'|'average'|Function} sum Summary type, see\n * {@link Grid/column/Column#config-sum} for details\n * @property {Function} renderer Renderer function for summary, see\n * {@link Grid/column/Column#config-summaryRenderer} for details\n * @property {*} seed Initial value when using a function as `sum`\n */\n\n/**\n * Displays a summary row in the grid footer.\n *\n * {@inlineexample Grid/feature/Summary.js}\n *\n * Specify type of summary on columns, available types are:\n * <dl class=\"wide\">\n * <dt>sum <dd>Sum of all values in the column\n * <dt>add <dd>Alias for sum\n * <dt>count <dd>Number of rows\n * <dt>countNotEmpty <dd>Number of rows containing a value\n * <dt>average <dd>Average of all values in the column\n * <dt>function <dd>A custom function, used with store.reduce. Should take arguments (sum, record)\n * </dl>\n * Columns can also specify a summaryRenderer to format the calculated sum.\n *\n * This feature is <strong>disabled</strong> by default.\n *\n * ```javascript\n * { text : 'Score', data : 'score', width : 80, sum : true }\n * { text : 'Rank', data : 'rank', width : 80, sum : 'average', summaryRenderer: ({ sum }) => return 'Average rank ' + sum }\n * ```\n *\n * Also, it is possible to set up multiple summaries as array of summary configs:\n * ```javascript\n * { text : 'Rank', data : 'rank', summaries : [{ sum : 'average', label : 'Average' }, { sum : 'count', label : 'Count' }] }\n * ```\n *\n * @extends Core/mixin/InstancePlugin\n * @demo Grid/features\n * @classtype summary\n * @feature\n */\nexport default class Summary extends SummaryFormatter(InstancePlugin) {\n    //region Config\n    static get configurable() {\n        return {\n            /**\n             * Set to `true` to sum values of selected row records\n             * @config {Boolean}\n             */\n            selectedOnly : null,\n\n            hideFooters : false\n        };\n    }\n\n    // Plugin configuration. This plugin chains some of the functions in Grid.\n    static get pluginConfig() {\n        return {\n            chain : ['renderRows', 'bindStore']\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    static get $name() {\n        return 'Summary';\n    }\n\n    construct(grid, config) {\n        this.grid = grid;\n\n        super.construct(grid, config);\n\n        this.bindStore(grid.store);\n\n        grid.hideFooters = this.hideFooters;\n    }\n\n    bindStore(store) {\n        this.detachListeners('store');\n\n        store.ion({\n            name    : 'store',\n            change  : 'onStoreChange',\n            thisObj : this\n        });\n    }\n\n    get store() {\n        return this.grid.store;\n    }\n\n    doDestroy() {\n        super.doDestroy();\n    }\n\n    doDisable(disable) {\n        super.doDisable(disable);\n\n        const { client } = this;\n\n        if (disable) {\n            client.element.classList.add('b-summary-disabled');\n        }\n        else {\n            this.updateSummaries();\n            client.element.classList.remove('b-summary-disabled');\n            client.eachSubGrid(subGrid => subGrid.scrollable.syncPartners());\n        }\n    }\n\n    //endregion\n\n    //region Render\n\n    renderRows() {\n        this.updateSummaries();\n    }\n\n    /**\n     * Updates summaries. Summaries are displayed as tables in footer (styling left out to keep brief):\n     * ```\n     * <table>\n     *     <tr><td colspan=\"2\">0</td></tr> // { sum : 'min' } Only a calculation, span entire table\n     *     <tr><td>Max</td><td>10</td></tr> // { sum : 'max', label: 'Max' } Label + calculation\n     *     <tr><td>Max</td><td>10</td></tr> // { sum : 'sum', label: 'Max' } Label + calculation\n     * </table>\n     * ```\n     * @private\n     */\n    updateSummaries() {\n        const\n            me              = this,\n            { grid, store } = me,\n            cells           = DomHelper.children(grid.element, '.b-grid-footer'),\n            selectedOnly    = me.selectedOnly && grid.selectedRecords.length > 0,\n            records         = (store.isFiltered ? store.storage.values : store.allRecords).filter(r => !r.isSpecialRow && (!selectedOnly || grid.isSelected(r)));\n\n        // reset seeds, to not have ever increasing sums :)\n        grid.columns.forEach(column => {\n            column.summaries?.forEach(config => {\n                if ('seed' in config) {\n                    if (!('initialSeed' in config)) {\n                        config.initialSeed = config.seed;\n                    }\n\n                    if (['number', 'string', 'date'].includes(typeof config.initialSeed)) {\n                        config.seed = config.initialSeed;\n                    }\n                    else {\n                        // create shallow copy\n                        config.seed = Object.assign({}, config.initialSeed);\n                    }\n                }\n            });\n        });\n\n        cells.forEach(cellElement => {\n            // Skip for special columns like checkbox selection\n            if (!cellElement.dataset.column) {\n                return;\n            }\n\n            const\n                column = grid.columns.get(cellElement.dataset.column),\n                html   = me.generateHtml(column, records, 'b-grid-footer-summary');\n\n            if (column.summaries ? column.summaries.length : column.sum ? 1 : 0) {\n                // First time, set table\n                if (!cellElement.children.length) {\n                    cellElement.innerHTML = html;\n                }\n                // Following times, sync changes\n                else {\n                    DomHelper.sync(html, cellElement.firstElementChild);\n                }\n            }\n        });\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Updates summaries on store changes (except record update, handled below)\n     * @private\n     */\n    onStoreChange({ action, changes }) {\n        let shouldUpdate = true;\n\n        if (this.disabled) {\n            return;\n        }\n\n        if (action === 'update') {\n            // only update summary when a field that affects summary is changed\n            // TODO: this should maybe be removed, another column might depend on the value for its summary?\n            shouldUpdate = Object.keys(changes).some(field => {\n                const colField = this.grid.columns.get(field);\n                // check existence, since a field not used in a column might have changed\n                return Boolean(colField) && (Boolean(colField.sum) || Boolean(colField.summaries));\n            });\n        }\n\n        if (shouldUpdate) {\n            this.updateSummaries();\n        }\n    }\n\n    //endregion\n\n    updateSelectedOnly(value) {\n        const me = this;\n        me.detachListeners('selectionChange');\n\n        if (value) {\n            me.grid.ion({\n                name            : 'selectionChange',\n                selectionChange : me.refresh,\n                thisObj         : me\n            });\n        }\n        me.refresh();\n    }\n\n    /**\n     * Refreshes the summaries\n     */\n    refresh() {\n        this.updateSummaries();\n    }\n}\n\nSummary.featureClass = 'b-summary';\n\nGridFeatureManager.registerFeature(Summary);\n","import { RowsRange } from '../../../feature/export/Utils.js';\nimport Combo from '../../../../Core/widget/Combo.js';\n\nexport default class ExportRowsCombo extends Combo {\n\n    //region Config\n\n    static get $name() {\n        return 'ExportRowsCombo';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'exportrowscombo';\n    }\n\n    static get defaultConfig() {\n        return {\n            editable : false\n        };\n    }\n\n    //endregion\n\n    buildItems() {\n        const me = this;\n\n        return [\n            { id : RowsRange.all, text : me.L('L{all}') },\n            { id : RowsRange.visible, text : me.L('L{visible}') }\n        ];\n    }\n}\n\n// Register this widget type with its Factory\nExportRowsCombo.initClass();\n","import { Orientation } from '../../../feature/export/Utils.js';\nimport Combo from '../../../../Core/widget/Combo.js';\n\nexport default class ExportOrientationCombo extends Combo {\n\n    //region Config\n\n    static get $name() {\n        return 'ExportOrientationCombo';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'exportorientationcombo';\n    }\n\n    static get defaultConfig() {\n        return {\n            editable : false\n        };\n    }\n\n    //endregion\n\n    buildItems() {\n        const me = this;\n\n        return [\n            { id : Orientation.portrait, text : me.L('L{portrait}') },\n            { id : Orientation.landscape, text : me.L('L{landscape}') }\n        ];\n    }\n}\n\n// Register this widget type with its Factory\nExportOrientationCombo.initClass();\n","import Popup from '../../../Core/widget/Popup.js';\nimport LocaleManager from '../../../Core/localization/LocaleManager.js';\nimport './field/ExportRowsCombo.js';\nimport './field/ExportOrientationCombo.js';\nimport { FileFormat, PaperFormat } from '../../feature/export/Utils.js';\nimport Checkbox from '../../../Core/widget/Checkbox.js';\nimport Field from '../../../Core/widget/Field.js';\n\nfunction buildComboItems(obj, fn = x => x) {\n    return Object.keys(obj).map(key => ({ id : key, text : fn(key) }));\n}\n\n/**\n * @module Grid/view/export/ExportDialog\n */\n\n/**\n * Dialog window used by the {@link Grid/feature/export/PdfExport PDF export feature}. It allows users to select export\n * options like paper format and columns to export. This dialog contains a number of predefined\n * {@link Core/widget/Field fields} which you can access through the popup's {@link #property-widgetMap}.\n *\n * ## Default widgets\n *\n * The default widgets of this dialog are:\n *\n * | Widget ref             | Type                         | Weight | Description                                          |\n * |------------------------|------------------------------|--------|----------------------------------------------------- |\n * | `columnsField`         | {@link Core/widget/Combo}    | 100    | Choose columns to export                             |\n * | `rowsRangeField`       | {@link Core/widget/Combo}    | 200    | Choose which rows to export                          |\n * | `exporterTypeField`    | {@link Core/widget/Combo}    | 300    | Type of the exporter to use                          |\n * | `alignRowsField`       | {@link Core/widget/Checkbox} | 400    | Align row top to the page top on every exported page |\n * | `repeatHeaderField`    | {@link Core/widget/Checkbox} | 500    | Toggle repeating headers on / off                    |\n * | `fileFormatField`      | {@link Core/widget/Combo}    | 600    | Choose file format                                   |\n * | `paperFormatField`     | {@link Core/widget/Combo}    | 700    | Choose paper format                                  |\n * | `orientationField`     | {@link Core/widget/Combo}    | 800    | Choose orientation                                   |\n *\n * The default buttons are:\n *\n * | Widget ref             | Type                       | Weight | Description                                          |\n * |------------------------|----------------------------|--------|------------------------------------------------------|\n * | `exportButton`         | {@link Core/widget/Button} | 100    | Triggers export                                      |\n * | `cancelButton`         | {@link Core/widget/Button} | 200    | Cancel export                                        |\n *\n * Bottom buttons may be customized using `bbar` config passed to `exportDialog`:\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         pdfExport : {\n *             editorConfig : {\n *                 bbar : {\n *                     items : {\n *                         exportButton : { text : 'Go!' }\n *                     }\n *                 }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n *\n * ## Configuring default widgets\n *\n * Widgets can be customized with {@link Grid/feature/export/PdfExport#config-exportDialog} config:\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         pdfExport : {\n *             exportDialog : {\n *                 items : {\n *                     // hide the field\n *                     orientationField  : { hidden : true },\n *\n *                     // reorder fields\n *                     exporterTypeField : { weight : 150 },\n *\n *                     // change default format in exporter\n *                     fileFormatField   : { value : 'png' }\n *                 }\n *             }\n *         }\n *     }\n * });\n *\n * grid.features.pdfExport.showExportDialog();\n * ```\n *\n * ## Configuring default columns\n *\n * By default all visible columns are selected in the export dialog. This is managed by the\n * {@link #config-autoSelectVisibleColumns} config. To change default selected columns you should disable this config\n * and set field value. Value should be an array of valid column ids (or column instances). This way you can\n * preselect hidden columns:\n *\n * ```javascript\n * const grid = new Grid({\n *     columns : [\n *         { id : 'name', text : 'Name', field : 'name' },\n *         { id : 'age', text : 'Age', field : 'age' },\n *         { id : 'city', text : 'City', field : 'city', hidden : true }\n *     ],\n *     features : {\n *         pdfExport : {\n *             exportDialog : {\n *                 autoSelectVisibleColumns : false,\n *                 items : {\n *                     columnsField : { value : ['name', 'city'] }\n *                 }\n *             }\n *         }\n *     }\n * })\n *\n * // This will show export dialog with Name and City columns selected\n * // even though City column is hidden in the UI\n * grid.features.pdfExport.showExportDialog();\n * ```\n *\n * ## Adding fields\n *\n * You can add your own fields to the export dialog. To make such field value acessible to the feature it should follow\n * a specific naming pattern - it should have `ref` config ending with `Field`, see other fields for reference -\n * `orientationField`, `columnsField`, etc. Fields not matching this pattern are ignored. When values are collected from\n * the dialog, `Field` part of the widget reference is removed, so `orientationField` becomes `orientation`, `fooField`\n * becomes `foo`, etc.\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         pdfExport : {\n *             exportDialog : {\n *                 items : {\n *                     // This field gets into export config\n *                     fooField : {\n *                         type : 'text',\n *                         label : 'Foo',\n *                         value : 'FOO'\n *                     },\n *\n *                     // This one does not, because name doesn't end with `Field`\n *                     bar : {\n *                         type : 'text',\n *                         label : 'Bar',\n *                         value : 'BAR'\n *                     },\n *\n *                     // Add a container widget to wrap some fields together\n *                     myContainer : {\n *                         type : 'container',\n *                         items : {\n *                             // This one gets into config too despite the nesting level\n *                             bazField : {\n *                                 type : 'text',\n *                                 label : 'Baz',\n *                                 value : 'BAZ'\n *                             }\n *                         }\n *                     }\n *                 }\n *             }\n *         }\n *     }\n * });\n *\n * // Assuming export dialog is opened and export triggered with default values\n * // you can receive custom field values here\n * grid.on({\n *     beforePdfExport({ config }) {\n *         console.log(config.foo) // 'FOO'\n *         console.log(config.bar) // undefined\n *         console.log(config.baz) // 'BAZ'\n *     }\n * });\n * ```\n *\n * ## Configuring widgets at runtime\n *\n * If you don't know column ids before grid instantiation or you want a flexible config, you can change widget values\n * before dialog pops up:\n *\n * ```javascript\n * const grid = new Grid({\n *     columns : [\n *         { id : 'name', text : 'Name', field : 'name' },\n *         { id : 'age', text : 'Age', field : 'age' },\n *         { id : 'city', text : 'City', field : 'city', hidden : true }\n *     ],\n *     features : {\n *         pdfExport : true\n *     }\n * });\n *\n * // Such listener would ignore autoSelectVisibleColumns config. Similar to the snippet\n * // above this will show Name and City columns\n * grid.features.pdfExport.exportDialog.on({\n *     beforeShow() {\n *         this.widgetMap.columnsField.value = ['age', 'city']\n *     }\n * });\n * ```\n *\n * @extends Core/widget/Popup\n */\nexport default class ExportDialog extends Popup {\n\n    //region Config\n\n    static get $name() {\n        return 'ExportDialog';\n    }\n\n    static get type() {\n        return 'exportdialog';\n    }\n\n    static get configurable() {\n        return {\n            autoShow  : false,\n            autoClose : false,\n            closable  : true,\n            centered  : true,\n\n            /**\n             * Returns map of values of dialog fields.\n             * @member {Object<String,Object>} values\n             * @readonly\n             */\n\n            /**\n             * Grid instance to build export dialog for\n             * @config {Grid.view.Grid}\n             */\n            client : null,\n\n            /**\n             * Set to `false` to not preselect all visible columns when the dialog is shown\n             * @config {Boolean}\n             */\n            autoSelectVisibleColumns : true,\n\n            /**\n             * Set to `false` to allow using PNG + Multipage config in export dialog\n             * @config {Boolean}\n             */\n            hidePNGMultipageOption : true,\n\n            title : 'L{exportSettings}',\n\n            maxHeight : '80%',\n\n            scrollable : {\n                overflowY : true\n            },\n            defaults : {\n                localeClass : this\n            },\n            items : {\n                columnsField : {\n                    type         : 'combo',\n                    label        : 'L{ExportDialog.columns}',\n                    store        : {},\n                    valueField   : 'id',\n                    displayField : 'text',\n                    multiSelect  : true,\n                    weight       : 100,\n                    maxHeight    : 100\n                },\n                rowsRangeField : {\n                    type   : 'exportrowscombo',\n                    label  : 'L{ExportDialog.rows}',\n                    value  : 'all',\n                    weight : 200\n                },\n                exporterTypeField : {\n                    type         : 'combo',\n                    label        : 'L{ExportDialog.exporterType}',\n                    editable     : false,\n                    value        : 'singlepage',\n                    displayField : 'text',\n                    buildItems() {\n                        const dialog = this.parent;\n\n                        return dialog.exporters.map(exporter => ({\n                            id   : exporter.type,\n                            text : dialog.optionalL(exporter.title, this)\n                        }));\n                    },\n                    onChange({ value }) {\n                        this.owner.widgetMap.alignRowsField.hidden    = value === 'singlepage';\n                        this.owner.widgetMap.repeatHeaderField.hidden = value !== 'multipagevertical';\n                    },\n                    weight : 300\n                },\n                alignRowsField : {\n                    type    : 'checkbox',\n                    label   : 'L{ExportDialog.alignRows}',\n                    checked : false,\n                    hidden  : true,\n                    weight  : 400\n                },\n                repeatHeaderField : {\n                    type        : 'checkbox',\n                    label       : 'L{ExportDialog.repeatHeader}',\n                    localeClass : this,\n                    hidden      : true,\n                    weight      : 500\n                },\n                fileFormatField : {\n                    type        : 'combo',\n                    label       : 'L{ExportDialog.fileFormat}',\n                    localeClass : this,\n                    editable    : false,\n                    value       : 'pdf',\n                    items       : [],\n                    onChange({ value, oldValue }) {\n                        const dialog = this.parent;\n                        if (dialog.hidePNGMultipageOption) {\n                            const\n                                exporterField = dialog.widgetMap.exporterTypeField,\n                                exporter      = exporterField.store.find(r => r.id === 'singlepage');\n\n                            if (value === FileFormat.png && exporter) {\n                                this._previousDisabled = exporterField.disabled;\n                                exporterField.disabled = true;\n\n                                this._previousValue = exporterField.value;\n                                exporterField.value = 'singlepage';\n                            }\n                            else if (oldValue === FileFormat.png && this._previousValue) {\n                                exporterField.disabled = this._previousDisabled;\n                                exporterField.value    = this._previousValue;\n                            }\n                        }\n                    },\n                    weight : 600\n                },\n                paperFormatField : {\n                    type     : 'combo',\n                    label    : 'L{ExportDialog.paperFormat}',\n                    editable : false,\n                    value    : 'A4',\n                    items    : [],\n                    weight   : 700\n                },\n                orientationField : {\n                    type   : 'exportorientationcombo',\n                    label  : 'L{ExportDialog.orientation}',\n                    value  : 'portrait',\n                    weight : 800\n                }\n            },\n            bbar : {\n                defaults : {\n                    localeClass : this\n                },\n                items : {\n                    exportButton : {\n                        color   : 'b-green',\n                        text    : 'L{ExportDialog.export}',\n                        weight  : 100,\n                        onClick : 'up.onExportClick'\n                    },\n                    cancelButton : {\n                        color   : 'b-gray',\n                        text    : 'L{ExportDialog.cancel}',\n                        weight  : 200,\n                        onClick : 'up.onCancelClick'\n                    }\n                }\n            }\n        };\n    }\n\n    //endregion\n\n    construct(config = {}) {\n        const\n            me         = this,\n            { client } = config;\n\n        if (!client) {\n            throw new Error('`client` config is required');\n        }\n\n        me.columnsStore = client.columns.chain(column => column.isLeaf && column.exportable, null, { excludeCollapsedRecords : false });\n\n        me.applyInitialValues(config);\n\n        super.construct(config);\n\n        LocaleManager.ion({\n            locale  : 'onLocaleChange',\n            prio    : -1,\n            thisObj : me\n        });\n    }\n\n    applyInitialValues(config) {\n        const\n            me    = this,\n            items = config.items = config.items || {};\n\n        config.width               = config.width || me.L('L{width}');\n        config.defaults            = config.defaults || {};\n        config.defaults.labelWidth = config.defaults.labelWidth || me.L('L{ExportDialog.labelWidth}');\n\n        items.columnsField     = items.columnsField || {};\n        items.fileFormatField  = items.fileFormatField || {};\n        items.paperFormatField = items.paperFormatField || {};\n\n        items.fileFormatField.items  = buildComboItems(FileFormat, value => value.toUpperCase());\n        items.paperFormatField.items = buildComboItems(PaperFormat);\n\n        items.columnsField.store = me.columnsStore;\n    }\n\n    onBeforeShow() {\n        const { columnsField, alignRowsField, exporterTypeField, repeatHeaderField } = this.widgetMap;\n\n        if (this.autoSelectVisibleColumns) {\n            columnsField.value = this.columnsStore.query(c => !c.hidden);\n        }\n        alignRowsField.hidden    = exporterTypeField.value === 'singlepage';\n        repeatHeaderField.hidden = exporterTypeField.value !== 'multipagevertical';\n\n        super.onBeforeShow?.(...arguments);\n    }\n\n    onLocaleChange() {\n        const\n            labelWidth = this.L('L{labelWidth}');\n\n        this.width = this.L('L{width}');\n\n        this.eachWidget(widget => {\n            if (widget instanceof Field) {\n                widget.labelWidth = labelWidth;\n            }\n        });\n    }\n\n    onExportClick() {\n        const values = this.values;\n\n        /**\n         * Fires when export button is clicked\n         * @event export\n         * @param {Object} values Object containing config for {@link Grid.feature.export.PdfExport#function-export export()} method\n         * @category Export\n         */\n        this.trigger('export', { values });\n    }\n\n    onCancelClick() {\n        /**\n         * Fires when cancel button is clicked. Popup will hide itself.\n         * @event cancel\n         * @category Export\n         */\n        this.trigger('cancel');\n        this.hide();\n    }\n\n    get values() {\n        const\n            fieldRe = /field/i,\n            result  = {};\n\n        this.eachWidget(widget => {\n            if (fieldRe.test(widget.ref)) {\n                result[widget.ref.replace(fieldRe, '')] = widget instanceof Checkbox ? widget.checked : widget.value;\n            }\n        });\n\n        return result;\n    }\n}\n\nExportDialog.initClass();\n","import Exporter from './Exporter.js';\nimport { Orientation, PaperFormat, RowsRange } from '../Utils.js';\n\n/**\n * @module Grid/feature/export/exporter/MultiPageExporter\n */\n\n/**\n * A multiple page exporter. Used by the {@link Grid.feature.export.PdfExport} feature to export to multiple pages. You\n * do not need to use this class directly.\n *\n * ### Extending exporter\n *\n * ```javascript\n * class MyMultiPageExporter extends MultiPageExporter {\n *     // type is required for exporter\n *     static get type() {\n *         return 'mymultipageexporter';\n *     }\n *\n *     get stylesheets() {\n *         const stylesheets = super.stylesheets;\n *\n *         stylesheets.forEach(styleNodeOrLinkTag => doSmth(styleNodeOrLinkTag))\n *\n *         return stylesheets;\n *     }\n * }\n *\n * const grid = new Grid({\n *     features : {\n *         pdfExport : {\n *             // this export feature is configured with only one exporter\n *             exporters : [MyMultiPageExporter]\n *         }\n *     }\n * });\n *\n * // run export with the new exporter\n * grid.features.pdfExport.export({ exporter : 'mymultipageexporter' });\n * ```\n *\n * @classType multipage\n * @feature\n * @extends Grid/feature/export/exporter/Exporter\n */\nexport default class MultiPageExporter extends Exporter {\n\n    static get $name() {\n        return 'MultiPageExporter';\n    }\n\n    static get type() {\n        return 'multipage';\n    }\n\n    static get title() {\n        // In case locale is missing exporter is still distinguishable\n        return this.L('L{multipage}');\n    }\n\n    static get exportingPageText() {\n        return 'L{exportingPage}';\n    }\n\n    //region State management\n\n    async stateNextPage({ client, rowsRange, enableDirectRendering }) {\n        const { exportMeta } = this;\n\n        ++exportMeta.currentPage;\n        ++exportMeta.verticalPosition;\n\n        delete exportMeta.lastExportedRowBottom;\n\n        // If current vertical position is greater than max vertical pages, switch to next column\n        if (exportMeta.verticalPosition >= exportMeta.verticalPages) {\n            Object.assign(exportMeta, {\n                verticalPosition     : 0,\n                horizontalPosition   : exportMeta.horizontalPosition + 1,\n                currentPageTopMargin : 0,\n                lastTop              : 0,\n                lastRowIndex         : rowsRange === RowsRange.visible ? client.rowManager.firstVisibleRow.dataIndex : 0\n            });\n\n            delete exportMeta.lastRowDataIndex;\n\n            if (!enableDirectRendering) {\n                await this.scrollRowIntoView(client, exportMeta.firstVisibleDataIndex, { block : 'start' });\n            }\n        }\n    }\n\n    //endregion\n\n    //region Preparation\n\n    async prepareComponent(config) {\n        await super.prepareComponent(config);\n\n        const\n            me              = this,\n            { exportMeta }  = me,\n            {\n                client,\n                headerTpl,\n                footerTpl,\n                alignRows,\n                rowsRange,\n                enableDirectRendering\n            }               = config,\n            paperFormat     = PaperFormat[config.paperFormat],\n            isPortrait      = config.orientation === Orientation.portrait,\n            paperWidth      = isPortrait ? paperFormat.width : paperFormat.height,\n            paperHeight     = isPortrait ? paperFormat.height : paperFormat.width,\n            pageWidth       = me.inchToPx(paperWidth),\n            pageHeight      = me.inchToPx(paperHeight),\n            onlyVisibleRows = rowsRange === RowsRange.visible,\n            horizontalPages = Math.ceil(exportMeta.totalWidth / pageWidth);\n\n        // To estimate amount of pages correctly we need to know height of the header/footer on every page\n        let contentHeight = pageHeight;\n\n        if (headerTpl) {\n            contentHeight -= me.measureElement(headerTpl({\n                totalWidth  : exportMeta.totalWidth,\n                totalPages  : -1,\n                currentPage : -1\n            }));\n        }\n\n        if (footerTpl) {\n            contentHeight -= me.measureElement(footerTpl({\n                totalWidth  : exportMeta.totalWidth,\n                totalPages  : -1,\n                currentPage : -1\n            }));\n        }\n\n        let totalHeight, verticalPages, totalRows = client.store.count;\n\n        if (onlyVisibleRows) {\n            totalRows = me.getVisibleRowsCount(client);\n\n            totalHeight = exportMeta.totalHeight + client.headerHeight + client.footerHeight + client.bodyHeight;\n        }\n        else {\n            totalHeight = exportMeta.totalHeight + client.headerHeight + client.footerHeight + client.scrollable.scrollHeight;\n        }\n\n        // alignRows config specifies if rows should be always fully visible. E.g. if row doesn't fit on the page, it goes\n        // to the top of the next page\n        if (alignRows && !onlyVisibleRows) {\n            // we need to estimate amount of vertical pages for case when we only put row on the page if it fits\n            // first we need to know how much rows would fit one page, keeping in mind first page also contains header\n            // This estimation is loose, because row height might differ much between pages\n            const\n                rowHeight       = client.rowManager.rowOffsetHeight,\n                rowsOnFirstPage = Math.floor((contentHeight - client.headerHeight) / rowHeight),\n                rowsPerPage     = Math.floor(contentHeight / rowHeight),\n                remainingRows   = totalRows - rowsOnFirstPage;\n\n            verticalPages = 1 + Math.ceil(remainingRows / rowsPerPage);\n        }\n        else {\n            verticalPages = Math.ceil(totalHeight / contentHeight);\n        }\n\n        Object.assign(exportMeta, {\n            paperWidth,\n            paperHeight,\n            pageWidth,\n            pageHeight,\n            horizontalPages,\n            verticalPages,\n            totalHeight,\n            contentHeight,\n            totalRows,\n            totalPages           : horizontalPages * verticalPages,\n            currentPage          : 0,\n            verticalPosition     : 0,\n            horizontalPosition   : 0,\n            currentPageTopMargin : 0,\n            lastTop              : 0,\n            lastRowIndex         : onlyVisibleRows ? client.rowManager.firstVisibleRow.dataIndex : 0\n        });\n\n        if (!enableDirectRendering) {\n            this.adjustRowBuffer(client);\n        }\n    }\n\n    async restoreComponent(config) {\n        await super.restoreComponent(config);\n\n        if (!config.enableDirectRendering) {\n            this.restoreRowBuffer(config.client);\n        }\n    }\n\n    //endregion\n\n    async collectRows(config) {\n        const\n            me             = this,\n            { exportMeta } = me,\n            {\n                client,\n                alignRows,\n                rowsRange\n            }              = config,\n            {\n                subGrids,\n                currentPageTopMargin,\n                verticalPosition,\n                contentHeight,\n                totalRows,\n                lastRowDataIndex\n            }              = exportMeta,\n            { rowManager } = client,\n            { rows }       = rowManager,\n            onlyVisible    = rowsRange === RowsRange.visible,\n            hasMergeCells  = client.hasActiveFeature('mergeCells');\n\n        let remainingHeight, index;\n\n        if (onlyVisible && lastRowDataIndex != null) {\n            if (lastRowDataIndex === rows[rows.length - 1].dataIndex) {\n                index = rows.length - 1;\n            }\n            else {\n                index = rows.findIndex(r => r.dataIndex === lastRowDataIndex);\n            }\n        }\n        else {\n            index = onlyVisible\n                ? rows.findIndex(r => r.bottom > Math.ceil(client.scrollable.y))\n                : rows.findIndex(r => r.bottom + currentPageTopMargin + client.headerHeight > 0);\n        }\n\n        const\n            firstRowIndex     = index,\n            // This is a portion of the row which is not visible, which means it shouldn't affect remaining height\n            // Don't calculate for the first page\n            overflowingHeight = (onlyVisible || verticalPosition === 0) ? 0 : rows[index].top + currentPageTopMargin + client.headerHeight;\n\n        // Calculate remaining height to fill with rows\n        // remainingHeight is height of the page content region to fill. When next row is exported, this heights gets\n        // reduced. Since top rows may be partially visible, it would lead to increasing error and eventually to incorrect\n        // exported rows for the page\n        remainingHeight = contentHeight - overflowingHeight;\n\n        // first exported page container header\n        if (verticalPosition === 0) {\n            remainingHeight -= client.headerHeight;\n        }\n\n        // data index of the last collected row\n        let lastDataIndex,\n            offset = 0;\n\n        while (remainingHeight > 0) {\n            const row = rows[index];\n\n            if (alignRows && remainingHeight < row.offsetHeight) {\n                offset = -remainingHeight;\n                remainingHeight = 0;\n                // If we skip a row save its bottom to meta data in order to align canvases height\n                // properly\n                me.exportMeta.lastExportedRowBottom = rows[index - 1].bottom;\n            }\n            else {\n                me.collectRow(row);\n\n                remainingHeight -= row.offsetHeight;\n\n                lastDataIndex = row.dataIndex;\n\n                // Last row is processed, still need to fill the view\n                if (++index === rows.length && remainingHeight > 0) {\n                    remainingHeight = 0;\n                }\n                else if (onlyVisible && (index - firstRowIndex) === totalRows) {\n                    remainingHeight = 0;\n                }\n            }\n        }\n\n        // Collect merged cells per subgrid\n        if (hasMergeCells) {\n            for (const subGridName in subGrids) {\n                const\n                    subGrid     = subGrids[subGridName],\n                    mergedCells = client.subGrids[subGridName].element.querySelectorAll(`.b-grid-merged-cells`);\n\n                subGrid.mergedCellsHtml = [];\n\n                for (const mergedCell of mergedCells) {\n                    subGrid.mergedCellsHtml.push(mergedCell.outerHTML);\n                }\n            }\n        }\n\n        const lastRow = rows[index - 1];\n\n        if (lastRow) {\n            // Calculate exact grid height according to the the last exported row\n            exportMeta.exactGridHeight = lastRow.bottom + client.footerContainer.offsetHeight + client.headerContainer.offsetHeight;\n            exportMeta.lastRowDataIndex = lastRow.dataIndex + 1;\n        }\n\n        await me.onRowsCollected(rows.slice(firstRowIndex, index), config);\n\n        // No scrolling required if we are only exporting currently visible rows\n        if (onlyVisible) {\n            exportMeta.exactGridHeight -= exportMeta.scrollableTopMargin = client.scrollable.y;\n        }\n        else {\n            // With variable row height row manager might relayout rows to fix position, moving them up or down.\n            const detacher = rowManager.ion({ offsetRows : ({ offset : value }) => offset += value });\n\n            await me.scrollRowIntoView(client, lastDataIndex + 1);\n\n            detacher();\n        }\n\n        return offset;\n    }\n\n    async renderRows(config) {\n        const\n            me              = this,\n            { exportMeta }  = me,\n            {\n                client,\n                alignRows,\n                rowsRange\n            }               = config,\n            {\n                currentPageTopMargin,\n                verticalPosition,\n                contentHeight,\n                totalRows,\n                lastRowIndex,\n                fakeRow\n            }               = exportMeta,\n            { store }       = client,\n            hasMergeCells   = client.hasActiveFeature('mergeCells'),\n            onlyVisibleRows = rowsRange === RowsRange.visible;\n\n        let index       = lastRowIndex,\n            { lastTop } = exportMeta,\n            remainingHeight;\n\n        const\n            firstRowIndex     = index,\n            // This is a portion of the row which is not visible, which means it shouldn't affect remaining height\n            // Don't calculate for the first page\n            overflowingHeight = (onlyVisibleRows || verticalPosition === 0) ? 0 : lastTop + currentPageTopMargin + client.headerHeight,\n            rows              = [];\n\n        // Calculate remaining height to fill with rows\n        // remainingHeight is height of the page content region to fill. When next row is exported, this heights gets\n        // reduced. Since top rows may be partially visible, it would lead to increasing error and eventually to incorrect\n        // exported rows for the page\n        remainingHeight = contentHeight - overflowingHeight;\n\n        // first exported page contains header\n        if (verticalPosition === 0) {\n            remainingHeight -= client.headerHeight;\n        }\n\n        // data index of the last collected row\n        let lastDataIndex, previousTop,\n            offset = 0;\n\n        while (remainingHeight > 0) {\n            fakeRow.render(index, store.getAt(index), true, false, true);\n\n            if (alignRows && remainingHeight < fakeRow.offsetHeight) {\n                offset = -remainingHeight;\n                remainingHeight = 0;\n                // If we skip a row save its bottom to meta data in order to align canvases height\n                // properly\n                me.exportMeta.lastExportedRowBottom = lastTop;\n            }\n            else {\n                previousTop = lastTop;\n                lastDataIndex = index;\n\n                lastTop = fakeRow.translate(lastTop);\n                remainingHeight -= fakeRow.offsetHeight;\n\n                me.collectRow(fakeRow);\n\n                // Push an object with data required to build merged cell\n                rows.push({\n                    top          : fakeRow.top,\n                    bottom       : fakeRow.bottom,\n                    offsetHeight : fakeRow.offsetHeight,\n                    dataIndex    : fakeRow.dataIndex\n                });\n\n                // Last row is processed, still need to fill the view\n                if (++index === store.count && remainingHeight > 0) {\n                    remainingHeight = 0;\n                }\n                else if (onlyVisibleRows && (index - firstRowIndex) === totalRows) {\n                    remainingHeight = 0;\n                }\n            }\n        }\n\n        if (hasMergeCells) {\n            me.renderMergedCells(config, firstRowIndex, index, rows);\n        }\n\n        // Store next to last row index and top position so we could proceed on the next page.\n        // In fact, when we take full control of row rendering we don't even need to do this. It is only required\n        // to be compatible with current exporters. When we get rid of scrolling, we can just start rendering rows\n        // on each page from 0 (adjusted by overflow of the previous row)\n        exportMeta.lastRowIndex = alignRows ? index : lastDataIndex;\n        exportMeta.lastTop = alignRows ? lastTop : previousTop;\n\n        if (fakeRow) {\n            // Calculate exact grid height according to the the last exported row\n            exportMeta.exactGridHeight = fakeRow.bottom + client.footerContainer.offsetHeight + client.headerContainer.offsetHeight;\n        }\n\n        await me.onRowsCollected(rows, config);\n\n        return offset;\n    }\n\n    async buildPage(config) {\n        const\n            me             = this,\n            { exportMeta } = me,\n            {\n                client,\n                headerTpl,\n                footerTpl,\n                enableDirectRendering\n            }              = config,\n            {\n                totalWidth,\n                totalPages,\n                currentPage,\n                subGrids\n            }              = exportMeta;\n\n        // Rows are stored in shared state object, need to clean it before exporting next page\n        Object.values(subGrids).forEach(subGrid => subGrid.rows = []);\n\n        // With variable row height total height might change after scroll, update it\n        // to show content completely on the last page\n        if (config.rowsRange === RowsRange.all) {\n            exportMeta.totalHeight = client.height - client.bodyHeight + client.scrollable.scrollHeight - me.getVirtualScrollerHeight(client);\n        }\n\n        let header, footer;\n\n        // Measure header and footer height\n        if (headerTpl) {\n            header = me.prepareHTML(headerTpl({\n                totalWidth,\n                totalPages,\n                currentPage\n            }));\n        }\n\n        if (footerTpl) {\n            footer = me.prepareHTML(footerTpl({\n                totalWidth,\n                totalPages,\n                currentPage\n            }));\n        }\n\n        let offset;\n\n        if (enableDirectRendering) {\n            offset = await me.renderRows(config);\n        }\n        else {\n            offset = await me.collectRows(config);\n        }\n\n        const html = me.buildPageHtml(config);\n\n        return { html, header, footer, offset };\n    }\n\n    async onRowsCollected() {}\n\n    buildPageHtml() {\n        const\n            me           = this,\n            { subGrids } = me.exportMeta;\n\n        // Now when rows are collected, we need to add them to exported grid\n        let html = me.prepareExportElement();\n\n        Object.values(subGrids).forEach(({ placeHolder, rows, mergedCellsHtml }) => {\n            const placeHolderText = placeHolder.outerHTML;\n\n            let contentHtml = rows.reduce((result, row) => {\n                result += row[0];\n\n                return result;\n            }, '');\n\n            if (mergedCellsHtml?.length) {\n                contentHtml += `<div class=\"b-grid-merged-cells-container\">${mergedCellsHtml.join('')}</div>`;\n            }\n\n            html = html.replace(placeHolderText, contentHtml);\n        });\n\n        return html;\n    }\n\n    prepareExportElement() {\n        const\n            me = this,\n            { element, exportMeta } = me;\n\n        if (exportMeta.scrollableTopMargin) {\n            element.querySelector('.b-grid-vertical-scroller').style.marginTop = `-${exportMeta.scrollableTopMargin}px`;\n        }\n\n        return super.prepareExportElement();\n    }\n}\n\n// HACK: terser/obfuscator doesn't yet support async generators, when processing code it converts async generator to regular async\n// function.\nMultiPageExporter.prototype.pagesExtractor = async function * pagesExtractor(config) {\n    const\n        me = this,\n        {\n            exportMeta,\n            stylesheets\n        }  = me,\n        {\n            totalWidth,\n            totalPages,\n            paperWidth,\n            paperHeight,\n            contentHeight\n        }  = exportMeta;\n\n    let currentPage;\n\n    while ((currentPage = exportMeta.currentPage) < totalPages) {\n        me.trigger('exportStep', { text : me.L(MultiPageExporter.exportingPageText, { currentPage, totalPages }), progress : Math.round(((currentPage + 1) / totalPages) * 90) });\n\n        const { html, header, footer, offset } = await me.buildPage(config);\n\n        // TotalHeight might change in case of variable row heights\n        // Move exported content in the visible frame\n        const styles = [\n            ...stylesheets,\n            `\n                <style>\n                    #${config.client.id} {\n                        height: ${exportMeta.exactGridHeight}px !important;\n                        width: ${totalWidth}px !important;\n                    }\n                    \n                    .b-export-body .b-export-viewport {\n                        margin-inline-start : ${-paperWidth * exportMeta.horizontalPosition}in;\n                        margin-top  : ${exportMeta.currentPageTopMargin}px;\n                    }\n                </style>\n            `];\n\n        // when aligning rows, offset gets accumulated, so we need to take it into account\n        exportMeta.currentPageTopMargin -= contentHeight + offset;\n\n        await me.stateNextPage(config);\n\n        yield {\n            html : me.pageTpl({\n                html,\n                header,\n                footer,\n                styles,\n                paperWidth,\n                paperHeight\n            })\n        };\n    }\n};\n","import Exporter from './Exporter.js';\nimport { Orientation, PaperFormat, RowsRange } from '../Utils.js';\n\n/**\n * @module Grid/feature/export/exporter/MultiPageVerticalExporter\n */\n\n/**\n * A vertical multiple page exporter. Used by the {@link Grid.feature.export.PdfExport} feature to export to multiple\n * pages. Content will be scaled in a horizontal direction to fit the page.\n *\n * You do not need to use this class directly.\n *\n * ### Extending exporter\n *\n * ```javascript\n * class MyMultiPageVerticalExporter extends MultiPageVerticalExporter {\n *     // type is required for exporter\n *     static get type() {\n *         return 'mymultipageverticalexporter';\n *     }\n *\n *     get stylesheets() {\n *         const stylesheets = super.stylesheets;\n *\n *         stylesheets.forEach(styleNodeOrLinkTag => doSmth(styleNodeOrLinkTag))\n *\n *         return stylesheets;\n *     }\n * }\n *\n * const grid = new Grid({\n *     features : {\n *         pdfExport : {\n *             // this export feature is configured with only one exporter\n *             exporters : [MyMultiPageVerticalExporter]\n *         }\n *     }\n * });\n *\n * // run export with the new exporter\n * grid.features.pdfExport.export({ exporter : 'mymultipageverticalexporter' });\n * ```\n *\n * @classType multipagevertical\n * @feature\n * @extends Grid/feature/export/exporter/Exporter\n */\nexport default class MultiPageVerticalExporter extends Exporter {\n\n    static get $name() {\n        return 'MultiPageVerticalExporter';\n    }\n\n    static get type() {\n        return 'multipagevertical';\n    }\n\n    static get title() {\n        // In case locale is missing exporter is still distinguishable\n        return this.L('L{multipagevertical}');\n    }\n\n    static get exportingPageText() {\n        return 'L{exportingPage}';\n    }\n\n    //region State management\n\n    async stateNextPage({ client }) {\n        const\n            { exportMeta } = this,\n            {\n                totalRows,\n                processedRows,\n                totalPages\n            } = exportMeta;\n\n        ++exportMeta.currentPage;\n        ++exportMeta.verticalPosition;\n\n        // With variable row heights it is possible that initial pages estimation is wrong. If we're out but there are\n        // more rows to process - continue exporting\n        if (exportMeta.currentPage === totalPages && processedRows.size !== totalRows) {\n            ++exportMeta.totalPages;\n            ++exportMeta.verticalPages;\n        }\n    }\n\n    //endregion\n\n    estimateTotalPages(config) {\n        const\n            me             = this,\n            { exportMeta } = me,\n            {\n                client,\n                headerTpl,\n                footerTpl,\n                alignRows,\n                rowsRange,\n                repeatHeader,\n                enableDirectRendering\n            }              = config,\n            {\n                pageWidth,\n                pageHeight,\n                totalWidth\n            }              = exportMeta,\n            scale          = me.getScaleValue(pageWidth, totalWidth);\n\n        // To estimate amount of pages correctly we need to know height of the header/footer on every page\n        let\n            // bodyHeight does not always report correct value, read it from the DOM element instead, we don't care\n            // about forced reflow at this stage\n            totalHeight   = 0 - me.getVirtualScrollerHeight(client) + client.height - client.bodyElement.offsetHeight + client.scrollable.scrollHeight,\n            // We will be scaling content horizontally, need to adjust content height accordingly\n            contentHeight = pageHeight / scale,\n            totalRows     = client.store.count,\n            initialScroll = 0,\n            rowsHeight    = totalHeight,\n            verticalPages;\n\n        if (headerTpl) {\n            contentHeight -= me.measureElement(headerTpl({\n                totalWidth,\n                totalPages  : -1,\n                currentPage : -1\n            }));\n        }\n\n        if (footerTpl) {\n            contentHeight -= me.measureElement(footerTpl({\n                totalWidth,\n                totalPages  : -1,\n                currentPage : -1\n            }));\n        }\n\n        // If we are repeating header on every page we have smaller contentHeight\n        if (repeatHeader) {\n            contentHeight -= client.headerHeight + client.footerHeight;\n            totalHeight -= client.headerHeight + client.footerHeight;\n        }\n\n        if (rowsRange === RowsRange.visible) {\n            const\n                rowManager = client.rowManager,\n                firstRow = rowManager.firstVisibleRow,\n                lastRow  = rowManager.lastVisibleRow;\n\n            // With direct rendering we start rendering from 0, no need to adjust anything\n            if (!enableDirectRendering) {\n                initialScroll = firstRow.top;\n            }\n\n            totalRows = me.getVisibleRowsCount(client);\n\n            if (enableDirectRendering) {\n                totalHeight = client.headerHeight + client.footerHeight + lastRow.bottom - firstRow.top;\n                rowsHeight = lastRow.bottom - firstRow.top;\n            }\n            else {\n                rowsHeight = totalHeight = totalHeight - client.scrollable.scrollHeight + lastRow.bottom - firstRow.top;\n            }\n\n            exportMeta.lastRowIndex = firstRow.dataIndex;\n            exportMeta.finishRowIndex = lastRow.dataIndex;\n        }\n        else {\n            exportMeta.finishRowIndex = client.store.count - 1;\n        }\n\n        // alignRows config specifies if rows should be always fully visible. E.g. if row doesn't fit on the page, it goes\n        // to the top of the next page\n        if (alignRows && !repeatHeader && rowsRange !== RowsRange.visible) {\n            // we need to estimate amount of vertical pages for case when we only put row on the page if it fits\n            // first we need to know how much rows would fit one page, keeping in mind first page also contains header\n            // This estimation is loose, because row height might differ much between pages\n            const\n                rowHeight       = client.rowManager.rowOffsetHeight,\n                rowsOnFirstPage = Math.floor((contentHeight - client.headerHeight) / rowHeight),\n                rowsPerPage     = Math.floor(contentHeight / rowHeight),\n                remainingRows   = totalRows - rowsOnFirstPage;\n\n            verticalPages = 1 + Math.ceil(remainingRows / rowsPerPage);\n        }\n        else {\n            verticalPages = Math.ceil(rowsHeight / contentHeight);\n        }\n\n        Object.assign(exportMeta, {\n            scale,\n            contentHeight,\n            totalRows,\n            totalHeight,\n            verticalPages,\n            initialScroll,\n            horizontalPages : 1,\n            totalPages      : verticalPages\n        });\n    }\n\n    async prepareComponent(config) {\n        await super.prepareComponent(config);\n\n        const\n            me              = this,\n            { exportMeta }  = me,\n            { client }      = config,\n            paperFormat     = PaperFormat[config.paperFormat],\n            isPortrait      = config.orientation === Orientation.portrait,\n            paperWidth      = isPortrait ? paperFormat.width : paperFormat.height,\n            paperHeight     = isPortrait ? paperFormat.height : paperFormat.width,\n            pageWidth       = me.inchToPx(paperWidth),\n            pageHeight      = me.inchToPx(paperHeight),\n            horizontalPages = 1;\n\n        Object.assign(exportMeta, {\n            paperWidth,\n            paperHeight,\n            pageWidth,\n            pageHeight,\n            horizontalPages,\n            currentPage          : 0,\n            verticalPosition     : 0,\n            horizontalPosition   : 0,\n            currentPageTopMargin : 0,\n            lastTop              : 0,\n            lastRowIndex         : 0,\n            processedRows        : new Set()\n        });\n\n        me.estimateTotalPages(config);\n\n        if (!config.enableDirectRendering) {\n            me.adjustRowBuffer(client);\n        }\n    }\n\n    async restoreComponent(config) {\n        await super.restoreComponent(config);\n\n        if (!config.enableDirectRendering) {\n            this.restoreRowBuffer(config.client);\n        }\n    }\n\n    async collectRows(config) {\n        const\n            me                 = this,\n            { exportMeta }     = me,\n            {\n                client,\n                alignRows,\n                repeatHeader\n            }                  = config,\n            {\n                subGrids,\n                currentPageTopMargin,\n                verticalPosition,\n                totalRows,\n                contentHeight\n            }                  = exportMeta,\n            // If we are repeating header we've already took header height into account when setting content height\n            clientHeaderHeight = repeatHeader ? 0 : client.headerHeight,\n            { rowManager }     = client,\n            { rows }           = rowManager,\n            onlyVisibleRows    = config.rowsRange === RowsRange.visible,\n            hasMergeCells      = client.hasActiveFeature('mergeCells');\n\n        let index = onlyVisibleRows\n                ? rows.findIndex(r => r.bottom > client.scrollable.y)\n                : rows.findIndex(r => r.bottom + currentPageTopMargin + clientHeaderHeight > 0),\n            remainingHeight;\n\n        const\n            firstRowIndex     = index,\n            // This is a portion of the row which is not visible, which means it shouldn't affect remaining height\n            // Don't calculate for the first page\n            overflowingHeight = verticalPosition === 0 ? 0 : rows[index].top + currentPageTopMargin + clientHeaderHeight;\n\n        // Calculate remaining height to fill with rows\n        // remainingHeight is height of the page content region to fill. When next row is exported, this heights gets\n        // reduced. Since top rows may be partially visible, it would lead to increasing error and eventually to incorrect\n        // exported rows for the page\n        remainingHeight = contentHeight - overflowingHeight;\n\n        // first exported page container header\n        if (verticalPosition === 0) {\n            remainingHeight -= clientHeaderHeight;\n        }\n\n        // data index of the last collected row\n        let lastDataIndex,\n            offset = 0;\n\n        while (remainingHeight > 0) {\n            const row = rows[index];\n\n            if (alignRows && remainingHeight < row.offsetHeight) {\n                offset = -remainingHeight;\n                remainingHeight = 0;\n            }\n            else {\n                me.collectRow(row);\n\n                remainingHeight -= row.offsetHeight;\n\n                // only mark row as processed if it fitted without overflow\n                if (remainingHeight > 0) {\n                    // We cannot use simple counter here because some rows appear on 2 pages. Need to track unique identifier\n                    exportMeta.processedRows.add(row.dataIndex);\n                }\n\n                lastDataIndex = row.dataIndex;\n\n                // Last row is processed, still need to fill the view\n                if (++index === rows.length && remainingHeight > 0) {\n                    remainingHeight = 0;\n                }\n                else if (onlyVisibleRows && (index - firstRowIndex) === totalRows) {\n                    remainingHeight = 0;\n                }\n            }\n        }\n\n        // Collect merged cells per subgrid\n        if (hasMergeCells) {\n            for (const subGridName in subGrids) {\n                const\n                    subGrid     = subGrids[subGridName],\n                    mergedCells = client.subGrids[subGridName].element.querySelectorAll(`.b-grid-merged-cells`);\n\n                subGrid.mergedCellsHtml = [];\n\n                for (const mergedCell of mergedCells) {\n                    subGrid.mergedCellsHtml.push(mergedCell.outerHTML);\n                }\n            }\n        }\n\n        const lastRow = rows[index - 1];\n\n        if (lastRow) {\n            // Calculate exact grid height according to the the last exported row\n            exportMeta.exactGridHeight = lastRow.bottom + client.footerContainer.offsetHeight + client.headerContainer.offsetHeight;\n        }\n\n        await me.onRowsCollected(rows.slice(firstRowIndex, index), config);\n\n        // No scrolling required if we are only exporting currently visible rows\n        if (onlyVisibleRows) {\n            exportMeta.scrollableTopMargin = client.scrollable.y;\n        }\n        else {\n            // With variable row height row manager might relayout rows to fix position, moving them up or down.\n            const detacher = rowManager.ion({ offsetRows : ({ offset : value }) => offset += value });\n\n            await me.scrollRowIntoView(client, lastDataIndex + 1);\n\n            detacher();\n        }\n\n        return offset;\n    }\n\n    async renderRows(config) {\n        const\n            me                    = this,\n            { exportMeta }        = me,\n            {\n                client,\n                alignRows,\n                repeatHeader\n            }                     = config,\n            {\n                currentPageTopMargin,\n                verticalPosition,\n                totalRows,\n                contentHeight,\n                lastRowIndex,\n                finishRowIndex,\n                fakeRow\n            }                     = exportMeta,\n            // If we are repeating header we've already took header height into account when setting content height\n            clientHeaderHeight    = repeatHeader ? 0 : client.headerHeight,\n            { store }             = client,\n            hasMergeCells         = client.hasActiveFeature('mergeCells'),\n            onlyVisibleRows       = config.rowsRange === RowsRange.visible;\n\n        let index       = lastRowIndex,\n            { lastTop } = exportMeta,\n            remainingHeight;\n\n        const\n            firstRowIndex     = index,\n            // This is a portion of the row which is not visible, which means it shouldn't affect remaining height\n            // Don't calculate for the first page\n            overflowingHeight = verticalPosition === 0 ? 0 : lastTop + currentPageTopMargin + clientHeaderHeight,\n            rows              = [];\n\n        // Calculate remaining height to fill with rows\n        // remainingHeight is height of the page content region to fill. When next row is exported, this heights gets\n        // reduced. Since top rows may be partially visible, it would lead to increasing error and eventually to incorrect\n        // exported rows for the page\n        remainingHeight = contentHeight - overflowingHeight;\n\n        // first exported page container header\n        if (verticalPosition === 0) {\n            remainingHeight -= clientHeaderHeight;\n        }\n\n        // data index of the last collected row\n        let lastDataIndex,\n            nextPageTop,\n            offset = 0;\n\n        while (remainingHeight > 0) {\n            fakeRow.render(index, store.getAt(index), true, false, true);\n\n            if (alignRows && remainingHeight < fakeRow.offsetHeight) {\n                offset = -remainingHeight;\n                remainingHeight = 0;\n            }\n            else {\n                nextPageTop = lastTop;\n                lastDataIndex = index;\n\n                lastTop = fakeRow.translate(lastTop);\n                remainingHeight -= fakeRow.offsetHeight;\n\n                me.collectRow(fakeRow);\n\n                // Push an object with data required to build merged cell\n                rows.push({\n                    top          : fakeRow.top,\n                    bottom       : fakeRow.bottom,\n                    offsetHeight : fakeRow.offsetHeight,\n                    dataIndex    : fakeRow.dataIndex\n                });\n\n                // only mark row as processed if it fitted without overflow\n                if (remainingHeight > 0) {\n                    // We cannot use simple counter here because some rows appear on 2 pages. Need to track unique identifier\n                    exportMeta.processedRows.add(index);\n                }\n\n                // Last row is processed, still need to fill the view\n                if (index === finishRowIndex) {\n                    remainingHeight = 0;\n                }\n                else if ((++index - firstRowIndex) === totalRows && onlyVisibleRows) {\n                    remainingHeight = 0;\n                }\n            }\n        }\n\n        if (hasMergeCells) {\n            me.renderMergedCells(config, firstRowIndex, index, rows);\n        }\n\n        // Store next to last row index and top position so we could proceed on the next page.\n        // In fact, when we take full control of row rendering we don't even need to do this. It is only required\n        // to be compatible with current exporters. When we get rid of scrolling, we can just start rendering rows\n        // on each page from 0 (adjusted by overflow of the previous row)\n        exportMeta.lastRowIndex = lastDataIndex;\n        exportMeta.lastTop = nextPageTop;\n\n        if (fakeRow) {\n            // Calculate exact grid height according to the the last exported row to constrain column lines to the last\n            // row\n            exportMeta.exactGridHeight = fakeRow.bottom + client.footerContainer.offsetHeight + client.headerContainer.offsetHeight;\n        }\n\n        await me.onRowsCollected(rows, config);\n\n        return offset;\n    }\n\n    async buildPage(config) {\n        const\n            me             = this,\n            { exportMeta } = me,\n            {\n                client,\n                headerTpl,\n                footerTpl,\n                enableDirectRendering\n            }              = config,\n            {\n                totalWidth,\n                totalPages,\n                currentPage,\n                subGrids\n            }              = exportMeta;\n\n        // Rows are stored in shared state object, need to clean it before exporting next page\n        Object.values(subGrids).forEach(subGrid => subGrid.rows = []);\n\n        // With variable row height total height might change after scroll, update it\n        // to show content completely on the last page\n        if (config.rowsRange === RowsRange.all) {\n            exportMeta.totalHeight = client.headerHeight + client.footerHeight + client.scrollable.scrollHeight;\n\n            if (!enableDirectRendering) {\n                exportMeta.totalHeight -= me.getVirtualScrollerHeight(client);\n            }\n        }\n\n        let header, footer, offset;\n\n        // Measure header and footer height\n        if (headerTpl) {\n            header = me.prepareHTML(headerTpl({\n                totalWidth,\n                totalPages,\n                currentPage\n            }));\n        }\n\n        if (footerTpl) {\n            footer = me.prepareHTML(footerTpl({\n                totalWidth,\n                totalPages,\n                currentPage\n            }));\n        }\n\n        if (enableDirectRendering) {\n            offset = await me.renderRows(config);\n        }\n        else {\n            offset = await me.collectRows(config);\n        }\n\n        const html = me.buildPageHtml(config);\n\n        return { html, header, footer, offset };\n    }\n\n    async onRowsCollected() {}\n\n    buildPageHtml() {\n        const\n            me           = this,\n            { subGrids } = me.exportMeta;\n\n        // Now when rows are collected, we need to add them to exported grid\n        let html = me.prepareExportElement();\n\n        Object.values(subGrids).forEach(({ placeHolder, rows, mergedCellsHtml }) => {\n            const placeHolderText = placeHolder.outerHTML;\n\n            let contentHtml = rows.reduce((result, row) => {\n                result += row[0];\n\n                return result;\n            }, '');\n\n            if (mergedCellsHtml?.length) {\n                contentHtml += `<div class=\"b-grid-merged-cells-container\">${mergedCellsHtml.join('')}</div>`;\n            }\n\n            html = html.replace(placeHolderText, contentHtml);\n        });\n\n        return html;\n    }\n}\n\n// HACK: terser/obfuscator doesn't yet support async generators, when processing code it converts async generator to regular async\n// function.\nMultiPageVerticalExporter.prototype.pagesExtractor = async function * pagesExtractor(config) {\n    const\n        me = this,\n        {\n            exportMeta,\n            stylesheets\n        }  = me,\n        {\n            totalWidth,\n            paperWidth,\n            paperHeight,\n            contentHeight,\n            scale,\n            initialScroll\n        }  = exportMeta;\n\n    let\n        { totalPages } = exportMeta,\n        currentPage;\n\n    while ((currentPage = exportMeta.currentPage) < totalPages) {\n        me.trigger('exportStep', {\n            text     : me.L(MultiPageVerticalExporter.exportingPageText, { currentPage, totalPages }),\n            progress : Math.round(((currentPage + 1) / totalPages) * 90)\n        });\n\n        const { html, header, footer, offset } = await me.buildPage(config);\n\n        // TotalHeight might change in case of variable row heights\n        // Move exported content in the visible frame\n        const styles = [\n            ...stylesheets,\n            `\n                <style>\n                    #${config.client.id} {\n                        width: ${totalWidth}px !important;\n                    }\n                    \n                    .b-export .b-export-content {\n                        transform: scale(${scale});\n                        transform-origin: top left;\n                        height: auto;\n                    }\n                </style>\n            `\n        ];\n\n        if (config.repeatHeader) {\n            const gridHeight = exportMeta.exactGridHeight ? `${exportMeta.exactGridHeight + exportMeta.currentPageTopMargin}px` : '100%';\n\n            styles.push(\n                `\n                <style>\n                    #${config.client.id} {\n                        height: ${gridHeight} !important;\n                    }\n                    \n                    .b-export .b-export-content {\n                        height: ${100 / scale}%;\n                    }\n                    \n                    .b-export-body {\n                        height: 100%;\n                        display: flex;\n                    }\n                \n                    .b-export-viewport {\n                        height: 100%;\n                    }\n                    \n                    .b-grid-vertical-scroller {\n                        margin-top: ${exportMeta.currentPageTopMargin - initialScroll}px;\n                    }\n                </style>\n                `\n            );\n        }\n        else {\n            const gridHeight = exportMeta.exactGridHeight || (contentHeight - exportMeta.currentPageTopMargin);\n\n            styles.push(\n                `\n                <style>\n                    #${config.client.id} {\n                        height: ${gridHeight}px !important;\n                    }\n                    \n                    .b-export-body {\n                        overflow: hidden;\n                    }\n                    \n                    .b-export .b-export-content {\n                        height: ${100 / scale}%;\n                    }\n                    \n                    .b-export-body .b-export-viewport {\n                        margin-top: ${exportMeta.currentPageTopMargin}px;\n                    }\n                    \n                    .b-grid-vertical-scroller {\n                        margin-top: -${initialScroll}px;\n                    }\n                </style>\n                `\n            );\n        }\n\n        // when aligning rows, offset gets accumulated, so we need to take it into account\n        exportMeta.currentPageTopMargin -= contentHeight + offset;\n\n        await me.stateNextPage(config);\n\n        ({ totalPages } = exportMeta);\n\n        yield {\n            html : me.pageTpl({\n                html,\n                header,\n                footer,\n                styles,\n                paperWidth,\n                paperHeight\n            })\n        };\n    }\n};\n","import BrowserHelper from '../../../../Core/helper/BrowserHelper.js';\nimport Exporter from './Exporter.js';\nimport { Orientation, PaperFormat, RowsRange } from '../Utils.js';\n\n/**\n * @module Grid/feature/export/exporter/SinglePageExporter\n */\n\n/**\n * A single page exporter. Used by the {@link Grid.feature.export.PdfExport} feature to export to single page. Content\n * will be scaled in both directions to fit the page.\n *\n * You do not need to use this class directly.\n *\n * ### Extending exporter\n *\n * ```javascript\n * class MySinglePageExporter extends SinglePageExporter {\n *     // type is required for exporter\n *     static get type() {\n *         return 'mysinglepageexporter';\n *     }\n *\n *     get stylesheets() {\n *         const stylesheets = super.stylesheets;\n *\n *         stylesheets.forEach(styleNodeOrLinkTag => doSmth(styleNodeOrLinkTag))\n *\n *         return stylesheets;\n *     }\n * }\n *\n * const grid = new Grid({\n *     features : {\n *         pdfExport : {\n *             // this export feature is configured with only one exporter\n *             exporters : [MySinglePageExporter]\n *         }\n *     }\n * });\n *\n * // run export with the new exporter\n * grid.features.pdfExport.export({ exporter : 'mysinglepageexporter' });\n * ```\n *\n * @classType singlepage\n * @feature\n * @extends Grid/feature/export/exporter/Exporter\n */\nexport default class SinglePageExporter extends Exporter {\n\n    static get $name() {\n        return 'SinglePageExporter';\n    }\n\n    static get type() {\n        return 'singlepage';\n    }\n\n    static get title() {\n        // In case locale is missing exporter is still distinguishable\n        return this.localize('L{singlepage}');\n    }\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Set to true to center content horizontally on the page\n             * @config {Boolean}\n             */\n            centerContentHorizontally : false\n        };\n    }\n\n    async prepareComponent(config) {\n        await super.prepareComponent(config);\n\n        Object.assign(this.exportMeta, {\n            verticalPages      : 1,\n            horizontalPages    : 1,\n            totalPages         : 1,\n            currentPage        : 0,\n            verticalPosition   : 0,\n            horizontalPosition : 0\n        });\n    }\n\n    async onRowsCollected() {}\n\n    positionRows(rows, config) {\n        if (config.enableDirectRendering) {\n            return rows.map(r => r[0]);\n        }\n        else {\n            let currentTop = 0;\n\n            // In case of variable row height row vertical position is not guaranteed to increase\n            // monotonously. Position row manually instead\n            return rows.map(([html, , height]) => {\n                const result = html.replace(/translate\\(\\d+px, \\d+px\\)/, `translate(0px, ${currentTop}px)`);\n\n                currentTop += height;\n\n                return result;\n            });\n        }\n    }\n\n    async collectRows(config) {\n        const\n            me                    = this,\n            { client }            = config,\n            { rowManager, store } = client,\n            hasMergeCells         = client.hasActiveFeature('mergeCells'),\n            { subGrids }          = me.exportMeta,\n            totalRows             = config.rowsRange === RowsRange.visible && store.count\n                // visibleRowCount is a projection of how much rows will fit the view, which should be\n                // maximum amount of exported rows. and there can be less\n                ? me.getVisibleRowsCount(client)\n                : store.count;\n\n        let { totalHeight } = me.exportMeta,\n            processedRows   = 0,\n            lastDataIndex   = -1;\n\n        if (rowManager.rows.length > 0) {\n            if (config.rowsRange === RowsRange.visible) {\n                lastDataIndex = rowManager.firstVisibleRow.dataIndex - 1;\n            }\n\n            if (hasMergeCells) {\n                for (const subGrid of Object.values(subGrids)) {\n                    subGrid.mergedCellsHtml = [];\n                }\n            }\n\n            // Collecting rows\n            while (processedRows < totalRows) {\n                const\n                    rows    = rowManager.rows,\n                    lastRow = rows[rows.length - 1],\n                    lastProcessedRowIndex = processedRows;\n\n                rows.forEach(row => {\n                    // When we are scrolling rows will be duplicated even with disabled buffers (e.g. when we are trying to\n                    // scroll last record into view). So we store last processed row dataIndex (which is always growing\n                    // sequence) and filter all rows with lower/same dataIndex\n                    if (row.dataIndex > lastDataIndex && processedRows < totalRows) {\n                        ++processedRows;\n                        totalHeight += row.offsetHeight;\n                        me.collectRow(row);\n                    }\n                });\n\n                // Collect merged cells per subgrid\n                if (hasMergeCells) {\n                    for (const subGridName in subGrids) {\n                        const\n                            subGrid     = subGrids[subGridName],\n                            mergedCells = client.subGrids[subGridName].element.querySelectorAll(`.b-grid-merged-cells`);\n\n                        for (const mergedCell of mergedCells) {\n                            subGrid.mergedCellsHtml.push(mergedCell.outerHTML);\n                        }\n                    }\n                }\n\n                // Calculate new rows processed in this iteration e.g. to collect events\n                const\n                    firstNewRowIndex = rows.findIndex(r => r.dataIndex === lastDataIndex + 1),\n                    lastNewRowIndex  = firstNewRowIndex + (processedRows - lastProcessedRowIndex);\n\n                await me.onRowsCollected(rows.slice(firstNewRowIndex, lastNewRowIndex), config);\n\n                if (processedRows < totalRows) {\n                    lastDataIndex = lastRow.dataIndex;\n                    await me.scrollRowIntoView(client, lastDataIndex + 1);\n                }\n            }\n        }\n\n        return totalHeight;\n    }\n\n    async renderRows(config) {\n        const\n            me                    = this,\n            { client, rowsRange } = config,\n            { rowManager, store } = client,\n            hasMergeCells         = client.hasActiveFeature('mergeCells'),\n            onlyVisibleRows       = rowsRange === RowsRange.visible;\n\n        let { totalHeight } = me.exportMeta;\n\n        if (store.count) {\n            const\n                { fakeRow }         = me.exportMeta,\n                { firstVisibleRow } = rowManager,\n                fromIndex           = onlyVisibleRows ? firstVisibleRow.dataIndex : 0,\n                toIndex             = onlyVisibleRows ? rowManager.lastVisibleRow.dataIndex : store.count - 1,\n                rows                = [];\n\n            let top = 0;\n\n            // Fake row might not have cells if there are no columns\n            if (fakeRow.cells.length) {\n                for (let i = fromIndex; i <= toIndex; i++) {\n                    fakeRow.render(i, store.getAt(i), true, false, true);\n\n                    top = fakeRow.translate(top);\n\n                    me.collectRow(fakeRow);\n\n                    // Push an object with data required to build merged cell\n                    rows.push({\n                        top          : fakeRow.top,\n                        bottom       : fakeRow.bottom,\n                        offsetHeight : fakeRow.offsetHeight,\n                        dataIndex    : fakeRow.dataIndex\n                    });\n                }\n\n                await me.onRowsCollected(rows, config);\n            }\n\n            totalHeight += top;\n\n            if (hasMergeCells) {\n                me.renderMergedCells(config, fromIndex, toIndex, rows);\n            }\n        }\n\n        return totalHeight;\n    }\n\n    buildPageHtml(config) {\n        const\n            me           = this,\n            { subGrids } = me.exportMeta;\n\n        // Now when rows are collected, we need to add them to exported grid\n        let html = me.prepareExportElement();\n\n        Object.values(subGrids).forEach(({ placeHolder, rows, mergedCellsHtml }) => {\n            const placeHolderText = placeHolder.outerHTML;\n            let contentHtml =  me.positionRows(rows, config).join('');\n\n            if (mergedCellsHtml?.length) {\n                contentHtml += `<div class=\"b-grid-merged-cells-container\">${mergedCellsHtml.join('')}</div>`;\n            }\n\n            html = html.replace(placeHolderText, contentHtml);\n        });\n\n        return html;\n    }\n}\n\n// HACK: terser/obfuscator doesn't yet support async generators, when processing code it converts async generator to regular async\n// function.\nSinglePageExporter.prototype.pagesExtractor = async function * pagesExtractor(config) {\n    // When we prepared grid we stretched it horizontally, now we need to gather all rows\n    // There are two ways:\n    // 1. set component height to scrollable.scrollHeight value to render all rows at once (maybe a bit more complex\n    // if rows have variable height)\n    // 2. iterate over rows, scrolling new portion into view once in a while\n    // #1 sounds simpler, but that might require too much rendering, let's scroll rows instead\n\n    const\n        me             = this,\n        { client }     = config,\n        { totalWidth } = me.exportMeta,\n        styles         = me.stylesheets,\n        portrait       = config.orientation === Orientation.portrait,\n        paperFormat    = PaperFormat[config.paperFormat],\n        paperWidth     = portrait ? paperFormat.width : paperFormat.height,\n        paperHeight    = portrait ? paperFormat.height : paperFormat.width;\n\n    let totalHeight, header, footer;\n\n    if (config.enableDirectRendering) {\n        totalHeight = await me.renderRows(config);\n\n        totalHeight += client.headerHeight + client.footerHeight;\n    }\n    else {\n        totalHeight = await me.collectRows(config);\n\n        totalHeight += client.height - client.bodyHeight;\n    }\n\n    const html = me.buildPageHtml(config);\n\n    const totalClientHeight = totalHeight;\n\n    // Measure header and footer height\n    if (config.headerTpl) {\n        header = me.prepareHTML(config.headerTpl({ totalWidth }));\n        const height = me.measureElement(header);\n        totalHeight += height;\n    }\n\n    if (config.footerTpl) {\n        footer = me.prepareHTML(config.footerTpl({ totalWidth }));\n        const height = me.measureElement(footer);\n        totalHeight += height;\n    }\n\n    const\n        widthScale  = Math.min(1, me.getScaleValue(me.inchToPx(paperWidth), totalWidth)),\n        heightScale = Math.min(1, me.getScaleValue(me.inchToPx(paperHeight), totalHeight)),\n        scale       = Math.min(widthScale, heightScale);\n\n    // Now add style to stretch grid vertically\n    styles.push(\n        `<style>\n                #${client.id} {\n                    height: ${totalClientHeight}px !important;\n                    width: ${totalWidth}px !important;\n                }\n                \n                .b-export-content {\n                    ${me.centerContentHorizontally ? 'left: 50%;' : ''}\n                    transform: scale(${scale}) ${me.centerContentHorizontally ? 'translateX(-50%)' : ''};\n                    transform-origin: top left;\n                    height: ${scale === 1 ? 'inherit' : 'auto !important'};\n                }\n            </style>`\n    );\n\n    if (BrowserHelper.isIE11) {\n        styles.push(\n        `<style>\n                .b-export-body {\n                   min-height: ${totalClientHeight}px !important;\n                }\n         </style>`\n        );\n    }\n\n    // This is a single page exporter so we only yield one page\n    yield {\n        html : me.pageTpl({\n            html,\n            header,\n            footer,\n            styles,\n            paperWidth,\n            paperHeight\n        })\n    };\n};\n","import AjaxHelper from '../../../Core/helper/AjaxHelper.js';\nimport EventHelper from '../../../Core/helper/EventHelper.js';\nimport VersionHelper from '../../../Core/helper/VersionHelper.js';\nimport InstancePlugin from '../../../Core/mixin/InstancePlugin.js';\nimport MultiPageExporter from './exporter/MultiPageExporter.js';\nimport MultiPageVerticalExporter from './exporter/MultiPageVerticalExporter.js';\nimport SinglePageExporter from './exporter/SinglePageExporter.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\nimport ExportDialog from '../../view/export/ExportDialog.js';\nimport GridFeatureManager from '../GridFeatureManager.js';\nimport Toast from '../../../Core/widget/Toast.js';\nimport { FileMIMEType } from './Utils.js';\n\n/**\n * @module Grid/feature/export/PdfExport\n */\n\n/**\n * Generates PDF/PNG files from the Grid component.\n *\n * **NOTE:** Server side is required to make export work!\n *\n * The export server is written in nodejs and it is shipped with our examples. You can find setup instructions in\n * `examples/_shared/server/README.md` and `examples/export/README.md` files.\n *\n * When your server is up and running, it listens to requests. The Export feature sends a request to the specified URL\n * with the HTML fragments. The server generates a PDF (or PNG) file and returns a download link (or binary, depending\n * on {@link #config-sendAsBinary} config). Then the Export feature opens the link in a new tab and the file is\n * automatically downloaded by your browser. This is configurable, see {@link #config-openAfterExport} config.\n *\n * The {@link #config-exportServer} URL must be configured. The URL can be localhost if you start the server locally,\n * or your remote server address.\n *\n * ## Usage\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         pdfExport : {\n *             exportServer : 'http://localhost:8080' // Required\n *         }\n *     }\n * })\n *\n * // Opens popup allowing to customize export settings\n * grid.features.pdfExport.showExportDialog();\n *\n * // Simple export\n * grid.features.pdfExport.export({\n *     // Required, set list of column ids to export\n *     columns : grid.columns.map(c => c.id)\n * }).then(result => {\n *     // Response instance and response content in JSON\n *     let { response } = result;\n * });\n * ```\n *\n * ## Exporters\n *\n * There are three exporters available by default: `singlepage`, `multipage` and `multipagevertical`:\n *  * `singlepage` -  generates single page with content scaled to fit the provided {@link #config-paperFormat}\n *  * `multipage` - generates as many pages as required to fit all requested content, unscaled\n *  * `multipagevertical` - a combination of two above: it scales content horizontally to fit into page width and then\n *  puts overflowing content on vertical pages. Like a scroll.\n *\n * ## Loading resources\n *\n * If you face a problem with loading resources when exporting, the cause might be that the application and the export server are hosted on different servers.\n * This is due to [Cross-Origin Resource Sharing](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) (CORS). There are 2 options how to handle this:\n * - Allow cross origin requests from the server where your export is hosted to the server where your application is hosted;\n * - Copy all resources keeping the folder hierarchy from the server where your application is hosted to the server where your export is hosted\n * and setup paths using {@link #config-translateURLsToAbsolute} config and configure the export server to give access to the path:\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         pdfExport : {\n *             exportServer : 'http://localhost:8080',\n *             // '/resources' is hardcoded in WebServer implementation\n *             translateURLsToAbsolute : 'http://localhost:8080/resources'\n *         }\n *     }\n * })\n * ```\n *\n * ```javascript\n * // Following path would be served by this address: http://localhost:8080/resources/\n * node ./src/server.js -h 8080 -r web/application/styles\n * ```\n *\n * where `web/application/styles` is a physical root location of the copied resources, for example:\n *\n * <img src=\"Grid/export-server-resources.png\" style=\"max-width : 500px\" alt=\"Export server structure with copied resources\" />\n *\n * @extends Core/mixin/InstancePlugin\n *\n * @demo Grid/export\n * @classtype pdfExport\n * @feature\n */\nexport default class PdfExport extends InstancePlugin {\n    static get $name() {\n        return 'PdfExport';\n    }\n\n    static get configurable() {\n        return {\n            dialogClass  : ExportDialog,\n            /**\n             * URL of the print server.\n             * @config {String}\n             */\n            exportServer : undefined,\n\n            /**\n             * Returns the instantiated export dialog widget as configured by {@link #config-exportDialog}\n             * @member {Grid.view.export.ExportDialog} exportDialog\n             */\n            /**\n             * A config object to apply to the {@link Grid.view.export.ExportDialog} widget.\n             * @config {ExportDialogConfig}\n             */\n            exportDialog : {\n                value : true,\n\n                $config : ['lazy']\n            },\n\n            /**\n             * Name of the exported file.\n             * @config {String}\n             */\n            fileName : null,\n\n            /**\n             * Format of the exported file, either `pdf` or `png`.\n             * @config {'pdf'|'png'}\n             * @default\n             * @category Export file config\n             */\n            fileFormat : 'pdf',\n\n            /**\n             * Export server will navigate to this url first and then will change page content to whatever client sent.\n             * This option is useful with react dev server, which uses a strict CORS policy.\n             * @config {String}\n             */\n            clientURL : null,\n\n            /**\n             * Export paper format. Available options are A1...A5, Legal, Letter.\n             * @config {'A1'|'A2'|'A3'|'A4'|'A5'|'Legal'|'Letter'}\n             * @default\n             * @category Export file config\n             */\n            paperFormat : 'A4',\n\n            /**\n             * Orientation. Options are `portrait` and `landscape`.\n             * @config {'portrait'|'landscape'}\n             * @default\n             * @category Export file config\n             */\n            orientation : 'portrait',\n\n            /**\n             * Specifies which rows to export. `all` for complete set of rows, `visible` for only rows currently visible.\n             * @config {'all'|'visible'}\n             * @category Export file config\n             */\n            rowsRange : 'all',\n\n            /**\n             * Set to true to align row top to the page top on every exported page. Only applied to multipage export.\n             * @config {Boolean}\n             * @default\n             */\n            alignRows : false,\n\n            /**\n             * Set to true to show column headers on every page. This will also set {@link #config-alignRows} to true.\n             * Only applies to MultiPageVertical exporter.\n             * @config {Boolean}\n             * @default\n             */\n            repeatHeader : false,\n\n            /**\n             * By default, subGrid width is changed to fit all exported columns. To keep certain subGrid size specify it\n             * in the following form:\n             * ```javascript\n             * keepRegionSizes : {\n             *     locked : true\n             * }\n             * ```\n             * @config {Object<String,Boolean>}\n             * @default\n             */\n            keepRegionSizes : null,\n\n            /**\n             * When exporting large views (hundreds of pages) stringified HTML may exceed browser or server request\n             * length limit. This config allows to specify how many pages to send to server in one request.\n             * @config {Number}\n             * @default\n             * @private\n             */\n            pagesPerRequest : 0,\n\n            /**\n             * Config for exporter.\n             * @config {Object}\n             * @private\n             */\n            exporterConfig : null,\n\n            /**\n             * Type of the exporter to use. Should be one of the configured {@link #config-exporters}\n             * @config {String}\n             * @default\n             */\n            exporterType : 'singlepage',\n\n            /**\n             * List of exporter classes to use in export feature\n             * @config {Grid.feature.export.exporter.Exporter[]}\n             * @default\n             */\n            exporters : [SinglePageExporter, MultiPageExporter, MultiPageVerticalExporter],\n\n            /**\n             * `True` to replace all linked CSS files URLs to absolute before passing HTML to the server.\n             * When passing a string the current origin of the CSS files URLS will be replaced by the passed origin.\n             *\n             * For example: css files pointing to /app.css will be translated from current origin to {translateURLsToAbsolute}/app.css\n             * @config {Boolean|String}\n             * @default\n             */\n            translateURLsToAbsolute : true,\n\n            /**\n             * When true links are converted to absolute by combining current window location (with replaced origin) with\n             * resource link.\n             * When false links are converted by combining new origin with resource link (for angular)\n             * @config {Boolean}\n             * @default\n             */\n            keepPathName : true,\n\n            /**\n             * When true, page will attempt to download generated file.\n             * @config {Boolean}\n             * @default\n             */\n            openAfterExport : true,\n\n            /**\n             * Set to true to receive binary file from the server instead of download link.\n             * @config {Boolean}\n             * @default\n             */\n            sendAsBinary : false,\n\n            /**\n             * False to open in the current tab, true - in a new tab\n             * @config {Boolean}\n             * @default\n             */\n            openInNewTab : false,\n\n            /**\n             * A template function used to generate a page header. It is passed an object with ´currentPage´ and `totalPages´ properties.\n             *\n             * ```javascript\n             * let grid = new Grid({\n             *     appendTo   : 'container',\n             *     features : {\n             *         pdfExport : {\n             *             exportServer : 'http://localhost:8080/',\n             *             headerTpl : ({ currentPage, totalPages }) => `\n             *                 <div class=\"demo-export-header\">\n             *                     <img src=\"coolcorp-logo.png\"/>\n             *                     <dl>\n             *                         <dt>Date: ${DateHelper.format(new Date(), 'll LT')}</dt>\n             *                         <dd>${totalPages ? `Page: ${currentPage + 1}/${totalPages}` : ''}</dd>\n             *                     </dl>\n             *                 </div>`\n             *          }\n             *     }\n             * });\n             * ```\n             * @config {Function}\n             */\n            headerTpl : null,\n\n            /**\n             * A template function used to generate a page footer. It is passed an object with ´currentPage´ and `totalPages´ properties.\n             *\n             * ```javascript\n             * let grid = new Grid({\n             *      appendTo   : 'container',\n             *      features : {\n             *          pdfExport : {\n             *              exportServer : 'http://localhost:8080/',\n             *              footerTpl    : () => '<div class=\"demo-export-footer\"><h3>© 2020 CoolCorp Inc</h3></div>'\n             *          }\n             *      }\n             * });\n             * ```\n             * @config {Function}\n             */\n            footerTpl : null,\n\n            /**\n             * An object containing the Fetch options to pass to the export server request. Use this to control if\n             * credentials are sent and other options, read more at\n             * [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch).\n             * @config {FetchOptions}\n             */\n            fetchOptions : null,\n\n            /**\n             * A message to be shown when Export feature is performing export.\n             * @config {String}\n             * @default \"Generating pages...\"\n             */\n            exportMask : 'L{Generating pages}',\n\n            /**\n             * A message to be shown when export is almost done.\n             * @config {String}\n             * @default \"Waiting for response from server...\"\n             */\n            exportProgressMask : 'L{Waiting for response from server}',\n\n            /**\n             * Set to false to not show Toast message on export error.\n             * @config {Boolean}\n             * @default\n             */\n            showErrorToast : true,\n\n            localizableProperties : ['exportMask', 'exportProgressMask'],\n\n            /**\n             * This method accepts all stylesheets (link and style tags) which are supposed to be put on the page. Use\n             * this hook method to filter or modify them.\n             *\n             * ```javascript\n             * new Grid({\n             *     features: {\n             *         pdfExport: {\n             *             // filter out inline styles and bootstrap.css\n             *             filterStyles: styles => styles.filter(item => !/(link|bootstrap.css)/.test(item))\n             *         }\n             *     }\n             * });\n             * ```\n             * @param {String[]} styles\n             * @returns {String[]} List of stylesheets to put on the exported page\n             */\n            filterStyles : styles => styles,\n\n            /**\n             * Enables direct rendering of the component content which significantly improves performance. To enable\n             * old export mode set this flag to false.\n             * @config {Boolean}\n             * @default\n             */\n            enableDirectRendering : true\n        };\n    }\n\n    updateEnableDirectRendering(value) {\n        if (!value) {\n            VersionHelper.deprecate('Grid', '6.0.0', 'Indirect rendering is deprecated');\n        }\n    }\n\n    doDestroy() {\n        this.exportDialog?.destroy();\n\n        this.exportersMap.forEach(exporter => exporter.destroy());\n\n        super.doDestroy();\n    }\n\n    /**\n     * When export is started from GUI ({@link Grid.view.export.ExportDialog}), export promise can be accessed via\n     * this property.\n     * @property {Promise|null}\n     */\n    get currentExportPromise() {\n        return this._currentExportPromise;\n    }\n\n    set currentExportPromise(value) {\n        this._currentExportPromise = value;\n    }\n\n    get exportersMap() {\n        return this._exportersMap || (this._exportersMap = new Map());\n    }\n\n    getExporter(config = {}) {\n        const\n            me               = this,\n            { exportersMap } = me,\n            { type }         = config;\n\n        let exporter;\n\n        if (exportersMap.has(type)) {\n            exporter = exportersMap.get(type);\n\n            Object.assign(exporter, config);\n        }\n        else {\n            const exporterClass = this.exporters.find(cls => cls.type === type);\n\n            if (!exporterClass) {\n                throw new Error(`Exporter type ${type} is not found. Make sure you've configured it`);\n            }\n\n            config = ObjectHelper.clone(config);\n            delete config.type;\n\n            exporter = new exporterClass(config);\n\n            exporter.relayAll(me);\n\n            exportersMap.set(type, exporter);\n        }\n\n        return exporter;\n    }\n\n    buildRequest(pages, config) {\n        return {\n            html        : JSON.stringify(pages),\n            fileFormat  : config.fileFormat,\n            format      : config.paperFormat,\n            orientation : config.orientation\n        };\n    }\n\n    buildExportConfig(config = {}) {\n        const\n            me = this,\n            {\n                client,\n                exportServer,\n                clientURL,\n                fileFormat,\n                fileName,\n                paperFormat,\n                rowsRange,\n                alignRows,\n                repeatHeader,\n                keepRegionSizes,\n                orientation,\n                translateURLsToAbsolute,\n                keepPathName,\n                sendAsBinary,\n                headerTpl,\n                footerTpl,\n                filterStyles,\n                enableDirectRendering\n            }  = me;\n\n        if (!config.columns) {\n            config.columns = client.columns.visibleColumns.filter(column => column.exportable).map(column => column.id);\n        }\n\n        const result = ObjectHelper.assign({\n            client,\n            exportServer,\n            clientURL,\n            fileFormat,\n            paperFormat,\n            rowsRange,\n            alignRows,\n            repeatHeader,\n            keepRegionSizes,\n            orientation,\n            translateURLsToAbsolute,\n            keepPathName,\n            sendAsBinary,\n            headerTpl,\n            footerTpl,\n            enableDirectRendering,\n            exporterType : me.exporterType,\n            fileName     : fileName || client.$$name\n        }, config);\n\n        // slice columns array to not modify it during export\n        result.columns = config.columns.slice();\n\n        // Only vertical exporter is supported\n        if (result.exporterType !== 'multipagevertical') {\n            result.repeatHeader = false;\n        }\n\n        // Align rows by default\n        if (!('alignRows' in config) && config.repeatHeader) {\n            result.alignRows = true;\n        }\n\n        // Only change this setting if it is default (false) and not provided directly in config\n        if (!('keepRegionSizes' in config) && !result.keepRegionSizes) {\n            const\n                collapsed       = [],\n                keepRegionSizes = {};\n\n            // If there's at least one collapsed region - lock other region sizes\n            client.eachSubGrid(s => s.collapsed && collapsed.push(s.region));\n\n            if (collapsed.length) {\n                client.eachSubGrid(s => {\n                    if (!collapsed.includes(s.region)) {\n                        keepRegionSizes[s.region] = true;\n                    }\n                });\n\n                result.keepRegionSizes = keepRegionSizes;\n            }\n        }\n\n        result.exporterConfig = ObjectHelper.assign({\n            type                    : result.exporterType,\n            translateURLsToAbsolute : result.translateURLsToAbsolute,\n            keepPathName            : result.keepPathName,\n            filterStyles\n        }, result.exporterConfig || {});\n\n        delete result.exporterType;\n        delete result.translateURLsToAbsolute;\n        delete result.keepPathName;\n\n        return result;\n    }\n\n    /**\n     * Starts the export process. Accepts a config object which overrides any default configs.\n     * **NOTE**. Component should not be interacted with when export is in progress\n     *\n     * @param {Object} config\n     * @param {String[]} config.columns (required) List of column ids to export. E.g.\n     *\n     * ```javascript\n     * grid.features.pdfExport.export({ columns : grid.columns.map(c => c.id) })\n     * ```\n     * @returns {Promise} Object of the following structure\n     * ```\n     * {\n     *     response // Response instance\n     * }\n     * ```\n     */\n    async export(config = {}) {\n        const\n            me = this,\n            {\n                client,\n                pagesPerRequest\n            }  = me;\n\n        config = me.buildExportConfig(config);\n\n        let result;\n\n        /**\n         * Fires on the owning Grid before export started. Return `false` to cancel the export.\n         * @event beforePdfExport\n         * @preventable\n         * @on-owner\n         * @param {Object} config Export config\n         */\n        if (client.trigger('beforePdfExport', { config }) !== false) {\n            client.isExporting = true;\n\n            // This mask should be always visible to protect grid from changes even if the mask message is not visible\n            // due to the export dialog which is rendered above the grid's mask. The dialog has its own mask which shares the export message.\n            client.mask(me.exportMask);\n\n            try {\n                const exporter = me.getExporter(config.exporterConfig);\n\n                if (pagesPerRequest === 0) {\n                    const pages = await exporter.export(config);\n\n                    if (me.isDestroying) {\n                        return;\n                    }\n\n                    // Hide dialog\n                    me.exportDialog?.close();\n\n                    // We can unmask early\n                    client.unmask();\n\n                    /**\n                     * Fires when export progress changes\n                     * @event exportStep\n                     * @param {Number} progress Current progress, 0-100\n                     * @param {String} text Optional text to show\n                     */\n                    me.trigger('exportStep', { progress : 90, text : me.exportProgressMask, contentGenerated : true });\n\n                    const responsePromise = me.receiveExportContent(pages, config);\n\n                    // Show toast message indicating we're waiting for the server response\n                    me.toast = me.showLoadingToast(responsePromise);\n\n                    const response = await responsePromise;\n\n                    result = { response };\n\n                    await me.processExportContent(response, config);\n                }\n            }\n            catch (error) {\n                if (error instanceof Response) {\n                    result = { response : error };\n                }\n                else {\n                    result = { error };\n                }\n\n                throw error;\n            }\n            finally {\n                if (me.toast && !me.toast.isDestroying) {\n                    // Hide would also destroy the toast\n                    me.toast.hide();\n                }\n\n                if (!me.isDestroying) {\n                    // Close dialog on exception\n                    me.exportDialog?.close();\n                    client.unmask();\n\n                    if (me.showErrorToast) {\n                        // Do not show warning if user has cancelled request\n                        if (result.error) {\n                            if (result.error.name !== 'AbortError') {\n                                Toast.show({\n                                    html        : me.L('L{Export failed}'),\n                                    rootElement : me.rootElement\n                                });\n                            }\n                        }\n                        else if (!result.response.ok) {\n                            Toast.show({\n                                html        : me.L('L{Server error}'),\n                                rootElement : me.rootElement\n                            });\n                        }\n                    }\n\n                    /**\n                     * Fires on the owning Grid when export has finished\n                     * @event pdfExport\n                     * @on-owner\n                     * @param {Response} [response] Optional response, if received\n                     * @param {Error} [error] Optional error, if exception occurred\n                     */\n                    client.trigger('pdfExport', result);\n\n                    client.isExporting = false;\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Sends request to the export server and returns Response instance. This promise can be cancelled by the user\n     * by clicking on the toast message. When the user clicks on the toast, `abort` method is called on the promise\n     * returned by this method. If you override this method you can implement `abort` method like in the snippet\n     * below to cancel the request.\n     *\n     * ```javascript\n     * class MyPdfExport extends PdfExport {\n     *     receiveExportContent(pages, config) {\n     *         let controller;\n     *\n     *         const promise = new Promise(resolve => {\n     *             controller = new AbortController();\n     *             const signal = controller.signal;\n     *\n     *             fetch(url, { signal })\n     *                 .then(response => resolve(response));\n     *         });\n     *\n     *         // This method will be called when user clicks on the toast message to cancel the request\n     *         promise.abort = () => controller.abort();\n     *\n     *         return promise;\n     *     }\n     * }\n     *\n     * const grid = new Grid({ features: { myPdfExport : {...} } });\n     *\n     * grid.features.myPdfExport.export().catch(e => {\n     *     // In case of aborted request do nothing\n     *     if (e.name !== 'AbortError') {\n     *         // handle other exceptions\n     *     }\n     * });\n     * ```\n     * @param {Object[]} pages Array of exported pages.\n     * @param {String} pages[].html pages HTML of the exported page.\n     * @param {Object} config Export config\n     * @param {String} config.exportServer URL of the export server.\n     * @param {String} config.orientation Page orientation. portrait/landscape.\n     * @param {String} config.paperFormat Paper format as supported by puppeteer. A4/A3/...\n     * @param {String} config.fileFormat File format. PDF/PNG.\n     * @param {String} config.fileName Name to use for the saved file.\n     * @param {String} config.clientURL URL to navigate before export. See {@link #config-clientURL}.\n     * @param {String} config.sendAsBinary Tells server whether to return binary file instead of download link.\n     * @returns {Promise} Returns Response instance\n     */\n    receiveExportContent(pages, config) {\n        return AjaxHelper.fetch(\n            config.exportServer,\n            Object.assign({\n                method      : 'POST',\n                credentials : 'omit',\n                headers     : { 'Content-Type' : 'application/json' },\n                body        : JSON.stringify({\n                    html         : pages,\n                    orientation  : config.orientation,\n                    format       : config.paperFormat,\n                    fileFormat   : config.fileFormat,\n                    fileName     : config.fileName,\n                    clientURL    : config.clientURL,\n                    sendAsBinary : config.sendAsBinary\n                })\n            }, this.fetchOptions)\n        );\n    }\n\n    /**\n     * Handles output of the {@link #function-receiveExportContent}. Server response can be of two different types depending\n     * on {@link #config-sendAsBinary} config:\n     * - `application/json` In this case JSON response contains url of the file to download\n     * - `application/octet-stream` In this case response contains stream of file binary data\n     *\n     * If {@link #config-openAfterExport} is true, this method will try to download content.\n     * @param {Response} response\n     * @param {Object} config Export config\n     * @param {String} config.exportServer URL of the export server.\n     * @param {String} config.orientation Page orientation. portrait/landscape.\n     * @param {String} config.paperFormat Paper format as supported by puppeteer. A4/A3/...\n     * @param {String} config.fileFormat File format. PDF/PNG.\n     * @param {String} config.fileName Name to use for the saved file.\n     * @param {String} config.clientURL URL to navigate before export. See {@link #config-clientURL}.\n     * @param {String} config.sendAsBinary Tells server whether to return binary file instead of download link. See {@link #config-sendAsBinary}\n     */\n    async processExportContent(response, config) {\n        const me = this;\n\n        if (response.ok && me.openAfterExport) {\n            // Clone Response to not block response stream\n            response = response.clone();\n\n            const contentType = response.headers.get('content-type');\n\n            if (contentType.match(/application\\/octet-stream/)) {\n                const\n                    MIMEType  = FileMIMEType[config.fileFormat],\n                    objectURL = await me.responseBlobToObjectURL(response, MIMEType),\n                    link      = me.getDownloadLink(config.fileName, objectURL);\n\n                link.click();\n            }\n            else if (contentType.match(/application\\/json/)) {\n                const responseJSON = await response.json();\n\n                if (responseJSON.success) {\n                    const link = me.getDownloadLink(config.fileName, responseJSON.url);\n\n                    link.click();\n                }\n                else {\n                    Toast.show({\n                        html        : responseJSON.msg,\n                        rootElement : this.rootElement\n                    });\n                }\n            }\n        }\n    }\n\n    /**\n     * Creates object URL from response content with given mimeType\n     * @param {Response} response Response instance\n     * @param {String} mimeType\n     * @returns {Promise} Returns string object URL\n     * @private\n     */\n    async responseBlobToObjectURL(response, mimeType) {\n        const blob = await response.blob();\n\n        return URL.createObjectURL(blob.slice(0, blob.size, mimeType));\n    }\n\n    /**\n     * Creates link to download the file.\n     * @param {String} name File name\n     * @param {String} href URL of the resource\n     * @returns {HTMLElement} HTMLAnchorElement\n     * @private\n     */\n    getDownloadLink(name, href) {\n        const link = document.createElement('a');\n\n        link.download = name;\n        link.href = href;\n\n        if (this.openInNewTab) {\n            link.target = '_blank';\n        }\n\n        return link;\n    }\n\n    get defaultExportDialogConfig() {\n        return ObjectHelper.copyProperties({}, this, [\n            'client',\n            'exporters',\n            'exporterType',\n            'orientation',\n            'fileFormat',\n            'paperFormat',\n            'alignRows',\n            'rowsRange',\n            'repeatHeader'\n        ]);\n    }\n\n    changeExportDialog(exportDialog, oldExportDialog) {\n        const me = this;\n\n        oldExportDialog?.destroy();\n\n        if (exportDialog) {\n            const config = me.dialogClass.mergeConfigs({\n                rootElement : me.rootElement,\n                client      : me.client,\n                items       : {\n                    rowsRangeField : {\n                        value : me.rowsRange\n                    },\n\n                    exporterTypeField : {\n                        value : me.exporterType\n                    },\n\n                    orientationField : {\n                        value : me.orientation\n                    },\n\n                    paperFormatField : {\n                        value : me.paperFormat\n                    },\n\n                    repeatHeaderField : {\n                        value : me.repeatHeader\n                    },\n\n                    fileFormatField : {\n                        value : me.fileFormat\n                    },\n\n                    alignRowsField : {\n                        checked : me.alignRows\n                    }\n                }\n            }, me.defaultExportDialogConfig, exportDialog);\n\n            exportDialog = me.dialogClass.new(config);\n\n            exportDialog.ion({\n                export  : me.onExportButtonClick,\n                thisObj : me\n            });\n        }\n\n        return exportDialog;\n    }\n\n    /**\n     * Shows {@link Grid.view.export.ExportDialog export dialog}\n     */\n    async showExportDialog() {\n        return this.exportDialog.show();\n    }\n\n    onExportButtonClick({ values }) {\n        const\n            me         = this,\n            dialogMask = me.exportDialog.mask({\n                progress    : 0,\n                maxProgress : 100,\n                text        : me.exportMask\n            });\n\n        const detacher = me.ion({\n            exportstep({ progress, text, contentGenerated }) {\n                if (contentGenerated) {\n                    me.exportDialog.unmask();\n                    detacher();\n                }\n                else {\n                    dialogMask.progress = progress;\n\n                    if (text != null) {\n                        dialogMask.text = text;\n                    }\n                }\n            }\n        });\n\n        me.currentExportPromise = me.export(values);\n\n        // Clear current export promise\n        me.currentExportPromise.catch(() => {}).finally(() => {\n            detacher();\n            me.exportDialog?.unmask();\n            me.currentExportPromise = null;\n        });\n    }\n\n    showLoadingToast(exportPromise) {\n        const toast = Toast.show({\n            timeout      : 0,\n            showProgress : false,\n            rootElement  : this.rootElement,\n            html         : `\n    <span class=\"b-mask-icon b-icon b-icon-spinner\"></span>\n    <span>${this.L('L{Waiting for response from server}')}</span>\n    <button class=\"b-button\">${this.L('L{Click to abort}')}</button>`\n        });\n\n        EventHelper.on({\n            element : toast.element,\n            click() {\n                exportPromise.abort?.();\n            }\n        });\n\n        return toast;\n    }\n}\n\nGridFeatureManager.registerFeature(PdfExport, false, 'Grid');\n\n// Format expected by export server\n// const pageFormat = {\n//     html       : '',\n//     column     : 1,\n//     number     : 1,\n//     row        : 1,\n//     rowsHeight : 1\n// };\n//\n// const format = {\n//     fileFormat  : 'pdf',\n//     format      : 'A4',\n//     orientation : 'portrait',\n//     range       : 'complete',\n//     html        : { array : JSON.stringify(pageFormat) }\n// };\n"],"names":["Target","Base","$name","generateHtml","column","records","cls","groupRecord","groupField","groupValue","store","this","summaries","sum","renderer","summaryRenderer","html","forEach","config","type","field","max","min","average","length","reduce","record","seed","valueCls","labelHtml","label","summaryHtml","valueHtml","String","includes","Summary","SummaryFormatter","InstancePlugin","configurable","selectedOnly","hideFooters","pluginConfig","chain","construct","grid","super","bindStore","detachListeners","ion","name","change","thisObj","doDestroy","doDisable","disable","client","element","classList","add","updateSummaries","remove","eachSubGrid","subGrid","scrollable","syncPartners","renderRows","me","cells","DomHelper","children","selectedRecords","isFiltered","storage","values","allRecords","filter","r","isSpecialRow","isSelected","columns","_column$summaries","initialSeed","Object","assign","cellElement","dataset","get","sync","firstElementChild","innerHTML","onStoreChange","action","changes","shouldUpdate","disabled","keys","some","colField","Boolean","updateSelectedOnly","value","selectionChange","refresh","featureClass","_$name","GridFeatureManager","registerFeature","ExportRowsCombo","Combo","defaultConfig","editable","buildItems","id","RowsRange","all","text","L","visible","initClass","ExportOrientationCombo","Orientation","portrait","landscape","buildComboItems","obj","fn","x","map","key","ExportDialog","Popup","autoShow","autoClose","closable","centered","autoSelectVisibleColumns","hidePNGMultipageOption","title","maxHeight","overflowY","defaults","localeClass","items","columnsField","valueField","displayField","multiSelect","weight","rowsRangeField","exporterTypeField","dialog","parent","exporters","exporter","optionalL","onChange","owner","widgetMap","alignRowsField","hidden","repeatHeaderField","checked","fileFormatField","oldValue","exporterField","find","FileFormat","png","_previousDisabled","_previousValue","paperFormatField","orientationField","bbar","exportButton","color","onClick","cancelButton","Error","columnsStore","isLeaf","exportable","excludeCollapsedRecords","applyInitialValues","LocaleManager","locale","prio","width","labelWidth","toUpperCase","PaperFormat","onBeforeShow","_super$onBeforeShow","query","c","call","arguments","onLocaleChange","eachWidget","widget","Field","onExportClick","trigger","onCancelClick","hide","fieldRe","result","test","ref","replace","Checkbox","MultiPageExporter","Exporter","exportingPageText","stateNextPage","rowsRange","enableDirectRendering","exportMeta","currentPage","verticalPosition","lastExportedRowBottom","verticalPages","horizontalPosition","currentPageTopMargin","lastTop","lastRowIndex","rowManager","firstVisibleRow","dataIndex","lastRowDataIndex","scrollRowIntoView","firstVisibleDataIndex","block","prepareComponent","headerTpl","footerTpl","alignRows","paperFormat","isPortrait","orientation","paperWidth","height","paperHeight","pageWidth","inchToPx","pageHeight","onlyVisibleRows","horizontalPages","Math","ceil","totalWidth","contentHeight","measureElement","totalPages","totalHeight","totalRows","count","getVisibleRowsCount","headerHeight","footerHeight","bodyHeight","scrollHeight","rowHeight","rowOffsetHeight","rowsOnFirstPage","floor","rowsPerPage","remainingRows","adjustRowBuffer","restoreComponent","restoreRowBuffer","collectRows","subGrids","rows","onlyVisible","hasMergeCells","hasActiveFeature","remainingHeight","index","findIndex","bottom","y","firstRowIndex","top","lastDataIndex","offset","row","offsetHeight","collectRow","subGridName","mergedCells","querySelectorAll","mergedCellsHtml","mergedCell","push","outerHTML","lastRow","exactGridHeight","footerContainer","headerContainer","onRowsCollected","slice","scrollableTopMargin","detacher","offsetRows","fakeRow","previousTop","render","getAt","translate","renderMergedCells","buildPage","header","footer","getVirtualScrollerHeight","prepareHTML","buildPageHtml","prepareExportElement","placeHolder","placeHolderText","contentHtml","join","querySelector","style","marginTop","prototype","pagesExtractor","async","stylesheets","progress","round","styles","pageTpl","MultiPageVerticalExporter","processedRows","size","estimateTotalPages","repeatHeader","scale","getScaleValue","bodyElement","initialScroll","rowsHeight","firstRow","lastVisibleRow","finishRowIndex","Set","clientHeaderHeight","nextPageTop","gridHeight","SinglePageExporter","localize","centerContentHorizontally","positionRows","currentTop","lastProcessedRowIndex","firstNewRowIndex","lastNewRowIndex","fromIndex","toIndex","i","totalClientHeight","widthScale","heightScale","BrowserHelper","isIE11","PdfExport","dialogClass","exportServer","undefined","exportDialog","$config","fileName","fileFormat","clientURL","keepRegionSizes","pagesPerRequest","exporterConfig","exporterType","translateURLsToAbsolute","keepPathName","openAfterExport","sendAsBinary","openInNewTab","fetchOptions","exportMask","exportProgressMask","showErrorToast","localizableProperties","filterStyles","updateEnableDirectRendering","VersionHelper","deprecate","_this$exportDialog","destroy","exportersMap","currentExportPromise","_currentExportPromise","_exportersMap","Map","getExporter","has","exporterClass","ObjectHelper","clone","relayAll","set","buildRequest","pages","JSON","stringify","format","buildExportConfig","visibleColumns","$$name","collapsed","s","region","export","isExporting","mask","_me$exportDialog","isDestroying","close","unmask","contentGenerated","responsePromise","receiveExportContent","toast","showLoadingToast","response","processExportContent","error","Response","_me$exportDialog2","Toast","show","rootElement","ok","AjaxHelper","fetch","method","credentials","headers","body","contentType","match","MIMEType","FileMIMEType","objectURL","responseBlobToObjectURL","getDownloadLink","click","responseJSON","json","success","url","msg","mimeType","blob","URL","createObjectURL","href","link","document","createElement","download","target","defaultExportDialogConfig","copyProperties","changeExportDialog","oldExportDialog","mergeConfigs","new","onExportButtonClick","showExportDialog","dialogMask","maxProgress","exportstep","catch","finally","_me$exportDialog3","exportPromise","timeout","showProgress","EventHelper","on","_exportPromise$abort","abort"],"mappings":"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"}