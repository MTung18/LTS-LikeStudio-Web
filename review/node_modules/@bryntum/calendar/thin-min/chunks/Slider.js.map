{"version":3,"file":"Slider.js","sources":["../../../../Core/lib/Core/widget/Slider.js"],"sourcesContent":["import Widget from './Widget.js';\nimport Tooltip from './Tooltip.js';\nimport Rectangle from '../helper/util/Rectangle.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\n\n/**\n * @module Core/widget/Slider\n */\nconst arrowKeys = {\n    ArrowUp    : 1,\n    ArrowDown  : 1,\n    ArrowLeft  : 1,\n    ArrowRight : 1\n};\n\n/**\n * Wraps native &lt;input type=\"range\"&gt;\n *\n * @extends Core/widget/Widget\n *\n * @example\n * let slider = new Slider({\n *   text: 'Choose value'\n * });\n *\n * @classType slider\n * @inlineexample Core/widget/Slider.js\n * @widget\n */\nexport default class Slider extends Widget {\n    //region Config\n\n    static get $name() {\n        return 'Slider';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'slider';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Get/set text. Appends value if Slider.showValue is true\n             * @member {String} text\n             */\n            /**\n             * Slider label text\n             * @config {String}\n             */\n            text : null,\n\n            /**\n             * Show value in label (appends in () if text is set)\n             * @config {Boolean}\n             * @default\n             */\n            showValue : true,\n\n            /**\n             * Show the slider value in a tooltip\n             * @config {Boolean}\n             * @default\n             */\n            showTooltip : false,\n\n            /**\n             * Get/set min value\n             * @member {Number} min\n             */\n            /**\n             * Minimum value\n             * @config {Number}\n             * @default\n             */\n            min : 0,\n\n            /**\n             * Get/set max value\n             * @member {Number} max\n             */\n            /**\n             * Maximum value\n             * @config {Number}\n             * @default\n             */\n            max : 100,\n\n            /**\n             * Get/set step size\n             * @member {Number} step\n             */\n            /**\n             * Step size\n             * @config {Number}\n             * @default\n             */\n            step : 1,\n\n            /**\n             * Get/set value\n             * @member {Number} value\n             */\n            /**\n             * Initial value\n             * @config {Number}\n             */\n            value : 50,\n\n            /**\n             * Unit to display next to the value, when configured with `showValue : true`\n             * @config {String}\n             * @default\n             */\n            unit : null,\n\n            // The value is set in the Light theme. The Material theme will have different value.\n            thumbSize : 20,\n\n            tooltip : {\n                $config : ['lazy', 'nullify'],\n                value   : {\n                    type     : 'tooltip',\n                    align    : 'b-t',\n                    anchor   : false, // No anchor displayed since thumbSize is different for different themes\n                    axisLock : true\n                }\n            },\n\n            localizableProperties : ['text'],\n\n            /**\n             * By default, the {@link #event-change} event is fired when a change gesture is completed, ie: on\n             * the mouse up gesture of a drag.\n             *\n             * Configure this as `true` to fire the {@link #event-change} event as the value changes *during* a drag.\n             * @prp {Boolean}\n             */\n            triggerChangeOnInput : null,\n\n            defaultBindProperty : 'value'\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    compose() {\n        const\n            { id, min, max, showValue, step, text, value, unit = '', disabled } = this,\n            inputId = `${id}-input`,\n            hasText = Boolean(text || showValue);\n\n        return {\n            class : {\n                'b-has-label' : hasText,\n                'b-text'      : hasText,\n                'b-disabled'  : disabled\n            },\n\n            children : {\n                input : {\n                    tag       : 'input',\n                    type      : 'range',\n                    id        : inputId,\n                    reference : 'input',\n                    disabled  : disabled,\n\n                    min,\n                    max,\n                    step,\n                    value,\n                    listeners : {\n                        input     : 'onInternalInput',\n                        change    : 'onInternalChange',\n                        mouseover : 'onInternalMouseOver',\n                        mouseout  : 'onInternalMouseOut'\n                    }\n                },\n\n                label : {\n                    tag  : 'label',\n                    for  : inputId,\n                    html : showValue ? (text ? `${text} (${value}${unit})` : value + unit) : text\n                }\n            }\n        };\n    }\n\n    get focusElement() {\n        return this.input;\n    }\n\n    get percentProgress() {\n        return (this.value - this.min) / (this.max - this.min) * 100;\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Fired while slider thumb is being dragged.\n     * @event input\n     * @param {Core.widget.Slider} source The slider\n     * @param {String} value The value\n     */\n\n    /**\n     * Fired after the slider value changes (on mouse up following slider interaction).\n     * @event change\n     * @param {String} value The value\n     * @param {Boolean} userAction Triggered by user taking an action (`true`) or by setting a value (`false`)\n     * @param {Core.widget.Slider} source The slider\n     */\n\n    /* break from doc comment */\n\n    onInternalKeyDown(e) {\n        // Contain arrow keys to be processed by the <input type=\"range\">, do not allow them to bubble\n        // up to by any owning container.\n        if (!this.readOnly && arrowKeys[e.key]) {\n            e.stopImmediatePropagation();\n        }\n    }\n\n    onInternalChange() {\n        this.updateUI();\n        this.triggerChange(true);\n        this.trigger('action', { value : this.value });\n    }\n\n    onInternalInput() {\n        const me = this;\n\n        if (me.readOnly) {\n            // Undo the change if we are readOnly.\n            // readOnly input attribute will not work for non-text fields: https://github.com/w3c/html/issues/89\n            me.input.value = me.value;\n            return;\n        }\n\n        me.value = parseInt(me.input.value, 10);\n\n        me.trigger('input', { value : me.value });\n        if (me.triggerChangeOnInput) {\n            me.triggerChange(me);\n        }\n    }\n\n    onInternalMouseOver() {\n        const\n            me            = this,\n            thumbPosition = me.rtl ? 100 - me.percentProgress : me.percentProgress;\n\n        me.tooltip?.showBy({\n            target : Rectangle.from(me.input).inflate(me.thumbSize / 2, -me.thumbSize / 2),\n            align  : `b-t${Math.round(thumbPosition)}`\n        });\n    }\n\n    onInternalMouseOut() {\n        this.tooltip?.hide();\n    }\n\n    triggerChange(userAction) {\n        this.triggerFieldChange({\n            value : this.value,\n            valid : true,\n            userAction\n        });\n    }\n\n    //endregion\n\n    //region Config Handling\n\n    // max\n    updateMax(max) {\n        const me = this;\n\n        if (me.input && me._value > max) {\n            me.value = max;\n            me.trigger('input', { value : me.value });\n        }\n    }\n\n    // min\n    updateMin(min) {\n        const me = this;\n\n        if (me.input && me._value < min) {\n            me.value = min;\n            me.trigger('input', { value : me.value });\n        }\n    }\n\n    // tooltip\n    changeTooltip(config, existingTooltip) {\n        if (config) {\n            config.owner = this;\n        }\n\n        return this.showTooltip ? Tooltip.reconfigure(existingTooltip, config, {\n            owner    : this,\n            defaults : {\n                forElement : this.input,\n                html       : String(this.value) + (this.unit ?? '')\n            }\n        }) : null;\n    }\n\n    changeValue(value) {\n        const\n            me            = this,\n            { min, step } = me;\n\n        value = Math.min(Math.max(value, min), me.max);\n\n        // Round the passed value so that it is in sync with our steps.\n        // For example, if our min is 10, and our step is 3, then\n        // passing 12 should get 13. Rounding the value directly to the closest\n        // step would fail this requirement.\n        if (value > min) {\n            return min + ObjectHelper.roundTo(value - min, step);\n        }\n        return ObjectHelper.roundTo(value, step);\n    }\n\n    updateValue(value) {\n        const\n            me = this,\n            { input, _tooltip } = me;\n\n        if (_tooltip) {\n            _tooltip.html = me.value + (me.unit ?? '');\n        }\n\n        if (input && input.value !== String(value)) {\n            input.value = value;\n            me.triggerChange(false);\n        }\n\n        me.updateUI();\n    }\n\n    //endregion\n\n    //region Util\n\n    updateUI() {\n        const me = this;\n\n        // Don't measure the UI unless we need to\n        me._tooltip?.isVisible && me._tooltip?.alignTo({\n            target : Rectangle.from(me.input).inflate(me.thumbSize / 2, -me.thumbSize / 2),\n            align  : `b-t${Math.round(me.percentProgress)}`\n        });\n    }\n\n    //endregion\n}\n\n// Register this widget type with its Factory\nSlider.initClass();\n"],"names":["arrowKeys","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","Slider","Widget","$name","type","configurable","text","showValue","showTooltip","min","max","step","value","unit","thumbSize","tooltip","$config","align","anchor","axisLock","localizableProperties","triggerChangeOnInput","defaultBindProperty","compose","id","disabled","this","inputId","hasText","Boolean","class","children","input","tag","reference","listeners","change","mouseover","mouseout","label","for","html","focusElement","percentProgress","onInternalKeyDown","e","readOnly","key","stopImmediatePropagation","onInternalChange","updateUI","triggerChange","trigger","onInternalInput","me","parseInt","onInternalMouseOver","_me$tooltip","thumbPosition","rtl","showBy","target","Rectangle","from","inflate","Math","round","onInternalMouseOut","_this$tooltip","hide","userAction","triggerFieldChange","valid","updateMax","_value","updateMin","changeTooltip","config","existingTooltip","_this$unit","owner","Tooltip","reconfigure","defaults","forElement","String","changeValue","ObjectHelper","roundTo","updateValue","_tooltip","_me$unit","_me$_tooltip","_me$_tooltip2","isVisible","alignTo","initClass","_$name"],"mappings":"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"}