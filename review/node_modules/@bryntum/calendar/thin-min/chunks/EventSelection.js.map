{"version":3,"file":"EventSelection.js","sources":["../../../../Scheduler/lib/Scheduler/crud/AbstractCrudManager.js","../../../../Scheduler/lib/Scheduler/data/CrudManager.js","../../../../Scheduler/lib/Scheduler/eventlayout/PackMixin.js","../../../../Scheduler/lib/Scheduler/view/mixin/Describable.js","../../../../Scheduler/lib/Scheduler/view/mixin/EventSelection.js"],"sourcesContent":["import Base from '../../Core/Base.js';\nimport AbstractCrudManagerMixin from './AbstractCrudManagerMixin.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\n\n/**\n * @module Scheduler/crud/AbstractCrudManager\n */\n\n/**\n * @typedef {Object} CrudManagerStoreDescriptor\n * @property {String} storeId Unique store identifier. Store related requests/responses will be sent under this name.\n * @property {Core.data.Store} store The store itself.\n * @property {String} [phantomIdField] Set this if the store model has a predefined field to keep phantom record identifier.\n * @property {String} [idField] id field name, if it's not specified then class will try to get it from store model.\n * @property {Boolean} [writeAllFields] Set to true to write all fields from modified records\n */\n\n/**\n * This is an abstract class serving as the base for the {@link Scheduler.data.CrudManager} class.\n * It implements basic mechanisms to organize batch communication with a server.\n * Yet it does not contain methods related to _data transfer_ nor _encoding_.\n * These methods are to be provided in sub-classes by consuming the appropriate mixins.\n *\n * For example, this is how the class can be used to implement an JSON encoding system:\n *\n * ```javascript\n * // let's make new CrudManager using AJAX as a transport system and JSON for encoding\n * class MyCrudManager extends JsonEncode(AjaxTransport(AbstractCrudManager)) {\n *\n * }\n * ```\n *\n * ## Data transfer and encoding methods\n *\n * These are methods that must be provided by subclasses of this class:\n *\n * - [#sendRequest](#Scheduler/crud/AbstractCrudManagerMixin#function-sendRequest)\n * - [#cancelRequest](#Scheduler/crud/AbstractCrudManagerMixin#function-cancelRequest)\n * - [#encode](#Scheduler/crud/AbstractCrudManagerMixin#function-encode)\n * - [#decode](#Scheduler/crud/AbstractCrudManagerMixin#function-decode)\n *\n * @extends Core/Base\n * @mixes Scheduler/crud/AbstractCrudManagerMixin\n * @abstract\n */\nexport default class AbstractCrudManager extends Base.mixin(AbstractCrudManagerMixin) {\n    //region Default config\n\n    /**\n     * The server revision stamp.\n     * The _revision stamp_ is a number which should be incremented after each server-side change.\n     * This property reflects the current version of the data retrieved from the server and gets updated after each\n     * {@link Scheduler/crud/AbstractCrudManagerMixin#function-load} and {@link Scheduler/crud/AbstractCrudManagerMixin#function-sync} call.\n     * @property {Number}\n     * @readonly\n     */\n    get revision() {\n        return this.crudRevision;\n    }\n\n    set revision(value) {\n        this.crudRevision = value;\n    }\n\n    /**\n     * Get or set data of {@link #property-crudStores} as a JSON string.\n     *\n     * Get a JSON string:\n     * ```javascript\n     *\n     * const jsonString = scheduler.crudManager.json;\n     *\n     * // returned jsonString:\n     * '{\"eventsData\":[...],\"resourcesData\":[...],...}'\n     *\n     * // object representation of the returned jsonString:\n     * {\n     *     resourcesData    : [...],\n     *     eventsData       : [...],\n     *     assignmentsData  : [...],\n     *     dependenciesData : [...],\n     *     timeRangesData   : [...],\n     *     // data from other stores\n     * }\n     * ```\n     *\n     * Set a JSON string (to populate the CrudManager stores):\n     *\n     * ```javascript\n     * scheduler.crudManager.json = '{\"eventsData\":[...],\"resourcesData\":[...],...}'\n     * ```\n     *\n     * @property {String}\n     */\n    get json() {\n        return StringHelper.safeJsonStringify(this);\n    }\n\n    set json(json) {\n        if (typeof json === 'string') {\n            json = StringHelper.safeJsonParse(json);\n        }\n\n        this.forEachCrudStore(store => {\n            const dataName = `${store.storeId}Data`;\n            if (json[dataName]) {\n                store.data = json[dataName];\n            }\n        });\n    }\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Sets the list of stores controlled by the CRUD manager.\n             *\n             * When adding a store to the CrudManager, make sure the server response format is correct for `load` and `sync` requests.\n             * Learn more in the [Working with data](#Scheduler/guides/data/crud_manager.md#loading-data) guide.\n             *\n             * Store can be provided as in instance, using its `storeId` or as an {@link #typedef-CrudManagerStoreDescriptor}\n             * object.\n             * @config {Core.data.Store[]|String[]|CrudManagerStoreDescriptor[]}\n             */\n            stores : null\n\n            /**\n             * Encodes request to the server.\n             * @function encode\n             * @param {Object} request The request to encode.\n             * @returns {String} The encoded request.\n             * @abstract\n             */\n\n            /**\n             * Decodes response from the server.\n             * @function decode\n             * @param {String} response The response to decode.\n             * @returns {Object} The decoded response.\n             * @abstract\n             */\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    construct(config = {}) {\n        if (config.stores) {\n            config.crudStores = config.stores;\n            delete config.stores;\n        }\n\n        super.construct(config);\n    }\n\n    //endregion\n\n    //region inline data\n\n    /**\n     * Returns the data from all CrudManager `crudStores` in a format that can be consumed by `inlineData`.\n     *\n     * Used by JSON.stringify to correctly convert this CrudManager to json.\n     *\n     * The returned data is identical to what {@link Scheduler/crud/AbstractCrudManager#property-inlineData} contains.\n     *\n     * ```javascript\n     *\n     * const json = scheduler.crudManager.toJSON();\n     *\n     * // json:\n     * {\n     *     eventsData : [...],\n     *     resourcesData : [...],\n     *     dependenciesData : [...],\n     *     assignmentsData : [...],\n     *     timeRangesData : [...],\n     *     resourceTimeRangesData : [...],\n     *     // ... other stores data\n     * }\n     * ```\n     *\n     * Output can be consumed by `inlineData`.\n     *\n     * ```javascript\n     * const json = scheduler.crudManager.toJSON();\n     *\n     * // Plug it back in later\n     * scheduler.crudManager.inlineData = json;\n     * ```\n     *\n     * @function toJSON\n     * @returns {Object}\n     * @category JSON\n     */\n    toJSON() {\n        // Collect data from crudStores\n        const result = {};\n        this.forEachCrudStore((store, storeId) => result[`${storeId}Data`] = store.toJSON());\n        return result;\n    }\n\n    /**\n     * Get or set data of CrudManager stores. The returned data is identical to what\n     * {@link Scheduler/crud/AbstractCrudManager#function-toJSON} returns:\n     *\n     * ```javascript\n     *\n     * const data = scheduler.crudManager.inlineData;\n     *\n     * // data:\n     * {\n     *     eventsData : [...],\n     *     resourcesData : [...],\n     *     dependenciesData : [...],\n     *     assignmentsData : [...],\n     *     timeRangesData : [...],\n     *     resourceTimeRangesData : [...],\n     *     ... other stores data\n     * }\n     *\n     *\n     * // Plug it back in later\n     * scheduler.crudManager.inlineData = data;\n     * ```\n     *\n     * @property {Object}\n     */\n    get inlineData() {\n        return this.toJSON();\n    }\n\n    set inlineData(data) {\n        this.json = data;\n    }\n\n    //endregion\n\n    //region Store collection (add, remove, get & iterate)\n\n    set stores(stores) {\n        if (stores !== this.crudStores) {\n            this.crudStores = stores;\n        }\n    }\n\n    /**\n     * A list of registered stores whose server communication will be collected into a single batch.\n     * Each store is represented by a _store descriptor_.\n     * @member {CrudManagerStoreDescriptor[]} stores\n     */\n    get stores() {\n        return this.crudStores;\n    }\n\n    //endregion\n\n    /**\n     * Returns true if the crud manager is currently loading data\n     * @property {Boolean}\n     * @readonly\n     * @category CRUD\n     */\n    get isLoading() {\n        return this.isCrudManagerLoading;\n    }\n\n    /**\n     * Adds a store to the collection.\n     *\n     *```javascript\n     * // append stores to the end of collection\n     * crudManager.addStore([\n     *     store1,\n     *     // storeId\n     *     'bar',\n     *     // store descriptor\n     *     {\n     *         storeId : 'foo',\n     *         store   : store3\n     *     },\n     *     {\n     *         storeId         : 'bar',\n     *         store           : store4,\n     *         // to write all fields of modified records\n     *         writeAllFields  : true\n     *     }\n     * ]);\n     *```\n     *\n     * **Note:** Order in which stores are kept in the collection is very essential sometimes.\n     * Exactly in this order the loaded data will be put into each store.\n     *\n     * When adding a store to the CrudManager, make sure the server response format is correct for `load` and `sync`\n     * requests. Learn more in the [Working with data](#Scheduler/guides/data/crud_manager.md#loading-data) guide.\n     *\n     * @param {Core.data.Store|String|CrudManagerStoreDescriptor|Core.data.Store[]|String[]|CrudManagerStoreDescriptor[]} store\n     * A store or list of stores. Each store might be specified by its instance, `storeId` or _descriptor_.\n     * @param {Number} [position] The relative position of the store. If `fromStore` is specified the position will be\n     * taken relative to it.\n     * If not specified then store(s) will be appended to the end of collection.\n     * Otherwise, it will be an index in stores collection.\n     *\n     * ```javascript\n     * // insert stores store4, store5 to the start of collection\n     * crudManager.addStore([ store4, store5 ], 0);\n     * ```\n     *\n     * @param {String|Core.data.Store|CrudManagerStoreDescriptor} [fromStore] The store relative to which position\n     * should be calculated. Can be defined as a store identifier, instance or descriptor (the result of\n     * {@link Scheduler/crud/AbstractCrudManagerMixin#function-getStoreDescriptor} call).\n     *\n     * ```javascript\n     * // insert store6 just before a store having storeId equal to 'foo'\n     * crudManager.addStore(store6, 0, 'foo');\n     *\n     * // insert store7 just after store3 store\n     * crudManager.addStore(store7, 1, store3);\n     * ```\n     */\n    addStore(...args) {\n        return this.addCrudStore(...args);\n    }\n\n    removeStore(...args) {\n        return this.removeCrudStore(...args);\n    }\n\n    getStore(...args) {\n        return this.getCrudStore(...args);\n    }\n\n    hasChanges(...args) {\n        return this.crudStoreHasChanges(...args);\n    }\n\n    loadData(...args) {\n        return this.loadCrudManagerData(...args);\n    }\n}\n","import ResourceStore from './ResourceStore.js';\nimport EventStore from './EventStore.js';\nimport AssignmentStore from './AssignmentStore.js';\nimport DependencyStore from './DependencyStore.js';\nimport Store from '../../Core/data/Store.js';\nimport ProjectCrudManager from './mixin/ProjectCrudManager.js';\nimport AbstractCrudManager from '../crud/AbstractCrudManager.js';\nimport AjaxTransport from '../crud/transport/AjaxTransport.js';\nimport JsonEncoder from '../crud/encoder/JsonEncoder.js';\nimport ProjectModel from '../model/ProjectModel.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\n\n/**\n * @module Scheduler/data/CrudManager\n */\n\n/**\n * The Crud Manager (or \"CM\") is a class implementing centralized loading and saving of data in multiple stores.\n * Loading the stores and saving all changes is done using a single request. The stores managed by CRUD manager should\n * not be configured with their own CRUD URLs or use {@link Core/data/AjaxStore#config-autoLoad}/{@link Core/data/AjaxStore#config-autoCommit}.\n *\n * This class uses JSON as its data encoding format.\n *\n * ## Scheduler stores\n *\n * The class supports Scheduler specific stores (namely: resource, event, assignment and dependency stores).\n * For these stores, the CM has separate configs ({@link #config-resourceStore}, {@link #config-eventStore},\n * {@link #config-assignmentStore}) to register them.\n *\n * ```javascript\n * const crudManager = new CrudManager({\n *     autoLoad        : true,\n *     resourceStore   : resourceStore,\n *     eventStore      : eventStore,\n *     assignmentStore : assignmentStore,\n *     transport       : {\n *         load : {\n *             url : 'php/read.php'\n *         },\n *         sync : {\n *             url : 'php/save.php'\n *         }\n *     }\n * });\n * ```\n *\n * ## AJAX request configuration\n *\n * To configure AJAX request parameters please take a look at the\n * {@link Scheduler/crud/transport/AjaxTransport} docs.\n *\n * ```javascript\n * const crudManager = new CrudManager({\n *     autoLoad        : true,\n *     resourceStore,\n *     eventStore,\n *     assignmentStore,\n *     transport       : {\n *         load    : {\n *             url         : 'php/read.php',\n *             // use GET request\n *             method      : 'GET',\n *             // pass request JSON in \"rq\" parameter\n *             paramName   : 'rq',\n *             // extra HTTP request parameters\n *             params      : {\n *                 foo     : 'bar'\n *             },\n *             // pass some extra Fetch API option\n *             credentials : 'include'\n *         },\n *         sync : {\n *             url : 'php/save.php'\n *         }\n *     }\n * });\n * ```\n * ## Using inline data\n *\n * The CrudManager provides settable property {@link #property-inlineData} that can\n * be used to get data from all {@link #property-crudStores} at once and to set this\n * data as well. Populating the stores this way can be useful if you cannot or you do not want to use CrudManager for\n * server requests but you pull the data by other means and have it ready outside CrudManager. Also, the data from all\n * stores is available in a single assignment statement.\n *\n * ### Getting data\n * ```javascript\n * const data = scheduler.crudManager.inlineData;\n *\n * // use the data in your application\n * ```\n *\n * ### Setting data\n * ```javascript\n * const data = // your function to pull server data\n *\n * scheduler.crudManager.inlineData = data;\n * ```\n *\n * ## Load order\n *\n * The CM is aware of the proper load order for Scheduler specific stores so you don't need to worry about it.\n * If you provide any extra stores (using {@link #config-stores} config) they will be\n * added to the start of collection before the Scheduler specific stores.\n * If you need a different loading order, you should use {@link #function-addStore} method to\n * register your store:\n *\n * ```javascript\n * const crudManager = new CrudManager({\n *     resourceStore   : resourceStore,\n *     eventStore      : eventStore,\n *     assignmentStore : assignmentStore,\n *     // extra user defined stores will get to the start of collection\n *     // so they will be loaded first\n *     stores          : [ store1, store2 ],\n *     transport       : {\n *         load : {\n *             url : 'php/read.php'\n *         },\n *         sync : {\n *             url : 'php/save.php'\n *         }\n *     }\n * });\n *\n * // append store3 to the end so it will be loaded last\n * crudManager.addStore(store3);\n *\n * // now when we registered all the stores let's load them\n * crudManager.load();\n * ```\n *\n * ## Assignment store\n *\n * The Crud Manager is designed to use {@link Scheduler/data/AssignmentStore} for assigning events to one or multiple resources.\n * However if server provides `resourceId` for any of the `events` then the Crud Manager enables backward compatible mode when\n * an event could have a single assignment only. This also disables multiple assignments in Scheduler UI.\n * In order to use multiple assignments server backend should be able to receive/send `assignments` for `load` and `sync` requests.\n *\n * ## Project\n *\n * The Crud Manager automatically consumes stores of the provided project (namely its {@link Scheduler/model/ProjectModel#property-eventStore},\n * {@link Scheduler/model/ProjectModel#property-resourceStore}, {@link Scheduler/model/ProjectModel#property-assignmentStore},\n * {@link Scheduler/model/ProjectModel#property-dependencyStore}, {@link Scheduler/model/ProjectModel#property-timeRangeStore} and\n * {@link Scheduler/model/ProjectModel#property-resourceTimeRangeStore}):\n *\n * ```javascript\n * const crudManager = new CrudManager({\n *     // crud manager will get stores from myAppProject project\n *     project   : myAppProject,\n *     transport : {\n *         load : {\n *             url : 'php/read.php'\n *         },\n *         sync : {\n *             url : 'php/save.php'\n *         }\n *     }\n * });\n * ```\n *\n * @mixes Scheduler/data/mixin/ProjectCrudManager\n * @mixes Scheduler/crud/encoder/JsonEncoder\n * @mixes Scheduler/crud/transport/AjaxTransport\n * @extends Scheduler/crud/AbstractCrudManager\n */\n\nexport default class CrudManager extends AbstractCrudManager.mixin(ProjectCrudManager, AjaxTransport, JsonEncoder) {\n\n    static $name = 'CrudManager';\n\n    //region Config\n\n    static get defaultConfig() {\n        return {\n            projectClass         : ProjectModel,\n            resourceStoreClass   : ResourceStore,\n            eventStoreClass      : EventStore,\n            assignmentStoreClass : AssignmentStore,\n            dependencyStoreClass : DependencyStore,\n\n            /**\n             * A store with resources (or a config object).\n             * @config {Scheduler.data.ResourceStore|ResourceStoreConfig}\n             */\n            resourceStore : {},\n\n            /**\n             * A store with events (or a config object).\n             *\n             * ```\n             * crudManager : {\n             *      eventStore {\n             *          storeClass : MyEventStore\n             *      }\n             * }\n             * ```\n             * @config {Scheduler.data.EventStore|EventStoreConfig}\n             */\n            eventStore : {},\n\n            /**\n             * A store with assignments (or a config object).\n             * @config {Scheduler.data.AssignmentStore|AssignmentStoreConfig}\n             */\n            assignmentStore : {},\n\n            /**\n             * A store with dependencies(or a config object).\n             * @config {Scheduler.data.DependencyStore|DependencyStoreConfig}\n             */\n            dependencyStore : {},\n\n            /**\n             * A project that holds and links stores\n             * @config {Scheduler.model.ProjectModel}\n             */\n            project : null\n        };\n    }\n\n    //endregion\n\n    buildProject() {\n        return new this.projectClass(this.buildProjectConfig());\n    }\n\n    buildProjectConfig() {\n        return ObjectHelper.cleanupProperties({\n            eventStore             : this.eventStore,\n            resourceStore          : this.resourceStore,\n            assignmentStore        : this.assignmentStore,\n            dependencyStore        : this.dependencyStore,\n            resourceTimeRangeStore : this.resourceTimeRangeStore\n        });\n    }\n\n    //region Stores\n\n    set project(project) {\n        const me = this;\n\n        if (project !== me._project) {\n            me.detachListeners('beforeDataReady');\n            me.detachListeners('afterDataReady');\n\n            me._project = project;\n\n            if (project) {\n                me.eventStore             = project.eventStore;\n                me.resourceStore          = project.resourceStore;\n                me.assignmentStore        = project.assignmentStore;\n                me.dependencyStore        = project.dependencyStore;\n                me.timeRangeStore         = project.timeRangeStore;\n                me.resourceTimeRangeStore = project.resourceTimeRangeStore;\n\n                // When adding multiple events to the store it will trigger multiple change events each of which will\n                // call crudManager.hasChanges, which will try to actually get the changeset package. It takes some time\n                // and we better skip that part for the dataready event, suspending changes tracking.\n                project.ion({\n                    name      : 'beforeDataReady',\n                    dataReady : () => me.suspendChangesTracking(),\n                    prio      : 100,\n                    thisObj   : me\n                });\n\n                project.ion({\n                    name      : 'afterDataReady',\n                    dataReady : () => me.resumeChangesTracking(),\n                    prio      : -100,\n                    thisObj   : me\n                });\n            }\n\n            if (!me.eventStore) {\n                me.eventStore = {};\n            }\n            if (!me.resourceStore) {\n                me.resourceStore = {};\n            }\n            if (!me.assignmentStore) {\n                me.assignmentStore = {};\n            }\n            if (!me.dependencyStore) {\n                me.dependencyStore = {};\n            }\n        }\n    }\n\n    get project() {\n        return this._project;\n    }\n\n    /**\n     * Store for {@link Scheduler/feature/TimeRanges timeRanges} feature.\n     * @property {Core.data.Store}\n     */\n    get timeRangeStore() {\n        return this._timeRangeStore?.store;\n    }\n\n    set timeRangeStore(store) {\n        this.setFeaturedStore('_timeRangeStore', store, this.project?.timeRangeStoreClass);\n    }\n\n    /**\n     * Store for {@link Scheduler/feature/ResourceTimeRanges resourceTimeRanges} feature.\n     * @property {Core.data.Store}\n     */\n    get resourceTimeRangeStore() {\n        return this._resourceTimeRangeStore?.store;\n    }\n\n    set resourceTimeRangeStore(store) {\n        this.setFeaturedStore('_resourceTimeRangeStore', store, this.project?.resourceTimeRangeStoreClass);\n    }\n\n    /**\n     * Get/set the resource store bound to the CRUD manager.\n     * @property {Scheduler.data.ResourceStore}\n     */\n    get resourceStore() {\n        return this._resourceStore?.store;\n    }\n\n    set resourceStore(store) {\n        const me = this;\n\n        me.setFeaturedStore('_resourceStore', store, me.resourceStoreClass);\n    }\n\n    /**\n     * Get/set the event store bound to the CRUD manager.\n     * @property {Scheduler.data.EventStore}\n     */\n    get eventStore() {\n        return this._eventStore?.store;\n    }\n\n    set eventStore(store) {\n        const me = this;\n\n        me.setFeaturedStore('_eventStore', store, me.eventStoreClass);\n    }\n\n    /**\n     * Get/set the assignment store bound to the CRUD manager.\n     * @property {Scheduler.data.AssignmentStore}\n     */\n    get assignmentStore() {\n        return this._assignmentStore?.store;\n    }\n\n    set assignmentStore(store) {\n        this.setFeaturedStore('_assignmentStore', store, this.assignmentStoreClass);\n    }\n\n    /**\n     * Get/set the dependency store bound to the CRUD manager.\n     * @property {Scheduler.data.DependencyStore}\n     */\n    get dependencyStore() {\n        return this._dependencyStore?.store;\n    }\n\n    set dependencyStore(store) {\n        this.setFeaturedStore('_dependencyStore', store, this.dependencyStoreClass);\n    }\n\n    setFeaturedStore(property, store, storeClass) {\n        const\n            me       = this,\n            oldStore = me[property]?.store;\n\n        // if not the same store\n        if (oldStore !== store) {\n            // normalize store value (turn it into a storeClass instance if needed)\n            store = Store.getStore(store, store?.storeClass || storeClass);\n\n            if (oldStore) {\n                me.removeStore(oldStore);\n            }\n\n            me[property] = store && { store } || null;\n\n            // Adds configured scheduler stores to the store collection ensuring correct order\n            // unless they're already registered.\n            me.addPrioritizedStore(me[property]);\n        }\n\n        return me[property];\n    }\n\n    getChangesetPackage() {\n        const pack = super.getChangesetPackage();\n\n        // Remove assignments from changes if using single assignment mode (resourceId)\n        if (pack && this.eventStore.usesSingleAssignment) {\n            delete pack[this.assignmentStore.storeId];\n            // No other changes?\n            if (!this.crudStores.some(storeInfo => pack[storeInfo.storeId])) {\n                return null;\n            }\n        }\n\n        return pack;\n    }\n\n    //endregion\n\n    get crudLoadValidationMandatoryStores() {\n        return [this._eventStore.storeId, this._resourceStore.storeId];\n    }\n\n};\n","import Base from '../../Core/Base.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\n\n/**\n * @module Scheduler/eventlayout/PackMixin\n */\n\n/**\n * Mixin holding functionality shared between HorizontalLayoutPack and VerticalLayout.\n *\n * @mixin\n * @private\n */\nexport default Target => class PackMixin extends (Target || Base) {\n    static get $name() {\n        return 'PackMixin';\n    }\n\n    static get defaultConfig() {\n        return {\n            coordProp       : 'top',\n            sizeProp        : 'height',\n            inBandCoordProp : 'inBandTop',\n            inBandSizeProp  : 'inBandHeight'\n        };\n    }\n\n    isSameGroup(a, b) {\n        return this.grouped ? a.group === b.group : true;\n    }\n\n    // Packs the events to consume as little space as possible\n    packEventsInBands(events, applyClusterFn) {\n        const\n            me                      = this,\n            { coordProp, sizeProp } = me;\n\n        let slot,\n            firstInCluster,\n            cluster,\n            j;\n\n        for (let i = 0, l = events.length; i < l; i++) {\n            firstInCluster = events[i];\n\n            slot = me.findStartSlot(events, firstInCluster);\n\n            cluster = me.getCluster(events, i);\n\n            if (cluster.length > 1) {\n                firstInCluster[coordProp] = slot.start;\n                firstInCluster[sizeProp]  = slot.end - slot.start;\n\n                // If there are multiple slots, and events in the cluster have multiple start dates, group all same-start events into first slot\n                j = 1;\n\n                while (j < (cluster.length - 1) && cluster[j + 1].start - firstInCluster.start === 0) {\n                    j++;\n                }\n\n                // See if there's more than 1 slot available for this cluster, if so - first group in cluster consumes the entire first slot\n                const nextSlot = me.findStartSlot(events, cluster[j]);\n\n                if (nextSlot && nextSlot.start < 0.8) {\n                    cluster.length = j;\n                }\n            }\n\n            const\n                clusterSize = cluster.length,\n                slotSize    = (slot.end - slot.start) / clusterSize;\n\n            // Apply fraction values\n            for (j = 0; j < clusterSize; j++) {\n                applyClusterFn(cluster[j], j, slot, slotSize);\n            }\n\n            i += clusterSize - 1;\n        }\n\n        return 1;\n    }\n\n    findStartSlot(events, event) {\n        const\n            {\n                inBandSizeProp,\n                inBandCoordProp,\n                coordProp,\n                sizeProp\n            }                = this,\n            priorOverlappers = this.getPriorOverlappingEvents(events, event);\n\n        let i;\n\n        if (priorOverlappers.length === 0) {\n            return {\n                start : 0,\n                end   : 1\n            };\n        }\n\n        for (i = 0; i < priorOverlappers.length; i++) {\n            const\n                item       = priorOverlappers[i],\n                COORD_PROP = inBandCoordProp in item ? inBandCoordProp : coordProp,\n                SIZE_PROP  = inBandSizeProp in item ? inBandSizeProp : sizeProp;\n\n            if (i === 0 && item[COORD_PROP] > 0) {\n                return {\n                    start : 0,\n                    end   : item[COORD_PROP]\n                };\n            }\n            else {\n                if (item[COORD_PROP] + item[SIZE_PROP] < (i < priorOverlappers.length - 1 ? priorOverlappers[i + 1][COORD_PROP] : 1)) {\n                    return {\n                        start : item[COORD_PROP] + item[SIZE_PROP],\n                        end   : i < priorOverlappers.length - 1 ? priorOverlappers[i + 1][COORD_PROP] : 1\n                    };\n                }\n            }\n        }\n\n        return false;\n    }\n\n    getPriorOverlappingEvents(events, event) {\n        const\n            start       = event.start,\n            end         = event.end,\n            overlappers = [];\n\n        for (let i = 0, l = events.indexOf(event); i < l; i++) {\n            const item = events[i];\n\n            if (this.isSameGroup(item, event) && DateHelper.intersectSpans(start, end, item.start, item.end)) {\n                overlappers.push(item);\n            }\n        }\n\n        overlappers.sort(this.sortOverlappers.bind(this));\n\n        return overlappers;\n    }\n\n    sortOverlappers(e1, e2) {\n        const { coordProp } = this;\n\n        return e1[coordProp] - e2[coordProp];\n    }\n\n    getCluster(events, startIndex) {\n        const\n            startEvent = events[startIndex],\n            result     = [startEvent];\n\n        if (startIndex >= events.length - 1) {\n            return result;\n        }\n\n        let { start, end } = startEvent;\n\n        for (let i = startIndex + 1, l = events.length; i < l; i++) {\n            const item = events[i];\n\n            if (!this.isSameGroup(item, startEvent) || !DateHelper.intersectSpans(start, end, item.start, item.end)) {\n                break;\n            }\n\n            result.push(item);\n            start = DateHelper.max(start, item.start);\n            end   = DateHelper.min(item.end, end);\n        }\n\n        return result;\n    }\n};\n","import Base from '../../../Core/Base.js';\nimport DateHelper from '../../../Core/helper/DateHelper.js';\n\n/**\n * @module Scheduler/view/mixin/Describable\n */\n\nconst\n    arrayify = format => (!format || Array.isArray(format)) ? format : [format],\n    pickFormat = (formats, index, defaultFormat) => (formats && formats[index] !== true) ? formats[index] : defaultFormat;\n\n/**\n * Mixin that provides a consistent method for describing the ranges of time presented by a view. This is currently\n * consumed only by the Calendar widget for describing its child views. This mixin is defined here to facilitate using\n * a Scheduler as a child view of a Calendar.\n *\n * @mixin\n */\nexport default Target => class Describable extends (Target || Base) {\n    static $name = 'Describable';\n\n    static configurable = {\n        /**\n         * A {@link Core.helper.DateHelper} format string to use to create date output for view descriptions.\n         * @config {String}\n         * @default\n         */\n        dateFormat : 'MMMM d, YYYY',\n\n        /**\n         * A string used to separate start and end dates in the {@link #config-descriptionFormat}.\n         * @prp {String}\n         * @default\n         */\n        dateSeparator : ' - ',\n\n        /**\n         * The date format used by the default {@link #config-descriptionRenderer} for rendering the view's description.\n         * If this value is `null`, the {@link #config-dateFormat} (and potentially {@link #config-dateSeparator}) will\n         * be used.\n         *\n         * For views that can span a range of dates, this can be a 2-item array with the following interpretation:\n         *\n         * - `descriptionFormat[0]` is either a date format string or `true` (to use {@link #config-dateFormat}). The\n         *   result of formatting the `startDate` with this format specification is used when the formatting both the\n         *   `startDate` and `endDate` with this specification produces the same result. For example, a week view\n         *   displays only the month and year components of the date, so this will be used unless the end of the week\n         *   crosses into the next month.\n         *\n         * - `descriptionFormat[1]` is used with {@link Core.helper.DateHelper#function-formatRange-static} when the\n         *  `startDate` and `endDate` format differently using `descriptionFormat[0]` (as described above). This one\n         *  format string produces a result for both dates. If this value is `true`, the {@link #config-dateFormat} and\n         *  {@link #config-dateSeparator} are combined to produce the range format.\n         *\n         * @prp {String|String[]|Boolean[]}\n         * @default\n         */\n        descriptionFormat : null,\n\n        /**\n         * A function that provides the textual description for this view. If provided, this function overrides the\n         * {@link #config-descriptionFormat}.\n         *\n         * ```javascript\n         *  descriptionRenderer() {\n         *      const\n         *          eventsInView = this.eventStore.records.filter(\n         *              eventRec => DateHelper.intersectSpans(\n         *                  this.startDate, this.endDate,\n         *                  eventRec.startDate, eventRec.endDate)).length,\n         *          sd = DateHelper.format(this.startDate, 'DD/MM/YYY'),\n         *          ed = DateHelper.format(this.endDate, 'DD/MM/YYY');\n         *\n         *     return `${sd} - ${ed}, ${eventsInView} event${eventsInView === 1 ? '' : 's'}`;\n         * }\n         * ```\n         * @config {Function} descriptionRenderer\n         * @param {Core.widget.Widget} view The active view in case the function is in another scope.\n         */\n        descriptionRenderer : null\n    };\n\n    /**\n     * Returns the date or ranges of included dates as an array. If there is only one significant date, the array will\n     * have only one element. Otherwise, a range of dates is returned as a two-element array with `[0]` being the\n     * `startDate` and `[1]` the `lastDate`.\n     * @member {Date[]}\n     * @internal\n     */\n    get dateBounds() {\n        return [this.date];\n    }\n\n    get description() {\n        const\n            me = this,\n            { dateBounds, dateFormat, descriptionRenderer } = me,\n            descriptionFormat = me.descriptionFormat ?? arrayify(me.defaultDescriptionFormat);\n\n        let end, ret;\n\n        if (descriptionRenderer) {\n            ret = me.callback(descriptionRenderer, me, [me]);\n        }\n        else {\n            const format0 = pickFormat(descriptionFormat, 0, dateFormat);\n\n            // Format the startDate and endDate using the first format\n            ret = DateHelper.format(dateBounds[0], format0);\n            end = dateBounds.length > 1 && descriptionFormat?.length > 1 && (\n                DateHelper.format(dateBounds[0], format0) !== DateHelper.format(dateBounds[1], format0)\n            );\n\n            if (end) {\n                // The endDate renders a different description, and we have a range format.\n                ret = DateHelper.formatRange(dateBounds,\n                    pickFormat(descriptionFormat, 1, `S${dateFormat}${me.dateSeparator}E${dateFormat}`));\n            }\n        }\n\n        return ret;\n    }\n\n    changeDescriptionFormat(format) {\n        return arrayify(format);\n    }\n\n    get widgetClass() {}  // no b-describable class\n};\n","import Base from '../../../Core/Base.js';\nimport Collection from '../../../Core/util/Collection.js';\nimport ArrayHelper from '../../../Core/helper/ArrayHelper.js';\n\n/**\n * @module Scheduler/view/mixin/EventSelection\n */\n\n/**\n * Mixin that tracks event or assignment selection by clicking on one or more events in the scheduler.\n * @mixin\n */\nexport default Target => class EventSelection extends (Target || Base) {\n    static get $name() {\n        return 'EventSelection';\n    }\n\n    //region Default config\n\n    static get configurable() {\n        return {\n            /**\n             * Configure as `true`, or set property to `true` to highlight dependent events as well when selecting an event.\n             * @config {Boolean}\n             * @default\n             * @category Selection\n             */\n            highlightPredecessors : false,\n\n            /**\n             * Configure as `true`, or set property to `true` to highlight dependent events as well when selecting an event.\n             * @config {Boolean}\n             * @default\n             * @category Selection\n             */\n            highlightSuccessors : false,\n\n            /**\n             * Configure as `true` to deselect a selected event upon click.\n             * @config {Boolean}\n             * @default\n             * @category Selection\n             */\n            deselectOnClick : false\n        };\n    }\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Configure as `true` to allow `CTRL+click` to select multiple events in the scheduler.\n             * @config {Boolean}\n             * @category Selection\n             */\n            multiEventSelect : false,\n\n            /**\n             * Configure as `true`, or set property to `true` to disable event selection.\n             * @config {Boolean}\n             * @default\n             * @category Selection\n             */\n            eventSelectionDisabled : false,\n\n            /**\n             * CSS class to add to selected events.\n             * @config {String}\n             * @default\n             * @category CSS\n             * @private\n             */\n            eventSelectedCls : 'b-sch-event-selected',\n\n            /**\n             * Configure as `true` to trigger `selectionChange` when removing a selected event/assignment.\n             * @config {Boolean}\n             * @default\n             * @category Selection\n             */\n            triggerSelectionChangeOnRemove : false,\n\n            /**\n             * This flag controls whether Scheduler should preserve its selection of events when loading a new dataset\n             * (if selected event ids are included in the newly loaded dataset).\n             * @config {Boolean}\n             * @default\n             * @category Selection\n             */\n            maintainSelectionOnDatasetChange : true,\n\n            /**\n             * CSS class to add to other instances of a selected event, to highlight them.\n             * @config {String}\n             * @default\n             * @category CSS\n             * @private\n             */\n            eventAssignHighlightCls : 'b-sch-event-assign-selected',\n\n            /**\n             * Collection to store selection.\n             * @config {Core.util.Collection}\n             * @private\n             */\n            selectedCollection : {}\n        };\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Fired any time there is a change to the events selected in the Scheduler.\n     * @event eventSelectionChange\n     * @param {'select'|'deselect'|'update'|'clear'} action One of the actions 'select', 'deselect', 'update',\n     * 'clear'\n     * @param {Scheduler.model.EventModel[]} selected An array of the Events added to the selection.\n     * @param {Scheduler.model.EventModel[]} deselected An array of the Event removed from the selection.\n     * @param {Scheduler.model.EventModel[]} selection The new selection.\n     */\n\n    /**\n     * Fired any time there is going to be a change to the events selected in the Scheduler.\n     * Returning `false` prevents the change\n     * @event beforeEventSelectionChange\n     * @preventable\n     * @param {String} action One of the actions 'select', 'deselect', 'update', 'clear'\n     * @param {Scheduler.model.EventModel[]} selected An array of events that will be added to the selection.\n     * @param {Scheduler.model.EventModel[]} deselected An array of events that will be removed from the selection.\n     * @param {Scheduler.model.EventModel[]} selection The currently selected events, before applying `selected` and `deselected`.\n     */\n\n    /**\n     * Fired any time there is a change to the assignments selected in the Scheduler.\n     * @event assignmentSelectionChange\n     * @param {'select'|'deselect'|'update'|'clear'} action One of the actions 'select', 'deselect', 'update',\n     * 'clear'\n     * @param {Scheduler.model.AssignmentModel[]} selected An array of the Assignments added to the selection.\n     * @param {Scheduler.model.AssignmentModel[]} deselected An array of the Assignments removed from the selection.\n     * @param {Scheduler.model.AssignmentModel[]} selection The new selection.\n     */\n\n    /**\n     * Fired any time there is going to be a change to the assignments selected in the Scheduler.\n     * Returning `false` prevents the change\n     * @event beforeAssignmentSelectionChange\n     * @preventable\n     * @param {String} action One of the actions 'select', 'deselect', 'update', 'clear'\n     * @param {Scheduler.model.EventModel[]} selected An array of assignments that will be added to the selection.\n     * @param {Scheduler.model.EventModel[]} deselected An array of assignments that will be removed from the selection.\n     * @param {Scheduler.model.EventModel[]} selection The currently selected assignments, before applying `selected` and `deselected`.\n     */\n\n    //endregion\n\n    //region Init\n\n    afterConstruct() {\n        super.afterConstruct();\n\n        this.navigator?.ion({\n            navigate : 'onEventNavigate',\n            thisObj  : this\n        });\n    }\n\n    //endregion\n\n    //region Selected Collection\n\n    set selectedCollection(selectedCollection) {\n        if (!(selectedCollection instanceof Collection)) {\n            selectedCollection = new Collection(selectedCollection);\n        }\n        this._selectedCollection = selectedCollection;\n\n        // Fire row change events from onSelectedCollectionChange\n        selectedCollection.ion({\n            change : (...args) => this.project.deferUntilRepopulationIfNeeded(\n                'onSelectedCollectionChange',\n                (...args) => !this.isDestroying && this.onSelectedCollectionChange(...args),\n                args\n            ),\n            // deferring this handler breaks the UI\n            beforeSplice : 'onBeforeSelectedCollectionSplice',\n            thisObj      : this\n        });\n    }\n\n    get selectedCollection() {\n        return this._selectedCollection;\n    }\n\n    getActionType(selection, selected, deselected) {\n        return (selection.length > 0)\n            ? ((selected.length > 0 && deselected.length > 0)\n                ? 'update'\n                : (selected.length > 0\n                    ? 'select'\n                    : 'deselect'))\n            : 'clear';\n    }\n\n    //endregion\n\n    //region Modify selection\n\n    getEventsFromAssignments(assignments) {\n        return ArrayHelper.unique(assignments.map(assignment => assignment.event));\n    }\n\n    /**\n     * The {@link Scheduler.model.EventModel events} which are selected.\n     * @property {Scheduler.model.EventModel[]}\n     * @category Selection\n     */\n    get selectedEvents() {\n        return this.getEventsFromAssignments(this.selectedCollection.values);\n    }\n\n    set selectedEvents(events) {\n        // Select all assignments\n        const assignments = [];\n\n        events = ArrayHelper.asArray(events);\n\n        events?.forEach(event => {\n            if (this.isEventSelectable(event) !== false) {\n                assignments.push(...event.assignments);\n            }\n        });\n\n        // Replace the entire selected collection with the new record set\n        this.selectedCollection.splice(0, this.selectedCollection.count, assignments);\n    }\n\n    /**\n     * The {@link Scheduler.model.AssignmentModel events} which are selected.\n     * @property {Scheduler.model.AssignmentModel[]}\n     * @category Selection\n     */\n    get selectedAssignments() {\n        return this.selectedCollection.values;\n    }\n\n    set selectedAssignments(assignments) {\n        // Replace the entire selected collection with the new record set\n        this.selectedCollection.splice(0, this.selectedCollection.count, assignments || []);\n    }\n\n    /**\n     * Returns `true` if the {@link Scheduler.model.EventModel event} is selected.\n     * @param {Scheduler.model.EventModel} event The event\n     * @returns {Boolean} Returns `true` if the event is selected\n     * @category Selection\n     */\n    isEventSelected(event) {\n        const { selectedCollection } = this;\n\n        return Boolean(selectedCollection.count && selectedCollection.includes(event.assignments));\n    }\n\n    /**\n     * A template method (empty by default) allowing you to control if an event can be selected or not.\n     *\n     * ```javascript\n     * new Scheduler({\n     *     isEventSelectable(event) {\n     *         return event.startDate >= Date.now();\n     *     }\n     * })\n     * ```\n     *\n     * This selection process is applicable to calendar too:\n     *\n     * ```javascript\n     * new Calendar({\n     *     isEventSelectable(event) {\n     *         return event.startDate >= Date.now();\n     *     }\n     * })\n     * ```\n     *\n     * @param {Scheduler.model.EventModel} event The event record\n     * @returns {Boolean} true if event can be selected, otherwise false\n     * @prp {Function}\n     * @category Selection\n     */\n    isEventSelectable(event) {}\n\n    /**\n     * Returns `true` if the {@link Scheduler.model.AssignmentModel assignment} is selected.\n     * @param {Scheduler.model.AssignmentModel} assignment The assignment\n     * @returns {Boolean} Returns `true` if the assignment is selected\n     * @category Selection\n     */\n    isAssignmentSelected(assignment) {\n        return this.selectedCollection.includes(assignment);\n    }\n\n    /**\n     * Selects the passed {@link Scheduler.model.EventModel event} or {@link Scheduler.model.AssignmentModel assignment}\n     * *if it is not selected*. Selecting events results in all their assignments being selected.\n     * @param {Scheduler.model.EventModel|Scheduler.model.AssignmentModel} eventOrAssignment The event or assignment to select\n     * @param {Boolean} [preserveSelection] Pass `true` to preserve any other selected events or assignments\n     * @category Selection\n     */\n    select(eventOrAssignment, preserveSelection = false) {\n        if (eventOrAssignment.isAssignment) {\n            this.selectAssignment(eventOrAssignment, preserveSelection);\n        }\n        else {\n            this.selectEvent(eventOrAssignment, preserveSelection);\n        }\n    }\n\n    /**\n     * Selects the passed {@link Scheduler.model.EventModel event} *if it is not selected*. Selecting an event will\n     * select all its assignments.\n     * @param {Scheduler.model.EventModel} event The event select\n     * @param {Boolean} [preserveSelection] Pass `true` to preserve any other selected events\n     * @category Selection\n     */\n    selectEvent(event, preserveSelection = false) {\n        // If the event is already selected, this is a no-op.\n        // In this case, selection must not be cleared even in the absence of preserveSelection\n        if (!this.isEventSelected(event)) {\n            this.selectEvents([event], preserveSelection);\n        }\n    }\n\n    /**\n     * Selects the passed {@link Scheduler.model.AssignmentModel assignment} *if it is not selected*.\n     * @param {Scheduler.model.AssignmentModel} assignment The assignment to select\n     * @param {Boolean} [preserveSelection] Pass `true` to preserve any other selected assignments\n     * @param {Event} [event] If this method was invoked as a result of a user action, this is the DOM event that triggered it\n     * @category Selection\n     */\n    selectAssignment(assignment, preserveSelection = false, event) {\n        // If the event is already selected, this is a no-op.\n        // In this case, selection must not be cleared even in the absence of preserveSelection\n        if (!this.isAssignmentSelected(assignment)) {\n            preserveSelection ? this.selectedCollection.add(assignment) : this.selectedAssignments = assignment;\n        }\n    }\n\n    /**\n     * Deselects the passed {@link Scheduler.model.EventModel event} or {@link Scheduler.model.AssignmentModel assignment}\n     * *if it is selected*.\n     * @param {Scheduler.model.EventModel|Scheduler.model.AssignmentModel} eventOrAssignment The event or assignment to deselect.\n     * @category Selection\n     */\n    deselect(eventOrAssignment) {\n        if (eventOrAssignment.isAssignment) {\n            this.deselectAssignment(eventOrAssignment);\n        }\n        else {\n            this.deselectEvent(eventOrAssignment);\n        }\n    }\n\n    /**\n     * Deselects the passed {@link Scheduler.model.EventModel event} *if it is selected*.\n     * @param {Scheduler.model.EventModel} event The event to deselect.\n     * @category Selection\n     */\n    deselectEvent(event) {\n        if (this.isEventSelected(event)) {\n            this.selectedCollection.remove(...event.assignments);\n        }\n    }\n\n    /**\n     * Deselects the passed {@link Scheduler.model.AssignmentModel assignment} *if it is selected*.\n     * @param {Scheduler.model.AssignmentModel} assignment The assignment to deselect\n     * @param {Event} [event] If this method was invoked as a result of a user action, this is the DOM event that triggered it\n     * @category Selection\n     */\n    deselectAssignment(assignment) {\n        if (this.isAssignmentSelected(assignment)) {\n            this.selectedCollection.remove(assignment);\n        }\n    }\n\n    /**\n     * Adds {@link Scheduler.model.EventModel events} to the selection.\n     * @param {Scheduler.model.EventModel[]} events Events to be selected\n     * @param {Boolean} [preserveSelection] Pass `true` to preserve any other selected events\n     * @category Selection\n     */\n    selectEvents(events, preserveSelection = false) {\n        if (preserveSelection) {\n            const assignments = (events.reduce((assignments, event) => {\n                if (this.isEventSelectable(event) !== false) {\n                    assignments.push(...event.assignments);\n                }\n                return assignments;\n            }, []));\n\n            this.selectedCollection.add(assignments);\n        }\n        else {\n            this.selectedEvents = events;\n        }\n    }\n\n    /**\n     * Removes {@link Scheduler.model.EventModel events} from the selection.\n     * @param {Scheduler.model.EventModel[]} events Events or assignments  to be deselected\n     * @category Selection\n     */\n    deselectEvents(events) {\n        this.selectedCollection.remove(events.reduce((assignments, event) => {\n            assignments.push(...event.assignments);\n            return assignments;\n        }, []));\n    }\n\n    /**\n     * Adds {@link Scheduler.model.AssignmentModel assignments} to the selection.\n     * @param {Scheduler.model.AssignmentModel[]} assignments Assignments to be selected\n     * @category Selection\n     */\n    selectAssignments(assignments) {\n        this.selectedCollection.add(assignments);\n    }\n\n    /**\n     * Removes {@link Scheduler.model.AssignmentModel assignments} from the selection.\n     * @param {Scheduler.model.AssignmentModel[]} assignments Assignments  to be deselected\n     * @category Selection\n     */\n    deselectAssignments(assignments) {\n        this.selectedCollection.remove(assignments);\n    }\n\n    /**\n     * Deselects all {@link Scheduler.model.EventModel events} and {@link Scheduler.model.AssignmentModel assignments}.\n     * @category Selection\n     */\n    clearEventSelection() {\n        this.selectedAssignments = [];\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Responds to mutations of the underlying selection Collection.\n     * Keeps the UI synced, eventSelectionChange and assignmentSelectionChange event is fired when `me.silent` is falsy.\n     * @private\n     */\n\n    onBeforeSelectedCollectionSplice({ toAdd, toRemove, index }) {\n        const\n            me = this,\n            selection = me._selectedCollection.values,\n            selected = toAdd,\n            deselected = toRemove > 0 ? selected.slice(index, toRemove + index) : [],\n            action = me.getActionType(selection, selected, deselected);\n\n        if (me.trigger('beforeEventSelectionChange', {\n            action,\n            selection  : me.getEventsFromAssignments(selection) || [],\n            selected   : me.getEventsFromAssignments(selected) || [],\n            deselected : me.getEventsFromAssignments(deselected) || []\n        }) === false) {\n            return false;\n        }\n\n        if (me.trigger('beforeAssignmentSelectionChange', {\n            action,\n            selection,\n            selected,\n            deselected\n        }) === false) {\n            return false;\n        }\n    }\n\n    onSelectedCollectionChange({ added, removed }) {\n        const\n            me         = this,\n            selection  = me.selectedAssignments,\n            selected   = added || [],\n            deselected = removed || [];\n\n        function updateSelection(assignmentRecord, select) {\n            const eventRecord    = assignmentRecord.event;\n\n            if (eventRecord) {\n                const\n                    { eventAssignHighlightCls } = me,\n                    element                     = me.getElementFromAssignmentRecord(assignmentRecord);\n\n                me.currentOrientation.toggleCls(assignmentRecord, me.eventSelectedCls, select);\n\n                eventAssignHighlightCls && me.getElementsFromEventRecord(eventRecord).forEach(el => {\n                    if (el !== element) {\n                        const otherAssignmentRecord = me.resolveAssignmentRecord(el);\n\n                        me.currentOrientation.toggleCls(otherAssignmentRecord, eventAssignHighlightCls, select);\n\n                        if (select) {\n                            // Need to force a reflow to get the highlightning animation triggered\n                            el.style.animation = 'none';\n                            el.offsetHeight;\n                            el.style.animation = '';\n                        }\n                        el.classList.toggle(eventAssignHighlightCls, select);\n                    }\n                });\n            }\n        }\n\n        deselected.forEach(record => updateSelection(record, false));\n        selected.forEach(record => updateSelection(record, true));\n\n        if (me.highlightSuccessors || me.highlightPredecessors) {\n            me.highlightLinkedEvents(me.selectedEvents);\n        }\n\n        // To be able to restore selection after reloading resources (which might lead to regenerated assignments in\n        // the single assignment scenario, so cannot rely on records or ids)\n        me.$selectedAssignments = selection.map(assignment => ({\n            eventId    : assignment.eventId,\n            resourceId : assignment.resourceId\n        }));\n\n        if (!me.silent) {\n            const action = this.getActionType(selection, selected, deselected);\n\n            me.trigger('assignmentSelectionChange', {\n                action,\n                selection,\n                selected,\n                deselected\n            });\n\n            me.trigger('eventSelectionChange', {\n                action,\n                selection  : me.selectedEvents,\n                selected   : me.getEventsFromAssignments(selected),\n                deselected : me.getEventsFromAssignments(deselected)\n            });\n        }\n    }\n\n    /**\n     * Assignment change listener to remove events from selection which are no longer in the assignments.\n     * @private\n     */\n    onAssignmentChange(event) {\n        super.onAssignmentChange(event);\n\n        const\n            me = this,\n            { action, records : assignments } = event;\n\n        me.silent = !me.triggerSelectionChangeOnRemove;\n\n        if (action === 'remove') {\n            me.deselectAssignments(assignments);\n        }\n        else if (action === 'removeall' && !me.eventStore.isSettingData) {\n            me.clearEventSelection();\n        }\n        else if (action === 'dataset' && me.$selectedAssignments) {\n            if (!me.maintainSelectionOnDatasetChange) {\n                me.clearEventSelection();\n            }\n            else {\n                const newAssignments = me.$selectedAssignments.map(selector =>\n                    assignments.find(a =>\n                        a.eventId === selector.eventId &&\n                        a.resourceId === selector.resourceId\n                    )\n                );\n\n                me.selectedAssignments = ArrayHelper.clean(newAssignments);\n            }\n        }\n\n        me.silent = false;\n    }\n\n    onInternalEventStoreChange({ source, action, records }) {\n        // Setting empty event dataset cannot be handled in onAssignmentChange above, no assignments might be affected\n        if (!source.isResourceTimeRangeStore && action === 'dataset' && !records.length) {\n            this.clearEventSelection();\n        }\n\n        super.onInternalEventStoreChange(...arguments);\n    }\n\n    /**\n     * Mouse listener to update selection.\n     * @private\n     */\n    onAssignmentSelectionClick(event, clickedRecord) {\n        const me = this;\n\n        // Multi selection: CTRL means preserve selection, just add or remove the event.\n        // Single selection: CTRL deselects already selected event\n        if (me.isAssignmentSelected(clickedRecord)) {\n            if (me.deselectOnClick || event.ctrlKey) {\n                me.deselectAssignment(clickedRecord, me.multiEventSelect, event);\n            }\n        }\n        else if (this.isEventSelectable(clickedRecord.event) !== false) {\n            me.selectAssignment(clickedRecord, event.ctrlKey && me.multiEventSelect, event);\n        }\n    }\n\n    /**\n     * Navigation listener to update selection.\n     * @private\n     */\n    onEventNavigate({ event, item }) {\n        if (!this.eventSelectionDisabled) {\n            const assignment = item && (item.nodeType === Element.ELEMENT_NODE ? this.resolveAssignmentRecord(item) : item);\n\n            if (assignment) {\n                this.onAssignmentSelectionClick(event, assignment);\n            }\n            // Click outside of an event/assignment;\n            else {\n                this.clearEventSelection();\n            }\n        }\n    }\n\n    changeHighlightSuccessors(value) {\n        return this.changeLinkedEvents(value);\n    }\n\n    changeHighlightPredecessors(value) {\n        return this.changeLinkedEvents(value);\n    }\n\n    changeLinkedEvents(value) {\n        const me = this;\n\n        if (value) {\n            me.highlighted = me.highlighted || new Set();\n\n            me.highlightLinkedEvents(me.selectedEvents);\n        }\n        else if (me.highlighted) {\n            me.highlightLinkedEvents();\n        }\n\n        return value;\n    }\n\n    // Function that highlights/unhighlights events in a dependency chain\n    highlightLinkedEvents(eventRecords = []) {\n        const\n            me                  = this,\n            {\n                highlighted,\n                eventStore\n            }                   = me,\n            dependenciesFeature = me.features.dependencies;\n\n        // Unhighlight previously highlighted records\n        highlighted.forEach(eventRecord => {\n            if (!eventRecords.includes(eventRecord)) {\n                eventRecord.meta.highlight = false;\n                highlighted.delete(eventRecord);\n\n                if (eventStore.includes(eventRecord)) {\n                    eventRecord.dependencies.forEach(dep => dependenciesFeature.unhighlight(dep, 'b-highlight'));\n                }\n            }\n        });\n\n        eventRecords.forEach(eventRecord => {\n            const toWalk = [eventRecord];\n\n            // Collect all events along the dependency chain\n            while (toWalk.length) {\n                const record = toWalk.pop();\n\n                highlighted.add(record);\n\n                if (me.highlightSuccessors) {\n                    record.outgoingDeps.forEach(outgoing => {\n                        dependenciesFeature.highlight(outgoing, 'b-highlight');\n                        !highlighted.has(outgoing.toEvent) && toWalk.push(outgoing.toEvent);\n                    });\n                }\n                if (me.highlightPredecessors) {\n                    record.incomingDeps.forEach(incoming => {\n                        dependenciesFeature.highlight(incoming, 'b-highlight');\n                        !highlighted.has(incoming.fromEvent) && toWalk.push(incoming.fromEvent);\n                    });\n                }\n            }\n\n            // Highlight them\n            highlighted.forEach(record => record.meta.highlight = true);\n        });\n\n        // Toggle flag on schedulers element, to fade others in or out\n        me.element.classList.toggle('b-highlighting', eventRecords.length > 0);\n\n        me.refreshWithTransition();\n    }\n\n    onEventDataGenerated(renderData) {\n        if (this.highlightSuccessors || this.highlightPredecessors) {\n            renderData.cls['b-highlight'] = renderData.eventRecord.meta.highlight;\n        }\n        super.onEventDataGenerated(renderData);\n    }\n\n    updateProject(project, old) {\n        // Clear selection when the whole world shifts :)\n        this.clearEventSelection();\n\n        super.updateProject(project, old);\n    }\n\n    //endregion\n\n    doDestroy() {\n        this._selectedCollection?.destroy();\n\n        super.doDestroy();\n    }\n\n    //region Getters/Setters\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n\n    //endregion\n};\n"],"names":["AbstractCrudManager","Base","mixin","AbstractCrudManagerMixin","revision","this","crudRevision","value","json","StringHelper","safeJsonStringify","safeJsonParse","forEachCrudStore","store","dataName","storeId","data","defaultConfig","stores","construct","config","crudStores","super","toJSON","result","inlineData","isLoading","isCrudManagerLoading","addStore","args","addCrudStore","removeStore","removeCrudStore","getStore","getCrudStore","hasChanges","crudStoreHasChanges","loadData","loadCrudManagerData","_$name","CrudManager","ProjectCrudManager","AjaxTransport","JsonEncoder","projectClass","ProjectModel","resourceStoreClass","ResourceStore","eventStoreClass","EventStore","assignmentStoreClass","AssignmentStore","dependencyStoreClass","DependencyStore","resourceStore","eventStore","assignmentStore","dependencyStore","project","buildProject","buildProjectConfig","ObjectHelper","cleanupProperties","resourceTimeRangeStore","me","_project","detachListeners","timeRangeStore","ion","name","dataReady","suspendChangesTracking","prio","thisObj","resumeChangesTracking","_this$_timeRangeStore","_timeRangeStore","_this$project","setFeaturedStore","timeRangeStoreClass","_this$_resourceTimeRa","_resourceTimeRangeStore","_this$project2","resourceTimeRangeStoreClass","_this$_resourceStore","_resourceStore","_this$_eventStore","_eventStore","_this$_assignmentStor","_assignmentStore","_this$_dependencyStor","_dependencyStore","property","storeClass","_me$property","oldStore","_store","Store","addPrioritizedStore","getChangesetPackage","pack","usesSingleAssignment","some","storeInfo","crudLoadValidationMandatoryStores","_defineProperty","Target","$name","coordProp","sizeProp","inBandCoordProp","inBandSizeProp","isSameGroup","a","b","grouped","group","packEventsInBands","events","applyClusterFn","slot","firstInCluster","cluster","j","i","l","length","findStartSlot","getCluster","start","end","nextSlot","clusterSize","slotSize","event","priorOverlappers","getPriorOverlappingEvents","item","COORD_PROP","SIZE_PROP","overlappers","indexOf","DateHelper","intersectSpans","push","sort","sortOverlappers","bind","e1","e2","startIndex","startEvent","max","min","arrayify","format","Array","isArray","pickFormat","formats","index","defaultFormat","_class","dateBounds","date","description","_me$descriptionFormat","dateFormat","descriptionRenderer","descriptionFormat","defaultDescriptionFormat","ret","callback","format0","formatRange","dateSeparator","changeDescriptionFormat","widgetClass","configurable","highlightPredecessors","highlightSuccessors","deselectOnClick","multiEventSelect","eventSelectionDisabled","eventSelectedCls","triggerSelectionChangeOnRemove","maintainSelectionOnDatasetChange","eventAssignHighlightCls","selectedCollection","afterConstruct","_this$navigator","navigator","navigate","Collection","_selectedCollection","change","deferUntilRepopulationIfNeeded","isDestroying","onSelectedCollectionChange","beforeSplice","getActionType","selection","selected","deselected","getEventsFromAssignments","assignments","ArrayHelper","unique","map","assignment","selectedEvents","values","_events","asArray","forEach","isEventSelectable","splice","count","selectedAssignments","isEventSelected","Boolean","includes","isAssignmentSelected","select","eventOrAssignment","preserveSelection","isAssignment","selectAssignment","selectEvent","selectEvents","add","deselect","deselectAssignment","deselectEvent","remove","reduce","deselectEvents","selectAssignments","deselectAssignments","clearEventSelection","onBeforeSelectedCollectionSplice","toAdd","toRemove","slice","action","trigger","added","removed","updateSelection","assignmentRecord","eventRecord","element","getElementFromAssignmentRecord","currentOrientation","toggleCls","getElementsFromEventRecord","el","otherAssignmentRecord","resolveAssignmentRecord","style","animation","offsetHeight","classList","toggle","record","highlightLinkedEvents","$selectedAssignments","eventId","resourceId","silent","onAssignmentChange","records","isSettingData","newAssignments","selector","find","clean","onInternalEventStoreChange","source","isResourceTimeRangeStore","arguments","onAssignmentSelectionClick","clickedRecord","ctrlKey","onEventNavigate","nodeType","Element","ELEMENT_NODE","changeHighlightSuccessors","changeLinkedEvents","changeHighlightPredecessors","highlighted","Set","eventRecords","dependenciesFeature","features","dependencies","meta","highlight","delete","dep","unhighlight","toWalk","pop","outgoingDeps","outgoing","has","toEvent","incomingDeps","incoming","fromEvent","refreshWithTransition","onEventDataGenerated","renderData","cls","updateProject","old","doDestroy","_this$_selectedCollec","destroy"],"mappings":"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"}