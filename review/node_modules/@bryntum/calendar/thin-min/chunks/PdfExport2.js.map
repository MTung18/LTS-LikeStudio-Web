{"version":3,"file":"PdfExport2.js","sources":["../../../../Scheduler/lib/Scheduler/column/ResourceInfoColumn.js","../../../../Scheduler/lib/Scheduler/feature/Labels.js","../../../../Scheduler/lib/Scheduler/feature/TimelineSummary.js","../../../../Scheduler/lib/Scheduler/feature/export/Utils.js","../../../../Scheduler/lib/Scheduler/feature/export/exporter/SchedulerExporterMixin.js","../../../../Scheduler/lib/Scheduler/feature/export/exporter/MultiPageExporter.js","../../../../Scheduler/lib/Scheduler/feature/export/exporter/MultiPageVerticalExporter.js","../../../../Scheduler/lib/Scheduler/view/export/field/ScheduleRangeCombo.js","../../../../Scheduler/lib/Scheduler/view/export/SchedulerExportDialog.js","../../../../Scheduler/lib/Scheduler/feature/export/exporter/SinglePageExporter.js","../../../../Scheduler/lib/Scheduler/feature/export/PdfExport.js"],"sourcesContent":["import Column from '../../Grid/column/Column.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\nimport VersionHelper from '../../Core/helper/VersionHelper.js';\nimport AvatarRendering from '../../Core/widget/util/AvatarRendering.js';\n\n/**\n * @module Scheduler/column/ResourceInfoColumn\n */\n\n/**\n * Displays basic resource information. Defaults to showing an image + name + event count (all configurable).\n *\n * If a resource has no image, you can either provide an icon using `iconCls` in the data (you then need to specify\n * `image === false` in your data) or the resource initials will be shown.\n *\n * Be sure to specify {@link Scheduler.view.mixin.SchedulerEventRendering#config-resourceImagePath} to instruct the\n * column where to look for the images.\n *\n * If an image fails to load or if a resource lacks an image, the resource name initials will be rendered. If the\n * resource has an {@link Scheduler/model/mixin/ResourceModelMixin#field-eventColor} specified, it will be used as the\n * background color of the initials.\n *\n * @inlineexample Scheduler/column/ResourceInfoColumn.js\n * @classType resourceInfo\n * @extends Grid/column/Column\n * @column\n */\nexport default class ResourceInfoColumn extends Column {\n\n    static get $name() {\n        return 'ResourceInfoColumn';\n    }\n\n    static get type() {\n        return 'resourceInfo';\n    }\n\n    static get fields() {\n        return ['showEventCount', 'showRole', 'showMeta', 'showImage', 'validNames', 'autoScaleThreshold', 'useNameAsImageName'];\n    }\n\n    static get defaults() {\n        return {\n            /** @hideconfigs renderer */\n\n            /**\n             * Show image. Looks for image name in fields on the resource in the following order: 'imageUrl', 'image',\n             * 'name'. Set `showImage` to a field name to use a custom field. Set `Scheduler.resourceImagePath` to\n             * specify where to load images from. If no extension found, defaults to\n             * {@link Scheduler.view.mixin.SchedulerEventRendering#config-resourceImageExtension}.\n             * @config {Boolean}\n             * @default\n             */\n            showImage : true,\n\n            /**\n             * Show number of events assigned to the resource below the name.\n             * @config {Boolean}\n             * @default\n             */\n            showEventCount : true,\n\n            /**\n             * A template string to render any extra information about the resource below the name\n             * @config {Function}\n             * @param {Scheduler.model.ResourceModel} resourceRecord The record representing the current row\n             */\n            showMeta : null,\n\n            /**\n             * Show resource role below the name. Specify `true` to display data from the `role` field, or specify a field\n             * name to read this value from.\n             * @config {Boolean|String}\n             * @default\n             */\n            showRole : false,\n\n            /**\n             * Valid image names. Set to `null` to allow all names.\n             * @deprecated This will be removed in 6.0\n             * @config {String[]}\n             */\n            validNames : null,\n\n            /**\n             * Specify 0 to prevent the column from adapting its content according to the used row height, or specify a\n             * threshold (row height) at which scaling should start.\n             * @config {Number}\n             * @default\n             */\n            autoScaleThreshold : 40,\n\n            /**\n             * Use the resource name as the image name when no `image` is specified on the resource.\n             * @config {Boolean}\n             * @default\n             */\n            useNameAsImageName : true,\n\n            field      : 'name',\n            htmlEncode : false,\n            width      : 140,\n            cellCls    : 'b-resourceinfo-cell',\n            editor     : VersionHelper.isTestEnv ? false : 'text'\n        };\n    }\n\n    construct(...args) {\n        super.construct(...args);\n\n        this.avatarRendering = new AvatarRendering({\n            element : this.grid.element\n        });\n    }\n\n    doDestroy() {\n        super.doDestroy();\n\n        this.avatarRendering.destroy();\n    }\n\n    getImageURL(imageName) {\n        const\n            resourceImagePath = this.grid.resourceImagePath || '',\n            parts             = resourceImagePath.split('//'),\n            urlPart           = parts.length > 1 ? parts[1] : resourceImagePath,\n            joined            = StringHelper.joinPaths([urlPart || '', imageName || '']);\n\n        return parts.length > 1 ? parts[0] + '//' + joined : joined;\n    }\n\n    template(resourceRecord, value) {\n        const me        = this,\n            {\n                showImage,\n                showRole,\n                showMeta,\n                showEventCount,\n                grid\n            }         = me,\n            {\n                timeAxis,\n                resourceImageExtension = '',\n                defaultResourceImageName\n            }         = grid,\n            roleField = typeof showRole === 'string' ? showRole : 'role',\n            count     = showEventCount && resourceRecord.eventStore.getEvents({\n                includeOccurrences : grid.enableRecurringEvents,\n                resourceRecord,\n                startDate          : timeAxis.startDate,\n                endDate            : timeAxis.endDate\n            }).length;\n\n        let imageUrl;\n\n        if (showImage && resourceRecord.image !== false) {\n            if (resourceRecord.imageUrl) {\n                imageUrl = resourceRecord.imageUrl;\n            }\n            else {\n                // record.image is supposed to be a file name, located at resourceImagePath\n                const\n                    imageName = typeof showImage === 'string'\n                        ? showImage\n                        : (resourceRecord.image || value && me.useNameAsImageName && (value.toLowerCase() + resourceImageExtension) || defaultResourceImageName) || '';\n\n                imageUrl = imageName && me.getImageURL(imageName);\n\n                // Image name should have an extension\n                if (imageUrl && !imageName.includes('.')) {\n                    // If validNames is specified, check that imageName is valid\n                    if (!me.validNames || me.validNames.includes(imageName)) {\n                        imageUrl += resourceImageExtension;\n                    }\n                }\n            }\n        }\n\n        return {\n            class    : 'b-resource-info',\n            children : [\n                showImage && me.avatarRendering.getResourceAvatar({\n                    resourceRecord,\n                    initials        : resourceRecord.initials,\n                    color           : resourceRecord.eventColor,\n                    iconCls         : resourceRecord.iconCls,\n                    imageUrl,\n                    defaultImageUrl : defaultResourceImageName && this.getImageURL(defaultResourceImageName)\n                }),\n                showRole || showEventCount || showMeta ? {\n                    tag      : 'dl',\n                    children : [\n                        {\n                            tag  : 'dt',\n                            text : value\n                        },\n                        showRole ? {\n                            tag   : 'dd',\n                            class : 'b-resource-role',\n                            text  : resourceRecord[roleField]\n                        } : null,\n\n                        showEventCount ? {\n                            tag   : 'dd',\n                            class : 'b-resource-events',\n                            html  : me.L('L{eventCountText}', count)\n                        } : null,\n\n                        showMeta ? {\n                            tag   : 'dd',\n                            class : 'b-resource-meta',\n                            html  : me.showMeta(resourceRecord)\n                        } : null\n                    ]\n                } : value // This becomes a text node, no HTML encoding needed\n            ]\n        };\n\n    }\n\n    defaultRenderer({ grid, record, cellElement, value, isExport }) {\n        let result;\n\n        if (record.isSpecialRow) {\n            result = '';\n        }\n        else if (isExport) {\n            result = value;\n        }\n        else {\n            if (this.autoScaleThreshold && grid.rowHeight < this.autoScaleThreshold) {\n                cellElement.style.fontSize = (grid.rowHeight / 40) + 'em';\n            }\n            else {\n                cellElement.style.fontSize = '';\n            }\n\n            result = this.template(record, value);\n        }\n\n        return result;\n    }\n}\n\nColumnStore.registerColumnType(ResourceInfoColumn);\n","import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport DomSync from '../../Core/helper/DomSync.js';\nimport EventHelper from '../../Core/helper/EventHelper.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\nimport Editor from '../../Core/widget/Editor.js';\n\n/**\n * @module Scheduler/feature/Labels\n */\n\nconst\n    sides       = [\n        'top',\n        'before',\n        'after',\n        'bottom'\n    ],\n    editorAlign = (side, client) => {\n        switch (side) {\n            case 'top' :\n                return 'b-b';\n            case 'after' :\n                return client.rtl ? 'r-r' : 'l-l';\n            case 'right' :\n                return 'l-l';\n            case 'bottom' :\n                return 't-t';\n            case 'before' :\n                return client.rtl ? 'l-l' : 'r-r';\n            case 'left' :\n                return 'r-r';\n        }\n    },\n    topBottom   = {\n        top    : 1,\n        bottom : 1\n    },\n    layoutModes = {\n        estimate : 1,\n        measure  : 1\n    },\n    layoutSides = {\n        before : 1,\n        after  : 1\n    };\n\n/**\n * Configuration object for a label used by the Labels feature.\n * @typedef {Object} SchedulerLabelConfig\n * @property {String} field The name of a field in one of the associated records, {@link Scheduler.model.EventModel} or\n * {@link Scheduler.model.ResourceModel}. The record from which the field value is drawn will be ascertained by checking\n * for field definitions by the specified name.\n * @property {Function} renderer A function, which when passed an object containing `eventRecord`, `resourceRecord`,\n * `assignmentRecord` and `domConfig` properties, returns the HTML to display as the label\n * @property {Scheduler.model.EventModel} renderer.eventRecord\n * @property {Scheduler.model.ResourceModel} renderer.resourceRecord\n * @property {Scheduler.model.AssignmentModel} renderer.assignmentRecord\n * @property {DomConfig} renderer.domConfig\n * @property {Object} thisObj The `this` reference to use in the `renderer`.\n * @property {FieldConfig|Core.widget.Field} editor If the label is to be editable, a field configuration object with a\n * `type` property, or an instantiated Field. **The `field` property is mandatory for editing to work**.\n */\n\n/**\n * Displays labels at positions {@link #config-top}, {@link #config-right}, {@link #config-bottom} and\n * {@link #config-left}.\n *\n * Text in labels can be set from a field on the {@link Scheduler.model.EventModel} or the\n * {@link Scheduler.model.ResourceModel} or using a custom renderer.\n *\n * Since `top` and `bottom` labels occupy space that would otherwise be used by the event we recommend using bigger\n * rowHeights (>55px for both labels with default styling) and zero barMargins because `top`/`bottom` labels give space\n * around events anyway.\n *\n * To prevent labels from being overlapped by other events, see {@link #config-labelLayoutMode}.\n *\n * This feature is **off** by default. It is **not** supported in vertical mode.\n * For info on enabling it, see {@link Grid.view.mixin.GridFeatures}.\n *\n * @extends Core/mixin/InstancePlugin\n * @demo Scheduler/labels\n * @inlineexample Scheduler/feature/Labels.js\n * @classtype labels\n * @feature\n */\nexport default class Labels extends InstancePlugin {\n    //region Config\n\n    static get $name() {\n        return 'Labels';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * CSS class to apply to label elements\n             * @config {String}\n             * @default\n             */\n            labelCls : 'b-sch-label',\n\n            /**\n             * Top label configuration object.\n             * @config {SchedulerLabelConfig}\n             * @default\n             */\n            top : null,\n\n            /**\n             * Configuration object for the label which appears *after* the event bar in the current writing direction.\n             * @config {SchedulerLabelConfig}\n             * @default\n             */\n            after : null,\n\n            /**\n             * Right label configuration object.\n             * @config {SchedulerLabelConfig}\n             * @default\n             */\n            right : null,\n\n            /**\n             * Bottom label configuration object.\n             * @config {SchedulerLabelConfig}\n             * @default\n             */\n            bottom : null,\n\n            /**\n             * Configuration object for the label which appears *before* the event bar in the current writing direction.\n             * @config {SchedulerLabelConfig}\n             * @default\n             */\n            before : null,\n\n            /**\n             * Left label configuration object.\n             * @config {SchedulerLabelConfig}\n             * @default\n             */\n            left : null,\n\n            thisObj : null,\n\n            /**\n             * What action should be taken when focus moves leaves the cell editor, for example when clicking outside.\n             * May be `'complete'` or `'cancel`'.\n             * @config {'complete'|'cancel'}\n             * @default\n             */\n            blurAction : 'cancel',\n\n            /**\n             * How to handle labels during event layout. Options are:\n             *\n             * * default - Labels do not affect event layout, events will overlap labels\n             * * estimate - Label width is estimated by multiplying text length with {@link #config-labelCharWidth}\n             * * measure - Label width is determined by measuring the label, precise but slow\n             *\n             * Note that this only applies to the left and right labels, top and bottom labels does not take part in the\n             * event layout process.\n             *\n             * @config {'default'|'estimate'|'measure'}\n             * @default\n             */\n            labelLayoutMode : 'default',\n\n            /**\n             * Factor representing the average char width in pixels used to determine label width when configured\n             * with `labelLayoutMode: 'estimate'`.\n             * @config {Number}\n             * @default\n             */\n            labelCharWidth : 7\n        };\n    }\n\n    // Plugin configuration. This plugin chains some of the functions in Grid.\n    static get pluginConfig() {\n        return {\n            chain : ['onEventDataGenerated']\n        };\n    }\n\n    //endregion\n\n    //region Init & destroy\n\n    construct(scheduler, config) {\n        const me = this;\n\n        if (scheduler.isVertical) {\n            throw new Error('Labels feature is not supported in vertical mode');\n        }\n\n        me.scheduler = scheduler;\n\n        super.construct(scheduler, config);\n\n        if (me.top || me.bottom || me.before || me.after) {\n            me.updateHostClasslist();\n\n            // rowHeight warning, not in use\n            //const labelCount = !!me.topLabel + !!me.bottomLabel;\n            //if (scheduler.rowHeight < 60 - labelCount * 12) console.log('')\n        }\n    }\n\n    updateHostClasslist() {\n        const\n            { top, bottom } = this,\n            { classList }   = this.scheduler.element;\n\n        classList.remove('b-labels-topbottom');\n        classList.remove('b-labels-top');\n        classList.remove('b-labels-bottom');\n\n        // OR is correct. This means that there are labels above OR below.\n        if (top || bottom) {\n            classList.add('b-labels-topbottom');\n            if (top) {\n                classList.add('b-labels-top');\n            }\n            if (bottom) {\n                classList.add('b-labels-bottom');\n            }\n        }\n    }\n\n    onLabelDblClick(event) {\n        const\n            me        = this,\n            target    = event.target;\n\n        if (target && !me.scheduler.readOnly) {\n            const\n                { side }          = target.dataset,\n                labelConfig       = me[side],\n                { editor, field } = labelConfig;\n\n            if (editor) {\n                const eventRecord = this.scheduler.resolveEventRecord(event.target);\n\n                if (eventRecord.readOnly) {\n                    return;\n                }\n\n                if (!(editor instanceof Editor)) {\n                    labelConfig.editor = new Editor({\n                        blurAction   : me.blurAction,\n                        inputField   : editor,\n                        scrollAction : 'realign'\n                    });\n                }\n\n                // Editor removes itself from the DOM after being hidden\n                labelConfig.editor.render(me.scheduler.element);\n\n                labelConfig.editor.startEdit({\n                    target,\n                    align     : editorAlign(side, me.client),\n                    matchSize : false,\n                    record    : eventRecord,\n                    field\n                });\n\n                event.stopImmediatePropagation();\n                return false;\n            }\n        }\n    }\n\n    changeTop(top) {\n        return this.processLabelSpec(top, 'top');\n    }\n\n    updateTop() {\n        this.updateHostClasslist();\n    }\n\n    changeAfter(after) {\n        return this.processLabelSpec(after, 'after');\n    }\n\n    updateAfter() {\n        this.updateHostClasslist();\n    }\n\n    changeRight(right) {\n        this[this.client.rtl ? 'before' : 'after'] = right;\n    }\n\n    changeBottom(bottom) {\n        return this.processLabelSpec(bottom, 'bottom');\n    }\n\n    updateBottom() {\n        this.updateHostClasslist();\n    }\n\n    changeBefore(before) {\n        return this.processLabelSpec(before, 'before');\n    }\n\n    updateBefore() {\n        this.updateHostClasslist();\n    }\n\n    changeLeft(left) {\n        this[this.client.rtl ? 'after' : 'before'] = left;\n    }\n\n    processLabelSpec(labelSpec, side) {\n        if (typeof labelSpec === 'function') {\n            labelSpec = {\n                renderer : labelSpec\n            };\n        }\n        else if (typeof labelSpec === 'string') {\n            labelSpec = {\n                field : labelSpec\n            };\n        }\n        // Allow us to mutate ownProperties in the labelSpec without mutating outside object\n        else if (labelSpec) {\n            labelSpec = Object.setPrototypeOf({}, labelSpec);\n        }\n        // Clear label\n        else {\n            return null;\n        }\n\n        const\n            { scheduler }                                = this,\n            { eventStore, resourceStore, taskStore, id } = scheduler,\n            { field, editor }                            = labelSpec;\n\n        // If there are milestones, and we are changing the available height\n        // either by adding a top/bottom label, or adding a top/bottom label\n        // then during the next dependency refresh, milestone width must be recalculated.\n        if (topBottom[side]) {\n            scheduler.milestoneWidth = null;\n        }\n\n        if (eventStore && !taskStore) {\n            labelSpec.recordType = 'event';\n        }\n        else {\n            labelSpec.recordType = 'task';\n        }\n\n        // Find the field definition or property from whichever store and cache the type.\n        if (field) {\n            let\n                fieldDef,\n                fieldFound = false;\n\n            if (eventStore && !taskStore) {\n                fieldDef = eventStore.modelClass.fieldMap[field];\n                if (fieldDef) {\n                    labelSpec.fieldDef = fieldDef;\n                    labelSpec.recordType = 'event';\n                    fieldFound = true;\n                }\n                // Check if it references a property\n                else if (Reflect.has(eventStore.modelClass.prototype, field)) {\n                    labelSpec.recordType = 'event';\n                    fieldFound = true;\n                }\n            }\n\n            if (!fieldDef && taskStore) {\n                fieldDef = taskStore.modelClass.fieldMap[field];\n                if (fieldDef) {\n                    labelSpec.fieldDef = fieldDef;\n                    labelSpec.recordType = 'task';\n                    fieldFound = true;\n                }\n                // Check if it references a property\n                else if (Reflect.has(resourceStore.modelClass.prototype, field)) {\n                    labelSpec.recordType = 'task';\n                    fieldFound = true;\n                }\n            }\n\n            if (!fieldDef && resourceStore) {\n                fieldDef = resourceStore.modelClass.fieldMap[field];\n                if (fieldDef) {\n                    labelSpec.fieldDef = fieldDef;\n                    labelSpec.recordType = 'resource';\n                    fieldFound = true;\n                }\n                // Check if it references a property\n                else if (Reflect.has(resourceStore.modelClass.prototype, field)) {\n                    labelSpec.recordType = 'resource';\n                    fieldFound = true;\n                }\n            }\n            //<debug>\n            // We couldn't find the requested field in the modelClass\n            // for either of the stores.\n            if (!fieldFound) {\n                throw new Error(`Scheduler ${id} labels ${side} field ${field} does not exist in either eventStore or resourceStore`);\n            }\n            //</debug>\n\n            if (editor) {\n                if (typeof editor === 'boolean') {\n                    scheduler.editor = {\n                        type : 'textfield'\n                    };\n                }\n                else if (typeof editor === 'string') {\n                    scheduler.editor = {\n                        type : editor\n                    };\n                }\n                EventHelper.on({\n                    element  : scheduler.timeAxisSubGrid.element,\n                    delegate : '.b-sch-label',\n                    dblclick : 'onLabelDblClick',\n                    thisObj  : this\n                });\n            }\n        }\n\n        //<debug>\n        if (!labelSpec.field && !labelSpec.renderer) {\n            throw new Error(`Scheduler ${scheduler.id} labels ${side} must either have a field or a renderer`);\n        }\n        //</debug>\n\n        return labelSpec;\n    }\n\n    doDisable(disable) {\n        super.doDisable(disable);\n\n        if (this.client.isPainted) {\n            this.client.refresh();\n        }\n    }\n\n    //endregion\n\n    generateLabelConfigs(data) {\n        const\n            me      = this,\n            configs = [];\n\n        // Insert all configured labels\n        for (const side of sides) {\n            if (me[side]) {\n                const\n                    {\n                        field,\n                        fieldDef,\n                        recordType,\n                        renderer,\n                        thisObj\n                    }  = me[side],\n                    domConfig = {\n                        tag       : 'label',\n                        className : {\n                            [me.labelCls]              : 1,\n                            [`${me.labelCls}-${side}`] : 1\n                        },\n                        dataset : {\n                            side,\n                            taskFeature : `label-${side}`\n                        }\n                    };\n\n                let value;\n\n                const\n                    eventRecordProperty = `${recordType}Record`,\n                    eventRecord         = data[eventRecordProperty];\n\n                // If there's a renderer, use that by preference\n                if (renderer) {\n                    value = renderer.call(thisObj || me.thisObj || me, {\n                        [eventRecordProperty] : eventRecord,\n                        resourceRecord        : data.resourceRecord,\n                        assignmentRecord      : data.assignmentRecord,\n                        domConfig\n                    });\n                }\n                else {\n                    value = eventRecord[field];\n\n                    // If it's a date, format it according to the Scheduler's defaults\n                    if (fieldDef?.type === 'date' && !renderer) {\n                        value = DateHelper.format(value, me.client.displayDateFormat);\n                    }\n                    else {\n                        value = StringHelper.encodeHtml(value);\n                    }\n                }\n\n                domConfig.html = value || '\\xa0';\n\n                configs.push(domConfig);\n            }\n        }\n\n        return configs;\n    }\n\n    measureLabels(configs, data) {\n        const\n            me      = this,\n            pxPerMS = me.client.timeAxisViewModel.getSingleUnitInPixels('millisecond');\n\n        for (const config of configs) {\n            if (layoutSides[config.dataset.side]) {\n                let { html } = config;\n\n                let length = 0;\n\n                // Calculate length based on string length\n                if (me.labelLayoutMode === 'estimate') {\n                    // Strip tags before estimating\n                    if (html.includes('<')) {\n                        html = DomHelper.stripTags(html);\n                    }\n\n                    length = (html.length * me.labelCharWidth) + 18; // 18 = 1.5em, margin from event\n                }\n                // Measure\n                else {\n                    const element = me.labelMeasureElement || (me.labelMeasureElement = DomHelper.createElement({\n                        className : 'b-sch-event-wrap b-measure-label',\n                        parent    : me.client.foregroundCanvas\n                    }));\n\n                    // Outer DomSync should not remove\n                    element.retainElement = true;\n\n                    DomSync.sync({\n                        targetElement : element,\n                        childrenOnly  : true,\n                        domConfig     : {\n                            children : [\n                                config\n                            ]\n                        }\n                    });\n\n                    length = element.firstElementChild.offsetWidth;\n                }\n\n                // Convert from px to ms\n                const ms = length / pxPerMS;\n\n                // Adjust values used for event layout (not event position)\n                switch (config.dataset.side) {\n                    case 'before':\n                        data.startMS -= ms;\n                        break;\n                    case 'after':\n                        data.endMS += ms;\n                        break;\n                }\n            }\n        }\n    }\n\n    onEventDataGenerated(data) {\n        if (!this.disabled && !data.eventRecord?.isResourceTimeRange) {\n            const configs = this.generateLabelConfigs(data);\n\n            if (layoutModes[this.labelLayoutMode]) {\n                this.measureLabels(configs, data);\n            }\n\n            data.wrapperChildren.push(...configs);\n        }\n    }\n\n    updateLabelLayoutMode() {\n        if (!this.isConfiguring) {\n            this.client.refreshWithTransition();\n        }\n    }\n\n    updateLabelCharWidth() {\n        if (!this.isConfiguring) {\n            this.client.refreshWithTransition();\n        }\n    }\n}\n\n// TODO: Refactor the SASS, so that the auto-generated class name of ''b-' + cls.name.toLowerCase() can be used.\nLabels.featureClass = 'b-sch-labels';\n\nGridFeatureManager.registerFeature(Labels, false, 'Scheduler');\n","import GridSummary from '../../Grid/feature/Summary.js';\nimport Tooltip from '../../Core/widget/Tooltip.js';\n\n/**\n * @module Scheduler/feature/TimelineSummary\n */\n\n// noinspection JSClosureCompilerSyntax\n/**\n * Base class, not to be used directly.\n * @extends Grid/feature/Summary\n * @abstract\n */\nexport default class TimelineSummary extends GridSummary {\n    //region Config\n\n    static get $name() {\n        return 'TimelineSummary';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Show tooltip containing summary values and labels\n             * @config {Boolean}\n             * @default\n             */\n            showTooltip : true\n        };\n    }\n\n    // Plugin configuration. This plugin chains some of the functions in Grid.\n    static get pluginConfig() {\n        return {\n            chain : ['renderRows', 'updateProject']\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    construct(client, config) {\n        const me = this;\n\n        super.construct(client, config);\n\n        if (!me.summaries) {\n            me.summaries = [{ renderer : me.renderer }];\n        }\n\n        // Feature might be run from Grid (in docs), should not crash\n        // https://app.assembla.com/spaces/bryntum/tickets/6801/details\n        if (client.isTimelineBase) {\n            me.updateProject(client.project);\n\n            client.ion({\n                timeAxisViewModelUpdate : me.renderRows,\n                thisObj                 : me\n            });\n        }\n    }\n\n    //endregion\n\n    //region Render\n\n    updateProject(project) {\n        this.detachListeners('summaryProject');\n\n        project.ion({\n            name      : 'summaryProject',\n            dataReady : 'updateTimelineSummaries',\n            thisObj   : this\n        });\n    }\n\n    renderRows() {\n        if (this.client.isHorizontal) {\n            this.client.timeAxisSubGrid.footer.element.querySelector('.b-grid-footer').classList.add('b-sch-summarybar');\n        }\n\n        super.renderRows();\n\n        if (!this.disabled) {\n            this.render();\n        }\n    }\n\n    get summaryBarElement() {\n        return this.client.element.querySelector('.b-sch-summarybar');\n    }\n\n    render() {\n        const\n            me                   = this,\n            { client: timeline } = me,\n            sizeProp             = timeline.isHorizontal ? 'width' : 'height',\n            colCfg               = timeline.timeAxisViewModel.columnConfig,\n            summaryContainer     = me.summaryBarElement;\n\n        if (summaryContainer) {\n            // if any sum config has a label, init tooltip\n            if (!me._tip && me.showTooltip && me.summaries.some(config => config.label)) {\n                me._tip = new Tooltip({\n                    id             : `${timeline.id}-summary-tip`,\n                    cls            : 'b-timeaxis-summary-tip',\n                    hoverDelay     : 0,\n                    hideDelay      : 100,\n                    forElement     : summaryContainer,\n                    anchorToTarget : true,\n                    trackMouse     : false,\n                    forSelector    : '.b-timeaxis-tick',\n                    getHtml        : ({ activeTarget }) => activeTarget._tipHtml\n                });\n            }\n\n            summaryContainer.innerHTML = colCfg[colCfg.length - 1].map(col => `<div class=\"b-timeaxis-tick\" style=\"${sizeProp}: ${col.width}px\"></div>`).join('');\n\n            me.updateTimelineSummaries();\n        }\n    }\n\n    //endregion\n\n    /**\n     * Refreshes the summaries\n     */\n    refresh() {\n        super.refresh();\n        this.updateTimelineSummaries();\n    }\n\n    doDisable(disable) {\n        const { isConfiguring } = this.client;\n\n        super.doDisable(disable);\n\n        this.summaryColumn?.toggle(!disable);\n\n        if (!isConfiguring && !disable) {\n            this.render();\n        }\n    }\n\n    doDestroy() {\n        this._tip?.destroy();\n        super.doDestroy();\n    }\n}\n","export const ScheduleRange = {\n    completeview : 'completeview',\n    // completedata : 'completedata',\n    currentview  : 'currentview',\n    daterange    : 'daterange'\n};\n","import DateHelper from '../../../../Core/helper/DateHelper.js';\nimport Rectangle from '../../../../Core/helper/util/Rectangle.js';\nimport DomHelper from '../../../../Core/helper/DomHelper.js';\nimport DomSync from '../../../../Core/helper/DomSync.js';\nimport { ScheduleRange } from '../Utils.js';\n\nconst immediatePromise = Promise.resolve();\n\nexport default base => class SchedulerExporterMixin extends base {\n    async scrollRowIntoView(client, index) {\n        const\n            {\n                rowManager,\n                scrollable\n            }    = client,\n            oldY = scrollable.y;\n\n        // If it's a valid index to scroll to, then try it.\n        if (index < client.store.count) {\n            // Scroll the requested row to the viewport top\n            scrollable.scrollTo(null, rowManager.calculateTop(index));\n\n            // If that initiated a scroll, we need to wait for the row to be rendered, so return\n            // a Promise which resolves when that happens.\n            if (scrollable.y !== oldY) {\n                // GridBase adds listener to vertical scroll to update rows. Rows might be or might not be updated,\n                // but at the end of each scroll grid will trigger `scroll` event. So far this is the only scroll event\n                // triggered by the grid itself and it is different from `scroll` event on scrollable.\n                return new Promise(resolve => {\n                    const detacher = client.ion({\n                        scroll({ scrollTop }) {\n                            // future-proof: only react to scroll event with certain argument\n                            if (scrollTop != null && rowManager.getRow(index)) {\n                                detacher();\n                                resolve();\n                            }\n                        }\n                    });\n                });\n            }\n        }\n\n        // No scroll occurred. Promise must be resolved immediately\n        return immediatePromise;\n    }\n\n    async scrollToDate(client, date) {\n        let scrollFired = false;\n\n        const promises    = [];\n\n        // Time axis is updated on element scroll, which is async event. We need to synchronize this logic.\n        // If element horizontal scroll is changed then sync event is fired. We add listener to that one specific event\n        // and remove it right after scrollToDate sync code, keeping listeners clean. If scrolling occurred, we need\n        // to wait until time header is updated.\n        const detacher = client.timeAxisSubGrid.scrollable.ion({\n            scrollStart({ x }) {\n                if (x != null) {\n                    scrollFired = true;\n                }\n            }\n        });\n\n        // added `block: start` to do scrolling faster\n        // it moves data to begin of visible area that is longer section for re-render\n        promises.push(client.scrollToDate(date, { block : 'start' }));\n\n        detacher();\n\n        if (scrollFired) {\n            // We have to wait for scrollEnd event before moving forward. When exporting large view we might have to scroll\n            // extensively and it might occur that requested scroll position would not be reached because concurrent\n            // scrollEnd events would move scroll back.\n            // scrollEnd is on a 100ms timer *after* the last scroll event fired, so all necessary\n            // updated will have occurred.\n            // Covered by Gantt/tests/feature/export/MultiPageVertical.t.js\n            promises.push(client.timeAxisSubGrid.header.scrollable.await('scrollEnd', { checkLog : false }));\n        }\n\n        await Promise.all(promises);\n    }\n\n    cloneElement(element, target, clear) {\n        super.cloneElement(element, target, clear);\n\n        const clonedEl = this.element.querySelector('.b-schedulerbase');\n\n        // Remove default animation classes\n        clonedEl?.classList.remove(...['fade-in', 'slide-from-left', 'slide-from-top', 'zoom-in'].map(name => `b-initial-${name}`));\n    }\n\n    async prepareComponent(config) {\n        const\n            me                     = this,\n            { client }             = config,\n            { currentOrientation } = client,\n            includeTimeline        = client.timeAxisSubGrid.width > 0;\n\n        switch (config.scheduleRange) {\n            case ScheduleRange.completeview:\n                config.rangeStart = client.startDate;\n                config.rangeEnd   = client.endDate;\n                break;\n            case ScheduleRange.currentview: {\n                const { startDate, endDate } = client.visibleDateRange;\n                config.rangeStart = startDate;\n                config.rangeEnd = endDate;\n                break;\n            }\n        }\n\n        await client.waitForAnimations();\n\n        // Disable infinite scroll before export, so it doesn't change time span\n        config.infiniteScroll = client.infiniteScroll;\n        client.infiniteScroll = false;\n\n        // Don't change timespan if time axis subgrid is not visible\n        if (includeTimeline) {\n            // set new timespan before calling parent to get proper scheduler header/content size\n            client.setTimeSpan(config.rangeStart, config.rangeEnd);\n\n            // Access svgCanvas el to create dependency canvas early\n            // eslint-disable-next-line no-unused-expressions\n            client.svgCanvas;\n        }\n\n        // Disable event animations during export\n        me._oldEnableEventAnimations = client.enableEventAnimations;\n        client.enableEventAnimations = false;\n\n        // Add scroll buffer for the horizontal rendering\n        if (currentOrientation.isHorizontalRendering) {\n            me._oldScrollBuffer = currentOrientation.scrollBuffer;\n            me._oldVerticalBuffer = currentOrientation.verticalBufferSize;\n            currentOrientation.scrollBuffer = 100;\n            currentOrientation.verticalBufferSize = -1;\n        }\n\n        // Raise flag on the client to render all suggested dependencies\n        client.ignoreViewBox = true;\n\n        await super.prepareComponent(config);\n\n        const\n            { exportMeta, element } = me,\n            fgCanvasEl              = element.querySelector('.b-sch-foreground-canvas'),\n            timeAxisEl              = element.querySelector('.b-horizontaltimeaxis');\n\n        exportMeta.includeTimeline = includeTimeline;\n\n        if (includeTimeline && config.scheduleRange !== ScheduleRange.completeview) {\n            // If we are exporting subrange of dates we need to change subgrid size accordingly\n            exportMeta.totalWidth -= exportMeta.subGrids.normal.width;\n            exportMeta.totalWidth += exportMeta.subGrids.normal.width = client.timeAxisViewModel.getDistanceBetweenDates(config.rangeStart, config.rangeEnd);\n\n            const\n                horizontalPages = Math.ceil(exportMeta.totalWidth / exportMeta.pageWidth),\n                totalPages      = horizontalPages * exportMeta.verticalPages;\n\n            exportMeta.horizontalPages = horizontalPages;\n            exportMeta.totalPages = totalPages;\n\n            // store left scroll to imitate normal grid/header scroll using margin\n            exportMeta.subGrids.normal.scrollLeft = client.getCoordinateFromDate(config.rangeStart);\n        }\n\n        exportMeta.timeAxisHeaders = [];\n        exportMeta.timeAxisPlaceholders = [];\n        exportMeta.headersColleted = false;\n\n        DomHelper.forEachSelector(timeAxisEl, '.b-sch-header-row', headerRow => {\n            exportMeta.timeAxisPlaceholders.push(me.createPlaceholder(headerRow));\n            exportMeta.timeAxisHeaders.push(new Map());\n        });\n\n        // Add placeholder for events, clear all event elements, but not the entire elements as it contains svg canvas\n        exportMeta.subGrids.normal.eventsPlaceholder = me.createPlaceholder(fgCanvasEl, false);\n        DomHelper.removeEachSelector(fgCanvasEl, '.b-sch-event-wrap,.b-sch-resourcetimerange');\n\n        DomHelper.removeEachSelector(me.element, '.b-released');\n\n        exportMeta.eventsBoxes = new Map();\n        exportMeta.client = client;\n\n        if (client.hasActiveFeature('columnLines')) {\n            const columnLinesCanvas = element.querySelector('.b-column-lines-canvas');\n\n            exportMeta.columnLinesPlaceholder = me.createPlaceholder(columnLinesCanvas);\n\n            exportMeta.columnLines = { lines : new Map(), majorLines : new Map() };\n        }\n\n        if (client.hasActiveFeature('timeRanges')) {\n            const\n                timeRangesHeaderCanvas = element.querySelector('.b-sch-timeaxiscolumn .b-sch-timeranges-canvas'),\n                timeRangesBodyCanvas = element.querySelector('.b-sch-foreground-canvas .b-sch-timeranges-canvas');\n\n            exportMeta.timeRanges = {};\n\n            // header is optional\n            if (timeRangesHeaderCanvas) {\n                exportMeta.timeRanges.header = {};\n                exportMeta.timeRangesHeaderPlaceholder = me.createPlaceholder(timeRangesHeaderCanvas);\n            }\n\n            exportMeta.timeRanges.body = {};\n            exportMeta.timeRangesBodyPlaceholder = me.createPlaceholder(timeRangesBodyCanvas);\n        }\n\n        if (client.hasActiveFeature('dependencies')) {\n            client.features.dependencies.fillDrawingCache();\n\n            const svgCanvasEl = element.querySelector(`[id=\"${client.svgCanvas.getAttribute('id')}\"]`);\n\n            // Same as above, clear only dependency lines, because there might be markers added by user\n            if (svgCanvasEl) {\n                exportMeta.dependencyCanvasEl = svgCanvasEl;\n\n                exportMeta.dependenciesPlaceholder = me.createPlaceholder(svgCanvasEl, false, {\n                    ns  : 'http://www.w3.org/2000/svg',\n                    tag : 'path'\n                });\n                DomHelper.removeEachSelector(svgCanvasEl, '.b-sch-dependency');\n            }\n        }\n\n        // We need to scroll component to date to calculate correct start margin\n        if (includeTimeline && !DateHelper.betweenLesser(config.rangeStart, client.startDate, client.endDate)) {\n            await me.scrollToDate(client, config.rangeStart);\n        }\n    }\n\n    async restoreState(config) {\n        let waitForHorizontalScroll = false;\n\n        const\n            { client } = config,\n            promises = [];\n\n        // If scroll will be changed during restoring state (and it will likely be), raise a flag that exporter should\n        // wait for scrollEnd event before releasing control\n        const detacher = client.timeAxisSubGrid.scrollable.ion({\n            scrollStart({ x }) {\n                // HACK: scrollStart might actually fire when scroll is set to existing value\n                if (this.element.scrollLeft !== x) {\n                    waitForHorizontalScroll = true;\n                }\n            }\n        });\n\n        promises.push(super.restoreState(config));\n\n        // Scroll start will be fired synchronously\n        detacher();\n\n        if (waitForHorizontalScroll) {\n            promises.push(client.timeAxisSubGrid.header.scrollable.await('scrollEnd', { checkLog : false }));\n        }\n\n        await Promise.all(promises);\n    }\n\n    async restoreComponent(config) {\n        const\n            { client }             = config,\n            { currentOrientation } = client;\n\n        client.ignoreViewBox = false;\n\n        client.infiniteScroll = config.infiniteScroll;\n\n        client.enableEventAnimations = this._oldEnableEventAnimations;\n\n        if (currentOrientation.isHorizontalRendering) {\n            currentOrientation.scrollBuffer = this._oldScrollBuffer;\n            currentOrientation.verticalBufferSize = this._oldVerticalBuffer;\n        }\n\n        await super.restoreComponent(config);\n    }\n\n    async onRowsCollected(rows, config) {\n        const me = this;\n\n        await super.onRowsCollected(rows, config);\n\n        // Only collect this data if timeline is visible\n        if (me.exportMeta.includeTimeline) {\n            const\n                { client, enableDirectRendering } = config,\n                { timeView }                      = client,\n                { pageRangeStart, pageRangeEnd }  = me.getCurrentPageDateRange(config);\n\n            if (enableDirectRendering) {\n                // If first page does not include timeline we don't need to render anything for it\n                if (pageRangeStart && pageRangeEnd) {\n                    me.renderHeaders(config, pageRangeStart, pageRangeEnd);\n\n                    me.renderLines(config, pageRangeStart, pageRangeEnd);\n\n                    me.renderRanges(config, pageRangeStart, pageRangeEnd);\n\n                    me.renderEvents(config, rows, pageRangeStart, pageRangeEnd);\n                }\n            }\n            else {\n                // Exported page may not contain timeline view, in which case we need to fall through\n                if (pageRangeStart) {\n                    let rangeProcessed = false;\n\n                    await me.scrollToDate(client, pageRangeStart);\n\n                    // Time axis and events are only rendered for the visible time span\n                    // we need to scroll the view and gather events/timeline elements\n                    // while (timeView.endDate <= config.rangeEnd) {\n                    while (!rangeProcessed) {\n                        me.collectLines(config);\n\n                        me.collectHeaders(config);\n\n                        me.collectRanges(config);\n\n                        me.collectEvents(rows, config);\n\n                        if (DateHelper.timeSpanContains(timeView.startDate, timeView.endDate, pageRangeStart, pageRangeEnd)) {\n                            rangeProcessed = true;\n                        }\n                        else if (timeView.endDate.getTime() >= pageRangeEnd.getTime()) {\n                            rangeProcessed = true;\n                        }\n                        else {\n                            const endDate = timeView.endDate;\n\n                            await me.scrollToDate(client, timeView.endDate);\n\n                            // If timeview end date is same as before scroll it means client is not able to scroll to date\n                            // and will go into infinite loop unless we stop it\n                            if (endDate.getTime() === timeView.endDate.getTime()) {\n                                throw new Error('Could not scroll to date');\n                            }\n                        }\n                    }\n                }\n\n                await me.scrollToDate(client, config.rangeStart);\n            }\n        }\n    }\n\n    getCurrentPageDateRange({ rangeStart, rangeEnd, enableDirectRendering, client }) {\n        const\n            me = this,\n            { exportMeta } = me,\n            { horizontalPages, horizontalPosition, pageWidth, subGrids } = exportMeta;\n\n        let pageRangeStart, pageRangeEnd;\n\n        // when exporting to multiple pages we only need to scroll sub-range within visible time span\n        if (horizontalPages > 1) {\n            const\n                pageStartX = horizontalPosition * pageWidth,\n                pageEndX   = (horizontalPosition + 1) * pageWidth,\n                // Assuming normal grid is right next to right side of the locked grid\n                // There is also a default splitter\n                normalGridX = subGrids.locked.width + subGrids.locked.splitterWidth;\n\n            if (pageEndX <= normalGridX) {\n                pageRangeEnd = pageRangeStart = null;\n            }\n            else {\n                const { scrollLeft = 0 } = subGrids.normal;\n\n                pageRangeStart = client.getDateFromCoordinate(Math.max(pageStartX - normalGridX + scrollLeft, 0));\n\n                // Extend visible schedule by 20% to cover up possible splitter\n                const multiplier = enableDirectRendering ? 1 : 1.2;\n\n                pageRangeEnd = client.getDateFromCoordinate((pageEndX - normalGridX + scrollLeft) * multiplier) || rangeEnd;\n            }\n        }\n        else {\n            pageRangeStart = rangeStart;\n            pageRangeEnd   = rangeEnd;\n        }\n\n        return {\n            pageRangeStart,\n            pageRangeEnd\n        };\n    }\n\n    prepareExportElement() {\n        const\n            { element, exportMeta }                = this,\n            { id, headerId, footerId, scrollLeft } = exportMeta.subGrids.normal,\n            el                                     = element.querySelector(`[id=\"${id}\"]`);\n\n        ['.b-sch-background-canvas', '.b-sch-foreground-canvas'].forEach(selector => {\n            const canvasEl = el.querySelector(selector);\n\n            if (canvasEl) {\n                // Align canvases to last exported row bottom. If no such property exists - remove inline height\n                if (exportMeta.lastExportedRowBottom) {\n                    canvasEl.style.height = `${exportMeta.lastExportedRowBottom}px`;\n                }\n                else {\n                    canvasEl.style.height = '';\n                }\n\n                // Simulate horizontal scroll\n                if (scrollLeft) {\n                    canvasEl.style.marginLeft = `-${scrollLeft}px`;\n                }\n            }\n        });\n\n        if (scrollLeft) {\n            [headerId, footerId].forEach(id => {\n                const el = element.querySelector(`[id=\"${id}\"] .b-widget-scroller`);\n                if (el) {\n                    el.style.marginLeft = `-${scrollLeft}px`;\n                }\n            });\n        }\n\n        return super.prepareExportElement();\n    }\n\n    collectHeaders(config) {\n        const\n            me             = this,\n            { client }     = config,\n            { exportMeta } = me;\n\n        // We only need to collect headers once, this flag is raised once they are collected along all exported range\n        if (!exportMeta.headersCollected) {\n            const\n                timeAxisEl = client.timeView.element,\n                timeAxisHeaders = exportMeta.timeAxisHeaders;\n\n            DomHelper.forEachSelector(timeAxisEl, '.b-sch-header-row', (headerRow, index, headerRows) => {\n                const headersMap = timeAxisHeaders[index];\n\n                DomHelper.forEachSelector(headerRow, '.b-sch-header-timeaxis-cell', el => {\n                    if (!headersMap.has(el.dataset.tickIndex)) {\n                        headersMap.set(el.dataset.tickIndex, el.outerHTML);\n                    }\n                });\n\n                if (index === headerRows.length - 1 && headersMap.has(String(client.timeAxis.count - 1))) {\n                    exportMeta.headersCollected = true;\n                }\n            });\n        }\n    }\n\n    collectRanges(config) {\n        const\n            me             = this,\n            { client }     = config,\n            { exportMeta } = me,\n            { timeRanges } = exportMeta;\n\n        if (!exportMeta.headersCollected && timeRanges) {\n            const\n                { headerCanvas, bodyCanvas } = client.features.timeRanges;\n\n            if (headerCanvas) {\n                DomHelper.forEachSelector(headerCanvas, '.b-sch-timerange', el => {\n                    timeRanges.header[el.dataset.id] = el.outerHTML;\n                });\n            }\n\n            DomHelper.forEachSelector(bodyCanvas, '.b-sch-timerange', el => {\n                timeRanges.body[el.dataset.id] = el.outerHTML;\n            });\n        }\n    }\n\n    collectLines(config) {\n        const\n            me              = this,\n            { client }      = config,\n            { exportMeta }  = me,\n            { columnLines } = exportMeta;\n\n        if (!exportMeta.headersCollected && columnLines) {\n            const bgCanvas = client.backgroundCanvas;\n\n            DomHelper.forEachSelector(bgCanvas, '.b-column-line, .b-column-line-major', (lineEl) => {\n                if (lineEl.classList.contains('b-column-line')) {\n                    const lineIndex = Number(lineEl.dataset.line.replace(/line-/, ''));\n\n                    columnLines.lines.set(lineIndex, lineEl.outerHTML);\n                }\n                else {\n                    const lineIndex = Number(lineEl.dataset.line.replace(/major-/, ''));\n\n                    columnLines.majorLines.set(lineIndex, lineEl.outerHTML);\n                }\n            });\n        }\n    }\n\n    collectEvents(rows, config) {\n        const\n            me         = this,\n            addedRows  = rows.length,\n            { client } = config,\n            normalRows = me.exportMeta.subGrids.normal.rows;\n\n        rows.forEach((row, index) => {\n            const\n                rowConfig = normalRows[normalRows.length - addedRows + index],\n                resource  = client.store.getAt(row.dataIndex),\n                eventsMap = rowConfig[3];\n\n            resource.events?.forEach(event => {\n                if (event.isScheduled) {\n                    let el = client.getElementFromEventRecord(event, resource);\n\n                    if (el && (el = el.parentElement) && !eventsMap.has(event.id)) {\n                        eventsMap.set(event.id, [el.outerHTML, Rectangle.from(el, el.offsetParent)]);\n                    }\n                }\n            });\n\n            resource.timeRanges?.forEach(timeRange => {\n                const\n                    elId = client.features.resourceTimeRanges?.generateElementId(timeRange) || '',\n                    el   = client.foregroundCanvas.syncIdMap[elId];\n\n                if (el && !eventsMap.has(elId)) {\n                    eventsMap.set(elId, [el.outerHTML, Rectangle.from(el, el.offsetParent)]);\n                }\n            });\n        });\n    }\n\n    //#region Direct rendering\n\n    renderHeaders(config, start, end) {\n        const\n            me               = this,\n            { exportMeta }   = me,\n            { client }       = config,\n            timeAxisHeaders  = exportMeta.timeAxisHeaders,\n            // Get the time axis view reference that we will use to build cells for specific time ranges\n            { timeAxisView } = client.timeAxisColumn,\n            domConfig        = timeAxisView.buildCells(start, end),\n            targetElement    = document.createElement('div');\n\n        DomSync.sync({\n            targetElement,\n            domConfig\n        });\n\n        DomHelper.forEachSelector(targetElement, '.b-sch-header-row', (headerRow, index) => {\n            const headersMap = timeAxisHeaders[index];\n\n            DomHelper.forEachSelector(headerRow, '.b-sch-header-timeaxis-cell', el => {\n                if (!headersMap.has(el.dataset.tickIndex)) {\n                    headersMap.set(el.dataset.tickIndex, el.outerHTML);\n                }\n            });\n        });\n    }\n\n    renderEvents(config, rows, start, end) {\n        const\n            me         = this,\n            { client } = config,\n            normalRows = me.exportMeta.subGrids.normal.rows;\n\n        rows.forEach((row, index) => {\n            const\n                rowConfig      = normalRows[index],\n                eventsMap      = rowConfig[3],\n                resource       = client.store.getAt(row.dataIndex),\n                resourceLayout = client.currentOrientation.getResourceLayout(resource),\n                left           = client.getCoordinateFromDate(start),\n                right          = client.getCoordinateFromDate(end),\n                eventDOMConfigs = client.currentOrientation.getEventDOMConfigForCurrentView(resourceLayout, row, left, right),\n                targetElement   = document.createElement('div');\n\n            eventDOMConfigs.forEach(domConfig => {\n                const\n                    { eventId }                  = domConfig.dataset,\n                    { left, top, width, height } = domConfig.style;\n\n                DomSync.sync({\n                    targetElement,\n                    domConfig\n                });\n\n                eventsMap.set(eventId, [targetElement.outerHTML, new Rectangle(left, top, width, height)]);\n            });\n        });\n    }\n\n    renderLines(config, start, end) {\n        const\n            me              = this,\n            { client }      = config,\n            { exportMeta }  = me,\n            { columnLines } = exportMeta;\n\n        if (columnLines) {\n            const\n                domConfigs    = client.features.columnLines.getColumnLinesDOMConfig(start, end),\n                targetElement = document.createElement('div');\n\n            DomSync.sync({\n                targetElement,\n                domConfig : {\n                    children : domConfigs\n                },\n                onlyChildren : true\n            });\n\n            // Put all lines HTML to a single key in the set. That allows us to share code path with legacy export mode\n            columnLines.lines.set(0, targetElement.innerHTML);\n        }\n    }\n\n    renderRanges(config, start, end) {\n        const\n            me             = this,\n            { client }     = config,\n            { exportMeta } = me,\n            { timeRanges } = exportMeta;\n\n        if (timeRanges) {\n            const\n                domConfigs    = client.features.timeRanges.getDOMConfig(start, end),\n                targetElement = document.createElement('div');\n\n            // domConfigs is an array of two elements - first includes time range configs for body, second - for head\n            domConfigs.forEach((children, i) => {\n                DomSync.sync({\n                    targetElement,\n                    domConfig : {\n                        children,\n                        onlyChildren : true\n                    }\n                });\n\n                // body configs\n                if (i === 0) {\n                    timeRanges.body = targetElement.innerHTML;\n                }\n                // header configs\n                else {\n                    timeRanges.header = targetElement.innerHTML;\n                }\n            });\n        }\n    }\n\n    //#endregion\n\n    buildPageHtml(config) {\n        const\n            me = this,\n            {\n                subGrids,\n                timeAxisHeaders,\n                timeAxisPlaceholders,\n                columnLines,\n                columnLinesPlaceholder,\n                timeRanges,\n                timeRangesHeaderPlaceholder,\n                timeRangesBodyPlaceholder\n            }  = me.exportMeta,\n            { enableDirectRendering } = config;\n\n        // Now when rows are collected, we need to add them to exported grid\n        let html = me.prepareExportElement();\n\n        Object.values(subGrids).forEach(({ placeHolder, eventsPlaceholder, rows, mergedCellsHtml }) => {\n            const\n                placeHolderText       = placeHolder.outerHTML,\n                // Rows can be repositioned, in which case event related to that row should also be translated\n                { resources, events } = me.positionRows(rows, config);\n\n            let contentHtml =  resources.join('');\n\n            if (mergedCellsHtml?.length) {\n                contentHtml += `<div class=\"b-grid-merged-cells-container\">${mergedCellsHtml.join('')}</div>`;\n            }\n\n            html = html.replace(placeHolderText, contentHtml);\n\n            if (eventsPlaceholder) {\n                html = html.replace(eventsPlaceholder.outerHTML, events.join(''));\n            }\n        });\n\n        timeAxisHeaders.forEach((headers, index) => {\n            html = html.replace(timeAxisPlaceholders[index].outerHTML, Array.from(headers.values()).join(''));\n        });\n\n        if (columnLines) {\n            const lineElements = Array.from(columnLines.lines.values()).concat(Array.from(columnLines.majorLines.values()));\n\n            html = html.replace(columnLinesPlaceholder.outerHTML, lineElements.join(''));\n\n            // Lines are collected once for old mode, don't clear them\n            if (enableDirectRendering) {\n                me.exportMeta.columnLines.lines.clear();\n                me.exportMeta.columnLines.majorLines.clear();\n            }\n        }\n\n        if (timeRanges) {\n            if (enableDirectRendering) {\n                html = html.replace(timeRangesBodyPlaceholder.outerHTML, timeRanges.body);\n\n                // time ranges header element is optional\n                if (timeRangesHeaderPlaceholder) {\n                    html = html.replace(timeRangesHeaderPlaceholder.outerHTML, timeRanges.header);\n                }\n\n                me.exportMeta.timeRanges = {};\n            }\n            else {\n                html = html.replace(timeRangesBodyPlaceholder.outerHTML, Object.values(timeRanges.body).join(''));\n\n                // time ranges header element is optional\n                if (timeRangesHeaderPlaceholder) {\n                    html = html.replace(timeRangesHeaderPlaceholder.outerHTML, Object.values(timeRanges.body).join(''));\n                }\n            }\n        }\n\n        html = me.buildDependenciesHtml(html);\n\n        return html;\n    }\n\n    getEventBox(event) {\n        const\n            me = this,\n            {\n                eventsBoxes,\n                enableDirectRendering\n            } = me.exportMeta;\n\n        const box = event && eventsBoxes.get(String(event.id));\n\n        // In scheduler milestone box left edge is aligned with milestone start date. Later element is rotated and\n        // shifted by CSS by 50% of its width. Dependency feature relies on actual element sizes, but pdf export\n        // does not render actual elements. Therefore, we need to adjust the box.\n        // TODO: RTL support?\n        if (enableDirectRendering && box && event.isMilestone) {\n            box.translate(-box.width / 2, 0);\n        }\n\n        return box;\n    }\n\n    renderDependencies() {\n        const\n            me                = this,\n            {\n                client,\n                eventsBoxes\n            }                 = me.exportMeta,\n            { dependencies }  = client,\n            dependencyFeature = client.features.dependencies,\n            targetElement     = DomHelper.createElement();\n\n        let draw = false;\n\n        dependencies.forEach(dependency => {\n            if ((!eventsBoxes.has(String(dependency.from)) &&\n                !eventsBoxes.has(String(dependency.to))) ||\n                !dependencyFeature.isDependencyVisible(dependency)) {\n                return;\n            }\n\n            const\n                fromBox = me.getEventBox(dependency.fromEvent),\n                toBox   = me.getEventBox(dependency.toEvent);\n\n            dependencyFeature.drawDependency(dependency, true, { from : fromBox?.clone(), to : toBox?.clone() });\n            draw = true;\n        });\n\n        // Force dom sync\n        if (draw) {\n            dependencyFeature.domSync(targetElement);\n        }\n\n        return targetElement.innerHTML;\n    }\n\n    buildDependenciesHtml(html) {\n        const { dependenciesPlaceholder, includeTimeline } = this.exportMeta;\n\n        if (dependenciesPlaceholder && includeTimeline) {\n            const placeholder = dependenciesPlaceholder.outerHTML;\n            html = html.replace(placeholder, this.renderDependencies());\n        }\n\n        return html;\n    }\n};\n","import GridMultiPageExporter from '../../../../Grid/feature/export/exporter/MultiPageExporter.js';\nimport SchedulerExporterMixin from './SchedulerExporterMixin.js';\n\n/**\n * @module Scheduler/feature/export/exporter/MultiPageExporter\n */\n\n/**\n * A multiple page exporter. Used by the {@link Scheduler.feature.export.PdfExport} feature to export to multiple pages.\n * You do not need to use this class directly.\n *\n * ### Extending exporter\n *\n * ```javascript\n * class MyMultiPageExporter extends MultiPageExporter {\n *     // type is required for exporter\n *     static get type() {\n *         return 'mymultipageexporter';\n *     }\n *\n *     get stylesheets() {\n *         const stylesheets = super.stylesheets;\n *\n *         stylesheets.forEach(styleNodeOrLinkTag => doSmth(styleNodeOrLinkTag))\n *\n *         return stylesheets;\n *     }\n * }\n *\n * const scheduler = new Scheduler({\n *     features : {\n *         pdfExport : {\n *             // this export feature is configured with only one exporter\n *             exporters : [MyMultiPageExporter]\n *         }\n *     }\n * });\n *\n * // run export with the new exporter\n * scheduler.features.pdfExport.export({ exporter : 'mymultipageexporter' });\n * ```\n *\n * @classType multipage\n * @feature\n * @extends Grid/feature/export/exporter/MultiPageExporter\n * @typings Grid/feature/export/exporter/MultiPageExporter -> Grid/feature/export/exporter/GridMultiPageExporter\n */\nexport default class MultiPageExporter extends SchedulerExporterMixin(GridMultiPageExporter) {\n\n    static get $name() {\n        return 'MultiPageExporter';\n    }\n\n    static get type() {\n        return 'multipage';\n    }\n\n    async stateNextPage(config) {\n        await super.stateNextPage(config);\n\n        this.exportMeta.eventsBoxes.clear();\n    }\n\n    positionRows(rows) {\n        const\n            resources   = [],\n            events      = [];\n\n        // In case of variable row height row vertical position is not guaranteed to increase\n        // monotonously. Position row manually instead\n        rows.forEach(([html, top, height, eventsHtml]) => {\n            resources.push(html);\n            eventsHtml && Array.from(eventsHtml.entries()).forEach(([key, [html, box, extras = []]]) => {\n                events.push(html + extras.join(''));\n\n                // Store event box to render dependencies later\n                this.exportMeta.eventsBoxes.set(String(key), box);\n            });\n        });\n\n        return { resources, events };\n    }\n}\n","import GridMultiPageVerticalExporter from '../../../../Grid/feature/export/exporter/MultiPageVerticalExporter.js';\nimport SchedulerExporterMixin from './SchedulerExporterMixin.js';\nimport { ScheduleRange } from '../Utils.js';\n\n/**\n * @module Scheduler/feature/export/exporter/MultiPageVerticalExporter\n */\n\n/**\n * A vertical multiple page exporter. Used by the {@link Scheduler.feature.export.PdfExport} feature to export to\n * multiple pages. Content will be scaled in a horizontal direction to fit the page.\n *\n * You do not need to use this class directly.\n *\n * ### Extending exporter\n *\n * ```javascript\n * class MyMultiPageVerticalExporter extends MultiPageVerticalExporter {\n *     // type is required for exporter\n *     static get type() {\n *         return 'mymultipageverticalexporter';\n *     }\n *\n *     get stylesheets() {\n *         const stylesheets = super.stylesheets;\n *\n *         stylesheets.forEach(styleNodeOrLinkTag => doSmth(styleNodeOrLinkTag))\n *\n *         return stylesheets;\n *     }\n * }\n *\n * const scheduler = new Scheduler({\n *     features : {\n *         pdfExport : {\n *             // this export feature is configured with only one exporter\n *             exporters : [MyMultiPageVerticalExporter]\n *         }\n *     }\n * });\n *\n * // run export with the new exporter\n * scheduler.features.pdfExport.export({ exporter : 'mymultipageverticalexporter' });\n * ```\n *\n * @classType multipagevertical\n * @feature\n * @extends Grid/feature/export/exporter/MultiPageVerticalExporter\n * @typings Grid/feature/export/exporter/MultiPageVerticalExporter -> Grid/feature/export/exporter/GridMultiPageVerticalExporter\n */\nexport default class MultiPageVerticalExporter extends SchedulerExporterMixin(GridMultiPageVerticalExporter) {\n\n    static get $name() {\n        return 'MultiPageVerticalExporter';\n    }\n\n    static get type() {\n        return 'multipagevertical';\n    }\n\n    async stateNextPage(config) {\n        await super.stateNextPage(config);\n\n        this.exportMeta.eventsBoxes.clear();\n    }\n\n    async prepareComponent(config) {\n        await super.prepareComponent(config);\n\n        // Scheduler exporter mixin can update totalWidth, so we need to adjust pages and scale here again\n        if (config.scheduleRange !== ScheduleRange.completeview) {\n            this.estimateTotalPages(config);\n        }\n    }\n\n    positionRows(rows) {\n        const\n            resources   = [],\n            events      = [];\n\n        // In case of variable row height row vertical position is not guaranteed to increase\n        // monotonously. Position row manually instead\n        rows.forEach(([html, , , eventsHtml]) => {\n            resources.push(html);\n            eventsHtml && Array.from(eventsHtml.entries()).forEach(([key, [html, box, extras = []]]) => {\n                events.push(html + extras.join(''));\n\n                // Store event box to render dependencies later\n                this.exportMeta.eventsBoxes.set(String(key), box);\n            });\n        });\n\n        return { resources, events };\n    }\n}\n","import { ScheduleRange } from '../../../feature/export/Utils.js';\nimport Combo from '../../../../Core/widget/Combo.js';\n\nexport default class ScheduleRangeCombo extends Combo {\n    static get $name() {\n        return 'ScheduleRangeCombo';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'schedulerangecombo';\n    }\n\n    static get defaultConfig() {\n        return {\n            editable              : false,\n            localizeDisplayFields : true,\n            displayField          : 'text',\n            buildItems() {\n                // Do not remove. Assertion strings for Localization sanity check.\n                // 'L{completeview}'\n                // 'L{currentview}'\n                // 'L{daterange}'\n                // 'L{completedata}'\n                return Object.entries(ScheduleRange).map(([id, text]) => ({ value : id, text : 'L{' + text + '}' }));\n            }\n        };\n    }\n}\n\n// Register this widget type with its Factory\nScheduleRangeCombo.initClass();\n","import DateHelper from '../../../Core/helper/DateHelper.js';\nimport GridExportDialog from '../../../Grid/view/export/ExportDialog.js';\nimport { ScheduleRange } from '../../feature/export/Utils.js';\nimport '../../view/export/field/ScheduleRangeCombo.js';\nimport Field from '../../../Core/widget/Field.js';\n\n/**\n * @module Scheduler/view/export/SchedulerExportDialog\n */\n\n/**\n * Extends the Grid's {@link Grid.view.export.ExportDialog} and adds a few extra fields specific to the scheduler.\n *\n * ## Default widgets\n *\n * The default widgets of this dialog are:\n *\n * | Widget ref             | Type                                     | Weight | Description                                          |\n * |------------------------|------------------------------------------|--------|----------------------------------------------------- |\n * | `columnsField`         | {@link Core.widget.Combo Combo}          | 100    | Choose columns to export                             |\n * | `scheduleRangeField`   | {@link Core.widget.Combo Combo}          | 150    | Choose date range to export                          |\n * | `rangesContainer`      | {@link Core.widget.Container Container}  | 151    | Container for range fields                           |\n * | \\>`rangeStartField`    | {@link Core.widget.DateField DateField}  | 10     | Choose date range start                              |\n * | \\>`rangeEndField`      | {@link Core.widget.DateField DateField}  | 30     | Choose date range end                                |\n * | `rowsRangeField`       | {@link Core.widget.Combo Combo}          | 200    | Choose which rows to export                          |\n * | `exporterTypeField`    | {@link Core.widget.Combo Combo}          | 300    | Type of the exporter to use                          |\n * | `alignRowsField`       | {@link Core.widget.Checkbox Checkbox}    | 400    | Align row top to the page top on every exported page |\n * | `repeatHeaderField`    | {@link Core.widget.Checkbox Checkbox}    | 500    | Toggle repeating headers on / off                    |\n * | `fileFormatField`      | {@link Core.widget.Combo Combo}          | 600    | Choose file format                                   |\n * | `paperFormatField`     | {@link Core.widget.Combo Combo}          | 700    | Choose paper format                                  |\n * | `orientationField`     | {@link Core.widget.Combo Combo}          | 800    | Choose orientation                                   |\n *\n * The default buttons are:\n *\n * | Widget ref             | Type                                     | Weight | Description                                          |\n * |------------------------|------------------------------------------|--------|------------------------------------------------------|\n * | `exportButton`         | {@link Core.widget.Button Button}        | 100    | Triggers export                                      |\n * | `cancelButton`         | {@link Core.widget.Button Button}        | 200    | Cancel export                                        |\n *\n * *\\> nested items*\n *\n * ## Configuring default widgets\n *\n * Widgets can be customized with {@link Scheduler.feature.export.PdfExport#config-exportDialog} config:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     features : {\n *         pdfExport : {\n *             exportDialog : {\n *                 items : {\n *                     // hide the field\n *                     orientationField  : { hidden : true },\n *\n *                     // reorder fields\n *                     exporterTypeField : { weight : 150 },\n *\n *                     // change default format in exporter\n *                     fileFormatField   : { value : 'png' },\n *\n *                     // Configure nested fields\n *                     rangesContainer : {\n *                         items : {\n *                             rangeStartField : { value : new Date() },\n *                             rangeEndField : { value : new Date() }\n *                         }\n *                     }\n *                 }\n *             }\n *         }\n *     }\n * });\n *\n * scheduler.features.pdfExport.showExportDialog();\n * ```\n *\n * ## Using DateTime fields for range start/end\n *\n * This config system is also capable (but not limited to) of changing layout of the container and replacing widget type:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     features : {\n *         pdfExport : {\n *             exportDialog : {\n *                 items : {\n *                     rangesContainer : {\n *                         // DateTime fields are longer, so we better lay them out\n *                         // vertically\n *                         layoutStyle : {\n *                             flexDirection : 'column'\n *                         },\n *                         items : {\n *                             rangeStartField : {\n *                                 // Use DateTime widget for ranges\n *                                 type       : 'datetime',\n *\n *                                 // Sync label width with other fields\n *                                 labelWidth : '12em'\n *                             },\n *                             rangeEndField : {\n *                                 type       : 'datetime',\n *                                 labelWidth : '12em'\n *                             },\n *                             // Add a filler widget that would add a margin at the bottom\n *                             filler : {\n *                                 height : '0.6em',\n *                                 weight : 900\n *                             }\n *                         }\n *                     }\n *                 }\n *             }\n *         }\n *     }\n * });\n *\n * ```\n *\n * ## Configuring default columns\n *\n * By default all visible columns are selected in the export dialog. This is managed by\n * {@link #config-autoSelectVisibleColumns} config. To change default selected columns you should disable this config\n * and set field value. Value should be an array of valid column ids (or column instances). This way you can\n * preselect hidden columns:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     columns : [\n *         { id : 'name', text : 'Name', field : 'name' },\n *         { id : 'age', text : 'Age', field : 'age' },\n *         { id : 'city', text : 'City', field : 'city', hidden : true }\n *     ],\n *     features : {\n *         pdfExport : {\n *             exportDialog : {\n *                 autoSelectVisibleColumns : false,\n *                 items : {\n *                     columnsField : { value : ['name', 'city'] }\n *                 }\n *             }\n *         }\n *     }\n * })\n *\n * // This will show export dialog with Name and City columns selected\n * // even though City column is hidden in the UI\n * scheduler.features.pdfExport.showExportDialog();\n * ```\n *\n * ## Adding fields\n *\n * You can add your own fields to the export dialog. To make such field value acessible to the feature it should follow\n * naming pattern - it should have `ref` config ending with `Field`, see other fields for reference - `orientationField`,\n * `columnsField`, etc. Fields not matching this pattern are ignored. When values are collected from the dialog, `Field`\n * part of the widget reference is removed, so `orientationField` becomes `orientation`, `fooField` becomes `foo`, etc.\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         pdfExport : {\n *             exportDialog : {\n *                 items : {\n *                     // This field gets into export config\n *                     fooField : {\n *                         type : 'text',\n *                         label : 'Foo',\n *                         value : 'FOO'\n *                     },\n *\n *                     // This one does not, because name doesn't end with `Field`\n *                     bar : {\n *                         type : 'text',\n *                         label : 'Bar',\n *                         value : 'BAR'\n *                     },\n *\n *                     // Add a container widget to wrap some fields together\n *                     myContainer : {\n *                         type : 'container',\n *                         items : {\n *                             // This one gets into config too despite the nesting level\n *                             bazField : {\n *                                 type : 'text',\n *                                 label : 'Baz',\n *                                 value : 'BAZ'\n *                             }\n *                         }\n *                     }\n *                 }\n *             }\n *         }\n *     }\n * });\n *\n * // Assuming export dialog is opened and export triggered with default values\n * // you can receive custom field values here\n * grid.on({\n *     beforePdfExport({ config }) {\n *         console.log(config.foo) // 'FOO'\n *         console.log(config.bar) // undefined\n *         console.log(config.baz) // 'BAZ'\n *     }\n * });\n * ```\n *\n * ## Configuring widgets at runtime\n *\n * If you don't know column ids before grid instantiation or you want a flexible config, you can change widget values\n * before dialog pops up:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     columns : [\n *         { id : 'name', text : 'Name', field : 'name' },\n *         { id : 'age', text : 'Age', field : 'age' },\n *         { id : 'city', text : 'City', field : 'city', hidden : true }\n *     ],\n *     features : {\n *         pdfExport : true\n *     }\n * });\n *\n * // Such listener would ignore autoSelectVisibleColumns config. Similar to the snippet\n * // above this will show Name and City columns\n * scheduler.features.pdfExport.exportDialog.on({\n *     beforeShow() {\n *         this.widgetMap.columnsField.value = ['age', 'city']\n *     }\n * });\n * ```\n *\n * @extends Grid/view/export/ExportDialog\n */\nexport default class SchedulerExportDialog extends GridExportDialog {\n\n    //region Config\n\n    static get $name() {\n        return 'SchedulerExportDialog';\n    }\n\n    static get type() {\n        return 'schedulerexportdialog';\n    }\n\n    static get configurable() {\n        return {\n            defaults : {\n                localeClass : this\n            },\n            items : {\n                scheduleRangeField : {\n                    type   : 'schedulerangecombo',\n                    label  : 'L{Schedule range}',\n                    value  : 'completeview',\n                    weight : 150,\n                    onChange({ value }) {\n                        this.parent.widgetMap.rangesContainer.hidden = value !== ScheduleRange.daterange;\n                    }\n                },\n                rangesContainer : {\n                    type     : 'container',\n                    flex     : '1 0 100%',\n                    weight   : 151,\n                    hidden   : true,\n                    defaults : {\n                        localeClass : this\n                    },\n                    items : {\n                        filler : {\n                            // Filler widget to align date fields\n                            weight : 0,\n                            type   : 'widget'\n                        },\n                        rangeStartField : {\n                            type       : 'datefield',\n                            label      : 'L{Export from}',\n                            labelWidth : '3em',\n                            flex       : '1 0 25%',\n                            weight     : 10,\n                            onChange({ value }) {\n                                this.parent.widgetMap.rangeEndField.min = DateHelper.add(value, 1, 'd');\n                            }\n                        },\n                        filler2 : {\n                            // Another filler to move label further from previous field\n                            type   : 'widget',\n                            weight : 20,\n                            width  : '0.5em'\n                        },\n                        rangeEndField : {\n                            type       : 'datefield',\n                            label      : 'L{Export to}',\n                            labelWidth : '1em',\n                            flex       : '1 0 25%',\n                            weight     : 30,\n                            onChange({ value }) {\n                                this.parent.widgetMap.rangeStartField.max = DateHelper.add(value, -1, 'd');\n                            }\n                        }\n                    }\n                }\n            }\n        };\n    }\n\n    //endregion\n\n    onLocaleChange() {\n        const\n            labelWidth = this.L('labelWidth');\n\n        this.width = this.L('L{width}');\n\n        this.items.forEach(widget => {\n            if (widget instanceof Field) {\n                widget.labelWidth = labelWidth;\n            }\n            else if (widget.ref === 'rangesContainer') {\n                widget.items[0].width = labelWidth;\n            }\n        });\n    }\n\n    applyInitialValues(config) {\n        super.applyInitialValues(config);\n\n        const\n            me                   = this,\n            {\n                client,\n                scheduleRange\n            }                    = config,\n            items                = config.items = config.items || {},\n            scheduleRangeField   = items.scheduleRangeField = items.scheduleRangeField || {},\n            rangesContainer      = items.rangesContainer = items.rangesContainer || {},\n            rangesContainerItems = rangesContainer.items = rangesContainer.items || {},\n            filler               = rangesContainerItems.filler = rangesContainerItems.filler || {},\n            rangeStartField      = rangesContainerItems.rangeStartField = rangesContainerItems.rangeStartField || {},\n            rangeEndField        = rangesContainerItems.rangeEndField = rangesContainerItems.rangeEndField || {};\n\n        filler.width = me.L('labelWidth');\n\n        scheduleRangeField.value = scheduleRangeField.value || scheduleRange;\n\n        if (scheduleRangeField.value === ScheduleRange.daterange) {\n            rangesContainer.hidden = false;\n        }\n\n        const rangeStart = rangeStartField.value = rangeStartField.value || client.startDate;\n        rangeStartField.max = DateHelper.max(client.startDate, DateHelper.add(client.endDate, -1, 'd'));\n\n        let rangeEnd = rangeEndField.value || client.endDate;\n\n        // This is the only place where we can validate date range before it gets to export feature\n        if (rangeEnd <= rangeStart) {\n            rangeEnd = DateHelper.add(rangeStart, 1, 'd');\n        }\n\n        rangeEndField.value = rangeEnd;\n        rangeEndField.min   = DateHelper.min(client.endDate, DateHelper.add(client.startDate, 1, 'd'));\n    }\n}\n","import GridSinglePageExporter from '../../../../Grid/feature/export/exporter/SinglePageExporter.js';\nimport SchedulerExporterMixin from './SchedulerExporterMixin.js';\n\n/**\n * @module Scheduler/feature/export/exporter/SinglePageExporter\n */\n\n/**\n * A single page exporter. Used by the {@link Scheduler.feature.export.PdfExport} feature to export to single page.\n * Content will be scaled in both directions to fit the page.\n *\n * You do not need to use this class directly.\n *\n * ### Extending exporter\n *\n * ```javascript\n * class MySinglePageExporter extends SinglePageExporter {\n *     // type is required for exporter\n *     static get type() {\n *         return 'mysinglepageexporter';\n *     }\n *\n *     get stylesheets() {\n *         const stylesheets = super.stylesheets;\n *\n *         stylesheets.forEach(styleNodeOrLinkTag => doSmth(styleNodeOrLinkTag))\n *\n *         return stylesheets;\n *     }\n * }\n *\n * const scheduler = new Scheduler({\n *     features : {\n *         pdfExport : {\n *             // this export feature is configured with only one exporter\n *             exporters : [MySinglePageExporter]\n *         }\n *     }\n * });\n *\n * // run export with the new exporter\n * scheduler.features.pdfExport.export({ exporter : 'mysinglepageexporter' });\n * ```\n *\n * @classType singlepage\n * @feature\n * @extends Grid/feature/export/exporter/SinglePageExporter\n * @typings Grid/feature/export/exporter/SinglePageExporter -> Grid/feature/export/exporter/GridSinglePageExporter\n */\nexport default class SinglePageExporter extends SchedulerExporterMixin(GridSinglePageExporter) {\n\n    static get $name() {\n        return 'SinglePageExporter';\n    }\n\n    static get type() {\n        return 'singlepage';\n    }\n\n    // We should not collect dependencies per each page, instead we'd render them once\n    collectDependencies() {}\n\n    positionRows(rows, config) {\n        const\n            resources   = [],\n            events      = [],\n            translateRe = /translate\\((\\d+.?\\d*)px, (\\d+.?\\d*)px\\)/,\n            topRe       = /top:.+?px/;\n\n        if (config.enableDirectRendering) {\n            rows.forEach(([html, , , eventsHtml]) => {\n                resources.push(html);\n\n                eventsHtml && Array.from(eventsHtml.entries()).forEach(([key, [html, box, extras = []]]) => {\n                    // Store event box to render dependencies later\n                    this.exportMeta.eventsBoxes.set(String(key), box);\n\n                    events.push(html + extras.join(''));\n                });\n            });\n        }\n        else {\n            let currentTop = 0;\n\n            // In case of variable row height row vertical position is not guaranteed to increase\n            // monotonously. Position row manually instead\n            rows.forEach(([html, top, height, eventsHtml]) => {\n                // Adjust row vertical position by changing `translate` style\n                resources.push(html.replace(translateRe, `translate($1px, ${currentTop}px)`));\n\n                const rowTopDelta = currentTop - top;\n\n                eventsHtml && Array.from(eventsHtml.entries()).forEach(([key, [html, box]]) => {\n                    // Fix event vertical position according to the row top\n                    box.translate(0, rowTopDelta);\n\n                    // Store event box to render dependencies later\n                    this.exportMeta.eventsBoxes.set(String(key), box);\n\n                    // Adjust event vertical position by replacing `top` style\n                    events.push(html.replace(topRe, `top: ${box.y}px`));\n                });\n\n                currentTop += height;\n            });\n        }\n\n        return { resources, events };\n    }\n}\n","import GridPdfExport from '../../../Grid/feature/export/PdfExport.js';\nimport GridFeatureManager from '../../../Grid/feature/GridFeatureManager.js';\nimport SchedulerExportDialog from '../../view/export/SchedulerExportDialog.js';\nimport SinglePageExporter from './exporter/SinglePageExporter.js';\nimport MultiPageExporter from './exporter/MultiPageExporter.js';\nimport MultiPageVerticalExporter from './exporter/MultiPageVerticalExporter.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\n\n/**\n * @module Scheduler/feature/export/PdfExport\n */\n\n/**\n * Generates PDF/PNG files from the Scheduler component.\n *\n * <img src=\"Scheduler/export-dialog.png\" style=\"max-width : 300px\" alt=\"Scheduler Export dialog\">\n *\n * **NOTE:** Server side is required to make export work!\n *\n * The export server is written in nodejs and it is shipped with our examples. You can find setup instructions in\n * `examples/_shared/server/README.md` and `examples/export/README.md` files.\n *\n * When your server is up and running, it listens to requests. The Export feature sends a request to the specified URL\n * with the HTML fragments. The server generates a PDF (or PNG) file and returns a download link (or binary, depending\n * on {@link #config-sendAsBinary} config). Then the Export feature opens the link in a new tab and the file is\n * automatically downloaded by your browser. This is configurable, see {@link #config-openAfterExport} config.\n *\n * The {@link #config-exportServer} URL must be configured. The URL can be localhost if you start the server locally,\n * or your remote server address.\n *\n * ## Usage\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     features : {\n *         pdfExport : {\n *             exportServer : 'http://localhost:8080' // Required\n *         }\n *     }\n * })\n *\n * // Opens popup allowing to customize export settings\n * scheduler.features.pdfExport.showExportDialog();\n *\n * // Simple export\n * scheduler.features.pdfExport.export({\n *     // Required, set list of column ids to export\n *     columns : scheduler.columns.map(c => c.id)\n * }).then(result => {\n *     // Response instance and response content in JSON\n *     let { response, responseJSON } = result;\n * });\n * ```\n *\n * Appends configs related to exporting time axis: {@link #config-scheduleRange}, {@link #config-rangeStart},\n * {@link #config-rangeEnd}\n *\n * ## Loading resources\n *\n * If you face a problem with loading resources when exporting, the cause might be that the application and the export server are hosted on different servers.\n * This is due to [Cross-Origin Resource Sharing](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) (CORS). There are 2 options how to handle this:\n * - Allow cross origin requests from the server where your export is hosted to the server where your application is hosted;\n * - Copy all resources keeping the folder hierarchy from the server where your application is hosted to the server where your export is hosted\n * and setup paths using {@link Grid.feature.export.PdfExport#config-translateURLsToAbsolute} config and configure the export server to give access to the path:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     features : {\n *         pdfExport : {\n *             exportServer : 'http://localhost:8080',\n *             // '/resources' is hardcoded in WebServer implementation\n *             translateURLsToAbsolute : 'http://localhost:8080/resources'\n *         }\n *     }\n * })\n * ```\n *\n * ```javascript\n * // Following path would be served by this address: http://localhost:8080/resources/\n * node ./src/server.js -h 8080 -r web/application/styles\n * ```\n *\n * where `web/application/styles` is a physical root location of the copied resources, for example:\n *\n * <img src=\"Grid/export-server-resources.png\" style=\"max-width : 500px\" alt=\"Export server structure with copied resources\" />\n *\n * @extends Grid/feature/export/PdfExport\n * @classtype pdfExport\n * @feature\n * @typings Grid/feature/export/PdfExport -> Grid/feature/export/GridPdfExport\n */\nexport default class PdfExport extends GridPdfExport {\n    static get $name() {\n        return 'PdfExport';\n    }\n\n    static get defaultConfig() {\n        return {\n            exporters     : [SinglePageExporter, MultiPageExporter, MultiPageVerticalExporter],\n            dialogClass   : SchedulerExportDialog,\n            /**\n             * Specifies how to export time span.\n             *  * completeview - Complete configured time span, from scheduler start date to end date\n             *  * currentview  - Currently visible time span\n             *  * daterange    - Use specific date range, provided additionally in config. See {@link #config-rangeStart}/\n             *  {@link #config-rangeEnd}\n             * @config {'completeview'|'currentview'|'daterange'}\n             * @default\n             * @category Export file config\n             */\n            scheduleRange : 'completeview',\n\n            /**\n             * Exported time span range start. Used with `daterange` config of the {@link #config-scheduleRange}\n             * @config {Date}\n             * @category Export file config\n             */\n            rangeStart : null,\n\n            /**\n             * Returns the instantiated export dialog widget as configured by {@link #config-exportDialog}\n             * @member {Scheduler.view.export.SchedulerExportDialog} exportDialog\n             */\n            /**\n             * A config object to apply to the {@link Scheduler.view.export.SchedulerExportDialog} widget.\n             * @config {SchedulerExportDialogConfig} exportDialog\n             */\n\n            /**\n             * Exported time span range end. Used with `daterange` config of the {@link #config-scheduleRange}\n             * @config {Date}\n             * @category Export file config\n             */\n            rangeEnd : null\n        };\n    }\n\n    get defaultExportDialogConfig() {\n        return ObjectHelper.copyProperties(super.defaultExportDialogConfig, this, ['scheduleRange']);\n    }\n\n    buildExportConfig(config) {\n        config = super.buildExportConfig(config);\n\n        const {\n            scheduleRange,\n            rangeStart,\n            rangeEnd\n        } = this;\n\n        // Time axis is filtered from UI, need to append it\n        if (config.columns && !config.columns.find(col => col.type === 'timeAxis')) {\n            config.columns.push(config.client.timeAxisColumn.id);\n        }\n\n        return ObjectHelper.assign({\n            scheduleRange,\n            rangeStart,\n            rangeEnd\n        }, config);\n    }\n}\n\nGridFeatureManager.registerFeature(PdfExport, false, 'Scheduler');\n"],"names":["ResourceInfoColumn","Column","$name","type","fields","defaults","showImage","showEventCount","showMeta","showRole","validNames","autoScaleThreshold","useNameAsImageName","field","htmlEncode","width","cellCls","editor","VersionHelper","isTestEnv","construct","args","super","this","avatarRendering","AvatarRendering","element","grid","doDestroy","destroy","getImageURL","imageName","resourceImagePath","parts","split","urlPart","length","joined","StringHelper","joinPaths","template","resourceRecord","value","me","timeAxis","resourceImageExtension","defaultResourceImageName","roleField","count","eventStore","getEvents","includeOccurrences","enableRecurringEvents","startDate","endDate","imageUrl","image","toLowerCase","includes","class","children","getResourceAvatar","initials","color","eventColor","iconCls","defaultImageUrl","tag","text","html","L","defaultRenderer","record","cellElement","isExport","result","isSpecialRow","rowHeight","style","fontSize","ColumnStore","registerColumnType","_$name","sides","editorAlign","side","client","rtl","topBottom","top","bottom","layoutModes","estimate","measure","layoutSides","before","after","Labels","InstancePlugin","configurable","labelCls","right","left","thisObj","blurAction","labelLayoutMode","labelCharWidth","pluginConfig","chain","scheduler","config","isVertical","Error","updateHostClasslist","classList","remove","add","onLabelDblClick","event","target","readOnly","dataset","labelConfig","eventRecord","resolveEventRecord","Editor","inputField","scrollAction","render","startEdit","align","matchSize","stopImmediatePropagation","changeTop","processLabelSpec","updateTop","changeAfter","updateAfter","changeRight","changeBottom","updateBottom","changeBefore","updateBefore","changeLeft","labelSpec","renderer","Object","setPrototypeOf","resourceStore","taskStore","id","milestoneWidth","recordType","fieldDef","modelClass","fieldMap","Reflect","has","prototype","EventHelper","on","timeAxisSubGrid","delegate","dblclick","doDisable","disable","isPainted","refresh","generateLabelConfigs","data","configs","domConfig","className","taskFeature","eventRecordProperty","call","assignmentRecord","encodeHtml","DateHelper","format","displayDateFormat","push","measureLabels","pxPerMS","timeAxisViewModel","getSingleUnitInPixels","DomHelper","stripTags","labelMeasureElement","createElement","parent","foregroundCanvas","retainElement","DomSync","sync","targetElement","childrenOnly","firstElementChild","offsetWidth","ms","startMS","endMS","onEventDataGenerated","_data$eventRecord","disabled","isResourceTimeRange","wrapperChildren","updateLabelLayoutMode","isConfiguring","refreshWithTransition","updateLabelCharWidth","featureClass","GridFeatureManager","registerFeature","TimelineSummary","GridSummary","showTooltip","summaries","isTimelineBase","updateProject","project","ion","timeAxisViewModelUpdate","renderRows","detachListeners","name","dataReady","isHorizontal","footer","querySelector","summaryBarElement","timeline","sizeProp","colCfg","columnConfig","summaryContainer","_tip","some","label","Tooltip","cls","hoverDelay","hideDelay","forElement","anchorToTarget","trackMouse","forSelector","getHtml","activeTarget","_tipHtml","innerHTML","map","col","join","updateTimelineSummaries","_this$summaryColumn","summaryColumn","toggle","_this$_tip","ScheduleRange","completeview","currentview","daterange","immediatePromise","Promise","resolve","base","scrollRowIntoView","index","rowManager","scrollable","oldY","y","store","scrollTo","calculateTop","detacher","scroll","scrollTop","getRow","scrollToDate","date","scrollFired","promises","scrollStart","x","block","header","await","checkLog","all","cloneElement","clear","clonedEl","prepareComponent","currentOrientation","includeTimeline","scheduleRange","rangeStart","rangeEnd","visibleDateRange","waitForAnimations","infiniteScroll","setTimeSpan","svgCanvas","_oldEnableEventAnimations","enableEventAnimations","isHorizontalRendering","_oldScrollBuffer","scrollBuffer","_oldVerticalBuffer","verticalBufferSize","ignoreViewBox","exportMeta","fgCanvasEl","timeAxisEl","totalWidth","subGrids","normal","getDistanceBetweenDates","horizontalPages","Math","ceil","pageWidth","totalPages","verticalPages","scrollLeft","getCoordinateFromDate","timeAxisHeaders","timeAxisPlaceholders","headersColleted","forEachSelector","headerRow","createPlaceholder","Map","eventsPlaceholder","removeEachSelector","eventsBoxes","hasActiveFeature","columnLinesCanvas","columnLinesPlaceholder","columnLines","lines","majorLines","timeRangesHeaderCanvas","timeRangesBodyCanvas","timeRanges","timeRangesHeaderPlaceholder","body","timeRangesBodyPlaceholder","features","dependencies","fillDrawingCache","svgCanvasEl","getAttribute","dependencyCanvasEl","dependenciesPlaceholder","ns","betweenLesser","restoreState","waitForHorizontalScroll","restoreComponent","onRowsCollected","rows","enableDirectRendering","timeView","pageRangeStart","pageRangeEnd","getCurrentPageDateRange","renderHeaders","renderLines","renderRanges","renderEvents","rangeProcessed","collectLines","collectHeaders","collectRanges","collectEvents","timeSpanContains","getTime","horizontalPosition","pageStartX","pageEndX","normalGridX","locked","splitterWidth","getDateFromCoordinate","max","multiplier","prepareExportElement","headerId","footerId","el","forEach","selector","canvasEl","lastExportedRowBottom","height","marginLeft","headersCollected","headerRows","headersMap","tickIndex","set","outerHTML","String","headerCanvas","bodyCanvas","bgCanvas","backgroundCanvas","lineEl","contains","lineIndex","Number","line","replace","addedRows","normalRows","row","_resource$events","_resource$timeRanges","rowConfig","resource","getAt","dataIndex","eventsMap","events","isScheduled","getElementFromEventRecord","parentElement","Rectangle","from","offsetParent","timeRange","_client$features$reso","elId","resourceTimeRanges","generateElementId","syncIdMap","start","end","timeAxisView","timeAxisColumn","buildCells","document","resourceLayout","getResourceLayout","eventDOMConfigs","getEventDOMConfigForCurrentView","eventId","domConfigs","getColumnLinesDOMConfig","onlyChildren","getDOMConfig","i","buildPageHtml","values","placeHolder","mergedCellsHtml","placeHolderText","resources","positionRows","contentHtml","headers","Array","lineElements","concat","buildDependenciesHtml","getEventBox","box","get","isMilestone","translate","renderDependencies","dependencyFeature","draw","dependency","to","isDependencyVisible","fromBox","fromEvent","toBox","toEvent","drawDependency","clone","domSync","placeholder","MultiPageExporter","SchedulerExporterMixin","GridMultiPageExporter","stateNextPage","eventsHtml","entries","key","extras","MultiPageVerticalExporter","GridMultiPageVerticalExporter","estimateTotalPages","ScheduleRangeCombo","Combo","defaultConfig","editable","localizeDisplayFields","displayField","buildItems","initClass","SchedulerExportDialog","GridExportDialog","localeClass","items","scheduleRangeField","weight","onChange","widgetMap","rangesContainer","hidden","flex","filler","rangeStartField","labelWidth","rangeEndField","min","filler2","onLocaleChange","widget","Field","ref","applyInitialValues","rangesContainerItems","SinglePageExporter","GridSinglePageExporter","collectDependencies","translateRe","topRe","currentTop","rowTopDelta","PdfExport","GridPdfExport","exporters","dialogClass","defaultExportDialogConfig","ObjectHelper","copyProperties","buildExportConfig","columns","find","assign"],"mappings":"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"}