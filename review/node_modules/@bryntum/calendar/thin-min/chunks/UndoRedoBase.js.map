{"version":3,"file":"UndoRedoBase.js","sources":["../../../../Core/lib/Core/widget/base/UndoRedoBase.js"],"sourcesContent":["import Container from '../Container.js';\nimport '../Combo.js';\n\n/**\n * @module Core/widget/base/UndoRedoBase\n */\n\n/**\n * Abstract base class used by UndoRedo widgets in Scheduler and TaskBoard.\n *\n * @extends Core/widget/Container\n * @abstract\n */\nexport default class UndoRedoBase extends Container {\n    static get $name() {\n        return 'UndoRedoBase';\n    }\n\n    static get type() {\n        return 'undoredobase';\n    }\n\n    static get configurable() {\n        return {\n            // Documented on subclasses\n            project : null,\n\n            stm : null,\n\n            /**\n             * Configure as `true` to show \"Undo\" and \"Redo\" as button texts. The buttons always have a tooltip\n             * as a hint to the user as to their purpose.\n             * @config {Boolean}\n             */\n            text : null,\n\n            /**\n             * Button color for the undo and redo buttons. See {@link Core.widget.Button#config-color}.\n             * @config {String}\n             */\n            color : null,\n\n            /**\n             * Configure as `true` to show \"0\" badge on the undo and redo buttons when they have no actions\n             * left to perform. By default when there are no actions, no badge is displayed.\n             * @config {Boolean}\n             */\n            showZeroActionBadge : null,\n\n            cls : 'b-undo-controls b-toolbar',\n\n            layoutStyle : {\n                alignItems : 'stretch',\n                flexFlow   : 'row nowrap',\n                overflow   : 'visible'\n            },\n\n            items : {\n                undoBtn : {\n                    type     : 'button',\n                    icon     : 'b-icon-undo',\n                    tooltip  : 'L{UndoRedo.UndoLastAction}',\n                    onAction : 'up.onUndo'     // 'up.' means method is on a parent Widget.\n                },\n                transactionsCombo : {\n                    type                 : 'combo',\n                    valueField           : 'idx',\n                    editable             : false,\n                    store                : {},\n                    emptyText            : 'L{UndoRedo.NoActions}',\n                    onAction             : 'up.onTransactionSelected',\n                    displayValueRenderer : 'up.transactionsDisplayValueRenderer'\n                },\n                redoBtn : {\n                    type     : 'button',\n                    icon     : 'b-icon-redo',\n                    tooltip  : 'L{UndoRedo.RedoLastAction}',\n                    onAction : 'up.onRedo'\n                }\n            }\n        };\n    }\n\n    afterConstruct() {\n        this.updateUndoRedoControls();\n    }\n\n    updateStm(stm) {\n        this.detachListeners('undoredo');\n\n        stm?.ion({\n            name          : 'undoredo',\n            recordingstop : 'updateUndoRedoControls',\n            restoringstop : 'updateUndoRedoControls',\n            queueReset    : 'updateUndoRedoControls',\n            disabled      : 'updateUndoRedoControls',\n            thisObj       : this\n        });\n    }\n\n    changeItems(items) {\n        const { undoBtn, redoBtn } = items;\n\n        if (this.color) {\n            undoBtn && (undoBtn.color = this.color);\n            redoBtn && (redoBtn.color = this.color);\n        }\n        if (this.text) {\n            undoBtn && (undoBtn.text = 'L{UndoRedo.Undo}');\n            redoBtn && (redoBtn.text = 'L{UndoRedo.Redo}');\n        }\n\n        return super.changeItems(items);\n    }\n\n    updateProject(project) {\n        this.stm = project.stm;\n    }\n\n    fillUndoRedoCombo() {\n        const { transactionsCombo } = this.widgetMap;\n        // The transactionsCombo may be configured away if only undo and redo buttons are wanted\n        transactionsCombo && (transactionsCombo.items = this.stm.queue.map((title, idx) => [idx, title || `Transaction ${idx}`]));\n    }\n\n    updateUndoRedoControls() {\n        const\n            {\n                stm,\n                showZeroActionBadge\n            } = this,\n            {\n                undoBtn,\n                redoBtn\n            } = this.widgetMap;\n\n        undoBtn.badge = stm.position || (showZeroActionBadge ? '0' : '');\n        redoBtn.badge = (stm.length - stm.position) || (showZeroActionBadge ? '0' : '');\n\n        undoBtn.disabled = !stm.canUndo;\n        redoBtn.disabled = !stm.canRedo;\n\n        this.fillUndoRedoCombo();\n    }\n\n    transactionsDisplayValueRenderer(record, combo) {\n        const stmPos = this.stm?.position || 0;\n\n        return `${stmPos} undo actions / ${combo.store.count - stmPos} redo actions`;\n    }\n\n    onUndo() {\n        this.stm.canUndo && this.stm.undo();\n    }\n\n    onRedo() {\n        this.stm.canRedo && this.stm.redo();\n    }\n\n    onTransactionSelected(combo) {\n        const\n            stm   = this.stm,\n            value = combo.value;\n\n        if (value >= 0) {\n            if (stm.canUndo && value < stm.position) {\n                stm.undo(stm.position - value);\n            }\n            else if (stm.canRedo && value >= stm.position) {\n                stm.redo(value - stm.position + 1);\n            }\n        }\n    }\n}\n"],"names":["UndoRedoBase","Container","$name","type","configurable","project","stm","text","color","showZeroActionBadge","cls","layoutStyle","alignItems","flexFlow","overflow","items","undoBtn","icon","tooltip","onAction","transactionsCombo","valueField","editable","store","emptyText","displayValueRenderer","redoBtn","afterConstruct","this","updateUndoRedoControls","updateStm","detachListeners","ion","name","recordingstop","restoringstop","queueReset","disabled","thisObj","changeItems","super","updateProject","fillUndoRedoCombo","widgetMap","queue","map","title","idx","badge","position","length","canUndo","canRedo","transactionsDisplayValueRenderer","record","combo","_this$stm","stmPos","count","onUndo","undo","onRedo","redo","onTransactionSelected","value","_$name"],"mappings":"wCAWe,MAAMA,UAAqBC,EACtCC,mBACI,MAAO,eAEXC,kBACI,MAAO,eAEXC,0BACI,MAAO,CAEHC,QAAU,KACVC,IAAM,KAMNC,KAAO,KAKPC,MAAQ,KAMRC,oBAAsB,KACtBC,IAAM,4BACNC,YAAc,CACVC,WAAa,UACbC,SAAa,aACbC,SAAa,WAEjBC,MAAQ,CACJC,QAAU,CACNb,KAAW,SACXc,KAAW,cACXC,QAAW,6BACXC,SAAW,aAEfC,kBAAoB,CAChBjB,KAAuB,QACvBkB,WAAuB,MACvBC,UAAuB,EACvBC,MAAuB,GACvBC,UAAuB,wBACvBL,SAAuB,2BACvBM,qBAAuB,uCAE3BC,QAAU,CACNvB,KAAW,SACXc,KAAW,cACXC,QAAW,6BACXC,SAAW,eAK3BQ,iBACIC,KAAKC,yBAETC,UAAUxB,GACNsB,KAAKG,gBAAgB,YACrBzB,MAAAA,GAAAA,EAAK0B,IAAI,CACLC,KAAgB,WAChBC,cAAgB,yBAChBC,cAAgB,yBAChBC,WAAgB,yBAChBC,SAAgB,yBAChBC,QAAgBV,OAGxBW,YAAYxB,GACR,MAAMC,QAAEA,EAAOU,QAAEA,GAAYX,EAS7B,OARIa,KAAKpB,QACLQ,IAAYA,EAAQR,MAAQoB,KAAKpB,OACjCkB,IAAYA,EAAQlB,MAAQoB,KAAKpB,QAEjCoB,KAAKrB,OACLS,IAAYA,EAAQT,KAAO,oBAC3BmB,IAAYA,EAAQnB,KAAO,qBAExBiC,MAAMD,YAAYxB,GAE7B0B,cAAcpC,GACVuB,KAAKtB,IAAMD,EAAQC,IAEvBoC,oBACI,MAAMtB,kBAAEA,GAAsBQ,KAAKe,UAEnCvB,IAAsBA,EAAkBL,MAAQa,KAAKtB,IAAIsC,MAAMC,KAAI,CAACC,EAAOC,IAAQ,CAACA,EAAKD,GAAU,eAAcC,QAErHlB,yBACI,MACIvB,IACIA,EAAGG,oBACHA,GACAmB,MACJZ,QACIA,EAAOU,QACPA,GACAE,KAAKe,UACb3B,EAAQgC,MAAQ1C,EAAI2C,WAAaxC,EAAsB,IAAM,IAC7DiB,EAAQsB,MAAS1C,EAAI4C,OAAS5C,EAAI2C,WAAcxC,EAAsB,IAAM,IAC5EO,EAAQqB,UAAY/B,EAAI6C,QACxBzB,EAAQW,UAAY/B,EAAI8C,QACxBxB,KAAKc,oBAETW,iCAAiCC,EAAQC,GAAO,IAAAC,EAC5C,MAAMC,WAASD,OAAKlD,eAAGkD,SAARA,EAAUP,WAAY,EACrC,MAAQ,GAAEQ,oBAAyBF,EAAMhC,MAAMmC,MAAQD,iBAE3DE,SACI/B,KAAKtB,IAAI6C,SAAWvB,KAAKtB,IAAIsD,OAEjCC,SACIjC,KAAKtB,IAAI8C,SAAWxB,KAAKtB,IAAIwD,OAEjCC,sBAAsBR,GAClB,MACIjD,EAAQsB,KAAKtB,IACb0D,EAAQT,EAAMS,MACdA,GAAS,IACL1D,EAAI6C,SAAWa,EAAQ1D,EAAI2C,SAC3B3C,EAAIsD,KAAKtD,EAAI2C,SAAWe,GAEnB1D,EAAI8C,SAAWY,GAAS1D,EAAI2C,UACjC3C,EAAIwD,KAAKE,EAAQ1D,EAAI2C,SAAW,KAKhDjD,EAAaiE,OAAS"}