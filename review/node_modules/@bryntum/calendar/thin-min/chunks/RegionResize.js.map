{"version":3,"file":"RegionResize.js","sources":["../../../../Grid/lib/Grid/column/NumberColumn.js","../../../../Grid/lib/Grid/feature/RegionResize.js"],"sourcesContent":["import Column from './Column.js';\nimport ColumnStore from '../data/ColumnStore.js';\nimport NumberFormat from '../../Core/helper/util/NumberFormat.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\n\n/**\n * @module Grid/column/NumberColumn\n */\n\n/**\n * A column for showing/editing numbers.\n *\n * Default editor is a {@link Core.widget.NumberField NumberField}.\n *\n * ```javascript\n * new Grid({\n *     appendTo : document.body,\n *     columns : [\n *         { type: 'number', min: 0, max : 100, field: 'score' }\n *     ]\n * });\n * ```\n *\n * Provide a {@link Core/helper/util/NumberFormat} config as {@link #config-format} to be able to show currency. For\n * example:\n * ```javascript\n * new Grid({\n *     appendTo : document.body,\n *     columns : [\n *         {\n *             type   : 'number',\n *             format : {\n *                style    : 'currency'\n *                currency : 'USD',\n *             }\n *         }\n *     ]\n * });\n * ```\n *\n * @extends Grid/column/Column\n * @classType number\n * @inlineexample Grid/column/NumberColumn.js\n * @column\n */\nexport default class NumberColumn extends Column {\n    //region Config\n\n    static type = 'number';\n\n    // Type to use when auto adding field\n    static fieldType = 'number';\n\n    static fields = [\n        'format',\n\n        /**\n         * The minimum value for the field used during editing.\n         * @config {Number} min\n         * @category Common\n         */\n        'min',\n\n        /**\n         * The maximum value for the field used during editing.\n         * @config {Number} max\n         * @category Common\n         */\n        'max',\n\n        /**\n         * Step size for the field used during editing.\n         * @config {Number} step\n         * @category Common\n         */\n        'step',\n\n        /**\n         * Large step size for the field used during editing. In effect for `SHIFT + click/arrows`\n         * @config {Number} largeStep\n         * @category Common\n         */\n        'largeStep',\n\n        /**\n         * Unit to append to displayed value.\n         * @config {String} unit\n         * @category Common\n         */\n        'unit'\n    ];\n\n    static get defaults() {\n        return {\n            filterType : 'number',\n\n            /**\n             * The format to use for rendering numbers.\n             *\n             * By default, the locale's default number formatter is used. For `en-US`, the\n             * locale default is a maximum of 3 decimal digits, using thousands-based grouping.\n             * This would render the number `1234567.98765` as `'1,234,567.988'`.\n             *\n             * @config {String|NumberFormatConfig}\n             */\n            format : ''\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    get defaultEditor() {\n        const { format, name, max, min, step, largeStep, align } = this;\n\n        // Remove any undefined configs, to allow config system to use default values instead\n        return ObjectHelper.cleanupProperties({\n            type      : 'numberfield',\n            format,\n            name,\n            max,\n            min,\n            step,\n            largeStep,\n            textAlign : align\n        });\n    }\n\n    get formatter() {\n        const\n            me         = this,\n            { format } = me;\n\n        let formatter = me._formatter;\n\n        if (!formatter || me._lastFormat !== format) {\n            me._formatter = formatter = NumberFormat.get(me._lastFormat = format);\n        }\n\n        return formatter;\n    }\n\n    formatValue(value) {\n        if (value != null) {\n            value = this.formatter.format(value);\n\n            if (this.unit) {\n                value = `${value}${this.unit}`;\n            }\n        }\n        return value ?? '';\n    }\n\n    /**\n     * Renderer that displays value + optional unit in the cell\n     * @private\n     */\n    defaultRenderer({ value }) {\n        return this.formatValue(value);\n    }\n}\n\nColumnStore.registerColumnType(NumberColumn, true);\nNumberColumn.exposeProperties();\n","import EventHelper from '../../Core/helper/EventHelper.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\n\n/**\n * @module Grid/feature/RegionResize\n */\n\n/**\n * Makes the splitter between grid section draggable so you can resize grid sections.\n *\n * {@inlineexample Grid/feature/RegionResize.js}\n *\n * ```javascript\n * // enable RegionResize\n * const grid = new Grid({\n *   features: {\n *     regionResize: true\n *   }\n * });\n * ```\n *\n * This feature is <strong>disabled</strong> by default.\n *\n * @extends Core/mixin/InstancePlugin\n * @demo Grid/features\n * @classtype regionResize\n * @feature\n */\nexport default class RegionResize extends InstancePlugin {\n    // region Init\n\n    static $name ='RegionResize';\n\n    static get pluginConfig() {\n        return {\n            chain : ['onElementPointerDown', 'onElementDblClick', 'onElementTouchMove', 'onSubGridCollapse', 'onSubGridExpand', 'render']\n        };\n    }\n\n    //endregion\n\n    onElementDblClick(event) {\n        const\n            me         = this,\n            { client } = me,\n            splitterEl = event.target.closest('.b-grid-splitter-collapsed');\n\n        // If collapsed splitter is dblclicked and region is not expanding\n        // It is unlikely that user might dblclick splitter twice and even if he does, nothing should happen.\n        // But just in case lets not expand twice.\n        if (splitterEl && !me.expanding) {\n            me.expanding = true;\n\n            let region  = splitterEl.dataset.region,\n                subGrid = client.getSubGrid(region);\n\n            // Usually collapsed splitter means corresponding region is collapsed. But in case of last two regions one\n            // splitter can be collapsed in two directions. So, if corresponding region is expanded then last one is collapsed\n            if (!subGrid.collapsed) {\n                region = client.getLastRegions()[1];\n                subGrid = client.getSubGrid(region);\n            }\n\n            subGrid.expand().then(() => me.expanding = false);\n        }\n    }\n\n    //region Move splitter\n\n    /**\n     * Begin moving splitter.\n     * @private\n     * @param splitterElement Splitter element\n     * @param clientX Initial x position from which new width will be calculated on move\n     */\n    startMove(splitterElement, clientX) {\n        const\n            me              = this,\n            { client }      = me,\n            region          = splitterElement.dataset.region,\n            gridEl          = client.element,\n            nextRegion      = client.regions[client.regions.indexOf(region) + 1],\n            nextSubGrid     = client.getSubGrid(nextRegion),\n            splitterSubGrid = client.getSubGrid(region);\n\n        let\n            subGrid = splitterSubGrid,\n            flip    = 1;\n\n        if (subGrid.flex != null) {\n            // If subgrid has flex, check if next one does not\n            if (nextSubGrid.flex == null) {\n                subGrid = nextSubGrid;\n                flip = -1;\n            }\n        }\n\n        if (client.rtl) {\n            flip *= -1;\n        }\n\n        if (splitterElement.classList.contains('b-grid-splitter-collapsed')) {\n            return;\n        }\n\n        const availableWidth = subGrid.element.offsetWidth + nextSubGrid.element.offsetWidth;\n\n        me.dragContext = {\n            element       : splitterElement,\n            headerEl      : subGrid.header.element,\n            subGridEl     : subGrid.element,\n            subGrid,\n            splitterSubGrid,\n            originalWidth : subGrid.element.offsetWidth,\n            originalX     : clientX,\n            minWidth      : subGrid.minWidth || 0,\n            maxWidth      : Math.min(availableWidth, subGrid.maxWidth || availableWidth),\n            flip\n        };\n\n        gridEl.classList.add('b-moving-splitter');\n        splitterSubGrid.toggleSplitterCls('b-moving');\n\n        me.pointerDetacher = EventHelper.on({\n            element     : document,\n            pointermove : 'onPointerMove',\n            pointerup   : 'onPointerUp',\n            thisObj     : me\n        });\n    }\n\n    /**\n     * Stop moving splitter.\n     * @private\n     */\n    endMove() {\n        const\n            me              = this,\n            { dragContext } = me;\n\n        if (dragContext) {\n            me.pointerDetacher();\n            me.client.element.classList.remove('b-moving-splitter');\n            dragContext.splitterSubGrid.toggleSplitterCls('b-moving', false);\n            me.dragContext = null;\n        }\n    }\n\n    onCollapseClick(subGrid, splitterEl) {\n        const\n            me         = this,\n            { client } = me,\n            region     = splitterEl.dataset.region,\n            regions    = client.getLastRegions();\n\n        // Last splitter in the grid is responsible for collapsing/expanding last 2 regions and is always related to the\n        // left one. Check if we are working with last splitter\n        if (regions[0] === region) {\n            const lastSubGrid = client.getSubGrid(regions[1]);\n            if (lastSubGrid.collapsed) {\n                lastSubGrid.expand();\n                return;\n            }\n        }\n\n        subGrid.collapse();\n    }\n\n    onExpandClick(subGrid, splitterEl) {\n        const\n            me         = this,\n            { client } = me,\n            region     = splitterEl.dataset.region,\n            regions    = client.getLastRegions();\n\n        // Last splitter in the grid is responsible for collapsing/expanding last 2 regions and is always related to the\n        // left one. Check if we are working with last splitter\n        if (regions[0] === region) {\n            if (!subGrid.collapsed) {\n                const lastSubGrid = client.getSubGrid(regions[1]);\n                lastSubGrid.collapse();\n                return;\n            }\n        }\n\n        subGrid.expand();\n    }\n\n    /**\n     * Update splitter position.\n     * @private\n     * @param newClientX\n     */\n    updateMove(newClientX) {\n        const { dragContext } = this;\n\n        if (dragContext) {\n            const\n                difX     = newClientX - dragContext.originalX,\n                newWidth = Math.max(Math.min(dragContext.maxWidth, dragContext.originalWidth + difX * dragContext.flip), 0);\n\n            // SubGrids monitor their own size and keep any splitters synced\n            dragContext.subGrid.width = Math.max(newWidth, dragContext.minWidth);\n        }\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Start moving splitter on mouse down (on splitter).\n     * @private\n     * @param event\n     */\n    onElementPointerDown(event) {\n        const\n            me            = this,\n            { target }    = event,\n            // Only care about left clicks, avoids a bug found by monkeys\n            splitter      = event.button === 0 && target.closest(':not(.b-row-reordering):not(.b-dragging-event):not(.b-dragging-task):not(.b-dragging-header):not(.b-dragselecting) .b-grid-splitter'),\n            subGrid       = splitter && me.client.getSubGrid(splitter.dataset.region);\n\n        let toggle;\n\n        if (splitter) {\n            if (target.closest('.b-grid-splitter-button-collapse')) {\n                me.onCollapseClick(subGrid, splitter);\n            }\n            else if (target.closest('.b-grid-splitter-button-expand')) {\n                me.onExpandClick(subGrid, splitter);\n            }\n            else {\n                me.startMove(splitter, event.clientX);\n                toggle = splitter;\n            }\n        }\n\n        if (event.pointerType === 'touch') {\n            // Touch on splitter makes splitter wider, touch outside or expand/collapse makes it smaller again\n            me.toggleTouchSplitter(toggle);\n        }\n    }\n\n    /**\n     * Move splitter on mouse move.\n     * @private\n     * @param event\n     */\n    onPointerMove(event) {\n        if (this.dragContext) {\n            this.updateMove(event.clientX);\n            event.preventDefault();\n        }\n    }\n\n    onElementTouchMove(event) {\n        if (this.dragContext) {\n            // Needed to prevent scroll in Mobile Safari, preventing pointermove is not enough\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * Stop moving splitter on mouse up.\n     * @private\n     * @param event\n     */\n    onPointerUp(event) {\n        if (this.dragContext) {\n            this.endMove();\n            event.preventDefault();\n        }\n    }\n\n    onSubGridCollapse({ subGrid }) {\n        const\n            splitterEl = this.client.resolveSplitter(subGrid),\n            regions    = this.client.getLastRegions();\n\n        // if last region was collapsed\n        if (regions[1] === subGrid.region) {\n            splitterEl.classList.add('b-grid-splitter-allow-collapse');\n        }\n    }\n\n    onSubGridExpand({ subGrid }) {\n        const splitterEl = this.client.resolveSplitter(subGrid);\n        splitterEl.classList.remove('b-grid-splitter-allow-collapse');\n    }\n\n    //endregion\n\n    /**\n     * Adds b-touching CSS class to splitterElements when touched. Removes when touched outside.\n     * @private\n     * @param splitterElement\n     */\n    toggleTouchSplitter(splitterElement) {\n        const\n            me                  = this,\n            { touchedSplitter } = me;\n\n        // If other splitter is touched, deactivate old one\n        if (splitterElement && touchedSplitter && splitterElement.dataset.region !== touchedSplitter.dataset.region) {\n            me.toggleTouchSplitter();\n        }\n\n        // Either we have touched a splitter (should activate) or touched outside (should deactivate)\n        const splitterSubGrid = me.client.getSubGrid(splitterElement ? splitterElement.dataset.region : touchedSplitter?.dataset.region);\n        if (splitterSubGrid) {\n            splitterSubGrid.toggleSplitterCls('b-touching', Boolean(splitterElement));\n            if (splitterElement) {\n                splitterSubGrid.startSplitterButtonSyncing();\n            }\n            else {\n                splitterSubGrid.stopSplitterButtonSyncing();\n            }\n        }\n\n        me.touchedSplitter = splitterElement;\n    }\n\n    render() {\n        const { regions, subGrids } = this.client;\n\n        // Multiple regions, only allow collapsing to the edges by hiding buttons\n        if (regions.length > 2) {\n            // Only works in a 3 subgrid scenario. To support more subgrids we have to merge splitters or something\n            // on collapse. Not going down that path currently...\n            subGrids[regions[0]].splitterElement.classList.add('b-left-only');\n            subGrids[regions[1]].splitterElement.classList.add('b-right-only');\n        }\n    }\n}\n\nRegionResize.featureClass = 'b-split';\n\nGridFeatureManager.registerFeature(RegionResize);\n"],"names":["NumberColumn","Column","defaults","filterType","format","defaultEditor","name","max","min","step","largeStep","align","this","ObjectHelper","cleanupProperties","type","textAlign","formatter","me","_formatter","_lastFormat","NumberFormat","get","formatValue","value","_value","unit","defaultRenderer","_defineProperty","ColumnStore","registerColumnType","exposeProperties","_$name","RegionResize","InstancePlugin","pluginConfig","chain","onElementDblClick","event","client","splitterEl","target","closest","expanding","region","dataset","subGrid","getSubGrid","collapsed","getLastRegions","expand","then","startMove","splitterElement","clientX","gridEl","element","nextRegion","regions","indexOf","nextSubGrid","splitterSubGrid","flip","flex","rtl","classList","contains","availableWidth","offsetWidth","dragContext","headerEl","header","subGridEl","originalWidth","originalX","minWidth","maxWidth","Math","add","toggleSplitterCls","pointerDetacher","EventHelper","on","document","pointermove","pointerup","thisObj","endMove","remove","onCollapseClick","lastSubGrid","collapse","onExpandClick","updateMove","newClientX","difX","newWidth","width","onElementPointerDown","splitter","button","toggle","pointerType","toggleTouchSplitter","onPointerMove","preventDefault","onElementTouchMove","onPointerUp","onSubGridCollapse","resolveSplitter","onSubGridExpand","touchedSplitter","Boolean","startSplitterButtonSyncing","stopSplitterButtonSyncing","render","subGrids","length","featureClass","GridFeatureManager","registerFeature"],"mappings":"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"}