{"version":3,"file":"grid.module.thin.js","sources":["../../lib/Grid/column/ActionColumn.js","../../lib/Grid/column/AggregateColumn.js","../../lib/Grid/column/PercentColumn.js","../../lib/Grid/column/RatingColumn.js","../../lib/Grid/column/TemplateColumn.js","../../lib/Grid/column/TimeColumn.js","../../lib/Grid/feature/CellCopyPaste.js","../../lib/Grid/feature/CellTooltip.js","../../lib/Grid/feature/ColumnRename.js","../../lib/Grid/feature/FillHandle.js","../../lib/Grid/feature/MergeCells.js","../../lib/Grid/feature/QuickFind.js","../../lib/Grid/feature/RowExpander.js","../../lib/Grid/feature/Search.js","../../lib/Grid/feature/StickyCells.js","../../lib/Grid/widget/TreeCombo.js"],"sourcesContent":["import Column from './Column.js';\nimport ColumnStore from '../data/ColumnStore.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport Tooltip from '../../Core/widget/Tooltip.js';\n\n/**\n * @module Grid/column/ActionColumn\n */\n\n/**\n * Config object for an action in an ActionColumn.\n * @typedef {Object} ActionConfig\n * @property {String} cls CSS Class for action icon\n * @property {Function|String|TooltipConfig} tooltip Tooltip text, or a config object which can reconfigure the shared\n * tooltip by setting boolean, numeric and string config values, or a function to return the tooltip text, passed the\n * row's `record`\n * @property {Function|Boolean} visible Boolean to define the action icon visibility or a callback function, passed the\n * row's `record`, to change it dynamically\n * @property {Function} onClick Callback to handle click action item event, passed the row's `record`\n * @property {Boolean} showForGroup Set to true to have action icon visible in group headers only when using the `group`\n * feature\n * @property {Function|String} renderer A render function, or the name of a function in the Grid's ownership tree used\n * to define the action element. Passed the row's `record`, expected to return an HTML string or a DOM config object.\n * **Note**: when specified, the `cls` action config is ignored. Make sure you add an action icon manually, for example:\n * ```javascript\n * {\n *      type    : 'action',\n *      text    : 'Increase amount',\n *      actions : [{\n *          cls      : 'b-fa b-fa-plus', // this line will be ignored\n *          renderer : ({ record }) => '<i class=\"b-action-item b-fa b-fa-plus\"></i> ' + record.name,\n *          onClick  : ({ record }) => {}\n *      }]\n * }\n * ```\n *\n * or\n *\n * ```javascript\n * {\n *      type    : 'action',\n *      text    : 'Increase amount',\n *      actions : [{\n *          cls      : 'b-fa b-fa-plus', // this line will be ignored\n *          renderer : 'up.renderAction' // Defined on the Grid\n *          onClick  : ({ record }) => {}\n *      }]\n * }\n * ```\n */\n\n/**\n * A column that displays actions as clickable icons in the cell.\n *\n * {@inlineexample Grid/column/ActionColumn.js}\n *\n * ```javascript\n * new TreeGrid({\n *     appendTo : document.body,\n *     columns  : [{\n *         type    : 'action',\n *         text    : 'Increase amount',\n *         actions : [{\n *             cls      : 'b-fa b-fa-plus',\n *             renderer : ({ action, record }) => `<i class=\"b-action-item ${action.cls} b-${record.enabled ? \"green\" : \"red\"}-class\"></i>`,\n *             visible  : ({ record }) => record.canAdd,\n *             tooltip  : ({ record }) => `<p class=\"b-nicer-than-default\">Add to ${record.name}</p>`,\n *             onClick  : ({ record }) => console.log(`Adding ${record.name}`)\n *         }, {\n *             cls     : 'b-fa b-fa-pencil',\n *             tooltip : 'Edit note',\n *             onClick : ({ record }) => console.log(`Editing ${record.name}`)\n *         }]\n *     }]\n * });\n * ```\n *\n * Actions may be placed in {@link Grid/feature/Group} headers, by setting `action.showForGroup` to `true`. Those\n * actions will not be shown on normal rows.\n *\n * @extends Grid/column/Column\n * @classType action\n * @column\n */\nexport default class ActionColumn extends Column {\n\n    static type = 'action';\n\n    static fields = [\n        /**\n         * An array of action config objects, see {@link #typedef-ActionConfig} for details.\n         *\n         * ```javascript\n         * new Grid({\n         *     columns  : [{\n         *         type    : 'action',\n         *         text    : 'Actions',\n         *         actions : [{\n         *             cls      : 'b-fa b-fa-plus',\n         *             visible  : ({ record }) => record.canAdd,\n         *             onClick  : ({ record }) => console.log(`Adding ${record.name}`)\n         *         }, {\n         *             cls     : 'b-fa b-fa-pencil',\n         *             tooltip : 'Edit note',\n         *             onClick : ({ record }) => console.log(`Editing ${record.name}`)\n         *         }]\n         *     }]\n         * });\n         * ```\n         *\n         * @config {ActionConfig[]} actions List of action configs\n         * @category Common\n         */\n        { name : 'actions', type : 'array' },\n\n        /**\n         * Set true to hide disable actions in this column if the grid is {@link Core.widget.Widget#config-readOnly}\n         * @config {Boolean} disableIfGridReadOnly\n         * @default\n         * @category Common\n         */\n        { name : 'disableIfGridReadOnly', defaultValue : false }\n    ];\n\n    static defaults = {\n        /**\n         * Filtering by action column is not supported by default, because it has a custom renderer and uses HTML with icons as content.\n         * @config {Boolean} filterable\n         * @default false\n         * @category Interaction\n         * @hide\n         */\n        filterable : false,\n\n        /**\n         * Grouping by action column is not supported by default, because it has a custom renderer and uses HTML with icons as content.\n         * @config {Boolean} groupable\n         * @default false\n         * @category Interaction\n         * @hide\n         */\n        groupable : false,\n\n        /**\n         * Sorting by action column is not supported by default, because it has a custom renderer and uses HTML with icons as content.\n         * @config {Boolean} sortable\n         * @default false\n         * @category Interaction\n         * @hide\n         */\n        sortable : false,\n\n        /**\n         * Editor for action column is not supported by default, because it has a custom renderer and uses HTML with icons as content.\n         * @config {Boolean} editor\n         * @default false\n         * @category Interaction\n         * @hide\n         */\n        editor : false,\n\n        /**\n         * Searching by action column is not supported by default, because it has a custom renderer and uses HTML with icons as content.\n         * @config {Boolean} searchable\n         * @default false\n         * @category Interaction\n         * @hide\n         */\n        searchable : false,\n\n        /**\n         * By default, for action column this flag is switched to `true`, because the content of this column is always HTML.\n         * @config {Boolean} htmlEncode\n         * @default false\n         * @category Misc\n         * @hide\n         */\n        htmlEncode : false,\n\n        /**\n         * Set to `true` to allow the column to being drag-resized when the ColumnResize plugin is enabled.\n         * @config {Boolean} resizable\n         * @default false\n         * @category Interaction\n         */\n        resizable : false,\n\n        /**\n         * Column minimal width. If value is Number then minimal width is in pixels.\n         * @config {Number|String} minWidth\n         * @default 30\n         * @category Layout\n         */\n        minWidth : 30\n    };\n\n    get groupHeaderReserved() {\n        return true;\n    }\n\n    construct(config, store) {\n        const me = this;\n\n        super.construct(...arguments);\n\n        // use auto-size only as default behaviour\n        if (!config.width && !config.flex) {\n            me.grid.ion({ paint : 'updateAutoWidth', thisObj : me });\n        }\n\n        if (me.disableIfGridReadOnly) {\n            me.grid.element.classList.add('b-actioncolumn-readonly');\n        }\n\n        me.externalRenderer = me.renderer;\n        me.renderer = me.internalRenderer;\n    }\n\n    /**\n     * Renderer that displays action icon(s) in the cell.\n     * @private\n     */\n    internalRenderer({ grid, column, record, callExternalRenderer = true }) {\n        const\n            inGroupTitle = record && ('groupRowFor' in record.meta),\n            { subGrid }  = column;\n\n        if (callExternalRenderer) {\n            this.externalRenderer?.(...arguments);\n        }\n\n        return {\n            className : { 'b-action-ct' : 1 },\n            children  : column.actions?.map((actionConfig, index) => {\n                if ('visible' in actionConfig) {\n                    if ((typeof actionConfig.visible === 'function') && actionConfig.visible({ record }) === false) {\n                        return '';\n                    }\n                    if (actionConfig.visible === false) {\n                        return '';\n                    }\n                }\n\n                // check if an action allowed to be shown in case of using grouping\n                if ((inGroupTitle && !actionConfig.showForGroup) || (!inGroupTitle && actionConfig.showForGroup)) {\n                    return '';\n                }\n\n                const\n                    {\n                        tooltip,\n                        renderer\n                    }    = actionConfig,\n                    btip = (typeof tooltip === 'function' || tooltip?.startsWith?.('up.')) ? subGrid.callback(tooltip, subGrid, [{ record }]) : tooltip || '';\n\n                // handle custom renderer if it is specified\n                if (renderer) {\n                    const customRendererData = subGrid.callback(renderer, subGrid, [{\n                        index,\n                        record,\n                        column,\n                        tooltip : btip,\n                        action  : actionConfig\n                    }]);\n\n                    // take of set data-index to make onClick handler work stable\n                    if (typeof customRendererData === 'string') {\n                        return {\n                            tag     : 'span',\n                            dataset : {\n                                ...Tooltip.encodeConfig(btip),\n                                index\n                            },\n                            html : customRendererData\n                        };\n                    }\n                    else {\n                        customRendererData.dataset = customRendererData.dataset || {};\n                        customRendererData.dataset.index = index;\n                        return customRendererData;\n                    }\n                }\n                else {\n                    return {\n                        tag     : 'button',\n                        dataset : {\n                            ...Tooltip.encodeConfig(btip),\n                            index\n                        },\n                        'aria-label' : btip,\n                        className    : {\n                            'b-tool'           : 1,\n                            'b-action-item'    : 1,\n                            [actionConfig.cls] : actionConfig.cls\n                        }\n                    };\n                }\n            })\n        };\n    }\n\n    /**\n     * Handle icon click and call action handler.\n     * @private\n     */\n    onCellClick({ grid, column, record, target }) {\n        if (column !== this || !target.classList.contains('b-action-item')) {\n            return;\n        }\n\n        let actionIndex = target.dataset.index;\n        // index may be set in a parent node if user used an html string in his custom renderer\n        // and we take care to set this property to support onClick handler\n        if (!actionIndex) {\n            actionIndex = target.parentElement.dataset && target.parentElement.dataset.index;\n        }\n\n        const\n            action        = column.actions?.[actionIndex],\n            actionHandler = action && action.onClick;\n\n        if (actionHandler) {\n            this.callback(actionHandler, column, [{ record, action, target }]);\n        }\n    }\n\n    /**\n     * Update width for actions column to fit content.\n     * @private\n     */\n    updateAutoWidth() {\n        const\n            me           = this,\n            groupActions = [],\n            {\n                actions : oldActions\n            }            = me;\n\n        // header may be disabled, in that case we won't be able to calculate the width properly\n        if (!me.element) {\n            return;\n        }\n\n        const actions = me.actions = [];\n\n        // collect group and non group actions to check length later\n        oldActions?.forEach(actionOriginal => {\n            const action = { ...actionOriginal };\n\n            // remove possible visibility condition to make sure an action will exists in test HTML\n            delete action.visible;\n            // group actions shows in different row and never together with non group\n            if (action.showForGroup) {\n                delete action.showForGroup;\n                groupActions.push(action);\n            }\n            else {\n                actions.push(action);\n            }\n        });\n\n        // use longest actions length to calculate column width\n        if (groupActions.length > actions.length) {\n            me._actions = groupActions;\n        }\n\n        const actionsHtml = DomHelper.createElement(me.internalRenderer({ column : me, callExternalRenderer : false })).outerHTML;\n\n        me.width = DomHelper.measureText(actionsHtml, me.element, true, me.element.parentElement);\n        me.actions = oldActions;\n    }\n}\n\nColumnStore.registerColumnType(ActionColumn);\nActionColumn.exposeProperties();\n","import ColumnStore from '../data/ColumnStore.js';\nimport NumberColumn from './NumberColumn.js';\n\n/**\n * @module Grid/column/AggregateColumn\n */\n\n/**\n * A column, which, when used as part of a {@link Grid.view.TreeGrid}, aggregates the values of this column's descendants using\n * a configured function which defaults to `sum`. The aggregate value is re-calculated after any change to the data,\n * and if you want aggregate values to be change-tracked, please set {@link #config-includeParentInChangeSet} to true.\n *\n * Default editor depends on the data field type. If it is a number, default editor is a {@link Core/widget/NumberField}.\n * Otherwise Default editor is a {@link Core/widget/TextField}.\n *\n * ```javascript\n * const grid = new TreeGrid({\n *     // Custom aggregation handler.\n *     // For test purposes, this just does \"sum\"\n *     myAggregator(...values) {\n *         let result = 0;\n *\n *         for (let i = 0, { length } = values; i < length; i++) {\n *             result += parseInt(args[i], 10);\n *         }\n *         return result;\n *     },\n *     columns : [\n *         { field : 'name', text : 'Name' },\n *\n *         // Will sum the ages of leaf nodes. This is the default.\n *         { type : 'aggregate', field : 'age', text : 'Age', renderer : ({ value }) => `<b>${value}<b>` },\n *\n *         // Will use AggregateColumn's built-in avg of scores of leaf nodes\n *         { type : 'aggregate', field : 'score', text : 'Score', function : 'avg' },\n *\n *         // Will use the grid's myAggregator function\n *         { type : 'aggregate', field : 'revenue', text : 'Revenue', function : 'up.myAggregator' },\n *     ]\n * });\n * ```\n *\n * @extends Grid/column/NumberColumn\n * @classType aggregate\n * @column\n */\nexport default class AggregateColumn extends NumberColumn {\n    //region Config\n\n    static type = 'aggregate';\n\n    static fields = [\n        'function',\n        'includeParentInChangeSet'\n    ];\n\n    static get defaults() {\n        return {\n            /**\n             * Math Function name, or function name prepended by `\"up.\"` that is resolvable in an\n             * ancestor component (such as the owning Grid, or a hight Container), or a function to\n             * use to aggregate child record values for this column, or a function.\n             *\n             * This Column is provided with a `sum` and `avg` function. The default function is `sum`\n             * which is used for the aggregation.\n             *\n             * The function is passed a set of child node values, each value in a separate argument\n             * and should return a single value based upon the value set passed.\n             * @config {Function|String}\n             * @category Common\n             */\n            function : 'sum',\n\n            /**\n             * Set to `true` to include changes to parent (aggregate) rows in the store's modification tracking.\n             * @config {Boolean} includeParentInChangeSet\n             * @category Common\n             */\n            includeParentInChangeSet : false\n        };\n    }\n\n    construct(data, columnStore) {\n        this.configuredAlign = 'align' in data;\n        this.configuredEditor = 'editor' in data;\n\n        super.construct(...arguments);\n\n        const { grid } = columnStore;\n\n        // 'sum' is reserved by Summary feature, so we use a different name\n        if (this.function === 'sum') {\n            this.function = 'sumChildren';\n        }\n\n        if (grid) {\n            this.store = grid.store;\n        }\n    }\n\n    set store(store) {\n        const\n            me             = this,\n            storeListeners = {\n                update  : 'onRecordUpdate',\n                thisObj : me,\n                prio    : 1000\n            },\n            oldStore = me._store;\n\n        if (store !== oldStore) {\n            if (oldStore) {\n                oldStore.un(storeListeners);\n            }\n\n            me._store = store;\n\n            const\n                { modelClass } = store,\n                field = modelClass.fieldMap[me.field];\n\n            // It's *likely*, but not certain that this will be used for a numeric field.\n            // Use numeric defaults unless configured otherwise if so.\n            if (field && field.type === 'number') {\n                if (!me.configuredAlign) {\n                    me.align = 'end';\n                }\n                if (!me.configuredEditor) {\n                    me.editor = 'number';\n                }\n            }\n\n            store.ion(storeListeners);\n        }\n    }\n\n    canEdit(record) {\n        return record.isLeaf;\n    }\n\n    get store() {\n        return this._store;\n    }\n\n    sumChildren(...args) {\n        let result = 0;\n\n        for (let i = 0, { length } = args; i < length; i++) {\n            result += parseFloat(args[i] || 0, 10);\n        }\n        return result;\n    }\n\n    avg(...args) {\n        let result = 0;\n        const { length } = args;\n\n        for (let i = 0; i < length; i++) {\n            result += parseFloat(args[i] || 0, 10);\n        }\n        return result / length;\n    }\n\n    onRecordUpdate({ record, changes }) {\n        const\n            me = this,\n            { rowManager } = me.grid;\n\n        if (me.field in changes) {\n            if (record.isLeaf) {\n                record.bubble(rec => {\n                    const row = rowManager.getRowFor(rec);\n\n                    if (row) {\n                        const cellElement = row.getCell(me.field);\n\n                        if (cellElement) {\n                            row.renderCell(cellElement);\n                        }\n                    }\n                }, true);\n            }\n        }\n    }\n\n    getRawValue(record) {\n        let value = 0;\n\n        if (record.children?.length) {\n            const\n                me       = this,\n                fn       = me.function,\n                isMathFn = typeof fn === 'string' && typeof Math[fn] === 'function',\n                {\n                    handler,\n                    thisObj\n                } = isMathFn ? {\n                    handler : Math[fn],\n                    thisObj : Math\n                } : me.resolveCallback(fn);\n\n            // Gather all child node values before passing them to the aggregator function.\n            value = handler.apply(thisObj, record.children.map(r => me.getRawValue(r)));\n            if (me.includeParentInChangeSet) {\n                record.set(me.field, value, true);\n            }\n            else {\n                record.setData(me.field, value);\n            }\n        }\n        else {\n            value = record[this.field];\n        }\n        return value;\n    }\n\n    canFillValue() {\n        return false;\n    }\n}\n\nColumnStore.registerColumnType(AggregateColumn, true);\nAggregateColumn.exposeProperties();\n","import NumberColumn from './NumberColumn.js';\nimport ColumnStore from '../data/ColumnStore.js';\n\n/**\n * @module Grid/column/PercentColumn\n */\n\n/**\n * A column that display a basic progress bar.\n *\n * {@inlineexample Grid/column/PercentColumn.js}\n *\n * ```javascript\n * new Grid({\n *     appendTo : document.body,\n *\n *     columns : [\n *         { type: 'percent', text: 'Progress', data: 'progress' }\n *     ]\n * });\n * ```\n *\n * Default editor is a {@link Core.widget.NumberField NumberField}.\n *\n * @extends Grid/column/NumberColumn\n * @classType percent\n * @column\n */\nexport default class PercentColumn extends NumberColumn {\n\n    static type = 'percent';\n\n    // Type to use when auto adding field\n    static fieldType = 'number';\n\n    static fields = ['showValue', 'lowThreshold'];\n\n    static get defaults() {\n        return {\n            min : 0,\n            max : 100,\n\n            /**\n             * Set to `true` to render the number value inside the bar, for example \"15%\"\n             * @config {Boolean}\n             * @default\n             * @category Rendering\n             */\n            showValue : false,\n\n            /**\n             * When below this percentage the bar will have `b-low` CSS class added. By default it turns the bar red.\n             * @config {Number}\n             * @default\n             * @category Rendering\n             */\n            lowThreshold : 20,\n\n            htmlEncode      : false,\n            searchable      : false,\n            summaryRenderer : sum => `${sum}%`,\n            fitMode         : false\n        };\n    }\n\n    constructor(config, store) {\n        super(...arguments);\n\n        this.internalCellCls = 'b-percent-bar-cell';\n    }\n\n    /**\n     * Renderer that displays a progress bar in the cell. If you create a custom renderer, and want to include the\n     * default markup you can call `defaultRenderer` from it.\n     *\n     * ```javascript\n     * new Grid({\n     *     columns: [\n     *         {\n     *             type: 'percent',\n     *             text : 'Percent',\n     *             field : 'percent',\n     *             renderer({ value }) {\n     *                 const domConfig = this.defaultRenderer();\n     *\n     *                 if (value > 100) {\n     *                     domConfig.className = b-percent-bar-outer over-allocated';\n     *                 }\n     *\n     *                 return domConfig;\n     *             }\n     *         }\n     *     ]\n     * }\n     * ```\n     *\n     * @param {Object} rendererData The data object passed to the renderer\n     * @param {Number} rendererData.value The value to display\n     * @returns {DomConfig} DomConfig object representing the default markup for the cells content\n     */\n    defaultRenderer({ value }) {\n        value = value || 0;\n\n        return {\n            className       : 'b-percent-bar-outer',\n            role            : 'progressbar',\n            'aria-Valuemin' : 0,\n            'aria-Valuemax' : 100,\n            'aria-Valuenow' : value,\n            tabIndex        : 0,\n            children        : [\n                {\n                    tag       : 'div',\n                    className : {\n                        'b-percent-bar' : 1,\n                        'b-zero'        : value === 0,\n                        'b-low'         : value < this.lowThreshold\n                    },\n                    style : {\n                        width : value + '%'\n                    },\n                    children : [\n                        this.showValue ? {\n                            tag  : 'span',\n                            text : value + '%'\n                        } : undefined\n                    ]\n                }\n            ]\n        };\n    }\n\n    // Null implementation because the column width drives the width of its content.\n    // So the concept of sizing to content is invalid here.\n    resizeToFitContent() {}\n}\n\nPercentColumn.sum = 'average';\n\nColumnStore.registerColumnType(PercentColumn, true);\n","import NumberColumn from './NumberColumn.js';\nimport ColumnStore from '../data/ColumnStore.js';\nimport ArrayHelper from '../../Core/helper/ArrayHelper.js';\n\n/**\n * @module Grid/column/RatingColumn\n */\n\n/**\n * A column that displays a star rating. Click a start to set a value, shift+click to unset a single start from the end.\n * Clicking the first and only star toggles it.\n *\n * This column uses a custom widget as its editor, and it is not intended to be changed.\n *\n * @extends Grid/column/NumberColumn\n *\n * @example\n * new Grid({\n *     appendTo : document.body,\n *\n *     columns : [\n *         { type: 'rating', max : 10, field: 'rating' }\n *     ]\n * });\n *\n * @classType rating\n * @inlineexample Grid/column/RatingColumn.js\n * @column\n */\nexport default class RatingColumn extends NumberColumn {\n\n    // Do not remove. Assertion strings for Localization sanity check.\n    // 'L{Column.cellLabel}'\n\n    static $name = 'RatingColumn';\n\n    static type = 'rating';\n\n    // Type to use when auto adding field\n    static fieldType = 'number';\n\n    static fields = ['emptyIcon', 'filledIcon', 'editable'];\n\n    static get defaults() {\n        return {\n            min : 0,\n            max : 5,\n\n            /**\n             * The empty rating icon to show\n             * @config {String}\n             * @category Rendering\n             */\n            emptyIcon : 'b-icon b-icon-star',\n\n            /**\n             * The filled rating icon to show\n             * @config {String}\n             * @category Rendering\n             */\n            filledIcon : 'b-icon b-icon-star',\n\n            /**\n             * Allow user to click an icon to change the value\n             * @config {Boolean}\n             * @category Interaction\n             */\n            editable : true,\n\n            filterType : 'number',\n            searchable : false,\n            width      : '11.2em',\n            htmlEncode : false,\n            minWidth   : '11.2em',\n            editor     : false,\n            fitMode    : 'value'\n        };\n    }\n\n    /**\n     * Renderer that displays a number of stars in the cell. Also adds CSS class 'b-rating-cell' to the cell.\n     * @private\n     */\n    renderer({ value }) {\n        return {\n            className : {\n                'b-rating-cell-inner' : 1,\n                'b-not-editable'      : !this.editable\n            },\n            children : ArrayHelper.populate(this.max, i => {\n                const filled = i < value;\n                return {\n                    tag       : 'i',\n                    className : {\n                        'b-rating-icon'                             : true,\n                        'b-filled'                                  : filled,\n                        'b-empty'                                   : !filled,\n                        [filled ? this.filledIcon : this.emptyIcon] : true\n                    }\n                };\n            })\n        };\n    }\n\n    onCellClick({ grid, column, record, target, event }) {\n        if (target.classList.contains('b-rating-icon') && !grid.readOnly && column.editable) {\n            let starIndex = [].indexOf.call(target.parentNode.childNodes, target);\n\n            if (target.classList.contains('b-filled') && (event.metaKey || event.shiftKey)) {\n                starIndex = starIndex - 1;\n            }\n\n            // Clicking first star when it is only one removes it\n            if (record.get(column.field) === 1 && starIndex === 0) {\n                starIndex = -1;\n            }\n\n            record.set(column.field, starIndex + 1);\n        }\n    }\n}\n\nColumnStore.registerColumnType(RatingColumn, true);\nRatingColumn.exposeProperties();\n","import Column from './Column.js';\nimport ColumnStore from '../data/ColumnStore.js';\n\n/**\n * @module Grid/column/TemplateColumn\n */\n\n/**\n * A column that uses a template for cell content. Any function can be used as template, and the function is passed { value, record, field } properties.\n * It should return a string which will be rendered in the cell.\n *\n * Default editor is a {@link Core.widget.TextField TextField}.\n *\n * @extends Grid/column/Column\n *\n * @example\n * new Grid({\n *     appendTo : document.body,\n *\n *     columns : [\n *         { type: 'template', field: 'age', template: ({value}) => `${value} years old` }\n *     ]\n * });\n *\n * @classType template\n * @inlineexample Grid/column/TemplateColumn.js\n * @column\n */\nexport default class TemplateColumn extends Column {\n\n    static type = 'template';\n\n    static fields = [\n        /**\n         * Template function used to generate a value displayed in the cell. Called with arguments `{ value, record, field }`\n         * @config {Function} template\n         * @param {Object} data An object that contains data about the cell being rendered.\n         * @param {*} data.value The value (only present when you set a `field` on the column)\n         * @param {Core.data.Model} data.record The record representing the row\n         * @param {String} data.field The column field name\n         * @category Common\n         */\n        'template'\n    ];\n\n    static get defaults() {\n        return {\n            htmlEncode : false\n        };\n    }\n\n    constructor(config, store) {\n        super(...arguments);\n\n        const me = this;\n\n        if (!me.template) {\n            throw new Error('TemplateColumn needs a template');\n        }\n\n        if (typeof me.template !== 'function') {\n            throw new Error('TemplateColumn.template must be a function');\n        }\n    }\n\n    /**\n     * Renderer that uses a template for cell content.\n     * @private\n     */\n    renderer(renderData) {\n        // If it's a special row, such as a group row, we can't use the user's template\n        if (!renderData.record.isSpecialRow) {\n            return this.template({\n                value  : renderData.value,\n                record : renderData.record,\n                field  : renderData.column.field\n            });\n        }\n    }\n}\n\nColumnStore.registerColumnType(TemplateColumn, true);\nTemplateColumn.exposeProperties();\n","import Column from './Column.js';\nimport ColumnStore from '../data/ColumnStore.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\n\n/**\n * @module Grid/column/TimeColumn\n */\n\n/**\n * A column that displays a time in the specified format (see {@link Core.helper.DateHelper#function-format-static} for formatting options).\n *\n * Default editor is a {@link Core.widget.TimeField TimeField}.\n *\n * @extends Grid/column/Column\n *\n * @example\n * new Grid({\n *     appendTo : document.body,\n *\n *     columns : [\n *          { type: 'time', text: 'Start time', format: 'HH:mm:ss', data: 'start' }\n *     ]\n * });\n *\n * @classType time\n * @inlineexample Grid/column/TimeColumn.js\n * @column\n */\nexport default class TimeColumn extends Column {\n\n    //region Config\n\n    static type = 'time';\n\n    // Type to use when auto adding field\n    static fieldType = 'date';\n\n    static fields = ['format'];\n\n    static get defaults() {\n        return {\n            /**\n             * Time format\n             * @config {String}\n             * @category Common\n             */\n            format : 'LT',\n\n            minWidth : 140,\n\n            filterType : 'time'\n        };\n    }\n\n    //endregion\n\n    //region Display\n\n    /**\n     * Renderer that displays the time with the specified format. Also adds cls 'b-time-cell' to the cell.\n     * @private\n     */\n    defaultRenderer({ value }) {\n        return value ? this.formatValue(value) : '';\n    }\n\n    /**\n     * Group renderer that displays the time with the specified format.\n     * @private\n     */\n    groupRenderer({ cellElement, groupRowFor }) {\n        cellElement.innerHTML = this.formatValue(groupRowFor);\n    }\n\n    //endregion\n\n    //region Formatter\n\n    /**\n     * Used by both renderer and groupRenderer to do the actual formatting of the time\n     * @private\n     * @param value\n     * @returns {String}\n     */\n    formatValue(value) {\n        // Ideally we should be served a time, but if not make it easier for the user by parsing\n        if (typeof value === 'string') {\n            value = DateHelper.parse(value, this.format);\n        }\n        return DateHelper.format(value, this.format);\n    }\n\n    //endregion\n\n    //region Getters/Setters\n    /**\n     * Get/Set format for time displayed in cell and editor (see {@link Core.helper.DateHelper#function-format-static} for formatting options)\n     * @property {String}\n     */\n    set format(value) {\n        const { editor } = this;\n\n        this.set('format', value);\n\n        if (editor) {\n            editor.format = value;\n        }\n    }\n\n    get format() {\n        return  this.get('format');\n    }\n\n    get defaultEditor() {\n        return {\n            name   : this.field,\n            type   : 'time',\n            format : this.format\n        };\n    }\n\n    //endregion\n}\n\nColumnStore.registerColumnType(TimeColumn, true);\nTimeColumn.exposeProperties();\n","import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport BrowserHelper from '../../Core/helper/BrowserHelper.js';\nimport VersionHelper from '../../Core/helper/VersionHelper.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\n\n/**\n * @module Grid/feature/CellCopyPaste\n */\n\n/**\n * Allows using `[Ctrl/CMD + C]`, `[Ctrl/CMD + X]` and `[Ctrl/CMD + V]` to cut, copy and paste cell or cell ranges. Also\n * makes cut, copy and paste actions available via the cell context menu.\n *\n * Requires {@link Grid/view/Grid#config-selectionMode selectionMode.cell} to be activated.\n *\n * This feature will work alongside with {@link Grid/feature/RowCopyPaste} but there is differences on functionality.\n * * When used together, context menu options will be detailed so the user will know to copy the cell or the row.\n * * They will also detect what type of selection is present at the moment. If there are only rows selected, only row\n *   alternatives are shown in the context menu and the keyboard shortcuts will be processed by RowCopyPaste.\n * * If there are only cells selected, there will be context menu options for both row and cell but keyboard shortcuts\n *   will be handled by CellCopyPaste.\n * * They do not share clipboard, so it is possible to have rows and cells copied or cut at the same time.\n *\n * If the {@link https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API Clipboard API} is available, that will\n * be used. This enables copying and pasting between different Bryntum products or completely different applications.\n * Please note that only string values are supported.\n *\n * This feature is **disabled** by default\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         cellCopyPaste : true\n *     }\n * });\n * ```\n *\n * {@inlineexample Grid/feature/CellCopyPaste.js}\n *\n * ## Keyboard shortcuts\n * The feature has the following default keyboard shortcuts:\n *\n * | Keys   | Action | Action description                                                                      |\n * |--------|--------|-----------------------------------------------------------------------------------------|\n * | Ctrl+C | copy   | Calls {@link #function-copy} which copies selected cell values into the clipboard.      |\n * | Ctrl+X | cut    | Calls {@link #function-cut} which cuts out selected cell values and saves in clipboard. |\n * | Ctrl+V | paste  | Calls {@link #function-paste} which inserts string values from the clipboard.           |\n *\n * For more information on how to customize keyboard shortcuts, please see\n * [this guide](#Grid/guides/customization/keymap.md).\n *\n * @extends Core/mixin/InstancePlugin\n * @classtype cellCopyPaste\n * @feature\n */\nexport default class CellCopyPaste extends InstancePlugin {\n    static $name = 'CellCopyPaste';\n\n    static pluginConfig = {\n        chain : [\n            'populateCellMenu', 'afterSelectionModeChange'\n        ]\n    }\n\n    static configurable = {\n\n        /**\n         * If `true` this prevents cutting and pasting. Will default to `true` if {@link Grid/feature/CellEdit} feature is disabled.\n         * Set to `false` to prevent this behaviour.\n         * @config {Boolean}\n         */\n        copyOnly : null,\n\n        /**\n         * If an empty value (null or empty string) is copied or cut, this config will replace that value.\n         * This allows for clipboard data to skip columns.\n         *\n         * For example, look at these two selections\n         * |  ROW  |   0  |      1       |       2      |   3  |\n         * |-------|------|--------------|--------------|------|\n         * | ROW 1 | SEL1 | not selected | not selected | SEL2 |\n         * | ROW 2 | SEL3 | SEL4 (empty) | SEL5 (empty) | SEL6 |\n         *\n         * The clipboardData for `ROW 1` will look like this:\n         `* SEL1\\t\\t\\SEl2\\nSEL3\\t\\t\\SEL4`\n         *\n         * And `ROW 2` will look like this:\n         * `SEL3\\t\\u{0020}\\t\\u{0020}\\tSEL6`\n         *\n         * `ROW 1` will set value `SEL1` at column index 0 and `SEL2` at column index 3. This leaves column index 1 and\n         * 2 untouched.\n         *\n         * `ROW 2` will set value `SEL3` at column index 0, `u{0020}` at column index 1 and 2, and `SEL`6 at column\n         * index 3.\n         *\n         * The default `u{0020}` is a blank space.\n         *\n         * @config {String}\n         * @default\n         */\n        emptyValueChar : '\\u{0020}',\n\n        /**\n         * See {@link #keyboard-shortcuts Keyboard shortcuts} for details\n         * @config {Object<String,String>}\n         */\n        keyMap : {\n            'Ctrl+C' : 'copy',\n            'Ctrl+X' : 'cut',\n            'Ctrl+V' : 'paste'\n        },\n\n        /**\n         * Set this to `false` to not use native Clipboard API even if it is available\n         * @config {Boolean}\n         * @default true\n         */\n        useNativeClipboard : !VersionHelper.isTestEnv,\n\n        /**\n         * Provide a function to be able to customize the string value which is copied.\n         *\n         * ````javascript\n         * new Grid({\n         *     features : {\n         *         cellCopyPaste : {\n         *             toCopyString({currentValue, column, record}) {\n         *                 if(record.isAvatar){\n         *                     return record.fullName;\n         *                 }\n         *                 return currentValue;\n         *             }\n         *         }\n         *     }\n         * });\n         * ````\n         *\n         * @param {Object} data\n         * @param {String} data.currentValue\n         * @param {Grid.column.Column} data.column\n         * @param {Core.data.Model} data.record\n         * @config {Function}\n         */\n        toCopyString : null,\n\n        /**\n         * Provide a function to be able to customize the value which will be set onto the record\n         *\n         * ````javascript\n         * new Grid({\n         *     features : {\n         *         cellCopyPaste : {\n         *             toPasteValue({currentValue, column, record, field}) {\n         *                 if(typeof currentValue === 'string'){\n         *                     return currentValue.replace('$', '');\n         *                 }\n         *                 return currentValue;\n         *             }\n         *         }\n         *     }\n         * });\n         * ````\n         *\n         * @param {Object} data\n         * @param {String} data.currentValue\n         * @param {Grid.column.Column} data.column\n         * @param {Core.data.Model} data.record\n         * @config {Function}\n         */\n        toPasteValue : null,\n\n        copyText  : 'L{copy}',\n        cutText   : 'L{cut}',\n        pasteText : 'L{paste}'\n    }\n\n    afterConstruct() {\n        super.afterConstruct();\n        this.afterSelectionModeChange();\n    }\n\n    afterSelectionModeChange() {\n        const me = this;\n\n        if (!me.client.selectionMode.cell) {\n            me.disabled = true;\n        }\n        else if (me._disabledBySelectionMode) {\n            me.disabled = false;\n            delete me._disabledBySelectionMode;\n        }\n    }\n\n    // Used in events to separate events from different features from each other\n    entityName = 'cell';\n\n    get copyOnly() {\n        // If celledit is disabled, cut and paste actions are disabled by default\n        return this._copyOnly || !this.client.features.cellEdit?.enabled;\n    }\n\n    get canCopy() {\n        return !this.disabled && !this.client.selectedRecords.length && this.client.selectedCells.length;\n    }\n\n    get canCutPaste() {\n        return this.canCopy && !this.copyOnly && !this.client.features.cellEdit?.isEditing && !this.client.readOnly;\n    }\n\n    // Called from keyMap. Also used internally here\n    isActionAvailable(key, action) {\n        return this.canCopy && (action === 'copy' || this.canCutPaste);\n    }\n\n    // Takes cell locations and converts them to tab and new-line separated string values.\n    // Then stores them in native clipboard or the internal clipboard\n    async sendToClipboard(cells) {\n        const\n            me           = this;\n        let lastRowIndex = 0,\n            lastColIndex = 0,\n            stringData   = '';\n\n        // Sorted by rowIndex then by columnIndex\n        cells.sort((c1, c2) => c1.rowIndex === c2.rowIndex ? c1.columnIndex - c2.columnIndex : c1.rowIndex - c2.rowIndex);\n\n        for (const cell of cells) {\n            const { record, column, rowIndex, columnIndex } = cell;\n\n            // Separate with \\n if new row\n            if (rowIndex > lastRowIndex) {\n                if (stringData.length > 0) {\n                    stringData += '\\n'.repeat(rowIndex - lastRowIndex);\n                }\n                lastRowIndex = rowIndex;\n                lastColIndex = columnIndex;\n            }\n            // Separate with \\t if new column\n            else if (columnIndex > lastColIndex) {\n                if (stringData.length > 0) {\n                    stringData += '\\t'.repeat(columnIndex - lastColIndex);\n                }\n                lastColIndex = columnIndex;\n            }\n\n            // The column can provide its own toClipboardString\n            let cellValue = column.toClipboardString?.(cell);\n\n            // Or we use the raw value from the record\n            if (cellValue === undefined) {\n                cellValue = record.get(column.field)?.toString();\n            }\n\n            // The client can provide its own as well.\n            if (me.toCopyString) {\n                cellValue = me.toCopyString({ currentValue : cellValue, column, record });\n            }\n\n            cellValue = cellValue?.replace(/[\\n\\t]/, ' ');\n\n            stringData += cellValue || me.emptyValueChar;\n        }\n\n        await BrowserHelper.writeToClipboard(stringData, this.useNativeClipboard);\n\n        return stringData;\n    }\n\n    /**\n     * Cuts selected cells to clipboard (native if accessible) to paste later\n     * @async\n     */\n    async cut() {\n        await this.copy(true);\n    }\n\n    /**\n     * Copies selected cells to clipboard (native if accessible) to paste later\n     * @async\n     */\n    async copy(cut) {\n        const\n            me    = this,\n            {\n                client,\n                entityName\n            }     = me,\n            isCut = typeof cut === 'boolean' ? cut : false, // If called by keymap, arguments[0] will be an event\n            cells = isCut ? client.selectedCells.filter(r => !r.record?.readOnly) : client.selectedCells;\n\n        if (cells) {\n\n            /**\n             * Fires on the owning Grid before a copy action is performed, return `false` to prevent the action\n             * @event beforeCopy\n             * @preventable\n             * @on-owner\n             * @param {Grid.view.Grid} source Owner grid\n             * @param {Grid.util.Location[]} cells The cells about to be copied or cut\n             * @param {Boolean} isCut `true` if this is a cut action\n             * @param {String} entityName 'cell' to distinguish this event from other beforeCopy events\n             */\n            if ((isCut ? !me.canCutPaste : !me.canCopy) ||\n                client.trigger('beforeCopy', { cells, isCut, entityName }) === false\n            ) {\n                return;\n            }\n\n            const copiedDataString = await me.sendToClipboard(cells);\n\n            if (isCut === true) {\n                for (const cell of cells) {\n                    if (!cell.column.readOnly) {\n                        cell.record.set(cell.column.field, null);\n                    }\n                }\n            }\n\n            /**\n             * Fires on the owning Grid after a copy action is performed.\n             * @event copy\n             * @on-owner\n             * @param {Grid.view.Grid} source Owner grid\n             * @param {Grid.util.Location[]} cells The cells about to be copied or cut\n             * @param {String} copiedDataString The concatenated data string that was copied or cut\n             * @param {Boolean} isCut `true` if this was a cut action\n             * @param {String} entityName 'cell' to distinguish this event from other copy events\n             */\n            client.trigger('copy', { cells, copiedDataString, isCut, entityName });\n\n        }\n    }\n\n    /**\n     * Pastes string data into a cell or a range of cells. Either from native clipboard if that is accessible or from a\n     * fallback clipboard that is only available to the owner Grid.\n     *\n     * The string data will be split on `\\n` and `\\t` and put in different rows and columns accordingly.\n     *\n     * Note that there must be a selected cell to paste the data into.\n     * @async\n     */\n    async paste() {\n        const\n            me            = this,\n            {\n                client,\n                entityName\n            }             = me,\n            clipboardData = await BrowserHelper.readFromClipboard(me.useNativeClipboard),\n            targetCell    = client.selectedCells[0];\n\n        /**\n         * Fires on the owning Grid before a paste action is performed, return `false` to prevent the action\n         * @event beforePaste\n         * @preventable\n         * @on-owner\n         * @param {Grid.view.Grid} source Owner grid\n         * @param {String} clipboardData The clipboardData about to be pasted\n         * @param {Grid.util.Location} targetCell The cell from which the paste will be started\n         * @param {String} entityName 'cell' to distinguish this event from other beforePaste events\n         */\n        if (\n            !me.canCutPaste ||\n            !clipboardData?.length ||\n            !targetCell ||\n            client.trigger('beforePaste', { clipboardData, targetCell, entityName }) === false\n        ) {\n            return;\n        }\n\n        const\n            modifiedRecords       = new Set(),\n            // Converts the clipboard data into a 2-dimensional array of string values.\n            rows                  = me.stringAs2dArray(clipboardData),\n            targetCells           = [],\n            { _shiftSelectRange } = client;\n\n        // No valid clipboard data, break\n        if (!rows?.length) {\n            return;\n        }\n\n        // If there is a selected range, pasting should be repeated into that range\n        if (_shiftSelectRange?.some(cell => cell.equals(targetCell))) {\n            const cellRows = me.cellSelectorsAs2dArray(_shiftSelectRange);\n\n            // The selection must fit the whole paste content. If pasting 2 rows for example, a number of rows that is\n            // divisible by 2 is required. Same for columns.\n            if (cellRows?.length % rows.length === 0 && cellRows.columnCount % rows.columnCount === 0) {\n                // This code will calculate each cell target to repeat the pasting on\n                for (let curI = 0; curI < cellRows.length; curI += rows.length) {\n                    for (let curX = 0; curX < cellRows.columnCount; curX += rows.columnCount) {\n                        targetCells.push(cellRows[curI][curX]);\n                    }\n                }\n            }\n        }\n\n        // No valid range, just use one target\n        if (!targetCells.length) {\n            targetCells.push(targetCell);\n        }\n\n        for (const targetCell of targetCells) {\n            for (let rI = 0; rI < rows.length; rI++) {\n                const\n                    row          = rows[rI],\n                    targetRecord = client.store.getAt(targetCell.rowIndex + rI);\n\n                // Starts with targetCell rowIndex and columnIndex and applies values from the clipboard string.\n                if (targetRecord && !targetRecord.readOnly) {\n                    for (let cI = 0; cI < row.length; cI++) {\n                        const\n                            targetColumn = client.columns.getAt(targetCell.columnIndex + cI),\n                            targetField  = targetColumn?.field;\n                        let value        = row[cI];\n\n                        // If no value, this column is skipped\n                        if (targetField && value && !targetColumn.readOnly) {\n                            if (value === me.emptyValueChar) {\n                                value = null;\n                            }\n\n                            // Column provided paste conversion function\n                            if (targetColumn.fromClipboardString) {\n                                value = targetColumn.fromClipboardString({\n                                    string : value,\n                                    record : targetRecord\n                                });\n                            }\n\n                            // Client provided paste customization function\n                            if (me.toPasteValue) {\n                                value = me.toPasteValue({\n                                    currentValue : value,\n                                    record       : targetRecord,\n                                    column       : targetColumn,\n                                    field        : targetField\n                                });\n                            }\n\n                            targetRecord.set(targetField, value, false, false, false, true);\n                            modifiedRecords.add(targetRecord);\n                        }\n                    }\n                }\n            }\n        }\n\n        /**\n         * Fires on the owning Grid after a paste action is performed.\n         * @event paste\n         * @on-owner\n         * @param {Grid.view.Grid} source Owner grid\n         * @param {String} clipboardData The clipboardData that was pasted\n         * @param {Core.data.Model[]} modifiedRecords The records which have been modified due to the paste action\n         * @param {Grid.util.Location} targetCell The cell from which the paste will be started\n         * @param {String} entityName 'cell' to distinguish this event from other paste events\n         */\n        client.trigger('paste', { clipboardData, targetCell, modifiedRecords : [...modifiedRecords], entityName });\n    }\n\n    /**\n     * Converts an array of Location objects to a two-dimensional array where first level is rows and second level is\n     * columns. If the array is inconsistent in the number of columns present for each row, the function will return\n     * false.\n     * @param {Grid.util.Location[]} locations\n     * @private\n     */\n    cellSelectorsAs2dArray(locations) {\n        const\n            rows = [];\n        let rId  = null,\n            columns;\n\n        for (const location of locations) {\n            // If new id (new record) create new \"row\"\n            if (location.id !== rId) {\n                rId = location.id;\n                columns = [];\n                rows.push(columns);\n            }\n            columns.push(location);\n        }\n\n        // Save number of \"columns\" for easier access\n        rows.columnCount = rows[0].length;\n\n        // All \"rows\" must have the same number of columns\n        if (rows.some(row => row.length !== rows.columnCount)) {\n            return false;\n        }\n\n        return rows;\n    }\n\n    /**\n     * Converts a new-line- and tab-separated string to a two-dimensional array where first level is rows and second\n     * level is columns. If the string is inconsistent in the number of columns present for each row, the function will\n     * return false.\n     * @param {String} string String values separated with new-line(\\n,\\r or similar) and tabs (\\t)\n     * @private\n     */\n    stringAs2dArray(string) {\n        const\n            rows       = [],\n            stringRows = string.split(/\\r\\n|(?!\\r\\n)[\\n-\\r\\x85\\u2028\\u2029]/);\n\n        for (const row of stringRows) {\n            const columns = row.split('\\t');\n\n            // All \"rows\" must have the same number of columns\n            if (rows.columnCount && columns.length !== rows.columnCount) {\n                return false;\n            }\n            // Save number of \"columns\" for easier access\n            rows.columnCount = columns.length;\n            rows.push(columns);\n        }\n        return rows;\n    }\n\n    populateCellMenu({ record, items }) {\n        const me = this;\n\n        if (me.canCopy) {\n            items.cutCell = {\n                text        : me.cutText,\n                localeClass : me,\n                icon        : 'b-icon b-icon-cut',\n                weight      : 115,\n                disabled    : record.readOnly || !me.canCutPaste,\n                onItem      : () => me.cut()\n            };\n\n            items.pasteCell = {\n                text        : me.pasteText,\n                localeClass : me,\n                icon        : 'b-icon b-icon-paste',\n                weight      : 120,\n                disabled    : record.readOnly || !me.canCutPaste,\n                onItem      : () => me.paste()\n            };\n\n            items.copyCell = {\n                text        : me.copyText,\n                localeClass : me,\n                cls         : 'b-separator',\n                icon        : 'b-icon b-icon-copy',\n                weight      : 110,\n                onItem      : () => me.copy()\n            };\n        }\n    }\n}\n\nGridFeatureManager.registerFeature(CellCopyPaste);\n","import Objects from '../../Core/helper/util/Objects.js';\nimport Tooltip from '../../Core/widget/Tooltip.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\n\n/**\n * @module Grid/feature/CellTooltip\n */\n\n/**\n * Displays a tooltip when hovering cells.\n *\n * {@inlineexample Grid/feature/CellTooltip.js}\n *\n * To show contents when hovering a cell, you can specify a global {@link #config-tooltipRenderer} function for the\n * feature, you can also define a {@link Grid.column.Column#config-tooltipRenderer} for individual columns.\n *\n * ```javascript\n * // Column with its own tooltip renderer\n * {\n *   text            : 'Name',\n *   field           : 'name',\n *   tooltipRenderer : ({ record }) => `My name is\\xa0<b>${record.name}</b>`\n * }\n * ```\n *\n * Configuration properties passed into this feature are used to configure the {@link Core.widget.Tooltip} instance\n * used.\n *\n * This feature is <strong>disabled</strong> by default.\n *\n * ## Showing async content\n * Showing remotely loaded content is super easy using the {@link #config-tooltipRenderer}:\n *\n * ```javascript\n * // Async tooltip with some custom settings\n * const grid = new Grid({\n *   features: {\n *     cellTooltip: {\n *       // Time that mouse needs to be over cell before tooltip is shown\n *       hoverDelay : 4000,\n *       // Time after mouse out to hide the tooltip, 0 = instantly\n *       hideDelay  : 0,\n *       // Async tooltip renderer, return a Promise which yields the text content\n *       tooltipRenderer({ record, tip }) {\n *         return fetch(`tip.php?id=${record.id}`).then(response => response.text())\n *       }\n *     }\n *   }\n * });\n * ```\n *\n * @extends Core/mixin/InstancePlugin\n * @extendsconfigs Core/widget/Tooltip\n * @demo Grid/celltooltip\n * @classtype cellTooltip\n * @feature\n */\nexport default class CellTooltip extends InstancePlugin {\n    //region Config\n\n    static $name = 'CellTooltip';\n\n    static configurable = {\n        /**\n         * Function called to generate the HTML content for the cell tooltip.\n         * The function should return a string (your HTML), or a Promise yielding a string (for remotely loaded\n         * content)\n         * @prp {Function}\n         * @param {Object} context\n         * @param {HTMLElement} context.cellElement The cell element\n         * @param {Core.data.Model} context.record The row record\n         * @param {Grid.column.Column} context.column The column\n         * @param {Core.widget.Tooltip} context.tip The Tooltip instance\n         * @param {Grid.feature.CellTooltip} context.cellTooltip The feature\n         * @param {Event} context.event The raw DOM event\n         * @returns {String|Promise}\n         */\n        tooltipRenderer : null\n    };\n\n    //endregion\n\n    // region Init\n\n    construct(grid, config) {\n        super.construct(grid, this.processConfig(config));\n    }\n\n    initTip() {\n        const me = this;\n\n        me.tip = Tooltip.new({\n            forElement        : me.client.element,\n            forSelector       : '.b-grid-row:not(.b-group-row) .b-grid-cell, .b-grid-merged-cells',\n            hoverDelay        : 1000,\n            trackMouse        : false,\n            cls               : 'b-celltooltip-tip',\n            getHtml           : me.getTooltipContent.bind(me),\n            internalListeners : {\n                pointerOver : 'onPointerOver',\n                thisObj     : me\n            },\n            listeners : me.configuredListeners\n        }, me.initialConfig);\n\n        me.relayEvents(me.tip, ['beforeShow', 'show']);\n    }\n\n    onPointerOver({ target }) {\n        const column = this.client.getColumnFromElement(target);\n\n        // Veto onPointerOver if column's tooltipRenderer is false\n        return column.tooltipRenderer !== false && Boolean(column.tooltipRenderer || this.tooltipRenderer);\n    }\n\n    // CellTooltip feature handles special config cases, where user can supply a function to use as tooltipRenderer\n    // instead of a normal config object\n    processConfig(config) {\n        if (typeof config === 'function') {\n            return {\n                tooltipRenderer : config\n            };\n        }\n\n        return config;\n    }\n\n    // override setConfig to process config before applying it (used mainly from ReactGrid)\n    setConfig(config) {\n        super.setConfig(this.processConfig(config));\n    }\n\n    doDestroy() {\n        this.tip && this.tip.destroy();\n        super.doDestroy();\n    }\n\n    doDisable(disable) {\n        if (!disable) {\n            this.initTip();\n        }\n        else if (this.tip) {\n            this.tip.destroy();\n            this.tip = null;\n        }\n\n        super.doDisable(disable);\n    }\n\n    //endregion\n\n    //region Content\n\n    /**\n     * Called from Tooltip to populate it with html.\n     * @private\n     */\n    getTooltipContent({ tip, activeTarget : cellElement, event }) {\n        const\n            me     = this,\n            record = me.client.getRecordFromElement(cellElement),\n            column = me.client.getColumnFromElement(cellElement),\n            arg    = { cellElement, record, column, event, tip, cellTooltip : me };\n\n        let result;\n\n        // If we have not changed context, we should not change content, unless we have a custom target selector (element within the cell)\n        if (!me.forSelector && record === me.lastRecord && record.generation === me.lastRecordGeneration && column === me.lastColumn) {\n            return me.tip._html;\n        }\n\n        me.lastRecord = record;\n        me.lastRecordGeneration = record.generation;\n        me.lastColumn = column;\n\n        // first, use columns tooltipRenderer if any\n        if (column.tooltipRenderer) {\n            result = column.tooltipRenderer(arg);\n        }\n        // secondly, try feature's renderer (specifying column.tooltipRenderer as false prevents tooltip in that column)\n        else if (me.tooltipRenderer && column.tooltipRenderer !== false) {\n            result = me.tooltipRenderer(arg);\n        }\n\n        // No caching of async requests\n        if (Objects.isPromise(result)) {\n            me.lastRecord = me.lastRecordGeneration = me.lastColumn = null;\n        }\n\n        return result;\n    }\n\n    //endregion\n}\n\nGridFeatureManager.registerFeature(CellTooltip);\n","import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport Editor from '../../Core/widget/Editor.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\n\n/**\n * @module Grid/feature/ColumnRename\n */\n\n/**\n * Allows user to rename columns by either right-clicking column header or using keyboard shortcuts when column header\n * is focused.\n *\n * To get notified about column renaming listen to `change` event on {@link Grid.data.ColumnStore columns} store.\n *\n * This feature is <strong>disabled</strong> by default.\n *\n * {@inlineexample Grid/feature/ColumnRename.js}\n *\n * ## Keyboard shortcuts\n * This feature has the following default keyboard shortcuts:\n *\n * | Keys          | Action           | Action description                        |\n * |---------------|------------------|-------------------------------------------|\n * | F2            | startEdit        | Starts editing focused column header text |\n *\n * For more information on how to customize keyboard shortcuts, please see\n * [our guide](#Grid/guides/customization/keymap.md)\n *\n * @extends Core/mixin/InstancePlugin\n *\n * @demo Grid/columns\n * @classtype columnRename\n * @feature\n */\nexport default class ColumnRename extends InstancePlugin {\n\n    static $name = 'ColumnRename';\n\n    static configurable = {\n        /**\n         * See {@link #keyboard-shortcuts Keyboard shortcuts} for details\n         * @config {Object<String,String>}\n         */\n        keyMap : {\n            F2 : 'startEdit'\n        }\n    }\n\n    doDestroy() {\n        this.editor?.destroy();\n        super.doDestroy();\n    }\n\n    static get pluginConfig() {\n        return {\n            after : ['populateHeaderMenu']\n        };\n    }\n\n    populateHeaderMenu({ items, column }) {\n        items.rename = {\n            weight   : 215,\n            icon     : 'b-fw-icon b-icon-edit',\n            text     : this.L('L{rename}'),\n            disabled : column.readOnly,\n            onItem   : () => this.startEdit(column)\n        };\n    }\n\n    startEdit(column) {\n        if (column instanceof Event) {\n            // If started editing by key\n            column = this.client.getHeaderDataFromEvent(column)?.column;\n        }\n\n        if (column) {\n            if (column.readOnly) {\n                // return false to let keyMap know that we didn't handle this event\n                return false;\n            }\n\n            const { textWrapper } = column;\n            let { editor } = this;\n\n            if (!editor) {\n                this.editor = editor = new Editor({\n                    owner : this.client,\n                    align : {\n                        align : 't0-t0'\n                    }\n                });\n            }\n\n            editor.render(textWrapper);\n\n            editor.startEdit({\n                target : textWrapper,\n                record : column,\n                field  : 'text'\n            });\n        }\n    }\n}\n\nGridFeatureManager.registerFeature(ColumnRename, false);\n","import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport EventHelper from '../../Core/helper/EventHelper.js';\nimport Location from '../../Grid/util/Location.js';\nimport GlobalEvents from '../../Core/GlobalEvents.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\n\n/**\n * @module Grid/feature/FillHandle\n */\n\n/**\n * This features adds a fill handle to a Grid range selection, which when dragged, fills the cells being dragged over\n * with values based on the values in the original selected range. This is similar to functionality normally seen in\n * various spreadsheet applications.\n *\n * {@inlineexample Grid/feature/FillHandle.js}\n *\n * Requires {@link Grid/view/Grid#config-selectionMode selectionMode.cell} to be activated.\n *\n * This feature is **disabled** by default\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         fillHandle : true\n *     }\n * });\n * ```\n *\n * @extends Core/mixin/InstancePlugin\n * @classtype fillHandle\n * @feature\n */\nexport default class FillHandle extends InstancePlugin.mixin(Delayable) {\n    static $name = 'FillHandle';\n\n    static configurable = {\n        /**\n         * Implement this function to be able to customize the value that cells will be filled with.\n         * Return `undefined` to use default calculations.\n         *\n         * ````javascript\n         * new Grid({\n         *    features : {\n         *        fillHandle : {\n         *           calculateFillValue({cell, column, range, record}) {\n         *              if(column.field === 'number') {\n         *                 return range.reduce(\n         *                    (sum, location) => sum + location.record[location.column.field]\n         *                 );\n         *              }\n         *           }\n         *        }\n         *    }\n         * });\n         * ````\n         *\n         * @param {Object} data Object containing information about current cell and fill value\n         * @param {Grid.util.Location} data.cell Current cell data\n         * @param {Grid.column.Column} data.column Current cell column\n         * @param {Grid.util.Location[]} data.range Range from where to calculate values\n         * @param {Core.data.Model} data.record Current cell record\n         * @returns {String|Number|Date} Value to fill current cell\n         * @config {Function}\n         */\n        calculateFillValue : null,\n\n        /**\n         * Set to `true` to enable the fill range to crop the original selected range. This clears the cells which were\n         * a part of the original selected range, but are no longer a part of the smaller range.\n         * @config {Boolean}\n         */\n        allowCropping : false\n\n    }\n\n    // Plugin configuration. This plugin chains/overrides some functions in Grid.\n    static pluginConfig = {\n        chain    : ['afterSelectionChange', 'onContentChange', 'afterColumnsChange', 'fixElementHeights'],\n        override : ['getCellDataFromEvent']\n    }\n\n    afterConstruct() {\n        super.afterConstruct();\n\n        if (!this.client.selectionMode.cell) {\n            this.disabled = true;\n        }\n\n        this._fillListeners = {};\n    }\n\n    delayable = {\n        handleSelection : 'raf'\n    }\n\n    onContentChange() {\n        this.handleSelection();\n    }\n\n    afterColumnsChange() {\n        this.handleSelection();\n    }\n\n    fixElementHeights() {\n        this.handleSelection();\n    }\n\n    getCellDataFromEvent(event, includeSingleAxisMatch) {\n        if (includeSingleAxisMatch) {\n            includeSingleAxisMatch = !event.target.classList.contains('b-fill-handle');\n        }\n        return this.overridden.getCellDataFromEvent(event, includeSingleAxisMatch);\n    }\n\n    // region Pattern recognition\n    findPatternsIn2dRange(range, horizontal, negative) {\n        const values = {};\n\n        // Converts a cellselector range to values per column or row\n        for (const cell of range) {\n            const\n                id    = horizontal ? cell.id : cell.columnId;\n            let value = cell.record[cell.column.field];\n\n            // If a number string, convert to number\n            if (value && typeof value === 'string' && !isNaN(value)) {\n                value = parseFloat(value);\n            }\n\n            if (!values[id]) {\n                values[id] = [];\n            }\n            values[id].push(value);\n        }\n\n        // Find patterns for each column or row in range\n        for (const rowOrCol in values) {\n            values[rowOrCol].pattern = this.findPatternsIn1dRange(values[rowOrCol], negative);\n        }\n\n        return values;\n    }\n\n    findPatternsIn1dRange(range, negative) {\n        const\n            lastValue = range[negative ? 0 : (range.length - 1)],\n            pattern   = {\n                next : () => lastValue,\n                lastValue\n            };\n\n        // If all values in same column/row is either number or date\n        if (range.every(val => typeof val === 'number') || range.every(val => val instanceof Date)) {\n            const diffs = range.map((val, ix) => val - range[ix - 1]);\n            diffs.shift(); // Removes initial NaN\n\n            // Found a repeating pattern\n            if (new Set(diffs).size === 1) {\n                pattern.increaseBy = diffs[0] * (negative ? -1 : 1);\n\n                pattern.next = () => {\n                    if (pattern.lastValue instanceof Date) {\n                        pattern.lastValue = new Date(pattern.lastValue.getTime() + pattern.increaseBy);\n                    }\n                    else {\n                        pattern.lastValue += pattern.increaseBy;\n                    }\n                    return pattern.lastValue;\n                };\n            }\n        }\n        // Else it's treated as a string value\n        else if (range.length > 1) {\n            pattern.stringPattern = [...range];\n            pattern.next = () => {\n                if (pattern.currentIndex === undefined) {\n                    pattern.currentIndex = 0;\n                }\n                else {\n                    pattern.currentIndex += 1;\n                    if (pattern.currentIndex >= pattern.stringPattern.length) {\n                        pattern.currentIndex = 0;\n                    }\n                }\n                return pattern.stringPattern[pattern.currentIndex];\n            };\n        }\n        return pattern;\n    }\n\n    // endregion\n\n    afterSelectionChange() {\n        const me = this;\n\n        // If selection isn't finished, wait for mouse up and then add fill elements\n        if (GlobalEvents.isMouseDown()) {\n            me.client.delayUntilMouseUp(() => me.handleSelection(true));\n            // Remove prev elements immediately in this case\n            me.removeElements();\n        }\n        // Otherwise, add fill elements immediately\n        else {\n            me.handleSelection(true);\n        }\n    }\n\n    /**\n     * Checks selection and sees to it that fill handle and border is drawn.\n     * Runs on next animation frame\n     * @internal\n     */\n    handleSelection() {\n        if (!this._isExtending) {\n            const range = this.rangeSelection;\n\n            if (range) {\n                this.drawFillHandleAndBorder(range[0], range[range.length - 1]);\n            }\n            else {\n                this.removeElements();\n            }\n        }\n    }\n\n    // region Mouse events\n\n    // On fillHandle mouse down only\n    onMouseDown(event) {\n        this._fillListeners.mouseMoveOrUp = EventHelper.on({\n            element   : globalThis,\n            mouseover : 'onMouseOver',\n            mouseup   : 'onMouseUp',\n            thisObj   : this\n        });\n        event.stopImmediatePropagation();\n        event.handled = true;\n    }\n\n    // Responsible for doing the filling\n    onMouseUp() {\n        const\n            me              = this,\n            {\n                client,\n                currentRange,\n                _isCropping\n            }               = me,\n            range           = me.rangeSelection,\n            selectionChange = range && currentRange && client.internalSelectRange(currentRange.from, currentRange.to),\n            selectedCells   = selectionChange?.selectedCells || [],\n            // For extending : Only modify cells that are not a part of original range\n            // For cropping  : Only clear cells that are not a part of new selection\n            extensionCells  = _isCropping ? me.croppingCells\n                : selectedCells.filter(cell => !range.some(sel => sel.equals(cell, true)));\n\n        delete me._isCropping; // Removing flag in case we bail out early\n\n        if (me._isExtending) {\n            client.disableScrollingCloseToEdges(client.items);\n            delete me._isExtending;\n        }\n\n        // If no extension, do nothing\n        if (!extensionCells?.length) {\n            me.handleSelection();\n            return;\n        }\n\n        client.suspendRefresh();\n\n        // If trimming (inverted extension), clear cells that where previously selected and not a part of new selection\n        if (_isCropping) {\n            extensionCells.forEach(cell => cell.record.set(cell.column.field, null, false, false, false, true));\n        }\n        // Extending cell values depending on pattern\n        else {\n            const\n                [firstCell] = extensionCells,\n                // If extensioncells has a record that is included in original selection, then we are dragging horizontally\n                horizontal  = range.some(sel => sel.record === firstCell.record),\n                // negative in this aspect, means dragging either upwards or to the left depending on horizontal or vertical\n                negative    = horizontal\n                    ? firstCell.columnIndex < range[0].columnIndex\n                    : firstCell.rowIndex < range[0].rowIndex,\n                patterns    = me.findPatternsIn2dRange(range, horizontal, negative),\n                changeMap   = new Map();\n\n            if (negative) {\n                extensionCells.reverse();\n            }\n\n            for (const cell of extensionCells) {\n                const { column, record } = cell;\n\n                if (column.canFillValue({ range, record, cell })) {\n                    let value   = me.calculateFillValue?.({ range, column, record, cell }),\n                        changed = changeMap.get(record);\n\n                    if (!changed) {\n                        changed = {};\n                        changeMap.set(record, changed);\n                    }\n\n                    if (value === undefined) {\n                        const pattern = patterns[horizontal ? cell.id : cell.columnId].pattern;\n                        value = pattern.next();\n                    }\n\n                    changed[column.field] = column.calculateFillValue?.({ value, record, range }) || value;\n                }\n            }\n\n            for (const [record, changes] of changeMap) {\n                record.set(changes, null, null, null, null, true);\n            }\n        }\n\n        client.resumeRefresh(true);\n\n        // Selects the extended area\n        client.performSelection(selectionChange);\n\n        delete me.currentRange;\n        me.handleSelection();\n    }\n\n    // The fill border and handle should refresh on mouse move\n    onMouseOver(event) {\n        const\n            me           = this,\n            {\n                client,\n                rangeSelection\n            }            = me,\n            first        = rangeSelection[0],\n            last         = rangeSelection[rangeSelection.length - 1],\n            cellData     = client.getCellDataFromEvent(event, true);\n        let cellSelector = cellData && client.normalizeCellContext(cellData.cellSelector);\n\n        if (cellSelector?._column?.region === first._column.region) {\n            const\n                equalOrSmaller = rangeSelection.some(cs => cs.equals(cellSelector, true));\n            let negative;\n\n            if (!me._isExtending) {\n                client.enableScrollingCloseToEdges(client.items);\n            }\n\n            if (equalOrSmaller) {\n                // If were smaller, were cropping (if it's allowed)\n                me._isCropping = me.allowCropping &&\n                    (cellSelector.rowIndex < last.rowIndex || cellSelector.columnIndex < last.columnIndex);\n            }\n            else {\n                // If cellSelector is on a row in range, endSelector should be current column but end/first row\n                if (cellSelector.rowIndex >= first.rowIndex && cellSelector.rowIndex <= last.rowIndex) {\n                    negative     = first.columnIndex > cellSelector.columnIndex;\n                    cellSelector = new Location({\n                        grid   : client,\n                        record : negative ? first.record : last.record,\n                        column : cellSelector.column\n                    });\n                }\n                // Else endSelector should be current row but end/first column\n                else {\n                    negative     = first.rowIndex > cellSelector.rowIndex;\n                    cellSelector = new Location({\n                        grid   : client,\n                        record : cellSelector.record,\n                        column : negative ? first.column : last.column\n                    });\n                }\n            }\n\n            // negative means that current mouse over cell is above or to the left\n            const\n                // If negative, draw from calculated mouse over cell\n                // otherwise, draw from top-left selection cell\n                from = negative ? cellSelector : first,\n                // If negative or were inside selection (but not cropping), draw to bottom-right selection cell\n                // otherwise, draw to calculated mouse over cell\n                to   = negative || (equalOrSmaller && !me._isCropping) ? last : cellSelector;\n\n            me.currentRange = { from, to };\n\n            // This flag is true even if were trimming\n            me._isExtending = true;\n\n            me.drawFillHandleAndBorder(from, to, true);\n        }\n    }\n\n    // endregion\n\n    // region Creating, updating and removing fillhandle and fillborder\n    drawFillHandleAndBorder(from, to, keepListeners = false) {\n        const\n            me        = this,\n            {\n                client,\n                currentRange,\n                _fillListeners\n            }         = me,\n            regionEl  = client.subGrids[from.column.region].element,\n            { x }     = Rectangle.from(from.cell || from.column.element, regionEl),\n            { right } = Rectangle.from(to.cell || to.column.element, regionEl),\n            { y }     = client.getRecordCoords(from.record, true),\n            bottom    = client.getRecordCoords(to.record, true).bottom - 1;\n        let {\n            borderElement,\n            handleElement\n        }             = me;\n\n        me.removeElements(keepListeners);\n\n        if (!borderElement) {\n            me.borderElement = borderElement = DomHelper.createElement({\n                className : 'b-fill-selection-border'\n            });\n\n            me.handleElement = handleElement = DomHelper.createElement({\n                className : 'b-fill-handle'\n            });\n        }\n\n        DomHelper.setRect(borderElement, { y, x, width : (right - x), height : (bottom - y) });\n        regionEl.appendChild(borderElement);\n\n        // If fill handle is drawn at right edge, put it to the left instead\n        DomHelper.setTopLeft(handleElement, bottom, right >= regionEl.scrollWidth ? x : right);\n        regionEl.appendChild(handleElement);\n\n        // Remove all previously cropping cls\n        me.toggleCroppingCls(false);\n        delete me.croppingCells;\n\n        // If were cropping, we should add cls class to the cells that will be \"shrunk\"\n        if (me._isCropping && me.rangeSelection?.length) {\n            const newCells = client.getRange(currentRange.from, currentRange.to);\n\n            me.croppingCells = me.rangeSelection.filter(sel => !newCells.some(cell => cell.equals(sel, true)));\n            me.toggleCroppingCls();\n        }\n\n        if (!_fillListeners.handleClick) {\n            _fillListeners.handleClick = EventHelper.on({\n                element   : globalThis,\n                delegate  : '.b-fill-handle',\n                mousedown : 'onMouseDown',\n                thisObj   : me\n            });\n        }\n\n        me.hasFillElements = true;\n    }\n\n    toggleCroppingCls(add = true) {\n        this.croppingCells?.forEach(sel => this.client.getCell(sel)?.classList.toggle('b-indicate-crop', add));\n    }\n\n    removeElements(keepListeners = false) {\n        const me = this;\n\n        me.handleElement?.remove();\n        me.borderElement?.remove();\n\n        if (!keepListeners) {\n            me.removeListeners();\n        }\n\n        me.hasFillElements = false;\n    }\n\n    // Detach listeners\n    removeListeners() {\n        const me = this;\n\n        for (const listener in me._fillListeners) {\n            me._fillListeners[listener]();\n        }\n        me._fillListeners = {};\n    }\n\n    // endregion\n\n    // Gets current selection range. Only allows for single range or single cell.\n    get rangeSelection() {\n        const\n            { client }        = this,\n            { selectedCells } = client,\n            range             = client._shiftSelectRange ?? (selectedCells.length === 1 && selectedCells);\n\n        // We only got one selected range, nothing else selected\n        // Only allow fill handle on single region selection\n        if (!client.selectedRecords.length && range?.length && range.length === selectedCells.length &&\n            range.every(c1 => selectedCells.some(c2 => c1.equals(c2, true)) &&\n                c1._column.parent && c1._column.region === range[0]._column.region && client.store.isAvailable(c1.id)\n            )\n        ) {\n            return range;\n        }\n\n        return null;\n    }\n}\n\nGridFeatureManager.registerFeature(FillHandle);\n","import ArrayHelper from '../../Core/helper/ArrayHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport DomSync from '../../Core/helper/DomSync.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from './GridFeatureManager.js';\nimport DomClassList from '../../Core/helper/util/DomClassList.js';\n\n/**\n * @module Grid/feature/MergeCells\n */\n\n// Maps DOM events to relayed events that need correct casing\nconst camelCase = {\n    mousedown   : 'mouseDown',\n    mousemove   : 'mouseMove',\n    mouseup     : 'mouseUp',\n    touchdown   : 'touchDown',\n    touchmove   : 'touchMove',\n    touchup     : 'touchUp',\n    mouseover   : 'mouseOver',\n    mouseout    : 'mouseOut',\n    dblclick    : 'dblClick',\n    keydown     : 'keyDown',\n    keypress    : 'keyPress',\n    keyup       : 'keyUp',\n    contextmenu : 'contextMenu'\n};\n\n/**\n * This feature merges cells that have the same value in sorted columns configured to\n * {@link Grid/column/Column#config-mergeCells}. The content of merged cells is sticky for Grids with a single subgrid\n * section when all columns fit in view (content stays in view until the cell is scrolled fully out of view).\n *\n * <div class=\"note\">Support for sticky content is limited because of how <code>position: sticky</code> works. Grid\n * scrolls vertically in one element, and horizontally in another (to support multiple regions in the grid), and this\n * setup is not supported by current browsers implementation of sticky positioning</div>\n *\n * Try scrolling in the demo below. Also try sorting by the other columns (\"City\" and \"Favorite food\" are configured\n * to merge cells):\n *\n * {@inlineexample Grid/feature/MergeCells.js}\n *\n * This feature is **disabled** by default.\n *\n * @extends Core/mixin/InstancePlugin\n * @classtype mergeCells\n * @feature\n */\nexport default class MergeCells extends InstancePlugin {\n    //region Config\n\n    static $name = 'MergeCells';\n\n    static configurable = {\n        /**\n         * By default merged cells allow pointer events to pass through to the underlying row/cell, to allow selecting a\n         * row and editing an individual cell even when they are merged. Configure as `false` to allow merged cells to\n         * catch and react to the pointer events instead.\n         *\n         * ```javascript\n         * const grid = new Grid({\n         *     features : {\n         *         mergeCells : {\n         *             // Let merged cells react to pointer events\n         *             passthrough : false\n         *         }\n         *     }\n         * });\n         * ```\n         *\n         * @config {Boolean}\n         */\n        passthrough : true\n    }\n\n    // All current ranges (once rendered)\n    mergedRanges = [];\n    // Ranges indexed by row index & column id -> Each range included multiple times, for easy lookup\n    mergedMap    = {};\n\n    static get pluginConfig() {\n        return {\n            chain : [\n                'beforeRenderCell',\n                'afterRenderRow',\n                'bindStore',\n                'afterColumnsChange',\n                'afterRemove',\n                'afterToggleGroup',\n                'afterToggleSubGrid',\n                'handleEvent',\n                'populateHeaderMenu',\n                // 'setHoveredRow'\n                'afterSelectionChange'\n            ],\n\n            // Grid must perform its update *after* we do.\n            before : [\n                'onInternalResize'\n            ],\n            override : [\n                'getColumnFromElement',\n                'getRecordFromElement'\n            ]\n        };\n    };\n\n    //endregion\n\n    //region Init\n\n    afterConstruct() {\n        const\n            me         = this,\n            { client } = me;\n\n        // Each subgrid gets a merged cells container\n        client.eachSubGrid(subGrid => me.setupSubGrid(subGrid));\n\n        // Merged cells are synced after rows are updated\n        client.rowManager.ion({\n            renderDone : 'onRenderDone',\n            thisObj    : me\n        });\n\n        me.bindStore(client.store);\n    }\n\n    setupSubGrid(subGrid) {\n        // Element that will contain the merged cells\n        subGrid.$mergedCellsElement = DomHelper.createElement({\n            parent    : subGrid.element,\n            className : {\n                'b-grid-merged-cells-container' : 1\n            }\n        });\n    }\n\n    doDisable(disable) {\n        if (!this.isConfiguring) {\n            // Flag to allow reset to redraw even though we are already disabled at this stage\n            this.isDisabling = true;\n            this.reset();\n            this.isDisabling = false;\n        }\n\n        super.doDisable(disable);\n    }\n\n    updatePassthrough(use) {\n        // Toggle CSS class that has `pointer-events : none`\n        this.client.element.classList.toggle('b-mergecells-passthrough', use);\n    }\n\n    //endregion\n\n    //region Grid hooks\n\n    bindStore(store) {\n        this.detachListeners('store');\n\n        store.ion({\n            name    : 'store',\n            change  : 'onStoreChange',\n            // Call our refresh logic before grids\n            refresh : {\n                prio : 1,\n                fn   : 'onStoreRefresh'\n            },\n            thisObj : this\n        });\n    }\n\n    // Refresh all ranges when grid is resized\n    onInternalResize() {\n        this.refreshBounds();\n    }\n\n    // Get / create ranges before cell contents are rendered, redirecting the contents to the range\n    beforeRenderCell(renderData) {\n        const\n            { column, record, cellElement } = renderData,\n            subGrid                         = this.client.subGrids[column.region];\n\n        // Only affect sorted columns configured to merge cells\n        if (!this.disabled && column.mergeCells && column.isSorted && !record.isSpecialRow && !subGrid.collapsed) {\n            const mergedRange = this.getMergeRange(record, column);\n            if (mergedRange?.use) {\n                // Flag the unmerged cell to allow styling it\n                cellElement.classList.add('b-merged-cell');\n                // Make sure it is empty\n                cellElement.innerHTML = '';\n                // Redirect output to the merged cell\n                renderData.cellElement = mergedRange.cellElement;\n\n                // TODO Consider bailing out after rendering first available cell of a merge. It would help with\n                //  performance, but any side effects from the renderer would be lost (such as assigning classes to row)\n            }\n        }\n    }\n\n    afterRenderRow({ row, oldId, oldHeight }) {\n        // Row reused for same record changed height\n        if (oldId === row.id && oldHeight !== row.height) {\n            this.heightChanged = true;\n        }\n    }\n\n    // Refresh all ranges when a column is resized (since it might affect their position and size)\n    afterColumnsChange({ action, changes, column }) {\n        if (this.disabled) {\n            return;\n        }\n\n        if (action === 'update' && changes.mergeCells && !column.mergeCells) {\n            // Remove all ranges for the column when mergeCells is set to false\n            for (const range of this.mergedRanges.slice()) {\n                if (range.column === column) {\n                    this.removeRange(range);\n                }\n            }\n\n            this.syncDom();\n            return;\n        }\n\n        this.refreshBounds();\n    }\n\n    // Remove might be transitioned, wait until it finishes before resetting (in the afterRemove hook)\n    afterRemove() {\n        !this.disabled && this.reset();\n    }\n\n    // Group collapsed or expanded\n    afterToggleGroup() {\n        !this.disabled && this.reset();\n    }\n\n    // SubGrid collapsed or expanded\n    afterToggleSubGrid() {\n        !this.disabled && this.reset();\n    }\n\n    // setHoveredRow(row) {\n    //     this.$hovered = row && this.mergedRanges.find(r => r.fromIndex <= row.dataIndex && r.toIndex >= row.dataIndex);\n    //\n    //     this.syncDom();\n    // }\n\n    // Selection changed, range is considered selected when all of its rows are selected (only in passthrough mode)\n    afterSelectionChange() {\n        if (!this.passthrough) {\n            const\n                { client } = this,\n                indices    = client.selectedRecords.map(r => client.store.indexOf(r));\n            let changed    = false;\n\n            for (const range of this.mergedRanges) {\n                let allSelected = true;\n                // Check if all records in the range are selected\n                for (let i = range.fromIndex; i <= range.toIndex && allSelected; i++) {\n                    allSelected = indices.includes(i);\n                }\n\n                if (range.isSelected !== allSelected) {\n                    range.isSelected = allSelected;\n                    changed = true;\n                }\n            }\n\n            // Only redraw if a range selection status changed\n            changed && this.syncDom();\n        }\n    }\n\n    //endregion\n\n    //region Grid overrides\n\n    // Extract record from merged cells\n    getRecordFromElement(element) {\n        if (element.elementData?.range) {\n            return this.client.store.getAt(element.elementData.range.fromIndex);\n        }\n\n        return this.overridden.getRecordFromElement(element);\n    }\n\n    // Extract column from merged cells\n    getColumnFromElement(element) {\n        if (element.elementData?.range) {\n            return element.elementData.range.column;\n        }\n\n        return this.overridden.getColumnFromElement(element);\n    }\n\n    //endregion\n\n    //region Header menu\n\n    // Allow toggling merging cells from the column header menu (unless column is explicitly disallowing it)\n    populateHeaderMenu({ column, items }) {\n        if (column.mergeable !== false) {\n            items.mergeCells = {\n                text     : 'L{MergeCells.mergeCells}',\n                icon     : `b-fw-icon ${column.mergeCells ? 'b-icon-checked' : 'b-icon-unchecked'}`,\n                tooltip  : 'L{MergeCells.menuTooltip}',\n                cls      : 'b-separator',\n                weight   : 500,\n                disabled : this.disabled,\n                onItem   : () => column.mergeCells = !column.mergeCells\n            };\n        }\n    }\n\n    //endregion\n\n    //region Relaying events\n\n    // Relay pointer events from the merged cell on grid\n    async handleEvent(event) {\n        if (!this.passthrough) {\n            const mergedCellsElement = event.target.closest('.b-grid-merged-cells');\n\n            if (mergedCellsElement) {\n                const\n                    { client }   = this,\n                    { range }    = mergedCellsElement.elementData,\n                    { cellEdit } = client.features,\n                    { column }   = range,\n                    type         = StringHelper.capitalize(camelCase[event.type] ?? event.type),\n                    eventData    = {\n                        grid        : client,\n                        records     : [],\n                        column,\n                        cellElement : mergedCellsElement.firstElementChild,\n                        target      : event.target,\n                        event\n                    };\n\n                for (let i = range.fromIndex; i <= range.toIndex; i++) {\n                    eventData.records.push(client.store.getAt(i));\n                }\n\n                client.trigger(`mergedCell${type}`, eventData);\n\n                // Cell editing, pass through to cell underneath even when not using passthrough mode\n                if (cellEdit?.triggerEvent.toLowerCase() === `cell${type}`.toLowerCase()) {\n                    const row = client.rowManager.getRowAt(event.clientY);\n                    await cellEdit.startEditing({ id : row.id, columnId : column.id });\n                }\n                // Select ranges rows when clicking the merged cell\n                else if (event.type === 'click') {\n                    this.onRangeClick({ range });\n                }\n            }\n        }\n    }\n\n    //endregion\n\n    //region Event listeners\n\n    // Select ranges rows when clicking a merged cell\n    onRangeClick({ range }) {\n        const records = [];\n\n        for (let i = range.fromIndex; i <= range.toIndex; i++) {\n            records.push(this.client.store.getAt(i));\n        }\n\n        this.client.selectedRecords = records;\n    }\n\n    // Reset when data changes\n    onStoreChange() {\n        !this.disabled && this.reset();\n    }\n\n    // Reset before grids refresh listener come into play, grid will redraw\n    onStoreRefresh({ action }) {\n        // filter & dataset triggers change too, handled above\n        if (action !== 'filter' && action !== 'dataset') {\n            !this.disabled && this.reset(false);\n        }\n    }\n\n    //endregion\n\n    //region Render\n\n    // Element is needed early since it is passed to column renderers, and syncing for each rendered cell would give a\n    // lot of overhead. Thus creating element directly instead\n    createRangeElement(range) {\n        const\n            parent = this.client.getSubGridFromColumn(range.column).$mergedCellsElement,\n            syncId = `${range.fromIndex}-@-${range.column.id}`;\n\n        // If there is already an element for the range (also if previously released), we grab that one.\n        // We are bending the rules of DomSync here by spawning the element early\n        let element = parent.syncIdMap?.[syncId] ?? parent.releasedIdMap?.[syncId];\n\n        // No longer considered released\n        if (parent.releasedIdMap) {\n            delete parent.releasedIdMap[syncId];\n        }\n\n        if (!element) {\n            element = DomHelper.createElement(this.createRangeDomConfig(range));\n        }\n\n        // New element or reusing released one, DomSync need to be made aware\n        DomSync.addChild(parent, element, syncId);\n\n        range.element = element;\n        range.cellElement = element.firstElementChild;\n\n        return element;\n    }\n\n    // Create a DomConfig object for the supplied range, used initially with DomHelper and thereafter with DomSync\n    createRangeDomConfig(range) {\n        const\n            { column, fromIndex, toIndex, top, left, width, height } = range,\n            { type } = column,\n            record = this.client.store.getAt(fromIndex),\n            domConfig = {\n                className : {\n                    'b-grid-merged-cells' : 1,\n                    // 'b-hover'             : this.$hovered === range,\n                    'b-selected'          : range.isSelected\n                },\n                elementData : {\n                    range\n                },\n                style : {\n                    top,\n                    left,\n                    height,\n                    width\n                },\n                dataset : {\n                    syncId   : `${fromIndex}-@-${column.id}`,\n                    fromIndex,\n                    toIndex,\n                    column   : column.field,\n                    columnId : column.id\n                },\n                children : [\n                    // Div for an actual cell\n                    {\n                        className : new DomClassList(this.client.cellCls).assign({\n                            [`b-${type?.toLowerCase()}-cell`] : type,\n                            [column.cellCls]                  : column.cellCls,\n                            [column.internalCellCls]          : column.internalCellCls\n                        }).assign(column.autoCls),\n                        // Dont touch cell children that might have been added by renderer\n                        keepChildren : true,\n                        // Tag along the range for easy resolving later\n                        elementData  : {\n                            range\n                        },\n                        // Dataset expected on cells\n                        dataset : {\n                            column   : column.field,\n                            columnId : column.id\n                        },\n                        // Size using configured row height, to at least have a chance of lining up with surrounding cells\n                        style : {\n                            height : this.client.rowManager.rowHeight\n                        }\n                    }\n                ]\n            };\n\n        // Allow application code a chance to affect the merged cell (intended for styling)\n        column.mergedRenderer?.({ domConfig, value : column.getRawValue(record), record, column, fromIndex, toIndex });\n\n        return domConfig;\n    }\n\n    buildMergedCellsConfig(fromIndex, toIndex, rows) {\n        const\n            me             = this,\n            { client }     = me,\n            { rowManager } = client;\n\n        // When exporting content we render rows to a document fragment one by one without RowManager. In\n        // order to draw ranges correctly in this case we need provide some meta information - list of row-like\n        // objects from which we can size for merged cell element, i.e. top, bottom, height, dataIndex\n        // Match grids row buffer, drawing ranges from the topmost row to the bottommost\n        fromIndex = fromIndex ?? rowManager.topRow?.dataIndex;\n        toIndex = toIndex ?? rowManager.bottomRow?.dataIndex;\n\n        const\n            // { locked = [], normal = [] }\n            domConfigMap = client.regions.reduce((map, region) => {\n                map[region] = {\n                    className : {\n                        'b-grid-merged-cells-container' : 1\n                    },\n                    children : []\n                };\n                return map;\n            }, {});\n\n        // Determine and update visible ranges\n        for (const range of me.mergedRanges) {\n            if (range.use && range.fromIndex <= toIndex && range.toIndex >= fromIndex) {\n                // Update the range, in case more of it has been scrolled into view\n                me.updateRange(range, me.heightChanged, rows);\n                // Create a DomConfig for it\n                domConfigMap[range.column.region].children.push(me.createRangeDomConfig(range));\n            }\n        }\n\n        return domConfigMap;\n    }\n\n    syncDom(force = false) {\n        const\n            me             = this,\n            { client }     = me,\n            { rowManager } = client;\n\n        // Bail out if we get here too early (happens in Scheduler) or are disabled\n        if (!force && !rowManager.topRow || me.disabled && !me.isDisabling) {\n            return;\n        }\n\n        const domConfigMap = this.buildMergedCellsConfig();\n\n        // Sync per subgrid\n        client.eachSubGrid(subGrid => {\n            DomSync.sync({\n                targetElement : subGrid.$mergedCellsElement,\n                syncIdField   : 'syncId',\n                domConfig     : domConfigMap[subGrid.region]\n            });\n        });\n\n        me.heightChanged = false;\n    }\n\n    // Called after rows are updated, sync visible ranges per subgrid\n    onRenderDone() {\n        this.syncDom();\n    }\n\n    //endregion\n\n    //region Ranges\n\n    // Remove range from list and index/column map, leaving no trace it since we dont know if it will ever\n    // come back (element will be released by DomSync)\n    removeRange(range) {\n        ArrayHelper.remove(this.mergedRanges, range);\n        for (let index = range.fromIndex; index <= range.toIndex; index++) {\n            delete this.mergedMap[`${index}-@-${range.column.id}`];\n        }\n    }\n\n    // Full reset, regenerating all ranges\n    reset(redraw = true) {\n        const\n            me        = this,\n            columns   = me.client.columns.visibleColumns.filter(c => c.mergeCells && c.isSorted, true),\n            hadRanges = me.mergedRanges.length;\n\n        me.mergedRanges = [];\n        me.mergedMap = {};\n\n        if (redraw && !me.client.refreshSuspended) {\n            for (const row of me.client.rowManager.rows) {\n                for (const column of columns) {\n                    row.renderCell(row.getCell(column.id));\n                }\n            }\n\n            // Redraw, forcing it if all rows are gone\n            me.syncDom(hadRanges && !me.client.rowManager.rowCount);\n        }\n    }\n\n    // Refreshes existing ranges coords\n    refreshBounds() {\n        const\n            { mergedRanges } = this,\n            boundsMap        = new Map();\n\n        for (const range of mergedRanges.slice()) {\n            const\n                { column }  = range,\n                { element } = column;\n\n            // Column shown\n            if (element) {\n                let bounds = boundsMap.get(column);\n\n                if (!bounds) {\n                    // Temporarily cache bounds to avoid calculating them multiple times\n                    boundsMap.set(column, bounds = Rectangle.from(element, element.parentElement));\n                }\n\n                range.left = bounds.left;\n                range.width = bounds.width;\n            }\n            // Column hidden or removed\n            else {\n                this.removeRange(range);\n            }\n        }\n\n        this.syncDom();\n    }\n\n    // Updates the range as user scrolls, until its start and end coords are fully known\n    // Rows argument is required to render merged cells on export. We provide row-like objects there\n    updateRange(range, force, rows = null) {\n        const\n            { store, rowManager }           = this.client,\n            { topRendered, bottomRendered } = range,\n            { rowOffsetHeight }             = rowManager;\n\n        let { fromIndex, toIndex } = range,\n            topRow, bottomRow;\n\n        force = rows ? rows.length > 0 : force;\n\n        // No need to update anything if bounds are correct already\n        if (!force && topRendered && bottomRendered) {\n            return;\n        }\n\n        if (!topRendered || force) {\n            if (rows) {\n                const index = rows.findIndex(row => row.dataIndex >= fromIndex);\n                topRow = rows[index];\n                fromIndex = topRow.dataIndex;\n            }\n            else {\n                // TODO: Should not need to iterate here, calculate top instead\n                do {\n                    topRow = rowManager.getRowById(store.getAt(fromIndex));\n                }\n                while (!topRow && fromIndex++ < toIndex);\n            }\n\n            // topRow is the actual topmost row in the range\n            range.topRendered = (fromIndex === range.fromIndex);\n\n            const rowsAbove = fromIndex - range.fromIndex;\n\n            range.top = topRow.top - rowsAbove * (rows ? topRow.offsetHeight : rowOffsetHeight);\n        }\n\n        if (!bottomRendered || force) {\n            if (rows) {\n                // We need to find last index, so we can just pick max between -1 and whatever we find\n                const index = rows.findIndex(row => row.dataIndex === toIndex);\n                bottomRow = rows[index === -1 ? rows.length - 1 : index];\n                fromIndex = bottomRow.dataIndex;\n            }\n            else {\n                // TODO: Should not need to iterate here, calculate bottom instead\n                do {\n                    bottomRow = rowManager.getRowById(store.getAt(toIndex));\n                }\n                while (!bottomRow && toIndex-- > fromIndex);\n            }\n\n            // bottomRow is the actual bottommost row in the range\n            range.bottomRendered = (toIndex === range.toIndex);\n\n            const rowsBelow = range.toIndex - toIndex;\n\n            range.bottom = bottomRow.bottom + rowsBelow * (rows ? bottomRow.offsetHeight : rowOffsetHeight);\n        }\n\n        range.height = range.bottom - range.top;\n    }\n\n    // Retrieve a range for the specified record / column, creating a new one if none found by walking upwards and\n    // downwards until a deviating value is found\n    getMergeRange(record, column) {\n        if (record.isSpecialRow) {\n            return;\n        }\n\n        const\n            me            = this,\n            { mergedMap } = me,\n            { store }     = me.client,\n            columnId      = column.id,\n            index         = store.indexOf(record),\n            key           = `${index}-@-${columnId}`;\n\n        let range = mergedMap[key];\n\n        if (!range) {\n            const value = column.getRawValue(record);\n\n            range = mergedMap[key] = {\n                column\n            };\n\n            me.mergedRanges.push(range);\n\n            // Search up until encountering different value\n            let earlierRecord, earlierValue, earlierIndex = index;\n\n            do {\n                earlierRecord = store.getAt(--earlierIndex);\n                earlierValue  = earlierRecord && column.getRawValue(earlierRecord);\n\n                if (earlierValue === value) {\n                    mergedMap[`${earlierIndex}-@-${columnId}`] = range;\n                }\n\n            } while (earlierRecord && earlierValue === value);\n\n            // And down\n            let laterRecord, laterValue, laterIndex = index;\n\n            do {\n                laterRecord = store.getAt(++laterIndex);\n                laterValue  = laterRecord && column.getRawValue(laterRecord);\n\n                if (laterValue === value) {\n                    mergedMap[`${laterIndex}-@-${columnId}`] = range;\n                }\n            } while (laterRecord && laterValue === value);\n\n            range.fromIndex = earlierIndex + 1;\n            range.toIndex   = laterIndex - 1;\n\n            // We only care about ranges longer than 1 record\n            if (range.toIndex - range.fromIndex > 0) {\n                const headerBounds = Rectangle.from(column.element, column.element.parentElement); // TODO get relative element with different approach, to work with grouped headers\n                range.left  = headerBounds.left;\n                range.width = headerBounds.width;\n                range.use = true;\n            }\n        }\n\n        if (!range.element && range.use) {\n            me.createRangeElement(range);\n        }\n\n        return range;\n    }\n\n    //endregion\n}\n\nGridFeatureManager.registerFeature(MergeCells);\n","//TODO: Handle date columns\n//TODO: Icons to navigate between hits in the header? or in each cell?\n//TODO: Icon to clear quickfind in header\n//TODO: regex for valid key pressed?\n\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\n\n/**\n * @module Grid/feature/QuickFind\n */\n\n/**\n * Feature that allows the user to search in a column by focusing a cell and typing. Navigate between hits using the\n * keyboard, [f3] or [ctrl]/[cmd] + [g] moves to next, also pressing [shift] moves to previous.\n *\n * This feature is <strong>disabled</strong> by default.\n *\n * ## Keyboard shortcuts\n * This feature has the following default keyboard shortcuts:\n *\n * | Keys          | Action           | Action description                |\n * |---------------|------------------|-----------------------------------|\n * | F3            | goToNextHit      | Move focus to next search hit     |\n * | Shift+F3      | goToPrevHit      | Move focus to previous search hit |\n * | Ctrl+g        | goToNextHit      | Move focus to next search hit     |\n * | Ctrl+Shift+g  | goToPrevHit      | Move focus to previous search hit |\n * | Ctrl+Shift+F3 | showFilterEditor | Shows the filter editor           |\n * | Escape        | clearSearch      | Removes the search completely     |\n *\n * For more information on how to customize keyboard shortcuts, please see\n * [our guide](#Grid/guides/customization/keymap.md)\n *\n * @extends Core/mixin/InstancePlugin\n *\n * @example\n * // enable QuickFind\n * let grid = new Grid({\n *   features: {\n *     quickFind: true\n *   }\n * });\n *\n * // navigate to next hit programmatically\n * grid.features.quickFind.gotoNextHit();\n *\n * @demo Grid/quickfind\n * @classtype quickFind\n * @inlineexample Grid/feature/QuickFind.js\n * @feature\n */\nexport default class QuickFind extends InstancePlugin {\n    //region Config\n\n    static get $name() {\n        return 'QuickFind';\n    }\n\n    static configurable = {\n        mode : 'header',\n        find : '',\n\n        /**\n         * See {@link #keyboard-shortcuts Keyboard shortcuts} for details\n         * @config {Object<String,String>}\n         */\n        keyMap : {\n            F3             : 'gotoNextHit',\n            'Shift+F3'     : 'gotoPrevHit',\n            'Ctrl+g'       : 'gotoNextHit',\n            'Ctrl+Shift+g' : 'gotoPrevHit',\n            'Ctrl+Shift+f' : 'showFilterEditor',\n            Escape         : 'clearSearch',\n\n            //Private\n            Backspace : 'onBackspace'\n        }\n    }\n\n    // Plugin configuration. This plugin chains some of the functions in Grid.\n    static get pluginConfig() {\n        return {\n            chain : ['onElementKeyPress', 'onCellNavigate']\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    static get properties() {\n        return {\n            hitCls          : 'b-quick-hit',\n            hitCellCls      : 'b-quick-hit-cell',\n            hitCellBadgeCls : 'b-quick-hit-cell-badge',\n            hitTextCls      : 'b-quick-hit-text'\n        };\n    }\n\n    construct(grid, config) {\n        super.construct(grid, config);\n\n        Object.assign(this, {\n            grid,\n            treeWalker : grid.setupTreeWalker(grid.element, DomHelper.NodeFilter.SHOW_TEXT, () => DomHelper.NodeFilter.FILTER_ACCEPT)\n        });\n    }\n\n    isActionAvailable() {\n        const { focusedCell } = this.grid;\n        return !this.disabled && focusedCell?.record && !focusedCell.isActionable && this.find.length > 0;\n    }\n\n    doDisable(disable) {\n        if (disable) {\n            this.clear();\n        }\n\n        super.doDisable(disable);\n    }\n\n    get store() {\n        return this.grid.store;\n    }\n\n    //endregion\n\n    //region Show/hide QuickFind\n\n    /**\n     * Shows a \"searchfield\" in the header. Triggered automatically when you have a cell focused and start typing.\n     * @private\n     */\n    showQuickFind() {\n        const\n            me     = this,\n            header = me.grid.getHeaderElement(me.columnId);\n\n        if (header) {\n            if (!me.headerField) {\n                const [element, field, badge] = DomHelper.createElement({\n                    tag       : 'div',\n                    className : 'b-quick-hit-header',\n                    children  : [\n                        { tag : 'div', className : 'b-quick-hit-field' },\n                        { tag : 'div', className : 'b-quick-hit-badge' }\n                    ]\n                }, { returnAll : true });\n\n                if (me.mode === 'header') {\n                    header.appendChild(element);\n                }\n                else {\n                    element.className += ' b-quick-hit-mode-grid';\n                    me.grid.element.appendChild(element);\n                }\n\n                me.headerField = {\n                    header    : element,\n                    field     : field,\n                    badge     : badge,\n                    colHeader : header\n                };\n            }\n\n            me.headerField.field.innerHTML = me.find;\n            me.headerField.badge.innerHTML = me.found.length;\n\n            header.classList.add('b-quick-find-header');\n\n            if (!me.renderListenerInitialized) {\n                me.grid.rowManager.ion({\n                    rendercell : me.renderCell,\n                    thisObj    : me\n                });\n                me.renderListenerInitialized = true;\n            }\n        }\n    }\n\n    /**\n     * Hide the \"searchfield\" and remove highlighted hits. Called automatically when pressing [esc] or backspacing away\n     * the keywords.\n     * @private\n     */\n    hideQuickFind() {\n        const\n            me                    = this,\n            { grid, headerField } = me;\n\n        // rerender cells to remove quick-find markup\n        for (const hit of (me.prevFound || me.found)) {\n            const row = grid.getRowById(hit.id);\n            if (row) {\n                // Need to force replace quick finds markup\n                row.forceInnerHTML = true;\n\n                const cellElement = row.getCell(me.columnId);\n                cellElement._content = null;\n                row.renderCell(cellElement);\n\n                row.forceInnerHTML = false;\n            }\n        }\n\n        if (headerField) {\n            headerField.header.parentNode.removeChild(headerField.header);\n            headerField.colHeader.classList.remove('b-quick-find-header');\n            me.headerField = null;\n        }\n\n        if (me.renderListenerInitialized) {\n            grid.rowManager.un({ rendercell : me.renderCell }, me);\n            me.renderListenerInitialized = false;\n        }\n\n        grid.trigger('hideQuickFind');\n    }\n\n    //endregion\n\n    //region Search\n\n    /**\n     * Performs a search and highlights hits. If find is empty, QuickFind is closed.\n     * @param {String} find Text to search for\n     * @param {String} columnFieldOrId Column to search\n     */\n    search(find, columnFieldOrId = this.columnId) {\n        const\n            me       = this,\n            { grid } = me,\n            column   = grid.columns.getById(columnFieldOrId) || grid.columns.get(columnFieldOrId),\n            found    = me.store.findByField(column.field, find, column.mergeCells && column.isSorted);\n\n        let i = 1;\n\n        Object.assign(me, {\n            foundMap  : {},\n            prevFound : me.found,\n            found,\n            find,\n            columnId  : column.id,\n            findRe    : new RegExp(`(\\\\s+)?(${StringHelper.escapeRegExp(String(find))})(\\\\s+)?`, 'ig')\n        });\n\n        if (find) {\n            me.showQuickFind();\n        }\n        else {\n            me.hideQuickFind();\n        }\n\n        // clear old hits\n        for (const cellElement of DomHelper.children(grid.element, `.${me.hitCls}`)) {\n            cellElement.classList.remove(me.hitCls, me.hitCellCls);\n\n            if (cellElement._originalContent) {\n                cellElement.innerHTML = cellElement._originalContent;\n                cellElement._originalContent = null;\n            }\n        }\n\n        if (!found) {\n            return;\n        }\n\n        if (found.length > 0) {\n            me.gotoClosestHit(grid.focusedCell, found);\n        }\n\n        // highlight hits for visible cells\n        for (const hit of found) {\n            me.foundMap[hit.id] = i++;\n\n            const row = grid.getRowById(hit.data.id);\n            row?.renderCell(row.getCell(column.id));\n\n            // limit highlighted hits\n            if (i > 1000) {\n                break;\n            }\n        }\n\n        grid.trigger('quickFind', { find, found });\n    }\n\n    /**\n     * Clears and closes QuickFind.\n     */\n    clear() {\n        if (this.find || this.found?.length) {\n            this.search('');\n        }\n    }\n\n    /**\n     * Number of results found\n     * @type {Number}\n     * @readonly\n     */\n    get foundCount() {\n        return this.found?.length ?? 0;\n    }\n\n    /**\n     * Found results (as returned by Store#findByField), an array in format { index: x, data: record }\n     * @member {StoreSearchResult[]} found\n     * @readonly\n     */\n\n    //endregion\n\n    //region Navigation\n\n    /**\n     * Go to specified hit.\n     * @param {Number} index\n     */\n    gotoHit(index) {\n        const nextHit = this.found[index];\n\n        if (nextHit) {\n            this.grid.focusCell({\n                columnId : this.columnId,\n                id       : nextHit.id\n            }, { doSelect : true });\n        }\n\n        return !!nextHit;\n    }\n\n    gotoClosestHit(focusedCell, found) {\n        const\n            focusedIndex = focusedCell ? this.grid.store.indexOf(focusedCell.id) : 0,\n            foundSorted  = found.slice().sort(\n                (a, b) => Math.abs(a.index - focusedIndex) - Math.abs(b.index - focusedIndex)\n            );\n\n        this.gotoHit(found.indexOf(foundSorted[0]));\n    }\n\n    /**\n     * Go to the first hit.\n     */\n    gotoFirstHit() {\n        this.gotoHit(0);\n    }\n\n    /**\n     * Go to the last hit.\n     */\n    gotoLastHit() {\n        this.gotoHit(this.found.length - 1);\n    }\n\n    /**\n     * Select the next hit, scrolling it into view. Triggered with [f3] or [ctrl]/[cmd] + [g].\n     */\n    gotoNextHit() {\n        const\n            me           = this,\n            { grid }     = me,\n            // start from focused cell, or if focus has left grid use lastFocusedCell\n            currentId    = grid._focusedCell?.id ?? grid.lastFocusedCell?.id,\n            currentIndex = grid.store.indexOf(currentId) || 0,\n            nextHit      = me.found.find(hit => hit.index > currentIndex);\n\n        if (nextHit) {\n            grid.focusCell({\n                columnId : me.columnId,\n                id       : nextHit.id\n            }, { doSelect : true });\n        }\n        else {\n            me.gotoFirstHit();\n        }\n    }\n\n    /**\n     * Select the previous hit, scrolling it into view. Triggered with [shift] + [f3] or [shift] + [ctrl]/[cmd] + [g].\n     */\n    gotoPrevHit() {\n        const\n            me              = this,\n            { grid, found } = me,\n            currentId       = grid._focusedCell?.id ?? grid.lastFocusedCell?.id,\n            currentIndex    = grid.store.indexOf(currentId) || 0;\n\n        let prevHit;\n\n        if (!found.length) {\n            return;\n        }\n\n        for (let i = found.length - 1; i--; i >= 0) {\n            if (found[i].index < currentIndex) {\n                prevHit = found[i];\n                break;\n            }\n        }\n\n        if (prevHit) {\n            grid.focusCell({\n                columnId : me.columnId,\n                id       : prevHit.id\n            }, { doSelect : true });\n        }\n        else {\n            me.gotoLastHit();\n        }\n    }\n\n    //endregion\n\n    //region Render\n\n    /**\n     * Called from SubGrid when a cell is rendered.\n     * @private\n     */\n    renderCell({ cellElement, column, record }) {\n        const\n            me           = this,\n            { classList } = cellElement,\n            {\n                treeWalker,\n                findRe,\n                hitTextCls\n            }           = me,\n            hitIndex    = me.columnId === column.id && me.foundMap?.[record.id];\n\n        if (hitIndex) {\n            // highlight cell\n            classList.add(me.hitCls);\n            cellElement.isQuickHit = true;\n            cellElement._originalContent = cellElement.innerHTML;\n\n            // if features have added other stuff to the cell, value is in div.b-grid-cell-value\n            // highlight in cell if found in innerHTML\n            const inner = treeWalker.currentNode = DomHelper.down(cellElement, '.b-grid-cell-value,.b-tree-cell-value') || cellElement;\n\n            for (let textNode = treeWalker.nextNode(); textNode && inner.contains(textNode);) {\n                const\n                    nodeToReplace = textNode,\n                    textContent   = textNode.nodeValue,\n                    newText       = ['<span>'];\n\n                // Move onto next text node before we replace the node with a highlight HTML sequence\n                textNode = treeWalker.nextNode();\n\n                let offset = findRe.lastIndex;\n\n                // Convert textContent into an innerHTML string which htmlEncodes the text and embeds\n                // a highlighting span which contains the target text.\n                for (let match = findRe.exec(textContent); match; match = findRe.exec(textContent)) {\n                    const\n                        preamble    = textContent.substring(offset, match.index),\n                        spaceBefore = match[1] ? '\\xa0' : '',\n                        v           = match[2],\n                        spaceAfter  = match[3] ? '\\xa0' : '';\n\n                    newText.push(`${StringHelper.encodeHtml(preamble)}${spaceBefore}<span class=\"${hitTextCls}\">${v}</span>${spaceAfter}`);\n                    offset = findRe.lastIndex;\n                }\n\n                newText.push(StringHelper.encodeHtml(textContent.substring(offset)), '</span>');\n\n                // Insert a fragment with each match wrapped with a span.\n                nodeToReplace.parentNode.insertBefore(DomHelper.createElementFromTemplate(newText.join(''), {\n                    fragment : true\n                }), nodeToReplace);\n                nodeToReplace.remove();\n            }\n            DomHelper.createElement({\n                parent    : cellElement,\n                className : me.hitCellBadgeCls,\n                text      : hitIndex\n            });\n        }\n    }\n\n    //endregion\n\n    //region Events\n\n    onBackspace(event) {\n        const me = this;\n        if (me.find) {\n            me.find = me.find.substr(0, me.find.length - 1);\n            me.search(me.find);\n            return true;\n        }\n        return false;\n    }\n\n    clearSearch() {\n        if (this.find) {\n            this.find = '';\n            this.search(this.find);\n            return true;\n        }\n        return false;\n    }\n\n    showFilterEditor() {\n        const\n            me = this,\n            { filter } = me.client.features;\n\n        if (filter && me.columnId && me.foundCount) {\n            me.clear();\n            filter.showFilterEditor(me.client.columns.getById(me.columnId), me.find);\n        }\n    }\n\n    /**\n     * Chained function called on grids keypress event. Handles input for \"searchfield\".\n     * @private\n     * @param event\n     */\n    onElementKeyPress(event) {\n        const\n            me              = this,\n            { grid }        = me,\n            { focusedCell } = grid;\n\n        // Only react to keystrokes on grid cell elements\n        if (!event.handled && !me.disabled && focusedCell?.record && !focusedCell.isActionable && event.key?.length === 1) {\n            const column = grid.columns.getById(grid._focusedCell.columnId);\n            // if trying to search in invalid column, it's a hard failure\n            //<debug>\n            console.assert(column, 'Focused cell column not found');\n            //</debug>\n            if (column && column.searchable !== false) {\n                me.columnId = grid._focusedCell.columnId;\n                me.find += event.key;\n                me.search(me.find);\n            }\n        }\n    }\n\n    onCellNavigate(grid, fromCellSelector, toCellSelector) {\n        const\n            me    = this;\n\n        if (me.find && (!toCellSelector || toCellSelector.columnId !== me.columnId)) {\n            me.clear();\n        }\n    }\n\n    //endregion\n}\n\nGridFeatureManager.registerFeature(QuickFind);\n","import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport EventHelper from '../../Core/helper/EventHelper.js';\nimport Objects from '../../Core/helper/util/Objects.js';\nimport '../column/ActionColumn.js';\n\n/**\n * @module Grid/feature/RowExpander\n */\n\nconst storeRemoveActions = { remove : 1, filter : 1, dataset : 1, replace : 1 };\n\n/**\n * Enables expanding of Grid rows by either row click or double click, or by adding a separate Grid column which renders\n * a button that expands or collapses the row.\n *\n * {@inlineexample Grid/feature/RowExpander.js}\n *\n * The content of the expanded row body is rendered by providing a {@link #config-renderer} function to the\n * rowExpander feature config.\n *\n * ```javascript\n * new Grid({\n *    features : {\n *        rowExpander : {\n *            renderer({record, region, expanderElement}){\n *                return htmlToBeExpanded;\n *            }\n *        }\n *    }\n * });\n * ```\n *\n * <div class=\"note\">Note that if used in a Gantt, the Gant's `fixedRowHeight` must be set to `false`.</div>\n *\n * This feature is **disabled** by default\n *\n * ## Expand on click\n * Set {@link #config-triggerEvent} to a Grid cell event that should trigger row expanding and collapsing.\n *\n * ```javascript\n * new Grid({\n *    features : {\n *        rowExpander : {\n *            triggerEvent: 'celldblclick',\n *            renderer...\n *        }\n *    }\n * });\n * ```\n *\n * ## Expander column position\n * The expander column can either be inserted before or after the existing Grid columns. If the Grid has multiple\n * regions the column will be added to the first region.\n *\n * Adjust expander column position to last in a specific Grid region by setting {@link #config-columnPosition}\n * to `last` and configuring the {@link #config-column} with a region name.\n *\n * ```javascript\n * new Grid({\n *    features : {\n *        rowExpander : {\n *            column: {\n *                region: 'last'\n *            },\n *            columnPosition: 'last',\n *            renderer...\n *        }\n *    }\n * });\n * ```\n *\n * ## Record update\n * If the expander content depends on row record data, the expander can be re-rendered on record update by setting\n * {@link #config-refreshOnRecordChange} to `true`.\n * ```javascript\n * new Grid({\n *    features : {\n *        rowExpander : {\n *            refreshOnRecordChange: true,\n *            renderer...\n *        }\n *    }\n * });\n * ```\n *\n * ## Async\n * When the content of the row expander should be rendered async just see to it that you return a promise.\n * ```javascript\n * new Grid({\n *    features : {\n *        rowExpander : {\n *            async renderer({record, region, expanderElement}){\n *                return fetchFromBackendAndRenderData(record);\n *            }\n *        }\n *    }\n * });\n * ```\n *\n * @extends Core/mixin/InstancePlugin\n * @classtype rowExpander\n * @feature\n */\nexport default class RowExpander extends InstancePlugin {\n\n    //region Config\n    static $name = 'RowExpander';\n\n    // Cannot use `static properties = {}`, new Map/Set would pollute the prototype\n    static get properties() {\n        return {\n            // CSS classes\n            expanderBodyClass : 'b-rowexpander-body',\n            expandedRowClass  : 'b-rowexpander-row-expanded', // Map where the keys are the expanded records and values are an object {rowHeight, cellHeight, expandElements}\n            recordStateMap    : new Map(),\n            collapsingRecords : new Set()\n        };\n    }\n\n    static configurable = {\n\n        /**\n         * The implementation of this function is called each time the body of an expanded row is rendered. Either\n         * return an HTML string, or a {@link Core.helper.DomHelper#typedef-DomConfig} object describing the markup.\n         *\n         * ```javascript\n         * new Grid({\n         *    features : {\n         *        rowExpander : {\n         *            renderer({record, region, expanderElement}){\n         *                return htmlToBeExpanded;\n         *            }\n         *        }\n         *    }\n         * });\n         * ```\n         *\n         * Or return a {@link Core.helper.DomHelper#typedef-DomConfig} object.\n         *\n         * ```javascript\n         * new Grid({\n         *    features : {\n         *        rowExpander : {\n         *            renderer({record, region, expanderElement}){\n         *                return {\n         *                   tag       : 'form',\n         *                   className : 'expanded-row-form',\n         *                   children  : [\n         *                       {\n         *                           tag        : 'textarea',\n         *                           name       : 'description',\n         *                           className  : 'expanded-textarea'\n         *                       },\n         *                       {\n         *                           tag        : 'button',\n         *                           text       : 'Save',\n         *                           className  : 'expanded-save-button',\n         *                       }\n         *                   ]\n         *                };\n         *            }\n         *        }\n         *    }\n         * });\n         * ```\n         *\n         * It is also possible to add markup directly to the expanderElement.\n         *\n         * ```javascript\n         * new Grid({\n         *    features : {\n         *        rowExpander : {\n         *            renderer({record, region, expanderElement}){\n         *                new UIComponent({\n         *                    appendTo: expanderElement,\n         *                    ...\n         *                });\n         *            }\n         *        }\n         *    }\n         * });\n         * ```\n         * The renderer function can also be asynchronous.\n         *\n         * ```javascript\n         * new Grid({\n         *    features : {\n         *        rowExpander : {\n         *            async renderer({record, region, expanderElement}){\n         *                return await awaitAsynchronousOperation();\n         *            }\n         *        }\n         *    }\n         * });\n         * ```\n         * @param {Object} renderData Object containing renderer parameters\n         * @param {Core.data.Model} renderData.record Record for the row\n         * @param {HTMLElement} renderData.expanderElement Expander body element\n         * @param {HTMLElement} renderData.rowElement Row element\n         * @param {String} renderData.region Grid region name\n         * @returns {String|DomConfig} Row expander body content\n         * @config {Function}\n         * @async\n         */\n        renderer : null,\n\n        /**\n         * The name of the Grid event that will toggle expander. Defaults to `null` but can be set to any event such\n         * as {@link Grid.view.mixin.GridElementEvents#event-cellDblClick} or\n         * {@link Grid.view.mixin.GridElementEvents#event-cellClick}.\n         *\n         * ```javascript\n         * features : {\n         *     rowExpander : {\n         *         triggerEvent : 'cellclick'\n         *     }\n         * }\n         * ```\n         *\n         * @config {String}\n         */\n        triggerEvent : null,\n\n        /**\n         * Provide a column config object to display a button with expand/collapse functionality.\n         * Shown by default, set to `null` to not include.\n         *\n         * ```javascript\n         * new Grid({\n         *    features : {\n         *        rowExpander : {\n         *            column: {\n         *                // Use column config options here\n         *                region: 'last'\n         *            }\n         *        }\n         *    }\n         * });\n         * ```\n         *\n         * @config {ActionColumnConfig|Grid.column.ActionColumn}\n         */\n        column : { },\n\n        /**\n         * Makes the expand/collapse button column appear either as the first column (default or `first`) or as the\n         * last (set to `last`). Note that the column by default will be added to the first region, if the Grid\n         * has multiple regions. Use the {@link #config-column} config to change region.\n         * @config {String}\n         * @default\n         */\n        columnPosition : 'first',\n\n        /**\n         * If set to `true`, the RowExpander will, on record update, re-render an expanded row by calling the\n         * {@link #config-renderer} function.\n         * @config {Boolean}\n         * @default\n         */\n        refreshOnRecordChange : false,\n\n        /**\n         * Use this for customizing async {@link #config-renderer} loading indicator height.\n         * @config {Number}\n         * @defalt\n         */\n        loadingIndicatorHeight : 100,\n\n        /**\n         * Use this for customizing async {@link #config-renderer} loading indicator text.\n         * @config {String}\n         * @default Loading\n         */\n        loadingIndicatorText : 'L{loading}',\n\n        /**\n         * Use this to disable expand and collapse animations.\n         * @config {Boolean}\n         * @default\n         */\n        enableAnimations : true\n    }\n\n    // Plugin configuration. This plugin chains/overrides some of the functions in Grid.\n    static get pluginConfig() {\n        return {\n            chain    : ['afterColumnsChange', 'beforeRenderRow', 'processRowHeight', 'bindStore'],\n            override : ['onGridBodyFocusIn']\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    afterConstruct() {\n        const\n            me         = this,\n            { client } = me;\n        if (!me.renderer) {\n            console.warn('RowExpander requires implementing the renderer function.');\n            return;\n        }\n        if (client.isGanttBase && client.fixedRowHeight !== false) {\n            console.warn('When using RowExpander on a Gantt, the Gantt`s fixedRowHeight config must be set to false.');\n        }\n\n        // Bind initial store\n        me.bindStore(client.store);\n\n        if (me.triggerEvent) {\n            client.ion({ [me.triggerEvent] : 'onTriggerEvent', thisObj : me });\n        }\n\n        me.addColumn();\n    }\n\n    bindStore(store) {\n        const me = this;\n\n        me.recordStateMap.clear();\n        me.collapsingRecords.clear();\n        me.detachListeners('clientStoreChange');\n\n        store.ion({\n            name    : 'clientStoreChange',\n            change  : me.onStoreChange,\n            thisObj : me\n        });\n    }\n\n    doDisable(disable) {\n        const { client } = this;\n\n        if (disable) {\n            this.recordStateMap.clear();\n            this.collapsingRecords.clear();\n        }\n\n        if (!client.isConfiguring) {\n            client.rowManager.renderFromRow();\n        }\n        super.doDisable(disable);\n    }\n\n    changeLoadingIndicatorText(text) {\n        return text ? this.L(text) : text;\n    }\n\n    // Overrides onGridBodyFocusIn to ignore events on row expander body.\n    onGridBodyFocusIn(event) {\n        if (!this.client.lastMousedownEvent?.target?.closest('.b-rowexpander-body')) {\n            this.overridden.onGridBodyFocusIn(event);\n        }\n    }\n\n    get isAnimating() {\n        return this.client.isAnimating;\n    }\n\n    set isAnimating(value) {\n        const\n            { client }   = this,\n            wasAnimating = client.isAnimating;\n\n        client.isAnimating = value;\n\n        if (client.isAnimating !== wasAnimating) {\n            client.element.classList.toggle('b-rowexpander-animating');\n        }\n    }\n\n    //endregion\n\n    //region Events\n    /**\n     * This event fires before row expand is started.\n     *\n     * Returning `false` from a listener prevents the RowExpander to expand the row.\n     *\n     * Note that this event fires when the RowExpander toggles the row, not when the actual row expander body is\n     * rendered. Most of the time this is synchronous, but in the case of a row that is not yet rendered into view by\n     * scrolling, it can happen much later.\n     *\n     * @event beforeExpand\n     * @preventable\n     * @async\n     * @param {Core.data.Model} record Record\n     */\n\n    /**\n     * This event fires before row collapse is started.\n     *\n     * Returning `false` from a listener prevents the RowExpander to collapse the row.\n     *\n     * Note that this event fires when the RowExpander toggles the row, not when the actual row expander body is\n     * rendered. Most of the time this is synchronous, but in the case of a row that is not yet rendered into view by\n     * scrolling, it can happen much later.\n     *\n     * @event beforeCollapse\n     * @preventable\n     * @async\n     * @param {Core.data.Model} record Record\n     */\n    //endregion\n\n    //region ExpanderColumn\n    afterColumnsChange() {\n        this.addColumn();\n    }\n\n    changeColumn(config) {\n        if (config == null) {\n            return config;\n        }\n        return {\n            type    : 'action',\n            actions : [{\n                cls     : 'b-icon b-icon-collapse-down',\n                tooltip : ({ record }) => this.L(this.recordStateMap.has(record) ? 'L{RowExpander.collapse}' : 'L{RowExpander.expand}'),\n                onClick : ({ record }) => this.toggleExpand(record)\n            }],\n            width    : 40,\n            hideable : false,\n            align    : 'center',\n            region   : this.client.regions[0],\n            ...config,\n            field    : 'expanderActionColumn'\n        };\n    }\n\n    // Called in construct and if grid columns change\n    addColumn() {\n        const\n            me = this,\n            { column } = me,\n            { columns } = me.client;\n\n        if (!me._isAddingExpanderColumn && column && (!me._expander || !columns.includes(me._expander))) {\n            me._isAddingExpanderColumn = true;\n            if (me.columnPosition === 'last') {\n                [me._expander] = columns.add(column);\n            }\n            else {\n                [me._expander] = columns.insert(0, column);\n            }\n            me._isAddingExpanderColumn = false;\n        }\n    }\n    //endregion\n\n    //region UI events\n\n    onTriggerEvent({ target }) {\n        // Only grid cell event is handled. Action-cell event has its own handler.\n        if (this.disabled || target?.closest('.b-action-cell') || !target.closest('.b-grid-cell')) {\n            return;\n        }\n        this.toggleExpand(this.client.getRecordFromElement(target));\n    }\n\n    /**\n     * Toggles expander state.\n     * @private\n     * @param {Core.data.Model} record The record that should be toggled\n     * @category Internal\n     */\n    toggleExpand(record) {\n        if (record) {\n            if (this.recordStateMap.has(record)) {\n                this.collapse(record);\n            }\n            else {\n                this.expand(record);\n            }\n        }\n    }\n\n    //endregion\n\n    //region Rendering\n\n    /**\n     * Listens to changes in the Grid Store. Will remove expand State data on Store removal.\n     * If the refreshOnRecordChange config is `true`, it will trigger a re-render of the expander.\n     * @private\n     * @param {String} action\n     * @param {Core.data.Store} source\n     * @param {Core.data.Model[]} records\n     * @category Internal\n     */\n    onStoreChange({ action, source, records }) {\n        const\n            me = this,\n            { recordStateMap, collapsingRecords } = me;\n        if (me.disabled) {\n            return;\n        }\n        if (action === 'removeAll') {\n            recordStateMap.clear();\n            collapsingRecords.clear();\n        }\n        else if (storeRemoveActions[action]) {\n            for (const [record] of recordStateMap) {\n                if (!source.includes(record)) {\n                    recordStateMap.delete(record);\n                    collapsingRecords.delete(record);\n                }\n            }\n        }\n        else if (me.refreshOnRecordChange && records?.length) {\n            if (action === 'update') {\n                const recordState = recordStateMap.get(records[0]);\n                if (recordState?.isCreated) {\n                    recordState.isCreated = false;\n                    me.client.rowManager.renderFromRecord(records[0]);\n                }\n            }\n            else if (action === 'updatemultiple') {\n                let topRecordIndex,\n                    topRecord;\n                for (const rec of records) {\n                    const recordState = recordStateMap.get(rec);\n                    if (recordState?.isCreated) {\n                        recordState.isCreated = false;\n                        const index = source.records.indexOf(rec);\n                        if (!topRecord || topRecordIndex > index) {\n                            topRecordIndex = index;\n                            topRecord = rec;\n                        }\n                    }\n                }\n                if (topRecord) {\n                    me.client.rowManager.renderFromRecord(topRecord);\n                }\n            }\n        }\n    }\n\n    // Implements grid.processRowHeight hook\n    processRowHeight(record, height) {\n        const recordState = this.recordStateMap.get(record);\n        if (recordState) {\n            // If we are waiting for async rendering, height is calculated from a fixed loadingIndicatorHeight.\n            if (!recordState.isCreated && recordState.isRenderingAsync) {\n                return this.loadingIndicatorHeight + height;\n            }\n            // If we have a recordState but no expanderBodyHeight, we should recalculate height.\n            if (!recordState.expanderBodyHeight) {\n                for (const region of this.client.regions) {\n                    const height = recordState.expandElements[region].offsetHeight;\n                    if (height > recordState.expanderBodyHeight) {\n                        recordState.expanderBodyHeight = height;\n                    }\n                }\n            }\n        }\n        return (recordState?.expanderBodyHeight ?? 0) + height;\n    }\n\n    /**\n     * Hooks on before row render to render or remove row expander content depending on record state.\n     * @private\n     * @category Internal\n     */\n    beforeRenderRow({ row, record }) {\n        const\n            me = this,\n            { regions } = me.client,\n            { expandedRowClass } = me;\n\n        row.cls.toggle('b-rowexpander-disabled', me.disabled);\n\n        // If current row is expanded, always remove all expander content and settings.\n        if (row.cls[expandedRowClass]) {\n            // If animating a collapse, content should not be removed until animation is complete\n            if (me.enableAnimations && me.isAnimating && me.collapsingRecords.has(record)) {\n                me.waitForTransition(row, () => {\n                    // Make sure record still should be collapsed after animation is complete\n                    if (me.collapsingRecords.has(record)) {\n                        me.removeExpander(row);\n                    }\n                });\n            }\n            else {\n                me.removeExpander(row);\n            }\n        }\n        else {\n            // Makes sure record should collapse no longer\n            me.collapsingRecords.delete(record);\n        }\n\n        // The map only contains record that are expanded\n        const recordState = me.recordStateMap.get(record);\n        if (!me.disabled && recordState) {\n            // Expander content is created once, then reused.\n            if (!recordState.isCreated) {\n                me.renderExpander(record, row, recordState);\n            }\n            row.cls.add(expandedRowClass);\n            for (const region of regions) {\n                const rowElement = row.getElement(region);\n                if (recordState.isCreated) {\n                    rowElement.appendChild(recordState.expandElements[region]);\n                }\n                else {\n                    // If the renderer is async, we show a loading indicator.\n                    me.renderLoadingIndicator(rowElement, recordState);\n                }\n                me.lockCellHeight(rowElement, recordState.cellHeight, false);\n            }\n\n            // If expander body is rendered not fully in view, it will be scrolled into view\n            if (me._shouldScrollIntoView) {\n                me._shouldScrollIntoView = false;\n                if (!DomHelper.isInView(recordState.expandElements[regions[0]], true)) {\n                    // Waits for rendering to complete, then scrolls\n                    me.client.rowManager.ion({\n                        once       : true,\n                        thisObj    : me,\n                        renderDone : () => me.scrollRowIntoView(row, record)\n                    });\n                }\n            }\n        }\n    }\n\n    /**\n     * Scrolls expanded row into view. This function is called after rowManager has finished rendering.\n     * @private\n     * @category Internal\n     */\n    scrollRowIntoView(row, record) {\n        // If animating expand, need to wait for the animation to end before scrolling.\n        if (this.isAnimating) {\n            this.waitForTransition(row, () => this.client.scrollRowIntoView(record));\n        }\n        else {\n            this.client.scrollRowIntoView(record);\n        }\n    }\n\n    /**\n     * Waits for height transition on the provided rows element. Then calls provided function.\n     * @private\n     * @category Internal\n     */\n    waitForTransition(row, fn) {\n        EventHelper.onTransitionEnd({\n            element  : row.element,\n            property : 'height',\n            handler  : fn,\n            thisObj  : this\n        });\n    }\n\n    removeExpander(row) {\n        row.cls.remove(this.expandedRowClass);\n        for (const region of this.client.regions) {\n            const rowElement = row.getElement(region);\n            // If this function is called after animation finished, we need to remove class `manually`\n            rowElement.classList.remove(this.expandedRowClass);\n            DomHelper.removeEachSelector(rowElement, '.' + this.expanderBodyClass);\n            this.lockCellHeight(rowElement, null, false);\n        }\n    }\n\n    renderLoadingIndicator(rowElement, recordState) {\n        DomHelper.createElement({\n            parent    : rowElement,\n            className : this.expanderBodyClass + ' b-rowexpander-loading',\n            style     : {\n                top    : recordState.cellHeight,\n                height : this.loadingIndicatorHeight\n            },\n            children : [\n                {\n                    tag       : 'i',\n                    className : 'b-icon b-icon-spinner'\n                },\n                this.loadingIndicatorText\n            ]\n        });\n    }\n\n    /**\n     * Creates expander element for each grid region and calls the renderer, also for each grid region.\n     * @private\n     * @param {Core.data.Model} record\n     * @param {Grid.row.Row} row\n     * @param {Object} recordState\n     * @category Internal\n     */\n    renderExpander(record, row, recordState) {\n        const\n            me                = this,\n            cellHeight        = row.cells[0]?.offsetHeight,\n            expandElements    = {},\n            renderings        = [],\n            // Will be called sync or async depending on the implementation of the renderer function.\n            continueRendering = (content, expanderElement, region) => {\n                if (content != null) {\n                    if (typeof content === 'string') {\n                        expanderElement.innerHTML = content;\n                    }\n                    // Everything else will be treated as a dom config for now\n                    else {\n                        content = DomHelper.createElement(content);\n                        expanderElement.appendChild(content);\n                    }\n                }\n                expandElements[region] = expanderElement;\n            };\n\n        // If another rendering of the same record is made while waiting for async, we should ignore it.\n        if (recordState.isRenderingAsync) {\n            return;\n        }\n\n        Object.assign(recordState, { cellHeight, expandElements, expanderBodyHeight : 0 });\n\n        for (const region of me.client.regions) {\n            const rowElement = row.getElement(region);\n\n            // class needed at this point to give the expander container correct height\n            row.addCls(me.expandedRowClass);\n\n            // Create expand container\n            // Expander element needs to be in the DOM for appendTo to work correctly\n            const expanderElement = DomHelper.createElement({\n                parent    : rowElement,\n                className : me.expanderBodyClass,\n                style     : {\n                    top : cellHeight + 'px'\n                }\n            });\n\n            // The renderer can be async or sync\n            const renderResponse = me.renderer({ record, expanderElement, rowElement, region });\n            if (Objects.isPromise(renderResponse)) {\n                renderings.push(renderResponse.then((content) => continueRendering(content, expanderElement, region)));\n            }\n            else {\n                continueRendering(renderResponse, expanderElement, region);\n            }\n        }\n\n        // If we have async renderer, wait for all to complete\n        if (renderings.length) {\n            recordState.isRenderingAsync = true;\n            Promise.all(renderings).then(() => {\n                // Flag that indicates the completion of expand rendering\n                recordState.isCreated = true;\n                // The rows need to refresh to recalculate row height\n                // (?. since we might have been destroyed while waiting for promises)\n                me.renderRowsWithAnimation?.(record);\n                recordState.isRenderingAsync = false;\n            });\n        }\n        else {\n            recordState.isCreated = true;\n        }\n    }\n\n    /**\n     * Called when grid rows needs to re-render, for example on expand or collapse.\n     * Activates animations on grid, and deactivates them when they are completed.\n     * @private\n     * @param {Core.data.Model} record Record whose row was toggled\n     * @category Internal\n     */\n    renderRowsWithAnimation(record) {\n        const me = this;\n        if (me.enableAnimations) {\n            const row = me.client.rowManager.getRowById(record);\n            if (row) {\n                me.isAnimating = true;\n                if (me.collapsingRecords.has(record)) {\n                    row.addCls('b-row-is-collapsing');\n                }\n                me.waitForTransition(row, () => {\n                    me.isAnimating = false;\n                    if (!row.isDestroyed) {\n                        row.removeCls?.('b-row-is-collapsing');\n                    }\n                });\n            }\n        }\n        me.client.rowManager.renderFromRecord(record);\n    }\n\n    /**\n     * Called when row is expanded. This function locks all cell's height to current height (before expanding).\n     * @private\n     * @param {HTMLElement} rowElement\n     * @param {Number} cellHeight The height to lock\n     * @param {Boolean} unlock To remove locked cell height when the row is collapsed\n     * @category Internal\n     */\n    lockCellHeight(rowElement, cellHeight, unlock) {\n        for (let a = 0; a < rowElement.children.length; a++) {\n            const child = rowElement.children[a];\n            // Should not lock expander element\n            if (!child.classList.contains(this.expanderBodyClass)) {\n                child.style.height = unlock ? '' : cellHeight + 'px';\n            }\n        }\n    }\n    //endregion\n\n    //region Public\n\n    /**\n     * Tells the RowExpander that the provided record should be expanded. If or when the record is rendered into view,\n     * the record will be expanded.\n     *\n     * @param {Core.data.Model} record Record whose row should be expanded\n     * @category Common\n     */\n    async expand(record) {\n        const me = this;\n        if (me.disabled) {\n            return;\n        }\n\n        if (await me.trigger('beforeExpand', { record }) === false) {\n            return;\n        }\n        // Tells renderer that this record should be expanded\n        me.recordStateMap.set(record, { isCreated : false });\n        // In the event that we have expanded a record which is in collapsing animation state\n        me.collapsingRecords.delete(record);\n        me._shouldScrollIntoView = true;\n        me.renderRowsWithAnimation(record);\n    }\n\n    /**\n     * Tells the RowExpander that the provided record should be collapsed. If the record is in view, it will be\n     * collapsed. If the record is not in view, it will simply not be expanded when rendered into view.\n     *\n     * @param {Core.data.Model} record Record whose row should be collapsed\n     * @category Common\n     */\n    async collapse(record) {\n        const me = this;\n        if (me.disabled) {\n            return;\n        }\n\n        if (await me.trigger('beforeCollapse', { record }) === false) {\n            return;\n        }\n        me.recordStateMap.delete(record);\n        me.collapsingRecords.add(record);\n        me.renderRowsWithAnimation(record);\n    }\n    //endregion\n}\n\nGridFeatureManager.registerFeature(RowExpander);\n","//TODO: Should listen for store search also, to work the other way around\n//TODO: Buggy sometimes, try searching for Barcelona tigers, navigate using buttons\n//TODO: Allow regex\n//TODO: Optional case sensitive\n//TODO: build in UI, popup with keyboard shortcut?\n\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport DomDataStore from '../../Core/data/DomDataStore.js';\nimport GridFeatureManager from './GridFeatureManager.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\n\n/**\n * @module Grid/feature/Search\n */\n\n/**\n * {@inlineexample Grid/feature/Search.js}\n *\n * Feature that allows the user to search the entire grid. Navigate between hits using the\n * keyboard, [F3] or [Ctrl/CMD + G] moves to next, also pressing [Shift] moves to previous.\n *\n * Note that this feature does not include a UI, please build your own and call appropriate methods in the feature.\n * For a demo implementation, see <a href=\"../examples/search/\" target=\"_blank\">Search example</a>.\n *\n * This feature is <strong>disabled</strong> by default.\n *\n * ## Keyboard shortcuts\n *\n * This feature has the following default keyboard shortcuts:\n *\n * | Keys                   | Action      | Action description                |\n * |------------------------|-------------|-----------------------------------|\n * | [F3]                   | goToNextHit | Move focus to next search hit     |\n * | [Shift + F3]           | goToPrevHit | Move focus to previous search hit |\n * | [Ctrl/CMD + G]         | goToNextHit | Move focus to next search hit     |\n * | [Ctrl/CMD + Shift + G] | goToPrevHit | Move focus to previous search hit |\n *\n * For more information on how to customize keyboard shortcuts, please see\n * [our guide](#Grid/guides/customization/keymap.md)\n *\n * @extends Core/mixin/InstancePlugin\n *\n * @example\n * // enable Search\n * let grid = new Grid({\n *   features: {\n *     search: true\n *   }\n * });\n *\n * // perform search\n * grid.features.search.search('steve');\n *\n * @demo Grid/search\n * @classtype search\n * @feature\n */\nexport default class Search extends Delayable(InstancePlugin) {\n    //region Init\n\n    static get $name() {\n        return 'Search';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * The maximum amount of search hits\n             * @config {Number}\n             * @default\n             */\n            limit : 1000,\n\n            /**\n             * Set to false to not show the search hit index numbers\n             * @config {Boolean}\n             * @default\n             */\n            showHitIndex : true,\n\n            /**\n             * See {@link #keyboard-shortcuts Keyboard shortcuts} for details\n             * @config {Object<String,String>}\n             */\n            keyMap : {\n                F3             : 'gotoNextHit',\n                'Ctrl+g'       : 'gotoNextHit',\n                'Shift+F3'     : 'gotoPrevHit',\n                'Ctrl+Shift+g' : 'gotoPrevHit'\n            }\n        };\n    }\n\n    static get properties() {\n        return {\n            hitCls          : 'b-search-hit',\n            hitCellCls      : 'b-search-hit-cell',\n            hitCellBadgeCls : 'b-search-hit-cell-badge',\n            hitTextCls      : 'b-search-hit-text'\n        };\n    }\n\n    construct(grid, config) {\n        const me = this;\n\n        super.construct(grid, config);\n\n        Object.assign(me, {\n            grid,\n            text       : '',\n            hitEls     : [],\n            treeWalker : grid.setupTreeWalker(grid.element, DomHelper.NodeFilter.SHOW_TEXT, () => DomHelper.NodeFilter.FILTER_ACCEPT)\n        });\n\n        // When new nodes appear due to node expand, include them in the search\n        grid.ion({\n            expandNode : 'onTreeNodeExpand',\n            thisObj    : me\n        });\n    }\n\n    isActionAvailable() {\n        return Boolean(this.text);\n    }\n\n    onTreeNodeExpand() {\n        if (this.text) {\n            this.requestAnimationFrame(this.search, [this.text, false, true]);\n        }\n    }\n\n    doDestroy() {\n        this.clear(true);\n        super.doDestroy();\n    }\n\n    doDisable(disable) {\n        if (disable) {\n            this.clear();\n        }\n\n        super.doDisable(disable);\n    }\n\n    get store() {\n        return this.grid.store;\n    }\n\n    //endregion\n\n    //region Plugin config\n\n    // Plugin configuration. This plugin chains some of the functions in Grid.\n    static get pluginConfig() {\n        return {\n            chain : ['populateCellMenu']\n        };\n    }\n\n    //endregion\n\n    //region Search\n\n    /**\n     * Performs a search and highlights hits.\n     * @param {String} text Text to search for\n     * @param {Boolean} [gotoHit] Go to first hit after search\n     * @param {Boolean} [reapply] Pass true to force search\n     * @param {String[]} [fields] An array of the fields to search for the value in\n     */\n    async search(text, gotoHit = true, reapply = false, fields) {\n        const me = this;\n\n        // empty search considered a clear\n        if (!text) {\n            return me.clear();\n        }\n\n        // searching for same thing again, do nothing\n        if (!reapply && text === me.text || me.disabled) {\n            return;\n        }\n\n        const\n            { grid, store } = me,\n            // Only search columns in use\n            columns         = grid.columns.visibleColumns.filter(col => col.searchable !== false),\n            formatters      = [];\n\n        fields      = fields || columns.map(col => {\n            // For date / number columns\n            formatters.push(col.formatValue?.bind(col));\n            return col.field;\n        });\n        const found = store.search(text, fields, formatters);\n\n        if (store.isTree && found.length) {\n            await grid.expandTo(found.map(hit => hit.id));\n        }\n\n        // Only include first result for merged cells in the count\n        for (const column of columns) {\n            if (column.mergeCells && column.isSorted) {\n                let prevValue = null,\n                    belongsTo = null;\n\n                for (const hit of found) {\n                    if (hit.field === column.field) {\n                        const value = hit.data[hit.field];\n                        if (value === prevValue) {\n                            hit.belongsTo = belongsTo;\n                        }\n                        prevValue = value;\n                        belongsTo = `${hit.field}-${hit.id}`;\n                    }\n                }\n            }\n        }\n\n        let i = 1;\n\n        Object.assign(me, {\n            foundMap  : {},\n            prevFound : me.found,\n            found,\n            text,\n            findRe    : new RegExp(`(\\\\s+)?(${StringHelper.escapeRegExp(String(text))})(\\\\s+)?`, 'ig')\n        });\n\n        me.clearHits();\n\n        if (!found) {\n            return;\n        }\n\n        // highlight hits for visible cells\n        for (const hit of found) {\n            // merged cells reuse the index of the first hit in the range\n            me.foundMap[`${hit.field}-${hit.id}`] = hit.belongsTo ? me.foundMap[hit.belongsTo] : i++;\n            // limit hits\n            if (i > me.limit) {\n                break;\n            }\n        }\n\n        if (!me.listenersInitialized) {\n            grid.rowManager.ion({\n                name       : 'renderCell',\n                renderCell : 'renderCell',\n                thisObj    : me\n            });\n            store.ion({\n                name                                : 'storeRefresh',\n                [`refresh${grid.asyncEventSuffix}`] : 'onStoreRefresh',\n                thisObj                             : me\n            });\n            me.listenersInitialized = true;\n        }\n\n        grid.refreshRows();\n\n        grid.trigger('search', { grid, find : text, found });\n\n        if (gotoHit && !me.isHitFocused) {\n            me.gotoNextHit(true);\n        }\n\n        return found;\n    }\n\n    clearHits() {\n        // Clear old hits\n        for (const cellElement of DomHelper.children(this.grid.element, '.' + this.hitCls)) {\n            cellElement.classList.remove(this.hitCls, this.hitCellCls);\n\n            // Rerender cell to remove search-hit-text\n            const row = DomDataStore.get(cellElement).row;\n\n            // Merged cells have no row, but they will be cleared anyway by their own DomSync call\n            if (row) {\n                // Need to force replace the markup\n                row.forceInnerHTML = true;\n                row.renderCell(cellElement);\n                row.forceInnerHTML = false;\n            }\n        }\n    }\n\n    /**\n     * Clears search results.\n     */\n    clear(silent = false) {\n        const\n            me       = this,\n            { grid } = me;\n\n        if (me.foundMap) {\n            delete me.foundMap;\n        }\n\n        me.text = null;\n\n        me.clearHits();\n\n        if (me.listenersInitialized) {\n            this.detachListeners('renderCell');\n            this.detachListeners('storeRefresh');\n            me.listenersInitialized = false;\n        }\n\n        if (!silent) {\n            grid.trigger('clearSearch', { grid });\n        }\n    }\n\n    /**\n     * Number of results found\n     * @readonly\n     * @property {Number}\n     */\n    get foundCount() {\n        return this.found?.length ?? 0;\n    }\n\n    //endregion\n\n    //region Navigation\n\n    /**\n     * Returns true if focused row is a hit\n     * @property {Boolean}\n     * @readonly\n     */\n    get isHitFocused() {\n        const\n            me              = this,\n            { grid }        = me,\n            { focusedCell } = grid;\n\n        if (focusedCell?.cell?.contains(DomHelper.getActiveElement(grid.element))) {\n            const { rowIndex, column } = focusedCell;\n\n            return rowIndex !== -1 && me.found.some(hit =>\n                hit.index === rowIndex && column && hit.field === column.field\n            );\n        }\n    }\n\n    /**\n     * Select the next hit, scrolling it into view. Triggered with [f3] or [ctrl]/[cmd] + [g].\n     */\n    gotoNextHit(fromStart = false) {\n        const\n            me = this;\n\n        if (!me.found?.length) return;\n\n        const\n            { grid, store } = me,\n            fromCell        = grid.focusedCell || grid.lastFocusedCell,\n            currentIndex    = fromCell && fromStart !== true ? store.indexOf(fromCell.record, undefined, true) : -1,\n            nextHit         = me.found.findIndex(hit => hit.index > currentIndex);\n\n        if (nextHit !== -1) {\n            me.gotoHit(nextHit);\n        }\n    }\n\n    /**\n     * Select the previous hit, scrolling it into view. Triggered with [shift] + [f3] or [shift] + [ctrl]/[cmd] + [g].\n     */\n    gotoPrevHit() {\n        const\n            me        = this,\n            { store } = me;\n\n        if (!me.found?.length) return;\n\n        const\n            { grid, found } = me,\n            fromCell        = grid.focusedCell || grid.lastFocusedCell,\n            currentIndex    = fromCell ? store.indexOf(fromCell.record, undefined, true) : 0;\n\n        for (let i = found.length - 1; i--; i >= 0) {\n            const hit = found[i];\n            if (hit.index < currentIndex) {\n                me.gotoHit(i);\n                break;\n            }\n        }\n    }\n\n    /**\n     * Go to specified hit.\n     * @param {Number} index\n     */\n    gotoHit(index) {\n        const\n            { grid } = this,\n            nextHit  = this.found[index];\n\n        if (nextHit) {\n            grid.focusCell({\n                field : nextHit.field,\n                id    : nextHit.id\n            });\n        }\n\n        return Boolean(nextHit);\n    }\n\n    /**\n     * Go to the first hit.\n     */\n    gotoFirstHit() {\n        this.gotoHit(0);\n    }\n\n    /**\n     * Go to the last hit.\n     */\n    gotoLastHit() {\n        this.gotoHit(this.found.length - 1);\n    }\n\n    //endregion\n\n    //region Render\n\n    /**\n     * Called from SubGrid when a cell is rendered. Highlights search hits.\n     * @private\n     */\n    renderCell({ cellElement, column, record, value }) {\n        const\n            me       = this,\n            {\n                treeWalker,\n                findRe,\n                hitTextCls,\n                showHitIndex\n            }        = me,\n            hitIndex = me.foundMap?.[column.field + '-' + record.id];\n\n        if (hitIndex) {\n            // highlight cell\n            cellElement.classList.add(me.hitCls);\n\n            // Remove any previous hit badge\n            showHitIndex && cellElement.querySelector(`.${me.hitCellBadgeCls}`)?.remove();\n\n            // highlight in cell if found in innerHTML\n            const inner = DomHelper.down(cellElement, '.b-grid-cell-value,.b-tree-cell-value') || cellElement;\n\n            if (String(value).toLowerCase() === String(me.text).toLowerCase()) {\n                inner.innerHTML = `<span class=\"${me.hitTextCls}\">${inner.innerHTML}</span>${showHitIndex ? `<div class=\"${me.hitCellBadgeCls}\">${hitIndex}</div>` : ''}`;\n            }\n            // Replace every occurrence of the text in every descendant text node with a span\n            // encapsulating the matched string.\n            else {\n                treeWalker.currentNode = inner;\n                for (let textNode = treeWalker.nextNode(); textNode && inner.contains(textNode);) {\n                    const\n                        nodeToReplace = textNode,\n                        textContent   = textNode.nodeValue,\n                        newText       = ['<span>'];\n\n                    // Move onto next text node before we replace the node with a highlihght HTML sequence\n                    textNode = treeWalker.nextNode();\n\n                    let offset = findRe.lastIndex;\n\n                    // Convert textContent into an innerHTML string which htmlEncodes the text and embeds\n                    // a highlighting span which contains the target text.\n                    for (let match = findRe.exec(textContent); match; match = findRe.exec(textContent)) {\n                        const\n                            preamble    = textContent.substring(offset, match.index),\n                            spaceBefore = match[1] ? '\\xa0' : '',\n                            v           = match[2],\n                            spaceAfter  = match[3] ? '\\xa0' : '';\n\n                        newText.push(`${StringHelper.encodeHtml(preamble)}${spaceBefore}<span class=\"${hitTextCls}\">${v}</span>${spaceAfter}`);\n                        offset = findRe.lastIndex;\n                    }\n\n                    newText.push(StringHelper.encodeHtml(textContent.substring(offset)), '<span>');\n\n                    // Insert a fragment with each match wrapped with a span.\n                    nodeToReplace.parentNode.insertBefore(DomHelper.createElementFromTemplate(newText.join(''), {\n                        fragment : true\n                    }), nodeToReplace);\n                    nodeToReplace.remove();\n                }\n\n                if (showHitIndex) {\n                    DomHelper.createElement({\n                        parent    : cellElement,\n                        className : me.hitCellBadgeCls,\n                        text      : hitIndex\n                    });\n                }\n            }\n\n            me.hitEls.push(cellElement);\n        }\n    }\n\n    //endregion\n\n    //region Context menu\n\n    /**\n     * Add search menu item to cell context menu.\n     * @param {Object} options Contains menu items and extra data retrieved from the menu target.\n     * @param {Grid.column.Column} options.column Column for which the menu will be shown\n     * @param {Core.data.Model} options.record Record for which the menu will be shown\n     * @param {Object<String,MenuItemConfig|Boolean|null>} options.items A named object to describe menu items\n     * @internal\n     */\n    populateCellMenu({ column, record, items, cellElement }) {\n        const me = this;\n\n        if (column.searchable) {\n            items.search = {\n                text        : 'L{searchForValue}',\n                localeClass : me,\n                icon        : 'b-fw-icon b-icon-search',\n                cls         : 'b-separator',\n                weight      : 200,\n                disabled    : me.disabled,\n                onItem      : () => {\n                    // TODO: Only extract selection from current cell instead? Lazy way for now\n                    let sel = globalThis.getSelection().toString();\n\n                    if (!sel) {\n                        sel = cellElement.innerText;\n                    }\n\n                    me.search(sel);\n                }\n            };\n        }\n    }\n\n    //endregion\n\n    //region Events\n\n    onStoreRefresh() {\n        this.search(this.text, false, true);\n    }\n\n    //endregion\n}\n\nSearch.featureClass = 'b-search';\n\nGridFeatureManager.registerFeature(Search);\n","import DomHelper from '../../Core/helper/DomHelper.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\n\n/**\n * @module Grid/feature/StickyCells\n */\n\n/**\n * A feature which pins configurable content from a grid row to the top of the grid\n * while the row scrolls off the top but is still visible.\n *\n * As soon as the row becomes too small to contain the content, it is unpinned, and\n * scrolls out naturally, and the following row's configured content becomes pinned.\n *\n * For example:\n *\n * ```javascript\n *     new Grid({\n *         features : {\n *             stickyCells : {\n *                 // Identifies elements to clone and pin to the grid top.\n *                 contentSelector : '.myClassName'\n *             }\n *         }\n *     });\n * ```\n * @extends Core/mixin/InstancePlugin\n * @classtype stickyCells\n * @feature\n */\nexport default class StickyCells extends InstancePlugin {\n    //region Config\n\n    static get $name() {\n        return 'StickyCells';\n    }\n\n    static get defaultConfig() {\n        return {\n            /**\n             * A CSS selector which must identify the content within your grid row which you\n             * require to be pinned to the grid while the row if the topmost row, and remains visible.\n             * @config {String}\n             */\n            contentSelector : null,\n\n            currentTopRowCls : 'b-sticky-cells-current-top-row'\n        };\n    }\n\n    // Plugin configuration. This plugin chains some of the functions in Grid.\n    static get pluginConfig() {\n        return {\n            before : ['renderRows']\n        };\n    }\n    //endregion\n\n    //region Init\n\n    construct(grid, config) {\n        super.construct(grid, config);\n\n        // We cannot chain our client's onGridScroll because that is now a delayable injected method.\n        grid.ion({\n            scroll  : 'onGridScroll',\n            thisObj : this\n        });\n        Object.assign(this, DomHelper.createElement({\n            reference : 'element',\n            parent    : grid.element,\n            className : 'b-grid-sticky-row',\n            children  : [{\n                reference : 'contentElement',\n                className : 'b-grid-cell'\n            }]\n        }));\n\n        // Clean these classes from copied cell and row classLists\n        this.removeClasses = {\n            'b-focused'             : false,\n            'b-hover'               : false,\n            'b-selected'            : false,\n            [this.currentTopRowCls] : false\n        };\n    }\n\n    renderRows() {\n        // Do not leave stranded sticky row visible on data change\n        this.element.classList.add('b-hide-visibility');\n    }\n\n    onGridScroll() {\n        const\n            me = this,\n            {\n                client : grid,\n                element,\n                contentElement\n            } = me,\n            gridViewport  = Rectangle.client(grid.bodyContainer).roundPx(),\n            currentTopRow = grid.rowManager.getRowAt(gridViewport.y),\n            topRowChanged = currentTopRow !== me.currentTopRow;\n\n        if (currentTopRow) {\n            if (topRowChanged) {\n                if (me.currentTopRow) {\n                    me.currentTopRow.removeCls(me.currentTopRowCls);\n                    me.currentTopRow.removeCls('b-not-enough-height');\n                }\n\n                me.currentTopRow = currentTopRow;\n                currentTopRow.addCls(me.currentTopRowCls);\n\n                contentElement.innerHTML = '';\n                contentElement.appendChild(me.updateStickyContent());\n            }\n\n            // If the outgoing row is not not too tall, and doesn't *need* the content\n            // pinning to the top, hide the sticky row, and make the source sticky\n            // elements pin themselves to the bottom of the cell using the b-not-enough-height\n            // class to switch them to align-self: flex-end\n            const notEnoughHeight = me.currentTopRow.bottom - me.client.scrollable.y <= me.stickyContentHeight;\n            me.element.classList[notEnoughHeight ? 'add' : 'remove']('b-hide-visibility');\n            me.currentTopRow[notEnoughHeight ? 'addCls' : 'removeCls']('b-not-enough-height');\n\n            // Keep sticky row aligned while constrained to the viewport.\n            // This keeps it pinned to the top.\n            gridViewport.y += me.stickyContentTop;\n            DomHelper.alignTo(element, me.stickyEls[0], { align : 't0-t0', constrainTo : gridViewport }, true);\n        }\n\n        me.lastProcessedTopRow = currentTopRow;\n    }\n\n    updateStickyContent() {\n        const\n            me            = this,\n            {\n                currentTopRow,\n                removeClasses\n            }             = me,\n            rowClasses   = {\n                'b-grid-sticky-row' : 1\n            },\n            cellClasses  = {},\n            stickyContent = me.stickyContent || (me.stickyContent = document.createDocumentFragment()),\n            stickyEls     = me.stickyEls || (me.stickyEls = []);\n\n        // Release the sticky state on the previous row's sticky elements\n        stickyEls.forEach(e => {\n            e.classList.remove('b-sticky-content-el');\n        });\n\n        // Collect the elements we need to clone from the current top row\n        stickyEls.length = 0;\n        currentTopRow.eachElement(rowEl => {\n            stickyEls.push(...rowEl.querySelectorAll(me.contentSelector));\n        });\n\n        // Clear the documentFragment which we use to hold our clones\n        while (stickyContent.firstChild) {\n            stickyContent.remove(stickyContent.firstChild);\n        }\n\n        me.stickyContentHeight = 0;\n        me.stickyContentTop = 0;\n\n        // Clone the selected elements and measure them for alignment.\n        stickyEls.map(e => {\n            // Collect the app classes that may be necessary on the cell and row elements.\n            e.closest('.b-grid-cell').classList.forEach(cls => cellClasses[cls] = 1);\n            e.closest('.b-grid-row').classList.forEach(cls => rowClasses[cls] = 1);\n\n            // Clean out grid's classes from the class sets.\n            Object.assign(cellClasses, removeClasses);\n            Object.assign(rowClasses,  removeClasses);\n\n            const eTop = e.offsetTop;\n\n            me.stickyContentTop = Math.max(me.stickyContentTop, eTop);\n\n            // We need to know how tall the sticky content is\n            e.style.alignSelf = 'flex-end';\n            me.stickyContentHeight = Math.max(me.stickyContentHeight, me.currentTopRow.height - e.offsetTop + eTop);\n            e.style.alignSelf = '';\n\n            const result = e.cloneNode(true);\n\n            // Tag the content al *after* cloning it.\n            e.classList.add('b-sticky-content-el');\n\n            stickyContent.appendChild(result);\n\n            return result;\n        });\n\n        cellClasses['b-focused'] = false;\n        DomHelper.syncClassList(me.contentElement, cellClasses);\n        DomHelper.syncClassList(me.element, rowClasses);\n\n        return stickyContent;\n    }\n}\n\nGridFeatureManager.registerFeature(StickyCells, false);\n","import Combo from '../../Core/widget/Combo.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\nimport '../../Grid/view/TreeGrid.js';\n\n/**\n * @module Grid/widget/TreeCombo\n */\n\n/**\n * A powerful {@link Core/widget/Combo} box using a {@link Grid/view/TreeGrid} as its drop down widget. You can define\n * your own set of columns to display and use all the regular features of the Grid.\n *\n * {@inlineexample Grid/widget/TreeCombo.js}\n *\n * ```javascript\n * new TreeCombo({\n *     label    : 'Pick task(s)',\n *     width    : '30em',\n *     appendTo : document.body,\n *     picker   : {\n *         // Define the columns to show in the grid\n *         columns : [\n *             { type : 'tree', text : 'Tasks', field : 'name', flex : 1 },\n *             { text : 'Priority', field : 'prio' }\n *         ]\n *     },\n *     chipView : {\n *         // Render the chips in the combo field\n *         itemTpl(record) {\n *             return StringHelper.xss`${record.name}`;\n *         }\n *     },\n *     store : {\n *         fields     : [\n *             'prio'\n *         ],\n *         data : [\n *             {\n *                 name     : 'Development Tasks',\n *                 expanded : true,\n *                 children : [\n *                     { id : 1, name : 'Improve React docs', prio : 'High' },\n *                     { id : 2, name : 'Build Angular module', prio : 'Low' },\n *                     { id : 3, name : 'Creat Vue project', prio : 'Low' }\n *                 ]\n *             },\n *             { name : 'Customer meeting', prio : 'Normal' },\n *             {\n *                 name     : 'Customer Tasks',\n *                 expanded : true,\n *                 children : [\n *                     { id : 4, name : 'Intro meeting', prio : 'Normal' },\n *                     { id : 5, name : 'Build POC', prio : 'High' },\n *                     { id : 6, name : 'Documentation', prio : 'Low' }\n *                 ]\n *             }\n *         ]\n *     }\n * });\n * ```\n *\n * @extends Core/widget/Combo\n * @classtype treecombo\n * @inputfield\n */\nexport default class TreeCombo extends Combo {\n    static $name = 'TreeCombo';\n\n    static type = 'treecombo';\n\n    static configurable = {\n        multiSelect : true,\n        chipView    : {\n            itemTpl(record) {\n                return StringHelper.xss`${record.name}`;\n            },\n            scrollable : {\n                overflowX : 'hidden-scroll'\n            }\n        }\n    };\n\n    configure(config) {\n        super.configure(config);\n        const me = this;\n\n        me.ion({\n            change() {\n                me.picker.selectedRecords = me.value;\n            }\n        });\n    }\n\n    changePicker(picker, oldPicker) {\n        const me = this;\n        return super.changePicker(ObjectHelper.assign({}, picker, {\n            type                       : 'treegrid',\n            minWidth                   : '35em',\n            readOnly                   : me.readOnly,\n            disableGridRowModelWarning : true,\n            selectedRecords            : me.value.map(val => me.store.getById(val)),\n            selectionMode              : {\n                row                  : true,\n                multiSelect          : me.multiSelect,\n                rowCheckboxSelection : true\n            },\n            internalListeners : {\n                selectionChange({ selection }) {\n                    me.value = selection;\n                }\n            }\n        }), oldPicker);\n    }\n}\n\nTreeCombo.initClass();\n"],"names":["ActionColumn","Column","groupHeaderReserved","construct","config","store","me","arguments","width","flex","grid","ion","paint","thisObj","disableIfGridReadOnly","element","classList","add","externalRenderer","renderer","internalRenderer","column","record","callExternalRenderer","_column$actions","inGroupTitle","meta","subGrid","_this$externalRendere","call","className","children","actions","map","actionConfig","index","_tooltip$startsWith","visible","showForGroup","tooltip","btip","startsWith","callback","customRendererData","action","tag","dataset","_objectSpread","Tooltip","encodeConfig","html","cls","onCellClick","target","_column$actions2","contains","actionIndex","parentElement","actionHandler","onClick","updateAutoWidth","groupActions","oldActions","forEach","actionOriginal","push","length","_actions","actionsHtml","DomHelper","createElement","outerHTML","measureText","_defineProperty","name","type","defaultValue","filterable","groupable","sortable","editor","searchable","htmlEncode","resizable","minWidth","ColumnStore","registerColumnType","exposeProperties","_$name","AggregateColumn","NumberColumn","defaults","function","includeParentInChangeSet","data","columnStore","configuredAlign","configuredEditor","storeListeners","update","prio","oldStore","_store","un","modelClass","field","fieldMap","align","canEdit","isLeaf","sumChildren","args","result","i","parseFloat","avg","onRecordUpdate","changes","rowManager","bubble","rec","row","getRowFor","cellElement","getCell","renderCell","getRawValue","_record$children","value","fn","isMathFn","Math","handler","resolveCallback","apply","r","set","setData","canFillValue","PercentColumn","min","max","showValue","lowThreshold","summaryRenderer","sum","fitMode","constructor","internalCellCls","defaultRenderer","role","tabIndex","style","text","undefined","resizeToFitContent","RatingColumn","emptyIcon","filledIcon","editable","filterType","ArrayHelper","populate","filled","event","readOnly","starIndex","indexOf","parentNode","childNodes","metaKey","shiftKey","get","TemplateColumn","template","Error","renderData","isSpecialRow","TimeColumn","format","formatValue","groupRenderer","groupRowFor","innerHTML","DateHelper","parse","defaultEditor","CellCopyPaste","InstancePlugin","afterConstruct","afterSelectionModeChange","client","selectionMode","cell","disabled","_disabledBySelectionMode","copyOnly","_this$client$features","_copyOnly","features","cellEdit","enabled","canCopy","selectedRecords","selectedCells","canCutPaste","_this$client$features2","isEditing","isActionAvailable","key","sendToClipboard","cells","lastRowIndex","lastColIndex","stringData","sort","c1","c2","rowIndex","columnIndex","_column$toClipboardSt","_cellValue","repeat","cellValue","toClipboardString","_record$get","toString","toCopyString","currentValue","replace","emptyValueChar","BrowserHelper","writeToClipboard","useNativeClipboard","cut","copy","entityName","isCut","filter","_r$record","trigger","copiedDataString","paste","clipboardData","readFromClipboard","targetCell","modifiedRecords","Set","rows","stringAs2dArray","targetCells","_shiftSelectRange","some","equals","cellRows","cellSelectorsAs2dArray","columnCount","curI","curX","rI","targetRecord","getAt","cI","targetColumn","columns","targetField","fromClipboardString","string","toPasteValue","locations","rId","location","id","stringRows","split","populateCellMenu","items","cutCell","cutText","localeClass","icon","weight","onItem","pasteCell","pasteText","copyCell","copyText","chain","keyMap","VersionHelper","isTestEnv","GridFeatureManager","registerFeature","CellTooltip","processConfig","initTip","tip","new","forElement","forSelector","hoverDelay","trackMouse","getHtml","getTooltipContent","bind","internalListeners","pointerOver","listeners","configuredListeners","initialConfig","relayEvents","onPointerOver","getColumnFromElement","tooltipRenderer","Boolean","setConfig","doDestroy","destroy","doDisable","disable","activeTarget","getRecordFromElement","arg","cellTooltip","lastRecord","generation","lastRecordGeneration","lastColumn","_html","Objects","isPromise","ColumnRename","_this$editor","pluginConfig","after","populateHeaderMenu","rename","L","startEdit","Event","_this$client$getHeade","getHeaderDataFromEvent","textWrapper","Editor","owner","render","F2","FillHandle","mixin","Delayable","handleSelection","_fillListeners","onContentChange","afterColumnsChange","fixElementHeights","getCellDataFromEvent","includeSingleAxisMatch","overridden","findPatternsIn2dRange","range","horizontal","negative","values","columnId","isNaN","rowOrCol","pattern","findPatternsIn1dRange","lastValue","next","every","val","Date","diffs","ix","shift","size","increaseBy","getTime","stringPattern","currentIndex","afterSelectionChange","GlobalEvents","isMouseDown","delayUntilMouseUp","removeElements","_isExtending","rangeSelection","drawFillHandleAndBorder","onMouseDown","mouseMoveOrUp","EventHelper","on","globalThis","mouseover","mouseup","stopImmediatePropagation","handled","onMouseUp","currentRange","_isCropping","selectionChange","internalSelectRange","from","to","extensionCells","croppingCells","sel","disableScrollingCloseToEdges","suspendRefresh","firstCell","patterns","changeMap","Map","reverse","_me$calculateFillValu","_column$calculateFill","calculateFillValue","changed","resumeRefresh","performSelection","onMouseOver","_cellSelector","_cellSelector$_column","first","last","cellData","cellSelector","normalizeCellContext","_column","region","equalOrSmaller","cs","enableScrollingCloseToEdges","allowCropping","Location","keepListeners","_me$rangeSelection","regionEl","subGrids","x","Rectangle","right","y","getRecordCoords","bottom","borderElement","handleElement","setRect","height","appendChild","setTopLeft","scrollWidth","toggleCroppingCls","newCells","getRange","handleClick","delegate","mousedown","hasFillElements","_this$croppingCells","_this$client$getCell","toggle","_me$handleElement","_me$borderElement","remove","removeListeners","listener","_client$_shiftSelectR","parent","isAvailable","override","camelCase","mousemove","touchdown","touchmove","touchup","mouseout","dblclick","keydown","keypress","keyup","contextmenu","MergeCells","before","eachSubGrid","setupSubGrid","renderDone","bindStore","$mergedCellsElement","isConfiguring","isDisabling","reset","updatePassthrough","use","detachListeners","change","refresh","onInternalResize","refreshBounds","beforeRenderCell","mergeCells","isSorted","collapsed","mergedRange","getMergeRange","afterRenderRow","oldId","oldHeight","heightChanged","mergedRanges","slice","removeRange","syncDom","afterRemove","afterToggleGroup","afterToggleSubGrid","passthrough","indices","allSelected","fromIndex","toIndex","includes","isSelected","_element$elementData","elementData","_element$elementData2","mergeable","handleEvent","mergedCellsElement","closest","_camelCase$event$type","StringHelper","capitalize","eventData","records","firstElementChild","triggerEvent","toLowerCase","getRowAt","clientY","startEditing","onRangeClick","onStoreChange","onStoreRefresh","createRangeElement","_parent$syncIdMap$syn","_parent$syncIdMap","_parent$releasedIdMap","getSubGridFromColumn","syncId","syncIdMap","releasedIdMap","createRangeDomConfig","DomSync","addChild","_column$mergedRendere","top","left","domConfig","DomClassList","cellCls","assign","autoCls","keepChildren","rowHeight","mergedRenderer","buildMergedCellsConfig","_fromIndex","_rowManager$topRow","_toIndex","_rowManager$bottomRow","topRow","dataIndex","bottomRow","domConfigMap","regions","reduce","updateRange","force","sync","targetElement","syncIdField","onRenderDone","mergedMap","redraw","visibleColumns","c","hadRanges","refreshSuspended","rowCount","boundsMap","bounds","topRendered","bottomRendered","rowOffsetHeight","findIndex","getRowById","rowsAbove","offsetHeight","rowsBelow","earlierRecord","earlierValue","earlierIndex","laterRecord","laterValue","laterIndex","headerBounds","QuickFind","$name","properties","hitCls","hitCellCls","hitCellBadgeCls","hitTextCls","Object","treeWalker","setupTreeWalker","NodeFilter","SHOW_TEXT","FILTER_ACCEPT","focusedCell","isActionable","find","clear","showQuickFind","header","getHeaderElement","headerField","badge","returnAll","mode","colHeader","found","renderListenerInitialized","rendercell","hideQuickFind","hit","prevFound","forceInnerHTML","_content","removeChild","search","columnFieldOrId","getById","findByField","foundMap","findRe","RegExp","escapeRegExp","String","_originalContent","gotoClosestHit","_this$found","foundCount","_this$found$length","_this$found2","gotoHit","nextHit","focusCell","doSelect","focusedIndex","foundSorted","a","b","abs","gotoFirstHit","gotoLastHit","gotoNextHit","_grid$_focusedCell$id","_grid$_focusedCell","_grid$lastFocusedCell","currentId","_focusedCell","lastFocusedCell","gotoPrevHit","_grid$_focusedCell$id2","_grid$_focusedCell2","_grid$lastFocusedCell2","prevHit","_me$foundMap","hitIndex","isQuickHit","inner","currentNode","down","textNode","nextNode","nodeToReplace","textContent","nodeValue","newText","offset","lastIndex","match","exec","preamble","substring","spaceBefore","v","spaceAfter","encodeHtml","insertBefore","createElementFromTemplate","join","fragment","onBackspace","substr","clearSearch","showFilterEditor","onElementKeyPress","_event$key","onCellNavigate","fromCellSelector","toCellSelector","F3","Escape","Backspace","storeRemoveActions","RowExpander","expanderBodyClass","expandedRowClass","recordStateMap","collapsingRecords","console","warn","isGanttBase","fixedRowHeight","addColumn","renderFromRow","changeLoadingIndicatorText","onGridBodyFocusIn","_this$client$lastMous","_this$client$lastMous2","lastMousedownEvent","isAnimating","wasAnimating","changeColumn","has","toggleExpand","hideable","_isAddingExpanderColumn","_expander","columnPosition","insert","onTriggerEvent","collapse","expand","source","delete","refreshOnRecordChange","recordState","isCreated","renderFromRecord","topRecordIndex","topRecord","processRowHeight","_recordState$expander","isRenderingAsync","loadingIndicatorHeight","expanderBodyHeight","expandElements","beforeRenderRow","enableAnimations","waitForTransition","removeExpander","renderExpander","rowElement","getElement","renderLoadingIndicator","lockCellHeight","cellHeight","_shouldScrollIntoView","isInView","once","scrollRowIntoView","onTransitionEnd","property","removeEachSelector","loadingIndicatorText","_row$cells$","renderings","continueRendering","content","expanderElement","addCls","renderResponse","then","Promise","all","_me$renderRowsWithAni","renderRowsWithAnimation","isDestroyed","_row$removeCls","removeCls","unlock","child","Search","configurable","limit","showHitIndex","hitEls","expandNode","onTreeNodeExpand","requestAnimationFrame","reapply","fields","col","formatters","_col$formatValue","isTree","expandTo","prevValue","belongsTo","clearHits","listenersInitialized","asyncEventSuffix","refreshRows","isHitFocused","DomDataStore","silent","_focusedCell$cell","getActiveElement","fromStart","_me$found","fromCell","_me$found2","_cellElement$querySel","querySelector","getSelection","innerText","featureClass","StickyCells","defaultConfig","contentSelector","currentTopRowCls","scroll","reference","removeClasses","renderRows","onGridScroll","contentElement","gridViewport","bodyContainer","roundPx","currentTopRow","topRowChanged","updateStickyContent","notEnoughHeight","scrollable","stickyContentHeight","stickyContentTop","alignTo","stickyEls","constrainTo","lastProcessedTopRow","rowClasses","cellClasses","stickyContent","document","createDocumentFragment","e","eachElement","rowEl","querySelectorAll","firstChild","eTop","offsetTop","alignSelf","cloneNode","syncClassList","TreeCombo","Combo","configure","picker","changePicker","oldPicker","ObjectHelper","disableGridRowModelWarning","multiSelect","rowCheckboxSelection","selection","chipView","itemTpl","xss","overflowX","initClass"],"mappings":"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;AACA;EACQ6E,UAAU,EAAG,KAAK;;AAE1B;AACA;AACA;AACA;AACA;AACA;EACQC,SAAS,EAAG,KAAK;;AAEzB;AACA;AACA;AACA;AACA;AACA;EACQC,QAAQ,EAAG,KAAK;;AAExB;AACA;AACA;AACA;AACA;AACA;EACQC,MAAM,EAAG,KAAK;;AAEtB;AACA;AACA;AACA;AACA;AACA;EACQC,UAAU,EAAG,KAAK;;AAE1B;AACA;AACA;AACA;AACA;AACA;EACQC,UAAU,EAAG,KAAK;;AAE1B;AACA;AACA;AACA;AACA;EACQC,SAAS,EAAG,KAAK;;AAEzB;AACA;AACA;AACA;AACA;EACQC,QAAQ,EAAG;AACf,CAAC;AAyJLC,WAAW,CAACC,kBAAkB,CAACtF,YAAY,CAAC;AAC5CA,YAAY,CAACuF,gBAAgB,EAAE;AAC/BvF,YAAY,CAACwF,MAAM,GAAG,cAAc;;AC7UpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMC,eAAe,SAASC,YAAY,CAAC;;;EAOtD,WAAWC,QAAQA,GAAG;IAClB,OAAO;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYC,QAAQ,EAAG,KAAK;;AAE5B;AACA;AACA;AACA;MACYC,wBAAwB,EAAG;KAC9B;;EAEL1F,SAASA,CAAC2F,IAAI,EAAEC,WAAW,EAAE;IACzB,IAAI,CAACC,eAAe,GAAG,OAAO,IAAIF,IAAI;IACtC,IAAI,CAACG,gBAAgB,GAAG,QAAQ,IAAIH,IAAI;IACxC,KAAK,CAAC3F,SAAS,CAAC,GAAGI,SAAS,CAAC;IAC7B,MAAM;MAAEG;KAAM,GAAGqF,WAAW;;IAE5B,IAAI,IAAI,CAACH,QAAQ,KAAK,KAAK,EAAE;MACzB,IAAI,CAACA,QAAQ,GAAG,aAAa;;IAEjC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ACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACQyC,YAAY,EAAG,IAAI;EACnBkB,QAAQ,EAAI,SAAS;EACrBR,OAAO,EAAK,QAAQ;EACpBM,SAAS,EAAG;AAChB,CAAC;AAyULjG,aAAa,CAACnG,MAAM,GAAG,eAAe;AAAE2M,kBAAkB,CAACC,eAAe,CAACzG,aAAa,CAAC;;ACxezF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAM0G,WAAW,SAASzG,cAAc,CAAC;;;;;EAsBpDzL,SAASA,CAACO,IAAI,EAAEN,MAAM,EAAE;IACpB,KAAK,CAACD,SAAS,CAACO,IAAI,EAAE,IAAI,CAAC4R,aAAa,CAAClS,MAAM,CAAC,CAAC;;EAErDmS,OAAOA,GAAG;IACN,MAAMjS,EAAE,GAAG,IAAI;IACfA,EAAE,CAACkS,GAAG,GAAGxP,OAAO,CAACyP,GAAG,CAAC;MACjBC,UAAU,EAAUpS,EAAE,CAACyL,MAAM,CAAChL,OAAO;MACrC4R,WAAW,EAAS,kEAAkE;MACtFC,UAAU,EAAU,IAAI;MACxBC,UAAU,EAAU,KAAK;MACzB1P,GAAG,EAAiB,mBAAmB;MACvC2P,OAAO,EAAaxS,EAAE,CAACyS,iBAAiB,CAACC,IAAI,CAAC1S,EAAE,CAAC;MACjD2S,iBAAiB,EAAG;QAChBC,WAAW,EAAG,eAAe;QAC7BrS,OAAO,EAAOP;OACjB;MACD6S,SAAS,EAAG7S,EAAE,CAAC8S;KAClB,EAAE9S,EAAE,CAAC+S,aAAa,CAAC;IACpB/S,EAAE,CAACgT,WAAW,CAAChT,EAAE,CAACkS,GAAG,EAAE,CAAC,YAAY,EAA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,kBAaN;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACQ5rB,QAAQ,EAAG,IAAI;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACQsgB,YAAY,EAAG,IAAI;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACQpgB,MAAM,EAAG,EAAG;;AAEpB;AACA;AACA;AACA;AACA;AACA;EACQktB,cAAc,EAAG,OAAO;;AAEhC;AACA;AACA;AACA;AACA;EACQO,qBAAqB,EAAG,KAAK;;AAErC;AACA;AACA;AACA;EACQS,sBAAsB,EAAG,GAAG;;AAEpC;AACA;AACA;AACA;EACQoB,oBAAoB,EAAG,YAAY;;AAE3C;AACA;AACA;AACA;EACQhB,gBAAgB,EAAG;AACvB,CAAC;AAygBL5C,WAAW,CAACvnB,MAAM,GAAG,aAAa;AAAE2M,kBAAkB,CAACC,eAAe,CAAC2a,WAAW,CAAC;;ACtxBnF;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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"}