{"version":3,"file":"Grid.js","sources":["../../../lib/Grid/feature/ColumnAutoWidth.js","../../../lib/Grid/feature/RowCopyPaste.js","../../../lib/Grid/view/Grid.js"],"sourcesContent":["import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\n\nconst storeListenerName = 'store';\n\n/**\n * @module Grid/feature/ColumnAutoWidth\n */\n\n/**\n * Enables the {@link Grid.column.Column#config-autoWidth} config for a grid's columns.\n *\n * This feature is <strong>enabled</strong> by default.\n *\n * @extends Core/mixin/InstancePlugin\n * @mixes Core/mixin/Delayable\n * @classtype columnAutoWidth\n * @feature\n */\nexport default class ColumnAutoWidth extends Delayable(InstancePlugin) {\n    static get $name() {\n        return 'ColumnAutoWidth';\n    }\n\n    //region Config\n\n    static get configurable() {\n        return {\n            /**\n             * The default `autoWidth` option for columns with `autoWidth: true`. This can\n             * be a single number for the minimum column width, or an array of two numbers\n             * for the `[minWidth, maxWidth]`.\n             * @config {Number|Number[]}\n             */\n            default : null,\n\n            /**\n             * The amount of time (in milliseconds) to delay after a store modification\n             * before synchronizing `autoWidth` columns.\n             * @config {Number}\n             * @default\n             */\n            delay : 0\n        };\n    }\n\n    //endregion\n\n    //region Internals\n\n    static get pluginConfig() {\n        return {\n            after : {\n                bindStore        : 'bindStore',\n                unbindStore      : 'unbindStore',\n                renderRows       : 'syncAutoWidthColumns',\n                onInternalResize : 'onInternalResize'\n            },\n\n            assign : [\n                'columnAutoWidthPending',\n                'syncAutoWidthColumns'\n            ]\n        };\n    }\n\n    construct(config) {\n        super.construct(config);\n\n        const { store } = this.client;\n\n        // The initial bindStore can come super early such that our hooks won't catch it:\n        store && this.bindStore(store);\n    }\n\n    doDestroy() {\n        this.unbindStore();\n\n        super.doDestroy();\n    }\n\n    bindStore(store) {\n        this.lastSync = null;\n\n        store.ion({\n            name : storeListenerName,\n\n            [`change${this.client.asyncEventSuffix}`] : 'onStoreChange',\n\n            thisObj : this\n        });\n    }\n\n    unbindStore() {\n        this.detachListeners(storeListenerName);\n    }\n\n    get columnAutoWidthPending() {\n        return this.lastSync === null || this.hasTimeout('syncAutoWidthColumns');\n    }\n\n    onStoreChange({ action }) {\n        if (action !== 'move') {\n            const\n                me           = this,\n                { cellEdit } = me.client.features;\n\n            ++me.storeGeneration;\n\n            // If we are editing, sync right away so cell editing can align correctly to next cell\n            // unless editing is finished/canceled by tapping outside of grid body\n            if (cellEdit?.isEditing && !cellEdit.editingStoppedByTapOutside) {\n                me.syncAutoWidthColumns();\n            }\n            else if (!me.hasTimeout('syncAutoWidthColumns')) {\n                me.setTimeout('syncAutoWidthColumns', me.delay);\n            }\n        }\n    }\n\n    // Handle scenario with Grid being inside DIV with display none, and no width. Sync column widths after being shown\n    onInternalResize(element, newWidth, newHeight, oldWidth) {\n        if (oldWidth === 0) {\n            // Force remeasure after we get a width\n            this.lastSync = null;\n            this.syncAutoWidthColumns();\n        }\n    }\n\n    syncAutoWidthColumns() {\n        const\n            me = this,\n            grid = me.client,\n            storeGeneration = me.storeGeneration;\n\n        if (me.lastSync !== storeGeneration) {\n            me.lastSync = storeGeneration;\n\n            let autoWidth, resizingColumns;\n\n            for (const column of grid.columns.visibleColumns) {\n                autoWidth = column.autoWidth;\n\n                if (autoWidth) {\n                    if (autoWidth === true) {\n                        autoWidth = me.default;\n                    }\n\n                    grid.resizingColumns = resizingColumns = true;\n                    column.resizeToFitContent(autoWidth);\n                }\n            }\n\n            if (resizingColumns) {\n                grid.resizingColumns = false;\n                grid.afterColumnsResized();\n            }\n        }\n\n        if (me.hasTimeout('syncAutoWidthColumns')) {\n            me.clearTimeout('syncAutoWidthColumns');\n        }\n    }\n\n    //endregion\n}\n\nColumnAutoWidth.prototype.storeGeneration = 0;\n\nGridFeatureManager.registerFeature(ColumnAutoWidth, true);\n","import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\n\n/**\n * @module Grid/feature/RowCopyPaste\n */\n\n/**\n * Allow using [Ctrl/CMD + C/X] and [Ctrl/CMD + V] to copy/cut and paste rows. Also makes cut, copy and paste actions\n * available via the cell context menu.\n *\n * You can configure how a newly pasted record is named using {@link #function-generateNewName}\n *\n * This feature is **enabled** by default\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         rowCopyPaste : true\n *     }\n * });\n * ```\n *\n * {@inlineexample Grid/feature/RowCopyPaste.js}\n *\n * This feature will work alongside with CellCopyPaste but there is differences on functionality.\n * * When used together, context menu options will be detailed so the user will know to copy the cell or the row.\n * * They will also detect what type of selection is present at the moment. If there is only rows selected, only row\n *   alternatives are shown in the context menu and the keyboard shortcuts will be processed by RowCopyPaste.\n * * If there is only cells selected, there will be context menu options for both row and cell but keyboard shortcuts\n *   will be handled by CellCopyPaste.\n * * They do not share clipboard, so it is possible to have rows and cells copied or cut at the same time.\n *\n * ## Keyboard shortcuts\n * The feature has the following default keyboard shortcuts:\n *\n * | Keys   | Action | Action description                                                                      |\n * |--------|--------|-----------------------------------------------------------------------------------------|\n * | Ctrl+C | copy   | Calls {@link #function-copyRows} which copies selected row(s) into the clipboard.       |\n * | Ctrl+X | cut    | Calls {@link #function-copyRows} which cuts out selected row(s) and saves in clipboard. |\n * | Ctrl+V | paste  | Calls {@link #function-pasteRows} which inserts copied or cut row(s) from the clipboard.|\n *\n * For more information on how to customize keyboard shortcuts, please see\n * [our guide](#Grid/guides/customization/keymap.md).\n *\n * @extends Core/mixin/InstancePlugin\n * @classtype rowCopyPaste\n * @feature\n */\nexport default class RowCopyPaste extends InstancePlugin {\n\n    static $name = 'RowCopyPaste';\n    static type  = 'rowCopyPaste';\n\n    static pluginConfig = {\n        assign : [\n            'copyRows',\n            'pasteRows'\n        ],\n        chain : [\n            'populateCellMenu'\n        ]\n    };\n\n    static properties = {\n        clipboardRecords : []\n    };\n\n    static configurable = {\n        /**\n         * The field to use as the name field when updating the name of copied records\n         * @config {String}\n         * @default\n         */\n        nameField : 'name',\n\n        /**\n         * See {@link #keyboard-shortcuts Keyboard shortcuts} for details\n         * @config {Object<String,String>}\n         */\n        keyMap : {\n            'Ctrl+C' : 'copy',\n            'Ctrl+X' : 'cut',\n            'Ctrl+V' : 'paste'\n        },\n\n        copyRecordText         : 'L{copyRecord}',\n        cutRecordText          : 'L{cutRecord}',\n        pasteRecordText        : 'L{pasteRecord}',\n        rowSpecifierText       : 'L{row}',\n        rowSpecifierTextPlural : 'L{rows}',\n        localizableProperties  : [\n            'copyRecordText',\n            'cutRecordText',\n            'pasteRecordText',\n            'rowSpecifierText',\n            'rowSpecifierTextPlural'\n        ]\n\n    };\n\n    construct(grid, config) {\n        super.construct(grid, config);\n\n        grid.rowManager.ion({\n            beforeRenderRow : 'onBeforeRenderRow',\n            thisObj         : this\n        });\n\n        this.grid = grid;\n    }\n\n    // Used in events to separate events from different features from each other\n    entityName = 'row';\n\n    onBeforeRenderRow({ row, record }) {\n        row.cls['b-cut-row'] = this._isCut && this.clipboardRecords.includes(record);\n    }\n\n    isActionAvailable(key, action, event) {\n        const\n            { grid }     = this,\n            { cellEdit } = grid.features,\n            { target }   = event;\n        // No action if\n        // 1. there is selected text on the page\n        // 2. cell editing is active\n        // 3. cursor is not in the grid (filter bar etc)\n        return !this.disabled &&\n            globalThis.getSelection().toString().length === 0 &&\n            (!cellEdit || !cellEdit.isEditing) &&\n            grid.selectedRecords?.length > 0 && // No key action when no selected records\n            (!target || Boolean(target.closest('.b-gridbase:not(.b-schedulerbase) .b-grid-subgrid,.b-grid-subgrid:not(.b-timeaxissubgrid)')));\n    }\n\n    copy() {\n        this.copyRows();\n    }\n\n    cut() {\n        this.copyRows(true);\n    }\n\n    paste(referenceRecord) {\n        this.pasteRows(referenceRecord?.isModel ? referenceRecord : null);\n    }\n\n    /**\n     * Copy or cut rows to clipboard to paste later\n     *\n     * @fires beforeCopy\n     * @param {Boolean} [isCut] Copies by default, pass `true` to cut\n     * @category Common\n     * @on-owner\n     */\n    copyRows(isCut = false) {\n        const\n            me                     = this,\n            { client, entityName } = me,\n            // Dont cut readOnly records\n            records                = me.selectedRecords.filter(r => !r.readOnly || !isCut);\n\n        /**\n         * Fires on the owning Grid before a copy action is performed, return `false` to prevent the action\n         * @event beforeCopy\n         * @preventable\n         * @on-owner\n         * @param {Grid.view.Grid} source Owner grid\n         * @param {Core.data.Model[]} records The records about to be copied\n         * @param {Boolean} isCut `true` if this is a cut action\n         * @param {String} entityName 'row' to distinguish this event from other beforeCopy events\n         */\n        if (!records.length || client.readOnly ||\n            client.trigger('beforeCopy', { records, isCut, entityName }) === false\n        ) {\n            return;\n        }\n\n        me._isCut = isCut;\n\n        me.clipboardRecords.forEach(rec => client.rowManager.getRowById(rec)?.removeCls('b-cut-row'));\n\n        me.clipboardRecords = records.slice();\n\n        client.store.forEach(rec => {\n            rec.meta.isCut = me._isCut && me.clipboardRecords.includes(rec);\n        });\n\n        // refresh to call reapply the cls for records where the cut was canceled\n        records.forEach(record => this.onRowCutOrCopy(record, isCut));\n        /**\n         * Fires on the owning Grid after a copy action is performed.\n         * @event copy\n         * @on-owner\n         * @param {Grid.view.Grid} source Owner grid\n         * @param {Core.data.Model[]} records The records that were copied\n         * @param {Boolean} isCut `true` if this is a cut action\n         * @param {String} entityName 'row' to distinguish this event from other copy events\n         */\n        client.trigger('copy', { records, isCut, entityName });\n    }\n\n    onRowCutOrCopy(record, isCut) {\n        this.client.rowManager.getRowById(record)?.toggleCls('b-cut-row', isCut);\n    }\n\n    /**\n     * Paste rows below selected or passed record\n     *\n     * @fires beforePaste\n     * @param {Core.data.Model} [record] Paste below this record, or currently selected record if left out\n     * @category Common\n     * @on-owner\n     */\n    pasteRows(record) {\n        const\n            me                     = this,\n            records                = me.clipboardRecords,\n            { client, entityName } = me, { store }       = client,\n            referenceRecord        = record || client.selectedRecord;\n\n        /**\n         * Fires on the owning Grid before a paste action is performed, return `false` to prevent the action\n         * @event beforePaste\n         * @preventable\n         * @on-owner\n         * @param {Grid.view.Grid} source Owner grid\n         * @param {Core.data.Model} referenceRecord The reference record, the clipboard records will be pasted below\n         * this record\n         * @param {Core.data.Model[]} records The records about to be pasted\n         * @param {Boolean} isCut `true` if this is a cut action\n         * @param {String} entityName 'row' to distinguish this event from other beforePaste events\n         */\n        if (client.readOnly || client.isTreeGrouped || !records.length ||\n            (store.tree && me._isCut && records.some(rec => rec.contains(referenceRecord, true))) || client.trigger('beforePaste', {\n            records, referenceRecord, isCut : me._isCut, entityName\n        }) === false) {\n            return [];\n        }\n\n        // sort selected to move records to make sure it will be added in correct order independent of how it was selected.\n        // Should be done with real records in the clipboard, after records are copied, all indexes will be changed\n        me.sortByIndex(records);\n\n        const\n            idMap            = {},\n            // We need to go over selected records, find all top level nodes and reassemble the tree\n            recordsToProcess = me.extractParents(records, idMap);\n\n        me.insertCopiedRecords(recordsToProcess, referenceRecord);\n\n        if (me._isCut) {\n            // reset clipboard\n            me.clearClipboard();\n        }\n        else {\n            client.selectedRecords = recordsToProcess;\n        }\n\n        /**\n         * Fires on the owning Grid after a paste action is performed.\n         * @event paste\n         * @on-owner\n         * @param {Grid.view.Grid} source Owner grid\n         * @param {Core.data.Model} referenceRecord The reference record, below which the records were pasted\n         * @param {Core.data.Model[]} records Pasted records\n         * @param {Core.data.Model[]} originalRecords For a copy action, these are the records that were copied.\n         * For cut action, this is same as the `records` param.\n         * @param {Boolean} isCut `true` if this is a cut action\n         * @param {String} entityName 'row' to distinguish this event from other paste events\n         */\n        client.trigger('paste', {\n            records         : recordsToProcess,\n            originalRecords : records,\n            isCut           : me._isCut,\n            referenceRecord,\n            entityName\n        });\n\n        // Focus first cell of last copied or cut row\n        client.getRowFor(recordsToProcess[recordsToProcess.length - 1])?.cells?.[0].focus();\n\n        return recordsToProcess;\n    }\n\n    /**\n     * Clears the clipboard and refreshes the UI\n     *\n     * @category Common\n     */\n    clearClipboard() {\n        if (this._isCut) {\n            this.clipboardRecords.forEach(rec => this.client.rowManager.getRowById(rec)?.removeCls('b-cut-row'));\n        }\n        this._isCut           = false;\n        this.clipboardRecords = [];\n    }\n\n    /**\n     * A method used to generate the name for a copy-pasted record. By defaults appends \"- 2\", \"- 3\" as a suffix. Override\n     * it to provide your own naming of pasted records.\n     *\n     * @param {Core.data.Model} record The new record being pasted\n     * @returns {String}\n     */\n    generateNewName(record) {\n        const originalName = record[this.nameField];\n\n        let counter = 2;\n\n        while (this.client.store.findRecord(this.nameField, `${originalName} - ${counter}`)) {\n            counter++;\n        }\n\n        return `${originalName} - ${counter}`;\n    }\n\n    insertCopiedRecords(toInsert, recordReference) {\n        const\n            { store } = this.client,\n            insertAt  = store.indexOf(recordReference) + 1;\n\n        if (store.tree) {\n            return recordReference.parent.insertChild(toInsert, recordReference.nextSibling, false, {\n                // Specify node to insert before in the ordered tree. It allows to paste to a\n                // correct place both ordered and visual.\n                // Covered by TaskOrderedWbs.t.js\n                orderedBeforeNode : recordReference.nextOrderedSibling\n            });\n        }\n        else if (this._isCut) {\n            store.move(toInsert, store.getAt(insertAt));\n        }\n        else {\n            return store.insert(insertAt, toInsert);\n        }\n    }\n\n    get selectedRecords() {\n        const records = [...this.client.selectedRecords];\n\n        // Add eventual selected cells records\n        this.client.selectedCells.forEach(cell => {\n            if (!records.includes(cell.record)) {\n                records.push(cell.record);\n            }\n        });\n\n        return records;\n    }\n\n    getMenuItemText(action) {\n        const me = this;\n        let text = me[action + 'RecordText'];\n\n        // If cellCopyPaste is enabled and there is selected cells, add a row specifier text to menu options\n        if (me.client.features.cellCopyPaste?.enabled === true && me.client.selectedCells.length) {\n            text += ` (${me.selectedRecords.length > 1 ? me.rowSpecifierTextPlural : me.rowSpecifierText})`;\n        }\n\n        return text;\n    }\n\n    populateCellMenu({ record, items }) {\n        const\n            me         = this,\n            { client } = me;\n\n        if (!client.readOnly &&\n            !client.isTreeGrouped &&\n            record?.isSpecialRow === false &&\n            me.selectedRecords.length\n        ) {\n            items.cut = {\n                text        : me.getMenuItemText('cut'),\n                localeClass : me,\n                icon        : 'b-icon b-icon-cut',\n                weight      : 135,\n                disabled    : record.readOnly,\n                onItem      : () => me.cut()\n            };\n\n            items.copy = {\n                text        : me.getMenuItemText('copy'),\n                localeClass : me,\n                cls         : 'b-separator',\n                icon        : 'b-icon b-icon-copy',\n                weight      : 120,\n                onItem      : () => me.copy()\n            };\n\n            items.paste = {\n                text        : me.getMenuItemText('paste'),\n                localeClass : me,\n                icon        : 'b-icon b-icon-paste',\n                weight      : 140,\n                disabled    : !me.clipboardRecords.length,\n                onItem      : () => me.paste(record)\n            };\n        }\n    }\n\n    /**\n     * Sort array of records ASC by its indexes stored in indexPath\n     * @param {Core.data.Model[]} array array to sort\n     * @private\n     */\n    sortByIndex(array) {\n        const { store } = this.client;\n\n        return array.sort((rec1, rec2) => {\n            const\n                idx1 = rec1.indexPath,\n                idx2 = rec2.indexPath;\n\n            // When a record is copied without its parent, its index in the visible tree should be used\n            if (!array.includes(rec1.parent) && !array.includes(rec2.parent)) {\n                // For row copy-paste feature both records are normally in store. Unless someone wants\n                // to include invisible records. Which does not happen yet.\n                return store.indexOf(rec1) - store.indexOf(rec2);\n            }\n\n            if (idx1.length === idx2.length) {\n                for (let i = 0; i < idx1.length; i++) {\n                    if (idx1[i] < idx2[i]) {\n                        return -1;\n                    }\n                    if (idx1[i] > idx2[i]) {\n                        return 1;\n                    }\n                }\n                return 0;\n            }\n            else {\n                return idx1.length - idx2.length;\n            }\n        });\n    }\n\n    /**\n     * Iterates over passed pre-sorted list of records and reassembles hierarchy of records.\n     * @param {Core.data.Model[]} taskRecords array of records to extract parents from\n     * @param {Object} idMap Empty object which will contain map linking original id with copied record\n     * @returns {Core.data.Model[]} Returns array of new top-level nodes with children filled\n     * @private\n     */\n    extractParents(taskRecords, idMap) {\n        const\n            me                         = this,\n            { client, _isCut : isCut } = me;\n\n        // Unwrap children to pass them all through `generateNewName` function\n        if (client.store.tree) {\n            taskRecords.forEach(node => {\n                node.traverse(n => {\n                    const parents = n.getTopParent(true);\n                    if (!taskRecords.includes(n) && (!isCut || !taskRecords.some(rec => parents.includes(rec)))) {\n                        taskRecords.push(n);\n                    }\n                });\n            });\n        }\n\n        const result = taskRecords.reduce((parents, node) => {\n            let copy;\n            // Fallback is for when the node was removed from the tree\n            const parentId = node.parentId || node.meta.modified;\n\n            if (isCut) {\n                copy = node;\n\n                // reset record cut state\n                copy.meta.isCut = false;\n            }\n            else {\n                copy               = node.copy();\n                copy[me.nameField] = me.generateNewName(copy);\n\n                if (node.expanded) {\n                    copy.data.expanded = node.expanded;\n                }\n            }\n\n            idMap[node.id] = copy;\n\n            // If we're copying top level node, add it directly\n            if (node.parent === client.store.rootNode) {\n                parents.push(copy);\n            }\n            // If node parent is also copied, append copy to the copied parent. Parents\n            // are always at the beginning of the array, so we know if there is a parent\n            // it was already copied\n            else if (parentId in idMap) {\n                idMap[parentId].appendChild(copy);\n            }\n            // If parent is not copied and record is not top level, then append it as a\n            // sibling.\n            else {\n                parents.push(copy);\n            }\n            return parents;\n        }, []);\n\n        // Now when tree is assembled we want to restore ordered tree. Traverse the tree, sort children\n        // by previous value of `orderedParentIndex`\n        result.forEach(parent => {\n            parent.sortOrderedChildren(true, true);\n        });\n\n        return result;\n    }\n\n}\n\nRowCopyPaste.featureClass = 'b-row-copypaste';\n\nGridFeatureManager.registerFeature(RowCopyPaste, true, 'Grid');\nGridFeatureManager.registerFeature(RowCopyPaste, false, 'Gantt');\nGridFeatureManager.registerFeature(RowCopyPaste, false, 'SchedulerPro');\nGridFeatureManager.registerFeature(RowCopyPaste, false, 'ResourceHistogram');\n","//region Import\n\nimport GridBase from './GridBase.js';\n\n// import default features (might be able to skip this when draft on dynamic import is implemented)\nimport '../feature/CellEdit.js';\nimport '../feature/CellMenu.js';\nimport '../feature/ColumnAutoWidth.js';\nimport '../feature/ColumnDragToolbar.js';\nimport '../feature/ColumnPicker.js';\nimport '../feature/ColumnReorder.js';\nimport '../feature/ColumnResize.js';\nimport '../feature/Filter.js';\nimport '../feature/FilterBar.js';\nimport '../feature/Group.js';\nimport '../feature/HeaderMenu.js';\nimport '../feature/RowCopyPaste.js';\nimport '../feature/Sort.js';\nimport '../feature/Stripe.js';\n\n// To enable using checkbox selection mode, moved here to not be dragged into GridBase automatically\nimport '../column/CheckColumn.js';\n\n//endregion\n\n/**\n * @module Grid/view/Grid\n */\n\n/**\n * The Grid component is a very powerful and performant UI component that shows tabular data (or tree data using the\n * {@link Grid.view.TreeGrid}).\n *\n * <h2>Intro</h2>\n * The Grid widget has a wide range of features and a large API to allow users to work with data efficiently in the\n * browser. The two most important configs are {@link #config-store} and {@link #config-columns}. With the store config,\n * you decide which data to load into the grid. You can work with both in-memory arrays or load data using ajax. See the\n * {@link Core.data.Store} class to learn more about loading data into stores.\n *\n * The columns config accepts an array of {@link Grid.column.Column Column} descriptors defining which fields that will\n * be displayed in the grid. The {@link Grid.column.Column#config-field} property in the column descriptor maps to a\n * field in your dataset. The simplest grid configured with inline data and two columns would look like this:\n *\n * {@frameworktabs}\n * {@js}\n * ```javascript\n *  const grid = new Grid({\n *       appendTo : document.body,\n *\n *       columns: [\n *           { field: 'name', text: 'Name' },\n *           { field: 'job', text: 'Job', renderer: ({value}) => value || 'Unemployed' }\n *       ],\n *\n *       data: [\n *           { name: 'Bill', job: 'Retired' },\n *           { name: 'Elon', job: 'Visionary' },\n *           { name: 'Me' }\n *       ]\n * });\n * ```\n * {@endjs}\n * {@react}\n * ```jsx\n * const App = props => {\n *     const [columns, setColumns] = useState([\n *          { field: 'name', text: 'Name' },\n *          { field: 'job', text: 'Job', renderer: ({value}) => value || 'Unemployed' }\n *     ]);\n *\n *     const [data, setData] = useState([\n *          { name: 'Bill', job: 'Retired' },\n *          { name: 'Elon', job: 'Visionary' },\n *          { name: 'Me' }\n *     ]);\n *\n *     return <BryntumGrid column={columns} data={data} />\n * }\n * ```\n * {@endreact}\n * {@vue}\n * ```html\n * <bryntum-grid :columns=\"columns\" :data=\"data\" />\n * ```\n * ```javascript\n * export default {\n *    setup() {\n *      return {\n *        columns : [\n *          { field: 'name', text: 'Name' },\n *          { field: 'job', text: 'Job', renderer: ({value}) => value || 'Unemployed' }\n *        ]\n *        data : reactive([\n *          { name: 'Bill', job: 'Retired' },\n *          { name: 'Elon', job: 'Visionary' },\n *          { name: 'Me' }\n *        ])\n *      };\n *    }\n * }\n * ```\n * {@endvue}\n * {@angular}\n * ```html\n * <bryntum-grid [columns]=\"columns\" [data]=\"data\"></bryntum-grid>\n * ```\n * ```typescript\n * export class AppComponent {\n *      columns = [\n *          { field: 'name', text: 'Name' },\n *          { field: 'job', text: 'Job', renderer: ({value}) => value || 'Unemployed' }\n *      ]\n *\n *      data = [\n *          { name: 'Bill', job: 'Retired' },\n *          { name: 'Elon', job: 'Visionary' },\n *          { name: 'Me' }\n *      ]\n *  }\n * ```\n * {@endangular}\n * {@endframeworktabs}\n *\n * {@inlineexample Grid/view/Grid.js}\n *\n * <h2>Features</h2>\n * To avoid the Grid core being bloated, its main features are implemented in separate `feature` classes. These can be\n * turned on and off based on your requirements. To configure (or disable) a feature, use the {@link #config-features}\n * object to provide your desired configuration for the features you want to use. Each feature has an ´id´ that you use\n * as a key in the features object:\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         cellEdit     : false,\n *         regionResize : true,\n *         cellTooltip  : {\n *             tooltipRenderer : (data) => {\n *             }\n *         },\n *         ...\n *     }\n * });\n * ```\n *\n * {@region Column configuration options}\n * A grid contains a number of columns that control how your data is rendered. The simplest option is to simply point a\n * Column to a field in your dataset, or define a custom {@link Grid.column.Column#config-renderer}. The renderer\n * function receives one object parameter containing rendering data for the current cell being rendered.\n *\n * ```javascript\n * const grid = new Grid({\n *     columns: [\n *         {\n *             field: 'task',\n *             text: 'Task',\n *             renderer(renderData) {\n *                 const record = renderData.record;\n *\n *                 if (record.percentDone === 100) {\n *                     renderData.cellElement.classList.add('taskDone');\n *                     renderData.cellElement.style.background = 'green';\n *                 }\n *\n *                 return renderData.value;\n *             }\n *         }\n *     ]\n * });\n * ```\n *\n * {@endregion}\n * {@region Grid sections (aka \"locked\" or \"frozen\" columns)}\n * The grid can be divided horizontally into individually scrollable sections. This is great if you have lots of columns\n * that don't fit the available width of the screen. To enable this feature, simply mark the columns you want to `lock`.\n * Locked columns are then displayed in their own section to the left of the other columns:\n *\n * ```javascript\n * const grid = new Grid({\n *     width    : 500,\n *     subGridConfigs : {\n *         // set a fixed locked section width if desired\n *         locked : { width: 300 }\n *     },\n *     columns : [\n *         { field : 'name', text : 'Name', width : 200, locked : true },\n *         { field : 'firstName', text : 'First name', width : 100, locked : true },\n *         { field : 'surName', text : 'Last name', width : 100, locked : true },\n *         { field : 'city', text : 'City', width : 100 },\n *         { type : 'number', field : 'age', text : 'Age', width : 200 },\n *         { field : 'food', text : 'Food', width : 200 }\n *     ]\n * });\n * ```\n *\n * {@inlineexample Grid/view/LockedGrid.js}\n * You can also move columns between sections by using drag and drop, or use the built-in header context menu. If you\n * want to be able to resize the locked grid section, enable the {@link Grid.feature.RegionResize} feature.\n * {@endregion}\n * {@region Filtering}\n * One important requirement of a good Grid component is the ability to filter large datasets to quickly find what you\n * are looking for. To enable filtering (through the context menu), add the {@link Grid.feature.Filter} feature:\n *\n * ```javascript\n * const grid = new Grid({\n *     features: {\n *         filter: true\n *     }\n * });\n * ```\n *\n * Or activate a default filter at initial rendering:\n *\n * ```javascript\n * const grid = new Grid({\n *     features: {\n *         filter: { property : 'city', value : 'New York' }\n *     }\n * });\n * ```\n *\n * {@inlineexample Grid/feature/Filter.js}\n * {@endregion}\n * {@region Tooltips}\n * If you have a data models with many fields, and you want to show\n * additional data when hovering over a cell, use the {@link Grid.feature.CellTooltip} feature. To show a\n * tooltip for all cells:\n *\n * ```javascript\n * const grid = new Grid({\n *     features: {\n *         cellTooltip: ({value}) => value\n *     }\n * });\n * ```\n *\n * {@inlineexample Grid/feature/CellTooltip.js}\n * {@endregion}\n * {@region Inline Editing (default <strong>on</strong>)}\n * To enable inline cell editing in the grid, simply add the {@link Grid.feature.CellEdit} feature:\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         cellEdit : true\n *     },\n *     columns: [\n *         {\n *             field: 'task',\n *             text: 'Task'\n *         }\n *     ]\n * });\n * ```\n *\n * {@inlineexample Grid/feature/CellEdit.js}\n * {@endregion}\n * {@region Context Menu}\n * Use {@link Grid.feature.CellMenu} and {@link Grid.feature.HeaderMenu} features if you want your users to be able to\n * interact with the data through the context menu:\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         headerMenu : {\n *             items : {\n *                 showInfo : {\n *                     text   : 'Show info',\n *                     icon   : 'fa fa-info-circle',\n *                     weight : 200,\n *                     onItem : ({ item }) => console.log(item.text)\n *                 }\n *             }\n *         },\n *         cellMenu :  {\n *             items : {\n *                 showOptions : {\n *                     text   : 'Show options',\n *                     icon   : 'fa fa-gear',\n *                     weight : 200\n *                 }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * {@inlineexample Grid/feature/CellMenu.js}\n * {@endregion}\n * {@region Grouping}\n * To group rows by a field in your dataset, use the {@link Grid.feature.Group} feature.\n * {@inlineexample Grid/feature/Group.js}\n * {@endregion}\n * {@region Searching}\n * When working with lots of data, a quick alternative to filtering is the {@link Grid.feature.Search} feature.\n * It highlights matching values in the grid as you type.\n * {@inlineexample Grid/feature/Search2.js}\n * {@endregion}\n * {@region Loading and saving data}\n * The grid keeps all its data in a {@link Core.data.Store}, which is essentially an Array of {@link Core.data.Model}\n * items. You define your own Model representing your data entities and use the Model API to get and set values.\n *\n * ```javascript\n * class Person extends Model {}\n *\n * const person = new Person({\n *     name: 'Steve',\n *     age: 38\n * });\n *\n * person.name = 'Linda'; // person object is now `dirty`\n *\n * const store = new Store({\n *     data : [\n *         { name : 'Don', age : 40 }\n *     ]\n * });\n *\n * store.add(person);\n *\n * console.log(store.count()); // === 2\n *\n * store.remove(person); // Remove from store\n * ```\n *\n * When you update a record in a store, it's considered dirty, until you call {@link Core.data.mixin.StoreCRUD#function-commit}\n * on the containing Store. You can also configure your Store to commit automatically (like Google docs). If you use an\n * AjaxStore, it will send changes to your server when commit is called.\n *\n * Any changes you make to the Store or its records are immediately reflected in the Grid, so there is no need to tell\n * it to refresh manually.\n *\n * To create a custom load mask, subscribe to the grid's store events and {@link Core.widget.Widget#config-masked mask}\n * on {@link Core.data.AjaxStore#event-beforeRequest} and unmask on {@link Core.data.AjaxStore#event-afterRequest}. The\n * mask can also be used to display error messages if an {@link Core.data.AjaxStore#event-exception} occurs.\n *\n * ```javascript\n *  const grid = new Grid({\n *      loadMask : null\n *  });\n *\n *  grid.store.on({\n *      beforeRequest() {\n *          grid.masked = {\n *              text : 'Data is loading...'\n *          };\n *      },\n *      afterRequest() {\n *          grid.masked = null;\n *      },\n *      exception({ response }) {\n *          grid.masked.error = response.message || 'Load failed';\n *      }\n *  });\n *\n *  store.load();\n * ```\n *\n * To learn more about loading and saving data, please refer to [this guide](#Grid/guides/data/displayingdata.md).\n * {@endregion}\n * {@region Default configs}\n * There is a myriad of configs and features available for Grid, some of them on by default and some of them requiring\n * extra configuration. The code below tries to illustrate the major things that are used by default:\n *\n * ```javascript\n * const grid = new Grid({\n *    // The following features are enabled by default:\n *    features : {\n *        cellEdit      : true,\n *        columnPicker  : true,\n *        columnReorder : true,\n *        columnResize  : true,\n *        cellMenu      : true,\n *        headerMenu    : true,\n *        group         : true,\n *        rowCopyPaste  : true, // Allow using [Ctrl/CMD + C/X] and [Ctrl/CMD + V] to copy/cut and paste rows\n *        sort          : true\n *    },\n *\n *    animateRemovingRows       : true,  // Rows will slide out on removal\n *    autoHeight                : false, // Grid needs to have a height supplied through CSS (strongly recommended) or by specifying `height`\n *    columnLines               : true,  // Themes might override it to hide lines anyway\n *    emptyText                 : 'No rows to display',\n *    enableTextSelection       : false, // Not allowed to select text in cells by default,\n *    fillLastColumn            : true,  // By default the last column is stretched to fill the grid\n *    fullRowRefresh            : true,  // Refreshes entire row when a cell value changes\n *    loadMask                  : 'Loading...',\n *    resizeToFitIncludesHeader : true,  // Also measure header when auto resizing columns\n *    responsiveLevels : {\n *      small : 400,\n *      medium : 600,\n *      large : '*'\n *    },\n *    rowHeight                  : null,  // Determined using CSS, it will measure rowHeight\n *    showDirty                  : false, // No indicator for changed cells\n * });\n * ```\n * {@endregion}\n * {@region Keyboard shortcuts}\n * Grid has the following default keyboard shortcuts:\n *\n * | Keys             | Action               | Weight ¹ | Action description                                                                                 |\n * |------------------|----------------------|----------|----------------------------------------------------------------------------------------------------|\n * | ArrowUp          | navigateUp           | 10       | Focuses the cell above currently focused cell.                                                     |\n * | ArrowRight       | navigateRight        | 10       | Focuses the cell to the right of currently focused cell                                            |\n * | ArrowDown        | navigateDown         | 10       | Focuses the cell below currently focused cell                                                      |\n * | ArrowLeft        | navigateLeft         | 10       | Focuses the cell to the left of currently focused cell                                             |\n * | Shift+ArrowUp    | extendSelectionUp    |          | Extends the selection one row up from currently focused cell                                       |\n * | Shift+ArrowRight | extendSelectionRight |          | Extends the selection one column to the right from currently focused cell                          |\n * | Shift+ArrowDown  | extendSelectionDown  |          | Extends the selection one row down from currently focused cell                                     |\n * | Shift+ArrowLeft  | extendSelectionLeft  |          | Extends the selection one column to the left from currently focused cell                           |\n * | Space            | toggleSelection      | 10       | Toggles selection of currently focused cell if selectionMode.selectOnKeyboardNavigation is `false` |\n * | Ctrl+Home        | navigateFirstCell    |          | Focuses the first cell at the first row (including header)                                         |\n * | Home             | navigateFirstColumn  |          | Focuses the first cell of current focused row                                                      |\n * | Ctrl+End         | navigateLastCell     |          | Focuses the last cell of the last row                                                              |\n * | End              | navigateLastColumn   |          | Focuses the last cell of current focused row                                                       |\n * | PageUp           | navigatePrevPage     |          | Displays previous page                                                                             |\n * | PageDown         | navigateNextPage     |          | Displays next page                                                                                 |\n * | Enter            | activateHeader       |          | Equals to a header click                                                                           |\n * | Space            | clickCellByKey       | 1000     | Equals to a cell click                                                                             |\n * | Ctrl+z           | undoRedoKeyPress     |          | Undo/redo (when using {@link Core.data.stm.StateTrackingManager})                                  |\n * | Ctrl+Shift+z ²   | undoRedoKeyPress     |          | Undo/redo (when using {@link Core.data.stm.StateTrackingManager})                                  |\n *\n * **¹** Customization of keyboard shortcuts that has a `weight` should only be performed by advanced users.\n *\n * The following Grid features has their own keyboard shortcuts. Follow the links for details.\n * * {@link Grid.feature.CellCopyPaste#keyboard-shortcuts CellCopyPaste}\n * * {@link Grid.feature.CellEdit#keyboard-shortcuts CellEdit}\n * * {@link Grid.feature.CellMenu#keyboard-shortcuts CellMenu}\n * * {@link Grid.feature.ColumnRename#keyboard-shortcuts ColumnRename}\n * * {@link Grid.feature.Filter#keyboard-shortcuts Filter}\n * * {@link Grid.feature.Group#keyboard-shortcuts Group}\n * * {@link Grid.feature.HeaderMenu#keyboard-shortcuts HeaderMenu}\n * * {@link Grid.feature.QuickFind#keyboard-shortcuts QuickFind}\n * * {@link Grid.feature.CellCopyPaste#keyboard-shortcuts CellCopyPaste}\n * * {@link Grid.feature.RowCopyPaste#keyboard-shortcuts RowCopyPaste}\n * * {@link Grid.feature.Search#keyboard-shortcuts Search}\n * * {@link Grid.feature.Tree#keyboard-shortcuts Tree}\n *\n * For more information on how to customize keyboard shortcuts, please see\n * [our guide](#Grid/guides/customization/keymap.md)\n *\n * {@endregion}\n * {@region Performance}\n * In general the Grid widget has very good performance and you can try loading any amount of data in the\n * <a target=\"_blank\" href=\"../examples/bigdataset/\">bigdataset</a> demo.\n * The overall rendering performance is naturally affected by many other things than the data volume. Other important\n * factors that can impact performance: number of columns, complex cell renderers, locked columns, the number of\n * features enabled and of course the browser (Chrome fastest).\n * {@endregion}\n * {@region Accessibility}\n * As far as possible, the grid is accessible to WAI-ARIA standards. Every cell, including column header cells is\n * visitable. The arrow keys navigate, and if a cell contains focusable content, navigating to that cell focuses the\n * content. `Escape` will exit from that and focus the encapsulating cell.\n *\n * When tabbing back into a grid that has previously been entered, focus moves to the last focused cell.\n *\n * The column menu is invoked using the `Space` key when focused on a column header.\n *\n * The cell menu is invoked using the `Space` key when focused on a data cell.\n * {@endregion}\n *\n * @extends Grid/view/GridBase\n * @classType grid\n * @widget\n */\nexport default class Grid extends GridBase {\n    static get $name() {\n        return 'Grid';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'grid';\n    }\n}\n\n// Register this widget type with its Factory\nGrid.initClass();\n"],"names":["storeListenerName","ColumnAutoWidth","Delayable","InstancePlugin","$name","configurable","default","delay","pluginConfig","after","bindStore","unbindStore","renderRows","onInternalResize","assign","construct","config","store","client","doDestroy","lastSync","ion","name","asyncEventSuffix","thisObj","detachListeners","columnAutoWidthPending","hasTimeout","onStoreChange","action","me","cellEdit","features","storeGeneration","isEditing","editingStoppedByTapOutside","syncAutoWidthColumns","setTimeout","element","newWidth","newHeight","oldWidth","grid","autoWidth","resizingColumns","column","columns","visibleColumns","resizeToFitContent","afterColumnsResized","clearTimeout","prototype","_$name","GridFeatureManager","registerFeature","RowCopyPaste","constructor","args","_defineProperty","rowManager","beforeRenderRow","onBeforeRenderRow","row","record","cls","_isCut","clipboardRecords","includes","isActionAvailable","key","event","_grid$selectedRecords","target","disabled","globalThis","getSelection","toString","length","selectedRecords","Boolean","closest","copy","copyRows","cut","paste","referenceRecord","pasteRows","isModel","isCut","entityName","records","filter","r","readOnly","trigger","forEach","rec","_client$rowManager$ge","getRowById","removeCls","slice","meta","onRowCutOrCopy","_this$client$rowManag","toggleCls","_client$getRowFor","_client$getRowFor$cel","selectedRecord","isTreeGrouped","tree","some","contains","sortByIndex","idMap","recordsToProcess","extractParents","insertCopiedRecords","clearClipboard","originalRecords","getRowFor","cells","focus","_this$client$rowManag2","generateNewName","originalName","nameField","counter","findRecord","toInsert","recordReference","insertAt","indexOf","parent","insertChild","nextSibling","orderedBeforeNode","nextOrderedSibling","move","getAt","insert","selectedCells","cell","push","getMenuItemText","_me$client$features$c","text","cellCopyPaste","enabled","rowSpecifierTextPlural","rowSpecifierText","populateCellMenu","items","isSpecialRow","localeClass","icon","weight","onItem","array","sort","rec1","rec2","idx1","indexPath","idx2","i","taskRecords","node","traverse","n","parents","getTopParent","result","reduce","parentId","modified","expanded","data","id","rootNode","appendChild","sortOrderedChildren","chain","keyMap","copyRecordText","cutRecordText","pasteRecordText","localizableProperties","featureClass","Grid","GridBase","type","initClass"],"mappings":"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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMqI,IAAI,SAASC,QAAQ,CAAC;EACvC,WAAWzL,KAAKA,GAAG;IACf,OAAO,MAAM;;;EAGjB,WAAW0L,IAAIA,GAAG;IACd,OAAO,MAAM;;AAErB;AACA;AACAF,IAAI,CAACG,SAAS,EAAE;AAChBH,IAAI,CAACxI,MAAM,GAAG,MAAM;;;;"}