{"version":3,"file":"TreeGroup.js","sources":["../../../lib/Grid/feature/RowReorder.js","../../../lib/Grid/feature/TreeGroup.js"],"sourcesContent":["/**\n * @module Grid/feature/RowReorder\n */\n\nimport GridFeatureManager from './GridFeatureManager.js';\nimport DragHelper from '../../Core/helper/DragHelper.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\n\n/**\n * Object with information about a tree position\n * @typedef {Object} RecordPositionContext\n * @property {Core.data.Model} record Tree node\n * @property {Number} parentIndex Index among parents children\n * @property {String|Number} parentId Parent node's id\n */\n\n/**\n * Allows user to reorder rows by dragging them. To get notified about row reorder listen to `change` event\n * on the grid {@link Core.data.Store store}.\n *\n * This feature is **off** by default. For info on enabling it, see {@link Grid.view.mixin.GridFeatures}.\n * This feature is **enabled** by default for Gantt.\n *\n * {@inlineexample Grid/feature/RowReorder.js}\n *\n * If the grid is set to {@link Grid.view.Grid#config-readOnly}, reordering is disabled. Inside all event listeners you\n * have access a `context` object which has a `record` property (the dragged record).\n *\n * ## Validation\n * You can validate the drag drop flow by listening to the `gridrowdrag` event. Inside this listener you have access to\n * the `index` property which is the target drop position. For trees you get access to the `parent` record and `index`,\n * where index means the child index inside the parent.\n *\n * You can also have an async finalization step using the {@link #event-gridRowBeforeDropFinalize}, for showing a\n * confirmation dialog or making a network request to decide if drag operation is valid (see code snippet below)\n *\n * ```javascript\n * features : {\n *     rowReorder : {\n *         listeners : {\n *             gridRowDrag : ({ context }) => {\n *                // Here you have access to context.insertBefore, and additionally context.parent for trees\n *             },\n *\n *             gridRowBeforeDropFinalize : async ({ context }) => {\n *                const result = await MessageDialog.confirm({\n *                    title   : 'Please confirm',\n *                    message : 'Did you want the row here?'\n *                });\n *\n *                // true to accept the drop or false to reject\n *                return result === MessageDialog.yesButton;\n *             }\n *         }\n *     }\n * }\n * ```\n *\n * Note, that this feature uses the concept of \"insert before\" when choosing a drop point in the data. So the dropped\n * record's position is *before the visual next record's position*.\n *\n * This may look like a pointless distinction, but consider the case when a Store is filtered. The record *above* the\n * drop point may have several filtered out records below it. When unfiltered, the dropped record will be *below* these\n * because of the \"insert before\" behaviour.\n *\n * ## Behavior with multiple subgrids\n *\n * For grids with multiple subgrids, row reordering is only enabled for the first subgrid.\n *\n * NOTE: This feature cannot be used simultaneously with the `enableTextSelection` config.\n *\n * @extends Core/mixin/InstancePlugin\n * @demo Grid/rowreordering\n * @classtype rowReorder\n * @feature\n */\nexport default class RowReorder extends Delayable(InstancePlugin) {\n    //region Events\n    /**\n     * Fired before dragging starts, return false to prevent the drag operation.\n     * @preventable\n     * @event gridRowBeforeDragStart\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {Core.data.Model[]} context.records The dragged row records\n     * @param {MouseEvent|TouchEvent} event\n     */\n\n    /**\n     * Fired when dragging starts.\n     * @event gridRowDragStart\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {Core.data.Model[]} context.records The dragged row records\n     * @param {MouseEvent|TouchEvent} event\n     */\n\n    /**\n     * Fired while the row is being dragged, in the listener function you have access to `context.insertBefore` a grid /\n     * tree record, and additionally `context.parent` (a TreeNode) for trees. You can signal that the drop position is\n     * valid or invalid by setting `context.valid = false;`\n     * @event gridRowDrag\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {Boolean} context.valid Set this to true or false to indicate whether the drop position is valid.\n     * @param {Core.data.Model} context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)\n     * @param {Core.data.Model} context.parent The parent record of the current drop position (only applicable for trees)\n     * @param {Core.data.Model[]} context.records The dragged row records\n     * @param {MouseEvent} event\n     */\n\n    /**\n     * Fired before the row drop operation is finalized. You can return false to abort the drop operation, or a\n     * Promise yielding `true` / `false` which allows for asynchronous abort (e.g. first show user a confirmation dialog).\n     * @event gridRowBeforeDropFinalize\n     * @preventable\n     * @async\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {Boolean} context.valid Set this to true or false to indicate whether the drop position is valid\n     * @param {Core.data.Model} context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)\n     * @param {Core.data.Model} context.parent The parent record of the current drop position (only applicable for trees)\n     * @param {Core.data.Model[]} context.records The dragged row records\n     * @param {RecordPositionContext[]} context.oldPositionContext An array of objects with information about the previous tree position.\n     * Objects contain the `record`, and its original `parentIndex` and `parentId` values\n     * @param {MouseEvent} event\n     */\n\n    /**\n     * Fired after the row drop operation has completed, regardless of validity\n     * @event gridRowDrop\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {Boolean} context.valid true or false depending on whether the drop position was valid\n     * @param {Core.data.Model} context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)\n     * @param {Core.data.Model} context.parent The parent record of the current drop position (only applicable for trees)\n     * @param {Core.data.Model} context.record [DEPRECATED] The dragged row record\n     * @param {Core.data.Model[]} context.records The dragged row records\n     * @param {RecordPositionContext[]} context.oldPositionContext An array of objects with information about the previous tree position.\n     * Objects contain the record, and its original `parentIndex` and `parentId` values\n     * @param {MouseEvent} event\n     */\n\n    /**\n     * Fired when a row drag operation is aborted\n     * @event gridRowAbort\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {MouseEvent} event\n     */\n    //endregion\n\n    //region Init\n\n    static $name = 'RowReorder';\n\n    static configurable = {\n        /**\n         * Set to `true` to show a grip icon on the left side of each row.\n         * @config {Boolean}\n         */\n        showGrip : null,\n\n        /**\n         * Set to `true` to only allow reordering by the {@link #config-showGrip} config\n         * @config {Boolean}\n         */\n        gripOnly : null,\n\n        /**\n         * If hovering over a parent node for this period of a time in a tree, the node will expand\n         * @config {Number}\n         */\n        hoverExpandTimeout : 1000,\n\n        /**\n         * The amount of milliseconds to wait after a touchstart, before a drag gesture will be allowed to start.\n         * @config {Number}\n         * @default\n         */\n        touchStartDelay : 300,\n\n        /**\n         * Enables creation of parents by dragging a row and dropping it onto a leaf row. Only works in a Grid with\n         * a tree store.\n         * @config {Boolean}\n         */\n        dropOnLeaf : false,\n\n        /**\n         * An object used to configure the internal {@link Core.helper.DragHelper} class\n         * @config {DragHelperConfig}\n         */\n        dragHelperConfig : null\n    };\n\n    construct(grid, config) {\n        this.grid = grid;\n\n        super.construct(...arguments);\n    }\n\n    doDestroy() {\n        this.dragHelper?.destroy();\n\n        super.doDestroy();\n    }\n\n    /**\n     * Initialize drag & drop (called on first paint)\n     * @private\n     */\n    init() {\n        const\n            me       = this,\n            { grid } = me;\n\n        me.dragHelper = DragHelper.new({\n            name               : 'rowReorder',\n            cloneTarget        : true,\n            dragThreshold      : 10,\n            proxyTopOffset     : 10,\n            targetSelector     : '.b-grid-row',\n            lockX              : true,\n            dragWithin         : grid.bodyContainer,\n            allowDropOutside   : true,\n            scrollManager      : grid.scrollManager,\n            outerElement       : me.targetSubGridElement,\n            touchStartDelay    : me.touchStartDelay,\n            isElementDraggable : me.isElementDraggable.bind(me),\n            monitoringConfig   : {\n                scrollables : [\n                    {\n                        element   : grid.scrollable.element,\n                        direction : 'vertical'\n                    }\n                ]\n            },\n            setXY(element, x, y) {\n                const { context } = this;\n\n                if (!context.started) {\n                    const\n                        elementRect       = Rectangle.from(context.element, this.dragWithin),\n                        pointerDownOffset = context.startPageY - window.pageYOffset - context.element.getBoundingClientRect().top;\n\n                    // manually position the row a bit below the cursor\n                    y = elementRect.top + pointerDownOffset + this.proxyTopOffset;\n                }\n                DomHelper.setTranslateXY(element, x, y);\n            },\n            // Since parent nodes can expand after hovering, meaning original drag start position now refers to a different point in the tree\n            ignoreSamePositionDrop : false,\n            createProxy(element) {\n                const\n                    clone     = element.cloneNode(true),\n                    container = document.createElement('div');\n\n                container.classList.add('b-row-reorder-proxy');\n\n                clone.removeAttribute('id');\n                // The containing element will be positioned instead\n                clone.style.transform = '';\n\n                container.appendChild(clone);\n\n                if (grid.selectedRecords.length > 1) {\n                    const clone2 = clone.cloneNode(true);\n\n                    clone2.classList.add('b-row-dragging-multiple');\n\n                    container.appendChild(clone2);\n                }\n\n                DomHelper.removeClsGlobally(container, 'b-selected', 'b-hover', 'b-focused');\n\n                return container;\n            },\n\n            internalListeners : {\n                beforedragstart : 'onBeforeDragStart',\n                dragstart       : 'onDragStart',\n                drag            : 'onDrag',\n                drop            : 'onDrop',\n                reset           : 'onReset',\n                prio            : 10000, // To ensure our listener is run before the relayed listeners (for the outside world)\n                thisObj         : me\n            }\n        }, me.dragHelperConfig);\n\n        me.relayEvents(me.dragHelper, ['beforeDragStart', 'dragStart', 'drag', 'abort'], 'gridRow');\n\n        me.dropIndicator = DomHelper.createElement({\n            className : 'b-row-drop-indicator'\n        });\n\n        me.dropOverTargetCls = ['b-row-reordering-target', 'b-hover'];\n    }\n\n    //endregion\n\n    //region Plugin config\n\n    static pluginConfig = {\n        after : ['onPaint']\n    }\n\n    get targetSubGridElement() {\n        const targetSubGrid = this.grid.regions[0];\n\n        return this.grid.subGrids[targetSubGrid].element;\n    }\n\n    //endregion\n\n    //region Events (drop)\n\n    isElementDraggable(el, event) {\n        if (!el.closest('.b-grid-cell .b-widget')) {\n            if (this.gripOnly) {\n                const firstCell = el.closest('.b-grid-cell:first-child');\n\n                // Event is in the first cell. Now check if it's on the handle\n                if (firstCell) {\n                    const\n                        gripperStyle = getComputedStyle(firstCell, ':before'),\n                        offsetX      = this.grid.rtl ? firstCell.getBoundingClientRect().width - event.borderOffsetX : event.borderOffsetX;\n\n                    return DomHelper.roundPx(offsetX) <= DomHelper.roundPx(parseFloat(gripperStyle.width));\n                }\n            }\n            else {\n                return true;\n            }\n        }\n    }\n\n    onBeforeDragStart({ event, source, context }) {\n        const\n            me        = this,\n            { grid }  = me,\n            subGridEl = me.targetSubGridElement;\n\n        // Only dragging enabled in the leftmost grid section\n        if (me.disabled || grid.readOnly || grid.isTreeGrouped || !subGridEl.contains(context.element)) {\n            return false;\n        }\n\n        const startRecord = context.startRecord = grid.getRecordFromElement(context.element);\n\n        // Dont allow starting drag on a readOnly record nor on special rows\n        if (startRecord.readOnly || startRecord.isSpecialRow) {\n            return false;\n        }\n\n        context.originalRowTop = grid.rowManager.getRowFor(startRecord).top;\n\n        // Don't select row if checkboxOnly is set\n        if (!grid.selectionMode.checkboxOnly) {\n            if (source.startEvent.pointerType === 'touch') {\n                // Touchstart doesn't focus/navigate on its own, so we do it at the last moment before drag start\n                if (!grid.isSelected(startRecord)) {\n                    grid.selectRow({\n                        record         : startRecord,\n                        addToSelection : false\n                    });\n                }\n            }\n            else if (!grid.isSelected(startRecord) && !event.shiftKey && !event.ctrlKey) {\n                // If record is not selected and shift/ctrl is not pressed then select single row\n                grid.selectRow({\n                    record : startRecord\n                });\n            }\n        }\n\n        // Read-only records will not be moved\n        const selectedRecords = grid.selectedRecords.filter(r => !r.readOnly);\n        context.records       = [startRecord];\n\n        // If clicked record is selected, move all selected records\n        if (selectedRecords.includes(startRecord)) {\n            context.records.push(...selectedRecords.filter(r => r !== startRecord));\n            context.records.sort((r1, r2) => grid.store.indexOf(r1) - grid.store.indexOf(r2));\n        }\n\n        return true;\n    }\n\n    onDragStart({ context }) {\n        const\n            me                                 = this,\n            { grid }                           = me,\n            { cellEdit, cellMenu, headerMenu } = grid.features;\n\n        if (cellEdit) {\n            me.cellEditDisabledState = cellEdit.disabled;\n            cellEdit.disabled        = true; // prevent editing from being started through keystroke during row reordering\n        }\n\n        cellMenu?.hideContextMenu?.(false);\n        headerMenu?.hideContextMenu?.(false);\n\n        grid.element.classList.add('b-row-reordering');\n\n        const focusedCell = context.element.querySelector('.b-focused');\n        focusedCell?.classList.remove('b-focused');\n\n        context.element.firstElementChild.classList.remove('b-selected', 'b-hover');\n\n        grid.bodyContainer.appendChild(me.dropIndicator);\n    }\n\n    onDrag({ context, event }) {\n        const\n            me                    = this,\n            { grid }              = me,\n            { store, rowManager } = grid,\n            { clientY }           = event;\n\n        let valid = true,\n            row   = rowManager.getRowAt(clientY),\n            overRecord,\n            dataIndex,\n            after,\n            over,\n            insertBefore;\n\n        if (row) {\n            const\n                rowTop        = row.top + grid._bodyRectangle.y - grid.scrollable.y,\n                quarter       = row.height / 4,\n                topQuarter    = rowTop + quarter,\n                middleY       = rowTop + row.height / 2,\n                bottomQuarter = rowTop + quarter * 3;\n\n            dataIndex  = row.dataIndex;\n            overRecord = store.getAt(dataIndex);\n\n            // If Tree and pointer is in quarter 2 and 3, add as child of hovered row\n            if (store.tree) {\n                over = (overRecord.isParent || me.dropOnLeaf) && clientY > topQuarter && clientY < bottomQuarter;\n            }\n            else if (store.isGrouped) {\n                over = overRecord.isGroupHeader && overRecord.meta.collapsed;\n            }\n\n            // Else, drop after row below if mouse is in bottom half of hovered row\n            after = !over && event.clientY >= middleY;\n        }\n        // User dragged below last row or above the top row.\n        else {\n            if (event.pageY < grid._bodyRectangle.y) {\n                dataIndex  = 0;\n                overRecord = store.first;\n                after      = false;\n            }\n            else {\n                dataIndex  = store.count - 1;\n                overRecord = store.last;\n                after      = true;\n            }\n            row = grid.rowManager.getRow(dataIndex);\n        }\n\n        if (overRecord === me.overRecord && me.after === after && me.over === over) {\n            context.valid = me.reorderValid;\n            // nothing's changed\n            return;\n        }\n\n        if (me.overRecord !== overRecord) {\n            rowManager.getRowById(me.overRecord)?.removeCls(me.dropOverTargetCls);\n        }\n\n        me.overRecord = overRecord;\n        me.after      = after;\n        me.over       = over;\n\n        if (\n            // Hovering the dragged record. This is a no-op.\n            // But still gather the contextual data.\n            overRecord === context.startRecord ||\n            // Not allowed to drop above topmost group header or below a collapsed header\n            (!after && !over && dataIndex === 0 && store.isGrouped) ||\n            // Not allowed to drop after last collapsed group\n            (after && overRecord.isGroupHeader && overRecord.meta.collapsed && store.indexOf(overRecord) === store.count - 1)\n        ) {\n            valid = false;\n        }\n\n        if (store.tree) {\n            insertBefore = after ? overRecord.nextSibling : overRecord;\n\n            // For trees, prevent moving a parent into its own hierarchy\n            if (context.records.some(rec => rec.contains(overRecord))) {\n                valid = false;\n            }\n\n            context.parent = valid && over ? overRecord : overRecord.parent;\n\n            me.clearTimeout(me.hoverTimer);\n\n            if (overRecord && overRecord.isParent && !overRecord.isExpanded(store)) {\n                me.hoverTimer = me.setTimeout(() => grid.expand(overRecord), me.hoverExpandTimeout);\n            }\n        }\n        else {\n            insertBefore = after ? store.getAt(dataIndex + 1) : overRecord;\n        }\n\n        row.toggleCls(me.dropOverTargetCls, valid && over);\n\n        // If hovering results in same dataIndex, regardless of what row is hovered, and parent has not changed\n        if (!over && dataIndex === store.indexOf(context.startRecord) + (after ? -1 : 1) &&\n            context.parent && context.startRecord.parent === context.parent) {\n            valid = false;\n        }\n\n        // Provide visual clue to user of the drop position\n        // In FF (in tests) it might not have had time to redraw rows after scroll before getting here\n        row && DomHelper.setTranslateY(me.dropIndicator, Math.max(row.top + (after ? row.element.getBoundingClientRect().height : 0), 1));\n\n        // Don't show dropIndicator if holding over a row\n        me.dropIndicator.style.visibility = over ? 'hidden' : 'visible';\n        me.dropIndicator.classList.toggle('b-drag-invalid', !valid);\n\n        // Public property used for validation\n        context.insertBefore = insertBefore;\n\n        context.valid = me.reorderValid = valid;\n    }\n\n    /**\n     * Handle drop\n     * @private\n     */\n    async onDrop(event) {\n        const\n            me          = this,\n            { context } = event;\n\n        context.valid = context.valid && me.reorderValid;\n\n        if (context.valid) {\n            context.async = true;\n\n            if (me.client.store.tree) {\n                // For tree scenario, add context about previous positions of dragged tree nodes\n                context.oldPositionContext = context.records.map((record) => ({\n                    record,\n                    parentId    : record.parent?.id,\n                    parentIndex : record.parentIndex\n                }));\n            }\n\n            // Outside world provided us one or more Promises to wait for\n            const result = await me.trigger('gridRowBeforeDropFinalize', event);\n\n            if (result === false) {\n                context.valid = false;\n            }\n\n            await me.dragHelper.animateProxyTo(me.dropIndicator, { align : 'l0-l0' });\n\n            await me.finalizeReorder(context);\n        }\n\n        // already dropped the node, don't have to expand any node hovered anymore\n        // (cancelling expand action after timeout)\n        me.clearTimeout(me.hoverTimer);\n\n        me.overRecord = me.after = me.over = null;\n\n        me.trigger('gridRowDrop', event);\n    }\n\n    async finalizeReorder(context) {\n        const\n            me                     = this,\n            { grid }               = me,\n            { store, focusedCell } = grid;\n\n        let { records } = context;\n\n        context.valid = context.valid && !records.some(rec => !store.includes(rec));\n\n        if (context.valid) {\n            let result;\n\n            if (store.tree) {\n                // Remove any selected child records of parent nodes\n                records = records.filter(record => !record.parent || record.bubbleWhile(parent => !records.includes(parent), true));\n\n                result = await context.parent.tryInsertChild(records, me.over ? context.parent.children?.[0] : context.insertBefore);\n                // remove reorder cls from preview parent element dropped\n                grid.rowManager.forEach(r => r.removeCls(me.dropOverTargetCls));\n\n                // If parent wasn't expanded, expand it if it now has children\n                if (!context.parent.isExpanded() && context.parent.children?.length) {\n                    grid.expand(context.parent);\n                }\n\n                context.valid = result !== false;\n            }\n            else if (store.isGrouped && me.over) {\n                store.move(records, store.getAt(store.indexOf(context.insertBefore) + 1));\n            }\n            else {\n                store.move(records, context.insertBefore);\n            }\n\n            if (focusedCell?._rowIndex >= 0) {\n                grid._focusedCell = null;\n                // Refresh focused cell\n                grid.focusCell({\n                    grid,\n                    record   : focusedCell.record,\n                    columnId : focusedCell.columnId\n                });\n            }\n\n            store.clearSorters();\n        }\n\n        context.finalize(context.valid);\n\n        grid.element.classList.remove('b-row-reordering');\n    }\n\n    /**\n     * Clean up on reset\n     * @private\n     */\n    onReset() {\n        const\n            me       = this,\n            { grid } = me,\n            cellEdit = grid.features.cellEdit;\n\n        grid.element.classList.remove('b-row-reordering');\n\n        if (cellEdit) {\n            cellEdit.disabled = me.cellEditDisabledState;\n        }\n\n        me.dropIndicator.remove();\n\n        DomHelper.removeClsGlobally(\n            grid.element,\n            ...me.dropOverTargetCls\n        );\n    }\n\n    //endregion\n\n    //region Render\n\n    onPaint({ firstPaint }) {\n        // columns shown, hidden or reordered\n        if (firstPaint) {\n            this.init();\n        }\n    }\n\n    //endregion\n\n    updateShowGrip(show) {\n        this.grid.element.classList.toggle('b-row-reorder-with-grip', show);\n    }\n}\n\nRowReorder.featureClass = '';\n\nGridFeatureManager.registerFeature(RowReorder, false);\nGridFeatureManager.registerFeature(RowReorder, true, 'Gantt');\n","import TreeColumn from '../column/TreeColumn.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from './GridFeatureManager.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\n\n/**\n * @module Grid/feature/TreeGroup\n */\n\n/**\n * A feature that allows transforming a flat dataset (or the leaves of a hierarchical) into a tree by specifying a\n * record field per parent level. Parents are generated based on each leaf's value for those fields.\n *\n * {@inlineexample Grid/feature/TreeGroup.js}\n *\n * This feature can be used to mimic multi grouping or to generate another view for hierarchical data. The actual\n * transformation happens in a new store, that contains links to the original records. The original stores structure is\n * kept intact and will be plugged back in when calling {@link #function-clearGroups}.\n *\n * Any modification of the links is relayed to the original store. So cell editing etc. will work as expected and the\n * original data will be updated.\n *\n * <div class=\"note\">\n * Please note that this feature requires using a {@link Grid.view.TreeGrid} or having the {@link Grid.feature.Tree}\n * feature enabled.\n * </div>\n *\n * This snippet shows how the sample dataset used in the demo above is transformed:\n *\n * ```javascript\n * const grid = new TreeGrid({\n *     // Original data\n *     data : [\n *         { id : 1, name : 'Project 1', children : [\n *             { id : 11, name : 'Task 11', status : 'wip', prio : 'high' },\n *             { id : 12, name : 'Task 12', status : 'done', prio : 'low' },\n *             { id : 13, name : 'Task 13', status : 'done', prio : 'high' }\n *         ]},\n *         { id : 2, name : 'Project 2', children : [\n *             { id : 21, name : 'Task 21', status : 'wip', prio : 'high' },\n *         ]}\n *     ],\n *\n *     features : {\n *         treeGroup : {\n *             // Fields to build a new tree from\n *             levels : [ 'prio', 'status' ]\n *         }\n *     }\n * });\n *\n * // Resulting data\n * [\n *     { name : 'low', children : [\n *         { name : 'done', children : [\n *             { id : 12, name : 'Task 12', status : 'done', prio : 'low' }\n *         ]}\n *     ]},\n *     { name : 'high', children : [\n *         { name : 'done', children : [\n *             { id : 13, name : 'Task 13', status : 'done', prio : 'high' }\n *         ]},\n *         { name : 'wip', children : [\n *             { id : 11, name : 'Task 11', status : 'wip', prio : 'high' },\n *             { id : 21, name : 'Task 21', status : 'wip', prio : 'low' }\n *         ]}\n *     ]}\n * ]\n * ```\n *\n * ## Important information\n *\n * Using the TreeGroup feature comes with some caveats:\n *\n * * Generated parents are read-only, they cannot be edited using the default UI.\n * * Moving nodes manually in the tree is not supported while it is grouped. The linked records have their own\n *   `parentId` fields, not linked to the original records value.\n * * The generated structure is not meant to be persisted.\n *\n * <div class=\"note\">\n * Please note that this feature is not supported in vertical mode in Scheduler.\n * </div>\n *\n * This feature is <strong>disabled</strong> by default.\n *\n * @extends Core/mixin/InstancePlugin\n *\n * @classtype treeGroup\n * @feature\n */\nexport default class TreeGroup extends InstancePlugin {\n    static $name = 'TreeGroup';\n\n    static configurable = {\n        /**\n         * An array of model field names or functions used to determine the levels in the resulting tree.\n         *\n         * When supplying a function, it will be called for each leaf in the original data, and it is expected to return\n         * an atomic value used to determine which parent the leaf will be added to at that level.\n         *\n         * ```javascript\n         * const grid = new TreeGrid({\n         *     features : {\n         *         treeGroup : {\n         *             levels : [\n         *                 // First level is determined by the value of the status field\n         *                 'status',\n         *                 // Second level by the result of this function\n         *                 // (which puts percentdone 0-9 in one group, 10-19 into another and so on)\n         *                 record => (record.percentDone % 10) * 10\n         *             ]\n         *         }\n         *     }\n         * });\n         * ```\n         *\n         * The function form can also be used as a formatter/renderer of sorts, simply by returning a string:\n         *\n         * ```javascript\n         * const grid = new TreeGrid({\n         *     features : {\n         *         treeGroup : {\n         *             levels : [\n         *                 record => `Status: ${record.status}`\n         *             ]\n         *         }\n         *     }\n         * });\n         * ```\n         *\n         * Assigning `null` restores data to its original state.\n         *\n         * @prp {Array<String|Function(Core.data.Model) : any>} levels\n         */\n        levels : null,\n\n        /**\n         * CSS class to apply to the generated parents.\n         *\n         * @config {String}\n         * @default\n         */\n        parentCls : 'b-generated-parent'\n    };\n\n    static pluginConfig = {\n        assign : ['group', 'clearGroups']\n    }\n\n    static properties = {\n        isApplying    : 0,\n        originalStore : null\n    }\n\n    construct(grid, config) {\n        super.construct(grid, config);\n\n        if (!grid.hasFeature('tree')) {\n            throw new Error('The TreeGroup feature requires the Tree feature to be enabled');\n        }\n    }\n\n    processParentData(parentData) {\n        // Apply cls to allow custom styling of generated parents\n        if (this.parentCls) {\n            parentData.cls = this.parentCls;\n        }\n    }\n\n    processTransformedData(transformedData) {}\n\n    async waitForReadiness() {\n        // Wait for store to finish loading before transforming the data\n        if (this.originalStore.isLoading) {\n            await this.originalStore.await('load', false);\n\n            if (this.isDestroyed) {\n                return;\n            }\n        }\n\n        // For Scheduler, Pro & Gantt, to not have to implement a TreeGroup in Scheduler just to add this\n        const { crudManager } = this.client;\n\n        if (crudManager) {\n            if (crudManager.isLoadingOrSyncing) {\n                await crudManager.await('requestDone');\n\n                if (this.isDestroyed) {\n                    return;\n                }\n            }\n\n            await this.client.project.commitAsync();\n        }\n    }\n\n    async applyLevels(levels) {\n        const\n            me         = this,\n            { client } = me,\n            treeColumn = client.columns.find(col => col instanceof TreeColumn);\n\n        let { store } = client,\n            result    = null;\n\n        me._levels = levels;\n\n        me.isApplying++;\n\n        client.suspendRefresh();\n\n        if (levels && !me.originalStore) {\n            me.originalStore = store;\n            store = new store.constructor({\n                tree       : true,\n                modelClass : store.modelClass\n            });\n            client.store = store;\n        }\n\n        await me.waitForReadiness();\n\n        if (me.isDestroyed) {\n            return;\n        }\n\n        // Applying custom levels\n        if (levels) {\n            // Plug links in to allow transforming them below\n            store.data = me.originalStore.allRecords.flatMap(record => record.isLeaf ? [record.link()] : []);\n\n            // Transform it according to levels\n            result = store.treeify(levels, parentData => {\n                // Use group key as tree columns content\n                ObjectHelper.setPath(parentData, store.modelClass.getFieldDataSource(treeColumn.field), parentData.key);\n\n                // Let the outside world manipulate generated parents data before turning it into a record\n                me.processParentData(parentData);\n            });\n\n            me.processTransformedData(result);\n\n            // Load the transformed result into the \"display store\"\n            store.data = result.children;\n        }\n        // Clearing custom levels\n        else {\n            client.store = me.originalStore;\n            me.originalStore = null;\n        }\n\n        me.isApplying--;\n\n        client.resumeRefresh();\n        client.rowManager.reinitialize();\n\n        return result;\n    }\n\n    updateLevels(levels) {\n        if (levels || !this.isConfiguring) {\n            this.applyLevels(levels);\n        }\n    }\n\n    /**\n     * Transforms the data according to the supplied levels.\n     *\n     * Yields the same result as assigning to {@link #property-levels}.\n     *\n     * ```javascript\n     * // Transform into a tree with two parent levels\n     * grid.group('status', record => (record.percentDone % 10) * 10);\n     * ```\n     *\n     * @param {Array<String|Function(Core.data.Model) : any>} levels Field names or functions use to generate parents in resulting tree.\n     * @on-owner\n     * @category Common\n     */\n    async group(levels) {\n        ObjectHelper.assertArray(levels, 'group()');\n\n        await this.applyLevels(levels);\n    }\n\n    /**\n     * Clears the previously applied transformation, restoring data to its initial state.\n     *\n     * Yields the same result as assigning `null` to {@link #property-levels}.\n     *\n     * ```javascript\n     * // Restore original data\n     * grid.clearGroupers();\n     * ```\n     * @on-owner\n     * @category Common\n     */\n    async clearGroups() {\n        if (this.isGrouped) {\n            await this.applyLevels(null);\n        }\n    }\n\n    get isGrouped() {\n        return Boolean(this._levels);\n    }\n}\n\nGridFeatureManager.registerFeature(TreeGroup);\n"],"names":["RowReorder","Delayable","InstancePlugin","construct","grid","config","arguments","doDestroy","_this$dragHelper","dragHelper","destroy","init","me","DragHelper","new","name","cloneTarget","dragThreshold","proxyTopOffset","targetSelector","lockX","dragWithin","bodyContainer","allowDropOutside","scrollManager","outerElement","targetSubGridElement","touchStartDelay","isElementDraggable","bind","monitoringConfig","scrollables","element","scrollable","direction","setXY","x","y","context","started","elementRect","Rectangle","from","pointerDownOffset","startPageY","window","pageYOffset","getBoundingClientRect","top","DomHelper","setTranslateXY","ignoreSamePositionDrop","createProxy","clone","cloneNode","container","document","createElement","classList","add","removeAttribute","style","transform","appendChild","selectedRecords","length","clone2","removeClsGlobally","internalListeners","beforedragstart","dragstart","drag","drop","reset","prio","thisObj","dragHelperConfig","relayEvents","dropIndicator","className","dropOverTargetCls","targetSubGrid","regions","subGrids","el","event","closest","gripOnly","firstCell","gripperStyle","getComputedStyle","offsetX","rtl","width","borderOffsetX","roundPx","parseFloat","onBeforeDragStart","source","subGridEl","disabled","readOnly","isTreeGrouped","contains","startRecord","getRecordFromElement","isSpecialRow","originalRowTop","rowManager","getRowFor","selectionMode","checkboxOnly","startEvent","pointerType","isSelected","selectRow","record","addToSelection","shiftKey","ctrlKey","filter","r","records","includes","push","sort","r1","r2","store","indexOf","onDragStart","_cellMenu$hideContext","_headerMenu$hideConte","cellEdit","cellMenu","headerMenu","features","cellEditDisabledState","hideContextMenu","call","focusedCell","querySelector","remove","firstElementChild","onDrag","clientY","valid","row","getRowAt","overRecord","dataIndex","after","over","insertBefore","rowTop","_bodyRectangle","quarter","height","topQuarter","middleY","bottomQuarter","getAt","tree","isParent","dropOnLeaf","isGrouped","isGroupHeader","meta","collapsed","pageY","first","count","last","getRow","reorderValid","_rowManager$getRowByI","getRowById","removeCls","nextSibling","some","rec","parent","clearTimeout","hoverTimer","isExpanded","setTimeout","expand","hoverExpandTimeout","toggleCls","setTranslateY","Math","max","visibility","toggle","onDrop","async","client","oldPositionContext","map","_record$parent","parentId","id","parentIndex","result","trigger","animateProxyTo","align","finalizeReorder","_context$parent$child","_context$parent$child2","bubbleWhile","tryInsertChild","children","forEach","move","_rowIndex","_focusedCell","focusCell","columnId","clearSorters","finalize","onReset","onPaint","firstPaint","updateShowGrip","show","_defineProperty","showGrip","featureClass","_$name","GridFeatureManager","registerFeature","TreeGroup","hasFeature","Error","processParentData","parentData","parentCls","cls","processTransformedData","transformedData","waitForReadiness","originalStore","isLoading","await","isDestroyed","crudManager","isLoadingOrSyncing","project","commitAsync","applyLevels","levels","treeColumn","columns","find","col","TreeColumn","_levels","isApplying","suspendRefresh","constructor","modelClass","data","allRecords","flatMap","isLeaf","link","treeify","ObjectHelper","setPath","getFieldDataSource","field","key","resumeRefresh","reinitialize","updateLevels","isConfiguring","group","assertArray","clearGroups","Boolean","assign"],"mappings":";;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMA,UAAU,SAASC,SAAS,CAACC,cAAc,CAAC,CAAC;;;AAGlE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;EAsCIC,SAASA,CAACC,IAAI,EAAEC,MAAM,EAAE;IACpB,IAAI,CAACD,IAAI,GAAGA,IAAI;IAChB,KAAK,CAACD,SAAS,CAAC,GAAGG,SAAS,CAAC;;EAEjCC,SAASA,GAAG;IAAA,IAAAC,gBAAA;IACR,CAAAA,gBAAA,OAAI,CAACC,UAAU,cAAAD,gBAAA,uBAAfA,gBAAA,CAAiBE,OAAO,EAAE;IAC1B,KAAK,CAACH,SAAS,EAAE;;;AAGzB;AACA;AACA;EACII,IAAIA,GAAG;IACH,MACIC,EAAE,GAAS,IAAI;MACf;QAAER;OAAM,GAAGQ,EAAE;IACjBA,EAAE,CAACH,UAAU,GAAGI,UAAU,CAACC,GAAG,CAAC;MAC3BC,IAAI,EAAiB,YAAY;MACjCC,WAAW,EAAU,IAAI;MACzBC,aAAa,EAAQ,EAAE;MACvBC,cAAc,EAAO,EAAE;MACvBC,cAAc,EAA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CAACC,IAAI,EAAE;IACjB,IAAI,CAAC7N,IAAI,CAAC4B,OAAO,CAAC0B,SAAS,CAACuI,MAAM,CAAC,yBAAyB,EAAEgC,IAAI,CAAC;;AAE3E;AAACC,eAAA,CAjeoBlO,UAAU,WAuEZ,YAAY;AAAAkO,eAAA,CAvEVlO,UAAU,kBAwEL;;AAE1B;AACA;AACA;EACQmO,QAAQ,EAAG,IAAI;;AAEvB;AACA;AACA;EACQ5I,QAAQ,EAAG,IAAI;;AAEvB;AACA;AACA;EACQoG,kBAAkB,EAAG,IAAI;;AAEjC;AACA;AACA;AACA;EACQhK,eAAe,EAAG,GAAG;;AAE7B;AACA;AACA;AACA;EACQyI,UAAU,EAAG,KAAK;;AAE1B;AACA;AACA;EACQxF,gBAAgB,EAAG;AACvB,CAAC;AAAAsJ,eAAA,CAzGgBlO,UAAU,kBA+LL;EAClBuJ,KAAK,EAAG,CAAC,SAAS;AACtB,CAAC;AAiSLvJ,UAAU,CAACoO,YAAY,GAAG,EAAE;AAC5BpO,UAAU,CAACqO,MAAM,GAAG,YAAY;AAAEC,kBAAkB,CAACC,eAAe,CAACvO,UAAU,EAAE,KAAK,CAAC;AACvFsO,kBAAkB,CAACC,eAAe,CAACvO,UAAU,EAAE,IAAI,EAAE,OAAO,CAAC;;AC5iB7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMwO,SAAS,SAAStO,cAAc,CAAC;EA2DlDC,SAASA,CAACC,IAAI,EAAEC,MAAM,EAAE;IACpB,KAAK,C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"}