{"version":3,"file":"Editor.js","sources":["../../../../Core/lib/Core/helper/BrowserHelper.js","../../../../Core/lib/Core/helper/StringHelper.js","../../../../Core/lib/Core/helper/util/Objects.js","../../../../Core/lib/Core/helper/VersionHelper.js","../../../../Core/lib/Core/Config.js","../../../../Core/lib/Core/Base.js","../../../../Core/lib/Core/helper/ArrayHelper.js","../../../../Core/lib/Core/helper/FunctionHelper.js","../../../../Core/lib/Core/mixin/Events.js","../../../../Core/lib/Core/helper/AsyncHelper.js","../../../../Core/lib/Core/helper/AjaxHelper.js","../../../../Core/lib/Core/localization/LocaleHelper.js","../../../../Core/lib/Core/localization/LocaleManager.js","../../../../Core/lib/Core/localization/Localizable.js","../../../../Core/lib/Core/localization/En.js","../../../../Core/lib/Core/helper/DateHelper.js","../../../../Core/lib/Core/helper/ObjectHelper.js","../../../../Core/lib/Core/helper/util/Rectangle.js","../../../../Core/lib/Core/helper/util/DomClassList.js","../../../../Core/lib/Core/helper/util/Point.js","../../../../Core/lib/Core/helper/EventHelper.js","../../../../Core/lib/Core/helper/DomHelper.js","../../../../Core/lib/Core/GlobalEvents.js","../../../../Core/lib/Core/mixin/InstancePlugin.js","../../../../Core/lib/Core/mixin/Pluggable.js","../../../../Core/lib/Core/mixin/Delayable.js","../../../../Core/lib/Core/state/StateStorage.js","../../../../Core/lib/Core/state/StateProvider.js","../../../../Core/lib/Core/mixin/State.js","../../../../Core/lib/Core/mixin/Identifiable.js","../../../../Core/lib/Core/data/stm/mixin/ModelStm.js","../../../../Core/lib/Core/data/mixin/TreeNode.js","../../../../Core/lib/Core/data/mixin/ModelLink.js","../../../../Core/lib/Core/mixin/Factoryable.js","../../../../Core/lib/Core/data/field/DataField.js","../../../../Core/lib/Core/data/field/ArrayDataField.js","../../../../Core/lib/Core/data/field/BooleanDataField.js","../../../../Core/lib/Core/data/field/DateDataField.js","../../../../Core/lib/Core/data/field/StringDataField.js","../../../../Core/lib/Core/data/field/DurationUnitDataField.js","../../../../Core/lib/Core/data/field/IntegerDataField.js","../../../../Core/lib/Core/data/field/ModelDataField.js","../../../../Core/lib/Core/data/field/NumberDataField.js","../../../../Core/lib/Core/data/field/ObjectDataField.js","../../../../Core/lib/Core/data/field/StoreDataField.js","../../../../Core/lib/Core/data/Model.js","../../../../Core/lib/Core/data/Duration.js","../../../../Core/lib/Core/util/CollectionFilter.js","../../../../Core/lib/Core/helper/IdHelper.js","../../../../Core/lib/Core/util/CollectionSorter.js","../../../../Core/lib/Core/util/Collection.js","../../../../Core/lib/Core/util/Bag.js","../../../../Core/lib/Core/data/StoreBag.js","../../../../Core/lib/Core/data/mixin/StoreCRUD.js","../../../../Core/lib/Core/data/mixin/StoreChanges.js","../../../../Core/lib/Core/data/mixin/StoreFilter.js","../../../../Core/lib/Core/data/mixin/StoreGroup.js","../../../../Core/lib/Core/data/mixin/StoreProxy.js","../../../../Core/lib/Core/data/mixin/StoreRelation.js","../../../../Core/lib/Core/data/mixin/StoreSum.js","../../../../Core/lib/Core/data/mixin/StoreSearch.js","../../../../Core/lib/Core/data/mixin/StoreSort.js","../../../../Core/lib/Core/data/mixin/StoreChained.js","../../../../Core/lib/Core/data/mixin/StoreState.js","../../../../Core/lib/Core/data/Wbs.js","../../../../Core/lib/Core/data/mixin/StoreTree.js","../../../../Core/lib/Core/helper/WalkHelper.js","../../../../Core/lib/Core/data/mixin/StoreSync.js","../../../../Core/lib/Core/data/stm/mixin/StoreStm.js","../../../../Core/lib/Core/data/Store.js","../../../../Core/lib/Core/data/AjaxStore.js","../../../../Core/lib/Core/data/DomDataStore.js","../../../../Core/lib/Core/helper/DomSync.js","../../../../Core/lib/Core/helper/util/Fullscreen.js","../../../../Core/lib/Core/helper/ResizeMonitor.js","../../../../Core/lib/Core/helper/util/Scroller.js","../../../../Core/lib/Core/helper/util/Promissory.js","../../../../Core/lib/Core/widget/Renderable.js","../../../../Core/lib/Core/widget/Mask.js","../../../../Core/lib/Core/widget/mixin/KeyMap.js","../../../../Core/lib/Core/widget/mixin/RTL.js","../../../../Core/lib/Core/widget/Widget.js","../../../../Core/lib/Core/widget/layout/Layout.js","../../../../Core/lib/Core/widget/Ripple.js","../../../../Core/lib/Core/widget/Container.js","../../../../Core/lib/Core/util/Animator.js","../../../../Core/lib/Core/util/ClickRepeater.js","../../../../Core/lib/Core/widget/mixin/Rotatable.js","../../../../Core/lib/Core/widget/Tool.js","../../../../Core/lib/Core/widget/panel/CollapseTool.js","../../../../Core/lib/Core/widget/panel/PanelCollapser.js","../../../../Core/lib/Core/util/DynamicObject.js","../../../../Core/lib/Core/widget/mixin/Toolable.js","../../../../Core/lib/Core/widget/layout/Box.js","../../../../Core/lib/Core/widget/layout/VBox.js","../../../../Core/lib/Core/widget/mixin/Badge.js","../../../../Core/lib/Core/widget/Button.js","../../../../Core/lib/Core/widget/Toolbar.js","../../../../Core/lib/Core/widget/Panel.js","../../../../Core/lib/Core/widget/Popup.js","../../../../Core/lib/Core/widget/MenuItem.js","../../../../Core/lib/Core/widget/Menu.js","../../../../Core/lib/Core/feature/base/ContextMenuBase.js","../../../../Core/lib/Core/helper/TemplateHelper.js","../../../../Core/lib/Core/helper/TimeZoneHelper.js","../../../../Core/lib/Core/widget/Toast.js","../../../../Core/lib/Core/helper/util/Navigator.js","../../../../Core/lib/Core/mixin/LoadMaskable.js","../../../../Core/lib/Core/util/DayTime.js","../../../../Core/lib/Core/util/ScrollManager.js","../../../../Core/lib/Core/widget/Tooltip.js","../../../../Core/lib/Core/widget/mixin/Labelable.js","../../../../Core/lib/Core/widget/FieldContainer.js","../../../../Core/lib/Core/widget/Field.js","../../../../Core/lib/Core/widget/TextField.js","../../../../Core/lib/Core/widget/PickerField.js","../../../../Core/lib/Core/widget/List.js","../../../../Core/lib/Core/widget/ChipView.js","../../../../Core/lib/Core/widget/Combo.js","../../../../Core/lib/Core/widget/layout/Fit.js","../../../../Core/lib/Core/widget/Editor.js"],"sourcesContent":["/**\n * @module Core/helper/BrowserHelper\n */\n\n/**\n * Static helper class that does browser or platform detection and provides other helper functions.\n */\nexport default class BrowserHelper {\n    static  supportsPointerEvents = Boolean(globalThis.PointerEvent || globalThis.MSPointerEvent);\n\n    // Locker Service does not allow to instantiate PointerEvents. LWS apparently does, however.\n    // https://github.com/bryntum/support/issues/5578\n\n    static supportsPointerEventConstructor = typeof PointerEvent !== 'undefined';\n    //region Init\n\n    static cacheFlags(platform = navigator.platform, userAgent = navigator.userAgent) {\n        const me = this;\n\n        // os\n        me._isLinux = Boolean(platform.match(/Linux/));\n        me._isMac = Boolean(platform.match(/Mac/));\n        me._isWindows = Boolean(platform.match(/Win32/));\n\n        // Edge user agent contains webkit too.\n        // This is not a typo. Edge has \"Safari/537.36 Edg/96.0.1054.34\"\n        me._isWebkit = Boolean(userAgent.match(/WebKit/) && !userAgent.match(/Edg/));\n\n        me._firefoxVersion = me.getVersion(userAgent, /Firefox\\/(\\d+)\\./);\n        me._isFirefox = me._firefoxVersion > 0;\n\n        me._chromeVersion = me.getVersion(userAgent, /Chrom(?:e|ium)\\/(\\d+)\\./);\n        me._isChrome = me._chromeVersion > 0;\n\n        me._isSafari = Boolean(userAgent.match(/Safari/)) && !me._isChrome;\n        me._isMobileSafari = Boolean(userAgent.match(/Mobile.*Safari/));\n\n        me._safariVersion = me.getVersion(userAgent, /Version\\/(.*).Safari/);\n\n        me._isAndroid = Boolean(userAgent.match(/Android/g));\n    }\n\n    //endregion\n\n    //region Device\n\n    /**\n     * Yields `true` if the current browser supports CSS style `overflow:clip`.\n     * @property {Boolean}\n     * @readonly\n     * @internal\n     */\n    static get supportsOverflowClip() {\n        if (this._supportsOverflowClip == null) {\n            const div = document.createElement('div');\n\n            div.style.overflow = 'clip';\n            div.style.display = 'none';\n            // If we're called before DOMContentLoaded, body won't be available.\n            // HTML element works for style calcs.\n            document.documentElement.appendChild(div);\n            this._supportsOverflowClip = div.ownerDocument.defaultView.getComputedStyle(div).getPropertyValue('overflow') === 'clip';\n            div.remove();\n        }\n        return this._supportsOverflowClip;\n    }\n\n    /**\n     * Yields `true` if the current browser supports CSS style `position:sticky`.\n     * @property {Boolean}\n     * @readonly\n     * @internal\n     */\n    static get supportsSticky() {\n        return true;\n    }\n\n    /**\n     * Returns matched version for userAgent.\n     * @param {String} versionRe version match regular expression\n     * @returns {Number} matched version\n     * @readonly\n     * @internal\n     */\n    static getVersion(userAgent, versionRe) {\n        const match = userAgent.match(versionRe);\n        return match ? parseFloat(match[1]) : 0;\n    }\n\n    /**\n     * Determines if the user is using a touch device.\n     * @property {Boolean}\n     * @readonly\n     * @internal\n     */\n    static get isTouchDevice() {\n        // Allow tests or client code to set\n        if (this._isTouchDevice === undefined) {\n            this._isTouchDevice = globalThis.matchMedia('(pointer:coarse)').matches;\n        }\n        return this._isTouchDevice;\n    }\n\n    // Reports true by default for our tests\n    static get isHoverableDevice() {\n        if (this._isHoverableDevice === undefined) {\n            this._isHoverableDevice = globalThis.matchMedia('(any-hover: hover)').matches;\n        }\n\n        return this._isHoverableDevice;\n    }\n\n    //endregion\n\n    //region Platform\n\n    static get isBrowserEnv() {\n        // This window reference is left on purpose, globalThis is always defined\n        return typeof window !== 'undefined';\n    }\n\n    /**\n     * Checks if platform is Mac.\n     * @property {Boolean}\n     * @readonly\n     * @category Platform\n     */\n    static get isMac() {\n        return this._isMac;\n    }\n\n    /**\n     * Checks if platform is Windows.\n     * @property {Boolean}\n     * @readonly\n     * @category Platform\n     */\n    static get isWindows() {\n        return this._isWindows;\n    }\n\n    /**\n     * Checks if platform is Linux.\n     * @property {Boolean}\n     * @readonly\n     * @category Platform\n     */\n    static get isLinux() {\n        return this._isLinux;\n    }\n\n    /**\n     * Checks if platform is Android.\n     * @property {Boolean}\n     * @readonly\n     * @category Platform\n     */\n    static get isAndroid() {\n        return this._isAndroid;\n    }\n\n    //endregion\n\n    //region Browser\n\n    /**\n     * Checks if browser is Webkit.\n     * @property {Boolean}\n     * @readonly\n     * @category Browser\n     */\n    static get isWebkit() {\n        return this._isWebkit;\n    }\n\n    /**\n     * Checks if browser is Chrome or Chromium based browser.\n     * Returns truthy value for Edge Chromium.\n     * @property {Boolean}\n     * @readonly\n     * @category Browser\n     */\n    static get isChrome() {\n        return this._isChrome;\n    }\n\n    /**\n     * Returns the major Chrome version or 0 for other browsers.\n     * @property {Number}\n     * @readonly\n     * @category Browser\n     */\n    static get chromeVersion() {\n        return this._chromeVersion;\n    }\n\n    /**\n     * Checks if browser is Firefox.\n     * @property {Boolean}\n     * @readonly\n     * @category Browser\n     */\n    static get isFirefox() {\n        return this._isFirefox;\n    }\n\n    /**\n     * Returns the major Firefox version or 0 for other browsers.\n     * @property {Number}\n     * @readonly\n     * @category Browser\n     */\n    static get firefoxVersion() {\n        return this._firefoxVersion;\n    }\n\n    /**\n     * Checks if browser is Safari.\n     * @property {Boolean}\n     * @readonly\n     * @category Browser\n     */\n    static get isSafari() {\n        return this._isSafari;\n    }\n\n    static get safariVersion() {\n        return this._safariVersion;\n    }\n\n    /**\n     * Checks if browser is mobile Safari\n     * @property {Boolean}\n     * @readonly\n     * @category Browser\n     */\n    static get isMobileSafari() {\n        return this._isMobileSafari;\n    }\n\n    static get platform() {\n        const me = this;\n\n        return me._isLinux ? 'linux'\n            : me._isMac ? 'mac'\n                : me._isWindows ? 'windows'\n                    : me._isAndroid ? 'android'\n                        : me._isMobileSafari ? 'ios'\n                            : null;\n    }\n\n    /**\n     * Returns `true` if the browser supports passive event listeners.\n     * @property {Boolean}\n     * @internal\n     * @deprecated Since 5.0. All modern browsers now support passive event listeners.\n     * @category Browser\n     */\n    static get supportsPassive() {\n        return true;\n    }\n\n    // Only works in secure contexts\n    static get supportsRandomUUID() {\n        if (this._supportsRandomUUID === undefined) {\n            try {\n                this._supportsRandomUUID = Boolean(globalThis.crypto.randomUUID().length > 0);\n            }\n            catch (e) {\n                this._supportsRandomUUID = false;\n            }\n        }\n\n        return this._supportsRandomUUID;\n    }\n\n    //endregion\n\n    //region Storage\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API\n    static get storageAvailable() {\n        let storage, x;\n\n        try {\n            storage = localStorage;\n            x = '__storage_test__';\n\n            storage.setItem(x, x);\n            storage.removeItem(x);\n            return true;\n        }\n        catch (e) {\n            return e instanceof DOMException && (\n            // everything except Firefox\n                e.code === 22 ||\n                // Firefox\n                e.code === 1014 ||\n                // test name field too, because code might not be present\n                // everything except Firefox\n                e.name === 'QuotaExceededError' ||\n                // Firefox\n                e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n                // acknowledge QuotaExceededError only if there's something already stored\n                storage.length !== 0;\n        }\n    }\n\n    static setLocalStorageItem(key, value) {\n        this.storageAvailable && localStorage.setItem(key, value);\n    }\n\n    static getLocalStorageItem(key) {\n        return this.storageAvailable && localStorage.getItem(key);\n    }\n\n    static removeLocalStorageItem(key) {\n        this.storageAvailable && localStorage.removeItem(key);\n    }\n\n    //endregion\n\n    //region Helpers\n\n    /**\n     * Returns parameter value from search string by parameter name.\n     * @param {String} paramName search parameter name\n     * @param {String} [defaultValue] default value if parameter not found\n     * @param {String} [search] search string. Defaults to `document.location.search`\n     * @returns {String} search parameter string value\n     * @category Helper\n     */\n    static searchParam(paramName, defaultValue = null, search = document.location.search) {\n        const\n            re    = new RegExp(`[?&]${paramName}=?([^&]*)`),\n            match = search.match(re);\n        return (match && match[1]) || defaultValue;\n    }\n\n    /**\n     * Returns cookie by name.\n     * @param {String} name cookie name\n     * @returns {String} cookie string value\n     * @category Helper\n     */\n    static getCookie(name) {\n        const\n            nameEq      = encodeURIComponent(name) + '=',\n            cookieItems = document.cookie.split(';');\n\n        for (let i = 0; i < cookieItems.length; i++) {\n            let c = cookieItems[i];\n\n            while (c.charAt(0) === ' ') {\n                c = c.substring(1, c.length);\n            }\n\n            if (c.indexOf(nameEq) === 0) {\n                return decodeURIComponent(c.substring(nameEq.length, c.length));\n            }\n        }\n\n        return '';\n    }\n\n    /**\n     * Triggers a download of a file with the specified name / URL.\n     * @param {String} filename The filename of the file to be downloaded\n     * @param {String} [url] The URL where the file is to be downloaded from\n     * @internal\n     * @category Download\n     */\n    static download(filename, url) {\n        const a = document.createElement('a');\n\n        a.download = filename;\n        a.href = url || filename;\n        a.style.cssText = 'display:none';\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n    }\n\n    /**\n     * Triggers a download of a Blob with the specified name.\n     * @param {Blob} blob The Blob to be downloaded\n     * @param {String} filename The filename of the file to be downloaded\n     * @internal\n     * @category Download\n     */\n    static downloadBlob(blob, filename) {\n        const url = globalThis.URL.createObjectURL(blob);\n\n        this.download(filename, url);\n        globalThis.URL.revokeObjectURL(url);\n    }\n\n    static get queryString() {\n        // new URLSearchParams throws in salesforce\n        // https://github.com/salesforce/lwc/issues/1812\n        const params = new URL(globalThis.location.href).searchParams;\n\n        // ?. to be nice to users with Chrome versions < 73\n        return Object.fromEntries?.(params.entries());\n    }\n\n    static copyToClipboard(code) {\n        let success = true;\n        const textArea = document.createElement('textarea');\n\n        textArea.value = code;\n        textArea.style.height = textArea.style.width = 0;\n        document.body.appendChild(textArea);\n\n        textArea.select();\n        try {\n            document.execCommand('copy');\n        }\n        catch (e) {\n            success = false;\n        }\n        textArea.remove();\n\n        return success;\n    }\n\n    static isBryntumOnline(searchStrings) {\n        searchStrings = Array.isArray(searchStrings) ? searchStrings : [searchStrings];\n        return Boolean(/^(www\\.)?bryntum\\.com/.test(globalThis.location.host) || searchStrings?.some(str => this.queryString[str] != null));\n    }\n\n    /**\n     * Returns truthy value if page contains Content Security Policy meta tag or globalThis.bryntum.CSP is truthy value\n     * @returns {Boolean}\n     * @internal\n     **/\n    static get isCSP() {\n        const { bryntum, document } =  globalThis;\n        if (bryntum.CSP == null) {\n            bryntum.CSP = Boolean(document.querySelector('meta[http-equiv=\"Content-Security-Policy\"]'));\n        }\n        return bryntum.CSP;\n    }\n\n    //endregion\n\n    // region Clipboard\n\n    /**\n     * This creates a global clipboard object that can be used by multiple Bryntum products on same page.\n     * This function is called each time BrowserHelper.writeToClipboard or BrowserHelper.readFromClipboard is called.\n     * @internal\n     */\n    static async setupClipboard() {\n        if (!window.bryntum.clipboard) {\n            window.bryntum.clipboard = {\n\n                // Defaults to true, so to\n                hasNativeAccess : true,\n\n                async writeText(text, allowNative) {\n                    if (allowNative && this.hasNativeAccess) {\n                        try {\n                            await navigator.clipboard.writeText(text);\n                        }\n                        catch (e) {\n                            this.hasNativeAccess = false;\n                        }\n                    }\n                    // Always writes to local clipboard\n                    this._content = text;\n                },\n\n                async readText(allowNative) {\n                    if (allowNative && this.hasNativeAccess) {\n                        try {\n                            return await navigator.clipboard.readText();\n                        }\n                        catch (e) {\n                            this.hasNativeAccess = false;\n                        }\n                    }\n                    return this._content;\n                }\n            };\n        }\n        return window.bryntum.clipboard;\n    }\n\n    /**\n     * Will try to detect native clipboard access if not `allowNative` is `false`. If access to native clipboard is\n     * provided, it will try to store the string value there. Otherwise, it will use an internal storage instead.\n     * @param {String} text Only text value is supported\n     * @param {Boolean} allowNative `false` to only use internal clipboard. This is not a global setting, it has to be passed as\n     * an argument to each read/write call.\n     * @internal\n     */\n    static async writeToClipboard(text, allowNative = true) {\n        const clipboard = await this.setupClipboard();\n        return await clipboard.writeText(text, allowNative);\n    }\n\n    /**\n     * Will try to detect native clipboard access if not `allowNative` is `false`. If access to native clipboard is\n     * provided, it will try to read from there. Otherwise, it will read from an internal storage instead.\n     * @param {Boolean} allowNative `false` to only use internal clipboard. This is not a global setting, it has to be\n     * passed as an argument to each read/write call.\n     * @internal\n     */\n    static async readFromClipboard(allowNative = true) {\n        const clipboard = await this.setupClipboard();\n        return await clipboard.readText(allowNative);\n    }\n\n    // endregion\n\n}\n\nif (BrowserHelper.isBrowserEnv) {\n    BrowserHelper.cacheFlags();\n}\n","// IMPORTANT - adding imports here can create problems for Base class\n\nimport Objects from './util/Objects.js';\nimport BrowserHelper from './BrowserHelper.js';\n\n/**\n * @module Core/helper/StringHelper\n */\n\nlet charsToEncode, entitiesToDecode, htmlEncodeRe, htmlDecodeRe;\n\nconst\n    camelLettersRe = /([a-z])([A-Z])/g,\n    crlfRe         = /[\\n\\r]/g,\n    escapeRegExpRe = /[.*+?^${}()|[\\]\\\\]/g, // same as NPM escape-string-regexp\n    htmlRe         = /[&<]/,\n    idRe           = /(^[^a-z]+[^\\w]+)/gi,\n    whiteSpaceRe   = /\\s+/,\n    domIdRe        = /^[^a-z]+|[^\\w:.-]+/gi,\n\n    htmlDecoder = (m, captured) => entitiesToDecode[captured.toLowerCase()] || String.fromCharCode(parseInt(captured.substr(2), 10)),\n    htmlEncoder = (m, captured) => charsToEncode[captured],\n\n    hyphenateCamelLetters = (all, g1, g2) => {\n        return `${g1}-${g2.toLowerCase()}`;\n    },\n    separateCamelLetters = (all, g1, g2) => {\n        return `${g1} ${g2.toLowerCase()}`;\n    },\n    replaceNonIdChar    = c => {\n        if (c) {\n            return `_x${[...c].map((ch) => ch.charCodeAt(0).toString(16)).join('')}`;\n        }\n        return '__blank__';\n    },\n    hyphenateCache = {},\n    separatedCache = {};\n\n/**\n * Helper for string manipulation.\n */\nexport default class StringHelper {\n\n    //region Transform\n\n    /**\n     * Capitalizes the first letter of a string, \"myString\" -> \"MyString\".\n     * @param {String} string The string to capitalize\n     * @returns {String} The capitalized string or the value of `string` if falsy.\n     * @category String formatting\n     */\n    static capitalize(string) {\n        return string && (string[0].toUpperCase() + string.substr(1));\n    }\n\n    /**\n     * Makes the first letter of a string lowercase, \"MyString\" -> \"myString\".\n     * @param {String} string The string to un-capitalize.\n     * @returns {String} The un-capitalized string or the value of `string` if falsy.\n     * @category String formatting\n     */\n    static uncapitalize(string) {\n        return string && (string[0].toLowerCase() + string.substr(1));\n    }\n\n    /**\n     * Converts the passed camelCased string to a hyphen-separated string. eg \"minWidth\" -> \"min-width\"\n     * @param {String} string The string to convert.\n     * @returns {String} The string with adjoining lower and upper case letters\n     * separated by hyphens and converted to lower case.\n     * @category String formatting\n     * @internal\n     */\n    static hyphenate(string) {\n        // Cached since it is used heavily with DomHelper.sync()\n        const cached = hyphenateCache[string];\n        if (cached) {\n            return cached;\n        }\n        return hyphenateCache[string] = string.replace(camelLettersRe, hyphenateCamelLetters);\n    }\n\n    /**\n     * Converts the passed camelCased string to a capitalized, space-separated string. eg \"startDate\" -> \"Start date\".\n     * @param {String} string The string to convert.\n     * @returns {String} The string with spaces separating words.\n     * @category String formatting\n     * @internal\n     */\n    static separate(string) {\n        // Cached since it may be used heavily\n        const cached = separatedCache[string];\n        if (cached) {\n            return cached;\n        }\n        return separatedCache[string] = this.capitalize(string.replace(camelLettersRe, separateCamelLetters));\n    }\n\n    /**\n     * Creates an alphanumeric identifier from any passed string. Encodes spaces and non-alpha characters.\n     * @param {String} inString The string from which to strip non-identifier characters.\n     * @returns {String}\n     * @category Misc\n     * @internal\n     */\n    static createId(inString) {\n        return String(inString).replace(idRe, replaceNonIdChar);\n    }\n\n    static makeValidDomId(id, replaceValue = '') {\n        if (id == null) {\n            return null;\n        }\n\n        return String(id).replace(domIdRe, replaceValue);\n    }\n\n    //endregion\n\n    //region Html\n\n    static escapeRegExp(string, flags) {\n        // $& means the whole matched string\n        let ret = string.replace(escapeRegExpRe, '\\\\$&');\n\n        if (flags !== undefined) {\n            ret = new RegExp(ret, flags);\n        }\n\n        return ret;\n    }\n\n    /**\n     * This method decodes HTML entities and returns the original HTML.\n     *\n     * See also {@link #function-encodeHtml-static}.\n     * @param {String} str\n     * @returns {String}\n     * @category HTML\n     */\n    static decodeHtml(str) {\n        return str && String(str).replace(htmlDecodeRe, htmlDecoder);\n    }\n\n    /**\n     * This method encodes HTML entities and returns a string that can be placed in the document and produce the\n     * original text rather than be interpreted as HTML. Using this method with user-entered values prevents those\n     * values from executing as HTML (i.e., a cross-site scripting or \"XSS\" security issue).\n     *\n     * See also {@link #function-decodeHtml-static}.\n     * @param {String} str\n     * @returns {String}\n     * @category HTML\n     */\n    static encodeHtml(str = '') {\n        return str && String(str).replace(htmlEncodeRe, htmlEncoder);\n    }\n\n    /**\n     * This method is similar to {@link #function-encodeHtml-static} except that `\\n` and `\\r` characters in the\n     * given `str` are replaced by `<br>` tags _after_ first being encoded by {@link #function-encodeHtml-static}.\n     * @param {String} str\n     * @returns {String}\n     * @category HTML\n     * @internal\n     */\n    static encodeHtmlBR(str) {\n        return StringHelper.encodeHtml(str)?.replace(crlfRe, '<br>');\n    }\n\n    /**\n     * Returns `true` if the provided `text` contains special HTML characters.\n     * @param {String} text\n     * @returns {Boolean}\n     * @category HTML\n     * @internal\n     */\n    static isHtml(text) {\n        return typeof text === 'string' && htmlRe.test(text || '');\n    }\n\n    /**\n     * Initializes HTML entities used by {@link #function-encodeHtml-static} and {@link #function-decodeHtml-static}.\n     * @param {Object} [mappings] An object whose keys are characters that should be encoded and values are the HTML\n     * entity for the character.\n     * @private\n     */\n    static initHtmlEntities(mappings) {\n        mappings = mappings || {\n            '&' : '&amp;',\n            '>' : '&gt;',\n            '<' : '&lt;',\n            '\"' : '&quot;',\n            \"'\" : '&#39;'\n        };\n\n        const chars = Object.keys(mappings);\n\n        // Maps '<' to '&lt;'\n        charsToEncode = mappings;\n\n        // Inverts the mapping so we can convert '&lt;' to '<'\n        entitiesToDecode = chars.reduce((prev, val) => {\n            prev[mappings[val]] = val;\n            return prev;\n        }, {});\n\n        // Creates a regex char set like /([<&>])/g to match the characters that need to be encoded (escaping any of\n        // the regex charset special chars '[', ']' and '-'):\n        htmlEncodeRe = new RegExp(`([${chars.map(c => '[-]'.includes(c) ? '\\\\' + c : c).join('')}])`, 'g');\n\n        // Creates a regex like /(&lt;|&amp;|&gt;)/ig to match encoded entities... good news is that (valid) HTML\n        // entities do not contain any regex special characters:\n        htmlDecodeRe = new RegExp(`(${Object.values(mappings).join('|')}|&#[0-9]+;)`, 'ig');\n    }\n\n    //endregion\n\n    //region JSON\n\n    /**\n     * Parses JSON inside a try-catch block. Returns null if the string could not be parsed.\n     *\n     * @param {String} string String to parse\n     * @returns {Object} Resulting object or `null` if parse failed\n     * @category JSON\n     */\n    static safeJsonParse(string) {\n        let parsed = null;\n\n        try {\n            parsed = JSON.parse(string);\n        }\n        catch (e) {\n        }\n\n        return parsed;\n    }\n\n    /**\n     * Stringifies an object inside a try-catch block. Returns null if an exception is encountered.\n     *\n     * See [JSON.stringify on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify)\n     * for more information on the arguments.\n     *\n     * @param {Object} object The object to stringify\n     * @param {Function|String[]|Number[]} [replacer] A function or array of string/number used to determine properties\n     * to include in the JSON string\n     * @param {String|Number} [space] Number of spaces to indent or string used as whitespace\n     * @returns {String} Resulting object or null if stringify failed\n     * @category JSON\n     */\n    static safeJsonStringify(object, replacer = null, space = null) {\n        let result = null;\n\n        try {\n            result = JSON.stringify(object, replacer, space);\n        }\n        catch (e) {\n        }\n\n        return result;\n    }\n\n    //endregion\n\n    //region Split & join\n\n    /**\n     * Joins all given paths together using the separator as a delimiter and normalizes the resulting path.\n     * @param paths {Array} array of paths to join\n     * @param pathSeparator [{String}] path separator. Default value is '/'\n     * @returns {String}\n     * @category Misc\n     * @internal\n     */\n    static joinPaths(paths, pathSeparator = '/') {\n        return paths.join(pathSeparator).replace(new RegExp('\\\\' + pathSeparator + '+', 'g'), pathSeparator);\n    }\n\n    /**\n     * Returns the provided string split on whitespace. If the string is empty or consists of only whitespace, the\n     * returned array will be empty. If `str` is not a string, it is simply returned. This allows `null` or already\n     * split strings (arrays) to be passed through.\n     *\n     * For example:\n     * ```\n     *  console.log(StringHelper.split(' abc def xyz   '));\n     *  > ['abc', 'def', 'xyz']\n     *  console.log(StringHelper.split(''));\n     *  > []\n     * ```\n     * Compare to the standard `split()` method:\n     * ```\n     *  console.log(' abc def xyz   '.split(/\\s+/));\n     *  > ['', 'abc', 'def', 'xyz', '']\n     *  console.log(''.split(/\\s+/));\n     *  > ['']\n     * ```\n     * @param {String} str\n     * @param {String|RegExp} delimiter\n     * @returns {String[]}\n     * @category Misc\n     * @internal\n     */\n    static split(str, delimiter = whiteSpaceRe) {\n        let ret = str;\n\n        if (typeof ret === 'string') {\n            ret = str.trim();  // w/o trim() whitespace on the ends will give us '' in the array\n            ret = ret ? ret.split(delimiter) : []; // also ''.split() = ['']\n        }\n\n        return ret;\n    }\n\n    //endregion\n\n    //region XSS\n\n    /**\n     * This is a tagged template function that performs HTML encoding on replacement values to avoid XSS (Cross-Site\n     * Scripting) attacks.\n     *\n     * For example:\n     *\n     * ```javascript\n     *  eventRenderer(eventRecord) {\n     *      return StringHelper.xss`<span class=\"${eventRecord.attrib}\">${eventRecord.name}</span>`;\n     *  }\n     * ```\n     *\n     * @param {TemplateStringsArray} strings The template string array\n     * @param {...any} values The interpolated values in the template string\n     * @returns {String} The encoded string\n     * See {@link Core.helper.StringHelper#function-encodeHtml-static}.\n     */\n    static xss(strings, ...values) {\n        const buf = [];\n\n        let i = values.length;\n\n        buf[i] = strings[i];\n\n        while (i-- > 0) {\n            buf[i] = strings[i] + StringHelper.encodeHtml(values[i]);\n        }\n\n        return buf.join('');\n    }\n\n    /**\n     * This is a tagged template function that performs HTML encoding on replacement values to avoid XSS (Cross-Site\n     * Scripting) attacks. Unlike {@link Core.helper.StringHelper#function-xss-static}, this method converts `\\n` and\n     * `\\r` characters into `<br>` tags.\n     *\n     * For example:\n     *\n     * ```javascript\n     *  eventRenderer(eventRecord) {\n     *      return StringHelper.xssBR`<span class=\"${eventRecord.attrib}\">${eventRecord.name}</span>`;\n     *  }\n     * ```\n     *\n     * See {@link Core.helper.StringHelper#function-encodeHtmlBR-static}.\n     * @internal\n     */\n    static xssBR(strings, ...values) {\n        const buf = [];\n\n        let i = values.length;\n\n        buf[i] = strings[i];\n\n        while (i-- > 0) {\n            buf[i] = strings[i] + StringHelper.encodeHtmlBR(values[i]);\n        }\n\n        return buf.join('');\n    }\n\n    //endregion\n\n    //region JavaScript string\n\n    /**\n     * Converts a value to a JavaScript string (not JSON).\n     *\n     * For example a date to `\"new Date(y, m, d)\"`, an array to `\"[...]\"` etc.\n     *\n     * @param {*} value\n     * @param {Object} [options]\n     * @returns {String}\n     * @internal\n     */\n    static toJavaScriptValue(value, options) {\n        const type = Objects.typeOf(value);\n\n        if (type === 'boolean' || type === 'string' || type === 'number' || value === null) {\n            return StringHelper.safeJsonStringify(value);\n        }\n\n        if (value === globalThis) {\n            return 'window';\n        }\n        if (type === 'date') {\n            return `new Date(${value.getFullYear()}, ${value.getMonth()}, ${value.getDate()}, ${value.getHours()}, ${value.getMinutes()}, ${value.getSeconds()}, ${value.getMilliseconds()})`;\n        }\n        if (type === 'array') {\n            return `[${value.map(v => StringHelper.toJavaScriptValue(v, options))}]`;\n        }\n        if (type === 'object' || type === 'instance') {\n            return this.toJavaScriptString(value, options);\n        }\n        if (type === 'function') {\n            let contents = value.toString();\n\n            // async myFunction() {} => async function() {}\n            if (contents.match(/^async (\\w+?)\\(/)) {\n                contents = contents.replace(/^async (\\w+?)\\(/, 'async function(');\n            }\n            // Not an arrow fn? Replace name with function since we always add prop name prior to getting here\n            // eventRenderer() {} -> function() {}\n            else if (!contents.startsWith('async(') && contents.match(/^(\\w+?)\\(/)) {\n                contents = contents.replace(/^(\\w+?)\\(/, 'function(');\n            }\n\n            return contents;\n        }\n        if (type === 'class') {\n            if (value.toJavaScriptValue) {\n                return value.toJavaScriptValue(options);\n            }\n\n            return Object.prototype.hasOwnProperty.call(value, '$name') ? value.$name : value.name;\n        }\n    }\n\n    /**\n     * Converts an object into a JavaScript string (not JSON).\n     *\n     * For example `{ a: 1, b: [2, 3] }` -> `\"'{ a: 1, b: [2, 3] }'\"`\n     *\n     * @param {Object} obj\n     * @param {Object} [options]\n     * @returns {String}\n     * @internal\n     */\n    static toJavaScriptString(obj, options = {}) {\n        const\n            level      = options.level ?? 0,\n            intendSize = 2;\n\n        // Not using template strings to have control over indentation\n        return '{\\n' +\n            Object.keys(obj).map(key =>\n                // All properties in an object are indented one step further than the object itself\n                ' '.repeat((level + 1) * intendSize) + (key.match(/[- *]/) ? `\"${key}\"` : key) + `: ${StringHelper.toJavaScriptValue(obj[key], { ...options, level : level + 1 })}`\n            ).join(',\\n') +\n            // Closing brace is indented to same level as the object\n            '\\n' + ' '.repeat((level) * intendSize) + '}';\n    }\n\n    /**\n     * Escapes \" and \\ in CSS attribute selectors, e.g. [data-id=\"somevalue\"]\n     *\n     * Usage:\n     * ```javascript\n     * document.querySelector(StringHelper.cssAttributeQuery('data-id', 'id with & \\\\ chars'))\n     * ```\n     *\n     * @param {String} attr\n     * @param {String|Number} value\n     * @returns {String}\n     */\n    static encodeAttributeSelector(attr, value) {\n        return `[${attr}=\"${String(value).replace(/[\"\\\\]/g, '\\\\$&')}\"]`;\n    }\n\n    //endregion\n\n    //region UUID\n\n    static fakeNodeUUIDIndex = 0;\n\n    /**\n     * Generates a UUID. Uses `Crypto.randomUUID()` if available, otherwise generates a random UUID using\n     * `Crypto.getRandomValues()`.\n     *\n     * @returns {String}\n     */\n    static generateUUID() {\n        if (BrowserHelper.supportsRandomUUID) {\n            return globalThis.crypto.randomUUID();\n        }\n\n        // Node does not have crypto built in\n        if (globalThis.crypto?.getRandomValues) {\n            // https://stackoverflow.com/questions/105034/how-do-i-create-a-guid-uuid\n            return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>\n                (c ^ globalThis.crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)\n            );\n        }\n\n        // Node specific code, should never get here outside of node. Not actually a UUID, but should still be unique\n        // enough for our purposes, as long as value is not serialized\n        return `${Date.now()}-${++StringHelper.fakeNodeUUIDIndex}`;\n    }\n\n    //endregion\n}\n\nStringHelper.initHtmlEntities();\n","// IMPORTANT - adding imports here can create problems for Base class\n//  That is why this file was split from ObjectHelper\n\nimport StringHelper from '../StringHelper.js';\n\n/**\n * @module Core/helper/util/Objects\n */\n\nconst\n    { hasOwnProperty, toString } = Object.prototype,\n    { isFrozen } = Object,\n    afterRe      = /\\s*<\\s*/,\n    beforeRe     = /\\s*>\\s*/,\n    blendOptions = {},\n    typeCache    = {},\n    emptyObject  = Object.freeze({});\n\n// Static methods are not displayed in derived class documentation. Therefore, since this is an internal class, the\n// workaround is to copy method documentation to ObjectHelper (the public interface). Also tried making ObjectHelper\n// a singleton.\n\n/**\n * Helper for low-level Object manipulation.\n *\n * While documented on {@link Core.helper.ObjectHelper}, the following static methods are implemented by this class:\n *\n * - `{@link Core.helper.ObjectHelper#function-assign-static}`\n * - `{@link Core.helper.ObjectHelper#function-assignIf-static}`\n * - `{@link Core.helper.ObjectHelper#function-clone-static}`\n * - `{@link Core.helper.ObjectHelper#function-createTruthyKeys-static}`\n * - `{@link Core.helper.ObjectHelper#function-getPath-static}`\n * - `{@link Core.helper.ObjectHelper#function-getTruthyKeys-static}`\n * - `{@link Core.helper.ObjectHelper#function-getTruthyValues-static}`\n * - `{@link Core.helper.ObjectHelper#function-isEmpty-static}`\n * - `{@link Core.helper.ObjectHelper#function-isObject-static}`\n * - `{@link Core.helper.ObjectHelper#function-merge-static}`\n * - `{@link Core.helper.ObjectHelper#function-setPath-static}`\n * - `{@link Core.helper.ObjectHelper#function-typeOf-static}`\n * @internal\n */\nexport default class Objects {\n    static assign(dest, ...sources) {\n        for (let source, key, i = 0; i < sources.length; i++) {\n            source = sources[i];\n\n            if (source) {\n                for (key in source) {\n                    dest[key] = source[key];\n                }\n            }\n        }\n\n        return dest;\n    }\n\n    static assignIf(dest, ...sources) {\n        for (let source, key, i = 0; i < sources.length; i++) {\n            source = sources[i];\n\n            if (source) {\n                for (key in source) {\n                    if (!(key in dest) || dest[key] === undefined) {\n                        dest[key] = source[key];\n                    }\n                }\n            }\n        }\n\n        return dest;\n    }\n\n    static blend(dest, source, options) {\n        options = options || blendOptions;\n        dest = dest || {};\n\n        const { clone = Objects.clone, merge = Objects.blend } = options;\n\n        if (Array.isArray(source)) {\n            if (source.length > 1) {\n                source.forEach(s => {\n                    dest = Objects.blend(dest, s, options);\n                });\n\n                return dest;\n            }\n\n            source = source[0];\n        }\n\n        if (source) {\n            let destValue, key, value;\n\n            for (key in source) {\n                value = source[key];\n\n                if (value && Objects.isObject(value)) {\n                    destValue = dest[key];\n                    options.key = key;\n\n                    if (destValue && Objects.isObject(destValue)) {\n                        if (isFrozen(destValue)) {\n                            dest[key] = destValue = clone(destValue, options);\n                        }\n\n                        value = merge(destValue, value, options);\n                    }\n                    else {\n                        // We don't need to clone frozen objects, but we do clone mutable objects as they get\n                        // applied to the dest.\n                        value = isFrozen(value) ? value : clone(value, options);\n                    }\n                }\n\n                dest[key] = value;\n            }\n        }\n\n        return dest;\n    }\n\n    static clone(value, handler) {\n        let cloned = value,\n            key;\n\n        if (value && typeof value === 'object') {\n            const options = handler && typeof handler === 'object' && handler;\n\n            if (options) {\n                // When using blend(), the 2nd argument is the options object, so ignore that case\n                handler = null;\n            }\n\n            if (Objects.isObject(value)) {\n\n                // When using DomSync, DomConfigs are usually recreated from scratch on each sync, we allow opting out\n                // of cloning them (costly for many elements)\n                if (value.skipClone) {\n                    cloned = value;\n                }\n                else {\n                    cloned = {};\n\n                    for (key in value) {\n                        cloned[key] = Objects.clone(value[key]);\n                    }\n                }\n            }\n            else if (Array.isArray(value)) {\n                cloned = [];\n\n                // Loop backwards to:\n                //  1. read source.length once\n                //  2. get result array sized on first pass (avoid growing)\n                for (key = value.length; key-- > 0; /* empty */) {\n                    cloned[key] = Objects.clone(value[key]);\n                }\n            }\n            else if (Objects.isDate(value)) {\n                cloned = new Date(value.getTime());\n            }\n            else if (handler) {\n                // Allow other types to be handled (e.g., DOM nodes).\n                cloned = handler(value);\n            }\n        }\n\n        return cloned;\n    }\n\n    static createTruthyKeys(source) {\n        const\n            keys = StringHelper.split(source),\n            result = keys && {};\n\n        if (keys) {\n            for (const key of keys) {\n                // StringHelper.split won't return empty keys if passed a string, but we\n                // could have been passed a String[]\n                if (key) {\n                    result[key] = true;\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Returns value for a given path in the object\n     * @param {Object} object Object to check path on\n     * @param {String} path Dot-separated path, e.g. 'object.childObject.someKey'\n     * @returns {*} Value associated with passed key\n     */\n    static getPath(object, path) {\n        return path.split('.').reduce((result, key) => {\n            return (result || emptyObject)[key];\n        }, object);\n    }\n\n    /**\n     * Returns value for a given path in the object, placing a passed default value in at the\n     * leaf property and filling in undefined properties all the way down.\n     * @param {Object} object Object to get path value for.\n     * @param {String|Number|String[]|Number[]} path Dot-separated path, e.g. 'firstChild.childObject.someKey',\n     * or the key path as an array, e.g. ['firstChild', 'childObject', 'someKey'].\n     * @param {*} [defaultValue] Optionally the value to put in as the `someKey` property.\n     * @returns {*} Value at the leaf position of the path.\n     */\n    static getPathDefault(object, path, defaultValue) {\n        const\n            keys   = Array.isArray(path) ? path : typeof path === 'string' ? path.split('.') : [path],\n            length = keys.length - 1;\n\n        return keys.reduce((result, key, index) => {\n            if (defaultValue && !(key in result)) {\n                // Can't use emptyObject here, we are creating a node in the object tree\n                result[key] = index === length ? defaultValue : {};\n            }\n\n            return (result || emptyObject)[key];\n        }, object);\n    }\n\n    /**\n     * Determines if the specified path exists\n     * @param {Object} object Object to check path on\n     * @param {String} path Dot-separated path, e.g. 'object.childObject.someKey'\n     * @returns {Boolean}\n     */\n    static hasPath(object, path) {\n        return path.split('.').every(key => {\n            if (key in object) {\n                object = object[key];\n                return true;\n            }\n            return false;\n        });\n    }\n\n    static getTruthyKeys(source) {\n        const keys = [];\n\n        for (const key in source) {\n            if (source[key]) {\n                keys.push(key);\n            }\n        }\n\n        return keys;\n    }\n\n    static getTruthyValues(source) {\n        const values = [];\n\n        for (const key in source) {\n            if (source[key]) {\n                values.push(source[key]);\n            }\n        }\n\n        return values;\n    }\n\n    static isClass(object) {\n        if (typeof object === 'function' && object.prototype?.constructor === object) {\n            // TODO find a way to differentiate function(){} from class{}\n            return true;\n        }\n\n        return false;\n    }\n\n    static isDate(object) {\n        // A couple quick rejections but only sure way is typeOf:\n        return Boolean(object?.getUTCDate) && Objects.typeOf(object) === 'date';\n    }\n\n    /**\n     * Check if passed object is a Promise or contains `then` method.\n     * Used to fix problems with detecting promises in code with `instance of Promise` when\n     * Promise class is replaced with any other implementation like `ZoneAwarePromise` in Angular.\n     * Related to these issues:\n     * https://github.com/bryntum/support/issues/791\n     * https://github.com/bryntum/support/issues/2990\n     *\n     * @param {Object} object object to check\n     * @returns {Boolean} truthy value if object is a Promise\n     * @internal\n     */\n    static isPromise(object) {\n        if (Promise && Promise.resolve) {\n            return Promise.resolve(object) === object || typeof object?.then === 'function';\n        }\n        throw new Error('Promise not supported in your environment');\n    }\n\n    static isEmpty(object) {\n        if (object && typeof object === 'object') {\n            // noinspection LoopStatementThatDoesntLoopJS\n            for (const p in object) { // eslint-disable-line no-unused-vars,no-unreachable-loop\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    static isObject(value) {\n        const C = value?.constructor;\n\n        return Boolean(C\n            // Most things have a .constructor property\n            ? (\n                // An in-frame instance of Object\n                C === Object ||\n                // Detect cross-frame objects, but exclude instance of custom classes named Object. typeOf(value) is\n                // \"object\" even for instances of a class and typeOf(C) is \"function\" for all constructors. We'll have\n                // to settle for relying on the fact that getPrototypeOf(Object.prototype) === null.\n                // NOTE: this issue does come up in Scheduler unit tests at least.\n                (C.getPrototypeOf && C.prototype && !Object.getPrototypeOf(C.prototype))\n            )\n            // Since all classes have a constructor property, an object w/o one is likely from Object.create(null). Of\n            // course, primitive types do not have \".constructor\"\n            : (value && typeof value === 'object')\n        );\n    }\n\n    static isInstantiated(object) {\n        return object ? typeof object === 'object' && !Objects.isObject(object) : false;\n    }\n\n    static merge(dest, ...sources) {\n        return Objects.blend(dest, sources);\n    }\n\n    /**\n     * Merges two \"items\" objects. An items object is a simple object whose keys act as identifiers and whose values\n     * are \"item\" objects. An item can be any object type. This method is used to merge such objects while maintaining\n     * their property order. Special key syntax is used to allow a source object to insert a key before or after a key\n     * in the `dest` object.\n     *\n     * For example:\n     * ```javascript\n     *  let dest = {\n     *      foo : {},\n     *      bar : {},\n     *      fiz : {}\n     *  }\n     *\n     *  console.log(Object.keys(dest));\n     *  > [\"foo\", \"bar\", \"fiz\"]\n     *\n     *  dest = mergeItems(dest, {\n     *      'zip > bar' : {}    // insert \"zip\" before \"bar\"\n     *      'bar < zap' : {}    // insert \"zap\" after \"bar\"\n     *  });\n     *\n     *  console.log(Object.keys(dest));\n     *  > [\"foo\", \"zip\", \"bar\", \"zap\", \"fiz\"]\n     * ```\n     *\n     * @param {Object} dest The destination object.\n     * @param {Object|Object[]} src The source object or array of source objects to merge into `dest`.\n     * @param {Object} [options] The function to use to merge items.\n     * @param {Function} [options.merge] The function to use to merge items.\n     * @returns {Object} The merged object. This will be the `dest` object.\n     * @internal\n     */\n    static mergeItems(dest, src, options) {\n        options = options || blendOptions;\n\n        let anchor, delta, index, indexMap, key, shuffle, srcVal;\n\n        const { merge = Objects.blend } = options;\n        dest = dest || {};\n\n        if (Array.isArray(src)) {\n            src.forEach(s => {\n                dest = Objects.mergeItems(dest, s, options);\n            });\n        }\n        else if (src) {\n            // https://2ality.com/2015/10/property-traversal-order-es6.html\n            // Bottom line: Object keys are iterated in declared/insertion order... unless the key is an integer or\n            // Symbol, but we don't care about those generally.\n            for (key in src) {\n                srcVal = src[key];\n                anchor = null;\n\n                // Allow a key to be added before or after another:\n                //\n                //  {\n                //      'foo > bar' : {\n                //          ...\n                //      },\n                //      'bar < derp' : {\n                //          ...\n                //      }\n                //  }\n                //\n                // The goal above is to add a 'foo' key before the existing 'bar' key while adding a 'derp' key after\n                // 'bar'.\n\n                if (key.includes('>')) {\n                    [key, anchor] = key.split(beforeRe);\n                    delta = 0;\n                }\n                else if (key.includes('<')) {\n                    [anchor, key] = key.split(afterRe);\n                    delta = 1;\n                }\n\n                if (key in dest) {\n                    // Changing the value of a key does not change its iteration order. Since \"key in dest\" we can do\n                    // what we need directly.\n                    if (srcVal && dest[key] && merge) {\n                        options.key = key;\n                        srcVal = merge(dest[key], srcVal, options);\n                    }\n\n                    dest[key] = srcVal;\n                }\n                else if (!anchor) {\n                    dest[key] = srcVal;\n                    indexMap?.set(key, indexMap.size);\n                }\n                else {\n                    // Lazily sprout the item index map. When we first merge an item into an items object, we create this\n                    // Map to control the ordering. This is because any keys we add would necessarily be iterated after\n                    // the original properties.\n                    if (!indexMap) {\n                        indexMap = new Map();\n                        index = 0;\n\n                        for (const k in dest) {\n                            indexMap.set(k, index++);\n                        }\n                    }\n\n                    index = indexMap.get(anchor);\n                    dest[key] = srcVal;\n\n                    if (index == null && delta) {\n                        index = indexMap.size;\n                    }\n                    else {\n                        shuffle = shuffle || [];\n                        index = (index || 0) + delta;\n\n                        // Adjust all key indices >= index up by 1 to maintain integer indices (required by the above\n                        // use case).\n                        for (const item of indexMap) {\n                            const [k, v] = item;\n\n                            if (index <= v) {\n                                /*\n                                Consider object w/the following order:\n                                    {\n                                        foo : {}',\n                                        bar : {},\n                                        baz : {},\n                                        zip : {},\n                                        goo : {},\n                                        fiz : {}\n                                    }\n\n                                The indexMap is:\n\n                                    foo : 0\n                                    bar : 1\n                                    baz : 2\n                                    zip : 3\n                                    goo : 4\n                                    fiz : 5\n\n                                To insert before goo, we populate shuffle thusly (to set up for popping):\n\n                                    +-----+-----+\n                                    | fiz | goo |\n                                    +-----+-----+\n                                      0        1\n                                      =6-5-1   =6-4-1\n                                */\n                                shuffle && (shuffle[indexMap.size - v - 1] = k);\n\n                                indexMap.set(k, v + 1);\n                            }\n                        }\n\n                        // Delete and re-add the keys that should follow the new key to establish the iteration order\n                        // we need:\n                        if (shuffle) {\n                            while (shuffle.length) {\n                                const\n                                    k = shuffle.pop(),\n                                    v = dest[k];\n\n                                delete dest[k];\n                                dest[k] = v;\n                            }\n                        }\n                    }\n\n                    indexMap.set(key, index);\n                }\n            }\n        }\n\n        return dest;\n    }\n\n    /**\n     * Sets value for a given path in the object\n     * @param {Object} object Target object\n     * @param {String} path Dot-separated path, e.g. 'object.childObject.someKey'\n     * @param {*} value Value for a given path\n     * @returns {Object} Returns passed object\n     */\n    static setPath(object, path, value) {\n        path.split('.').reduce((result, key, index, array) => {\n            const isLast = index === array.length - 1;\n\n            if (isLast) {\n                return result[key] = value;\n            }\n            else if (!(result[key] instanceof Object)) {\n                result[key] = {};\n            }\n\n            return result[key];\n        }, object);\n\n        return object;\n    }\n\n    static typeOf(value) {\n        let trueType, type;\n\n        if (value === null) {\n            type = 'null';\n        }\n        // NaN is the only value that is !== to itself\n        else if (value !== value) { // eslint-disable-line no-self-compare\n            type = 'nan';\n        }\n        else {\n            type = typeof value;\n\n            if (type === 'object') {\n                if (value.isBase) {\n                    type = 'instance';\n                }\n                else if (Array.isArray(value)) {\n                    type = 'array';\n                }\n                else if (!(type = typeCache[trueType = toString.call(value)])) {\n                    typeCache[trueType] = type = trueType.slice(8, -1).toLowerCase();  // '[object Date]' => 'date'\n                }\n            }\n            else if (type === 'function' && value.isBase) {\n                type = 'class';\n            }\n        }\n\n        return type;\n    }\n}\n\n// TODO remove this once we have the polyfill or don't need it\n//  https://caniuse.com/mdn-javascript_builtins_object_hasown\n//  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn\nObject.defineProperty(Objects, 'hasOwn', {\n    // When available, this avoids an extra layer of function call around it:\n    value : Object.hasOwn || ((object, property) => hasOwnProperty.call(object, property))\n});\n","import BrowserHelper from './BrowserHelper.js';\nimport StringHelper from './StringHelper.js';\n\n/**\n * @module Core/helper/VersionHelper\n */\n\n/**\n * Helper for version handling\n * @private\n * @example\n *\n * VersionHelper.setVersion('grid', '1.5');\n *\n * if (VersionHelper.getVersion('grid').isNewerThan('1.0')) {\n *   ...\n * }\n */\nexport default class VersionHelper {\n    /**\n     * Set version for specified product\n     * @private\n     * @param {String} product\n     * @param {String} version\n     */\n    static setVersion(product, version) {\n        product = product.toLowerCase();\n\n        VH[product] = {\n            version,\n            isNewerThan(otherVersion) {\n                return VersionHelper.semanticCompareVersion(otherVersion, version, '<');\n            },\n            isOlderThan(otherVersion) {\n                return VersionHelper.semanticCompareVersion(otherVersion, version, '>');\n            }\n        };\n\n        let bundleFor = '';\n\n        // Var productName is only defined in bundles, it is internal to bundle so not available on window. Used to\n        // tell importing combinations of grid/scheduler/gantt bundles apart from loading same bundle twice\n        // eslint-disable-next-line no-undef\n        if (typeof productName !== 'undefined') {\n            // eslint-disable-next-line no-undef\n            bundleFor = productName;\n        }\n\n        // Set \"global\" flag to detect bundle being loaded twice\n        const globalKey = `${bundleFor}.${product}${version.replace(/\\./g, '-')}`;\n\n        if (BrowserHelper.isBrowserEnv && !globalThis.bryntum.silenceBundleException) {\n            if (globalThis.bryntum[globalKey] === true) {\n                if (this.isTestEnv) {\n                    globalThis.BUNDLE_EXCEPTION = true;\n                }\n                else {\n                    let errorProduct = bundleFor || product;\n\n                    if (errorProduct === 'core') {\n                        errorProduct = 'grid';\n                    }\n\n                    let capitalized  = StringHelper.capitalize(errorProduct);\n\n                    if (errorProduct === 'schedulerpro') {\n                        capitalized = 'SchedulerPro';\n                    }\n\n                    throw new Error(\n                        `The Bryntum ${capitalized} bundle was loaded multiple times by the application.\\n\\n` +\n                        `Common reasons you are getting this error includes:\\n\\n` +\n                        `* Imports point to different types of the bundle (e.g. *.module.js and *.umd.js)\\n` +\n                        `* Imports point to both sources and bundle\\n` +\n                        `* Imports do not use the shortest relative path, JS treats them as different files\\n` +\n                        `* Cache busters differ between imports, JS treats ${errorProduct}.module.js?1 and ${errorProduct}.module.js?2 as different files\\n` +\n                        `* Imports missing file type, verify they all end in .js\\n\\n` +\n                        `See https://bryntum.com/products/${errorProduct}/docs/guide/${capitalized}/gettingstarted/es6bundle#troubleshooting for more information\\n\\n`\n                    );\n                }\n            }\n            else {\n                globalThis.bryntum[globalKey] = true;\n            }\n        }\n    }\n\n    /**\n     * Get (previously set) version for specified product\n     * @private\n     * @param {String} product\n     */\n    static getVersion(product) {\n        product = product.toLowerCase();\n\n        if (!VH[product]) {\n            throw new Error('No version specified! Please check that you import VersionHelper correctly into the class from where you call `deprecate` function.');\n        }\n\n        return VH[product].version;\n    }\n\n    /**\n     * Checks the version1 against the passed version2 using the comparison operator.\n     * Supports `rc`, `beta`, `alpha` release states. Eg. `1.2.3-alpha-1`.\n     * State which is not listed above means some version below `alpha`.\n     * @param {String} version1 The version to test against\n     * @param {String} version2 The version to test against\n     * @param {String} [comparison] The comparison operator, `<=`, `<`, `=`, `>` or `>=`.\n     * @returns {Boolean} `true` if the test passes.\n     * @internal\n     */\n    static semanticCompareVersion(version1, version2, comparison = '=') {\n        version1 = version1 || '';\n        version2 = version2 || '';\n        const\n            version1Arr  = version1.split(/[-.]/),\n            version2Arr  = version2.split(/[-.]/),\n            isLower      = comparison.includes('<'),\n            normalizeArr = (arr, maxLength) => {\n                const\n                    states = ['rc', 'beta', 'alpha'],\n                    result = arr.map(v => {\n                        if (states.includes(v)) {\n                            return -states.indexOf(v) - 2;\n                        }\n                        const res = Number.parseInt(v);\n                        return Number.isNaN(res) ? -states.length : res;\n                    });\n\n                while (result.length < maxLength) {\n                    result.push(-1);\n                }\n                return result;\n            },\n            compareArr   = () => {\n                const\n                    maxLength = Math.max(version1Arr.length, version2Arr.length),\n                    arr1      = normalizeArr(version1Arr, maxLength),\n                    arr2      = normalizeArr(version2Arr, maxLength);\n\n                for (let i = 0; i < maxLength; i++) {\n                    if (arr1[i] !== arr2[i]) {\n                        return isLower ? arr1[i] < arr2[i] : arr1[i] > arr2[i];\n                    }\n                }\n                return true;\n            };\n\n        switch (comparison) {\n            case '=':\n                return version1 === version2;\n            case '<=':\n            case '>=':\n                return (version1 === version2) || compareArr();\n            case '<':\n            case '>':\n                return (version1 !== version2) && compareArr();\n        }\n\n        return false;\n    }\n\n    /**\n     * Checks the passed product against the passed version using the passed test.\n     * @param {String} product The name of the product to test the version of\n     * @param {String} version The version to test against\n     * @param {String} operator The test operator, `<=`, `<`, `=`, `>` or `>=`.\n     * @returns {Boolean} `true` if the test passes.\n     * @internal\n     */\n    static checkVersion(product, version, operator) {\n        return VersionHelper.semanticCompareVersion(VH.getVersion(product), version, operator);\n    }\n\n    /**\n     * Based on a comparison of current product version and the passed version this method either outputs a console.warn\n     * or throws an error.\n     * @param {String} product The name of the product\n     * @param {String} invalidAsOfVersion The version where the offending code is invalid (when any compatibility layer\n     * is actually removed).\n     * @param {String} message Required! A helpful warning message to show to the developer using a deprecated API.\n     * @internal\n     */\n    static deprecate(product, invalidAsOfVersion, message) {\n        const justWarn = VH.checkVersion(product, invalidAsOfVersion, '<');\n\n        //<debug>\n        if (!invalidAsOfVersion.endsWith('.0.0')) {\n            throw new Error('May only break APIs in major releases');\n        }\n        if (!message) {\n            throw new Error('Must provide helpful message for developers');\n        }\n        //</debug>\n\n        if (justWarn) {\n            //<debug>\n            // Warnings don't get callstacks but that makes them hard to find especially in automated tests, so add a\n            // portion of the callstack that got us here.\n            if (VH.skipStack) {\n                --VH.skipStack;\n            }\n            else {\n                let stack = new Error().stack;\n\n                if (stack.startsWith('Error\\n')) {\n                    stack = stack.substr(6);  // Chrome\n                }\n\n                stack = stack.split('\\n');\n\n                if (stack[0].includes('VersionHelper')) {\n                    // excluding this function...\n                    stack.shift();\n                }\n\n                if (stack.length > 10) {\n                    stack[10] = `+ ${stack.length - 10} more...`;\n                    stack = stack.slice(0, 11);\n                }\n\n                message += ':\\n' + stack.join('\\n');\n            }\n            //</debug>\n\n            // During the grace period (until the next major release following the deprecated code), just show a console warning\n            console.warn(`Deprecation warning: You are using a deprecated API which will change in v${invalidAsOfVersion}. ${message}`);\n        }\n        else {\n            throw new Error(`Deprecated API use. ${message}`);\n        }\n    }\n\n    /**\n     * Returns truthy value if environment is in testing mode\n     * @returns {Boolean}\n     * @internal\n     **/\n    static get isTestEnv() {\n        const isTestEnv = Boolean(globalThis.bryntum?.isTestEnv);\n        try {\n            return isTestEnv || Boolean(globalThis.parent?.bryntum?.isTestEnv);\n        }\n        catch (e) {\n            // Accessing parent may cause CORS violation\n            return isTestEnv;\n        }\n    }\n\n    static get isDebug() {\n        let result = false;\n        //<debug>\n        result = true;\n        //</debug>\n        return result;\n    }\n}\n\nconst VH = VersionHelper;\n\n//<debug>\nVH.skipStack = 0;\n//</debug>\n\nif (BrowserHelper.isBrowserEnv) {\n    if (VH.isTestEnv) {\n        BrowserHelper._isHoverableDevice = true;\n    }\n\n    globalThis.bryntum = Object.assign(globalThis.bryntum || {}, {\n        getVersion   : VH.getVersion.bind(VH),\n        checkVersion : VH.checkVersion.bind(VH),\n        deprecate    : VH.deprecate.bind(VH),\n        license      : '%LICENSE%'\n    });\n}\n","import Objects from './helper/util/Objects.js';\n\n// We cannot import ObjectHelper because of the import cycle:\n//  ObjectHelper -> DateHelper -> LocaleManager -> Base -> us\n\n/**\n * @module Core/Config\n */\n\nconst\n    { defineProperty, getOwnPropertyDescriptor } = Reflect,\n\n    { hasOwnProperty, toString } = Object.prototype,\n    instancePropertiesSymbol     = Symbol('instanceProperties'),\n    configuringSymbol            = Symbol('configuring'),\n    lazyConfigValues             = Symbol('lazyConfigValues'),\n    DATE_TYPE                    = toString.call(new Date()),\n    whitespace                   = /\\s+/,\n    createClsProps               = (result, cls) => {\n        result[cls] = 1;\n        return result;\n    };\n\n/**\n * This class holds the description of a config property. Only one instance of this class is needed for each config\n * name (e.g., \"text\"). If config options are supplied, however, they also contribute to the cached instance.\n *\n * Instances should always be retrieved by calling `Config.get()`.\n *\n * The **Configs** of this class correspond to `options` that can be supplied to the `get()` method. These affect the\n * behavior of the config property in some way, as descried by their respective documentation.\n *\n * This class is not used directly.\n *\n * ## The Setter\n * The primary functionality provided by `Config` is its standard setter. This setter function ensures consistent\n * behavior when modifying config properties.\n *\n * The standard setter algorithm is as follows (using the `'text'` config for illustration):\n *\n *  - If the class defines a `changeText()` method, call it passing the new value and the current value:\n *    `changeText(newText, oldText)`.<br>\n *    Then:\n *    * If `changeText()` exits without returning a value (i.e., `undefined`), exit and do nothing further. The\n *      assumption is that the changer method has done all that is required.\n *    * Otherwise, the return value of `changeText()` replaces the incoming value passed to the setter.\n *  - If the new value (or the value returned by `changeText()`) is `!==` to the current value:\n *    * Update the stored config value in `this._text`.\n *    * If the class defines an `updateText()` method, call it passing the new value and the previous value.\n *      `updateText(newText, oldText)`\n *    * If the class defines an `onConfigChange()` method, call it passing an object with the following properties:\n *        - `name` - The config's name\n *        - `value` - The new value\n *        - `was` - The previous value\n *        - `config` - The `Config` instance.\n *\n * NOTE: unlike `changeText()` and `updateText()`, the name of the `onConfigChange()` method is unaffected by the\n * config's name.\n *\n * @internal\n */\nexport default class Config {\n    /**\n     * Returns the `Config` instance for the given `name` and `options`.\n     * @param {String} name The name of the config (e.g., 'text' for the text config).\n     * @param {Object} [options] Config behavior options.\n     * @returns {Core.Config}\n     * @internal\n     */\n    static get(name, options) {\n        const\n            { cache } = this,\n            baseCfg = cache[name] || (cache[name] = new Config(name));\n\n        let cfg = baseCfg,\n            key;\n\n        if (options) {\n            key = Config.makeCacheKey(name, options);\n\n            if (!(cfg = key && cache[key])) {\n                cfg = baseCfg.extend(options);\n\n                if (key) {\n                    cache[key] = cfg;\n                }\n            }\n        }\n\n        return cfg;\n    }\n\n    constructor(name) {\n        const\n            me = this,\n            cap = name[0].toUpperCase() + name.substr(1);\n\n        me.base = me;  // so extend()ed configs have a link to the base definition\n        me.name = name;\n        me.field = '_' + name;\n        me.capName = cap;\n        me.changer = 'change' + cap;\n        me.initializing = 'initializing' + cap;\n        me.updater = 'update' + cap;\n    }\n\n    /**\n     * The descriptor to use with `Reflect.defineProperty()` for defining this config's getter and setter.\n     * @property {Object}\n     * @private\n     */\n    get descriptor() {\n        let descriptor = this._descriptor;\n\n        if (!descriptor || !hasOwnProperty.call(this, '_descriptor')) {\n            // lazily make the descriptor\n            this._descriptor = descriptor = this.makeDescriptor();\n        }\n\n        return descriptor;\n    }\n\n    /**\n     * The descriptor to use with `Reflect.defineProperty()` for defining this config's initter.\n     * @property {Object}\n     * @private\n     */\n    get initDescriptor() {\n        let descriptor = this._initDescriptor;\n\n        if (!descriptor || !hasOwnProperty.call(this, '_initDescriptor')) {\n            // lazily make the descriptor\n            this._initDescriptor = descriptor = this.makeInitter();\n        }\n\n        return descriptor;\n    }\n\n    /**\n     * This method compares two values for semantic equality. By default, this is based on the `===` operator. This\n     * is often overridden for configs that accept `Date` or array values.\n     * @param {*} value1\n     * @param {*} value2\n     * @returns {Boolean}\n     * @internal\n     */\n    equal(value1, value2) {\n        return value1 === value2;\n    }\n\n    /**\n     * Extends this config with a given additional set of options. These objects are just prototype extensions of this\n     * instance.\n     * @param {Object} options\n     * @returns {Core.Config}\n     * @internal\n     */\n    extend(options) {\n        const\n            cfg = Object.assign(Object.create(this), options),\n            { equal, merge } = options,\n            { equalityMethods } = Config;\n\n        if (typeof equal === 'string') {\n            if (equal.endsWith('[]')) {\n                cfg.equal = Config.makeArrayEquals(equalityMethods[equal.substr(0, equal.length - 2)]);\n            }\n            else {\n                cfg.equal = equalityMethods[equal];\n            }\n        }\n\n        if (typeof merge === 'string') {\n            // Base uses { merge : 'replace' } for defaultConfig properties\n            cfg.merge = Config.mergeMethods[merge];\n        }\n\n        return cfg;\n    }\n\n    /**\n     * Defines the property on a given target object via `Reflect.defineProperty()`. If the object has its own getter,\n     * it will be preserved. It is invalid to define a setter.\n     * @param {Object} target\n     * @internal\n     */\n    define(target) {\n        const existing = getOwnPropertyDescriptor(target, this.name);\n\n        let descriptor = this.descriptor;\n\n        //<debug>\n        if (existing && existing.set) {\n            throw new Error(`${target.constructor ? target.constructor.name : target.name}.${\n                this.name} config cannot have a defined setter`);\n        }\n        //</debug>\n\n        if (existing && existing.get) {\n            descriptor = Object.assign({}, descriptor);\n            descriptor.get = existing.get;\n        }\n\n        defineProperty(target, this.name, descriptor);\n    }\n\n    /**\n     * Defines the property initter on the `target`. This is a property getter/setter that propagates the configured\n     * value when the property is read.\n     * @param {Object} target\n     * @param {*} value\n     * @internal\n     */\n    defineInitter(target, value) {\n        const\n            { name } = this,\n            properties = target[instancePropertiesSymbol];\n\n        let lazyValues, prop;\n\n        // If there is an existing property with a getter/setter, *not* a value\n        // defined on the object for this config we must call it in our injected getter/setter.\n        if (!properties[name] && (/* assign */prop = getOwnPropertyDescriptor(target, name)) && !('value' in prop)) {\n            properties[name] = prop;\n        }\n\n        // Set up a temporary instance property which will pull in the value from the initialConfig if the getter\n        // is called first.\n        defineProperty(target, name, this.initDescriptor);\n\n        if (this.lazy) {\n            lazyValues = target[lazyConfigValues] || (target[lazyConfigValues] = new Map());\n\n            lazyValues.set(name, value);\n        }\n    }\n\n    /**\n     * Returns an equality function for arrays of a base type, for example `'date'`.\n     * @param {Function} [fn] The function to use to compare array elements. By default, operator `===` is used.\n     * @returns {Function}\n     * @private\n     */\n    static makeArrayEquals(fn) {\n        return (value1, value2) => {\n            let i,\n                equal = value1 && value2 && value1.length === (i = value2.length);\n\n            if (equal && Array.isArray(value1) && Array.isArray(value2)) {\n                if (fn) {\n                    while (equal && i-- > 0) {\n                        equal = fn(value1[i], value2[i]);\n                    }\n                }\n                else {\n                    while (equal && i-- > 0) {\n                        equal = value1[i] === value2[i];\n                    }\n                }\n            }\n            else {\n                equal = fn ? fn(value1, value2) : (value1 === value2);\n            }\n\n            return equal;\n        };\n    }\n\n    /**\n     * Returns the key to use in the Config `cache`.\n     * @param {String} name The name of the config property.\n     * @param {Object} options The config property options.\n     * @returns {String}\n     * @private\n     */\n    static makeCacheKey(name, options) {\n        const keys = Object.keys(options).sort();\n\n        for (let key, type, value, i = keys.length; i-- > 0; /* empty */) {\n            value = options[key = keys[i]];\n\n            if (value == null && value === false) {\n                keys.splice(i, 1);\n            }\n            else {\n                type = typeof value;\n\n                if (type === 'function') {\n                    return null;\n                }\n\n                if (type === 'string') {\n                    keys[i] = `${key}:\"${value}\"`;\n                }\n                else if (type === 'number') {\n                    keys[i] = `${key}:${value}`;\n                }\n                // that leaves bool and object, but there are no (valid) config options that are objects... so ignore\n            }\n        }\n\n        return keys.length ? `${name}>${keys.join('|')}` : name;  // eg: 'text>render|merge:v => v|bar'\n    }\n\n    /**\n     * Creates and returns a property descriptor for this config suitable to be passed to `Reflect.defineProperty()`.\n     * @returns {Object}\n     * @private\n     */\n    makeDescriptor() {\n        const\n            config = this,\n            { base, field, changer, updater, name } = config;\n\n        if (base !== config && base.equal === config.equal) {\n            // At present only the equal option affects the setter, so all configs can share the\n            // descriptor of the base-most config definition unless their equality test fns differ.\n            return base.descriptor;\n        }\n\n        return {\n            get() {\n                // Allow folks like Widget.compose() to monitor getter calls\n                this.configObserver?.get(name, this);\n\n                return this[field];\n            },\n\n            set(value) {\n                const me = this;\n\n                let was = me[field],\n                    applied, newValue;\n\n                // Resolve values starting with 'up.' by traversing owners to find it\n                if (typeof value === 'string') {\n                    let resolvedValue = value;\n\n                    if (value.startsWith('up.')) {\n                        resolvedValue = me.owner?.resolveProperty(value.substr(3));\n                    }\n                    else if (value.startsWith('this.')) {\n                        resolvedValue = me.resolveProperty(value.substr(5));\n                    }\n\n                    // TODO: Ignoring functions for now, we need to handle scope to make those work\n                    if (resolvedValue !== undefined && typeof resolvedValue !== 'function') {\n                        value = resolvedValue;\n                    }\n                }\n\n                // If the \"changeTitle()\" fellow falls off the end, it must have changed all the needful things.\n                // Otherwise, it returned the final config value (it may have changed it instead, for example, making\n                // an instance from a config object).\n                if (me[changer]) {\n                    applied = (newValue = me[changer](value, was)) === undefined;\n\n                    if (!applied) {\n                        value = newValue;\n                        was = me[field];  // in case it was modified by the changer fn...\n                    }\n                }\n\n                // inline the default equal() for better perf:\n                if (!applied && !((config.equal === equal) ? was === value : config.equal(was, value))) {\n                    me[field] = value;\n                    applied = true;\n\n                    // Check for a \"updateTitle()\" method and call it if present.\n                    me[updater]?.(value, was);\n                }\n\n                if (applied && !me.onConfigChange.$nullFn) {\n                    me.onConfigChange({ name, value, was, config });\n                }\n            }\n        };\n    }\n\n    /**\n     * Creates and returns a property descriptor for this config's initter suitable to pass to\n     * `Reflect.defineProperty()`.\n     * @returns {Object}\n     * @private\n     */\n    makeInitter() {\n        const config = this;\n\n        if (config !== config.base) {\n            if (config.lazy) {\n                return config.makeLazyInitter();\n            }\n\n            // At present no other options affect the setter, so all configs can share the descriptor of the base-most\n            // config definition.\n            return config.base.initDescriptor;\n        }\n\n        return config.makeBasicInitter();\n    }\n\n    makeBasicInitter() {\n        const\n            config = this,\n            { initializing, name } = config;\n\n        return {\n            configurable : true,\n\n            get() {\n                const me = this;\n\n                config.removeInitter(me);\n\n                // Set the value from the configuration.\n                me[initializing] = true;\n                me[name] = me[configuringSymbol][name];\n                me[initializing] = false;\n\n                // The property has been *pulled* from the configuration.\n                // Prevent the setting loop in configure from setting it again.\n                me.configDone[name] = true;\n\n                // Finally, allow the prototype getter to return the value.\n                return me[name];\n            },\n\n            set(value) {\n                config.removeInitter(this);\n\n                // The config has been set (some internal code may have called the setter)\n                // so prevent it from being called again and overwritten with data from initialConfig.\n                this.configDone[name] = true;\n\n                // Set the property normally (Any prototype setter will be invoked)\n                this[name] = value;\n            }\n        };\n    }\n\n    makeLazyInitter() {\n        const\n            config = this,\n            { initializing, name } = config;\n\n        return {\n            configurable : true,\n\n            get() {\n                const\n                    me    = this,\n                    value = me[lazyConfigValues].get(name);\n\n                config.removeInitter(me);\n\n                if (!me.isDestroying) {\n                    // Set the value from the lazy config object.\n                    me[initializing] = true;\n                    me[name] = value;\n                    me[initializing] = false;\n                }\n\n                // Finally, allow the prototype getter to return the value.\n                return me[name];\n            },\n\n            set(value) {\n                config.removeInitter(this);\n\n                // Set the property normally (Any prototype setter will be invoked)\n                this[name] = value;\n            }\n        };\n    }\n\n    /**\n     * Removes the property initter and restores the instance to its original form.\n     * @param {Object} instance\n     * @private\n     */\n    removeInitter(instance) {\n        const\n            { name } = this,\n            instanceProperty = instance[instancePropertiesSymbol][name],\n            lazyValues = instance[lazyConfigValues];\n\n        // If we took over from an instance property, replace it\n        if (instanceProperty) {\n            defineProperty(instance, name, instanceProperty);\n        }\n        // Otherwise just delete the instance property who's getter we are in.\n        else {\n            delete instance[name];\n        }\n\n        if (lazyValues?.delete(name) && !lazyValues.size) {\n            // we delete the keys so that we can tell if this particular lazy config has been initialized\n            delete instance[lazyConfigValues];\n        }\n    }\n\n    setDefault(cls, value) {\n        defineProperty(cls.prototype, this.field, {\n            configurable : true,\n            writable     : true,   // or else \"this._value = x\" will fail\n            value\n        });\n    }\n\n    /**\n     * This method combines (merges) two config values. This is called in two cases:\n     *\n     *  - When a derived class specifies the value of a config defined in a super class.\n     *  - When a value is specified in the instance config object.\n     *\n     * @param {*} newValue In the case of derived classes, this is the config value of the derived class. In the case\n     * of the instance config, this is the instance config value.\n     * @param {*} currentValue In the case of derived classes, this is the config value of the super class. In the case\n     * of the instance config, this is the class config value.\n     * @param {Object} metaNew The class meta object from which the `newValue` is coming. This parameter is `null` if\n     * the `newValue` is from an instance configuration.\n     * @param {Object} metaCurrent The class meta object from which the `currentValue` is coming. This parameter is\n     * `null` if the `currentValue` is not from a class configuration.\n     * @returns {*}\n     * @internal\n     */\n    merge(newValue, currentValue) {\n        if (currentValue && newValue && Objects.isObject(newValue)) {\n            // If existing value is a class instance, clone and merge won't work. Set the configs.\n            if (currentValue.isBase) {\n                return currentValue.setConfig(newValue);\n            }\n            if (Objects.isObject(currentValue)) {\n                newValue = Objects.merge(Objects.clone(currentValue), newValue);\n            }\n        }\n\n        return newValue;\n    }\n}\n\nconst\n    { prototype } = Config,\n    { equal } = prototype;\n\nConfig.symbols = {\n    configuring        : configuringSymbol,\n    instanceProperties : instancePropertiesSymbol,\n    lazyConfigs        : lazyConfigValues\n};\n\n/**\n * This object holds `Config` instances keyed by their name. For example:\n * ```\n *  Config.cache = {\n *      disabled : Config.get('disabled'),\n *      text     : Config.get('text'),\n *      title    : Config.get('title')\n *  };\n * ```\n * @member {Object} cache\n * @static\n * @private\n */\nConfig.cache = Object.create(null);  // object w/no properties not even inherited ones\n\n/**\n * This object holds config value equality methods. By default, the `===` operator is used to compare config values for\n * semantic equality. When an `equal` option is specified as a string, that string is used as a key into this object.\n *\n * All equality methods in this object have the same signature as the {@link #function-equal equal()} method.\n *\n * This object has the following equality methods:\n *\n * - `array` : Compares arrays of values using `===` on each element.\n * - `date` : Compares values of `Date` type.\n * - `strict` : The default equal algorithm based on `===` operator.\n * @member {Object} equalityMethods\n * @static\n * @private\n */\nConfig.equalityMethods = {\n    array : Config.makeArrayEquals(),\n\n    date(value1, value2) {\n        if (value1 === value2) {\n            return true;\n        }\n\n        // see DateHelper.isDate() but cannot import due to circularity\n        if (value1 && value2 && toString.call(value1) === DATE_TYPE && toString.call(value2) === DATE_TYPE) {\n            // https://jsbench.me/ltkb3vk0ji/1 - getTime is >2x faster vs valueOf/Number/op+\n            return value1.getTime() === value2.getTime();\n        }\n\n        return false;\n    },\n\n    strict : Config.equal = equal\n};\n\n/**\n * This object holds config value merge methods. By default, {@link Core.helper.ObjectHelper#function-merge-static} is\n * used to merge object's by their properties. Config merge methods are used to combine config values from derived\n * classes with config values from super classes, as well as instance config values with those of the class.\n *\n * All merge methods in this object have the same signature as the {@link #function-merge merge()} method.\n *\n * This object has the following merge methods:\n *\n * - `distinct`   : Combines arrays of values ensuring that no value is duplicated. When given an object, its truthy\n *   keys are included, while its falsy keys are removed from the result.\n * - `merge`      : The default merge algorithm for `configurable()` properties, based on\n *   {@link Core.helper.ObjectHelper#function-merge-static}.\n * - `items`      : Similar to `merge`, but allows reordering (see `Objects.mergeItems`).\n * - `objects`    : The same as to `merge` except this method promotes `true` to an empty object.\n * - 'classList'  : Incoming strings are converted to an object where the string is a property name with a truthy value.\n * - `replace`    : Always returns `newValue` to replace the super class value with the derived class value, or the\n *   class value with the instance value.\n * @member {Object} mergeMethods\n * @static\n * @internal\n */\nConfig.mergeMethods = {\n    distinct(newValue, oldValue) {\n        let ret = oldValue ? oldValue.slice() : [];\n\n        if (newValue != null) {\n            if (Objects.isObject(newValue)) {\n                if (oldValue === undefined) {\n                    ret = newValue;\n                }\n                else {\n                    let key, index;\n\n                    for (key in newValue) {\n                        index = ret.indexOf(key);\n\n                        if (newValue[key]) {\n                            if (index < 0) {\n                                ret.push(key);\n                            }\n                        }\n                        else if (index > -1) {\n                            ret.splice(index, 1);\n                        }\n                    }\n                }\n            }\n            else if (Array.isArray(newValue)) {\n                newValue.forEach(v => !ret.includes(v) && ret.push(v));\n            }\n            else if (!ret.includes(newValue)) {\n                ret.push(newValue);\n            }\n        }\n\n        return ret;\n    },\n\n    merge : Config.merge = prototype.merge,\n\n    classList(newValue, oldValue) {\n        // 'foo bar' -> { foo : 1, bar : 1 }\n        if (typeof newValue === 'string') {\n            if (!newValue.length) {\n                return oldValue;\n            }\n\n            newValue = newValue.split(whitespace);\n        }\n\n        if (Array.isArray(newValue)) {\n            newValue = newValue.reduce(createClsProps, {});\n        }\n\n        return Config.merge(newValue, oldValue);\n    },\n\n    objects(newValue, oldValue) {\n        return (newValue === true) ? oldValue || {} : Config.merge(newValue, oldValue);\n    },\n\n    replace(newValue) {\n        return newValue;\n    },\n\n    items(newValue, oldValue, metaNew, metaCurrent) {\n        if (metaCurrent) {\n            // When we have metaCurrent, we are merging with a class config object, so we apply the smart merge algo\n            // only in that case. Merging instance configs would lose the 'clever > syntax' info needed when the\n            // time comes to actually configure an instance.\n            return Objects.mergeItems(oldValue, newValue, {\n                merge : (oldValue, newValue) => prototype.merge(newValue, oldValue)\n            });\n        }\n\n        return prototype.merge(newValue, oldValue);\n    }\n};\n\nObject.assign(prototype, {\n    _descriptor     : null,\n    _initDescriptor : null,\n\n    /**\n     * A function that compares values for equality. This test is used to determine if the `update` method should be\n     * called when the setter is invoked.\n     *\n     * To handle `Date` values:\n     * ```\n     *  class Foo extends Base {\n     *      static get configurable() {\n     *          return {\n     *              date : {\n     *                  $config : {\n     *                      equal : 'date'\n     *                  },\n     *\n     *                  value : null\n     *              }\n     *          }\n     *      }\n     *\n     *      updateDate(date) {\n     *          // date has changed\n     *      }\n     *  }\n     * ```\n     *\n     * Also useful for some configs:\n     * ```\n     *  class Foo extends Base {\n     *      static get configurable() {\n     *          return {\n     *              bar : {\n     *                  $config : {\n     *                      equal : ObjectHelper.isEqual\n     *                  },\n     *\n     *                  value : null\n     *              }\n     *          }\n     *      }\n     *\n     *      updateBar(value) {\n     *          // value has changed\n     *      }\n     *  }\n     * ```\n     * @config {Function} equal\n     * @internal\n     */\n\n    /**\n     * Indicates that this config property should not automatically initialize during construction. When this property\n     * is set to `true`, initialization is triggered by the first use of the config property's getter.\n     *\n     * This property can alternatively be set to a string, in which case it can be initialized as a group using the\n     * {@link Core.Base#function-triggerConfigs} method which will initialize all lazy configs with the same value for\n     * this property. Note: the config will still initialize on first use if that occurs prior to the call to\n     * `triggerConfigs`.\n     * @config {Boolean|String}\n     * @default\n     * @internal\n     */\n    lazy : false,\n\n    /**\n     * Indicates that this config property should automatically be set to `null` on destroy.\n     * @config {Boolean}\n     * @default\n     * @internal\n     */\n    nullify : false,\n\n    /**\n     * Indicates that this config participates in rendering. This has does not affect the behavior of the property\n     * directly, but allows classes that perform rendering to detect which config changes will affect the rendered\n     * result.\n     * @config {Boolean}\n     * @default\n     * @internal\n     */\n    render : false\n\n    // TODO FUTURES\n    // clear   (bool - set to null during cleanup)\n    // destroy (bool - destroy value during cleanup)\n    // evented (bool - fire event on change / after updater)\n});\n","/**\n * @module Core/Base\n */\nimport Objects from './helper/util/Objects.js';\nimport StringHelper from './helper/StringHelper.js';\nimport VersionHelper from './helper/VersionHelper.js';\nimport BrowserHelper from './helper/BrowserHelper.js';\nimport Config from './Config.js';\n\nclass MetaClass {\n    constructor(options) {\n        options && Object.assign(this, options);\n    }\n\n    getInherited(name, create = true) {\n        let ret = this[name];\n\n        // We use \"in this\" to allow the object to be set to null\n        if (!(name in this)) {\n            // If there is no object on this metaclass, but there may be one on a super class. If create=false, the\n            // idea is that a super class object will be \"properly\" inherited but otherwise no object will be created.\n            ret = this.super?.getInherited(name, create);\n\n            if (ret || create) {\n                this[name] = ret = Object.create(ret || null);\n            }\n        }\n\n        return ret;\n    }\n}\n\nconst\n    // Using Object.getPrototypeOf instead of Reflect.getPrototypeOf because:\n    // 1. They are almost the same, according to the MDN difference is handling getPrototypeOf('string')\n    // 2. It allows us to pass security check in SalesForce environment\n    { getPrototypeOf }       = Object,\n    { hasOwn }               = Objects,\n    { defineProperty }       = Reflect,\n    metaSymbol               = Symbol('classMetaData'),\n    mixinTagSymbol           = Symbol('mixinTag'),\n    originalConfigSymbol     = Symbol('originalConfig'),\n    createdAtSymbol          = Symbol('createdAt'),\n    configuringSymbol        = Config.symbols.configuring,\n    instancePropertiesSymbol = Config.symbols.instanceProperties,\n    lazyConfigsSymbol        = Config.symbols.lazyConfigs,\n    defaultConfigOptions     = { merge : 'replace', simple : true },\n    emptyFn                  = () => {},\n    newMeta                  = o => new MetaClass(o),\n    setupNames               = { /* foo : 'setupFoo' */ },\n    emptyObject              = Object.freeze({}),\n    emptyArray               = Object.freeze([]);\n\n/**\n * Base class for all configurable classes.\n *\n * Subclasses do not have to implement a constructor with its restriction of having to call super()\n * before there is a `this` reference. Subclasses instead implement a `construct` method which is\n * called by the `Base` constructor. This may call its `super` implementation at any time.\n *\n * The `Base` constructor applies all configs to properties of the new instance. The instance\n * will have been configured after the `super.construct(config)` is called.\n *\n * See the Class System documentation in the guides for more information.\n *\n * @abstract\n */\nexport default class Base {\n    static get isBase() {\n        return true;\n    }\n\n    get isBase() {\n        return true;\n    }\n\n    // defaultConfig & properties made private to not spam all other classes\n\n    /**\n     * A class property getter to add additional, special class properties.\n     *\n     * For example, a class adds a `declarable` class property like so:\n     * ```\n     *  class Something extends Base {\n     *      static get declarable() {\n     *          return ['extra'];\n     *      }\n     *\n     *      static setupExtra(cls, meta) {\n     *          // use cls.extra\n     *      }\n     *  }\n     * ```\n     * A derived class can then specify this property like so:\n     * ```\n     *  class Derived extends Something {\n     *      static get extra() {\n     *          // return extra information\n     *      }\n     *  }\n     * ```\n     * When the `Derived` class is initialized, the `setupExtra()` method is called and `Derived` is passed as the\n     * argument. It is also the `this` pointer, but the parameter is minifiable. The second argument passed is the\n     * `$meta` object for the class.\n     *\n     * Classes are initialized at the first occurrence of the following:\n     *\n     * - An instance is created\n     * - The class `$meta` property is accessed\n     *\n     * @member {String[]} declarable\n     * @static\n     * @category Configuration\n     * @internal\n     */\n    static get declarable() {\n        return [\n            'declarable',\n\n            /**\n             * A class property getter for the configuration properties of the class, which can be overridden by\n             * configurations passed at construction time.\n             *\n             * Unlike a normal `static` property, this property is only ever used for the class that defines it (as in,\n             * `hasOwnProperty`). It is retrieved for all classes in a class hierarchy, to gather their configs\n             * individually and then combine them with those of derived classes.\n             *\n             * For example, a `Label` might declare a `text` config like so:\n             * ```javascript\n             *  class Label extends Base {\n             *      static get configurable() {\n             *          return {\n             *              text : null\n             *          };\n             *      }\n             *  }\n             * ```\n             * The `text` config is automatically inherited by classes derived from Label. By implementing\n             * `get configurable()`, derived classes can change the default value of inherited configs, or define new\n             * configs, or both.\n             *\n             * When a config property is declared in this way, the class author can also implement either of two\n             * special methods that will be called when the config property is assigned a new value:\n             *\n             *  - `changeText()`\n             *  - `updateText()`\n             *\n             * In the example above, the `Label` class could implement a `changeText()` method, an `updateText()`\n             * method, or both. The generated property setter ensures these methods will be called when the `text`\n             * property is assigned.\n             *\n             * The generated setter (for `text` in this example) performs the following steps:\n             *\n             *  - If the class defines a `changeText()` method, call it passing the new value and the current value:\n             *    `changeText(newText, oldText)`.<br>\n             *    Then:\n             *    * If `changeText()` exits without returning a value (i.e., `undefined`), exit and do nothing\n             *      further. The assumption is that the changer method has done all that is required.\n             *    * Otherwise, the return value of `changeText()` replaces the incoming value passed to the setter.\n             *  - If the new value (or the value returned by `changeText()`) is `!==` to the current value:\n             *    * Update the stored config value in `this._text`.\n             *    * If the class defines an `updateText()` method, call it passing the new value and the previous value.\n             *      `updateText(newText, oldText)`\n             *\n             * #### Resolving a value from an owner\n             * By specifying a value starting with `'up.'` for a config, the config system will resolve that value by\n             * examining the ownership hierarchy. It will walk up the hierarchy looking for a property matching the name\n             * (or dot separated path) after 'up.'. If one is found, the value will be read and used as the initial\n             * value.\n             *\n             * ```javascript\n             * class Parent extends Base {\n             *     static get configurable() {\n             *         return [\n             *           'importantValue'\n             *         ]\n             *     }\n             * }\n             *\n             * class Child extends Base {\n             *     static get configurable() {\n             *         return [\n             *           'value'\n             *         ]\n             *     }\n             * }\n             *\n             * const parent = new Parent({\n             *     importantValue : 123\n             * });\n             *\n             * const child = new Child({\n             *     owner : parent,\n             *     // Will be resolved from the owner\n             *     value : 'up.importantValue'\n             * });\n             *\n             * console.log(child.value); // logs 123\n             * ```\n\n             * Please note that this is for now a one way one time binding, the value will only be read initially and\n             * not kept up to date on later changes.\n             *\n             * #### Value Merging\n             * When a config property value is an object, the value declared by the base class is merged with values\n             * declared by derived classes and the value passed to the constructor.\n             * ```javascript\n             *  class Example extends Base {\n             *      static get configurable() {\n             *          return {\n             *              config : {\n             *                  foo : 1,\n             *                  bar : 2\n             *              }\n             *          };\n             *      }\n             *  }\n             *\n             *  class Example2 extends Example {\n             *      static get configurable() {\n             *          return {\n             *              config : {\n             *                  bar : 42,\n             *                  zip : 'abc'\n             *              }\n             *          };\n             *      }\n             *  }\n             *\n             *  let ex = new Example2({\n             *      config : {\n             *          zip : 'xyz'\n             *      }\n             *  });\n             * ```\n             * The result of the merge would set `config` to:\n             * ```javascript\n             *  ex.foo = {\n             *      foo : 1,    // from Example\n             *      bar : 42,   // from Example2\n             *      zip : 'xyz' // from constructor\n             *  }\n             * ```\n             *\n             * #### Config Options\n             * Some config properties require additional options such as declarative information about the config that\n             * may be useful to automate some operation. Consider a `Button`. It could declare that its `text` config\n             * affects the rendered HTML by applying a `render` property to the config definition. Its base class could\n             * then examine the config definition to find this property.\n             *\n             * To support this, config options ca be declared like so:\n             * ```javascript\n             *  class Button extends Widget {\n             *      static get configurable() {\n             *          return {\n             *              text : {\n             *                  value   : null,\n             *                  $config : {\n             *                      render : true\n             *                  }\n             *              }\n             *          };\n             *      }\n             *  }\n             * ```\n             * The `$config` property can alternatively be just the names of the options that should be enabled (set\n             * to `true`).\n             *\n             * For example, the following is equivalent to the above:\n             * ```javascript\n             *  class Button extends Widget {\n             *      static get configurable() {\n             *          return {\n             *              text : {\n             *                  value   : null,\n             *                  $config : 'render'\n             *              }\n             *          };\n             *  }\n             * ```\n             *\n             * #### Default Value\n             * It is common to set a config to a `null` value to take advantage of internal optimizations for `null`\n             * values. In most cases the fact that this produces `undefined` as the actual initial value of the config\n             * is acceptable. When this is not acceptable, a config can be declared like so:\n             * ```javascript\n             *  class Widget {\n             *      static get configurable() {\n             *          return {\n             *              disabled : {\n             *                  $config : null,\n             *                  value   : null,\n             *                  default : false\n             *              }\n             *          };\n             *  }\n             * ```\n             * The `default` property above determines the value of the config while still gaining the benefits of\n             * minimal processing due to the `null` value of the `value` property.\n             * @member {Object} configurable\n             * @static\n             * @category Configuration\n             * @internal\n             */\n            'configurable',\n\n            /**\n             * A class property getter for the default configuration of the class, which can be overridden by\n             * configurations passed at construction time.\n             *\n             * Unlike a normal `static` property, this property is only ever used for the class that defines it (as in,\n             * `hasOwnProperty`). It is retrieved for all classes in a class hierarchy, to gather their configs\n             * individually and then combine them with those of derived classes.\n             *\n             * For example, a `Store` might declare its `url` config like so:\n             * ```\n             *  class Store extends Base {\n             *      static get defaultConfig() {\n             *          return {\n             *              url : null\n             *          };\n             *      }\n             *  }\n             * ```\n             * The `url` config is automatically inherited by classes derived from Store. By implementing\n             * `get defaultConfig()`, derived classes can change the default value of inherited configs, or define new\n             * configs, or both. When defining new configs, however, `configurable` is preferred.\n             *\n             * Config properties introduced to a class by this declaration do not participate in value merging and do\n             * not get a generated setter. Config properties introduced by a base class using `configurable` can be\n             * set to a different value using `defaultConfig` and in doing so, the values will be merged as appropriate\n             * for `configurable`.\n             *\n             * @member {Object} defaultConfig\n             * @static\n             * @category Configuration\n             * @internal\n             */\n            'defaultConfig',\n\n            /**\n             * A class property getter for the default values of internal properties for this class.\n             * @member {Object} properties\n             * @static\n             * @category Configuration\n             * @internal\n             */\n            'properties',\n\n            /**\n             * A class property getter for properties that will be applied to the class prototype.\n             * @member {Object} prototypeProperties\n             * @static\n             * @category Configuration\n             * @internal\n             */\n            'prototypeProperties'\n        ];\n    }\n\n    /**\n     * Base constructor, passes arguments to {@link #function-construct}.\n     * @param {...Object} [args] Usually called with a config object, but accepts any params\n     * @function constructor\n     * @category Lifecycle\n     */\n    constructor(...args) {\n        const\n            me = this,\n            C  = me.constructor;\n\n        if (me.$meta.class !== C) {\n            // This will happen only once for each class. We need to call the C.$meta getter which puts $meta on our\n            // prototype. Since that alone would be optimized away (and would generate IDE and lint warnings), we call\n            // emptyFn and simply pass the value.\n            emptyFn(C.$meta);\n        }\n\n        // Allow subclasses to have a pseudo constructor with \"this\" already set:\n        me.construct(...args);\n\n        me.afterConstruct();\n\n        me.isConstructing = false;\n    }\n\n    /**\n     * Factory version of the Base constructor. Merges all arguments to create a config object that is passed along to\n     * the constructor.\n     * @param {...Object} [configs] Allows passing multiple config objects\n     * @returns {Core.Base} New instance\n     * @private\n     */\n    static new(...configs) {\n        configs = configs.filter(c => c);\n\n        return new this(configs.length > 1 ? this.mergeConfigs(...configs) : configs[0]);\n    }\n\n    /**\n     * Base implementation applies configuration.\n     *\n     * Subclasses need only implement this if they have to initialize instance specific\n     * properties required by the class. Often a `construct` method is\n     * unnecessary. All initialization of incoming configuration properties can be\n     * done in a `set propName` implementation.\n     * @param {...Object} [args] Usually called with a config object, but accepts any params\n     * @category Lifecycle\n     */\n    construct(...args) {\n        /* <remove-on-release> */\n        if (Object.keys(Base.DESTROYING).length > 0) {\n            throw new Error(`${this.$$name}.construct invoked during object destruction ${JSON.stringify(Base.DESTROYING)}`);\n        }\n        /* </remove-on-release> */\n\n        // Passing null to base construct means bypass the config system and stack creation (to gain performance)\n        if (args[0] !== null) {\n            //<debug>\n            if (!args[0]?.skipStack) {\n                this[createdAtSymbol] = new Error().stack;\n            }\n            //</debug>\n\n            this.configure(...args);\n        }\n\n        this.afterConfigure();\n    }\n\n    /**\n     * Destroys the provided objects by calling their {@link #function-destroy} method.\n     * Skips empty values or objects that are already destroyed.\n     *\n     * ```javascript\n     * Base.destroy(myButton, toolbar1, helloWorldMessageBox);\n     * ```\n     * @param {...Object} [args] Objects to be destroyed\n     * @category Lifecycle\n     */\n    static destroy(...args) {\n        const shredder = object => {\n            if (object?.destroy) {\n                object.destroy();\n            }\n            else if (Array.isArray(object)) {\n                object.forEach(shredder);\n            }\n        };\n\n        shredder(args);\n    }\n\n    /**\n     * Destroys this object. This is primarily accomplished by calling {@link #function-doDestroy}, however, prior to\n     * calling `doDestroy`, {@link #property-isDestroying} is set to `true`. After {@link #function-doDestroy} returns,\n     * {@link #property-isDestroyed} is set to `true`.\n     *\n     * Do not override this method in subclasses. To provide class-specific cleanup, implement {@link #function-doDestroy}\n     * instead.\n     * @category Lifecycle\n     */\n    destroy() {\n        const\n            me = this,\n            { id } = me;\n\n        /* <remove-on-release> */\n        if (!Base.DESTROYING[this.$$name]) {\n            Base.DESTROYING[this.$$name] = 1;\n        }\n        else {\n            Base.DESTROYING[this.$$name]++;\n        }\n        /* </remove-on-release> */\n\n        // Let everyone know the object is going inert:\n        me.isDestroying = true;\n\n        // Make calling destroy() harmless:\n        me.destroy = emptyFn;\n\n        me.doDestroy();\n\n        /* <remove-on-release> */\n        if (Base.DESTROYING[this.$$name]) {\n            if (Base.DESTROYING[this.$$name] === 1) {\n                delete Base.DESTROYING[this.$$name];\n            }\n            else {\n                Base.DESTROYING[this.$$name]--;\n            }\n        }\n        /* </remove-on-release> */\n\n        Object.setPrototypeOf(me, null);\n\n        // Clear all remaining instance properties.\n        for (const key in me) {\n            if (key !== 'destroy' && key !== 'isDestroying') {\n                delete me[key];\n            }\n        }\n\n        delete me[originalConfigSymbol];\n\n        // Let everyone know the object is inert:\n        me.isDestroyed = true;\n        me.id = id;  // for diagnostic reasons\n    }\n\n    /**\n     * This method is required to help `unused` getters to survive production build process. Some tools, like angular,\n     * will remove `unused` code in production build, making our side-effected getters behind, breaking code heavily.\n     * @internal\n     * @param getter Getter to evaluate\n     */\n    _thisIsAUsedExpression(getter) {}\n\n    static get $$name() {\n        return hasOwn(this, '$name') && this.$name ||\n            // _$name is filled by webpack for every class (cls._$name = '...')\n            hasOwn(this, '_$name') && this._$name ||\n            this.name;\n    }\n\n    get $$name() {\n        return this.constructor.$$name;\n    }\n\n    /**\n     * Base implementation so that all subclasses and mixins may safely call super.startConfigure.\n     *\n     * This is called by the Base class before setting configuration properties, but after\n     * the active initial getters have been set, so all configurations are available.\n     *\n     * This method allows all classes in the hierarchy to force some configs to be evaluated before others.\n     * @internal\n     * @category Lifecycle\n     * @params {Object} config The configuration object use to set the initial state.\n     */\n    startConfigure(config) {\n\n    }\n\n    /**\n     * Base implementation so that all subclasses and mixins may safely call super.finishConfigure.\n     *\n     * This is called by the Base class before exiting the {@link #function-configure} method.\n     *\n     * At this point, all configs have been applied, but the `isConfiguring` property is still set.\n     *\n     * This method allows all classes in the hierarchy to inject functionality\n     * into the config phase.\n     * @internal\n     * @category Lifecycle\n     * @params {Object} config The configuration object use to set the initial state.\n     */\n    finishConfigure(config) {\n\n    }\n\n    /**\n     * Base implementation so that all subclasses and mixins may safely call `super.afterConfigure`. This is called by the Base class after the {@link #function-configure} method has been\n     * called. At this point, all configs have been applied.\n     *\n     * This method allows all classes in the hierarchy to inject functionality\n     * either before or after the super.afterConstruct();\n     * @internal\n     * @category Lifecycle\n     */\n    afterConfigure() {\n\n    }\n\n    /**\n     * Base implementation so that all subclasses and mixins may safely call super.afterConstruct.\n     *\n     * This is called by the Base class after the {@link #function-construct} method has been\n     * called.\n     *\n     * At this point, all configs have been applied.\n     *\n     * This method allows all classes in the hierarchy to inject functionality\n     * either before or after the super.afterConstruct();\n     * @internal\n     * @function afterConstructor\n     * @category Lifecycle\n     */\n    afterConstruct() {\n\n    }\n\n    /**\n     * Provides a way of calling callbacks which may have been specified as the _name_ of a function\n     * and optionally adds scope resolution.\n     *\n     * For example, if the callback is specified as a string, then if it is prefixed with `'this.'`\n     * then the function is resolved in this object. This is useful when configuring listeners\n     * at the class level.\n     *\n     * If the callback name is prefixed with `'up.'` then the ownership hierarchy is queried\n     * using the `owner` property until an object with the named function is present, then the\n     * named function is called upon that object.\n     *\n     * If a named function is not found, an error is thrown. If the function should be only called when present,\n     * and may not be present, add a `?` as a suffix.\n     *\n     * @param {String|Function} fn The function to call, or the name of the function to call.\n     * @param {Object} thisObject The `this` object of the function.\n     * @param {Object[]} args The argument list to pass.\n     * @category Misc\n     */\n    callback(fn, thisObject, args = emptyArray) { // Maintainer: do not make args ...args. This method may acquire more arguments\n        const { handler, thisObj } = this.resolveCallback(fn, thisObject === 'this' ? this : thisObject) || emptyObject;\n\n        return handler?.apply(thisObj, args);\n    }\n\n    resolveProperty(propertyPath) {\n        let thisObj = this;\n\n        while (thisObj) {\n            if (Objects.hasPath(thisObj, propertyPath)) {\n                return Objects.getPath(thisObj, propertyPath);\n            }\n\n            thisObj = thisObj.owner;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Provides a way of locating callbacks which may have been specified as the _name_ of a function\n     * and optionally adds scope resolution.\n     *\n     * For example, if the callback is specified as a string, then if it is prefixed with `'this.'`\n     * then the function is resolved in this object. This is useful when configuring listeners\n     * at the class level.\n     *\n     * If the callback name is prefixed with `'up.'` then the ownership hierarchy is queried\n     * using the `owner` property until an object with the named function is present, then the\n     * named function is called upon that object.\n     * @param {String|Function} handler The function to call, or the name of the function to call.\n     * @param {Object} thisObj The `this` object of the function.\n     * @param {Boolean} [enforceCallability = true] Pass `false` if the function may not exist, and a null return value is acceptable.\n     * @returns {Object} `{ handler, thisObj }`\n     * @category Misc\n     */\n    resolveCallback(handler, thisObj = this, enforceCallability = true) {\n        // It's a string, we find it in its own thisObj\n        if (handler?.substring) {\n            if (handler.endsWith('?')) {\n                enforceCallability = false;\n                handler = handler.substring(0, handler.length - 1);\n            }\n\n            if (handler.startsWith('up.')) {\n                handler = handler.substring(3);\n\n                // Empty loop until we find the function owner\n                for (thisObj = this.owner; thisObj && !thisObj[handler]; thisObj = thisObj.owner);\n\n                if (!thisObj) {\n                    //<debug>\n                    if (enforceCallability) {\n                        throw new Error(`Function ${handler} not found in ownership hierarchy`);\n                    }\n                    //</debug>\n                    return;\n                }\n            }\n            else if (handler.startsWith('this.')) {\n                handler = handler.substring(5);\n                thisObj = this;\n            }\n            if (!thisObj || !(thisObj instanceof Object)) {\n                //<debug>\n                if (enforceCallability) {\n                    throw new Error(`Named method ${handler} requires a thisObj object`);\n                }\n                //</debug>\n                return;\n            }\n            handler = thisObj[handler];\n        }\n\n        // Any other type than string or function results in unresolved callback\n        if (typeof handler === 'function') {\n            return { handler, thisObj };\n        }\n        if (enforceCallability) {\n            throw new Error(`No method named ${handler} on ${thisObj.$$name || 'thisObj object'}`);\n        }\n    }\n\n    bindCallback(inHandler, inThisObj = this) {\n        if (inHandler) {\n            const { handler, thisObj } = this.resolveCallback(inHandler, inThisObj);\n            if (handler) {\n                return handler.bind(thisObj);\n            }\n        }\n    }\n\n    /**\n     * Delays the execution of the passed function by the passed time quantum, or if the time is omitted\n     * or not a number, delays until the next animation frame. Note that this will use\n     * {@link Core.mixin.Delayable#function-setTimeout} || {@link Core.mixin.Delayable#function-requestAnimationFrame}\n     * if this class mixes in `Delayable`, otherwise it uses the global methods. The function will\n     * be called using `this` object as its execution scope.\n     * @param {Function} fn The function to call on a delay.\n     * @param {Number} [delay] The number of milliseconds to delay.\n     * @param {String} [name] The name of delay\n     * @returns {Number} The created timeout id.\n     * @private\n     */\n    delay(fn, delay, name = fn.name || fn) {\n        // Force scope on the fn if we are not a Delayable\n        fn = this.setTimeout ? fn : fn.bind(this);\n\n        const invoker = this.setTimeout ? this : globalThis;\n        return invoker[typeof delay === 'number' ? 'setTimeout' : 'requestAnimationFrame'](fn, delay, name);\n    }\n\n    /**\n     * Classes implement this method to provide custom cleanup logic before calling `super.doDestroy()`. The general\n     * pattern is as follows:\n     *\n     * ```javascript\n     *  class Foo extends Base {\n     *      doDestroy() {\n     *          // perform custom cleanup\n     *\n     *          super.doDestroy();\n     *      }\n     *  }\n     * ```\n     *\n     * This method is called by {@link #function-destroy} which also prevents multiple calls from reaching `doDestroy`.\n     * Prior to calling `doDestroy`, {@link #property-isDestroying} is set to `true`. Upon return, the object is fully\n     * destructed and {@link #property-isDestroyed} is set to `true`.\n     *\n     * Do not call this method directly. Instead call {@link #function-destroy}.\n     * @category Lifecycle\n     */\n    doDestroy() {\n        const\n            me = this,\n            { nullify } = me.$meta;\n\n        if (nullify) {\n            for (let i = 0; i < nullify.length; ++i) {\n                if (me[nullify[i].field] != null) {     // if backing property is null/undefined then skip\n                    me[nullify[i].name] = null;         // else, call setter to run through change/update\n                }\n            }\n        }\n    }\n\n    /**\n     * Destroys the named properties if they have been initialized, and if they have a `destroy` method.\n     * Deletes the property from this object. For example:\n     *\n     *      this.destroyProperties('store', 'resourceStore', 'eventStore', 'dependencyStore', 'assignmentStore');\n     *\n     * @param {String} properties The names of the properties to destroy.\n     * @internal\n     * @category Lifecycle\n     */\n    destroyProperties(...properties) {\n        const me = this;\n\n        let key, propertyValue;\n\n        for (key of properties) {\n            // If the value has *not* been pulled in from the configuration object yet\n            // we must not try to access it, as that will cause the property to be initialized.\n            if (key in me && (!me[configuringSymbol] || !me[configuringSymbol][key])) {\n                propertyValue = me[key];\n                if (propertyValue?.destroy) {\n                    propertyValue.destroy();\n                }\n                delete me[key];\n            }\n        }\n    }\n\n    /**\n     * Called by the Base constructor to apply configs to this instance. This must not be called.\n     * @param {Object} config The configuration object from which instance properties are initialized.\n     * @private\n     * @category Lifecycle\n     */\n    configure(config = {}) {\n        //<debug>\n        // Guard against instances being passed in an attempt to clone.\n        if (!Objects.isObject(config)) {\n            throw new Error('Raw object must be passed to configure');\n        }\n        //</debug>\n\n        const\n            me                  = this,\n            meta                = me.$meta,\n            { beforeConfigure } = config,\n            configs             = meta.configs,\n            fullConfig          = me.getDefaultConfiguration();\n\n        let cfg, key, value;\n\n        me.initialConfig = config;\n\n        // Important flag for setters to know whether they are being called during\n        // configuration when this object is not fully alive, or whether it's being reconfigured.\n        me.isConfiguring = true;\n\n        // Assign any instance properties declared by the class.\n        Object.assign(me, me.getProperties());\n\n        // Apply configuration to default from class definition. This is safe because it's either chained from or a\n        // fork of the class values.\n        for (key in config) {\n            value = config[key];\n            cfg   = configs[key];\n\n            fullConfig[key] = cfg ? cfg.merge(value, fullConfig[key], null, meta) : value;\n        }\n\n        if (beforeConfigure) {\n            delete fullConfig.beforeConfigure;\n\n            // noinspection JSValidateTypes\n            beforeConfigure(me, fullConfig);\n        }\n\n        // Cache me.config for use by get config.\n        me.setConfig(me[originalConfigSymbol] = fullConfig, true);\n\n        me.isConfiguring = false;\n    }\n\n    /**\n     * Returns the value of the specified config property. This is a method to allow\n     * property getters to be explicitly called in a way that does not get optimized out.\n     *\n     * The following triggers the getter call, but optimizers will remove it:\n     *\n     *      inst.foo;   // also raises \"expression has no side-effects\" warning\n     *\n     * Instead, do the following to trigger a getter:\n     *\n     *      inst.getConfig('foo');\n     *\n     * @param {String} name\n     * @internal\n     * @category Configuration\n     */\n    getConfig(name) {\n        return this[name];\n    }\n\n    /**\n     * Sets configuration options this object with all the properties passed in the parameter object.\n     * Timing is taken care of. If the setter of one config is called first, and references\n     * the value of another config which has not yet been set, that config will be set just\n     * in time, and the *new* value will be used.\n     * @param {Object} config An object containing configurations to change.\n     * @category Lifecycle\n     */\n    setConfig(config, isConstructing) {\n        const\n            me             = this,\n            wasConfiguring = me[configuringSymbol],\n            configDone     = wasConfiguring ? me.configDone : (me.configDone = {}),\n            configs        = me.$meta.configs;\n\n        let cfg, key;\n\n        me[instancePropertiesSymbol] = {};\n        // Cache configuration for use by injected property initializers.\n        me[configuringSymbol] = wasConfiguring ? Object.setPrototypeOf(Object.assign({}, config), wasConfiguring) : config;\n\n        // For each incoming non-null configuration, create a temporary getter which will\n        // pull the value in from the initialConfig so that it doesn't matter in\n        // which order properties are set. You can access any property at any time.\n        for (key in config) {\n            // Don't default null configs in unless it's a direct property of the\n            // the passed configuration. When used at construct time, defaultConfigs\n            // will be prototype-chained onto the config.\n            if (config[key] != null || hasOwn(config, key)) {\n                cfg = configs[key] || Config.get(key);\n\n                cfg.defineInitter(me, config[key]);\n\n                if (!isConstructing) {\n                    configDone[key] = false;\n                }\n                // else if (cfg.lazy) {\n                //     // This was done originally to prevent our for-loop below from poking the value on the instance\n                //     // at this stage. It was removed since it confused triggerConfig, and it just isn't true that the\n                //     // lazy config is done...\n                //     configDone[key] = true;\n                // }\n            }\n            else {\n                configDone[key] = true;\n            }\n        }\n\n        if (isConstructing) {\n            me.startConfigure(config);\n        }\n\n        // Set all our properties from the config object.\n        // If one of the properties needs to access a property that has not\n        // yet been set, the above temporary property will pull it through.\n        // Can't use Object.assign because that only uses own properties.\n        // config value blocks are prototype chained subclass->superclass\n        for (key in config) {\n            // Only push the value through if the property initializer is still present.\n            // If it gets triggered to pull the configuration value in, it deleted itself.\n            if (!configDone[key] && !configs[key]?.lazy) {\n                me[key] = config[key];\n            }\n        }\n\n        if (wasConfiguring) {\n            me[configuringSymbol] = wasConfiguring;\n        }\n        else {\n            delete me[configuringSymbol];\n        }\n\n        if (isConstructing) {\n            me.finishConfigure(config);\n        }\n\n        return me;\n    }\n\n    /**\n     * Returns `true` if this instance has a non-null value for the specified config. This will not activate a lazy\n     * config.\n     *\n     * @param {String} name The name of the config property.\n     * @returns {Boolean}\n     * @internal\n     */\n    hasConfig(name) {\n        const\n            me     = this,\n            config = me[configuringSymbol];\n\n        return Boolean(\n            (me['_' + name] != null)                 ||     // value has been assigned to backing property\n            me[lazyConfigsSymbol]?.get(name) != null ||     // a lazy value is pending\n            (\n                // config value has not been assigned but will be\n                !me.configDone[name] &&\n                config && (config[name] != null || hasOwn(config, name))\n            )\n        );\n    }\n\n    /**\n     * Returns the value of an uningested config *without* ingesting the config or transforming\n     * it from its raw value using its `changeXxxxx` method.\n     *\n     * @param {String} name The name of the config property.\n     * @returns {*} The raw incoming config value.\n     * @internal\n     */\n    peekConfig(name) {\n        const\n            me             = this,\n            lazyConfig     = me[lazyConfigsSymbol],\n            config         = me[configuringSymbol];\n\n        // It's waiting in the lazy configs\n        if (lazyConfig?.has(name)) {\n            return lazyConfig.get(name);\n        }\n\n        // It's been read in, so use the current value\n        if (me.configDone[name]) {\n            return me[name];\n        }\n\n        if (config?.[name] != null || hasOwn(config, name)) {\n            return config[name];\n        }\n    }\n\n    /**\n     * Ensures that the specified config is initialized if it is needed. If there is a config value specified, and it\n     * was initialized by this call, this method returns `true`. If there was a config value specified, and it was\n     * already initialized, this method returns `false`. If there was no value specified for the given config, this\n     * method returns `null`.\n     *\n     * This is not the same as just reading the property, because some property getters exist that do not actually just\n     * read the config value back, but instead produce some result. Reading such properties to incidentally trigger a\n     * possible config initializer can lead to incorrect results. For example, the Combo items config.\n     *\n     * @param {String} name The name of the config property.\n     * @returns {Boolean}\n     * @internal\n     */\n    triggerConfig(name) {\n        const\n            me             = this,\n            { configDone } = me,\n            lazyConfig     = me[lazyConfigsSymbol],\n            config         = me[configuringSymbol],\n            triggered      = (lazyConfig?.has(name) || (config && (config[name] != null || hasOwn(config, name))))\n                ? !configDone[name] : null;\n\n        if (triggered) {\n            me.getConfig(name);\n        }\n\n        return triggered;\n    }\n\n    /**\n     * This call will activate any pending {@link Core.Config#config-lazy} configs that were assigned a string value\n     * equal to the `group` parameter.\n     *\n     * @param {String} group The config property group as defined by a matching {@link Core.Config#config-lazy} value.\n     * @returns {String[]} The names of any configs triggered by this call or `null` if no configs were triggered.\n     * @internal\n     */\n    triggerConfigs(group) {\n        const\n            me          = this,\n            configs     = me.$meta.configs,\n            lazyConfigs = me[lazyConfigsSymbol],\n            triggered   = lazyConfigs ? [...lazyConfigs.keys()].filter(k => configs[k].lazy === group) : emptyArray;\n\n        for (const key of triggered) {\n            me.triggerConfig(key);\n        }\n\n        return triggered.length ? triggered : null;\n    }\n\n    onConfigChange() {} // declared above because lint/IDE get angry about not declaring the args...\n    /**\n     * This method is called when any config changes.\n     * @param {Object} info Object containing information regarding the config change.\n     * @param {String} info.name The name of the config that changed.\n     * @param {*} info.value The new value of the config.\n     * @param {*} info.was The previous value of the config.\n     * @param {Core.Config} info.config The `Config` object for the changed config property.\n     * @method onConfigChange\n     * @internal\n     * @category Configuration\n     */\n\n    /**\n     * Returns a *copy* of the full configuration which was used to configure this object.\n     * @property {Object}\n     * @category Lifecycle\n     * @readonly\n     */\n    get config() {\n        const\n            result   = {},\n            myConfig = this[originalConfigSymbol];\n\n        // The configuration was created as a prototype chain of the class hierarchy's\n        // defaultConfig values hanging off a copy of the initialConfig object, so\n        // we must loop and copy since Object.assign only copies own properties.\n        for (const key in myConfig) {\n            result[key] = myConfig[key];\n        }\n\n        return result;\n    }\n\n    // region Extract config\n\n    static processConfigValue(currentValue, options) {\n        if (currentValue === globalThis) {\n            return globalThis;\n        }\n        else if (Array.isArray(currentValue)) {\n            return currentValue.map(v => Base.processConfigValue(v, options));\n        }\n        // Not using isBase to avoid classes (modelClass for example)\n        else if (currentValue instanceof Base) {\n            if (options.visited.has(currentValue)) {\n                return;\n            }\n\n            return currentValue.getCurrentConfig(options);\n        }\n        // appendTo, floatRoot etc\n        else if (currentValue instanceof HTMLElement || currentValue instanceof DocumentFragment) {\n            return null;\n        }\n        // Go deeply into objects, might have instances of our classes in them\n        else if (Objects.isObject(currentValue)) {\n            const result = {};\n\n            for (const key in currentValue) {\n                result[key] = Base.processConfigValue(currentValue[key], options);\n            }\n\n            return result;\n        }\n\n        return currentValue;\n    };\n\n    // Recursively get the value of a config. Only intended to be called by getCurrentConfig()\n    getConfigValue(name, options) {\n        const\n            me = this,\n            lazyConfigs = me[lazyConfigsSymbol];\n\n        // Do not trigger lazy configs\n        if (!me.$meta.configs[name]?.lazy) {\n            return Base.processConfigValue(me[name], options);\n        }\n        // Instead pull their initial config in\n        if (lazyConfigs?.has(name)) {\n            return Base.processConfigValue(lazyConfigs.get(name), options);\n        }\n    }\n\n    // Allows removing / adding configs before values are extracted\n    preProcessCurrentConfigs() {}\n\n    // Extract the current values for all initially used configs, in a format that can be used to create a new instance.\n    // Not intended to be called by any other code than getConfigString()\n    getCurrentConfig(options = { }) {\n        const\n            me      = this,\n            configs = options.configs === 'all' ? me.config : Objects.clone(me.initialConfig),\n            visited = options.visited || (options.visited = new Set()),\n            depth   = options.depth || (options.depth = 0),\n            result  = {};\n\n        if (visited.has(me)) {\n            return undefined;\n        }\n\n        visited.add(me);\n\n        this.preProcessCurrentConfigs(configs);\n\n        for (const name in configs) {\n            const value = me.getConfigValue(name, { ...options, depth : depth + 1 });\n            if (value !== undefined) {\n                result[name] = value;\n            }\n        }\n\n        return result;\n    }\n\n    // Extract the current values for all initially used configs and convert them to a JavaScript string\n    getConfigString(options = {}) {\n        return StringHelper.toJavaScriptString(this.getCurrentConfig(options));\n    }\n\n    // Experimental helper function, extracts the currently used configs and wraps them as an app, returning code as a\n    // string.\n    //\n    // This function is intended to simplify creating test cases for issue reporting on Bryntum's support forum.\n    //\n    getTestCase(options = {}) {\n        //<remove-on-lwc-release>\n        const Product = this.isGantt ? 'Gantt' : this.isSchedulerPro ? 'SchedulerPro' : this.isCalendar ? 'Calendar' : this.isScheduler ? 'Scheduler' : this.isGrid ? 'Grid' : this.isTaskBoard ? 'TaskBoard' : null;\n\n        if (Product) {\n            const\n                product    = Product.toLowerCase(),\n                // bundlePath = `https://bryntum.com/dist/${product}/build/${product}.module.js`,\n                bundlePath = `../../build/${product}.module.js`;\n\n            let preamble, postamble;\n\n            if (options.import === 'static') {\n                preamble =\n                    `import * as module from \"${bundlePath}\";` +\n                    'Object.assign(window, module);'; // for (const c in module) window[c] = module[c];\n                postamble = '';\n            }\n            else {\n                preamble = `import(\"${bundlePath}\").then(module => { Object.assign(window, module);\\n`;\n                postamble = '});';\n            }\n\n            const version = VersionHelper.getVersion(product);\n\n            if (version) {\n                preamble += `\\nconsole.log('${Product} ${version}');\\n`;\n            }\n\n            // De-indented on purpose\n            return `${preamble}      \\nconst ${product} = new ${Product}(${this.getConfigString(options)});\\n${postamble}`;\n\n        }\n        //</remove-on-lwc-release>\n    }\n\n    /**\n     * Experimental helper function, extracts the currently used configs and wraps them as an app, downloading the\n     * resulting JS file.\n     *\n     * This function is intended to simplify creating test cases for issue reporting on Bryntum's support forum.\n     * @category Misc\n     */\n    downloadTestCase(options = {}) {\n        options.output = 'return';\n\n        const app = this.getTestCase(options);\n\n        BrowserHelper.download(`app.js`, 'data:application/javascript;charset=utf-8,' + escape(app));\n    }\n\n    // <debug>\n    // Returns a function that when run creates an instance based on the widgets current configs\n    getConfigAppFunction(options = {}) {\n        // eslint-disable-next-line no-new-func\n        return new Function(this.getTestCase({ import : 'dynamic', output : 'return', ...options }));\n    }\n    // </debug>\n\n    //endregion\n\n    /**\n     * Registers this class type with its Factory\n     * @category Misc\n     */\n    static initClass() {\n        return this.$meta.class;\n    }\n\n    /**\n     * The class's {@link #property-$meta-static meta} object.\n     * @member {Object} $meta\n     * @internal\n     * @category Misc\n     */\n\n    /**\n     * An object owned by this class that does not share properties with its super class.\n     *\n     * This object may contain other properties which are added as needed and are not documented here.\n     *\n     * @property {Object} $meta The class meta object.\n     * @property {Function} $meta.class The class constructor that owns the meta object.\n     * @property {Object} $meta.super The `$meta` object for the super class. This is `null` for `Base`.\n     * @property {Object} $meta.config The object holding the default configuration values for this class.\n     * @property {Object} $meta.configs An object keyed by config name that holds the defined configs for the class.\n     * The value of each property is a {@link Core/Config} instance.\n     * @property {Boolean} $meta.forkConfigs This will be `true` if the default configuration values for this class\n     * (in the `config` property of the meta object) must be forked to avoid object sharing, or if the object can be\n     * passed to `Object.create()` for efficiency.\n     * @property {Function[]} $meta.hierarchy The array of classes in the ancestry of this class. This will start with\n     * `Base` at index 0 and ends with this class.\n     * @property {Function[]} $meta.properties The array of classes that define a \"static get properties()\" getter.\n     * @internal\n     * @static\n     * @category Misc\n     */\n    static get $meta() {\n        const me = this;\n        let meta = me[metaSymbol];\n\n        if (!hasOwn(me, metaSymbol)) {\n            me[metaSymbol] = meta = newMeta();\n\n            meta.class = me;\n\n            me.setupClass(meta);\n        }\n\n        return meta;\n    }\n\n    /**\n     * This optional class method is called when a class is mixed in using the {@link #function-mixin-static mixin()}\n     * method.\n     * @internal\n     */\n    static onClassMixedIn() {\n        // empty\n    }\n\n    /**\n     * Returns the merge of the `baseConfig` and `config` config objects based on the configs defined by this class.\n     * @param {Object} baseConfig The base config or defaults.\n     * @param {...Object} configs One or more config objects that takes priority over `baseConfig`.\n     * @returns {Object}\n     * @internal\n     */\n    static mergeConfigs(baseConfig, ...configs) {\n        const\n            classConfigs = this.$meta.configs,\n            result       = Objects.clone(baseConfig) || {};\n\n        let config, i, key, value;\n\n        for (i = 0; i < configs.length; ++i) {\n            config = configs[i];\n\n            if (config) {\n                for (key in config) {\n                    value = config[key];\n\n                    if (classConfigs[key]) {\n                        value = classConfigs[key].merge(value, result[key]);\n                    }\n                    else if (result[key] && value) {\n                        value = Config.merge(value, result[key]);\n                    }\n\n                    result[key] = value;\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Applies one or more `mixins` to this class and returns the produced class constructor.\n     *\n     * For example, instead of writing this:\n     * ```\n     *  class A extends Delayable(Events(Localizable(Base))) {\n     *      // ...\n     *  }\n     * ```\n     *\n     * Using this method, one would write this:\n     * ```\n     *  class A extends Base.mixin(Localizable, Events, Delayable) {\n     *      // ...\n     *  }\n     * ```\n     * If one of the mixins specified has already been mixed into the class, it will be ignored and not mixed in a\n     * second time.\n     * @param {...Function} mixins\n     * @returns {Function}\n     * @category Misc\n     */\n    static mixin(...mixins) {\n        // Starting w/the first class C = this\n        let C = this,\n            i;\n\n        // wrap each class C using mixins[i] to produce the next class\n        for (i = 0; i < mixins.length; ++i) {\n            const\n                mixin = mixins[i],\n                // Grab or create a unique Symbol for this mixin so we can tell if we've already mixed it in\n                tag   = mixin[mixinTagSymbol] || (mixin[mixinTagSymbol] = Symbol('mixinTag'));\n\n            if (C[tag]) {\n                continue;\n            }\n\n            C      = mixin(C);\n            C[tag] = true;  // properties on the constructor are inherited to subclass constructors...\n\n            if (hasOwn(C, 'onClassMixedIn')) {\n                C.onClassMixedIn();\n            }\n        }\n\n        return C;\n    }\n\n    /**\n     * This method is called only once for any class. This can occur when the first instance is created or when the\n     * `$meta` object is first requested.\n     * @param {Object} meta The `$meta` object for the class.\n     * @internal\n     * @category Misc\n     */\n    static setupClass(meta) {\n        const\n            cls   = meta.class,\n            // Trigger setupClass on the super class (if it has yet to happen):\n            base  = getPrototypeOf(cls).$meta,\n            name  = cls.$$name,\n            names = base.names,\n            proto = cls.prototype;\n\n        defineProperty(proto, '$meta', {\n            value : meta\n        });\n\n        Object.assign(meta, {\n            super       : base,\n            config      : Object.create(base.config),\n            configs     : Object.create(base.configs),\n            declarables : base.declarables,\n            forkConfigs : base.forkConfigs,\n            hierarchy   : Object.freeze([...base.hierarchy, cls]),\n            names       : names.includes(name) ? names : Object.freeze([...names, name]),\n            properties  : base.properties,\n            nullify     : base.nullify?.slice()\n        });\n\n        if (names !== meta.names) {\n            const\n                isName = `is${name}`,\n                defineIsProperty = obj => {\n                    if (!hasOwn(obj, isName)) {\n                        defineProperty(obj, isName,  {\n                            get() {\n                                // This check is intended to verify correct class name for minified packages\n                                if (!hasOwn(typeof obj === 'object' ? obj.constructor : obj, '$name')) {\n                                    console.warn(\n                                        `$name static property or getter required for class ${name} to provide class name for minified sources.` +\n                                        (VersionHelper.isTestEnv ? '' : '\\nhttps://bryntum.com/products/grid/docs/api/Core/widget/Widget#property-$name-static')\n                                    );\n                                }\n                                return true;\n                            }\n                        });\n                    }\n                };\n\n            defineIsProperty(proto);\n            defineIsProperty(cls);\n        }\n\n        // NOTE: we always use meta.declarables because setupDeclarable() can replace the array on the meta object\n        // when new declarable properties are added...\n        for (let decl, setupName, i = 0; i < meta.declarables.length; ++i) {\n            decl = meta.declarables[i];\n\n            if (hasOwn(cls, decl)) {\n                setupName = setupNames[decl] || (setupNames[decl] = `setup${StringHelper.capitalize(decl)}`);\n                cls[setupName](cls, meta);\n            }\n        }\n\n        /*  Add slash to the front of this line to enable the diagnostic block:\n        //<debug>\n        // Detect class derived from configurable classes that have colliding methods:\n        if (!hasOwn(cls, 'configurable') && !VersionHelper.isTestEnv) {\n            const warn = console.warn.direct || console.warn;\n\n            for (const cfg of Object.values(meta.configs)) {\n                if (!cfg.simple) {\n                    const desc = Object.getOwnPropertyDescriptor(proto, cfg.name);\n\n                    if (desc) {\n                        warn(`${cls.name}.${cfg.name} overridden`, desc);\n                    }\n\n                    if (hasOwn(proto, cfg.changer)) {\n                        warn(`${cls.name}.${cfg.name} has changer`);\n                    }\n\n                    if (hasOwn(proto, cfg.updater)) {\n                        warn(`${cls.name}.${cfg.name} has updater`);\n                    }\n                }\n            }\n        }\n        //</debug>\n        /**/\n    }\n\n    /**\n     * This method is called as part of `setupClass()`. It will process the `configurable()` return object and the\n     * `defaultConfig` return object.\n     * @param {Object} meta The `meta` object for this class.\n     * @param {Object} configs The config definition object.\n     * @param {Boolean} simple `true` when processing `defaultConfig` and `false` when processing `configurable`.\n     * @private\n     * @category Configuration\n     */\n    static setupConfigs(meta, configs, simple) {\n        const\n            classConfigValues = meta.config,\n            classConfigs      = meta.configs,\n            cls               = meta.class,\n            superMeta         = meta.super;\n\n        let { nullify } = meta,\n            cfg, defaultValue, options, setDefault, value, wasNullify;\n\n        for (const name in configs) {\n            value = configs[name];\n\n            if (simple) {\n                // Using \"defaultConfig\"\n                if (!(cfg = classConfigs[name])) {\n                    cfg = Config.get(name, defaultConfigOptions);\n                }\n                else {\n                    // The property may be declared in a base class using configurable(), so it may have special\n                    // merge processing:\n                    value = cfg.merge(value, classConfigValues[name], meta, superMeta);\n                }\n\n                /*  Add slash to the front of this line to enable the diagnostic block:\n                //<debug>\n                if (!VersionHelper.isTestEnv) {\n                    const warn = console.warn.direct || console.warn;\n\n                    if (hasOwn(proto, cfg.changer)) {\n                        warn(`${cls.name}.${cfg.name} has changer`);\n                    }\n\n                    if (hasOwn(proto, cfg.updater)) {\n                        warn(`${cls.name}.${cfg.name} has updater`);\n                    }\n                }\n                //</debug>\n                /**/\n            }\n            else {\n                // Using \"configurable\"\n                defaultValue = options = setDefault = undefined;\n\n                if (value && typeof value === 'object' && '$config' in value) {\n                    options = value.$config;\n\n                    if (options && !Objects.isObject(options)) {\n                        options = Objects.createTruthyKeys(options);\n                    }\n\n                    setDefault = 'default' in value;\n                    defaultValue = setDefault ? value.default : defaultValue;\n                    value = value.value;\n                }\n\n                if (!(cfg = classConfigs[name])) {\n                    cfg = Config.get(name, options);\n\n                    cfg.define(cls.prototype);\n\n                    setDefault = !(cfg.field in cls.prototype);  // reduce object shape changes (helps JIT)\n                    wasNullify = false;\n                }\n                else {\n                    wasNullify = cfg.nullify;\n\n                    if (options) {\n                        // Defined by a base class, but maybe being adjusted by derived.\n                        cfg = cfg.extend(options);\n\n                        // In the future, we may need to redefine the property here if options affect the descriptor (such\n                        // as event firing)\n                    }\n\n                    value = cfg.merge(value, classConfigValues[name], meta, superMeta);\n                }\n\n                if (setDefault) {\n                    cfg.setDefault(cls, defaultValue);\n                }\n\n                if (cfg.nullify && !wasNullify) {\n                    (nullify || (nullify = (meta.nullify || (meta.nullify = [])))).push(cfg);\n                }\n            }\n\n            // If any default properties are *mutable* Objects or Array we need to clone them.\n            // so that instances do not share configured values.\n            if (value && (Objects.isObject(value) || Array.isArray(value)) && !Object.isFrozen(value)) {\n                meta.forkConfigs = true;\n            }\n\n            classConfigs[name]      = cfg;\n            classConfigValues[name] = value;\n        }\n    }\n\n    static setupConfigurable(cls, meta) {\n        cls.setupConfigs(meta, cls.configurable, false);\n    }\n\n    static setupDefaultConfig(cls, meta) {\n        cls.setupConfigs(meta, cls.defaultConfig, true);\n    }\n\n    static setupDeclarable(cls, meta) {\n        const declarable = cls.declarable;\n\n        let all = meta.declarables,\n            forked, i;\n\n        for (i = 0; i < declarable.length; ++i) {\n            if (!all.includes(declarable[i])) {\n                if (!forked) {\n                    meta.declarables = forked = all = all.slice();\n                }\n\n                all.push(declarable[i]);\n            }\n        }\n    }\n\n    static setupProperties(cls, meta) {\n        meta.properties = meta.super.properties.slice();\n        meta.properties.push(cls);\n\n        Object.freeze(meta.properties);\n    }\n\n    static setupPrototypeProperties(cls) {\n        Object.assign(cls.prototype, cls.prototypeProperties);\n    }\n\n    /**\n     * Gets the full {@link #property-defaultConfig-static} block for this object's entire inheritance chain\n     * all the way up to but not including {@link Core.Base}\n     * @returns {Object} All default config values for this class.\n     * @private\n     * @category Configuration\n     */\n    getDefaultConfiguration() {\n        return this.constructor.getDefaultConfiguration();\n    }\n\n    /**\n     * Gets the full {@link #property-defaultConfig-static} block for the entire inheritance chain for this class\n     * all the way up to but not including {@link Core.Base}\n     * @returns {Object} All default config values for this class.\n     * @private\n     * @category Configuration\n     */\n    static getDefaultConfiguration() {\n        const\n            meta   = this.$meta,\n            config = meta.forkConfigs ? Base.fork(meta.config) : Object.create(meta.config);\n\n        if (VersionHelper.isTestEnv && BrowserHelper.isBrowserEnv &&\n            config.testConfig && globalThis.__applyTestConfigs) {\n            for (const o in config.testConfig) {\n                config[o] = config.testConfig[o];\n            }\n        }\n\n        return config;\n    }\n\n    static fork(obj) {\n        let ret = obj,\n            key, value;\n\n        if (obj && Objects.isObject(obj) && !Object.isFrozen(obj)) {\n            ret = Object.create(obj);\n\n            for (key in obj) {\n                value = obj[key];\n\n                if (value) {\n                    if (Objects.isObject(value)) {\n                        ret[key] = Base.fork(value);\n                    }\n                    else if (Array.isArray(value)) {\n                        ret[key] = value.slice();\n                    }\n                }\n            }\n        }\n\n        return ret;\n    }\n\n    /**\n     * Gets the full {@link #property-properties-static} block for this class's entire inheritance chain\n     * all the way up to but not including {@link Core.Base}\n     * @returns {Object} All default config values for this class.\n     * @private\n     * @category Configuration\n     */\n    getProperties() {\n        const\n            // The meta.properties array is an array of classes that define \"static get properties()\"\n            hierarchy = this.$meta.properties,\n            result    = {};\n\n        // TODO: if properties block does not change this could be cached? would speed up loading of big data sets\n        //  into grid. The problem is that this call creates new (i.e., non-shared) instances of objects, arrays and\n        //  Map objects that apply to each instance. These would all need to be cloned so it may be better to just\n        //  call the properties getter each time and let it create new instances of whatever types.\n\n        //for (cls of hierarchy) { // for-of transpiles badly and this is called a lot\n        for (let i = 0; i < hierarchy.length; i++) {\n            // Gather the class result in top-down order so that subclass properties override superclass properties\n            Object.assign(result, hierarchy[i].properties);\n        }\n\n        return result;\n    }\n\n    static get superclass() {\n        return getPrototypeOf(this);\n    }\n\n    /**\n     * Used by the Widget and GridFeatureManager class internally. Returns the class hierarchy of this object\n     * starting from the `topClass` class (which defaults to `Base`).\n     *\n     * For example `classHierarchy(Widget)` on a Combo would yield `[Widget, Field, TextField, PickerField, Combo]`\n     * @param {Function} [topClass] The topmost class constructor to start from.\n     * @returns {Function[]} The class hierarchy of this instance.\n     * @private\n     * @category Configuration\n     */\n    classHierarchy(topClass) {\n        const\n            hierarchy = this.$meta.hierarchy,\n            index     = topClass ? hierarchy.indexOf(topClass) : 0;\n\n        return (index > 0) ? hierarchy.slice(index) : hierarchy;\n    }\n\n    /**\n     * Checks if an obj is of type using object's $$name property and doing string comparison of the property with the\n     * type parameter.\n     *\n     * @param {String} type\n     * @returns {Boolean}\n     * @category Misc\n     */\n    static isOfTypeName(type) {\n        return this.$meta.names.includes(type);\n    }\n\n    /**\n     * Removes all event listeners that were registered with the given `name`.\n     * @param {String|Symbol} name The name of the event listeners to be removed.\n     * @category Events\n     */\n    detachListeners(name) {\n        let detachers = this.$detachers;\n\n        detachers = detachers?.[name];\n\n        if (detachers) {\n            while (detachers.length) {\n                detachers.pop()();\n            }\n        }\n    }\n\n    /**\n     * Tracks a detacher function for the specified listener name.\n     * @param {String} name The name assigned to the associated listeners.\n     * @param {Function} detacher The detacher function.\n     * @private\n     */\n    trackDetacher(name, detacher) {\n        const\n            detachers = this.$detachers || (this.$detachers = {}),\n            bucket    = detachers[name] || (detachers[name] = []);\n\n        bucket.push(detacher);\n    }\n\n    /**\n     * Removes all detacher functions for the specified `Events` object. This is called\n     * by the `removeAllListeners` method on that object which is typically called by its\n     * `destroy` invocation.\n     * @param {Core.mixin.Events} eventer The `Events` instance to untrack.\n     * @private\n     */\n    untrackDetachers(eventer) {\n        const detachers = this.$detachers;\n\n        if (detachers) {\n            for (const name in detachers) {\n                const bucket = detachers[name];\n\n                for (let i = bucket.length; i-- > 0; /* empty */) {\n                    if (bucket[i].eventer === eventer) {\n                        bucket.splice(i, 1);\n                    }\n                }\n            }\n        }\n    }\n}\n\nconst proto = Base.prototype;\n\n// Informs the standard config setter there is no need to call this fn:\nproto.onConfigChange.$nullFn = emptyFn.$nullFn = true;\n\nBase[metaSymbol] = proto.$meta = newMeta({\n    class       : Base,\n    config      : Object.freeze({}),\n    configs     : Object.create(null),\n    declarables : Base.declarable,\n    forkConfigs : false,\n    hierarchy   : Object.freeze([Base]),\n    names       : Object.freeze(['Base']),\n    nullify     : null,\n    properties  : Object.freeze([]),\n    super       : null\n});\n\n// Avoid some object shape changes:\nObject.assign(proto, {\n    $detachers : null,\n\n    configObserver : null,\n\n    /**\n     * This property is set to `true` before the `constructor` returns.\n     * @member {Boolean}\n     * @readonly\n     * @category Lifecycle\n     */\n    isConstructing : true,\n\n    /**\n     * This property is set to `true` by {@link #function-destroy} after the {@link #function-doDestroy} method returns.\n     * It is also one of the few properties that remains on the object after returning from `destroy()`. This property\n     * is often checked in code paths that may encounter a destroyed object (like some event handlers) or in the\n     * destruction path during cleanup.\n     * @member {Boolean}\n     * @readonly\n     * @category Lifecycle\n     */\n    isDestroyed : false,\n\n    /**\n     * This property is set to `true` on entry to the {@link #function-destroy} method. It remains on the objects after\n     * returning from `destroy()`. If {@link #property-isDestroyed} is `true`, this property will also be `true`, so\n     * there is no need to test for both (for example, `comp.isDestroying || comp.isDestroyed`).\n     * @member {Boolean}\n     * @readonly\n     * @category Lifecycle\n     */\n    isDestroying : false\n});\n\n//<debug>\nif (BrowserHelper.isBrowserEnv) {\n    globalThis.bryntum.isDebug = true;\n}\n\nBase.DEBUG = true;\n//</debug>\n\nBase.emptyFn = emptyFn;\n\n/* <remove-on-release> */\nBase.DESTROYING = {};\n/* </remove-on-release> */\n\nVersionHelper.setVersion('core', '5.3.0');\n","/**\n * @module Core/helper/ArrayHelper\n */\n\n/**\n * Helper with useful functions for handling Arrays\n * @internal\n */\nexport default class ArrayHelper {\n    static clean(array) {\n        return array.reduce((res, item) => {\n            if (item !== null && item !== undefined && !(Array.isArray(item) && item.length === 0) && item !== '') res.push(item);\n            return res;\n        }, []);\n    }\n\n    /**\n     * Similar to [`Array.from()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from)\n     * this method creates an array from an `iterable` object. Where `Array.from()` accepts a mapper function as the\n     * second argument, this method accepts a `filter` function as its second argument. If a mapper function is also\n     * needed, it can be passed as the third argument. Unlike `Array.from()`, if this method is passed `null`, it will\n     * return an empty array.\n     * @param {Array} iterable The iterable object to convert (must support `for-of` loop iteration).\n     * @param {Function} [filter] A function to apply to each item of the `iterable` which must return a truthy value\n     * to include that item in the resulting array.\n     * @param {Function} [map] A function to apply to each item of the `iterable` that returns the actual value to put\n     * into the returned array. If a `filter` is also supplied, this method is only called for those items that pass\n     * the filter test.\n     * @returns {Array}\n     */\n    static from(iterable, filter, map) {\n        const array = [];\n\n        if (iterable) {\n            for (const it of iterable) {\n                if (!filter || filter(it)) {\n                    array.push(map ? map(it) : it);\n                }\n            }\n        }\n\n        return array;\n    }\n\n    /**\n     * Remove one or more items from an array\n     * @param {Array} array Array to remove from\n     * @param {Object} items One or more items to remove\n     * @returns {Boolean} Returns true if any item was removed\n     */\n    static remove(array, ...items) {\n        let index,\n            item,\n            removed = false;\n\n        for (let i = 0; i < items.length; i++) {\n            item = items[i];\n            if ((index = array.indexOf(item)) !== -1) {\n                array.splice(index, 1);\n                removed = true;\n            }\n        }\n\n        return removed;\n    }\n\n    /**\n     * Calculates the insertion index of a passed object into the passed Array according\n     * to the passed comparator function. Note that the passed Array *MUST* already be ordered.\n     * @param {Object} item The item to calculate the insertion index for.\n     * @param {Array} The array into which the item is to be inserted.\n     * @param {Function} comparatorFn The comparison function. Must return -1 or 0 or 1.\n     * @param {Object} comparatorFn.lhs The left object to compare.\n     * @param {Object} comparatorFn.rhs The right object to compare.\n     * @param {Number} index The possible correct index to try first before a binary\n     * search is instigated.\n     * @internal\n     */\n    static findInsertionIndex(item, array, comparatorFn = this.lexicalCompare, index) {\n        const len = array.length;\n        let beforeCheck, afterCheck;\n\n        if (index < len) {\n            beforeCheck = index > 0 ? comparatorFn(array[index - 1], item) : 0;\n            afterCheck = index < len - 1 ? comparatorFn(item, array[index]) : 0;\n            if (beforeCheck < 1 && afterCheck < 1) {\n                return index;\n            }\n        }\n\n        return this.binarySearch(array, item, comparatorFn);\n    }\n\n    /**\n     * Similar to the native `Array.find()` call, but this finds the *last* element in the array for which\n     * the passed function returns a truthy value.\n     * @param {Object[]} array The array to find in.\n     * @param {Function} fn The testing function.\n     * @param {Object} [thisObj] The scope (`this` reference) in which to call the function.\n     */\n    static findLast(array, fn, thisObj) {\n        for (let { length } = array, i = length - 1; i >= 0; i--) {\n            if (fn.call(thisObj, array[i], i, array)) {\n                return array[i];\n            }\n        }\n    }\n\n    /**\n     * This method returns the index that a given item would be inserted into the\n     * given (sorted) `array`. Note that the given `item` may or may not be in the\n     * array. This method will return the index of where the item *should* be.\n     *\n     * For example:\n     *\n     *      var array = [ 'A', 'D', 'G', 'K', 'O', 'R', 'X' ];\n     *      var index = ArrayHelper.binarySearch(array, 'E');\n     *\n     *      console.log('index: ' + index);\n     *      // logs \"index: 2\"\n     *\n     *      array.splice(index, 0, 'E');\n     *\n     *      console.log('array : ' + array.join(''));\n     *      // logs \"array: ADEGKORX\"\n     *\n     * @param {Object[]} array The array to search.\n     * @param {Object} item The item that you want to insert into the `array`.\n     * @param {Number} [begin=0] The first index in the `array` to consider.\n     * @param {Number} [end=array.length] The index that marks the end of the range\n     * to consider. The item at this index is *not* considered.\n     * @param {Function} [compareFn] The comparison function that matches the sort\n     * order of the `array`. The default `compareFn` compares items using less-than\n     * and greater-than operators.\n     * @returns {Number} The index for the given item in the given array based on\n     * the passed `compareFn`.\n     */\n    static binarySearch(array, item, begin = 0, end = array.length, compareFn = this.lexicalCompare) {\n        const length = array.length;\n        let middle, comparison;\n\n        if (begin instanceof Function) {\n            compareFn = begin;\n            begin = 0;\n        }\n        else if (end instanceof Function) {\n            compareFn = end;\n            end = length;\n        }\n\n        --end;\n\n        while (begin <= end) {\n            middle = (begin + end) >> 1;\n            comparison = compareFn(item, array[middle]);\n            if (comparison >= 0) {\n                begin = middle + 1;\n            }\n            else if (comparison < 0) {\n                end = middle - 1;\n            }\n        }\n\n        return begin;\n    }\n\n    magnitudeCompare(lhs, rhs) {\n        return (lhs < rhs) ? -1 : ((lhs > rhs) ? 1 : 0);\n    }\n\n    lexicalCompare(lhs, rhs) {\n        lhs = String(lhs);\n        rhs = String(rhs);\n\n        return (lhs < rhs) ? -1 : ((lhs > rhs) ? 1 : 0);\n    }\n\n    /**\n     * Similar to Array.prototype.fill(), but constructs a new array with the specified item count and fills it with\n     * clones of the supplied item.\n     * @param {Number} count Number of entries to create\n     * @param {Object|Array} itemOrArray Item or array of items to clone (uses object spread to create shallow clone)\n     * @param {Function} [fn] An optional function that is called for each item added, to allow processing\n     * @returns {Array} A new populated array\n     */\n    static fill(count, itemOrArray = {}, fn = null) {\n        const\n            result = [],\n            items  = Array.isArray(itemOrArray) ? itemOrArray : [itemOrArray];\n\n        for (let i = 0; i < count; i++) {\n            for (const item of items) {\n                // Using object spread here forces us to use more babel plugins and will make\n                // react_typescript demo very difficult to setup\n                const processedItem = Object.assign({}, item);\n\n                if (fn) {\n                    fn(processedItem, i);\n                }\n\n                result.push(processedItem);\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Populates an array with the return value from `fn`.\n     * @param {Number} count Number of entries to create\n     * @param {Function} fn A function that is called `count` times, return value is added to array\n     * @param {Number} fn.index Current index in the array\n     * @privateparam {Boolean} [oneBased] Add 1 to the index before calling the fn (making it 1 based)\n     * @returns {Array} A new populated array\n     */\n    static populate(count, fn, oneBased = false) {\n        const items = [];\n        for (let i = 0; i < count; i++) {\n            items.push(fn(i + (oneBased ? 1 : 0)));\n        }\n        return items;\n    }\n\n    /**\n     * Pushes `item` on to the `array` if not already included\n     * @param {Array}  array Array to push to\n     * @param {...Object} items Item(s) to push if not already included\n     */\n    static include(array, ...items) {\n        for (const item of items) {\n            if (!array.includes(item)) {\n                array.push(item);\n            }\n        }\n    }\n\n    /**\n     * Returns a new array with the unique items from the supplied array.\n     * @param {Array} array Input array\n     * @returns {Array} New array with unique items\n     */\n    static unique(array) {\n        return [...new Set(array)];\n    }\n\n    // Kept for future reference : Wanted to create an indexer on Stores.\n    static allowNegative(array) {\n        // From https://github.com/sindresorhus/negative-array\n        return new Proxy(array, {\n            get(target, name, receiver) {\n                if (typeof name !== 'string') {\n                    return Reflect.get(target, name, receiver);\n                }\n\n                const index = Number(name);\n\n                if (Number.isNaN(index)) {\n                    return Reflect.get(target, name, receiver);\n                }\n\n                return target[index < 0 ? target.length + index : index];\n            },\n            set(target, name, value, receiver) {\n                if (typeof name !== 'string') {\n                    return Reflect.set(target, name, value, receiver);\n                }\n\n                const index = Number(name);\n\n                if (Number.isNaN(index)) {\n                    return Reflect.set(target, name, value, receiver);\n                }\n\n                target[index < 0 ? target.length + index : index] = value;\n\n                return true;\n            }\n        });\n    }\n\n    static delta(a, b, useRelativeNaming = false) {\n        // Nicer syntax but about 40% slower (an extra iteration)\n        // const\n        //     onlyInA = a.filter(item => !b.includes(item)),\n        //     onlyInB = b.filter(item => !a.includes(item)),\n        //     inBoth  = a.filter(item => b.includes(item));\n\n        // Quick bailout for nonexisting target array\n        if (!b) {\n            return useRelativeNaming\n                ? { toAdd : a, toRemove : [], toKeep : [] }\n                : { onlyInA : a, onlyInB : [], inBoth : [] };\n        }\n\n        const\n            onlyInA = [],\n            onlyInB = [],\n            inBoth  = new Set(),\n            bSet    = new Set(b);\n\n        for (let i = 0; i < a.length; i++) {\n            const item = a[i];\n\n            if (bSet.has(item)) {\n                inBoth.add(item);\n            }\n            else {\n                onlyInA.push(item);\n            }\n        }\n\n        for (let i = 0; i < b.length; i++) {\n            const item = b[i];\n\n            if (!inBoth.has(item)) {\n                onlyInB.push(item);\n            }\n        }\n\n        if (useRelativeNaming) {\n            return { toAdd : onlyInA, toRemove : onlyInB, toKeep : inBoth };\n        }\n\n        return { onlyInA, onlyInB, inBoth : [...inBoth] };\n    }\n\n    /**\n     * Returns the passed object wrapped in an array. Special handling of the following cases:\n     * * Passing an array returns it as is\n     * * Passing a `Set` returns it converted to an Array\n     * * Passing `null`/`undefined` returns the passed value\n     *\n     * ```javascript\n     * const records = ArrayHelper.asArray(record);\n     *\n     * // { id : 1 } -> [{ id : 1 }]\n     * // [{ id : 1 }] -> [{ id : 1 }]\n     * ```\n     *\n     * @param {*} arrayOrObject\n     * @returns {Array|null}\n     * @internal\n     */\n    static asArray(arrayOrObject) {\n        if (arrayOrObject == null) {\n            return arrayOrObject;\n        }\n\n        if (arrayOrObject instanceof Set) {\n            return Array.from(arrayOrObject);\n        }\n\n        return Array.isArray(arrayOrObject) ? arrayOrObject : [arrayOrObject];\n    }\n\n    /**\n     * Identity function that returns its input.\n     * @param {*} Any value\n     * @returns {*} The input value\n     * @internal\n     */\n    static identity(x) {\n        return x;\n    }\n\n    /**\n     * Transform an array into a key:value dictionary using the specified\n     * key and value getters. Does not group values, so only one result will\n     * appear in the output for a given key.\n     *\n     * ```javascript\n     * const input = [{\n     *   id: '1',\n     *   other: 'one'\n     * },{\n     *   id: '2',\n     *   other: 'two'\n     * }];\n     *\n     * keyBy(input, rec => rec.id)\n     *\n     * // {\n     * //    '1': { id: '1', other: 'one' },\n     * //    '2': { id: '2', other: 'two' }\n     * // }\n     * ```\n     *\n     * @param {Object[]} array Array from which to build dictionary\n     * @param {Function|String} getKey Function to produce the key for a given array entry, or a string property name to read\n     * @param {Function} getValue Optional function to transform array elements. Defaults to returning the element itself\n     * @returns {Object} A key->value dictionary with keys as returned by `getKey` and values returned by `getValue`\n     * @internal\n     */\n    static keyBy(array, keyGetter, valueGetter = ArrayHelper.identity) {\n        const\n            getKey = typeof keyGetter === 'string' ? o => o?.[keyGetter] : keyGetter,\n            getValue = typeof valueGetter === 'string' ? o => o?.[valueGetter] : valueGetter;\n        return array.reduce((dict, next) => {\n            dict[getKey(next)] = getValue(next);\n            return dict;\n        }, {});\n    }\n}\n","/**\n * @module Core/helper/FunctionHelper\n */\n\nconst\n    commaSepRe = /,\\s*/,\n    decompiledSym = Symbol('decompiled'),\n    // [async] p => ...\n    fnRe1 = /^\\s*(async\\s+)?([a-z_]\\w*)\\s*=>([\\s\\S]+)$/i,\n    // [async] (p1?[, px]*) => ...\n    fnRe2 = /^\\s*(async\\s*)?\\s*\\(((?:[a-z_]\\w*(?:, [a-z_]\\w*)*)?)\\)\\s+=>([\\s\\S]+)$/i,\n    // [async] [function] [name] (p1?[, px]*) ...\n    fnRe3 = /^(\\s*async)?(?:\\s*function)?(?:\\s*([a-z_]\\w*))?\\s*\\(((?:[a-z_]\\w*(?:, [a-z_]\\w*)*)?)\\)([\\s\\S]+)$/i,\n    { hasOwnProperty } = Object.prototype;\n\n/**\n * Provides functionality for working with functions\n * @internal\n */\nexport default class FunctionHelper {\n    /**\n     * Inserts a function after the specified `method` is called on an `object`. To remove this hook, invoke the\n     * function returned by this method.\n     * ```\n     *  class A {\n     *      method() {\n     *          console.log('method');\n     *      }\n     *  }\n     *\n     *  let instance = new A();\n     *\n     *  let detach = FunctionHelper.after(instance, 'method', () => { console.log('after') });\n     *\n     *  instance.method();\n     *  > method\n     *  > after\n     *\n     *  detach();\n     *  instance.method();\n     *  > method\n     * ```\n     * The value returned by the original method is passed as the first argument to `fn` followed by all the arguments\n     * passed by the caller.\n     *\n     * If `fn` returns a value (not `undefined`), that value is returned from the method call instead of the value\n     * returned by the original method.\n     * ```\n     *  class A {\n     *      method(x) {\n     *          console.log('method', x);\n     *          return x * 2\n     *      }\n     *  }\n     *\n     *  let instance = new A();\n     *\n     *  let detach = FunctionHelper.after(instance, 'method', (ret, x) => {\n     *      console.log('after', ret, x);\n     *      return x / 2;\n     *  });\n     *\n     *  console.log(instance.method(50));\n     *  > method 50\n     *  > after 100 50\n     *  > 25\n     *\n     *  detach();\n     *  console.log(instance.method(50));\n     *  > method 50\n     *  > 100\n     * ```\n     *\n     * @param {Object} object The object to hook.\n     * @param {String} method The name of the method on `object` to hook.\n     * @param {Function|String} fn The function or method name (on `thisObj`) to call after `method`.\n     * @param {Object} [thisObj] The `this` pointer value for calling `fn`.\n     * @param {Object} [options] Additional options\n     * @param {Boolean} [options.return=true] Specify `false` to not include the return value of the hooked method as\n     * the first argument to `fn`.\n     * @returns {Function} The function to call to remove the hook.\n     */\n    static after(object, method, fn, thisObj, options) {\n        const\n            named = typeof fn === 'string',\n            withReturn = options?.return !== false,\n            hook = (...args) => {\n                const\n                    // if object.destroy() occurs, our hook will be removed, so this fn won't be called in that case\n                    origResult = hook.$nextHook.call(object, ...args),\n                    hookResult = thisObj?.isDestroyed ? undefined : (withReturn\n                        ? (named ? thisObj[fn](origResult, ...args) : fn.call(thisObj, origResult, ...args))\n                        : (named ? thisObj[fn](...args) : fn.call(thisObj, ...args))\n                    );\n\n                return (hookResult === undefined) ? origResult : hookResult;\n            };\n\n        return FunctionHelper.hookMethod(object, method, hook);\n    }\n\n    /**\n     * Inserts a function before the specified `method` is called on an `object`. To remove this hook, invoke the\n     * function returned by this method.\n     * ```\n     *  class A {\n     *      method() {\n     *          console.log('method');\n     *      }\n     *  }\n     *\n     *  let instance = new A();\n     *\n     *  let detach = FunctionHelper.before(instance, 'method', () => { console.log('before') });\n     *\n     *  instance.method();\n     *  > before\n     *  > method\n     *\n     *  detach();\n     *  instance.method();\n     *  > method\n     * ```\n     * If `fn` returns `false`, the original method is not invoked and `false` is returned to the caller.\n     * ```\n     *  class A {\n     *      method(x) {\n     *          console.log('method', x);\n     *          return x * 2;\n     *      }\n     *  }\n     *\n     *  let instance = new A();\n     *\n     *  let detach = FunctionHelper.before(instance, 'method', x => {\n     *      console.log('before', x);\n     *      return false;\n     *  });\n     *\n     *  console.log(instance.method(50));\n     *  > before 50\n     *  > false\n     *\n     *  detach();\n     *  console.log(instance.method(50));\n     *  > method 50\n     *  > 100\n     * ```\n     *\n     * @param {Object} object The object to hook.\n     * @param {String} method The name of the method on `object` to hook.\n     * @param {Function|String} fn The function or method name (on `thisObj`) to call before `method`.\n     * @param {Object} [thisObj] The `this` pointer value for calling `fn`.\n     * @returns {Function} The function to call to remove the hook.\n     */\n    static before(object, method, fn, thisObj) {\n        const\n            named = typeof fn === 'string',\n            hook = (...args) => {\n                const ret = (thisObj?.isDestroyed\n                    ? 0\n                    : (named ? thisObj[fn](...args) : fn.call(thisObj, ...args))\n                );\n\n                return (ret === false) ? ret : hook.$nextHook.call(object, ...args);\n            };\n\n        return FunctionHelper.hookMethod(object, method, hook);\n    }\n\n    static curry(func) {\n        return function curried(...args) {\n            if (args.length >= func.length) {\n                return func.apply(this, args);\n            }\n            else {\n                return function(...args2) {\n                    return curried.apply(this, args.concat(args2));\n                };\n            }\n        };\n    }\n\n    static bindAll(obj) {\n        for (const key in obj) {\n            if (typeof obj[key] === 'function') {\n                obj[key] = obj[key].bind(obj);\n            }\n        }\n    }\n\n    /**\n     * Returns a function which calls the passed `interceptor` function first, and the passed `original` after\n     * as long as the `interceptor` does not return `false`.\n     * @param {Function} original The function to call second.\n     * @param {Function} interceptor The function to call first.\n     * @param {Object} [thisObj] The `this` reference when the functions are called.\n     * @returns {Function} A function which yields the return value from the `original` function **if it was called**, else `false`.\n     */\n    static createInterceptor(original, interceptor, thisObj) {\n        return function(...args) {\n            const theThis = thisObj || this;\n            if (interceptor.call(theThis, ...args) !== false) {\n                return original.call(theThis, ...args);\n            }\n            return false;\n        };\n    }\n\n    /**\n     * Returns a function which calls the passed `sequence` function after calling\n     * the passed `original`.\n     * @param {Function} original The function to call first.\n     * @param {Function} sequence The function to call second.\n     * @param {Object} [thisObj] The `this` reference when the functions are called.\n     * @returns {Function} A function which yields the value returned from the sequence if it returned a value, else the return\n     * value from the original function.\n     */\n    static createSequence(original, sequence, thisObj) {\n        return (...args) => {\n            const origResult = original.call(thisObj, ...args),\n                sequenceResult = sequence.call(thisObj, ...args);\n\n            return (sequenceResult === undefined) ? origResult : sequenceResult;\n        };\n    }\n\n    /**\n     * Create a \"debounced\" function which will call on the \"leading edge\" of a timer period.\n     * When first invoked will call immediately, but invocations after that inside its buffer\n     * period will be rejected, and *one* invocation will be made after the buffer period has expired.\n     *\n     * This is useful for responding immediately to a first mousemove, but from then on, only\n     * calling the action function on a regular timer while the mouse continues to move.\n     *\n     * @param {Function} fn The function to call.\n     * @param {Number} buffer The milliseconds to wait after each execution before another execution takes place.\n     * @param {Object} [thisObj] `this` reference for the function.\n     * @param {Array} [extraArgs] The argument list to append to those passed to the function.\n     * @param {Function} [alt] A function to call when the invocation is rejected due to buffer time not having expired.\n     * @returns {Function} A function which calls the passed `fn` only if at least the passed `buffer`\n     * milliseconds has elapsed since its last invocation.\n     */\n    static createThrottled(fn, buffer, thisObj, extraArgs, alt) {\n        let lastCallTime = -Number.MAX_VALUE,\n            callArgs,\n            timerId;\n\n        const\n            invoke = () => {\n                timerId = 0;\n                lastCallTime = performance.now();\n                callArgs.push.apply(callArgs, extraArgs);\n                fn.apply(thisObj, callArgs);\n            },\n            result = function(...args) {\n                const elapsed = performance.now() - lastCallTime;\n\n                callArgs = args;\n\n                // If it's been more then the buffer period since we invoked, we can call it now\n                if (elapsed >= buffer) {\n                    clearTimeout(timerId);\n                    invoke();\n                }\n                // Otherwise, kick off a timer for the requested period.\n                else {\n                    if (!timerId) {\n                        timerId = setTimeout(invoke, buffer - elapsed);\n                    }\n                    if (alt) {\n                        callArgs.push.apply(callArgs, extraArgs);\n                        alt.apply(thisObj, callArgs);\n                    }\n                }\n            };\n\n        result.cancel = () => clearTimeout(timerId);\n\n        return result;\n    }\n\n    /**\n     * Create a \"debounced\" function which will call on the \"trailing edge\" of a timer period.\n     * When first invoked will wait until the buffer period has expired to call the function, and\n     * more calls within that time will restart the timer.\n     *\n     * This is useful for responding to keystrokes, but deferring action until the user pauses typing.\n     *\n     * @param {Function} fn The function to call.\n     * @param {Number} buffer The milliseconds to wait after each execution before another execution takes place.\n     * @param {Object} [thisObj] `this` reference for the function.\n     * @param {Array} [args] The argument list to append to those passed to the function.\n     * @returns {Function} A function which calls the passed `fn` when at least the passed `buffer`\n     * milliseconds has elapsed since its last invocation.\n     */\n    static createBuffered(fn, buffer, thisObj, args) {\n        let callArgs,\n            timerId;\n\n        const\n            invoke = () => {\n                timerId = 0;\n                result.isPending = false;\n                callArgs.push.apply(callArgs, args);\n                fn.apply(thisObj, callArgs);\n            },\n            result = function(...args) {\n                callArgs = args;\n\n                // Cancel any impending invocation. It's pushed out for <buffer> ms from each call\n                if (timerId) {\n                    clearTimeout(timerId);\n                }\n\n                result.isPending = true;\n\n                timerId = setTimeout(invoke, buffer);\n            };\n\n        result.cancel = () => {\n            result.isPending = false;\n            clearTimeout(timerId);\n        };\n\n        return result;\n    }\n\n    static decompile(fn) {\n        if (!(decompiledSym in fn)) {\n            const code = fn.toString();\n\n            let m = fnRe1.exec(code),\n                args, body, name, decompiled, t;\n\n            if (m) {\n                // [async] p => ...\n                //   [1]   [2]  [3]\n                args = [m[2]];\n                body = m[3];\n            }\n            else if ((m /* assignment */ = fnRe2.exec(code))) {\n                // [async] (p1?[, px]*) => ...\n                //   [1]   [2]             [3]\n                t = m[2].trim();\n                args = t ? t.split(commaSepRe) : [];\n                body = m[3];\n            }\n            else if ((m /* assignment */ = fnRe3.exec(code))) {\n                // [async] [function] [name] (p1?[, px]*) ...\n                //   [1]              [2]     [3]         [4]\n                name = m[2];\n                t = m[3].trim();\n                args = t ? t.split(commaSepRe) : [];\n                body = m[4];\n            }\n\n            body = body?.trim();\n\n            fn[decompiledSym] = decompiled = m && {\n                args,\n                async : Boolean(m[1]),\n                body  : body?.startsWith('{') ? body.substring(1, body.length - 1).trim() : body\n            };\n\n            if (name) {\n                decompiled.name = name;\n            }\n        }\n\n        return fn[decompiledSym];\n    }\n\n    static hookMethod(object, method, hook) {\n        hook.$nextHook = object[method];\n        object[method] = hook;\n\n        return () => {\n            // Object will have no hooks on the instance if it is destroyed (perhaps other reasons too)\n            if (hasOwnProperty.call(object, method)) {\n                let f = object[method],\n                    next;\n\n                if (f === hook) {\n                    // When this is the outermost hook, we may be the last hook. If $nextHook is found on the object's\n                    // prototype, simply delete the slot to expose it. Otherwise, there's another hook, so make it the\n                    // outermost.\n                    if (Object.getPrototypeOf(object)?.[method] === hook.$nextHook) {\n                        delete object[method];\n                    }\n                    else {\n                        object[method] = hook.$nextHook;\n                    }\n                }\n                else {\n                    // Not being the outermost hook means we have outer hooks that should chain to the one we want to\n                    // remove. Be cautious because the object could be destroyed.\n                    for (; (next = f?.$nextHook); f = next) {\n                        if (next === hook) {\n                            f.$nextHook = hook.$nextHook;\n                            break;\n                        }\n                    }\n                }\n            }\n        };\n    }\n\n    /**\n     * Protects the specified `method` on a given `object` such that calling it will not throw exceptions.\n     * @param {Object} object The object whose method is to be protected.\n     * @param {String} method The name of the method to protect.\n     * @param {Function} [handler] An optional function to call for any thrown exceptions.\n     * @internal\n     */\n    static noThrow(object, method, handler) {\n        const fn = object[method];\n\n        object[method] = (...args) => {\n            try {\n                return fn.apply(object, args);\n            }\n            catch (e) {\n                return handler?.(e);\n            }\n        };\n    }\n\n    static returnTrue() {\n        return true;\n    }\n\n    static animate(duration, fn, thisObj, easing = 'linear') {\n        let cancel = false;\n\n        const result = new Promise(resolve => {\n            const start = performance.now(),\n                iterate = () => {\n                    const progress = Math.min((performance.now() - start) / duration, 1),\n                        delayable = thisObj && thisObj.setTimeout ? thisObj : globalThis;\n\n                    if (!cancel) {\n                        if (fn.call(thisObj, this.easingFunctions[easing](progress)) === false) {\n                            resolve();\n                        }\n                    }\n                    if (cancel || progress === 1) {\n                        // Push resolution into the next animation frame so that\n                        // this frame completes before the resolution handler runs.\n                        delayable.requestAnimationFrame(() => resolve());\n                    }\n                    else {\n                        delayable.requestAnimationFrame(iterate);\n                    }\n                };\n\n            iterate();\n        });\n\n        result.cancel = () => {\n            cancel = true;\n            return false;\n        };\n\n        return result;\n    }\n}\n\n/* eslint-disable */\nconst half = 0.5, e1 = 1.70158, e2 = 7.5625, e3 = 1.525, e4 = 2/2.75, e5 = 2.25/2.75, e6 = 1/2.75, e7 = 1.5/2.75, e8 = 2.5/2.75, e9 = 2.625/2.75, e10 = 0.75, e11 = 0.9375, e12 = 0.984375, s1 = 1.70158, s2 = 1.70158;\nFunctionHelper.easingFunctions = {\n    linear         : t => t,\n    easeInQuad     : t => Math.pow(t,2),\n    easeOutQuad    : t => -(Math.pow((t-1),2)-1),\n    easeInOutQuad  : t => (t/=half)<1 ? half*Math.pow(t,2) : -half*((t-=2)*t-2),\n    easeInCubic    : t => Math.pow(t,3),\n    easeOutCubic   : t => Math.pow((t-1),3)+1,\n    easeInOutCubic : t => (t/=half)<1 ? half*Math.pow(t,3) : half*(Math.pow((t-2),3)+2),\n    easeInQuart    : t => Math.pow(t,4),\n    easeOutQuart   : t => -(Math.pow((t-1),4)-1),\n    easeInOutQuart : t => (t/=half)<1 ? half*Math.pow(t,4) : -half*((t-=2)*Math.pow(t,3)-2),\n    easeInQuint    : t => Math.pow(t,5),\n    easeOutQuint   : t => (Math.pow((t-1),5)+1),\n    easeInOutQuint : t => (t/=half)<1 ? half*Math.pow(t,5) : half*(Math.pow((t-2),5)+2),\n    easeInSine     : t => -Math.cos(t*(Math.PI/2))+1,\n    easeOutSine    : t => Math.sin(t*(Math.PI/2)),\n    easeInOutSine  : t => -half*(Math.cos(Math.PI*t)-1),\n    easeInExpo     : t => t===0 ? 0 : Math.pow(2,10*(t-1)),\n    easeOutExpo    : t => t===1 ? 1 : -Math.pow(2,-10*t)+1,\n    easeInOutExpo  : t => (t===0) ? 0 : (t===1) ? 1 : ((t/=half)<1) ? half*Math.pow(2,10*(t-1)) : half*(-Math.pow(2,-10*--t)+2),\n    easeInCirc     : t => -(Math.sqrt(1-(t*t))-1),\n    easeOutCirc    : t => Math.sqrt(1-Math.pow((t-1),2)),\n    easeInOutCirc  : t => (t/=half)<1 ? -half*(Math.sqrt(1-t*t)-1) : half*(Math.sqrt(1-(t-=2)*t)+1),\n    easeOutBounce  : t => ((t)<e6) ? (e2*t*t) : (t<e4) ? (e2*(t-=e7)*t+e10) : (t<e8) ? (e2*(t-=e5)*t+e11) : (e2*(t-=e9)*t+e12),\n    easeInBack     : t => (t)*t*((e1+1)*t-e1),\n    easeOutBack    : t => (t=t-1)*t*((e1+1)*t+e1)+1,\n    easeInOutBack  : t => {\n        let v1 = s1;\n        return ((t/=half)<1) ? half*(t*t*(((v1*=(e3))+1)*t -v1)) : half*((t-=2)*t*(((v1*=(e3))+1)*t+v1)+2);\n    },\n    elastic        : t => -1*Math.pow(4,-8*t)*Math.sin((t*6-1)*(2*Math.PI)/2)+1,\n    swingFromTo    : t => {\n        let v2 = s2;\n        return ((t/=half)<1) ? half*(t*t*(((v2*=(e3))+1)*t-v2)) : half*((t-=2)*t*(((v2*=(e3))+1)*t+v2)+2);\n    },\n    swingFrom      : t => t*t*((e1+1)*t-e1),\n    swingTo        : t => (t-=1)*t*((e1+1)*t+e1)+1,\n    bounce         : t => (t<e6) ? (e2*t*t) : (t<e4) ? (e2*(t-=e7)*t+e10) : (t<e8) ? (e2*(t-=e5)*t+e11) : (e2*(t-=e9)*t+e12),\n    bouncePast     : t => (t<e6) ? (e2*t*t) : (t<e4) ? 2-(e2*(t-=e7)*t+e10) : (t<e8) ? 2-(e2*(t-=e5)*t+e11) : 2-(e2*(t-=e9)*t+e12),\n    easeFromTo     : t => (t/=half)<1 ? half*Math.pow(t,4) : -half*((t-=2)*Math.pow(t,3)-2),\n    easeFrom       : t => Math.pow(t,4),\n    easeTo         : t => Math.pow(t,0.25)\n};\n","import Base from '../Base.js';\nimport ArrayHelper from '../helper/ArrayHelper.js';\nimport StringHelper from '../helper/StringHelper.js';\nimport VersionHelper from '../helper/VersionHelper.js';\nimport BrowserHelper from '../helper/BrowserHelper.js';\nimport FunctionHelper from '../helper/FunctionHelper.js';\nimport Objects from '../helper/util/Objects.js';\n\n/**\n * @module Core/mixin/Events\n */\n\n/**\n * @typedef {Object.<String,Function|Boolean|Object|Object[]|Number|String>} BryntumListenerConfig\n * @property {Object} [thisObj] The `this` reference for all listeners. May be overridden if a handler is specified in object form.\n * @property {Boolean} [once] Specify as `true` to remove the listener as soon as it is invoked.\n * @property {Number|Object} [expires] The listener only waits for a specified time before\n * being removed. The value may be a number or an object containing an expiry handler.\n * @property {Number} [expires.delay] How long to wait for the event for.\n * @property {String|Function} [expires.alt] The function to call when the listener expires **without having been triggered**.\n * @property {Object[]} [args] An array of arguments to be passed to the handler before the event object.\n * @property {Number} [prio] The priority for all listeners; higher priority listeners are called before lower.\n * @property {Number} [buffer] A buffer time in milliseconds to wait after last event trigger to call the handler, to reduce the amount of handler calls for frequent events.\n * @property {Number} [throttle] A millisecond timeout value to throttle event triggering. With it specified a handler\n * will be called once immediately and then all following calls during the timeout period will be grouped together into one call once per throttle period.\n */\n\nconst\n    // Used by the config system to flatten configs from the class hierarchy.\n    // In this case, a pure merge is not wanted. Listener definitions from\n    // every class level are collected up into an array.\n    // addListener iterates any passed array, adding each element.\n    { isArray }        = Array,\n    { hasOwnProperty } = Object.prototype,\n\n    // Used to distinguish event names from listener options in addListener object config.\n    specialProperties  = {\n        thisObj    : 1,\n        detachable : 1,\n        once       : 1,\n        detacher   : 1,\n        prio       : 1,\n        args       : 1,\n        expires    : 1,\n        buffer     : 1,\n        throttle   : 1,\n        name       : 1,\n        $internal  : 1\n    },\n    priorityComparator = (a, b) => b.prio - a.prio;\n\n/**\n * Mix this into another class to enable event handling.\n *\n * ## Basic usage\n * Listeners can be added either through config:\n *\n * ```javascript\n * let button = new Button({\n *   listeners: {\n *     click: () => {},\n *     press: () => {},\n *     ...\n *   }\n * });\n * ```\n *\n * *NOTE*: Do not reuse listeners config object, use new every time:\n * ```javascript\n * // wrong\n * let config = { click : () => {} }\n * new Button({\n *     listeners : config\n * })\n * new Button({\n *     listeners : config\n * })\n * // right\n * new Button({\n *     listeners : { click : () => {} }\n * })\n * new Button({\n *     listeners : { click : () => {} }\n * })\n * ```\n *\n * Or by calling on()/addListener():\n *\n * ```javascript\n * let button = new Button();\n *\n * button.addListener('press', () => {});\n * // on is an alias for addListener\n * button.on('click', () => {});\n * ```\n *\n * This style also accepts multiple listeners in same way as when using config:\n *\n * ```javascript\n * button.on({\n *   click: () => {},\n *   press: () => {},\n *   ...\n * });\n * ```\n *\n * ### Handlers as function name\n *\n * Event handlers may be specified as a function __name__. If a string is specified, it is the name\n * of the function in the `thisObj` object.\n *\n * If the string begins with `up.`, the owning object's ownership hierarchy\n * (if present) is scanned for an object which implements that function name:\n *\n * ```javascript\n * new Popup({\n *     tbar : {\n *         items : {\n *             myCombo : {\n *                 type      : 'combo',\n *                 editable  : false,\n *                 label     : 'Type',\n *                 listeners : {\n *                     // Look in owner chain for this function name\n *                     change : 'up.onFilterChange'\n *                 },\n *                 items     : [\n *                     'Event',\n *                     'Task',\n *                     'Appointment'\n *                 ]\n *             }\n *         }\n *     },\n *     items : {\n *         ...\n *     },\n *     onFilterChange({ value }) {\n *         // Handle event type selection here\n *     }\n * });\n *```\n *\n * ## Listener options\n * ### Once\n * Listeners can be configured to automatically deregister after first trigger by specifying config option `once`:\n *\n * ```javascript\n * button.on({\n *   click: () => {},\n *   once: true\n * });\n * ```\n *\n * ### Priority\n * Specifying priority affects the order in which listeners are called when triggering an event. Higher priorities will be\n * called before lower. Default value is 0.\n *\n * ```javascript\n * button.on({\n *   click: this.onClick,\n *   prio: 1\n * });\n * ```\n *\n * ### This reference\n * If desired, you can specify thisObj when configuring listeners. There is no need if you are using arrow functions as\n * listeners, but might be handy in other cases. Of course, you can also use bind to set `this` reference.\n *\n * ```javascript\n * button.on({\n *   click: this.onClick,\n *   thisObj: this\n * });\n *\n * // or\n *\n * button.on({\n *   click: this.onClick.bind(this)\n * });\n * ```\n *\n * ### Buffering\n * By specifying a `buffer` events that fire frequently can be grouped together and delayed. A handler for the event will be called once only, when no new event has been fired during the specified buffer time:\n *\n * ```javascript\n * button.on({\n *   click  : this.onClick,\n *   buffer : 200 // in milliseconds\n * });\n * ```\n * In this example, if a user clicked the button 6 times very fast (<200ms between each click),\n * the `this.onClick` handler would be called only once 200 milliseconds after the last click.\n *\n * ### Throttling\n * Create a \"debounced\" function which will call on the \"leading edge\" of a timer period.\n * When first invoked will call immediately, but invocations after that inside its buffer\n * period will be rejected, and *one* invocation will be made after the buffer period has expired.\n *\n * This is useful for responding immediately to a first mousemove, but from then on, only\n * calling the action function on a regular timer while the mouse continues to move.\n\n * ```javascript\n * button.on({\n *   click    : this.onClick,\n *   throttle : 200 // in milliseconds\n * });\n * ```\n * In this example, if a user clicked the button 6 times very fast, the `this.onClick` handler would be called once immediately on the first click and a second time 200 milliseconds after the **first** click.\n * So in reality the `click` event handler will be called every 200ms independent of amount of click in a middle, if the event was triggered at least once during the `throttle` timeout.\n *\n * ### Detacher\n * A convenient way of unregistering events is to use a detacher, a function returned when adding listeners that you\n * call later to deregister them. As of version 1.0, detachable defaults to true.\n *\n * ```javascript\n * let detacher = button.on({\n *   click: () => {},\n *   press: () => {},\n *   detachable: true\n * });\n *\n * // when you want to detach, for example in destroy()\n * detacher();\n * ```\n *\n * ### Auto detaching\n * When listeners are bound to a class instance using `thisObj`, the `thisObj`'s `doDestroy` method\n * is overridden to remove the listeners before calling the overridden doDestroy.\n *\n * ```javascript\n * class MyClass extends Base {\n *   construct() {\n *     let button = new Button({\n *       listeners: {\n *         click: () => {},\n *         thisObj: this\n *       }\n *     });\n *   }\n *\n *   doDestroy() {\n *     // clean up stuff\n *   }\n * }\n *\n * let myObj = new MyClass();\n * // clean up, also removes listeners\n * myObj.destroy();\n * ```\n *\n * ### On-functions\n * When mixing Events into another class it can be configured to call on-functions when events are triggered.\n * On-functions are functions named 'onEventName', for example 'onClick', 'onPress' declared on the class triggering\n * the event.\n *\n * ```javascript\n * // mix Events in with on-functions activated\n * let button = new Button({\n *   callOnFunctions: true,\n *\n *   onClick: () => {}\n * });\n *\n * // or add a getter in class declaration\n * ```\n *\n * Returning `false` from an on-function will prevent triggering listeners for the event.\n *\n * ### Catching all events\n * By specifying a listener for {@link #event-catchAll catchAll} a function can be notified when any event is triggered:\n *\n * ```javascript\n * const button = new Button({\n *    listeners : {\n *        catchAll(event) {\n *            // All events on the button will pass through here\n *        }\n *    }\n * });\n * ```\n *\n * ## Preventable events\n *\n * By returning `false` from a listener for an event documented as `preventable` the action that would otherwise be\n * executed after the event is prevented. These events are usually named `beforeXX`, for example `beforeRemove`,\n * `beforeDragStart` etc.\n *\n * <div class=\"note\">Note that Angular does not support return values from listeners. Instead, assign to\n * <code>event.returnValue</code> as shown in the Angular snippet below</div>\n *\n * {@frameworktabs}\n * {@js}\n * ```javascript\n * taskBoard.on({\n *     beforeColumnDrag({ columnRecord }) {\n *         if (columnRecord.locked) {\n *             return false;\n *         }\n *     }\n * });\n * ```\n * {@endjs}\n * {@react}\n * ```jsx\n * const App = props => {\n *     function onBeforeColumnDrag({ columnRecord }) {\n *         if (columnRecord.locked) {\n *             return false;\n *         }\n *     }\n *\n *     return (\n *         <>\n *             <BryntumTaskBoard onBeforeColumnDrag={onBeforeColumnDrag} />\n *         </>\n *     )\n * }\n * ```\n * {@endreact}\n * {@vue}\n * ```html\n * <bryntum-task-board @beforeColumnDrag=\"onBeforeColumnDrag\" />\n * ```\n * ```javascript\n * export default {\n *     methods : {\n *         onBeforeColumnDrag({ columnRecord }) {\n *             if (columnRecord.locked) {\n *                 return false;\n *             }\n *         }\n *    }\n * }\n * ```\n * {@endvue}\n * {@angular}\n * ```html\n * <bryntum-task-board (onBeforeColumnDrag)=\"onBeforeColumnDrag({event : $event})\"></bryntum-task-board>\n * ```\n * ```typescript\n * export class AppComponent {\n *     onBeforeColumnDrag({ event }: { event: any }): void {\n *         event.returnValue = !event.columnRecord.locked;\n *     }\n *  }\n * ```\n * {@endangular}\n * {@endframeworktabs}\n *\n * @mixin\n */\nexport default Target => class Events extends (Target || Base) {\n    eventsSuspended = null;\n\n    static get $name() {\n        return 'Events';\n    }\n\n    //region Events\n\n    /**\n     * Fires before an object is destroyed.\n     * @event beforeDestroy\n     * @param {Core.Base} source The Object that is being destroyed.\n     */\n\n    /**\n     * Fires when an object is destroyed.\n     * @event destroy\n     * @param {Core.Base} source The Object that is being destroyed.\n     */\n\n    /**\n     * Fires when any other event is fired from the object.\n     *\n     * **Note**: `catchAll` is fired for both public and private events. Please rely on the public events only.\n     * @event catchAll\n     * @param {Object} event The Object that contains event details\n     * @param {String} event.type The type of the event which is caught by the listener\n     */\n\n    //endregion\n\n    static get declarable() {\n        return [\n            /**\n             * The list of deprecated events as an object, where `key` is an event name which is deprecated and\n             * `value` is an object which contains values for\n             * {@link Core.helper.VersionHelper#function-deprecate-static VersionHelper}:\n             * - product {String} The name of the product;\n             * - invalidAsOfVersion {String} The version where the offending code is invalid (when any compatibility\n             *   layer is actually removed);\n             * - message {String} Warning message to show to the developer using a deprecated API;\n             *\n             * For example:\n             *\n             * ```javascript\n             * return {\n             *     click : {\n             *         product            : 'Grid',\n             *         invalidAsOfVersion : '1.0.0',\n             *         message            : 'click is deprecated!'\n             *     }\n             * }\n             * ```\n             *\n             * @name deprecatedEvents\n             * @returns {Object}\n             * @static\n             * @internal\n             */\n            'deprecatedEvents'\n        ];\n    }\n\n    static setupDeprecatedEvents(cls, meta) {\n        const\n            all = meta.getInherited('deprecatedEvents'),\n            add = cls.deprecatedEvents;\n\n        for (const eventName in add) {\n            // Event names are case-insensitive so build our map using toLowerCased names (but keep true case too):\n            all[eventName.toLowerCase()] = all[eventName] = add[eventName];\n        }\n    }\n\n    //region Config\n\n    static get configurable() {\n        return {\n\n            /**\n             * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.\n             *\n             * ```javascript\n             * const container = new Container({\n             *     callOnFunctions : true\n             *\n             *     onHide() {\n             *          // Do something when the 'hide' event is fired\n             *     }\n             * });\n             * ```\n             *\n             * @config {Boolean} callOnFunctions\n             * @category Misc\n             * @default false\n             */\n\n            /**\n             * The listener set for this object.\n             *\n             * An object whose property names are the names of events to handle, or options which modifiy\n             * __how__ the handlers are called.\n             *\n             * See {@link #function-addListener} for details about the options.\n             *\n             * Listeners can be specified in target class config and they will be merged with any listeners specified in\n             * the instantiation config. Class listeners will be fired first:\n             *\n             * ```javascript\n             * class MyStore extends Store({\n             *     static get configurable() {\n             *         return {\n             *             listeners : {\n             *                 myCustomEvent() {\n             *                 },\n             *                 load : {\n             *                     prio : 10000,\n             *                     fn() { // this load listener handles things first }\n             *                 }\n             *             }\n             *         }\n             *     }\n             * });\n             *\n             * let store = new MyStore({\n             *   listeners: {\n             *     load: () => { // This load listener runs after the class's },\n             *     ...\n             *   }\n             * });\n             * ```\n             *\n             * ### Handlers as function name\n             *\n             * Object event handlers may be specified as a function __name__. If a string is specified, it is the name\n             * of the function in the `thisObj` object.\n             *\n             * If the string begins with `up.`, this object's ownership hierarchy\n             * (if present) is scanned for an object which implements that function name:\n             *\n             * ```javascript\n             * new Popup({\n             *     tbar : {\n             *         items : {\n             *             myCombo : {\n             *                 type      : 'combo',\n             *                 editable  : false,\n             *                 label     : 'Type',\n             *                 listeners : {\n             *                     // Look in owner chain for this function name\n             *                     change : 'up.onFilterChange'\n             *                 },\n             *                 items     : [\n             *                     'Event',\n             *                     'Task',\n             *                     'Appointment'\n             *                 ]\n             *             }\n             *         }\n             *     },\n             *     items : {\n             *         ...\n             *     },\n             *     onFilterChange({ value }) {\n             *         // Handle event type selection here\n             *     }\n             * });\n             *```\n             *\n             * @config {Object}\n             * @category Common\n             */\n            listeners : {\n                value : null,\n\n                $config : {\n                    merge(newValue, currentValue) {\n                        if (newValue !== null) {\n                            if (!newValue) {\n                                return currentValue;\n                            }\n                            if (currentValue) {\n                                newValue = newValue ? [newValue] : [];\n                                newValue.push[isArray(currentValue) ? 'apply' : 'call'](newValue, currentValue);\n                            }\n                        }\n                        return newValue;\n                    }\n                }\n            },\n\n            /**\n             * Internal listeners, that cannot be removed by the user.\n             * @config {Object}\n             * @internal\n             */\n            internalListeners : null,\n\n            /**\n             * An object where property names with a truthy value indicate which events should bubble up the ownership\n             * hierarchy when triggered.\n             *\n             * ```javascript\n             * const container = new Container({\n             *     items : [\n             *        { type : 'text', bubbleEvents : { change : true }}\n             *     ],\n             *\n             *     listeners : {\n             *         change() {\n             *             // Will catch change event from the text field\n             *         }\n             *     }\n             * });\n             * ```\n             *\n             * @config {Object}\n             * @category Misc\n             */\n            bubbleEvents : null\n\n        };\n    }\n\n    destroy() {\n        this.trigger('beforeDestroy');\n        super.destroy();\n    }\n\n    //endregion\n\n    //region Init\n\n    construct(config, ...args) {\n        // Configured listeners use this as the thisObj\n        if ((this.configuredListeners /* assignment */ = config?.listeners)) {\n            // We have to copy in case listeners have been forked\n            config = Objects.assign({}, config);\n            delete config.listeners;\n        }\n\n        super.construct(config, ...args);\n        // Apply configured listeners after construction.\n        // Note that some classes invoke this during parts of their construction.\n        // Store invokes this prior to setting data so that observers are notified of data load.\n        this.processConfiguredListeners();\n    }\n\n    processConfiguredListeners() {\n        // This can only happen once\n        if (this.configuredListeners) {\n            const\n                me                = this,\n                { isConfiguring } = me;\n\n            // If called from config ingestion during configuration, listeners must be added\n            // so temporarily clear the isConfiguring flag.\n            me.isConfiguring = false;\n            me.listeners = me.configuredListeners;\n            me.configuredListeners = null;\n            me.isConfiguring = isConfiguring;\n        }\n    }\n\n    /**\n     * Auto detaches listeners registered from start, if set as detachable\n     * @internal\n     */\n    doDestroy() {\n        this.trigger('destroy');\n        this.removeAllListeners(false);\n        super.doDestroy();\n    }\n\n    static setupClass(meta) {\n        super.setupClass(meta);\n\n        Events.prototype.onListen.$nullFn = true;\n        Events.prototype.onUnlisten.$nullFn = true;\n    }\n\n    //endregion\n\n    //region Listeners\n\n    /**\n     * Adds an event listener. This method accepts parameters in the following format:\n     *\n     * ```javascript\n     *  myObject.addListener({\n     *      thisObj    : this,          // The this reference for the handlers\n     *      eventname2 : 'functionName' // Resolved at invocation time using the thisObj,\n     *      otherevent : {\n     *          fn      : 'handlerFnName',\n     *          once    : true          // Just this handler is auto-removed on fire\n     *      },\n     *      yetanother  : {\n     *          fn      : 'yetAnotherHandler',\n     *          args    : [ currentState1, currentState2 ] // Capture info to be passed to handler\n     *      },\n     *      prio        : 100           // Higher prio listeners are called before lower\n     *  });\n     * ```\n     *\n     * When listeners have a `thisObj` option, they are linked to the lifecycle of that object.\n     * When it is destroyed, those listeners are removed.\n     *\n     * The `config` parameter allows supplying options for the listener(s), for available options see {@link #typedef-BryntumListenerConfig}.\n     *\n     * A simpler signature may be used when only adding a listener for one event and no extra options\n     * (such as `once` or `delay`) are required:\n     *\n     * ```javascript\n     * myObject.addListener('click', myController.handleClicks, myController);\n     * ```\n     *\n     * The args in this simple case are `eventName`, `handler` and `thisObj`\n     *\n     * @param {BryntumListenerConfig|String} config An object containing listener definitions, or the event name to listen for\n     * @param {Object|Function} [thisObj] Default `this` reference for all listeners in the config object, or the handler\n     * function to call if providing a string as the first arg.\n     * @param {Object} [oldThisObj] The `this` reference if the old signature starting with a string event name is used..\n     * @returns {Function} Returns a detacher function unless configured with `detachable: false`. Call detacher to remove listeners\n     */\n    addListener(config, thisObj, oldThisObj) {\n        if (isArray(config)) {\n            for (let i = 0, { length } = config; i < length; i++) {\n                this.addListener(config[i], thisObj);\n            }\n            return;\n        }\n\n        const\n            me               = this,\n            deprecatedEvents = me.$meta.getInherited('deprecatedEvents');\n\n        if (typeof config === 'string') {\n            // arguments[2] is thisObj if (eventname, handler, thisObj) form called.\n            // Note that the other side of the if compares to undefined, so this will work.\n            return me.addListener({\n                [config]   : thisObj,\n                detachable : thisObj.detachable !== false,\n                thisObj    : oldThisObj\n            });\n        }\n        else {\n            // Capture the default thisObj.\n            thisObj = config.thisObj = config.thisObj !== undefined ? config.thisObj : thisObj;\n\n            for (const key in config) {\n                // Skip special properties or events without handlers (convenient syntax with optional handlers)\n                if (!specialProperties[key] && config[key] != null) {\n                    // comparing should be case insensitive\n                    const\n                        // comparing should be case insensitive\n                        eventName       = key.toLowerCase(),\n                        deprecatedEvent = deprecatedEvents?.[eventName],\n                        events          = me.eventListeners || (me.eventListeners = {}),\n                        listenerSpec    = config[key],\n                        expires         = listenerSpec.expires || config.expires,\n                        listener        = {\n                            fn        : typeof listenerSpec === 'object' ? listenerSpec.fn : listenerSpec,\n                            thisObj   : listenerSpec.thisObj !== undefined ? listenerSpec.thisObj : thisObj,\n                            args      : listenerSpec.args || config.args,\n                            prio      : listenerSpec.prio !== undefined ? listenerSpec.prio : config.prio !== undefined ? config.prio : 0,\n                            once      : listenerSpec.once !== undefined ? listenerSpec.once : config.once !== undefined ? config.once : false,\n                            buffer    : listenerSpec.buffer || config.buffer,\n                            throttle  : listenerSpec.throttle || config.throttle,\n                            $internal : config.$internal,\n                            catchAll  : key === 'catchAll'\n                        };\n\n                    if (deprecatedEvent) {\n                        const { product, invalidAsOfVersion, message } = deprecatedEvent;\n                        VersionHelper.deprecate(product, invalidAsOfVersion, message);\n                    }\n\n                    //<debug>\n                    if (!(typeof listener.fn === 'string' || typeof listener.fn === 'function')) {\n                        throw new Error('Listener must be configured with a handler function');\n                    }\n                    if (me.findListener(eventName, listenerSpec, thisObj) !== -1) {\n                        const obj = listener.thisObj || me;\n                        throw new Error(`Duplicate listener added: ${obj.id || obj.$$name}#${listener.fn}`);\n                    }\n                    //</debug>\n                    if (expires) {\n                        // Extract expires : { delay : 100, alt : 'onExpireFn' }\n                        const\n                            { alt } = expires,\n                            delay   = alt ? expires.delay : expires,\n                            name    = config.name || key,\n                            fn      = () => {\n                                me.un(eventName, listener);\n\n                                // If we make it here and the handler has not been called, invoke the alt handler\n                                if (alt && !listener.called) {\n                                    me.callback(alt, thisObj);\n                                }\n                            };\n                        if (me.isDelayable) {\n                            me.setTimeout({ fn, name, cancelOutstanding : true, delay });\n                        }\n                        else {\n                            globalThis.setTimeout(fn, delay);\n                        }\n                    }\n\n                    let listeners = events[eventName] || (events[eventName] = []);\n\n                    if (listeners.$firing) {\n                        events[eventName] = listeners = listeners.slice();\n                    }\n\n                    // Insert listener directly in prio order\n                    listeners.splice(\n                        ArrayHelper.findInsertionIndex(listener, listeners, priorityComparator, listeners.length),\n                        0, listener);\n\n                    if (!me.onListen.$nullFn && listeners.length < 2) {\n                        me.onListen(eventName);\n                    }\n                }\n            }\n\n            if (config.relayAll) {\n                me.relayAll(config.relayAll);\n            }\n\n            // Hook into the thisObj's destruction sequence to remove these listeners.\n            // Pass the default thisObj in for use when it comes to destruction time.\n            if (thisObj && thisObj !== me) {\n                me.attachAutoDetacher(config, thisObj);\n            }\n\n            const\n                detachable = config.detachable !== false,\n                name       = config.name,\n                destroy    = (config.expires || detachable || name) ? () => {\n                    // drop listeners if not destroyed yet\n                    if (!me.isDestroyed) {\n                        me.removeListener(config, thisObj);\n                    }\n                } : null;\n\n            if (destroy) {\n                destroy.eventer = me;\n                destroy.listenerName = name;\n\n                if (name && thisObj?.trackDetacher) {\n                    thisObj.trackDetacher(name, destroy);\n                }\n\n                if (config.expires) {\n                    // handle expires : { alt : timeoutHandler, delay : 2000 }\n                    me.delay(destroy, isNaN(config.expires) ? config.expires.delay : config.expires, name);\n                }\n\n                if (detachable) {\n                    return destroy;\n                }\n            }\n        }\n    }\n\n    /**\n     * Alias for {@link #function-addListener}. Adds an event listener. This method accepts parameters in the following format:\n     *\n     * ```javascript\n     *  myObject.on({\n     *      thisObj    : this,          // The this reference for the handlers\n     *      eventname2 : 'functionName' // Resolved at invocation time using the thisObj,\n     *      otherevent : {\n     *          fn      : 'handlerFnName',\n     *          once    : true          // Just this handler is auto-removed on fire\n     *      },\n     *      yetanother  : {\n     *          fn      : 'yetAnotherHandler',\n     *          args    : [ currentState1, currentState2 ] // Capture info to be passed to handler\n     *      },\n     *      prio        : 100           // Higher prio listeners are called before lower\n     *  });\n     * ```\n     *\n     * When listeners have a `thisObj` option, they are linked to the lifecycle of that object.\n     * When it is destroyed, those listeners are removed.\n     *\n     * The `config` parameter allows supplying options for the listener(s), for available options see {@link #typedef-BryntumListenerConfig}.\n     *\n     * A simpler signature may be used when only adding a listener for one event and no extra options\n     * (such as `once` or `delay`) are required:\n     *\n     * ```javascript\n     * myObject.on('click', myController.handleClicks, myController);\n     * ```\n     *\n     * The args in this simple case are `eventName`, `handler` and `thisObj`\n     *\n     * @param {BryntumListenerConfig|String} config An object containing listener definitions, or the event name to listen for\n     * @param {Object|Function} [thisObj] Default `this` reference for all listeners in the config object, or the handler\n     * function to call if providing a string as the first arg.\n     * @param {Object} [oldThisObj] The `this` reference if the old signature starting with a string event name is used..\n     * @returns {Function} Returns a detacher function unless configured with `detachable: false`. Call detacher to remove listeners\n     */\n    on(config, thisObj, oldThisObj) {\n        return this.addListener(config, thisObj, oldThisObj);\n    }\n\n    /**\n     * Internal convenience method for adding an internal listener, that cannot be removed by the user.\n     *\n     * Alias for `on({ $internal : true, ... })`. Only supports single argument form.\n     *\n     * @internal\n     */\n    ion(config) {\n        config.$internal = true;\n        return this.on(config);\n    }\n\n    /**\n     * Shorthand for {@link #function-removeListener}\n     * @param {Object|String} config A config object or the event name\n     * @param {Object|Function} [thisObj] `this` reference for all listeners, or the listener function\n     * @param {Object} [oldThisObj] `this` The `this` object for the legacy way of adding listeners\n     */\n    un(...args) {\n        this.removeListener(...args);\n    }\n\n    updateInternalListeners(internalListeners, oldInternalListeners) {\n        oldInternalListeners?.detach();\n\n        if (internalListeners) {\n            internalListeners.detach = this.ion(internalListeners);\n        }\n    }\n\n    get listeners() {\n        return this.eventListeners;\n    }\n\n    changeListeners(listeners) {\n        // If we are receiving class listeners, add them early, and they do not become\n        // the configured listeners, and are not removed by setting listeners during the lifecycle.\n        if (this.isConfiguring) {\n            // Pull in internal listeners first\n            this.getConfig('internalListeners');\n\n            if (listeners) {\n                this.on(listeners, this);\n            }\n        }\n        // Setting listeners after config time clears the old set and adds the new.\n        // This will initially happen at the tail end of the constructor when config\n        // listeners are set.\n        else {\n            // Configured listeners use this as the thisObj by default.\n            // Flatten using Objects.assign because it may have been part of\n            // a prototype chained default configuration of another object.\n            // eg: the tooltip config of a Widget.\n            // listener object blocks from multiple configuration levels are pushed\n            // onto an array (see listeners merge function in configurable block above).\n            // If this has happened, each entry must be processed like this.\n            if (Array.isArray(listeners)) {\n                for (let i = 0, l = listeners[0], { length } = listeners; i < length; l = listeners[++i]) {\n                    if (!('thisObj' in l)) {\n                        listeners[i] = Objects.assign({ thisObj : this }, l);\n                    }\n                }\n            }\n            else if (listeners && !('thisObj' in listeners)) {\n                listeners = Objects.assign({ thisObj : this }, listeners);\n            }\n\n            return listeners;\n        }\n    }\n\n    updateListeners(listeners, oldListeners) {\n        // Only configured listeners get here. Class listeners are added by changeListeners.\n        oldListeners && this.un(oldListeners);\n        listeners && this.on(listeners);\n    }\n\n    /**\n     * Removes an event listener. Same API signature as {@link #function-addListener}\n     * @param {Object|String} config A config object or the event name\n     * @param {Object|Function} thisObj `this` reference for all listeners, or the listener function\n     * @param {Object} oldThisObj `this` The `this` object for the legacy way of adding listeners\n     */\n    removeListener(config, thisObj = config.thisObj, oldThisObj) {\n        const me = this;\n\n        if (typeof config === 'string') {\n            return me.removeListener({ [config] : thisObj }, oldThisObj);\n        }\n\n        Object.entries(config).forEach(([eventName, listenerToRemove]) => {\n            if (!specialProperties[eventName] && listenerToRemove != null) {\n                eventName = eventName.toLowerCase();\n\n                const\n                    eventListeners = me.eventListeners,\n                    index = me.findListener(eventName, listenerToRemove, thisObj);\n\n                if (index >= 0) {\n                    let listeners = eventListeners[eventName];\n\n                    if (listeners.length > 1) {\n                        if (listeners.$firing) {\n                            eventListeners[eventName] = listeners = listeners.slice();\n                        }\n\n                        // NOTE: we cannot untrack any detachers here because we may only be\n                        // removing some of its listeners\n                        listeners.splice(index, 1);\n                    }\n                    else {\n                        delete eventListeners[eventName];\n\n                        if (!me.onUnlisten.$nullFn) {\n                            me.onUnlisten(eventName);\n                        }\n                    }\n                }\n            }\n        });\n\n        if (config.thisObj && !config.thisObj.isDestroyed) {\n            me.detachAutoDetacher(config);\n        }\n    }\n\n    /**\n     * Finds the index of a particular listener to the named event. Returns `-1` if the passed\n     * function/thisObj listener is not present.\n     * @param {String} eventName The name of an event to find a listener for.\n     * @param {String|Function} listenerToFind The handler function to find.\n     * @param {Object} defaultThisObj The `thisObj` for the required listener.\n     * @internal\n     */\n    findListener(eventName, listenerToFind, defaultThisObj) {\n        const\n            eventListeners = this.eventListeners?.[eventName],\n            fn             = listenerToFind.fn || listenerToFind,\n            thisObj        = listenerToFind.thisObj || defaultThisObj;\n\n        if (eventListeners) {\n            for (let listenerEntry, i = 0, { length } = eventListeners; i < length; i++) {\n                listenerEntry = eventListeners[i];\n\n                if (listenerEntry.fn === fn && listenerEntry.thisObj === thisObj) {\n                    return i;\n                }\n            }\n        }\n\n        return -1;\n    }\n\n    /**\n     * Check if any listener is registered for the specified eventName\n     * @param {String} eventName\n     * @returns {Boolean} `true` if listener is registered, otherwise `false`\n     */\n    hasListener(eventName) {\n        return Boolean(this.eventListeners?.[eventName?.toLowerCase()]);\n    }\n\n    /**\n     * Relays all events through another object that also implements Events mixin. Adds a prefix to the event name\n     * before relaying, for example add -> storeAdd\n     * ```\n     * // Relay all events from store through grid, will make it possible to listen for store events prefixed on grid:\n     * 'storeLoad', 'storeChange', 'storeRemoveAll' etc.\n     * store.relayAll(grid, 'store');\n     *\n     * grid.on('storeLoad', () => console.log('Store loaded');\n     * ```\n     * @param {Core.mixin.Events} through Object to relay the events through, needs to mix Events mixin in\n     * @param {String} prefix Prefix to add to event name\n     * @param {Boolean} [transformCase] Specify false to prevent making first letter of event name uppercase\n     */\n    relayAll(through, prefix, transformCase = true) {\n        if (!this.relayAllTargets) {\n            this.relayAllTargets = [];\n        }\n\n        const relayAllTargets = this.relayAllTargets;\n\n        through.on({\n            beforeDestroy : ({ source }) => {\n                if (source === through) {\n                    const configs = relayAllTargets.filter(r => r.through === through);\n\n                    configs.forEach(config => ArrayHelper.remove(relayAllTargets, config));\n                }\n            }\n        });\n\n        relayAllTargets.push({ through, prefix, transformCase });\n    }\n\n    /**\n     * Removes all listeners registered to this object by the application.\n     */\n    removeAllListeners(preserveInternal = true) {\n        const listeners = this.eventListeners;\n        let i, thisObj;\n\n        for (const event in listeners) {\n            const bucket = listeners[event];\n\n            // We iterate backwards since we call removeListener which will splice out of\n            // this array as we go...\n            for (i = bucket.length; i-- > 0; /* empty */) {\n                const cfg = bucket[i];\n\n                if (!cfg.$internal || !preserveInternal) {\n                    this.removeListener(event, cfg);\n\n                    thisObj = cfg.thisObj;\n\n                    thisObj?.untrackDetachers?.(this);\n                }\n            }\n        }\n    }\n\n    relayEvents(source, eventNames, prefix = '') {\n        const listenerConfig = { detachable : true, thisObj : this };\n\n        eventNames.forEach(eventName => {\n            listenerConfig[eventName] = (event, ...params) => {\n                return this.trigger(prefix + eventName, event, ...params);\n            };\n        });\n\n        return source.on(listenerConfig);\n    }\n\n    /**\n     * This method is called when the first listener for an event is added.\n     * @param {String} eventName\n     * @internal\n     */\n    onListen() {}\n\n    /**\n     * This method is called when the last listener for an event is removed.\n     * @param {String} eventName\n     * @internal\n     */\n    onUnlisten() {}\n\n    destructorInterceptor() {\n        const { autoDetachers, target, oldDestructor } = this;\n        // Remove listeners first, so that they do not fire during destruction.\n        // The observable being listened to by the thisObj may already have\n        // been destroyed in a clean up sequence\n        for (let i = 0; i < autoDetachers.length; i++) {\n            const { dispatcher, config } = autoDetachers[i];\n            if (!dispatcher.isDestroyed) {\n                dispatcher.removeListener(config, target);\n            }\n        }\n\n        oldDestructor.call(target);\n    }\n\n    /**\n     * Internal function used to hook destroy() calls when using thisObj\n     * @private\n     */\n    attachAutoDetacher(config, thisObj) {\n        const\n            target         = config.thisObj || thisObj,\n            // If it's a Bryntum Base subclass, hook doDestroy, otherwise, destroy\n            destructorName = ('doDestroy' in target) ? 'doDestroy' : 'destroy';\n\n        if (destructorName in target) {\n            let { $autoDetachers } = target;\n\n            if (!$autoDetachers) {\n                target.$autoDetachers = $autoDetachers = [];\n            }\n\n            if (!target.$oldDestructor) {\n                target.$oldDestructor = target[destructorName];\n\n                // Binding instead of using closure (used to use FunctionHelper.createInterceptor) to not retain target\n                // when detaching manually\n                target[destructorName] = this.destructorInterceptor.bind({\n                    autoDetachers : $autoDetachers,\n                    oldDestructor : target.$oldDestructor,\n                    target\n                });\n            }\n\n            $autoDetachers.push({ config, dispatcher : this });\n        }\n        else {\n            target[destructorName] = () => {\n                this.removeListener(config);\n            };\n        }\n    }\n\n    /**\n     * Internal function used restore hooked destroy() calls when using thisObj\n     * @private\n     */\n    detachAutoDetacher(config) {\n        const target = config.thisObj;\n\n        // Restore old destructor and remove from auto detachers only if we are not called as part of destruction.\n        // (Altering $autoDetachers affects destruction iterating over them, breaking it. It is pointless to clean up\n        // during destruction anyway, since everything gets removed)\n        if (target.$oldDestructor && !target.isDestroying) {\n            ArrayHelper.remove(\n                target.$autoDetachers,\n                target.$autoDetachers.find(detacher => detacher.config === config && detacher.dispatcher === this)\n            );\n\n            if (!target.$autoDetachers.length) {\n                target['doDestroy' in target ? 'doDestroy' : 'destroy'] = target.$oldDestructor;\n                target.$oldDestructor = null;\n            }\n        }\n    }\n\n    //endregion\n\n    //region Promise based workflow\n\n    // experimental, used in tests to support async/await workflow\n    await(eventName, options = { checkLog : true, resetLog : true, args : null }) {\n        const me = this;\n\n        if (options === false) {\n            options = { checkLog : false };\n        }\n\n        const { args } = options;\n\n        return new Promise(resolve => {\n            // check if previously triggered?\n            if (options.checkLog && me._triggered?.[eventName]) {\n                // resolve immediately, no params though...\n                resolve();\n                // reset log to be able to await again\n                if (options.resetLog) {\n                    me.clearLog(eventName);\n                }\n            }\n\n            // This branch will listen for events until catches one with specific arguments\n            if (args) {\n                const detacher = me.on({\n                    [eventName] : (...params) => {\n                        const argsOk = Object.keys(args).every(key => {\n                            return key in params[0] && params[0][key] === args[key];\n                        });\n\n                        if (argsOk) {\n                            // resolve when event is fired with required arguments\n                            resolve(...params);\n\n                            // reset log to be able to await again\n                            if (options.resetLog) {\n                                me.clearLog(eventName);\n                            }\n\n                            detacher();\n                        }\n                    },\n                    prio : -10000 // Let others do their stuff first\n                });\n            }\n            else {\n                me.on({\n                    [eventName] : (...params) => {\n                        // resolve when event is caught\n                        resolve(...params);\n                        // reset log to be able to await again\n                        if (options.resetLog) {\n                            me.clearLog(eventName);\n                        }\n                    },\n                    prio : -10000, // Let others do their stuff first\n                    once : true // promises can only be resolved once anyway\n                });\n            }\n        });\n    }\n\n    clearLog(eventName) {\n        if (this._triggered) {\n            if (eventName) {\n                delete this._triggered[eventName];\n            }\n            else {\n                this._triggered = {};\n\n            }\n        }\n    }\n\n    //endregion\n\n    //region Trigger\n\n    /**\n     * Triggers an event, calling all registered listeners with the supplied arguments. Returning false from any listener\n     * makes function return false.\n     * @param {String} eventName Event name for which to trigger listeners\n     * @param {Object} [param] Single parameter passed on to listeners, source property will be added to it (this)\n     * @param {Boolean} [param.bubbles] Pass as `true` to indicate that the event will bubble up the widget\n     * ownership hierarchy. For example up a `Menu`->`parent` Menu tree, or a `Field`->`Container` tree.\n     * @typings param -> {{bubbles?: boolean, [key: string]: any}}\n     * @returns {Boolean|Promise} Returns false if any listener returned `false`, or a `Promise` yielding\n     * `true` / `false` based on what is returned from the async listener functions, otherwise `true`\n     * @async\n     */\n    trigger(eventName, param) {\n        // TODO: should returning false from a listener really prevent other listeners from executing?\n        //<debug>\n        if (BrowserHelper.isBrowserEnv && globalThis.bryntum.LOGEVENTS) {\n            console.log(eventName, arguments);\n        }\n        //</debug>\n        const\n            me   = this,\n            name = eventName.toLowerCase(),\n            {\n                eventsSuspended,\n                relayAllTargets,\n                callOnFunctions\n            }   = me;\n\n        let listeners = me.eventListeners?.[name],\n            handlerPromises;\n\n        // log trigger, used by experimental promise support to resolve immediately when needed\n        if (!me._triggered) {\n            me._triggered = {};\n        }\n        me._triggered[eventName] = true;\n\n        if (eventsSuspended) {\n            if (eventsSuspended.shouldQueue) {\n                eventsSuspended.queue.push(arguments);\n            }\n            return true;\n        }\n\n        // Include catchall listener for all events.\n        // Do not push the catchAll listeners onto the events own listener array.\n        if (me.eventListeners?.catchall) {\n            (listeners = (listeners ? listeners.slice() : [])).push(...me.eventListeners.catchall);\n\n            // The catchAll listeners must honour their prio settings.\n            listeners.sort(priorityComparator);\n        }\n\n        if (!listeners && !relayAllTargets && !callOnFunctions) {\n            return true;\n        }\n\n        // default to include source : this in param\n        if (param) {\n            if (!('source' in param)) {\n                if (Object.isExtensible(param)) {\n                    param.source = me;\n                }\n                else {\n                    param = Object.setPrototypeOf({\n                        source : me\n                    }, param);\n                }\n            }\n        }\n        else {\n            param = {\n                source : me\n            };\n        }\n\n        // Lowercased event name should be the \"type\" property in keeping with DOM events.\n        if (param.type !== name) {\n            // Create instance property because \"type\" is read only\n            if (param.constructor !== Object) {\n                Reflect.defineProperty(param, 'type', { get : () => name });\n            }\n            else {\n                param.type = name;\n            }\n        }\n\n        // Bubble according to `bubbleEvents` config if `bubbles` is not explicitly set\n        if (!('bubbles' in param) && me.bubbleEvents?.[eventName]) {\n            param.bubbles = me.bubbleEvents[eventName];\n        }\n\n        if (callOnFunctions) {\n            const fnName = 'on' + StringHelper.capitalize(eventName);\n\n            if (fnName in me) {\n                // Return true if the on[fnName] is not set to keep default behavior\n                const result = me[fnName] ? me.callback(me[fnName], me, [param]) : true;\n\n                let inhibit;\n\n                if (Objects.isPromise(result)) {\n                    (handlerPromises || (handlerPromises = [])).push(result);\n                }\n                else {\n                    inhibit = result === false || inhibit;\n                }\n\n                // See if the called function was injected into the instance\n                // masking an implementation in the prototype.\n                // we must call the class's implementation after the injected one.\n                // unless it's an injected chained function, in which case it will have been called above.\n                // Note: The handler may have resulted in destruction.\n                if (!me.isDestroyed && hasOwnProperty.call(me, fnName) && !me.pluginFunctionChain?.[fnName]) {\n                    const myProto = Object.getPrototypeOf(me);\n                    if (fnName in myProto) {\n                        const result = myProto[fnName].call(me, param);\n\n                        if (Objects.isPromise(result)) {\n                            (handlerPromises || (handlerPromises = [])).push(result);\n                        }\n                        else {\n                            inhibit = result === false || inhibit;\n                        }\n\n                        // A handler may have resulted in destruction.\n                        if (me.isDestroyed) {\n                            return;\n                        }\n                    }\n                }\n\n                // Returning false from an on-function prevents further triggering\n                if (inhibit) {\n                    return false;\n                }\n            }\n        }\n\n        let ret;\n\n        if (listeners) {\n            let i = 0, internalAbort = false;\n\n            // Let add/removeListener know that we're using the array to protect against a situation where an event\n            // listener changes the listeners when triggering the event.\n            listeners.$firing = true;\n\n            // If any listener resulted in our destruction, abort.\n            for (i; i < listeners.length && !me.isDestroyed && !internalAbort; i++) {\n                const listener = listeners[i];\n\n                // Previously, returning false would abort all further listeners. But now internal listeners\n                // are allowed to run anyway\n                if (ret === false && !listener.$internal) {\n                    continue;\n                }\n\n                let handler,\n                    thisObj = listener.thisObj;\n\n                // Listeners that have thisObj are auto removed when thisObj is destroyed. If thisObj is destroyed from\n                // a listener we might still end up here, since listeners are sliced and not affected by the removal\n                if (!thisObj || !thisObj.isDestroyed) {\n                    // Flag for the expiry timer\n                    listener.called = true;\n\n                    if (listener.once) {\n                        me.removeListener(name, listener);\n                    }\n\n                    // prepare handler function\n                    if (typeof listener.fn === 'string') {\n                        if (thisObj) {\n                            handler = thisObj[listener.fn];\n                        }\n\n                        // keep looking for the callback in the hierarchy\n                        if (!handler) {\n                            const result = me.resolveCallback(listener.fn);\n\n                            handler = result.handler;\n                            thisObj = result.thisObj;\n                        }\n                    }\n                    else {\n                        handler = listener.fn;\n                    }\n\n                    // if `buffer` option is provided, the handler will be wrapped into buffer function,\n                    // but only once on the first call\n                    if (listener.buffer) {\n\n                        if (!listener.bufferFn) {\n                            const buffer = Number(listener.buffer);\n\n                            if (typeof buffer !== 'number' || isNaN(buffer)) {\n                                throw new Error(`Incorrect type for buffer, got \"${buffer}\" (expected a Number)`);\n                            }\n                            listener.bufferFn = FunctionHelper.createBuffered(handler, buffer, thisObj, listener.args);\n                        }\n\n                        handler = listener.bufferFn;\n                    }\n\n                    // if `throttle` option is provided, the handler will be called immediately, but all the rest calls\n                    // that happened during time specified in `throttle`, will be delayed and glued into 1 call\n                    if (listener.throttle) {\n                        const throttle = Number(listener.throttle);\n\n                        if (typeof throttle !== 'number' || isNaN(throttle)) {\n                            throw new Error(`Incorrect type for throttle, got \"${throttle}\" (expected a Number)`);\n                        }\n\n                        if (!listener.throttledFn) {\n                            listener.throttledFn = FunctionHelper.createThrottled(handler, throttle, thisObj, listener.args);\n                        }\n\n                        handler = listener.throttledFn;\n                    }\n\n                    const result = handler.call(thisObj || me, ...(listener.args || []), param);\n\n                    // Store result until we get a false return value, to mimic the old behavior from before we carried\n                    // on with calling internal listeners\n                    if (ret !== false) {\n                        ret = result;\n                    }\n\n                    if (listener.$internal && result === false) {\n                        internalAbort = true;\n                    }\n\n                    if (Objects.isPromise(result)) {\n                        result.$internal = listener.$internal;\n                        // If a handler is async (returns a Promise), then collect all Promises.\n                        // At the end we return a Promise which encapsulates all returned Promises\n                        // or, if only one handler was async, *the* Promise.\n                        // Don't allocate an Array until we have to.\n                        (handlerPromises || (handlerPromises = [])).push(result);\n                    }\n                }\n            }\n\n            listeners.$firing = false;\n\n            // An internal listener returned `false`, abort before relaying events etc.\n            if (internalAbort) {\n                return false;\n            }\n        }\n\n        // TODO: Should it still bubble to all listeners if the event was aborted by app? Consider only bubbling to\n        //   listeners that are internal. Ditto for relaying\n\n        // relay all?\n        relayAllTargets?.forEach(config => {\n            let name = eventName;\n            if (config.transformCase) {\n                name = StringHelper.capitalize(name);\n            }\n            if (config.prefix) {\n                name = config.prefix + name;\n            }\n            if (config.through.trigger(name, param) === false) {\n                return false;\n            }\n        });\n\n        // Use DOM standard event property name to indicate that the event\n        // bubbles up the owner axis.\n        // False from any handler cancels the bubble.\n        // Must also avoid owner if any handlers destroyed the owner.\n        if (param.bubbles && me.owner && !me.owner.isDestroyed) {\n            return me.owner.trigger(eventName, param);\n        }\n\n        // Run internal promises even if external listener returned false\n        handlerPromises = handlerPromises?.filter(p => ret !== false || p.$internal);\n\n        // If any handlers were async functions (returned a Promise), then return a Promise\n        // which resolves when they all resolve.\n        if (handlerPromises?.length) {\n            return new Promise(resolve => {\n                Promise.all(handlerPromises).then(promiseResults => {\n                    const finalResult = !promiseResults.some(result => result === false);\n\n                    resolve(finalResult);\n                });\n            });\n        }\n\n        return ret !== false;\n    }\n\n    /**\n     * Prevents events from being triggered until {@link #function-resumeEvents()} is called. Optionally queues events that are triggered while\n     * suspended. Multiple calls stack to require matching calls to `resumeEvents()` before actually resuming.\n     * @param {Boolean} queue Specify true to queue events triggered while suspended\n     */\n    suspendEvents(queue = false) {\n        const eventsSuspended = this.eventsSuspended || (this.eventsSuspended = { shouldQueue : queue, queue : [], count : 0 });\n        eventsSuspended.count++;\n    }\n\n    /**\n     * Resume event triggering after a call to {@link #function-suspendEvents()}. If any triggered events were queued they will be triggered.\n     * @returns {Boolean} `true` if events have been resumed (multiple calls to suspend require an equal number of resume calls to resume).\n     */\n    resumeEvents() {\n        const suspended = this.eventsSuspended;\n        if (suspended) {\n            if (--suspended.count === 0) {\n                this.eventsSuspended = null;\n                if (suspended.shouldQueue) {\n                    for (const queued of suspended.queue) {\n                        this.trigger(...queued);\n                    }\n                }\n            }\n        }\n\n        return !Boolean(this.eventsSuspended);\n    }\n\n    //endregion\n};\n","\n/**\n * @module Core/helper/AsyncHelper\n */\n\n/**\n * A helper class to make asynchronous tasks `await` friendly.\n */\nexport default class AsyncHelper {\n    /**\n     * Returns a promise that resolves on next animation frame.\n     * ```\n     *  async method() {\n     *      // do work\n     *      await AsyncHelper.animationFrame();\n     *      // do more work\n     *  }\n     * ```\n     * @async\n     */\n    static animationFrame() {\n        return new Promise(resolve => {\n            requestAnimationFrame(resolve);\n        });\n    }\n\n    /**\n     * Returns a promise that resolves after a specified number of milliseconds.\n     * ```\n     *  async method() {\n     *      await AsyncHelper.sleep(10);\n     *      // ...\n     *  }\n     * ```\n     * @param {Number} millis The number of milliseconds to sleep.\n     * @async\n     */\n    static sleep(millis) {\n        return new Promise(resolve => {\n            setTimeout(() => {\n                resolve();\n            }, millis);\n        });\n    }\n\n    /**\n     * Returns a promise that resolves as soon as possible, allowing the browser to minimally process other messages.\n     * This is the shortest possible delay the browser offers, so be aware that it does not necessarily allow the\n     * browser to paint or reflow if used in a long loop. It does, however, allow other async methods to execute.\n     * ```\n     *  async method() {\n     *      await AsyncHelper.yield();\n     *      // ...\n     *  }\n     * ```\n     * @async\n     */\n    static yield() {\n        return Promise.resolve();\n    }\n}\n","/**\n * @module Core/helper/AjaxHelper\n */\n\nimport Objects from './util/Objects.js';\n\n/**\n * Options for the requests. Please see\n * [fetch API](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch) for details\n *\n * To set default values for the options please use {@link #property-DEFAULT_FETCH_OPTIONS-static} property:\n *\n * ```javascript\n * // enable passing parameters in request body by default\n * AjaxHelper.DEFAULT_FETCH_OPTIONS = { addQueryParamsToBody : true };\n * ```\n *\n * @typedef {Object} FetchOptions\n * @property {'GET'|'POST'|'PUT'|'PATCH'|'DELETE'} [method] The request method, e.g., `GET`, `POST`\n * @property {Object} [queryParams] A key-value pair Object containing the params to add to the query string\n * @property {Object} [headers] Any headers you want to add to your request, contained within a `Headers` object or an\n * object literal with ByteString values\n * @property {Object} [body] Any body that you want to add to your request: this can be a `Blob`, `BufferSource`,\n * `FormData`, `URLSearchParams`, or `USVString` object. Note that a request using the `GET` or `HEAD` method cannot have a body.\n * @property {Boolean} [addQueryParamsToBody=false] Indicates whether `queryParams` should be passed in the request\n * body. Adding them to the body applies for `application/x-www-form-urlencoded` and `multipart/form-data`\n * content types only, so make sure to pass corresponding `Content-Type` header to `headers`.\n *\n * When the argument is `true` and:\n * - if `application/x-www-form-urlencoded` content-type header is passed\n *   the method will make a `URLSearchParams` instance with `queryParams` and set it as the request body.\n *   And if `body` already has a `URLSearchParams` instance provided the parameters will be set there.\n * - if `multipart/form-data` content-type header is passed\n *   the method will make a `FormData` instance with `queryParams` and set it as the request body.\n *   And if `body` already has a `FormData` instance provided the parameters will be set there.\n *\n * Otherwise, `queryParams` are added to the query string.\n * @property {'cors'|'no-cors'|'same-origin'} [mode] The mode you want to use for the request, e.g., `'cors'`, `'no-cors'`, or `'same-origin'`.\n * @property {'omit'|'same-origin'|'include'} [credentials] The request credentials you want to use for the request: `'omit'`, `'same-origin'`, or\n * `'include'`. To automatically send cookies for the current domain, this option must be provided\n * @property {Boolean} [parseJson] Specify `true` to parses the response and attach the resulting object to the\n * `Response` object as `parsedJson`\n */\n\nconst\n    paramValueRegExp = /^(\\w+)=(.*)$/,\n    parseParams      = function(paramString) {\n        const\n            result = {},\n            params = paramString.split('&');\n\n        // loop through each 'filter={\"field\":\"name\",\"operator\":\"=\",\"value\":\"Sweden\",\"caseSensitive\":true}' string\n        // So we cannot use .split('=')\n        for (const nameValuePair of params) {\n            const\n                [match, name, value] = paramValueRegExp.exec(nameValuePair),\n                decodedName          = decodeURIComponent(name),\n                decodedValue         = decodeURIComponent(value);\n\n            if (match) {\n                let paramValue = result[decodedName];\n\n                if (paramValue) {\n                    if (!Array.isArray(paramValue)) {\n                        paramValue = result[decodedName] = [paramValue];\n                    }\n                    paramValue.push(decodedValue);\n                }\n                else {\n                    result[decodedName] = decodedValue;\n                }\n            }\n        }\n        return result;\n    };\n\n/**\n * Simplifies Ajax requests. Uses fetch & promises.\n *\n * ```javascript\n * AjaxHelper.get('some-url').then(response => {\n *     // process request response here\n * });\n * ```\n *\n * Uploading file to server via FormData interface.\n * Please visit [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) for details.\n *\n * ```javascript\n * const formData = new FormData();\n * formData.append('file', 'fileNameToUpload');\n * AjaxHelper.post('file-upload-url', formData).then(response => {\n *     // process request response here\n * });\n * ```\n *\n */\nexport default class AjaxHelper {\n\n    /**\n     * Sets default options for {@link #function-fetch-static AjaxHelper#fetch()} calls. Please see\n     * {@link #typedef-FetchOptions} and\n     * [fetch API](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch) for details.\n     *\n     * ```javascript\n     * // default content-type for all requests will be \"application/json\"\n     * AjaxHelper.DEFAULT_FETCH_OPTIONS = {\n     *     headers : {\n     *         'content-type' : 'application/json'\n     *     }\n     * };\n     * ```\n     * @member {FetchOptions} DEFAULT_FETCH_OPTIONS\n     * @static\n     */\n    static DEFAULT_FETCH_OPTIONS = {};\n\n    /**\n     * Make a request (using GET) to the specified url.\n     * @param {String} url URL to `GET` from\n     * @param {FetchOptions} [options] The options for the `fetch` API\n     * @returns {Promise} The fetch Promise, which can be aborted by calling a special `abort` method\n     * @async\n     */\n    static get(url, options) {\n        return this.fetch(url, options);\n    }\n\n    /**\n     * POST data to the specified URL.\n     * @param {String} url URL to `POST` to\n     * @param {String|Object|FormData} payload The data to post. If an object is supplied, it will be stringified\n     * @param {FetchOptions} [options] The options for the `fetch` API\n     * @returns {Promise} The fetch Promise, which can be aborted by calling a special `abort` method\n     * @async\n     */\n    static post(url, payload, options = {}) {\n        if (!(payload instanceof FormData) && !(typeof payload === 'string')) {\n            payload = JSON.stringify(payload);\n\n            options.headers = options.headers || {};\n\n            options.headers['Content-Type'] = options.headers['Content-Type'] || 'application/json';\n        }\n\n        return this.fetch(url, Object.assign({\n            method : 'POST',\n            body   : payload\n        }, options));\n    }\n\n    /**\n     * Fetch the specified resource using the `fetch` API.\n     * @param {String} url URL to fetch from\n     * @param {FetchOptions} [options] The options for the `fetch` API\n     * @returns {Promise} The fetch Promise, which can be aborted by calling a special `abort` method\n     * @async\n     */\n    static fetch(url, options) {\n        let controller;\n\n        // inherit global options\n        options = Objects.merge({}, AjaxHelper.DEFAULT_FETCH_OPTIONS, options);\n\n        // AbortController is not supported by LockerService\n        // https://github.com/bryntum/support/issues/3689\n        if (typeof AbortController !== 'undefined') {\n            controller = options.abortController = new AbortController();\n            options.signal = controller.signal;\n        }\n\n        if (!('credentials' in options)) {\n            options.credentials = 'include';\n        }\n\n        if (options.queryParams) {\n            const params = Object.entries(options.queryParams);\n            if (params.length) {\n                let paramsAdded = false;\n\n                // for some content types we are going to add parameters to body (if that's not disabled)\n                if (options.headers && options.addQueryParamsToBody === true) {\n                    const contentType = new Headers(options.headers).get('Content-Type');\n\n                    let bodyClass;\n\n                    switch (contentType) {\n                        case 'application/x-www-form-urlencoded':\n                            bodyClass = URLSearchParams;\n                            break;\n\n                        case 'multipart/form-data':\n                            bodyClass = FormData;\n                            break;\n                    }\n\n                    // if that's one of supported content types\n                    if (bodyClass) {\n                        const body = options.body || (options.body = new bodyClass());\n\n                        // put parameters to body if it's of supported type\n                        if (body instanceof bodyClass) {\n                            params.forEach(([key, value]) => body.set(key, value));\n                            // remember parameters are already added\n                            paramsAdded = true;\n                        }\n                    }\n                }\n\n                // if parameters are not added yet append them to the query string\n                if (!paramsAdded) {\n                    url += (url.includes('?') ? '&' : '?') + params.map(([param, value]) =>\n                        `${param}=${encodeURIComponent(value)}`\n                    ).join('&');\n                }\n            }\n        }\n\n        //<debug>\n        if (url.match(/\\W(undefined|null)\\W|\\W(undefined|null)$|\\[object/)) {\n            throw new Error('Incorrect URL: ' + url);\n        }\n        //</debug>\n\n        // Promise that will be resolved either when network request is finished or when json is parsed\n        const promise = new Promise((resolve, reject) => {\n            fetch(url, options).then(\n                response => {\n                    if (options.parseJson) {\n                        response.json().then(json => {\n                            response.parsedJson = json;\n                            resolve(response);\n                        }).catch(error => {\n                            response.parsedJson = null;\n                            response.error = error;\n                            reject(response);\n                        });\n                    }\n                    else {\n                        resolve(response);\n                    }\n                }\n            ).catch(error => {\n                error.stack = promise.stack;\n\n                reject(error);\n            });\n        });\n\n        promise.stack = new Error().stack;\n\n        promise.abort = function() {\n            controller?.abort();\n        };\n\n        return promise;\n    }\n\n    /**\n     * Registers the passed URL to return the passed mocked up Fetch Response object to the\n     * AjaxHelper's promise resolve function.\n     * @param {String} url The url to return mock data for\n     * @param {Object|Function} response A mocked up Fetch Response object which must contain\n     * at least a `responseText` property, or a function to which the `url` and a `params` object\n     * and the `Fetch` `options` object is passed which returns that.\n     * @param {String} response.responseText The data to return.\n     * @param {Boolean} [response.synchronous] resolve the Promise immediately\n     * @param {Number} [response.delay=100] resolve the Promise after this number of milliseconds.\n     */\n    static mockUrl(url, response) {\n        const me = this;\n\n        (me.mockAjaxMap || (me.mockAjaxMap = {}))[url] = response;\n\n        // Inject the override into the AjaxHelper instance\n        if (!AjaxHelper.originalFetch) {\n            AjaxHelper.originalFetch = AjaxHelper.fetch;\n            AjaxHelper.fetch = me.mockAjaxFetch.bind(me);\n        }\n    }\n\n    static async mockAjaxFetch(url, options) {\n        const urlAndParams = url.split('?');\n\n        let result     = this.mockAjaxMap[urlAndParams[0]],\n            parsedJson = null;\n\n        if (result) {\n            if (typeof result === 'function') {\n                result = await result(urlAndParams[0], urlAndParams[1] && parseParams(urlAndParams[1]), options);\n            }\n            try {\n                parsedJson = options.parseJson && JSON.parse(result.responseText);\n            }\n            catch (error) {\n                parsedJson   = null;\n                result.error = error;\n            }\n\n            result = Object.assign({\n                status     : 200,\n                ok         : true,\n                headers    : new Headers(),\n                statusText : 'OK',\n                url        : url,\n                parsedJson : parsedJson,\n                text       : () => new Promise((resolve) => {\n                    resolve(result.responseText);\n                }),\n                json : () => new Promise((resolve) => {\n                    resolve(parsedJson);\n                })\n            }, result);\n\n            return new Promise(function(resolve, reject) {\n                if (result.synchronous) {\n                    resolve(result);\n                }\n                else {\n                    setTimeout(function() {\n                        resolve(result);\n                    }, ('delay' in result ? result.delay : 100));\n                }\n            });\n        }\n        else {\n            return AjaxHelper.originalFetch(url, options);\n        }\n    }\n}\n","/**\n * @module Core/localization/LocaleHelper\n */\n\n/**\n * @typedef {Object} LocaleKeys\n * Object which contains `key: value` localization pairs.\n * Key value may have `String`, `Function`, `LocaleKeys` or `Object` type.\n *\n * Example:\n *\n * ```javascript\n * {\n *     title   : 'Title',\n *     count   : number => `Count is ${number}`,\n *     MyClass : {\n *        foo : 'bar'\n *     }\n * }\n * ```\n * @property {String|Function|LocaleKeys|Object} key localization key\n * @typings {[key: string]}:{string|number|Function|LocaleKeys|object}\n */\n\n/**\n * @typedef {LocaleKeys} Locale\n * Locale configuration object which contains locale properties alongside with localization pairs.\n *\n * Example:\n *\n * ```javascript\n {\n *     localeName : 'En',\n *     localeDesc : 'English (US)',\n *     localeCode : 'en-US',\n *     ... (localization key:value pairs)\n * }\n * ```\n *\n * @property {String} localeName Locale name. For example: \"En\"\n * @property {String} localeDesc Locale description to be shown in locale picker list. For example: \"English (US)\"\n * @property {String} localeCode Locale code. Two letter locale code or two letter locale and two letter country code.\n * For example: \"en\" or 'en_US'\n * @property {String} [localePath] Locale path for asynchronous loading using\n * AjaxHelper {@link Core.helper.AjaxHelper#function-get-static} request\n */\n\n/**\n * @typedef {Object} Locales\n * Object which contains locales. Each object key represents published locale by its `localeName`.\n *\n * Example:\n *\n * ```javascript\n * // This returns English locale.\n * const englishLocale = LocaleHelper.locales.En;\n * ```\n *\n * @property {Locale} key localization object\n * @typings {[key: string]}:{Locale}\n */\n\n/**\n * Thin class which provides locale management methods.\n * Class doesn't import other API classes and can be used separately for publishing locales before importing product classes.\n *\n * Locale should be published with {@link ##function-publishLocale-static} method before it is available for localizing of Bryntum API classes and widgets.\n *\n * Example:\n *\n * ```javascript\n * LocaleHelper.publishLocale({\n *     localeName : 'En',\n *     localeDesc : 'English (US)',\n *     localeCode : 'en-US',\n *     ... (localization key:value pairs)\n * });\n * ```\n *\n * or for asynchronous loading from remote path on applying locale\n *\n * ```javascript\n *LocaleHelper.publishLocale({\n *     localeName : 'En',\n *     localeDesc : 'English (US)',\n *     localeCode : 'en-US',\n *     localePath : 'https://my-server/localization/en.js'\n * });\n * ```\n */\nexport default class LocaleHelper {\n\n    static skipLocaleIntegrityCheck = false;\n\n    /**\n     * Merges all properties of provided locale objects into new locale object.\n     * Locales are merged in order they provided and locales which go later replace\n     * same properties of previous locales.\n     * @param {...Object} locales Locales to merge\n     * @returns {Object} Merged locale\n     */\n    static mergeLocales(...locales) {\n        const result = {};\n\n        locales.forEach(locale => {\n            Object.keys(locale).forEach(key => {\n                if (typeof locale[key] === 'object') {\n                    result[key] = { ...result[key], ...locale[key] };\n                }\n                else {\n                    result[key] = locale[key];\n                }\n            });\n        });\n        return result;\n    }\n\n    /**\n     * Removes all properties from `locale` that are present in the provided `toTrim`.\n     * @param {Object} locale Locale to process\n     * @param {Object} toTrim Object enumerating properties that should be removed.\n     * When `false` throws exceptions in such cases.\n     */\n    static trimLocale(locale, toTrim) {\n        const remove = (key, subKey) => {\n            if (locale[key]) {\n                if (subKey) {\n                    if (locale[key][subKey]) {\n                        delete locale[key][subKey];\n                    }\n                }\n                else {\n                    delete locale[key];\n                }\n            }\n        };\n\n        Object.keys(toTrim).forEach(key => {\n            if (Object.keys(toTrim[key]).length > 0) {\n                Object.keys(toTrim[key]).forEach(subKey => remove(key, subKey));\n            }\n            else {\n                remove(key);\n            }\n        });\n    }\n\n    /**\n     * Normalizes locale object to {@link Locale} type.\n     *\n     * Supported configs:\n     *\n     * ```javascript\n     * LocaleHelper.normalizeLocale({\n     *     localeName : 'En',\n     *     localeDesc : 'English (US)',\n     *     localeCode : 'en-US',\n     *     ... (localization key:value pairs)\n     * });\n     * ```\n     *\n     * and for backward compatibility\n     *\n     * ```javascript\n     * LocaleHelper.normalizeLocale('En', {\n     *     name : 'En',\n     *     desc : 'English (US)',\n     *     code : 'en-US',\n     *     locale : {\n     *         ... (localization key:value pairs)\n     *     }\n     * });\n     * ```\n     * @param {String|Object} nameOrConfig String name of locale or locale object\n     * @param {Object} [config] Locale object\n     * @returns {Locale} Locale object\n     * @internal\n     */\n    static normalizeLocale(nameOrConfig, config) {\n\n        if (!nameOrConfig) {\n            throw new Error(`\"nameOrConfig\" parameter can not be empty`);\n        }\n\n        if (typeof nameOrConfig === 'string') {\n            if (!config) {\n                throw new Error(`\"config\" parameter can not be empty`);\n            }\n\n            if (config.locale) {\n                // Matches legacy locale type\n                config.name = nameOrConfig || config.name;\n            }\n            else {\n                config.localeName = nameOrConfig;\n            }\n        }\n        else {\n            config = nameOrConfig;\n        }\n\n        let locale = {};\n\n        if (config.name || config.locale) {\n            // Matches legacy locale type\n            locale = Object.assign({\n                localeName : config.name\n            }, config.locale);\n            config.desc && (locale.localeDesc = config.desc);\n            config.code && (locale.localeCode = config.code);\n            config.path && (locale.localePath = config.path);\n        }\n        else {\n            if (!config.localeName) {\n                throw new Error(`\"config\" parameter doesn't have \"localeName\" property`);\n            }\n            // Extract locale config from name object\n            locale = Object.assign({}, config);\n        }\n\n        // Cleanup result\n        for (const key of ['name', 'desc', 'code', 'path']) {\n            if (locale[key]) {\n                delete locale[key];\n            }\n        }\n\n        if (!locale.localeName) {\n            throw new Error(`Locale name can not be empty`);\n        }\n\n        return locale;\n    }\n\n    /**\n     * Get/set currently published locales.\n     * Returns an object with locales.\n     *\n     * Example:\n     *\n     * ```javascript\n     * const englishLocale = LocaleHelper.locales.En;\n     * ```\n     *\n     * `englishLocale` contains {@link Locale} object.\n     *\n     * @readonly\n     * @member {Locales} locales\n     * @static\n     */\n    static get locales() {\n        return globalThis.bryntum.locales || {};\n    }\n\n    static set locales(locales) {\n        globalThis.bryntum.locales = locales;\n    }\n\n    /**\n     * Get/set current locale name. Defaults to \"En\"\n     * @member {String} localeName\n     * @static\n     */\n    static get localeName() {\n        return globalThis.bryntum.locale || 'En';\n    }\n\n    static set localeName(localeName) {\n        globalThis.bryntum.locale = localeName || LocaleHelper.localeName;\n    }\n\n    /**\n     * Get current locale config specified by {@link ##property-localeName-static}.\n     * If no current locale specified, returns default `En` locale or first published locale\n     * or empty locale object if no published locales found.\n     * @readonly\n     * @member {Locales} locale\n     * @static\n     */\n    static get locale() {\n        return LocaleHelper.localeName && this.locales[LocaleHelper.localeName] || this.locales.En || Object.values(this.locales)[0] || { localeName : '', localeDesc : '', localeCoode : '' };\n    }\n\n    /**\n     * Publishes a locale to make it available for applying.\n     * Published locales are available in {@link ##property-locales-static}.\n     *\n     * Recommended usage:\n     *\n     * ```javascript\n     * LocaleHelper.publishLocale({\n     *     localeName : 'En',\n     *     localeDesc : 'English (US)',\n     *     localeCode : 'en-US',\n     *     ... (localization key:value pairs)\n     * });\n     * ```\n     *\n     * for backward compatibility (prior to `5.3.0` version):\n     *\n     * ```javascript\n     * LocaleHelper.publishLocale('En', {\n     *     name : 'En',\n     *     desc : 'English (US)',\n     *     code : 'en-US',\n     *     locale : {\n     *         ... (localization key:value pairs)\n     *     }\n     * });\n     * ```\n     *\n     * Publishing a locale will automatically merge it's localization keys with existing locale matching by locale name,\n     * replacing existing one with new. To replace existing locale entirely pass `true` to optional `config` parameter.\n     *\n     * Example:\n     *\n     * ```javascript\n     * LocaleHelper.publishLocale({\n     *     localeName : 'En',\n     *     localeDesc : 'English (US)',\n     *     localeCode : 'en-US',\n     *     ... (localization key:value pairs)\n     * }, true);\n     * ```\n     *\n     * @param {String|Locale} nameOrConfig String name of locale (for example `En` or `SvSE`) or locale object\n     * @param {Locale|Boolean} [config] Locale object.\n     * Not used if locale object is passed as first method parameter.\n     * Path `true` value and locale object as first method parameter to publish locale without merging with existing one.\n     * @returns {Locale} Locale object\n     */\n    static publishLocale(nameOrConfig, config) {\n        const\n            { locales }    = globalThis.bryntum,\n            locale         = LocaleHelper.normalizeLocale(nameOrConfig, config),\n            { localeName } = locale;\n\n        if (!locales[localeName] || config === true) {\n            locales[localeName] = locale;\n        }\n        else {\n            locales[localeName] = this.mergeLocales(locales[localeName] || {}, locale || {});\n        }\n\n        // <debug>\n        if (!LocaleHelper.skipLocaleIntegrityCheck && !locales[localeName].localeDesc) {\n            throw new Error(`\"${localeName}\" locale doesn't have \"localeDesc\" or \"desc\"`);\n        }\n\n        if (!LocaleHelper.skipLocaleIntegrityCheck && !locales[localeName].localeCode) {\n            throw new Error(`\"${localeName}\" locale doesn't have \"localeCode\" or \"code\"`);\n        }\n        // </debug>\n\n        return locales[localeName];\n    }\n\n}\n\nglobalThis.bryntum = globalThis.bryntum || {};\nglobalThis.bryntum.locales = globalThis.bryntum.locales || {};\n","import Base from '../Base.js';\nimport AjaxHelper from '../helper/AjaxHelper.js';\nimport Events from '../mixin/Events.js';\nimport BrowserHelper from '../helper/BrowserHelper.js';\nimport LocaleHelper from '../localization/LocaleHelper.js';\nimport VersionHelper from '../helper/VersionHelper.js';\n\n/**\n * @module Core/localization/LocaleManager\n */\n\n// Documented at the export below, to work for singleton\nclass LocaleManager extends Events(Base) {\n\n    static get defaultConfig() {\n        return {\n            // Enable strict locale checking by default for tests\n            throwOnMissingLocale : VersionHelper.isTestEnv\n        };\n    }\n\n    construct(...args) {\n        const me = this;\n\n        super.construct(...args);\n\n        if (BrowserHelper.isBrowserEnv) {\n            // Try get locale name from script's `default-locale` tag\n            const scriptTag = document.querySelector('script[data-default-locale]');\n\n            if (scriptTag) {\n                me.applyLocale(scriptTag.dataset.defaultLocale);\n            }\n            else if (me.locale?.localeName) {\n                me.applyLocale(me.locale.localeName);\n            }\n        }\n    }\n\n    /**\n     * Get/set currently registered locales.\n     * Alias for {@link Core.localization.LocaleHelper#property-locales-static LocaleHelper.locales}.\n     * @readonly\n     * @member {Locales} locales\n     */\n    get locales() {\n        return LocaleHelper.locales;\n    }\n\n    set locales(locales) {\n        LocaleHelper.locales = locales;\n    }\n\n    /**\n     * Get/set currently used locale.\n     * Setter calls {@link #function-applyLocale}.\n     * @member {Locales} locale\n     * @accepts {String|Locale}\n     */\n    set locale(nameOrConfig) {\n        this.applyLocale(nameOrConfig);\n    }\n\n    get locale() {\n        return LocaleHelper.locale;\n    }\n\n    /**\n     * Publishes a locale to make it available for applying.\n     * @deprecated Since 5.3.0. Use {@link Core.localization.LocaleHelper#function-publishLocale-static LocaleHelper.publishLocale} instead.\n     *\n     * @param {String|Locale} nameOrConfig String name of locale (for example `En` or `SvSE`) or locale object.\n     * @param {Locale} [config] Locale object. Not used if object is passed as first method parameter\n     * @returns {Locale} published locale object is passed as first method parameter\n     * @function registerLocale\n     */\n    registerLocale(nameOrConfig, config) {\n        VersionHelper.deprecate('Core', '6.0.0', 'LocaleManager.registerLocale deprecated, use LocaleHelper.publishLocale instead');\n        LocaleHelper.publishLocale(nameOrConfig, config);\n    }\n\n    /**\n     * Extends locale specified by name to add additional translations and applies it.\n     * @deprecated Since 5.3.0. Use {@link ##function-applyLocale} instead.\n     *\n     * @param {String} name Name of locale (for example `En` or `SvSE`).\n     * @param {Locale} config Locale object\n     * @returns {Locale|Promise} locale object or Promise which resolves with locale object after it was loaded\n     * @function extendLocale\n     */\n    extendLocale(name, config) {\n        VersionHelper.deprecate('Core', '6.0.0', 'LocaleManager.extendLocale deprecated, use LocaleManager.applyLocale instead');\n        const locale = LocaleHelper.publishLocale(name, config);\n        return this.applyLocale(locale, true);\n    }\n\n    /**\n     * Applies a locale by string name or publishes new locale configuration with\n     * {@link Core.localization.LocaleHelper#function-publishLocale-static} and applies it.\n     * If locale is specified by string name, like 'En', it must be published before applying it.\n     *\n     * @param {String|Locale} nameOrConfig String name of locale (for example `En` or `SvSE`) or locale object\n     * @param {Locale|Boolean} [config] Locale object. Pass `true` to reapply locale which is passed as first method parameter.\n     * @returns {Locale|Promise} locale object or Promise which resolves with locale object after it was loaded\n     * @fires locale\n     * @async\n     * @function applyLocale\n     */\n    applyLocale(nameOrConfig, config, ignoreError = false) {\n        const me = this;\n        let localeConfig;\n\n        if (typeof nameOrConfig === 'string') {\n            if (typeof config !== 'object') {\n                localeConfig = me.locales[nameOrConfig];\n                if (!localeConfig) {\n                    if (ignoreError) {\n                        return true;\n                    }\n                    throw new Error(`Locale \"${nameOrConfig}\" is not published. Publish with LocaleHelper.publishLocale() before applying.`);\n                }\n            }\n            else {\n                localeConfig = LocaleHelper.publishLocale(nameOrConfig, config);\n            }\n        }\n        else {\n            localeConfig = LocaleHelper.publishLocale(nameOrConfig);\n        }\n\n        if (me.locale.localeName && me.locale.localeName === localeConfig.localeName && config !== true) {\n            // no need to apply same locale again\n            return me.locale;\n        }\n\n        // Set current locale name\n        LocaleHelper.localeName = localeConfig.localeName;\n\n        const triggerLocaleEvent = () => {\n            /**\n             * Fires when a locale is applied\n             * @event locale\n             * @param {Core.localization.LocaleManager} source The Locale manager instance.\n             * @param {Locale} locale Locale configuration\n             */\n            me.trigger('locale', localeConfig);\n        };\n\n        if (localeConfig.localePath) {\n            return new Promise((resolve, reject) => {\n                me.loadLocale(localeConfig.localePath).then(response => {\n                    response.text().then(text => {\n                        // eslint-disable-next-line no-new-func\n                        const parseLocale = new Function(text);\n                        parseLocale();\n\n                        if (BrowserHelper.isBrowserEnv) {\n                            localeConfig = me.locales[localeConfig.localeName];\n                            // Avoid loading next time\n                            if (localeConfig) {\n                                delete localeConfig.localePath;\n                            }\n                        }\n\n                        triggerLocaleEvent();\n                        resolve(localeConfig);\n                    });\n                }).catch(response => reject(response));\n            });\n        }\n\n        triggerLocaleEvent();\n        return localeConfig;\n    }\n\n    /**\n     * Loads a locale using AjaxHelper {@link Core.helper.AjaxHelper#function-get-static} request.\n     * @private\n     * @param {String} path Path to locale file\n     * @async\n     */\n    loadLocale(path) {\n        return AjaxHelper.get(path);\n    }\n\n    /**\n     * Specifies if {@link Core.localization.Localizable#function-L-static Localizable.L()} function would throw error if no localization found at runtime.\n     *\n     * @member {Boolean} throwOnMissingLocale\n     * @default false\n     */\n    set throwOnMissingLocale(value) {\n        this._throwOnMissingLocale = value;\n    }\n\n    get throwOnMissingLocale() {\n        return this._throwOnMissingLocale;\n    }\n\n}\n\nconst LocaleManagerSingleton = new LocaleManager();\n\n/**\n * Singleton that handles switching locale.\n * Locales can be included on page with `<script>` tags or loaded using ajax.\n * When using script tags the first locale loaded is used per default, if another should be used as\n * default specify it on any `<script>` tag with `data-default-locale=\"En\"`.\n *\n * Example for Grid (to use for other products replace grid with product name):\n *\n * index.html:\n *\n * ```html\n * // Using Ecma 6 modules and source\n * <script type=\"module\" src=\"lib/Core/localization/SvSE.js\">\n *\n * // Specify default locale when using bundled locales\n * <script data-default-locale=\"En\" src=\"build/locales/grid.locale.En.js\">\n * <script src=\"build/locales/grid.locale.SvSE.js\">\n * ```\n *\n * app.js:\n *\n * ```javascript\n * // Import using sources\n * import LocaleManager from 'lib/Core/localization/LocaleManager.js';\n * // Or using module bundle\n * import { LocaleManager } from 'build/grid.module.js';\n *\n * // Set locale using method\n * LocaleManager.applyLocale('SvSE');\n *\n * // Or set locale using string property\n * LocaleManager.locale = 'SvSE';\n *\n * // Or set locale using locale object property\n * LocaleManager.locale = LocaleManager.locales.SvSE;\n * ```\n *\n * @demo Grid/localization\n * @class\n * @singleton\n */\nexport default LocaleManagerSingleton;\n","import Base from '../Base.js';\nimport LocaleManager from './LocaleManager.js';\nimport LocaleHelper from './LocaleHelper.js';\nimport Objects from '../helper/util/Objects.js';\n\n/**\n * @module Core/localization/Localizable\n */\n\nconst\n    ObjectProto     = Object.getPrototypeOf(Object),\n    localeRe        = /L{.*?}/g,\n    capturelocaleRe = /L{(.*?)}/g,\n    classMatchRe    = /((.*?)\\.)?(.+)/g,\n    escape          = (txt) => txt.replace(/{(\\d+)}/gm, '[[$1]]'),\n    unescape        = (txt) => txt.replace(/\\[\\[(\\d+)]]/gm, '{$1}'),\n    emptyObject     = Object.freeze(Object.create(null));\n\n/**\n * Mixin that provides localization functionality to a class.\n *\n * ```\n * // Get localized string\n * grid.L('foo');\n * grid.L('L{foo}');\n * ```\n *\n * @mixin\n */\nexport default Target => class Localizable extends (Target || Base) {\n    static get $name() {\n        return 'Localizable';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * A class translations of which are used for translating this entity.\n             * This is often used when translations of an item are defined on its container class.\n             * For example:\n             *\n             * ```js\n             * // Toolbar class that has some predefined items\n             * class MyToolbar extends Toolbar {\n             *\n             *     static get $name() {\n             *         return 'MyToolbar';\n             *     }\n             *\n             *     static get defaultConfig() {\n             *         return {\n             *             // this specifies default configs for the items\n             *             defaults : {\n             *                 // will tell items to use the toolbar locale\n             *                 localeClass : this\n             *             },\n             *\n             *             items : [\n             *                 // The toolbar has 2 buttons and translation for their texts will be searched in\n             *                 // the toolbar locales\n             *                 { text : 'Agree' },\n             *                 { text : 'Disagree' }\n             *             ]\n             *         };\n             *     }\n             *\n             *    ...\n             * }\n             * ```\n             * So if one makes a locale for the `MyToolbar` class that will include `Agree` and `Disagree` string translations:\n             * ```js\n             *     ...\n             *     MyToolbar : {\n             *         Agree    : 'Yes, I agree',\n             *         Disagree : 'No, I do not agree'\n             *     }\n             * ```\n             * They will be used for the toolbar buttons and the button captions will say `Yes, I agree` and `No, I do not agree`.\n             *\n             * @config {Core.Base}\n             * @typings {typeof Base}\n             * @category Misc\n             */\n            localeClass : null,\n\n            /**\n             * Set to `false` to disable localization of this object.\n             * @config {Boolean}\n             * @default true\n             */\n            localizable : null,\n\n            /**\n             * List of properties which values should be translated automatically upon a locale applying.\n             * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),\n             * you could use 'localeKey' meta configuration.\n             * Example:\n             * ```js\n             *  static get configurable() {\n             *     return {\n             *          localizableProperties : ['width'],\n             *\n             *          width : {\n             *              value   : '54em', // default value here\n             *              $config : {\n             *                  localeKey : 'L{editorWidth}' // name of the property that will be used in localization file\n             *              }\n             *          }\n             *      };\n             *  }\n             * ```\n             * @config {String[]}\n             * @category Misc\n             */\n            localizableProperties : {\n                value : [],\n\n                $config : {\n                    merge : 'distinct'\n                }\n            }\n        };\n    }\n\n    static clsName(cls) {\n        // <debug>\n        if (typeof cls === 'string') {\n            throw new Error('Providing of strings to localeClass is not recommended');\n        }\n        if (cls.isColumn) {\n            cls = cls.$meta.class;\n        }\n        // </debug>\n        return typeof cls === 'string' ? cls : cls === ObjectProto ? 'Object' : cls.$$name || cls.name || cls.prototype?.$$name || cls.prototype?.name;\n    }\n\n    static parseLocaleString(text) {\n        const matches = [];\n        let m;\n\n        // Parse locale text in case it's wrapped with L{foo}\n        if (text?.includes('L{')) {\n            // Escape fix for {1}, {2} etc. in locale str\n            text = escape(text);\n            capturelocaleRe.lastIndex = 0;\n\n            while ((m = capturelocaleRe.exec(text)) != null) {\n                classMatchRe.lastIndex = 0;\n\n                // Support for parsing class namespace L{Class.foo}\n                const classMatch = classMatchRe.exec(m[1]);\n                matches.push({\n                    match       : unescape(m[0]),\n                    localeKey   : unescape(classMatch[3]),\n                    localeClass : classMatch[2]\n                });\n            }\n        }\n\n        return matches.length > 0\n            ? matches\n            : [{\n                match       : text,\n                localeKey   : text,\n                localeClass : undefined\n            }];\n    }\n\n    construct(config = {}, ...args) {\n        // Base class applies configs.\n        super.construct(config, ...args);\n\n        LocaleManager.ion({ locale : 'updateLocalization', thisObj : this });\n\n        this.updateLocalization();\n    }\n\n    get localeClass() {\n        return this._localeClass || null;\n    }\n\n    localizeProperty(property) {\n        const\n            me           = this,\n            currentValue = Objects.getPath(me, property),\n            // Grid.column.Column is Localizable too. It uses fields, not configs\n            localeKey    = me.$meta.configs[property]?.localeKey || me.fieldMap?.[property]?.defaultValue;\n\n        let localizedValue;\n\n        // check if localeKey is defined and try to translate it\n        if (localeKey) {\n            localizedValue = Localizable.localize(localeKey, me, me.localeClass || me);\n            // if a user set value directly in class definition, his value has a prio\n            if (localizedValue && !(property in (me.initialConfig || emptyObject))) {\n                Objects.setPath(me.isColumn ? me.data : me, property, localizedValue);\n            }\n        }\n        else if (typeof currentValue === 'string') {\n\n            me.originalLocales = me.originalLocales || {};\n\n            localizedValue = Objects.getPath(me.originalLocales, property);\n\n            // If we haven't saved original values yet let's do that\n            if (localizedValue === undefined) {\n                Objects.setPath(me.originalLocales, property, currentValue);\n                localizedValue = currentValue;\n            }\n\n            // Doing localization from the original values\n            if (localizedValue) {\n                Objects.setPath(me, property, localizedValue = me.optionalL(localizedValue, me));\n            }\n        }\n        return localizedValue || currentValue;\n    }\n\n    /**\n     * Method that is triggered when applying a locale to the instance\n     * (happens on the instance construction steps and when switching to another locale).\n     *\n     * The method can be overridden to dynamically translate the instance when locale is switched.\n     * When overriding the method please make sure you call `super.updateLocalization()`.\n     * @category Misc\n     */\n    updateLocalization() {\n        if (this.localizable !== false) {\n            this.localizableProperties?.forEach(this.localizeProperty, this);\n            this.trigger?.('localized');\n        }\n    }\n\n    static getTranslation(text, templateData, localeCls) {\n        const locale = LocaleManager.locale;\n\n        let result = null,\n            clsName,\n            cls;\n\n        if (locale) {\n\n            // Iterate over all found localization entries\n            for (const { match, localeKey, localeClass } of this.parseLocaleString(text)) {\n\n                const translate = (clsName) => {\n                    const translation = locale[clsName]?.[localeKey];\n\n                    if (translation) {\n                        if (typeof translation === 'function') {\n                            result = templateData != null ? translation(templateData) : translation;\n                        }\n                        else if (typeof translation === 'object' || text === match) {\n                            result = translation;\n                        }\n                        // Likely string\n                        else {\n                            result = (result || text).replace(match, translation);\n                        }\n\n                        // Might have nested L{, recurse\n                        if (typeof translation === 'string' && translation.includes('L{')) {\n                            result = this.getTranslation(translation, templateData, localeCls);\n                        }\n                    }\n\n                    return translation;\n                };\n\n                // Translate order\n                // 1. Try to translate for current class\n                // 2. Try to translate by Class hierarchy traversing prototypes\n                // 3. Try to translate if Class is in {Class.foo} format\n                let success = false;\n                for (cls = localeCls; cls && (clsName = Localizable.clsName(cls)); cls = Object.getPrototypeOf(cls)) {\n                    if ((success = translate(clsName))) {\n                        break;\n                    }\n                    else if (typeof cls === 'string') {\n                        break;\n                    }\n                }\n                if (!success && localeClass) {\n                    translate(localeClass);\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Get localized string, returns `null` if no localized string found.\n     * @param {String} text String key\n     * @param {Object} [templateData] Data to supply to template if localized string is a function\n     * @returns {String}\n     * @internal\n     */\n    static localize(text, templateData = undefined, ...localeClasses) {\n        // In case this static method is called directly third argument is not provided\n        // just fallback to searching locales for the class itself\n        if (localeClasses?.length === 0) {\n            localeClasses = [this];\n        }\n        let translation = null;\n        localeClasses.some(cls => {\n            translation = Localizable.getTranslation(text, templateData, cls);\n            return translation != null;\n        });\n        return translation;\n    }\n\n    /**\n     * Get localized string, returns value of `text` if no localized string found.\n     *\n     * If {@link Core.localization.LocaleManager#property-throwOnMissingLocale LocaleManager.throwOnMissingLocale}\n     * is `true` then calls to `L()` will throw `Localization is not found for 'text' in 'ClassName'` exception when no\n     * localization is found.\n     *\n     * @param {String} text String key\n     * @param {Object} [templateData] Data to supply to template if localized string is a function\n     * @static\n     * @returns {String}\n     */\n    static L(text, templateData = undefined, ...localeClasses) {\n        // In case this static method is called directly third argument is not provided\n        // just fallback to searching locales for the class itself\n        if (localeClasses?.length === 0) {\n            localeClasses = [this];\n        }\n        const translation = this.localize(text, templateData, ...localeClasses);\n\n        // Throw error if not localized and text matches `L{foo}`\n        if (\n            translation == null &&\n            LocaleManager.throwOnMissingLocale &&\n            text.includes('L{')\n        ) {\n            throw new Error(`Localization is not found for '${text}' in '${localeClasses.map(cls => Localizable.clsName(cls)).join(', ')}'. ${LocaleManager.locale.localeName ? `Locale : ${LocaleManager.locale.localeName}` : ''}`);\n        }\n\n        return translation ?? text;\n    }\n\n    /**\n     * Convenience function that can be called directly on the class that mixes Localizable in\n     *\n     * ```javascript\n     * button.text = grid.L('L{group}');\n     * ```\n     *\n     * @param {String} text String key\n     * @param {Object} [templateData] Data to supply to template if localized string is a function\n     * @returns {String}\n     * @category Misc\n     */\n    L(text, templateData) {\n        const { localeClass, constructor } = this;\n        // If we have a different class set as translations provider\n        // pass it first and use the class being translated as a fallback provider\n        if (localeClass && Localizable.clsName(localeClass) !== Localizable.clsName(constructor)) {\n            return Localizable.L(text, templateData, localeClass, constructor);\n        }\n        else {\n            return Localizable.L(text, templateData, constructor);\n        }\n    }\n\n    /**\n     * Convenience function to get an optional translation. The difference compared to `L()` is that it wont throw\n     * an error when the translation is missing even if configured with `throwOnMissingLocale`\n     *\n     * ```javascript\n     * button.text = grid.optionalL('L{group}');\n     * ```\n     *\n     * @param {String} text String key\n     * @param {Object} [templateData] Data to supply to template if localized string is a function\n     * @returns {String}\n     * @static\n     * @category Misc\n     */\n    static optionalL(text, templateData = undefined, ...localeClasses) {\n        const shouldThrow = LocaleManager.throwOnMissingLocale;\n\n        LocaleManager.throwOnMissingLocale = shouldThrow && localeRe.test(text);\n\n        // In case this static method is called directly third argument is not provided\n        // just fallback to searching locales for the class itself\n        if (localeClasses?.length === 0) {\n            localeClasses = [this];\n        }\n        const result = Localizable.L(text, templateData, ...localeClasses);\n\n        LocaleManager.throwOnMissingLocale = shouldThrow;\n\n        return result;\n    }\n\n    /**\n     * Convenience function to get an optional translation. The difference compared to `L()` is that it won't throw\n     * an error when the translation is missing even if configured with `throwOnMissingLocale`\n     *\n     * ```javascript\n     * button.text = grid.optionalL('L{group}');\n     * ```\n     *\n     * @param {String} text String key\n     * @param {Object} [templateData] Data to supply to template if localized string is a function\n     * @param {Boolean} [preventThrow] Prevent throwing error even if localized text matches `L{foo}`\n     * @returns {String}\n     * @category Misc\n     * @internal\n     */\n    optionalL(text, templateData = this, preventThrow = false) {\n        const shouldThrow = LocaleManager.throwOnMissingLocale;\n\n        // Optional locale text should not include L{}\n        LocaleManager.throwOnMissingLocale = shouldThrow && localeRe.test(text) && !preventThrow;\n\n        const result = this.L(text, templateData);\n\n        LocaleManager.throwOnMissingLocale = shouldThrow;\n\n        return result;\n    }\n\n    /**\n     * Get the global LocaleManager\n     * @property {Core.localization.LocaleManager}\n     * @typings {typeof LocaleManager}\n     * @category Misc\n     * @readonly\n     */\n    get localeManager() {\n        return LocaleManager;\n    }\n\n    /**\n     * Get the global LocaleHelper\n     * @property {Core.localization.LocaleHelper}\n     * @typings {typeof LocaleHelper}\n     * @category Misc\n     * @readonly\n     */\n    get localeHelper() {\n        return LocaleHelper;\n    }\n\n};\n","import LocaleHelper from '../../Core/localization/LocaleHelper.js';\n\nconst locale = {\n\n    localeName : 'En',\n    localeDesc : 'English (US)',\n    localeCode : 'en-US',\n\n    Object : {\n        Yes    : 'Yes',\n        No     : 'No',\n        Cancel : 'Cancel',\n        Ok     : 'OK',\n        Week   : 'Week'\n    },\n\n    Combo : {\n        noResults          : 'No results',\n        recordNotCommitted : 'Record could not be added',\n        addNewValue        : value => `Add ${value}`\n    },\n\n    FilePicker : {\n        file : 'File'\n    },\n\n    Field : {\n        badInput              : 'Invalid field value',\n        patternMismatch       : 'Value should match a specific pattern',\n        rangeOverflow         : value => `Value must be less than or equal to ${value.max}`,\n        rangeUnderflow        : value => `Value must be greater than or equal to ${value.min}`,\n        stepMismatch          : 'Value should fit the step',\n        tooLong               : 'Value should be shorter',\n        tooShort              : 'Value should be longer',\n        typeMismatch          : 'Value is required to be in a special format',\n        valueMissing          : 'This field is required',\n        invalidValue          : 'Invalid field value',\n        minimumValueViolation : 'Minimum value violation',\n        maximumValueViolation : 'Maximum value violation',\n        fieldRequired         : 'This field is required',\n        validateFilter        : 'Value must be selected from the list'\n    },\n\n    DateField : {\n        invalidDate : 'Invalid date input'\n    },\n\n    DatePicker : {\n        gotoPrevYear  : 'Go to previous year',\n        gotoPrevMonth : 'Go to previous month',\n        gotoNextMonth : 'Go to next month',\n        gotoNextYear  : 'Go to next year'\n    },\n\n    NumberFormat : {\n        locale   : 'en-US',\n        currency : 'USD'\n    },\n\n    DurationField : {\n        invalidUnit : 'Invalid unit'\n    },\n\n    TimeField : {\n        invalidTime : 'Invalid time input'\n    },\n\n    TimePicker : {\n        hour   : 'Hour',\n        minute : 'Minute',\n        second : 'Second'\n    },\n\n    List : {\n        loading : 'Loading...'\n    },\n\n    GridBase : {\n        loadMask : 'Loading...',\n        syncMask : 'Saving changes, please wait...'\n    },\n\n    PagingToolbar : {\n        firstPage         : 'Go to first page',\n        prevPage          : 'Go to previous page',\n        page              : 'Page',\n        nextPage          : 'Go to next page',\n        lastPage          : 'Go to last page',\n        reload            : 'Reload current page',\n        noRecords         : 'No records to display',\n        pageCountTemplate : data => `of ${data.lastPage}`,\n        summaryTemplate   : data => `Displaying records ${data.start} - ${data.end} of ${data.allCount}`\n    },\n\n    PanelCollapser : {\n        Collapse : 'Collapse',\n        Expand   : 'Expand'\n    },\n\n    Popup : {\n        close : 'Close'\n    },\n\n    UndoRedo : {\n        Undo           : 'Undo',\n        Redo           : 'Redo',\n        UndoLastAction : 'Undo last action',\n        RedoLastAction : 'Redo last undone action',\n        NoActions      : 'No items in the undo queue'\n    },\n\n    FieldFilterPicker : {\n        equals                 : 'equals',\n        doesNotEqual           : 'does not equal',\n        isEmpty                : 'is empty',\n        isNotEmpty             : 'is not empty',\n        contains               : 'contains',\n        doesNotContain         : 'does not contain',\n        startsWith             : 'starts with',\n        endsWith               : 'ends with',\n        isOneOf                : 'is one of',\n        isNotOneOf             : 'is not one of',\n        isGreaterThan          : 'is greater than',\n        isLessThan             : 'is less than',\n        isGreaterThanOrEqualTo : 'is greater than or equal to',\n        isLessThanOrEqualTo    : 'is less than or equal to',\n        isBetween              : 'is between',\n        isNotBetween           : 'is not between',\n        isBefore               : 'is before',\n        isAfter                : 'is after',\n        isToday                : 'is today',\n        isTomorrow             : 'is tomorrow',\n        isYesterday            : 'is yesterday',\n        isThisWeek             : 'is this week',\n        isNextWeek             : 'is next week',\n        isLastWeek             : 'is last week',\n        isThisMonth            : 'is this month',\n        isNextMonth            : 'is next month',\n        isLastMonth            : 'is last month',\n        isThisYear             : 'is this year',\n        isNextYear             : 'is next year',\n        isLastYear             : 'is last year',\n        isYearToDate           : 'is year to date',\n        isTrue                 : 'is true',\n        isFalse                : 'is false',\n        selectAProperty        : 'Select a property',\n        selectAnOperator       : 'Select an operator',\n        caseSensitive          : 'Case-sensitive',\n        and                    : 'and',\n        dateFormat             : 'D/M/YY',\n        selectOneOrMoreValues  : 'Select one or more values',\n        enterAValue            : 'Enter a value',\n        enterANumber           : 'Enter a number',\n        selectADate            : 'Select a date'\n    },\n\n    FieldFilterPickerGroup : {\n        addFilter : 'Add filter'\n    },\n\n    DateHelper : {\n        locale         : 'en-US',\n        weekStartDay   : 0,\n        nonWorkingDays : {\n            0 : true,\n            6 : true\n        },\n        weekends : {\n            0 : true,\n            6 : true\n        },\n        unitNames : [\n            { single : 'millisecond', plural : 'ms', abbrev : 'ms' },\n            { single : 'second', plural : 'seconds', abbrev : 's' },\n            { single : 'minute', plural : 'minutes', abbrev : 'min' },\n            { single : 'hour', plural : 'hours', abbrev : 'h' },\n            { single : 'day', plural : 'days', abbrev : 'd' },\n            { single : 'week', plural : 'weeks', abbrev : 'w' },\n            { single : 'month', plural : 'months', abbrev : 'mon' },\n            { single : 'quarter', plural : 'quarters', abbrev : 'q' },\n            { single : 'year', plural : 'years', abbrev : 'yr' },\n            { single : 'decade', plural : 'decades', abbrev : 'dec' }\n        ],\n        unitAbbreviations : [\n            ['mil'],\n            ['s', 'sec'],\n            ['m', 'min'],\n            ['h', 'hr'],\n            ['d'],\n            ['w', 'wk'],\n            ['mo', 'mon', 'mnt'],\n            ['q', 'quar', 'qrt'],\n            ['y', 'yr'],\n            ['dec']\n        ],\n        parsers : {\n            L   : 'MM/DD/YYYY',\n            LT  : 'HH:mm A',\n            LTS : 'HH:mm:ss A'\n        },\n        ordinalSuffix : number => {\n            const hasSpecialCase = ['11', '12', '13'].find((n) => number.endsWith(n));\n\n            let suffix = 'th';\n\n            if (!hasSpecialCase) {\n                const lastDigit = number[number.length - 1];\n                suffix = { 1 : 'st', 2 : 'nd', 3 : 'rd' }[lastDigit] || 'th';\n            }\n\n            return number + suffix;\n        }\n    }\n};\n\nexport default LocaleHelper.publishLocale(locale);\n","import Localizable from '../localization/Localizable.js';\nimport LocaleManager from '../localization/LocaleManager.js';\nimport '../localization/En.js';\nimport StringHelper from './StringHelper.js';\nimport Objects from './util/Objects.js';\n\nconst\n    { toString }        = Object.prototype,\n    DATE_TYPE           = toString.call(new Date()),\n    tempDate            = new Date(),\n    MS_PER_HOUR         = 1000 * 60 * 60,\n    defaultValue        = (value, defValue) => isNaN(value) || value == null ? defValue : value,\n    rangeFormatPartRe   = /([ES]){([^}]+)}/g,\n    enOrdinalSuffix     = number => {\n        const hasSpecialCase = ['11', '12', '13'].find((n) => number.endsWith(n));\n\n        let suffix = 'th';\n\n        if (!hasSpecialCase) {\n            const lastDigit = number[number.length - 1];\n            suffix          = { 1 : 'st', 2 : 'nd', 3 : 'rd' }[lastDigit] || 'th';\n        }\n\n        return number + suffix;\n    },\n    useIntlFormat       = (name, options, date) => {\n        const formatter = intlFormatterCache[name] || (intlFormatterCache[name] = new Intl.DateTimeFormat(locale, options));\n        return formatter.format(date);\n    },\n    formatTime          = (name, options, date, isShort = false) => {\n        let strTime = useIntlFormat(name, options, date);\n\n        // remove '0' from time when has AM/PM (from 01:00 PM to 1:00 PM): https://github.com/bryntum/support/issues/1483\n        if (/am|pm/i.test(strTime)) {\n            // remove first character only if is 0\n            strTime = strTime.replace(/^0/, '');\n\n            // if isShort is true, remove minutes if is :00\n            if (isShort) {\n                strTime = strTime.replace(/:00/, '');\n            }\n        }\n\n        return strTime;\n    },\n    getDayDiff   = (end, start) => Math.floor((end.getTime() - start.getTime() -\n        (end.getTimezoneOffset() - start.getTimezoneOffset()) * validConversions.minute.millisecond) / validConversions.day.millisecond) + 1,\n    normalizeDay = day => day >= 0 ? day : day + 7,\n    msRegExp     = /([^\\w])(S+)/gm,\n    msReplacer   = (match, g1, g2) => g1 + 'SSS';\n\n// These vars are set when changing locale\n\nlet locale             = 'en-US',\n    ordinalSuffix      = enOrdinalSuffix,\n    // Used to cache used formats, to not have to parse format string each time\n    formatCache        = {},\n    formatRedirects    = {},\n    intlFormatterCache = {},\n    parserCache        = {};\n\nconst redirectFormat = (format) => {\n    const intlConfig = intlFormatConfigs[format];\n    if (!intlConfig) {\n        throw new Error('Only international formats should be used here');\n    }\n\n    if (formatRedirects[format] !== undefined) {\n        return formatRedirects[format];\n    }\n\n    const\n        intl = new Intl.DateTimeFormat(locale, intlConfig),\n        fmt = intl.formatToParts(new Date(2001, 1, 2, 3, 4, 5, 6)).map(part => {\n            const\n                type = part.type,\n                intlCfg = intlConfig[type];\n\n            if (type === 'literal') {\n                // here we cheat again, because our parser can not skip unknown separators\n                return part.value.replace(/,/g, '');\n            }\n            else if (type === 'day') {\n                return intlCfg === 'numeric' ? 'D' : 'DD';\n            }\n            else if (type === 'month') {\n                return intlCfg === 'short'\n                    ? 'MMM'\n                    : intlCfg === 'long'\n                        ? 'MMMM'\n                        : intlCfg === 'numeric'\n                            ? 'M'\n                            : 'MM';\n            }\n            else if (type === 'year') {\n                // here we cheat a little, using `YYYY` for numeric year in `ll`\n                // this is to simplify the fix for https://github.com/bryntum/support/issues/5179\n                // to be fixed if anyone complains\n                return intlCfg === 'numeric' ? 'YYYY' : 'YY';\n            }\n        }).join('');\n\n    return formatRedirects[format] = fmt;\n};\n\nconst\n    DEFAULT_YEAR               = 2020, // 2020 is the year that has no issues in Safari, see: https://github.com/bryntum/support/issues/554\n    DEFAULT_MONTH              = 0,\n    DEFAULT_DAY                = 1,\n    intlFormatConfigs          = {\n        l  : { year : 'numeric', month : 'numeric', day : 'numeric' },\n        ll : { year : 'numeric', month : 'short', day : 'numeric' }\n    },\n    formats                    = {\n        // 1, 2, ... 11, 12\n        M    : date => date.getMonth() + 1, //date.toLocaleDateString(locale, { month : 'numeric' }),\n        // 1st, 2nd, 3rd, 4th, ... 11th, 12th\n        Mo   : date => ordinalSuffix(formats.M(date).toString()),\n        // 01, 02, ...\n        MM   : date => (date.getMonth() + 1).toString().padStart(2, '0'), //date.toLocaleDateString(locale, { month : '2-digit' }),\n        // Jan, Feb, ...\n        MMM  : date => useIntlFormat('MMM', { month : 'short' }, date),\n        // January, February, ...\n        MMMM : date => useIntlFormat('MMMM', { month : 'long' }, date),\n\n        // 1, 2, ...\n        Q  : date => Math.ceil((date.getMonth() + 1) / 3),\n        // 1st, 2nd, ...\n        Qo : date => ordinalSuffix(formats.Q(date).toString()),\n\n        // 1, 2, ...\n        D  : date => date.getDate(), //date.toLocaleDateString(locale, { day : 'numeric' }),\n        // 1st, 2nd, ...\n        Do : date => ordinalSuffix(formats.D(date).toString()),\n        // 01, 02, ...\n        DD : date => date.getDate().toString().padStart(2, '0'), //date.toLocaleDateString(locale, { day : '2-digit' }),\n\n        // 1, 2, ..., 365, 365\n        DDD : date => Math.ceil(\n            (\n                new Date(date.getFullYear(), date.getMonth(), date.getDate(), 12, 0, 0) -\n                new Date(date.getFullYear(), 0, 0, 12, 0, 0)\n            ) / validConversions.day.millisecond),\n        // 1st, 2nd, ...\n        DDDo : date => ordinalSuffix(formats.DDD(date).toString()),\n        // 001, 002, ...\n        DDDD : date => formats.DDD(date).toString().padStart(3, '0'),\n        // 0, 1, ..., 6\n        d    : date => date.getDay(),\n        // 0th, 1st, ...\n        do   : date => ordinalSuffix(date.getDay().toString()),\n        // S, M, ...\n        d1   : date => useIntlFormat('d1', { weekday : 'narrow' }, date).substr(0, 1),\n        // Su, Mo, ...\n        dd   : date => formats.ddd(date).substring(0, 2),\n        // Sun, Mon, ...\n        ddd  : date => useIntlFormat('ddd', { weekday : 'short' }, date),\n        // Sunday, Monday, ...\n        dddd : date => useIntlFormat('dddd', { weekday : 'long' }, date),\n\n        u : date => {\n            const\n                formatter = intlFormatterCache.u || (intlFormatterCache.u = new Intl.DateTimeFormat('en-GB', {\n                    timeZone : 'UTC',\n                    year     : 'numeric',\n                    month    : '2-digit',\n                    day      : '2-digit'\n                })),\n                parts = formatter.formatToParts(date);\n\n            return `${parts[4].value}${parts[2].value}${parts[0].value}Z`;\n        },\n        uu : date => {\n            const\n                formatter = intlFormatterCache.uu || (intlFormatterCache.uu = new Intl.DateTimeFormat('en-GB', {\n                    timeZone : 'UTC',\n                    hour12   : false,\n                    year     : 'numeric',\n                    month    : '2-digit',\n                    day      : '2-digit',\n                    hour     : '2-digit',\n                    minute   : '2-digit',\n                    second   : '2-digit'\n                })),\n                parts = formatter.formatToParts(date);\n\n            return `${parts[4].value}${parts[2].value}${parts[0].value}T${parts[6].value}${parts[8].value}${parts[10].value}Z`;\n        },\n\n        e : date => date.getDay(),\n        E : date => date.getDay() + 1,\n\n        // ISO week, 1, 2, ...\n        W  : date => DateHelper.getWeekNumber(date)[1],\n        Wo : date => ordinalSuffix(formats.W(date).toString()),\n        WW : date => formats.W(date).toString().padStart(2, '0'),\n\n        // ISO week, 1, 2, ... with localized 'Week ' prefix\n        Wp   : date => `${DateHelper.localize('L{Week}')} ${formats.W(date)}`,\n        WWp  : date => `${DateHelper.localize('L{Week}')} ${formats.WW(date)}`,\n        Wp0  : date => `${DateHelper.localize('L{Week}')[0]}${formats.W(date)}`,\n        WWp0 : date => `${DateHelper.localize('L{Week}')[0]}${formats.WW(date)}`,\n\n        // 1979, 2018\n        Y    : date => date.getFullYear(), //date.toLocaleDateString(locale, { year : 'numeric' }),\n        // 79, 18\n        YY   : date => date.getFullYear() % 100, //date.toLocaleDateString(locale, { year : '2-digit' }),\n        // 1979, 2018\n        YYYY : date => date.getFullYear(), //date.toLocaleDateString(locale, { year : 'numeric' }),\n\n        // AM, PM\n        A : date => date.getHours() < 12 ? 'AM' : 'PM',\n        a : date => date.getHours() < 12 ? 'am' : 'pm',\n\n        // 0, 1, ... 23\n        H  : date => date.getHours(),\n        // 00, 01, ...\n        HH : date => date.getHours().toString().padStart(2, '0'),\n        // 1, 2, ... 12\n        h  : date => (date.getHours() % 12) || 12,\n        // 01, 02, ...\n        hh : date => formats.h(date).toString().padStart(2, '0'),\n        // 1, 2, ... 24\n        k  : date => date.getHours() || 24,\n        // 01, 02, ...\n        kk : date => formats.k(date).toString().padStart(2, '0'),\n        // Locale specific (0 -> 24 or 1 AM -> 12 PM)\n        K  : date => formatTime('K', { hour : 'numeric' }, date),\n        // Locale specific (00 -> 24 or 1 AM -> 12 PM)\n        KK : date => formatTime('KK', { hour : '2-digit' }, date),\n\n        // 0, 1, ... 59\n        m  : date => date.getMinutes(), //date.toLocaleTimeString(locale, { minute : 'numeric' }),\n        // 00, 01, ...\n        mm : date => formats.m(date).toString().padStart(2, '0'),\n\n        // 0, 1, ... 59\n        s  : date => date.getSeconds(), //date.toLocaleTimeString(locale, { second : 'numeric' }),\n        // 00, 01, ...\n        ss : date => formats.s(date).toString().padStart(2, '0'),\n\n        // 0, 1, ... 9 which are 000, 100, 200 ... 900 in milliseconds\n        S   : date => Math.floor(date.getMilliseconds() / 100).toString(),\n        // 00, 01, ... 99 which are 000, 010, 020 ... 990 in milliseconds\n        SS  : date => Math.floor(date.getMilliseconds() / 10).toString().padStart(2, '0'),\n        // 000, 001, ... 999 in milliseconds\n        SSS : date => date.getMilliseconds().toString().padStart(3, '0'),\n\n        z  : date => useIntlFormat('z', { timeZoneName : 'short' }, date),\n        zz : date => useIntlFormat('zz', { timeZoneName : 'long' }, date),\n        Z  : date => DH.getGMTOffset(date),\n\n        LT  : date => formatTime('LT', { hour : '2-digit', minute : '2-digit' }, date),\n        // if minutes is 0, doesn't show it\n        LST : date => formatTime('LST', { hour : 'numeric', minute : '2-digit' }, date, true),\n        LTS : date => formatTime('LTS', { hour : '2-digit', minute : '2-digit', second : '2-digit' }, date),\n        L   : date => useIntlFormat('L', { year : 'numeric', month : '2-digit', day : '2-digit' }, date),\n        l   : date => useIntlFormat('l', intlFormatConfigs.l, date),\n        LL  : date => useIntlFormat('LL', { year : 'numeric', month : 'long', day : 'numeric' }, date),\n        ll  : date => useIntlFormat('ll', intlFormatConfigs.ll, date),\n        LLL : date => useIntlFormat('LLL', {\n            year   : 'numeric',\n            month  : 'long',\n            day    : 'numeric',\n            hour   : 'numeric',\n            minute : '2-digit'\n        }, date),\n        lll : date => useIntlFormat('lll', {\n            year   : 'numeric',\n            month  : 'short',\n            day    : 'numeric',\n            hour   : 'numeric',\n            minute : '2-digit'\n        }, date),\n        LLLL : date => useIntlFormat('LLLL', {\n            year    : 'numeric',\n            month   : 'long',\n            day     : 'numeric',\n            hour    : 'numeric',\n            minute  : '2-digit',\n            weekday : 'long'\n        }, date),\n        llll : date => useIntlFormat('llll', {\n            year    : 'numeric',\n            month   : 'short',\n            day     : 'numeric',\n            hour    : 'numeric',\n            minute  : '2-digit',\n            weekday : 'short'\n        }, date)\n    },\n    // Want longest keys first, to not stop match at L of LTS etc.\n    formatKeys                 = Object.keys(formats).sort((a, b) => b.length - a.length),\n    formatRegexp               = `^(?:${formatKeys.join('|')})`,\n\n    // return empty object, meaning value cannot be processed to a valuable date part\n    emptyFn                    = () => ({}),\n    isNumber                   = (str) => numberRegex.test(str),\n    parseMilliseconds          = (str) => isNumber(str) && { milliseconds : parseInt(str.padEnd(3, '0').substring(0, 3)) },\n    parsers                    = {\n        YYYY : str => {\n            const year = parseInt(str);\n            return { year : year >= 1000 && year <= 9999 ? year : NaN };\n        },\n        Y  : str => ({ year : parseInt(str) }),\n        YY : str => {\n            const year = parseInt(str);\n            return { year : year + (year > 1968 ? 1900 : 2000) };\n        },\n        M   : str => ({ month : parseInt(str) - 1 }),\n        MM  : str => ({ month : parseInt(str) - 1 }),\n        Mo  : str => ({ month : parseInt(str) - 1 }),\n        MMM : str => {\n            const month = (str || '').toLowerCase();\n\n            for (const [name, entry] of Object.entries(DateHelper._monthShortNamesIndex)) {\n                if (month.startsWith(name)) {\n                    return { month : entry.value };\n                }\n            }\n        },\n        // TODO - should be same as `MMM`\n        MMMM : emptyFn,\n        DD   : str => ({ date : parseInt(str) }),\n        D    : str => ({ date : parseInt(str) }),\n        Do   : str => ({ date : parseInt(str) }),\n        DDD  : emptyFn,\n        DDDo : emptyFn,\n        DDDD : emptyFn,\n        d    : emptyFn,\n        do   : emptyFn,\n        d1   : emptyFn,\n        dd   : emptyFn,\n        ddd  : emptyFn,\n        dddd : emptyFn,\n        Q    : emptyFn,\n        Qo   : emptyFn,\n        W    : emptyFn,\n        Wo   : emptyFn,\n        WW   : emptyFn,\n        e    : emptyFn,\n        E    : emptyFn,\n        HH   : str => ({ hours : parseInt(str) }),\n        hh   : str => ({ hours : parseInt(str) }),\n        mm   : str => ({ minutes : parseInt(str) }),\n        H    : str => ({ hours : parseInt(str) }),\n        m    : str => ({ minutes : parseInt(str) }),\n        ss   : str => ({ seconds : parseInt(str) }),\n        s    : str => ({ seconds : parseInt(str) }),\n        S    : parseMilliseconds,\n        SS   : parseMilliseconds,\n        SSS  : parseMilliseconds,\n\n        A : str => ({ amPm : str.toLowerCase() }),\n        a : str => ({ amPm : str.toLowerCase() }),\n\n        L   : 'MM/DD/YYYY',\n        LT  : 'HH:mm A',\n        LTS : 'HH:mm:ss A',\n\n        l  : { type : 'dynamic', parser : () => redirectFormat('l') },\n        ll : { type : 'dynamic', parser : () => redirectFormat('ll') },\n\n        // Can either be Z (=UTC, 0) or +-HH:MM\n        Z : str => {\n            if (!str || (!timeZoneRegEx.test(str) && str !== 'Z')) {\n                return null;\n            }\n\n            let timeZone = 0;\n            // If string being parsed is more detailed than the format specified we can have more chars left,\n            // thus check the last (for example HH:mmZ with input HH:mm:ssZ -> ssZ)\n            if (str !== 'Z') {\n                const matches = timeZoneRegEx.exec(str);\n\n                // If timezone regexp matches, sting has time zone offset like '+02:00'\n                if (matches) {\n                    const\n                        sign    = matches[1] === '+' ? 1 : -1,\n                        hours   = parseInt(matches[2]) || 0,\n                        minutes = parseInt(matches[3]) || 0;\n\n                    timeZone = sign * (hours * 60 + minutes);\n                }\n                // otherwise we just return current time zone, because there's a Z key in the input\n                else {\n                    timeZone = -1 * new Date().getTimezoneOffset();\n                }\n            }\n            return { timeZone };\n        }\n    },\n    parserKeys                 = Object.keys(parsers).sort((a, b) => b.length - a.length),\n    parserRegexp               = new RegExp(`(${parserKeys.join('|')})`),\n    // Following regexp includes all formats that should be handled by Date class\n    // !!! except `l|ll`, plus made all-string capturing, otherwise the left-most `l` pattern\n    // matches all `l*` formats\n    // localeStrRegExp            = new RegExp('(l|LL|ll|LLL|lll|LLLL|llll)'),\n    localeStrRegExp            = new RegExp('^(LL|LLL|lll|LLLL|llll)$'),\n    //    ISODateRegExp             = new RegExp('YYYY-MM-DD[T ]HH:mm:ss(.s+)?Z'),\n\n    // Some validConversions are negative to show that it's not an exact conversion, just an estimate.\n    validConversions           = {\n        // The units below assume:\n        // 30 days in a month, 91 days for a quarter and 365 for a year\n        // 52 weeks per year, 4 per month, 13 per quarter\n        // 3652 days per decade (assuming two of the years will be leap with 366 days)\n        decade : {\n            decade      : 1,\n            year        : 10,\n            quarter     : 40,\n            month       : 120,\n            week        : 520,\n            day         : 3652,\n            hour        : 24 * 3652,\n            minute      : 1440 * 3652,\n            second      : 86400 * 3652,\n            millisecond : 86400000 * 3652\n        },\n        year : {\n            decade      : 0.1,\n            year        : 1,\n            quarter     : 4,\n            month       : 12,\n            week        : 52,\n            day         : 365,\n            hour        : 24 * 365,\n            minute      : 1440 * 365,\n            second      : 86400 * 365,\n            millisecond : 86400000 * 365\n        },\n        quarter : {\n            decade      : 1 / 40,\n            year        : 1 / 4,\n            quarter     : 1,\n            month       : 3,\n            week        : 4,\n            day         : 91,\n            hour        : 24 * 91,\n            minute      : 1440 * 91,\n            second      : 86400 * 91,\n            millisecond : 86400000 * 91\n        },\n        month : {\n            decade      : 1 / 120,\n            year        : 1 / 12,\n            quarter     : 1 / 3,\n            month       : 1,\n            week        : 4,\n            day         : -30,\n            hour        : -24 * 30,\n            minute      : -1440 * 30,\n            second      : -86400 * 30,\n            millisecond : -86400000 * 30\n        },\n        week : {\n            decade      : -1 / 520,\n            year        : -1 / 52,\n            quarter     : -1 / 13,\n            month       : -1 / 4,\n            day         : 7,\n            hour        : 168,\n            minute      : 10080,\n            second      : 604800,\n            millisecond : 604800000\n        },\n        day : {\n            decade      : -1 / 3652,\n            year        : -1 / 365,\n            quarter     : -1 / 91,\n            month       : -1 / 30,\n            week        : 1 / 7,\n            hour        : 24,\n            minute      : 1440,\n            second      : 86400,\n            millisecond : 86400000\n        },\n        hour : {\n            decade      : -1 / (3652 * 24),\n            year        : -1 / (365 * 24),\n            quarter     : -1 / (91 * 24),\n            month       : -1 / (30 * 24),\n            week        : 1 / 168,\n            day         : 1 / 24,\n            minute      : 60,\n            second      : 3600,\n            millisecond : 3600000\n        },\n        minute : {\n            decade      : -1 / (3652 * 1440),\n            year        : -1 / (365 * 1440),\n            quarter     : -1 / (91 * 1440),\n            month       : -1 / (30 * 1440),\n            week        : 1 / 10080,\n            day         : 1 / 1440,\n            hour        : 1 / 60,\n            second      : 60,\n            millisecond : 60000\n        },\n        second : {\n            decade      : -1 / (3652 * 86400),\n            year        : -1 / (365 * 86400),\n            quarter     : -1 / (91 * 86400),\n            month       : -1 / (30 * 86400),\n            week        : 1 / 604800,\n            day         : 1 / 86400,\n            hour        : 1 / 3600,\n            minute      : 1 / 60,\n            millisecond : 1000\n        },\n        millisecond : {\n            decade  : -1 / (3652 * 86400000),\n            year    : -1 / (365 * 86400000),\n            quarter : -1 / (91 * 86400000),\n            month   : -1 / (30 * 86400000),\n            week    : 1 / 604800000,\n            day     : 1 / 86400000,\n            hour    : 1 / 3600000,\n            minute  : 1 / 60000,\n            second  : 1 / 1000\n        }\n    },\n\n    normalizedUnits            = {\n        ms           : 'millisecond',\n        milliseconds : 'millisecond',\n        s            : 'second',\n        seconds      : 'second',\n        m            : 'minute',\n        mi           : 'minute',\n        min          : 'minute',\n        minutes      : 'minute',\n        h            : 'hour',\n        hours        : 'hour',\n        d            : 'day',\n        days         : 'day',\n        w            : 'week',\n        weeks        : 'week',\n        M            : 'month',\n        mo           : 'month',\n        mon          : 'month',\n        months       : 'month',\n        q            : 'quarter',\n        quarters     : 'quarter',\n        y            : 'year',\n        years        : 'year',\n        dec          : 'decade',\n        decades      : 'decade'\n    },\n\n    withDecimalsDurationRegex  = /^\\s*([-+]?\\d+(?:[.,]\\d*)?|[-+]?(?:[.,]\\d+))\\s*([^\\s]+)?/i,\n    noDecimalsDurationRegex    = /^\\s*([-+]?\\d+)(?![.,])\\s*([^\\s]+)?/i,\n    canonicalUnitNames         = [\n        'millisecond',\n        'second',\n        'minute',\n        'hour',\n        'day',\n        'week',\n        'month',\n        'quarter',\n        'year',\n        'decade'\n    ],\n    canonicalUnitAbbreviations = [\n        ['mil'],\n        ['s', 'sec'],\n        ['m', 'min'],\n        ['h', 'hr'],\n        ['d'],\n        ['w', 'wk'],\n        ['mo', 'mon', 'mnt'],\n        ['q', 'quar', 'qrt'],\n        ['y', 'yr'],\n        ['dec']\n    ],\n    deltaUnits                 = [\n        'decade',\n        'year',\n        'month',\n        'week',\n        'day',\n        'hour',\n        'minute',\n        'second',\n        'millisecond'\n    ],\n    // Used when creating a date from an object, to fill in any blanks\n    dateProperties             = [\n        'milliseconds',\n        'seconds',\n        'minutes',\n        'hours',\n        'date',\n        'month',\n        'year'\n    ],\n    // TODO: Should we provide special number parsing?\n    parseNumber                = (n) => {\n        const result = parseFloat(n);\n        return isNaN(result) ? null : result;\n    },\n    numberRegex                = /^[0-9]+$/,\n    timeZoneRegEx              = /([+-])(\\d\\d):*(\\d\\d)*$/,\n    unitMagnitudes             = {\n        millisecond : 0,\n        second      : 1,\n        minute      : 2,\n        hour        : 3,\n        day         : 4,\n        week        : 5,\n        month       : 6,\n        quarter     : 7,\n        year        : 8,\n        decade      : 9\n    },\n    snapFns = {\n        round(number, step = 1) {\n            return Math.round(number / step) * step;\n        },\n        floor(number, step = 1) {\n            return Math.floor(number / step) * step;\n        },\n        ceil(number, step = 1) {\n            return Math.ceil(number / step) * step;\n        }\n    },\n    keyCache = {};\n\nexport { unitMagnitudes };\n\n/**\n * @module Core/helper/DateHelper\n */\n\n/**\n * Helps with date manipulation, comparison, parsing, formatting etc.\n *\n * ## Parsing strings\n * Use `DateHelper.parse()` to parse strings into dates. It accepts a date string and a format specifier.\n * The format specifier is string built up using the following tokens:\n *\n * | Unit        | Token | Description                       |\n * |-------------|-------|-----------------------------------|\n * | Year        | YYYY  | 4-digits year, like: 2018         |\n * |             | Y     | numeric, any number of digits     |\n * |             | YY    | < 68 -> 2000, > 68 -> 1900        |\n * | Month       | MM    | 01 - 12                           |\n * | Month       | MMM   | Short name of the month           |\n * | Date        | DD    | 01 - 31                           |\n * | Hour        | HH    | 00 - 23 or 1 - 12                 |\n * | Minute      | mm    | 00 - 59                           |\n * | Second      | ss    | 00 - 59                           |\n * | Millisecond | S     | 0 - 9 [000, 100, 200 .. 900 ]     |\n * |             | SS    | 00 - 99 [000, 010, 020 .. 990 ]   |\n * |             | SSS   | 000 - 999 [000, 001, 002 .. 999 ] |\n * | AM/PM       | A     | AM or PM                          |\n * |             | a     | am or pm                          |\n * | TimeZone    | Z     | Z for UTC or +-HH:mm              |\n * | Predefined  | L     | Long date, MM/DD/YYYY             |\n * |             | LT    | Long time, HH:mm A                |\n *\n * Default parse format is: `'YYYY-MM-DDTHH:mm:ss.SSSZ'` see {@link #property-defaultParseFormat-static}\n *\n * For example:\n * ```\n * DateHelper.parse('2018-11-06', 'YYYY-MM-DD');\n * DateHelper.parse('13:14', 'HH:mm');\n * DateHelper.parse('6/11/18', 'DD/MM/YY');\n * ```\n *\n * ## Formatting dates\n * Use `DateHelper.format()` to create a string from a date using a format specifier. The format specifier is similar to\n * that used when parsing strings. It can use the following tokens (input used for output below is\n * `new Date(2018,8,9,18,7,8,145)`):\n *\n * | Unit                  | Token | Description & output                  |\n * |-----------------------|-------|---------------------------------------|\n * | Year                  | YYYY  | 2018                                  |\n * |                       | YY    | 18                                    |\n * |                       | Y     | 2018                                  |\n * | Quarter               | Q     | 3                                     |\n * |                       | Qo    | 3rd                                   |\n * | Month                 | MMMM  | September                             |\n * |                       | MMM   | Sep                                   |\n * |                       | MM    | 09                                    |\n * |                       | Mo    | 9th                                   |\n * |                       | M     | 9                                     |\n * | Week (iso)            | WW    | 37 (2 digit, zero padded)             |\n * |                       | Wo    | 37th                                  |\n * |                       | W     | 37                                    |\n * |                       | WWp   | Week 37 (localized prefix, zero pad)  |\n * |                       | Wp    | Week 37 (localized prefix)            |\n * |                       | WWp0  | W37 (localized prefix)                |\n * |                       | Wp0   | W37 (localized prefix)                |\n * | Date                  | DDDD  | Day of year, 3 digits                 |\n * |                       | DDDo  | Day of year, ordinal                  |\n * |                       | DDD   | Day of year                           |\n * |                       | DD    | 09                                    |\n * |                       | Do    | 9th                                   |\n * |                       | D     | 9                                     |\n * | Weekday               | dddd  | Sunday                                |\n * |                       | ddd   | Sun                                   |\n * |                       | dd    | Su                                    |\n * |                       | d1    | S                                     |\n * |                       | do    | 0th                                   |\n * |                       | d     | 0                                     |\n * | Hour                  | HH    | 18 (00 - 23)                          |\n * |                       | H     | 18 (0 - 23)                           |\n * |                       | hh    | 06 (00 - 12)                          |\n * |                       | h     | 6 (0 - 12)                            |\n * |                       | KK    | 19 (01 - 24)                          |\n * |                       | K     | 19 (1 - 24)                           |\n * |                       | kk    | 06 or 18, locale determines           |\n * |                       | k     | 6 or 18, locale determines            |\n * | Minute                | mm    | 07                                    |\n * |                       | m     | 7                                     |\n * | Second                | ss    | 08                                    |\n * |                       | s     | 8                                     |\n * | Millisecond           | S     | 1 (100ms)                             |\n * |                       | SS    | 14 (140ms)                            |\n * |                       | SSS   | 145 (145ms)                           |\n * | AM/PM                 | A     | AM or PM                              |\n * |                       | a     | am or pm                              |\n * | Predefined            | LT    | H: 2-digit (2d), m: 2d                |\n * | (uses browser locale) | LTS   | H: 2d, m: 2d, s : 2d                  |\n * |                       | LST   | Depends on 12 or 24 hour clock        |\n * |                       |       | 12h, H : 1d, m : 0 or 2d              |\n * |                       |       | 24h, H : 2d, m : 2d                   |\n * |                       | L     | Y: numeric (n), M : 2d, D : 2d        |\n * |                       | l     | Y: n, M : n, D : n                    |\n * |                       | LL    | Y: n, M : long (l), D : n             |\n * |                       | ll    | Y: n, M : short (s), D : n            |\n * |                       | LLL   | Y: n, M : l, D : n, H: n, m: 2d       |\n * |                       | lll   | Y: n, M : s, D : n, H: n, m: 2d       |\n * |                       | LLLL  | Y: n, M : l, D : n, H: n, m: 2d, d: l |\n * |                       | llll  | Y: n, M : s, D : n, H: n, m: 2d, d: s |\n * |                       | u     | YYYYMMDDZ in UTC zone                 |\n * |                       | uu    | YYYYMMDDTHHMMSSZ in UTC zone          |\n *\n *\n * Default format is: `'YYYY-MM-DDTHH:mm:ssZ'` see {@link #property-defaultFormat-static}\n *\n * For example:\n *\n * ```javascript\n * DateHelper.format(new Date(2018,10,6), 'YYYY-MM-DD'); // 2018-11-06\n * DateHelper.format(new Date(2018,10,6), 'M/D/YY'); // 11/6/18\n * ```\n *\n * Arbitrary text can be embedded in the format string by wrapping it with {}:\n *\n * ```javascript\n * DateHelper.format(new Date(2019, 7, 16), '{It is }dddd{, yay!}') -> It is Friday, yay!\n * ```\n *\n * ## Unit names\n * Many DateHelper functions (for example add, as, set) accepts a unit among their params. The following units are\n * available:\n *\n * | Unit        | Aliases                       |\n * |-------------|-------------------------------|\n * | millisecond | millisecond, milliseconds, ms |\n * | second      | second, seconds, s            |\n * | minute      | minute, minutes, m            |\n * | hour        | hour, hours, h                |\n * | day         | day, days, d                  |\n * | week        | week, weeks, w                |\n * | month       | month, months, mon, mo, M     |\n * | quarter     | quarter, quarters, q          |\n * | year        | year, years, y                |\n * | decade      | decade, decades, dec          |\n *\n * For example:\n * ```javascript\n * DateHelper.add(date, 2, 'days');\n * DateHelper.as('hour', 7200, 'seconds');\n * ```\n */\nexport default class DateHelper extends Localizable() {\n    static MS_PER_DAY = MS_PER_HOUR * 24;\n\n    static get $name() {\n        return 'DateHelper';\n    }\n\n    // Do not remove. Assertion strings for Localization sanity check.\n    // 'L{Object.Week}'\n\n    //region Parse & format\n    /**\n     * Get/set the default format used by `format()` and `parse()`. Defaults to `'YYYY-MM-DDTHH:mm:ssZ'`\n     * (~ISO 8601 Date and time, `'1962-06-17T09:21:34Z'`).\n     * @member {String}\n     */\n    static set defaultFormat(format) {\n        DH._defaultFormat = format;\n    }\n\n    static get defaultFormat() {\n        return DH._defaultFormat || 'YYYY-MM-DDTHH:mm:ssZ';\n    }\n\n    /**\n     * Get/set the default format used by `parse()`. Defaults to `'YYYY-MM-DDTHH:mm:ss.SSSZ'` or {@link #property-defaultFormat-static}\n     * (~ISO 8601 Date and time, `'1962-06-17T09:21:34.123Z'`).\n     * @member {String}\n     */\n    static set defaultParseFormat(parseFormat) {\n        this._defaultParseFormat = parseFormat;\n    }\n\n    static get defaultParseFormat() {\n        return this._defaultParseFormat || this._defaultFormat || 'YYYY-MM-DDTHH:mm:ss.SSSZ';\n    }\n\n    static buildParser(format) {\n        // Split input format by regexp, which includes predefined patterns. Normally format would have some\n        // splitters, like 'YYYY-MM-DD' or 'D/M YYYY' so output will contain matched patterns as well as splitters\n        // which would serve as anchors. E.g. provided format is 'D/M!YYYY' and input is `11/6!2019` algorithm would work like:\n        // 1. split format by regexp                // ['', 'D', '/', 'M', '!', 'YYYY', '']\n        // 2. find splitters                        // ['/', '!']\n        // 3. split input by seps, step by step     // ['11', ['6', ['2019']]]\n\n        // Inputs like 'YYYYY' (5*Y) means 'YYYY' + 'Y', because it matches patterns from longer to shorter,\n        // but if few patterns describe same unit the last one is applied, for example\n        // DH.parse('20182015', 'YYYYY') equals to new Date(2015, 0, 0)\n\n        const\n            parts  = format.split(parserRegexp),\n            parser = [];\n\n        // if length of the parts array is 1 - there are no regexps in the input string. thus - no parsers\n        // do same if there are patterns matching locale strings (l, ll, LLLL etc.)\n        // returning empty array to use new Date() as parser\n        if (parts.length === 1 || localeStrRegExp.test(format)) {\n            return [];\n        }\n        else {\n            parts.reduce((prev, curr, index, array) => {\n\n                // ignore first and last empty string\n                if (index !== 0 || curr !== '') {\n\n                    // if current element matches parser regexp store it as a parser\n                    if (parserRegexp.test(curr)) {\n                        const\n                            localeParsers = this.localize('L{parsers}') || {},\n                            fn            = localeParsers[curr] || parsers[curr];\n\n                        // Z should be last element in the string that matches regexp. Last array element is always either\n                        // an empty string (if format ends with Z) or splitter (everything that doesn't match regexp after Z)\n                        // If there is a pattern after Z, then Z index will be lower than length - 2\n                        if (curr === 'Z' && index < array.length - 2) {\n                            throw new Error(`Invalid format ${format} TimeZone (Z) must be last token`);\n                        }\n\n                        const parserObj = (typeof fn === 'function') || (typeof fn === 'string')\n                            ? fn\n                            : fn.parser();\n\n                        // If fn is a string, we found an alias (L, LLL, l etc.).\n                        // Need to build parsers from mapped format and merge with existing\n                        if (typeof parserObj === 'string') {\n\n                            // we are going to merge nested parsers with current, some cleanup required:\n                            // 1. last element is no longer last\n                            // 2. need to pass last parser to the next step\n                            const\n                                nestedParsers = DH.buildParser(parserObj),\n                                lastItem      = nestedParsers.pop();\n                            delete lastItem.last;\n\n                            // elevate nested parsers\n                            parser.push(...nestedParsers);\n\n                            prev = lastItem;\n                        }\n                        else {\n                            prev.pattern = curr;\n                            prev.fn = parserObj;\n                        }\n\n                    }\n                    // if it doesn't match - we've found a splitter\n                    else {\n                        prev.splitter = curr;\n                        parser.push(prev);\n                        prev = {};\n                    }\n                }\n                else if (Object.prototype.hasOwnProperty.call(prev, 'pattern')) {\n                    parser.push(prev);\n                }\n                return prev;\n            }, {});\n        }\n\n        parser[parser.length - 1].last = true;\n\n        return parser;\n    }\n\n    /**\n     * A utility function to create a sortable string key for the passed date or ms timestamp using the `'YYYY-MM-DD'`\n     * format.\n     * @param {Number|Date} ms The Date instance or ms timestamp to generate a key for\n     * @returns {String} Date/timestamp as a string with `'YYYY-M-D'` format\n     * @internal\n     */\n    static makeKey(ms) {\n        // If an ten character string passed, assume it's already a key\n        if (ms.length === 10) {\n            return ms;\n        }\n        // Convert Date to ms timestamp\n        if (ms.getTime) {\n            ms = ms.getTime();\n        }\n\n        // Cache holds ms -> YYYY-MM-DD\n        const cached = keyCache[Math.trunc(ms / MS_PER_HOUR)];\n\n        if (cached) {\n            return cached;\n        }\n\n        tempDate.setTime(ms);\n\n        const\n            month = tempDate.getMonth() + 1,\n            date  = tempDate.getDate();\n\n        // Not using DateHelper.format to save some cycles, hit a lot\n        return keyCache[Math.trunc(ms / MS_PER_HOUR)] = `${tempDate.getFullYear()}-${month < 10 ? '0' + month : month}-${date < 10 ? '0' + date : date}`;\n    }\n\n    /**\n     * A utility function to parse a sortable string to a date using the `'YYYY-MM-DD'` format.\n     * @param {String} key The string to return a date for\n     * @returns {Date} new Date instance\n     * @internal\n     */\n    static parseKey(key) {\n        return DH.parse(key, 'YYYY-MM-DD');\n    }\n\n    /**\n     * Returns a date created from the supplied string using the specified format. Will try to create even if format\n     * is left out, by first using the default format (see {@link #property-defaultFormat-static}, by default\n     * `YYYY-MM-DDTHH:mm:ssZ`) and then using `new Date(dateString)`.\n     * Supported tokens:\n     *\n     * | Unit        | Token | Description                       |\n     * |-------------|-------|-----------------------------------|\n     * | Year        | YYYY  | 2018                              |\n     * |             | YY    | < 68 -> 2000, > 68 -> 1900        |\n     * | Month       | MM    | 01 - 12                           |\n     * | Date        | DD    | 01 - 31                           |\n     * | Hour        | HH    | 00 - 23 or 1 - 12                 |\n     * | Minute      | mm    | 00 - 59                           |\n     * | Second      | ss    | 00 - 59                           |\n     * | Millisecond | S     | 0 - 9 [000, 100, 200 .. 900 ]     |\n     * |             | SS    | 00 - 99 [000, 010, 020 .. 990 ]   |\n     * |             | SSS   | 000 - 999 [000, 001, 002 .. 999 ] |\n     * | AM/PM       | A     | AM or PM                          |\n     * |             | a     | am or pm                          |\n     * | TimeZone    | Z     | Z for UTC or +-HH:mm              |\n     * | Predefined  | L     | Long date, MM/DD/YYYY             |\n     * |             | LT    | Long time, HH:mm A                |\n     *\n     * Predefined formats and functions used to parse tokens can be localized, see for example the swedish locale SvSE.js\n     *\n     * NOTE: If no date parameters are provided then `Jan 01 2020` is used as a default date\n     *\n     * @param {String} dateString Date string\n     * @param {String} [format] Date format (or {@link #property-defaultParseFormat-static} if left out)\n     * @returns {Date} new Date instance parsed from the string\n     * @category Parse & format\n     */\n    static parse(dateString, format = DH.defaultParseFormat, strict = false) {\n        if (dateString instanceof Date) {\n            return dateString;\n        }\n\n        if (typeof dateString !== 'string' || !dateString) {\n            return null;\n        }\n\n        // // For ISO 8601 native is faster, but not very forgiving\n        // if (format === defaultFormat) {\n        //     const dt = new Date(dateString);\n        //     if (!isNaN(dt)) {\n        //         return dt;\n        //     }\n        // }\n\n        const config = {\n            year         : null,\n            month        : null,\n            date         : null,\n            hours        : null,\n            minutes      : null,\n            seconds      : null,\n            milliseconds : null\n        };\n\n        // Milliseconds parser is the same for S, SS, SSS\n        // We search for a string of 'S' characters *not* preceded by an alpha character.\n        // So that the formats such as 'LTS' do not get corrupted\n        format = format.replace(msRegExp, msReplacer);\n\n        let\n            parser = parserCache[format],\n            result;\n\n        if (!parser) {\n            parser = parserCache[format] = DH.buildParser(format);\n        }\n\n        // Since Unicode 15 standard arrived to browsers (Chrome 110+ and FF 109+) they add unicode \"thin\" space before AM/PM\n        // https://icu.unicode.org/download/72\n        // Convert unicode spaces to regular for parser\n        if (dateString.includes('\\u202f')) {\n            dateString = dateString.replace(/\\s/g, ' ');\n        }\n\n        // Each parser knows its pattern and splitter. It looks for splitter in the\n        // input string, takes first substring and tries to process it. Remaining string\n        // is passed to the next parser.\n        parser.reduce((dateString, parser) => {\n            if (parser.last) {\n                Object.assign(config, parser.fn(dateString));\n            }\n            else {\n                let splitAt;\n\n                // ISO 8601 says that T symbol can be replaced with a space\n                if (parser.splitter === 'T' && dateString.indexOf('T') === -1) {\n                    splitAt = dateString.indexOf(' ');\n                }\n                else {\n                    // If splitter specified find its position, otherwise try to determine pattern length\n                    splitAt = parser.splitter !== '' ? dateString.indexOf(parser.splitter) : parser.pattern && parser.pattern.length || -1;\n                }\n\n                let part, rest;\n\n                // If splitter is not found in the current string we may be dealing with\n                // 1. partial input - in that case we just feed all string to current parser and move on\n                // 2. time zone (ssZ - splitter is empty string) and pattern is not specified, see comment below\n                // 3. parse milliseconds before Z\n                if (splitAt === -1 || ((parser.pattern === 'SSS') && dateString.match(/^\\d+Z$/))) {\n                    // NOTE: parentheses are required here as + and - signs hold valuable information\n                    // with parentheses we get array like ['00','+','01:00'], omitting them we won't get\n                    // regexp match in result, loosing information\n                    const chunks = dateString.split(/([Z\\-+])/);\n\n                    // If splitter is not found in the string, we may be dealing with string that contains info about TZ.\n                    // For instance, if format contains Z as last arg which is not separated (normally it is not indeed),\n                    // like 'YYYY-MM-DD HH:mm:ssZ', then second to last parser will have string that it cannot just parse, like\n                    // '2010-01-01 10:00:00'        -> '00'\n                    // '2010-01-01 10:00:00Z'       -> '00Z'\n                    // '2010-01-01 10:00:00-01'     -> '00-01'\n                    // '2010-01-01 10:00:00+01:30'  -> '00+01:30'\n                    // this cannot be processed by date parsers, so we need to process that additionally. So we\n                    // split string by symbols that can be found around timezone info: Z,-,+\n                    if (chunks.length === 1) {\n                        part = dateString;\n                        rest = '';\n                    }\n                    else {\n                        part = chunks[0];\n                        rest = `${chunks[1]}${chunks[2]}`;\n                    }\n                }\n                else {\n                    part = dateString.substring(0, splitAt) || dateString;\n                    rest = dateString.substring(splitAt + parser.splitter.length);\n                }\n\n                if (parser.fn) {\n                    // Run parser and add result to config on successful parse otherwise continue parsing\n                    const\n                        res = parser.fn(part);\n                    if (res) {\n                        Object.assign(config, res);\n                    }\n                    else {\n                        rest = part + rest;\n                    }\n                }\n\n                return rest;\n            }\n        }, dateString);\n\n        // If year is specified date has to be greater than 0\n        if (config.year && !config.date) {\n            config.date = 1;\n        }\n\n        const date = DH.create(config, strict);\n\n        if (date) {\n            result = date;\n        }\n        else if (!strict) {\n            // Last resort, try if native passing can do it\n            result = new Date(dateString);\n        }\n\n        return result;\n    }\n\n    /**\n     * Creates a date from a date definition object. The object can have the following properties:\n     * - year\n     * - month\n     * - date (day in month)\n     * - hours\n     * - minutes\n     * - seconds\n     * - milliseconds\n     * - amPm : 'am' or 'pm', implies 12-hour clock\n     * - timeZone : offset from UTC in minutes\n     * @param {Object} definition\n     * @param {Number} definition.year\n     * @param {Number} [definition.month]\n     * @param {Number} [definition.date]\n     * @param {Number} [definition.hours]\n     * @param {Number} [definition.minutes]\n     * @param {Number} [definition.seconds]\n     * @param {Number} [definition.milliseconds]\n     * @param {Number} [definition.amPm]\n     * @param {Number} [definition.timeZone]\n     * @returns {Date} new Date instance\n     * @category Parse & format\n     */\n    static create(definition, strict = false) {\n        // Shallow clone to not alter input\n        const def = { ...definition };\n\n        let invalid = isNaN(def.year),\n            useUTC  = false;\n\n        // Not much validation yet, only considered invalid if all properties are null\n        if (!invalid) {\n            let allNull = true;\n\n            dateProperties.forEach(property => {\n                if (!(property in def) || isNaN(def[property])) {\n                    def[property] = 0;\n                }\n                allNull = allNull && def[property] === null;\n            });\n\n            invalid = allNull;\n        }\n\n        if (def.amPm === 'am') {\n            def.hours = def.hours % 12;\n        }\n        else if (def.amPm === 'pm') {\n            def.hours = (def.hours % 12) + 12;\n        }\n\n        if ('timeZone' in def) {\n            useUTC = true;\n\n            def.minutes -= def.timeZone;\n        }\n\n        if (invalid) {\n            return null;\n        }\n\n        if (strict && (def.year == null || def.month == null || def.date == null)) {\n            return null;\n        }\n\n        const\n            args = [\n                defaultValue(def.year, DEFAULT_YEAR),\n                defaultValue(def.month, DEFAULT_MONTH),\n                defaultValue(def.date, DEFAULT_DAY),\n                def.hours,\n                def.minutes,\n                def.seconds,\n                def.milliseconds\n            ];\n\n        return useUTC ? new Date(Date.UTC(...args)) : new Date(...args);\n    }\n\n    static toUTC(date) {\n        return new Date(Date.UTC(\n            date.getUTCFullYear(),\n            date.getUTCMonth(),\n            date.getUTCDate(),\n            date.getUTCHours(),\n            date.getUTCMinutes(),\n            date.getUTCSeconds(),\n            date.getUTCMilliseconds()\n        ));\n    }\n\n    /**\n     * Converts a date to string with the specified format. Formats heavily inspired by https://momentjs.com.\n     * Available formats (input used for output below is `new Date(2018,8,9,18,7,8,145)`):\n     *\n     * | Unit                  | Token | Description & output                  |\n     * |-----------------------|-------|---------------------------------------|\n     * | Year                  | YYYY  | 2018                                  |\n     * |                       | YY    | 18                                    |\n     * |                       | Y     | 2018                                  |\n     * | Quarter               | Q     | 3                                     |\n     * |                       | Qo    | 3rd                                   |\n     * | Month                 | MMMM  | September                             |\n     * |                       | MMM   | Sep                                   |\n     * |                       | MM    | 09                                    |\n     * |                       | Mo    | 9th                                   |\n     * |                       | M     | 9                                     |\n     * | Week (iso)            | WW    | 37 (2 digit, zero padded)             |\n     * |                       | Wo    | 37th                                  |\n     * |                       | W     | 37                                    |\n     * |                       | WWp   | Week 37 (localized prefix, zero pad)  |\n     * |                       | Wp    | Week 37 (localized prefix)            |\n     * |                       | WWp0  | W37 (localized prefix)                |\n     * |                       | Wp0   | W37 (localized prefix)                |\n     * | Date                  | DDDD  | Day of year, 3 digits                 |\n     * |                       | DDDo  | Day of year, ordinal                  |\n     * |                       | DDD   | Day of year                           |\n     * |                       | DD    | 09                                    |\n     * |                       | Do    | 9th                                   |\n     * |                       | D     | 9                                     |\n     * | Weekday               | dddd  | Sunday                                |\n     * |                       | ddd   | Sun                                   |\n     * |                       | dd    | Su                                    |\n     * |                       | d1    | S                                     |\n     * |                       | do    | 0th                                   |\n     * |                       | d     | 0                                     |\n     * | Hour                  | HH    | 18 (00 - 23)                          |\n     * |                       | H     | 18 (0 - 23)                           |\n     * |                       | hh    | 06 (00 - 12)                          |\n     * |                       | h     | 6 (0 - 12)                            |\n     * |                       | KK    | 19 (01 - 24)                          |\n     * |                       | K     | 19 (1 - 24)                           |\n     * |                       | kk    | 06 or 18, locale determines           |\n     * |                       | k     | 6 or 18, locale determines            |\n     * | Minute                | mm    | 07                                    |\n     * |                       | m     | 7                                     |\n     * | Second                | ss    | 08                                    |\n     * |                       | s     | 8                                     |\n     * | Millisecond           | S     | 1 (100ms)                             |\n     * |                       | SS    | 14 (140ms)                            |\n     * |                       | SSS   | 145 (145ms)                           |\n     * | AM/PM                 | A     | AM or PM                              |\n     * |                       | a     | am or pm                              |\n     * | Predefined            | LT    | H: 2-digit (2d), m: 2d                |\n     * | (uses browser locale) | LTS   | H: 2d, m: 2d, s : 2d                  |\n     * |                       | LST   | Depends on 12 or 24 hour clock        |\n     * |                       |       | 12h, H : 1d, m : 0 or 2d              |\n     * |                       |       | 24h, H : 2d, m : 2d                   |\n     * |                       | L     | Y: numeric (n), M : 2d, D : 2d        |\n     * |                       | l     | Y: n, M : n, D : n                    |\n     * |                       | LL    | Y: n, M : long (l), D : n             |\n     * |                       | ll    | Y: n, M : short (s), D : n            |\n     * |                       | LLL   | Y: n, M : l, D : n, H: n, m: 2d       |\n     * |                       | lll   | Y: n, M : s, D : n, H: n, m: 2d       |\n     * |                       | LLLL  | Y: n, M : l, D : n, H: n, m: 2d, d: l |\n     * |                       | llll  | Y: n, M : s, D : n, H: n, m: 2d, d: s |\n     *\n     * Some examples:\n     *\n     * ```javascript\n     * DateHelper.format(new Date(2019, 7, 16), 'dddd') -> Friday\n     * DateHelper.format(new Date(2019, 7, 16, 14, 27), 'HH:mm') --> 14:27\n     * DateHelper.format(new Date(2019, 7, 16, 14, 27), 'L HH') --> 2019-07-16 14\n     * ```\n     *\n     * Arbitrary text can be embedded in the format string by wrapping it with {}:\n     *\n     * ```javascript\n     * DateHelper.format(new Date(2019, 7, 16), '{It is }dddd{, yay!}') -> It is Friday, yay!\n     * ```\n     *\n     * @param {Date} date Date\n     * @param {String} [format] Desired format (uses `defaultFormat` if left out)\n     * @returns {String} Formatted string\n     * @category Parse & format\n     */\n    static format(date, format = DH.defaultFormat) {\n        // Bail out if no date or invalid date\n        if (!date || isNaN(date)) {\n            return null;\n        }\n\n        let formatter = formatCache[format],\n            output    = '';\n\n        if (!formatter) {\n            formatter = formatCache[format] = [];\n\n            // Build formatter array with the steps needed to format the date\n            for (let i = 0; i < format.length; i++) {\n                // Matches a predefined format?\n                const\n                    formatMatch = format.slice(i).match(formatRegexp),\n                    predefined  = formatMatch?.[0];\n\n                if (predefined) {\n                    const\n                        localeFormats = this.localize('L{formats}') || {},\n                        fn            = localeFormats[predefined] || formats[predefined];\n                    formatter.push(fn);\n                    i += predefined.length - 1;\n                }\n                // Start of text block? Append it\n                else if (format[i] === '{') {\n                    // Find closing brace\n                    const index = format.indexOf('}', i + 1);\n\n                    // No closing brace, grab rest of string\n                    if (index === -1) {\n                        formatter.push(format.substr(i + 1));\n                        i = format.length;\n                    }\n                    // Closing brace found\n                    else {\n                        formatter.push(format.substring(i + 1, index));\n                        // Carry on after closing brace\n                        i = index;\n                    }\n                }\n                // Otherwise append to output (for example - / : etc)\n                else {\n                    formatter.push(format[i]);\n                }\n            }\n        }\n\n        formatter.forEach(step => {\n            if (typeof step === 'string') {\n                output += step;\n            }\n            else {\n                output += step(date);\n            }\n        });\n\n        return output;\n    }\n\n    /**\n     * Formats a range of `dates` using the specified `format`. Because two dates are involved, the `format` specifier\n     * uses the tokens `S{}` and `E{}`. The text contained between the `{}` is the {@link #function-format-static format}\n     * for the start date or end date, respectively. Text not inside these tokens is retained verbatim.\n     *\n     * For example:\n     *\n     * ```javascript\n     *  DateHelper.formatRange(dates, 'S{DD MMM YYYY} - E{DD MMM YYYY}');\n     * ```\n     *\n     * The above will format `dates[0]` based on the `S{DD MMM YYYY}` segment and `dates[1] using `E{DD MMM YYYY}`. The\n     * `' - '` between these will remain between the two formatted dates.\n     *\n     * @param {Date[]} dates An array of start date and end date (`[startDate, endDate]`)\n     * @param {String} format The format specifier\n     * @returns {String}\n     */\n    static formatRange(dates, format) {\n        return format.replace(rangeFormatPartRe,\n            (s, which, fmt) => DateHelper.format(dates[(which === 'S') ? 0 : 1], fmt));\n    }\n\n    /**\n     * Converts the specified amount of desired unit into milliseconds. Can be called by only specifying a unit as the\n     * first argument, it then uses `amount = 1`.\n     *\n     * For example:\n     *\n     * ```javascript\n     * asMilliseconds('hour') == asMilliseconds(1, 'hour')\n     * ```\n     *\n     * @param {Number|String} amount Amount, what of is decided by specifying unit (also takes a unit which implies an amount of 1)\n     * @param {String} [unit] Time unit (s, hour, months etc.)\n     * @returns {Number}\n     * @category Parse & format\n     */\n    static asMilliseconds(amount, unit = null) {\n        if (typeof amount === 'string') {\n            unit = amount;\n            amount = 1;\n        }\n\n        return DH.as('millisecond', amount, unit);\n    }\n\n    /**\n     * Converts the passed Date to an accurate number of months passed since the epoch start.\n     * @param {Date} time The Date to find the month value of\n     * @returns {Number} The number of months since the system time epoch start. May be a fractional value\n     */\n    static asMonths(time) {\n        const\n            monthLength = DH.as('ms', DH.daysInMonth(time), 'day'),\n            fraction = (time.valueOf() - DH.startOf(time, 'month').valueOf()) / monthLength;\n\n        return time.getYear() * 12 + time.getMonth() + fraction;\n\n    }\n\n    static monthsToDate(months) {\n        const\n            intMonths = Math.floor(months),\n            fraction = months - intMonths,\n            result = new Date(0, intMonths),\n            msInMonth = DH.as('ms', DH.daysInMonth(result), 'days');\n\n        result.setTime(result.getTime() + fraction * msInMonth);\n        return result;\n    }\n\n    /**\n     * Converts a millisecond time delta to a human-readable form. For example `1000 * 60 * 60 * 50`\n     * milliseconds would be rendered as `'2 days, 2 hours'`.\n     * @param {Number} delta The millisecond delta value\n     * @param {Object} [options] Formatting options\n     * @param {Boolean} [options.abbrev] Pass `true` to use abbreviated unit names, eg `'2d, 2h'` for the above example\n     * @param {String} [options.precision] The minimum precision unit\n     * @param {String} [options.separator] The separator to use\n     * @param {Boolean} [options.asString] Pass `false` to return the result as an array, eg ['2d', '2h'] for the above example\n     * @returns {String} Formatted string\n     * @category Parse & format\n     */\n    static formatDelta(delta, options) {\n        let abbrev, unitName;\n\n        if (typeof options === 'boolean') {\n            abbrev = options;\n        }\n        else if (options) {\n            abbrev    = options.abbrev;\n        }\n\n        const\n            deltaObj = this.getDelta(delta, options),\n            result   = [],\n            sep      = options?.separator || (abbrev ? '' : ' ');\n\n        for (unitName in deltaObj) {\n            result.push(`${deltaObj[unitName]}${sep}${unitName}`);\n        }\n\n        return options?.asString === false ? result : result.join(', ');\n    }\n\n    /**\n     * Converts a millisecond time delta to an object structure. For example `1000 * 60 * 60 * 50`\n     * milliseconds the result would be as:\n     *\n     * ```javascript\n     * {\n     *     day  : 2,\n     *     hour : 2\n     * }\n     *```\n     *\n     * @param {Number} delta The millisecond delta value\n     * @param {Object} [options] Formatting options\n     * @param {Boolean} [options.abbrev] Pass `true` to use abbreviated unit names, eg `{ d: 2, h: 2 }` for the above example\n     * @param {String} [options.precision] The minimum precision unit\n     * @param {Boolean} [options.ignoreLocale] Pass true to return unlocalized unit name. Requires `abbrev` to be false\n     * @param {String} [options.maxUnit] Name of the maximum unit in the output. e.g. if you pass `day` then you'll get\n     * `{ h: 25 }` instead of `{ d: 1, h: 1 }`\n     * @returns {Object} The object with the values for each unit\n     */\n    static getDelta(delta, options) {\n        let abbrev, d, done, precision, unitName, maxUnit, ignoreLocale;\n\n        if (typeof options === 'boolean') {\n            abbrev = options;\n        }\n        else if (options) {\n            abbrev = options.abbrev;\n            precision = DH.normalizeUnit(options.precision);\n            maxUnit = options.maxUnit;\n            ignoreLocale = !abbrev && options.ignoreLocale;\n        }\n\n        const\n            result  = {},\n            getUnit = abbrev ? DH.getShortNameOfUnit : DH.getLocalizedNameOfUnit;\n\n        const units = maxUnit ? deltaUnits.slice(deltaUnits.indexOf(maxUnit)) : deltaUnits;\n\n        // Loop downwards through the magnitude of units from year -> ms\n        for (unitName of units) {\n            d = DH.as(unitName, delta);\n\n            done = precision === unitName;\n            d = Math[done ? 'round' : 'floor'](d);\n\n            // If there's a non-zero integer quantity of this unit, add it to result\n            // and subtract from the delta, then go round to next unit down.\n            if (d || (done && !result.length)) {\n                result[ignoreLocale ? unitName : getUnit.call(DH, unitName, d !== 1)] = d; // TODO 0 is plural in EN but...?\n                delta -= DH.as('ms', d, unitName);\n            }\n\n            if (done || !delta) {\n                break;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Converts the specified amount of one unit (`fromUnit`) into an amount of another unit (`toUnit`).\n     * @param {String} toUnit The name of units to convert to, eg: `'ms'`\n     * @param {Number|String} amount The time to convert. Either the magnitude number form or a duration string such as '2d'\n     * @param {String} [fromUnit='ms'] If the amount was passed as a number, the units to use to convert from\n     * @returns {Number}\n     * @category Parse & format\n     */\n    static as(toUnit, amount, fromUnit = 'ms') {\n        // Allow DH.as('ms', '2d')\n        if (typeof amount === 'string') {\n            amount = DH.parseDuration(amount);\n        }\n        // Allow DH.as('ms', myDurationObject)\n        if (typeof amount === 'object') {\n            fromUnit = amount.unit;\n            amount = amount.magnitude;\n        }\n\n        if (toUnit === fromUnit) {\n            return amount;\n        }\n\n        toUnit = DH.normalizeUnit(toUnit);\n        fromUnit = DH.normalizeUnit(fromUnit);\n\n        if (toUnit === fromUnit) {\n            return amount;\n        }\n        // validConversions[][] can be negative to signal that conversion is not exact, ignore sign here\n        else if (unitMagnitudes[fromUnit] > unitMagnitudes[toUnit]) {\n            return amount * Math.abs(validConversions[fromUnit][toUnit]);\n        }\n        else {\n            return amount / Math.abs(validConversions[toUnit][fromUnit]);\n        }\n    }\n\n    static formatContainsHourInfo(format) {\n        const\n            stripEscapeRe = /(\\\\.)/g,\n            hourInfoRe    = /([HhKkmSsAa]|LT|L{3,}|l{3,})/;\n\n        return hourInfoRe.test(format.replace(stripEscapeRe, ''));\n    }\n\n    /**\n     * Returns `true` for 24-hour format.\n     * @param {String} format Date format\n     * @returns {Boolean} `true` for 24-hour format\n     * @category Parse & format\n     */\n    static is24HourFormat(format) {\n        return DH.format(DH.getTime(13, 0, 0), format).includes('13');\n    }\n\n    //endregion\n\n    //region Manipulate\n\n    /**\n     * Add days, hours etc. to a date. Always clones the date, original will be left unaffected.\n     * @param {Date|String} date Original date\n     * @param {Number|String|Core.data.Duration|DurationConfig} amount Amount of days, hours etc. or a string representation of a duration\n     * as accepted by {@link #function-parseDuration-static} or an object with `{ magnitude, unit }` properties\n     * @param {String} [unit='ms'] Unit for amount\n     * @privateparam {Boolean} [clone=true] Pass `false` to affect the original\n     * @returns {Date} New calculated date\n     * @category Manipulate\n     */\n    static add(date, amount, unit = 'ms', clone = true) {\n        let d;\n\n        if (typeof date === 'string') {\n            d = DH.parse(date);\n        }\n        else if (clone) {\n            d = new Date(date.getTime());\n        }\n        else {\n            d = date;\n        }\n\n        if (typeof amount === 'string') {\n            const duration = DateHelper.parseDuration(amount);\n            amount = duration.magnitude;\n            unit   = duration.unit;\n        }\n        else if (amount && typeof amount === 'object') {\n            unit = amount.unit;\n            amount = amount.magnitude;\n        }\n\n        if (!unit || amount === 0) {\n            return d;\n        }\n\n        unit = DH.normalizeUnit(unit);\n\n        switch (unit) {\n            case 'millisecond':\n                d.setTime(d.getTime() + amount);\n                break;\n            case 'second':\n                d.setTime(d.getTime() + (amount * 1000));\n                break;\n            case 'minute':\n                d.setTime(d.getTime() + (amount * 60000));\n                break;\n            case 'hour':\n                d.setTime(d.getTime() + (amount * 3600000));\n                break;\n            case 'day':\n                // Integer value added, do calendar calculation to correctly handle DST etc.\n                if (amount % 1 === 0) {\n                    d.setDate(d.getDate() + amount);\n\n                    // When crossing DST in Brazil, we expect hours to end up the same\n                    if (d.getHours() === 23 && date.getHours() === 0) {\n                        d.setHours(d.getHours() + 1);\n                    }\n                }\n                // No browsers support fractional values for dates any longer, do time based calculation\n                else {\n                    d.setTime(d.getTime() + (amount * 86400000));\n                }\n                break;\n            case 'week':\n                d.setDate(d.getDate() + amount * 7);\n                break;\n            case 'month': {\n                let day = d.getDate();\n                if (day > 28) {\n                    day = Math.min(day, DH.getLastDateOfMonth(DH.add(DH.getFirstDateOfMonth(d), amount, 'month')).getDate());\n                }\n                d.setDate(day);\n                d.setMonth(d.getMonth() + amount);\n                break;\n            }\n            case 'quarter':\n                DH.add(d, amount * 3, 'month', false);\n                break;\n            case 'year':\n                d.setFullYear(d.getFullYear() + amount);\n                break;\n            case 'decade':\n                d.setFullYear(d.getFullYear() + amount * 10);\n                break;\n        }\n        return d;\n    }\n\n    /**\n     * Calculates the difference between two dates, in the specified unit.\n     * @param {Date} start First date\n     * @param {Date} end Second date\n     * @param {String} [unit='ms'] Unit to calculate difference in\n     * @param {Boolean} [fractional=true] Specify false to round result\n     * @returns {Number} Difference in the specified unit\n     * @category Manipulate\n     */\n    static diff(start, end, unit = 'ms', fractional = true) {\n        unit = DH.normalizeUnit(unit);\n\n        if (!start || !end) return 0;\n\n        let amount;\n\n        switch (unit) {\n            case 'year':\n                amount = DH.diff(start, end, 'month') / 12;\n                break;\n\n            case 'quarter':\n                amount = DH.diff(start, end, 'month') / 3;\n                break;\n\n            case 'month':\n                amount = ((end.getFullYear() - start.getFullYear()) * 12) + (end.getMonth() - start.getMonth());\n                break;\n\n            case 'week':\n                amount = DH.diff(start, end, 'day') / 7;\n                break;\n\n            case 'day': {\n                const dstDiff = start.getTimezoneOffset() - end.getTimezoneOffset();\n                amount = (end - start + dstDiff * 60 * 1000) / 86400000;\n                break;\n            }\n\n            case 'hour':\n                amount = (end - start) / 3600000;\n                break;\n\n            case 'minute':\n                amount = (end - start) / 60000;\n                break;\n\n            case 'second':\n                amount = (end - start) / 1000;\n                break;\n\n            case 'millisecond':\n                amount = (end - start);\n                break;\n        }\n\n        return fractional ? amount : Math.round(amount);\n    }\n\n    /**\n     * Sets the date to the start of the specified unit, by default returning a clone of the date instead of changing it\n     * in place.\n     * @param {Date} date Original date\n     * @param {String} [unit='day'] Start of this unit, `'day'`, `'month'` etc\n     * @param {Boolean} [clone=true] Manipulate a copy of the date\n     * @param {Number} [weekStartDay] The first day of week, `0-6` (Sunday-Saturday). Defaults to the {@link #property-weekStartDay-static}\n     * @returns {Date} Manipulated date\n     * @category Manipulate\n     */\n    static startOf(date, unit = 'day', clone = true, weekStartDay = DH.weekStartDay) {\n        if (!date) {\n            return null;\n        }\n\n        unit = DH.normalizeUnit(unit);\n\n        if (clone) {\n            date = DH.clone(date);\n        }\n\n        switch (unit) {\n            case 'year':\n                date.setMonth(0, 1);\n                date.setHours(0, 0, 0, 0);\n                return date;\n            case 'quarter':\n                date.setMonth((DH.get(date, 'quarter') - 1) * 3, 1);\n                date.setHours(0, 0, 0, 0);\n                return date;\n            case 'month':\n                date.setDate(1);\n                date.setHours(0, 0, 0, 0);\n                return date;\n            case 'week': {\n                const delta = date.getDay() - weekStartDay;\n                date.setDate(date.getDate() - delta);\n                date.setHours(0, 0, 0, 0);\n                return date;\n            }\n            case 'day':\n                date.setHours(0, 0, 0, 0);\n                return date;\n\n            // Cant use setMinutes(0, 0, 0) etc for DST transitions\n            case 'hour':\n                date.getMinutes() > 0 && date.setMinutes(0);\n            // eslint-disable-next-line no-fallthrough\n            case 'minute':\n                date.getSeconds() > 0 && date.setSeconds(0);\n            // eslint-disable-next-line no-fallthrough\n            case 'second':\n                date.getMilliseconds() > 0 && date.setMilliseconds(0);\n            // eslint-disable-next-line no-fallthrough\n            case 'millisecond':\n                return date;\n        }\n    }\n\n    /**\n     * Returns the end point of the passed date, that is 00:00:00 of the day after the passed date.\n     * @param {Date} date The date to return the end point of\n     */\n    static endOf(date) {\n        return new Date(date.getFullYear(), date.getMonth(), date.getDate() + 1);\n    }\n\n    /**\n     * Creates a clone of the specified date\n     * @param {Date} date Original date\n     * @returns {Date} Cloned date\n     * @category Manipulate\n     */\n    static clone(date) {\n        return new Date(date.getTime());\n    }\n\n    /**\n     * Removes time from a date (same as calling {@link #function-startOf-static startOf(date)}).\n     * @param {Date} date Date to remove time from\n     * @param {Boolean} [clone=true] Manipulate a copy of the date\n     * @returns {Date} Manipulated date\n     * @category Manipulate\n     */\n    static clearTime(date, clone = true) {\n        if (!date) {\n            return null;\n        }\n\n        if (clone) {\n            date = new Date(date.getTime());\n        }\n\n        date.setHours(0, 0, 0, 0);\n\n        return date;\n    }\n\n    static midnight(date, inclusive) {\n        let ret = DH.clearTime(date);\n\n        if (inclusive && ret < date) {\n            ret = DH.add(ret, 1, 'd');\n        }\n\n        return ret;\n    }\n\n    /**\n     * Returns the elapsed milliseconds from the start of the specified date.\n     * @param {Date} date Date to remove date from\n     * @param {String} [unit='ms'] The time unit to return\n     * @returns {Number} The elapsed milliseconds from the start of the specified date\n     * @category Manipulate\n     */\n    static getTimeOfDay(date, unit = 'ms') {\n        const t = (date.getHours() * validConversions.hour.millisecond) +\n            (date.getMinutes() * validConversions.minute.millisecond) +\n            (date.getSeconds() * validConversions.second.millisecond) +\n            date.getMilliseconds();\n\n        return (unit === 'ms') ? t : DH.as(unit, t, 'ms');\n    }\n\n    /**\n     * Sets a part of a date (in place).\n     * @param {Date} date Date to manipulate\n     * @param {String|Object} unit Part of date to set, for example `'minute'`. Or an object like `{ second: 1, minute: 1 }`\n     * @param {Number} amount Value to set\n     * @returns {Date} Passed date instance modified according to the arguments\n     * @category Manipulate\n     */\n    static set(date, unit, amount) {\n        if (!unit) {\n            return date;\n        }\n\n        if (typeof unit === 'string') {\n            switch (DH.normalizeUnit(unit)) {\n                case 'millisecond':\n                    // Setting value to 0 when it is 0 at DST crossing messes it up\n                    if (amount !== 0 || date.getMilliseconds() > 0) {\n                        date.setMilliseconds(amount);\n                    }\n                    break;\n                case 'second':\n                    // Setting value to 0 when it is 0 at DST crossing messes it up\n                    if (amount !== 0 || date.getSeconds() > 0) {\n                        date.setSeconds(amount);\n                    }\n                    break;\n                case 'minute':\n                    // Setting value to 0 when it is 0 at DST crossing messes it up\n                    if (amount !== 0 || date.getMinutes() > 0) {\n                        date.setMinutes(amount);\n                    }\n                    break;\n                case 'hour':\n                    date.setHours(amount);\n                    break;\n                case 'day':\n                case 'date':\n                    date.setDate(amount);\n                    break;\n                case 'week':\n                    throw new Error('week not implemented');\n                case 'month':\n                    date.setMonth(amount);\n                    break;\n                case 'quarter':\n                    // Setting quarter = first day of first month of that quarter\n                    date.setDate(1);\n                    date.setMonth((amount - 1) * 3);\n                    break;\n                case 'year':\n                    date.setFullYear(amount);\n                    break;\n            }\n        }\n        else {\n            Object.entries(unit)\n                // Make sure smallest unit goes first, to not change month before changing day\n                .sort((a, b) => unitMagnitudes[a[0]] - unitMagnitudes[b[0]])\n                .forEach(([unit, amount]) => {\n                    DH.set(date, unit, amount);\n                });\n        }\n\n        return date;\n    }\n\n    static setDateToMidday(date, clone = true) {\n        return DH.set(DH.clearTime(date, clone), 'hour', 12);\n    }\n\n    /**\n     * Constrains the date within a min and a max date.\n     * @param {Date} date The date to constrain\n     * @param {Date} [min] Min date\n     * @param {Date} [max] Max date\n     * @returns {Date} The constrained date\n     * @category Manipulate\n     */\n    static constrain(date, min, max) {\n        if (min != null) {\n            date = DH.max(date, min);\n        }\n        return max == null ? date : DH.min(date, max);\n    }\n\n    /**\n     * Returns time with default year, month, and day (Jan 1, 2020).\n     * @param {Number|Date} hours Hours value or the full date to extract the time of\n     * @param {Number} [minutes=0] Minutes value\n     * @param {Number} [seconds=0] Seconds value\n     * @param {Number} [ms=0] Milliseconds value\n     * @returns {Date} A new default date with the time extracted from the given date or from the time values provided individually\n     * @category Manipulate\n     */\n    static getTime(hours, minutes = 0, seconds = 0, ms = 0) {\n        if (hours instanceof Date) {\n            ms = hours.getMilliseconds();\n            seconds = hours.getSeconds();\n            minutes = hours.getMinutes();\n            hours = hours.getHours();\n        }\n        return new Date(DEFAULT_YEAR, DEFAULT_MONTH, DEFAULT_DAY, hours, minutes, seconds, ms);\n    }\n\n    /**\n     * Copies hours, minutes, seconds, milliseconds from one date to another.\n     *\n     * @param {Date} targetDate The target date\n     * @param {Date} sourceDate The source date\n     * @returns {Date} The adjusted target date\n     * @category Manipulate\n     * @static\n     */\n    static copyTimeValues(targetDate, sourceDate) {\n        targetDate.setHours(sourceDate.getHours());\n        targetDate.setMinutes(sourceDate.getMinutes());\n        targetDate.setSeconds(sourceDate.getSeconds());\n        targetDate.setMilliseconds(sourceDate.getMilliseconds());\n        return targetDate;\n    }\n\n    //endregion\n\n    //region Comparison\n\n    static get isDSTEnabled() {\n        const\n            year = new Date().getFullYear(),\n            jan  = new Date(year, 0, 1),\n            jul  = new Date(year, 6, 1);\n        return jan.getTimezoneOffset() !== jul.getTimezoneOffset();\n    }\n\n    static isDST(date) {\n        const\n            year = date.getFullYear(),\n            jan  = new Date(year, 0, 1),\n            jul  = new Date(year, 6, 1);\n        return date.getTimezoneOffset() < Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());\n    }\n\n    /**\n     * Determines if a date precedes another.\n     * @param {Date} first First date\n     * @param {Date} second Second date\n     * @returns {Boolean} `true` if first precedes second, otherwise false\n     * @category Comparison\n     */\n    static isBefore(first, second) {\n        return first < second;\n    }\n\n    /**\n     * Determines if a date succeeds another.\n     * @param {Date} first First date\n     * @param {Date} second Second date\n     * @returns {Boolean} `true` if first succeeds second, otherwise false\n     * @category Comparison\n     */\n    static isAfter(first, second) {\n        return first > second;\n    }\n\n    /**\n     * Checks if two dates are equal.\n     * @param {Date} first First date\n     * @param {Date} second Second date\n     * @param {String} [unit] Unit to calculate difference in. If not given, the comparison will be done up to a millisecond\n     * @returns {Boolean} `true` if the dates are equal\n     * @category Comparison\n     */\n    static isEqual(first, second, unit = null) {\n        if (unit === null) {\n            // https://jsbench.me/3jk2bom2r3/1\n            // https://jsbench.me/ltkb3vk0ji/1 (more flavors) - getTime is >2x faster vs valueOf/Number/op+\n            return first && second && first.getTime() === second.getTime();\n        }\n\n        return DH.startOf(first, unit) - DH.startOf(second, unit) === 0;\n    }\n\n    /**\n     * Compares two dates using the specified precision.\n     * @param {Date} first First date\n     * @param {Date} second Second date\n     * @param {String} [unit] Unit to calculate difference in. If not given, the comparison will be done up to a millisecond\n     * @returns {Number} `0` = equal, `-1` = first before second, `1` = first after second\n     * @category Comparison\n     */\n    static compare(first, second, unit = null) {\n        // Unit specified, cut the rest out\n        if (unit) {\n            first = DH.startOf(first, unit);\n            second = DH.startOf(second, unit);\n        }\n\n        // Comparison on ms level\n        if (first < second) return -1;\n        if (first > second) return 1;\n        return 0;\n    }\n\n    /**\n     * Coerces the passed Date between the passed minimum and maximum values.\n     * @param {Date} date The date to clamp between the `min` and `max`\n     * @param {Date} min The minimum Date\n     * @param {Date} max The maximum Date\n     * @returns {Date} If the passed `date` is valid, a *new* Date object which is clamped between the `min` and `max`\n     */\n    static clamp(date, min, max) {\n        if (!isNaN(date)) {\n            if (min != null) {\n                date = Math.max(date, min);\n            }\n            if (max != null) {\n                date = Math.min(date, max);\n            }\n            return new Date(date);\n        }\n    }\n\n    static isSameDate(first, second) {\n        return DH.compare(first, second, 'd') === 0;\n    }\n\n    static isSameTime(first, second) {\n        return first.getHours() === second.getHours() &&\n            first.getMinutes() === second.getMinutes() &&\n            first.getSeconds() === second.getSeconds() &&\n            first.getMilliseconds() === second.getMilliseconds();\n    }\n\n    /**\n     * Checks if date is the start of specified unit.\n     * @param {Date} date Date\n     * @param {String} unit Time unit\n     * @returns {Boolean} `true` if date is the start of specified unit\n     * @category Comparison\n     */\n    static isStartOf(date, unit) {\n        return DH.isEqual(date, DH.startOf(date, unit));\n    }\n\n    /**\n     * Checks if this date is `>= start` and `< end`.\n     * @param {Date} date The source date\n     * @param {Date} start Start date\n     * @param {Date} end End date\n     * @returns {Boolean} `true` if this date falls on or between the given start and end dates\n     * @category Comparison\n     */\n    static betweenLesser(date, start, end) {\n        //return start <= date && date < end;\n        return start.getTime() <= date.getTime() && date.getTime() < end.getTime();\n    }\n\n    /**\n     * Checks if this date is `>= start` and `<= end`.\n     * @param {Date} date The source date\n     * @param {Date} start Start date\n     * @param {Date} end End date\n     * @returns {Boolean} `true` if this date falls on or between the given start and end dates\n     * @category Comparison\n     */\n    static betweenLesserEqual(date, start, end) {\n        return start.getTime() <= date.getTime() && date.getTime() <= end.getTime();\n    }\n\n    /**\n     * Returns `true` if dates intersect.\n     * @param {Date} date1Start Start date of first span\n     * @param {Date} date1End End date of first span\n     * @param {Date} date2Start Start date of second span\n     * @param {Date} date2End End date of second span\n     * @returns {Boolean} Returns `true` if dates intersect\n     * @category Comparison\n     */\n    static intersectSpans(date1Start, date1End, date2Start, date2End) {\n        return DH.betweenLesser(date1Start, date2Start, date2End) ||\n            DH.betweenLesser(date2Start, date1Start, date1End);\n    }\n\n    /**\n     * Compare two units. Returns `1` if first param is a greater unit than second param, `-1` if the opposite is true or `0` if they're equal.\n     * @param {String} unit1 The 1st unit\n     * @param {String} unit2 The 2nd unit\n     * @returns {Number} Returns `1` if first param is a greater unit than second param, `-1` if the opposite is true or `0` if they're equal\n     * @category Comparison\n     */\n    static compareUnits(unit1, unit2) {\n        return Math.sign(unitMagnitudes[DH.normalizeUnit(unit1)] - unitMagnitudes[DH.normalizeUnit(unit2)]);\n    }\n\n    /**\n     * Returns `true` if the first time span completely 'covers' the second time span.\n     *\n     * @example\n     * DateHelper.timeSpanContains(\n     *     new Date(2010, 1, 2),\n     *     new Date(2010, 1, 5),\n     *     new Date(2010, 1, 3),\n     *     new Date(2010, 1, 4)\n     * ) ==> true\n     * DateHelper.timeSpanContains(\n     *   new Date(2010, 1, 2),\n     *   new Date(2010, 1, 5),\n     *   new Date(2010, 1, 3),\n     *   new Date(2010, 1, 6)\n     * ) ==> false\n     *\n     * @param {Date} spanStart The start date for initial time span\n     * @param {Date} spanEnd The end date for initial time span\n     * @param {Date} otherSpanStart The start date for the 2nd time span\n     * @param {Date} otherSpanEnd The end date for the 2nd time span\n     * @returns {Boolean} `true` if the first time span completely 'covers' the second time span\n     * @category Comparison\n     */\n    static timeSpanContains(spanStart, spanEnd, otherSpanStart, otherSpanEnd) {\n        return (otherSpanStart - spanStart) >= 0 && (spanEnd - otherSpanEnd) >= 0;\n    }\n\n    //endregion\n\n    //region Query\n\n    /**\n     * Get the first day of week, 0-6 (Sunday-Saturday).\n     * This is determined by the current locale's `DateHelper.weekStartDay` parameter.\n     * @property {Number}\n     * @readonly\n     */\n    static get weekStartDay() {\n        // Cache is reset in applyLocale\n        if (DH._weekStartDay == null) {\n            // Defaults to 0, should not need to happen in real world scenarios when a locale is always loaded\n            DH._weekStartDay = this.localize('L{weekStartDay}') || 0;\n        }\n\n        return DH._weekStartDay;\n    }\n\n    /**\n     * Get non-working days as an object where keys are day indices, 0-6 (Sunday-Saturday), and the value is `true`.\n     * This is determined by the current locale's `DateHelper.nonWorkingDays` parameter.\n     *\n     * For example:\n     * ```javascript\n     * {\n     *     0 : true, // Sunday\n     *     6 : true  // Saturday\n     * }\n     * ```\n     *\n     * @property {Object<Number,Boolean>}\n     * @readonly\n     */\n    static get nonWorkingDays() {\n        return { ...this.localize('L{nonWorkingDays}') };\n    }\n\n    /**\n     * Get non-working days as an array of day indices, 0-6 (Sunday-Saturday).\n     * This is determined by the current locale's `DateHelper.nonWorkingDays` parameter.\n     *\n     * For example:\n     *\n     * ```javascript\n     * [ 0, 6 ] // Sunday & Saturday\n     * ```\n     *\n     * @property {Number[]}\n     * @readonly\n     * @internal\n     */\n    static get nonWorkingDaysAsArray() {\n        // transform string keys to integers\n        return Object.keys(this.nonWorkingDays).map(Number);\n    }\n\n    /**\n     * Get weekend days as an object where keys are day indices, 0-6 (Sunday-Saturday), and the value is `true`.\n     * Weekends are days which are declared as weekend days by the selected country and defined by the current locale's\n     * `DateHelper.weekends` parameter.\n     * To get non-working days see {@link #property-nonWorkingDays-static}.\n     *\n     * For example:\n     * ```javascript\n     * {\n     *     0 : true, // Sunday\n     *     6 : true  // Saturday\n     * }\n     * ```\n     * @property {Object<Number,Boolean>}\n     * @readonly\n     * @internal\n     */\n    static get weekends() {\n        return { ...this.localize('L{weekends}') };\n    }\n\n    /**\n     * Get the specified part of a date.\n     * @param {Date} date\n     * @param {String} unit Part of date, hour, minute etc.\n     * @returns {Number} The requested part of the specified date\n     * @category Query\n     */\n    static get(date, unit) {\n        switch (DH.normalizeUnit(unit)) {\n            case 'millisecond':\n                return date.getMilliseconds();\n            case 'second':\n                return date.getSeconds();\n            case 'minute':\n                return date.getMinutes();\n            case 'hour':\n                return date.getHours();\n            case 'date':\n            case 'day': // Scheduler has a lot of calculations expecting this to work\n                return date.getDate();\n            case 'week':\n                return formats.W(date);\n            case 'month':\n                return date.getMonth();\n            case 'quarter':\n                return Math.floor(date.getMonth() / 3) + 1;\n            case 'year':\n                return date.getFullYear();\n        }\n\n        return null;\n    }\n\n    /**\n     * Get number of days in the current year for the supplied date.\n     * @param {Date} date Date to check\n     * @returns {Number} Days in year\n     * @category Query\n     * @internal\n     */\n    static daysInYear(date) {\n        const\n            fullYear = date.getFullYear(),\n            duration = new Date(fullYear + 1, 0, 1) - new Date(fullYear, 0, 1);\n\n        return this.as('day', duration);\n    }\n\n    /**\n     * Get number of days in the current month for the supplied date.\n     * @param {Date} date Date which month should be checked\n     * @returns {Number} Days in month\n     * @category Query\n     */\n    static daysInMonth(date) {\n        return 32 - new Date(date.getFullYear(), date.getMonth(), 32).getDate();\n    }\n\n    /**\n     * Get number of hours in the current day for the supplied date.\n     * @param {Date} date Date to check\n     * @returns {Number} Hours in day\n     * @category Query\n     * @internal\n     */\n    static hoursInDay(date) {\n        const\n            fullYear = date.getFullYear(),\n            month    = date.getMonth(),\n            day      = date.getDate(),\n            duration = new Date(fullYear, month, day + 1) - new Date(fullYear, month, day);\n\n        return this.as('hour', duration);\n    }\n\n    /**\n     * Converts unit related to the date to actual amount of milliseconds in it. Takes into account leap years and\n     * different duration of months.\n     * @param {Date} date Date\n     * @param {String} unit Time unit\n     * @returns {Number} Returns amount of milliseconds\n     * @internal\n     */\n    static getNormalizedUnitDuration(date, unit) {\n        let result;\n\n        switch (unit) {\n            case 'month':\n                result = DH.asMilliseconds(DH.daysInMonth(date), 'day');\n                break;\n            case 'year':\n                result = DH.asMilliseconds(DH.daysInYear(date), 'day');\n                break;\n            case 'day':\n                result = DH.asMilliseconds(DH.hoursInDay(date), 'hour');\n                break;\n            default:\n                result = DH.asMilliseconds(unit);\n        }\n\n        return result;\n    }\n\n    /**\n     * Get the first date of the month for the supplied date.\n     * @param {Date} date Date\n     * @returns {Date} New Date instance\n     * @category Query\n     */\n    static getFirstDateOfMonth(date) {\n        return new Date(date.getFullYear(), date.getMonth(), 1);\n    }\n\n    /**\n     * Get the last date of the month for the supplied date.\n     * @param {Date} date Date\n     * @returns {Date} New Date instance\n     * @category Query\n     */\n    static getLastDateOfMonth(date) {\n        return new Date(date.getFullYear(), date.getMonth() + 1, 0);\n    }\n\n    /**\n     * Get the earliest of two dates.\n     * @param {Date} first First date\n     * @param {Date} second Second date\n     * @returns {Date} Earliest date\n     * @category Query\n     */\n    static min(first, second) {\n        return first.getTime() < second.getTime() ? first : second;\n    }\n\n    /**\n     * Get the latest of two dates.\n     * @param {Date} first First date\n     * @param {Date} second Second date\n     * @returns {Date} Latest date\n     * @category Query\n     */\n    static max(first, second) {\n        return first.getTime() > second.getTime() ? first : second;\n    }\n\n    /**\n     * Get an incremented date. Incrementation based on specified unit and optional amount.\n     * @param {Date} date Date\n     * @param {String} unit Time unit\n     * @param {Number} [increment=1] Increment amount\n     * @param {Number} [weekStartDay] Will default to what is set in locale\n     * @returns {Date} New Date instance\n     * @category Query\n     */\n    static getNext(date, unit, increment = 1, weekStartDay = DH.weekStartDay) {\n        if (unit === 'week') {\n            const\n                dt  = DH.clone(date),\n                day = dt.getDay();\n\n            DH.startOf(dt, 'day', false);\n            DH.add(dt, weekStartDay - day + 7 * (increment - (weekStartDay <= day ? 0 : 1)), 'day', false);\n\n            // For south american timezones, midnight does not exist on DST transitions, adjust...\n            if (dt.getDay() !== weekStartDay) {\n                DH.add(dt, 1, 'hour');\n            }\n\n            return dt;\n        }\n\n        return DH.startOf(DH.add(date, increment, unit), unit, false);\n    }\n\n    /**\n     * Checks if date object is valid.\n     *\n     * For example:\n     *\n     * ```javascript\n     * date = new Date('foo')\n     * date instanceof Date // true\n     * date.toString() // Invalid Date\n     * isNaN(date) // true\n     * DateHelper.isValidDate(date) // false\n     *\n     * date = new Date()\n     * date instanceof Date // true\n     * date.toString() // Mon Jan 13 2020 18:27:38 GMT+0300 (GMT+03:00)\n     * isNaN(date) // false\n     * DateHelper.isValidDate(date) // true\n     * ```\n     *\n     * @param {Date} date Date\n     * @returns {Boolean} `true` if date object is valid\n     */\n    static isValidDate(date) {\n        return DH.isDate(date) && !isNaN(date);\n    }\n\n    /**\n     * Checks if value is a date object. Allows to recognize date object even from another context,\n     * like the top frame when used in an iframe.\n     *\n     * @param {*} value Value to check\n     * @returns {Boolean} `true` if value is a date object\n     */\n    static isDate(value) {\n        // see https://jsbench.me/s7kb49w83j/1 (cannot use instanceof cross-frame):\n        return value && toString.call(value) === DATE_TYPE;\n    }\n\n    /**\n     * Get the start of the next day.\n     * @param {Date} date Date\n     * @param {Boolean} [clone=false] Clone date\n     * @param {Boolean} [noNeedToClearTime=false] Flag to not clear time from the result\n     * @returns {Date} Passed Date or new Date instance, depending on the `clone` flag\n     * @category Query\n     */\n    static getStartOfNextDay(date, clone = false, noNeedToClearTime = false) {\n        let nextDay = DH.add(noNeedToClearTime ? date : DH.clearTime(date, clone), 1, 'day');\n\n        // DST case\n        if (nextDay.getDate() === date.getDate()) {\n            const\n                offsetNextDay = DH.add(DH.clearTime(date, clone), 2, 'day').getTimezoneOffset(),\n                offsetDate    = date.getTimezoneOffset();\n\n            nextDay = DH.add(nextDay, offsetDate - offsetNextDay, 'minute');\n        }\n\n        return nextDay;\n    }\n\n    /**\n     * Get the end of previous day.\n     * @param {Date} date Date\n     * @param {Boolean} [noNeedToClearTime=false] Flag to not clear time from the result\n     * @returns {Date} New Date instance\n     * @category Query\n     */\n    static getEndOfPreviousDay(date, noNeedToClearTime = false) {\n        const dateOnly = noNeedToClearTime ? date : DH.clearTime(date, true);\n\n        // dates are different\n        if (dateOnly - date) {\n            return dateOnly;\n        }\n        else {\n            return DH.add(dateOnly, -1, 'day');\n        }\n    }\n\n    /**\n     * Returns a string describing the specified week. For example, `'39, September 2020'` or `'40, Sep - Oct 2020'`.\n     * @param {Date} startDate Start date\n     * @param {Date} [endDate] End date\n     * @returns {String} String describing the specified week\n     * @internal\n     */\n    static getWeekDescription(startDate, endDate = startDate) {\n        const\n            monthDesc  = startDate.getMonth() === endDate.getMonth()\n                ? DateHelper.format(startDate, 'MMMM')\n                : `${DateHelper.format(startDate, 'MMM')} - ${DateHelper.format(endDate, 'MMM')}`,\n            week = DateHelper.getWeekNumber(startDate);\n\n        return `${week[1]}, ${monthDesc} ${week[0]}`;\n    }\n\n    /**\n     * Get week number for the date.\n     * @param {Date} date The date\n     * @param {Number} [weekStartDay] The first day of week, 0-6 (Sunday-Saturday). Defaults to the {@link #property-weekStartDay-static}\n     * @returns {Number[]} year and week number\n     * @category Query\n     */\n    static getWeekNumber(date, weekStartDay = DateHelper.weekStartDay) {\n        const\n            jan01     = new Date(date.getFullYear(), 0, 1),\n            dec31     = new Date(date.getFullYear(), 11, 31),\n            firstDay  = normalizeDay(jan01.getDay() - weekStartDay),\n            lastDay   = normalizeDay(dec31.getDay() - weekStartDay),\n            dayNumber = getDayDiff(date, jan01);\n\n        let weekNumber;\n\n        // Check if the year starts before the middle of a week\n        if (firstDay < 4) {\n            weekNumber = Math.floor((dayNumber + firstDay - 1) / 7) + 1;\n        }\n        else {\n            weekNumber = Math.floor((dayNumber + firstDay - 1) / 7);\n        }\n\n        if (weekNumber) {\n            let year = date.getFullYear();\n\n            // Might be week 1 of next year if the year ends before day 3 (0 based)\n            if (weekNumber === 53 && lastDay < 3) {\n                year++;\n                weekNumber = 1;\n            }\n            return [year, weekNumber];\n        }\n\n        // We're in week zero which is the last week of the previous year, so ask what\n        // week encapsulates 31 Dec in the previous year.\n        const lastWeekOfLastYear = DateHelper.getWeekNumber(new Date(date.getFullYear() - 1, 11, 31))[1];\n\n        return [date.getFullYear() - 1, lastWeekOfLastYear];\n    }\n\n    //endregion\n\n    //region Unit helpers\n\n    /**\n     * Turns `(10, 'day')` into `'10 days'` etc.\n     * @param {Number} count Amount of unit\n     * @param {String} unit Unit, will be normalized (days, d -> day etc.)\n     * @returns {String} Amount formatted to string\n     * @category Unit helpers\n     */\n    static formatCount(count, unit) {\n        unit = DH.normalizeUnit(unit);\n        if (count !== 1) unit += 's';\n        return count + ' ' + unit;\n    }\n\n    /**\n     * Get the ratio between two units ( year, month -> 1/12 ).\n     * @param {String} baseUnit Base time unit\n     * @param {String} unit Time unit\n     * @param {Boolean} [acceptEstimate=false] If `true`, process negative values of validConversions\n     * @returns {Number} Ratio\n     * @category Unit helpers\n     */\n    static getUnitToBaseUnitRatio(baseUnit, unit, acceptEstimate = false) {\n        baseUnit = DH.normalizeUnit(baseUnit);\n        unit = DH.normalizeUnit(unit);\n\n        if (baseUnit === unit) return 1;\n\n        // Some validConversions have negative sign to signal that it is not an exact conversion.\n        // Ignore those here unless acceptEstimate is provided.\n        if (validConversions[baseUnit] && validConversions[baseUnit][unit] && (acceptEstimate || validConversions[baseUnit][unit] > 0)) {\n            return 1 / DH.as(unit, 1, baseUnit);\n        }\n\n        if (validConversions[unit] && validConversions[unit][baseUnit] && (acceptEstimate || validConversions[unit][baseUnit] > 0)) {\n            return DH.as(baseUnit, 1, unit);\n        }\n\n        return -1;\n    }\n\n    /**\n     * Returns a localized abbreviated form of the name of the duration unit.\n     * For example in the `EN` locale, for `'qrt'` it will return `'q'`.\n     * @param {String} unit Duration unit\n     * @returns {String} Localized abbreviated form of the name of the duration unit\n     * @category Unit helpers\n     */\n    static getShortNameOfUnit(unit) {\n        // Convert abbreviations to the canonical name.\n        // See locale file and the applyLocale method below.\n        unit = DH.parseTimeUnit(unit);\n\n        // unitLookup is keyed by eg 'DAY', 'day', 'MILLISECOND', 'millisecond' etc\n        return DH.unitLookup[unit].abbrev;\n    }\n\n    /**\n     * Returns a localized full name of the duration unit.\n     *\n     * For example in the `EN` locale, for `'d'` it will return either\n     * `'day'` or `'days'`, depending on the `plural` argument\n     *\n     * Preserves casing of first letter.\n     *\n     * @static\n     * @param {String} unit Time unit\n     * @param {Boolean} [plural=false] Whether to return a plural name or singular\n     * @returns {String} Localized full name of the duration unit\n     * @category Unit helpers\n     */\n    static getLocalizedNameOfUnit(unit, plural = false) {\n        const capitalize = unit.charAt(0) === unit.charAt(0).toUpperCase();\n\n        // Normalize to not have to have translations for each variation used in code\n        unit = DH.normalizeUnit(unit);\n\n        // Convert abbreviations to the canonical name.\n        // See locale file and the applyLocale method below.\n        unit = DH.parseTimeUnit(unit);\n\n        // Translate\n        // unitLookup is keyed by eg 'DAY', 'day', 'MILLISECOND', 'millisecond' etc\n        unit = DH.unitLookup[unit][plural ? 'plural' : 'single'];\n\n        // Preserve casing of first letter\n        if (capitalize) {\n            unit = StringHelper.capitalize(unit);\n        }\n\n        return unit;\n    }\n\n    /**\n     * Normalizes a unit for easier usage in conditionals. For example `'year'`, `'years'`, `'y'` -> `'year'`.\n     * @param {String} unit Time unit\n     * @returns {String} Normalized unit name\n     * @category Unit helpers\n     */\n    static normalizeUnit(unit) {\n        if (!unit) {\n            return null;\n        }\n\n        const unitLower = unit.toLowerCase();\n\n        if (unitLower === 'date') {\n            return unitLower;\n        }\n\n        return canonicalUnitNames.includes(unitLower)\n            // Already valid\n            ? unitLower\n            // Trying specified case first, since we have both 'M' for month and 'm' for minute\n            : normalizedUnits[unit] || normalizedUnits[unitLower];\n    }\n\n    static getUnitByName(name) {\n        // Allow either a canonical name to be passed, or, if that fails, parse it as a localized name or abbreviation.\n        return DH.normalizeUnit(name) || DH.normalizeUnit(DH.parseTimeUnit(name));\n    }\n\n    /**\n     * Returns a duration of the timeframe in the given unit.\n     * @param {Date} start The start date of the timeframe\n     * @param {Date} end The end date of the timeframe\n     * @param {String} unit Duration unit\n     * @privateparam {Boolean} [doNotRound]\n     * @returns {Number} The duration in the units\n     * @category Unit helpers\n     * @ignore\n     */\n    static getDurationInUnit(start, end, unit, doNotRound) {\n        return DH.diff(start, end, unit, doNotRound);\n    }\n\n    /**\n     * Checks if two date units align.\n     * @private\n     * @param {String} majorUnit Major time unit\n     * @param {String} minorUnit Minor time unit\n     * @returns {Boolean} `true` if two date units align\n     * @category Unit helpers\n     */\n    static doesUnitsAlign(majorUnit, minorUnit) {\n        // TODO: probably needs some fleshing out to be generally useful, otherwise move to TimeAxisViewModel?\n        // Maybe also use getUnitToBaseUnitRatio() for assertion?\n        return !(majorUnit !== minorUnit && minorUnit === 'week');\n    }\n\n    static getSmallerUnit(unit) {\n        return canonicalUnitNames[unitMagnitudes[DH.normalizeUnit(unit)] - 1] || null;\n    }\n\n    static getLargerUnit(unit) {\n        return canonicalUnitNames[unitMagnitudes[DH.normalizeUnit(unit)] + 1] || null;\n    }\n\n    /**\n     *\n     * Rounds the passed Date value to the nearest `increment` value.\n     *\n     * Optionally may round relative to a certain base time point.\n     *\n     * For example `DH.round(new Date('2020-01-01T09:35'), '30 min', new Date('2020-01-01T09:15'))`\n     * would round to 9:45 because that's the nearest integer number of 30 minute increments\n     * from the base.\n     *\n     * Note that `base` is ignored when rounding to weeks. The configured {@link #property-weekStartDay-static}\n     * dictates what the base of a week is.\n     *\n     * @param {Date} time The time to round\n     * @param {String|Number} increment A millisecond value by which to round the time\n     * May be specified in string form eg: `'15 minutes'`\n     * @param {Date} [base] The start from which to apply the rounding\n     * @param {Number} [weekStartDay] Will default to what is set in locale\n     * @returns {Date} New Date instance\n     */\n    static round(time, increment, base, weekStartDay) {\n        return DH.snap('round', time, increment, base, weekStartDay);\n    }\n\n    /**\n     *\n     * Floor the passed Date value to the nearest `increment` value.\n     *\n     * Optionally may floor relative to a certain base time point.\n     *\n     * For example `DH.floor(new Date('2020-01-01T09:35'), '30 min', new Date('2020-01-01T09:15'))`\n     * would floor to 9:15 because that's the closest lower integer number of 30 minute increments\n     * from the base.\n     *\n     * Note that `base` is ignored when flooring to weeks. The configured {@link #property-weekStartDay-static}\n     * dictates what the base of a week is.\n     *\n     * @param {Date} time The time to floor\n     * @param {String|Number|DurationConfig|Object} increment A numeric millisecond value by which to floor the time.\n     * or a duration in string form eg `'30 min'` or object form : `{unit: 'minute', magnitude: 30}`\n     * or `{unit: 'minute', increment: 30}`\n     * @param {Date} [base] The start from which to apply the flooring\n     * @param {Number} [weekStartDay] Will default to what is set in locale\n     * @returns {Date} New Date instance\n     */\n    static floor(time, increment, base, weekStartDay) {\n        return DH.snap('floor', time, increment, base, weekStartDay);\n    }\n\n    /**\n     *\n     * Ceils the passed Date value to the nearest `increment` value.\n     *\n     * Optionally may ceil relative to a certain base time point.\n     *\n     * For example `DH.ceil(new Date('2020-01-01T09:35'), '30 min', new Date('2020-01-01T09:15'))`\n     * would ceil to 9:45 because that's the closest higher integer number of 30 minute increments\n     * from the base.\n     *\n     * Note that `base` is ignored when ceiling to weeks. Use weekStartDay argument which default to the configured\n     * {@link #property-weekStartDay-static} dictates what the base of a week is\n     *\n     * @param {Date} time The time to ceil\n     * @param {String|Number|DurationConfig|Object} increment A numeric millisecond value by which to ceil the time\n     * or a duration in string form eg `'30 min'` or object form : `{unit: 'minute', magnitude: 30}`\n     * or `{unit: 'minute', increment: 30}`\n     * @param {Date} [base] The start from which to apply the ceiling\n     * @param {Number} [weekStartDay] Will default to what is set in locale\n     * @returns {Date} New Date instance\n     */\n    static ceil(time, increment, base, weekStartDay) {\n        return DH.snap('ceil', time, increment, base, weekStartDay);\n    }\n\n    /**\n     * Implementation for round, floor and ceil.\n     * @internal\n     */\n    static snap(operation, time, increment, base, weekStartDay = DH.weekStartDay) {\n        const snapFn = snapFns[operation];\n\n        if (typeof increment === 'string') {\n            increment = DH.parseDuration(increment);\n        }\n        if (Objects.isObject(increment)) {\n            // Allow {unit: 'minute', increment: 30} or {unit: 'minute', magnitude: 30}\n            // parseDuration produces 'magnitude'. The Scheduler's TimeAxis uses 'increment'\n            // in its resolution object, so we allow that too.\n            const magnitude = increment.magnitude || increment.increment;\n\n            // increment is in weeks, months, quarters or years, then it can't be handled\n            // using millisecond arithmetic.\n            switch (increment.unit) {\n                case 'week':\n                {\n                    const weekDay = time.getDay();\n\n                    // weekStartDay gives our base\n                    // Our base is the start of the week\n                    base = DH.add(\n                        DH.clearTime(time),\n                        weekDay >= weekStartDay ? weekStartDay - weekDay : -(weekDay - weekStartDay + 7),\n                        'day'\n                    );\n\n                    return DH[operation](time, `${magnitude * 7} days`, base);\n                }\n                case 'month':\n                {\n                    // Express the time as a number of months from epoch start.\n                    // May be a fraction, eg the 15th will be 0.5 through a month.\n                    time = DH.asMonths(time);\n\n                    let resultMonths;\n\n                    // Snap the month count in the way requested\n                    if (base) {\n                        base = DH.asMonths(base);\n\n                        resultMonths = time + snapFn(time - base, magnitude);\n                    }\n                    else {\n                        resultMonths = snapFn(time, magnitude);\n                    }\n\n                    // Convert resulting month value back to a date\n                    return DH.monthsToDate(resultMonths);\n                }\n                case 'quarter':\n                    return DH[operation](time, `${magnitude * 3} months`, base);\n                case 'year':\n                    return DH[operation](time, `${magnitude * 12} months`, base);\n                case 'decade':\n                    // We assume that decades begin with a year divisible by 10\n                    return DH[operation](time, `${magnitude * 10} years`, base);\n            }\n\n            // Convert to a millisecond value\n            increment = DH.as('ms', magnitude, increment.unit);\n        }\n\n        // It's a simple round to milliseconds\n        if (base) {\n            const tzChange = DH.as('ms', base.getTimezoneOffset() - time.getTimezoneOffset(), 'ms');\n\n            return new Date(base.valueOf() + snapFn(DH.diff(base, time, 'ms') + tzChange, increment));\n        }\n        else {\n            const offset = time.getTimezoneOffset() * 60 * 1000;\n\n            // Assuming current TZ is GMT+3\n            // new Date(2000, 0, 1) / 86400000      -> 10956.875\n            // new Date(2000, 0, 1, 3) / 86400000   -> 10957\n            // Before calculation we need to align time value of the current timezone to GMT+0\n            // And after calculate we need to adjust time back\n            return new Date(snapFn(time.valueOf() - offset, increment) + offset);\n        }\n    }\n\n    //endregion\n\n    //region Date picker format\n\n    /**\n     * Parses a typed duration value according to locale rules.\n     *\n     * The value is taken to be a string consisting of the numeric magnitude and the units:\n     * - The numeric magnitude can be either an integer or a float value. Both `','` and `'.'` are valid decimal separators.\n     * - The units may be a recognised unit abbreviation of this locale or the full local unit name.\n     *\n     * For example:\n     * `'2d'`, `'2 d'`, `'2 day'`, `'2 days'` will be turned into `{ magnitude : 2, unit : 'day' }`\n     * `'2.5d'`, `'2,5 d'`, `'2.5 day'`, `'2,5 days'` will be turned into `{ magnitude : 2.5, unit : 'day' }`\n     *\n     * **NOTE:** Doesn't work with complex values like `'2 days, 2 hours'`\n     *\n     * @param {String} value The value to parse\n     * @param {Boolean} [allowDecimals=true] Decimals are allowed in the magnitude\n     * @param {String} [defaultUnit] Default unit to use if only magnitude passed\n     * @returns {DurationConfig} If successfully parsed, the result contains two properties, `magnitude` being a number, and\n     * `unit` being the canonical unit name, *NOT* a localized name. If parsing was unsuccessful, `null` is returned\n     * @category Parse & format\n     */\n    static parseDuration(value, allowDecimals = true, defaultUnit) {\n        const\n            durationRegEx = allowDecimals ? withDecimalsDurationRegex : noDecimalsDurationRegex,\n            match         = durationRegEx.exec(value);\n\n        if (value == null || !match) {\n            return null;\n        }\n\n        const\n            magnitude = parseNumber(match[1]?.replace(',', '.')),\n            unit      = DH.parseTimeUnit(match[2]) || defaultUnit;\n\n        if (!unit) {\n            return null;\n        }\n\n        return {\n            magnitude,\n            unit\n        };\n    }\n\n    /**\n     * Parses a typed unit name, for example `'ms'` or `'hr'` or `'yr'` into the\n     * canonical form of the unit name which may be passed to {@link #function-add-static}\n     * or {@link #function-diff-static}.\n     * @param {*} unitName Time unit name\n     * @category Parse & format\n     */\n    static parseTimeUnit(unitName) {\n        // NOTE: In case you get a crash here when running tests, it is caused by missing locale. Build locales\n        // using `scripts/build.js locales` to resolve.\n        const unitMatch = unitName == null ? null : DH.durationRegEx.exec(unitName.toLowerCase());\n\n        if (!unitMatch) {\n            return null;\n        }\n\n        // See which group in the unitAbbrRegEx matched match[2]\n        for (let unitOrdinal = 0; unitOrdinal < canonicalUnitNames.length; unitOrdinal++) {\n            if (unitMatch[unitOrdinal + 1]) {\n                return canonicalUnitNames[unitOrdinal];\n            }\n        }\n    }\n\n    //endregion\n\n    //region Internal\n\n    static getGMTOffset(date = new Date()) {\n        if (!date) {\n            return;\n        }\n\n        const offsetInMinutes = date.getTimezoneOffset();\n\n        // return 'Z' for UTC\n        if (!offsetInMinutes) return 'Z';\n\n        return (offsetInMinutes > 0 ? '-' : '+') +\n            Math.abs(Math.trunc(offsetInMinutes / 60)).toString().padStart(2, '0') +\n            ':' +\n            Math.abs(offsetInMinutes % 60).toString().padStart(2, '0');\n    }\n\n    static fillDayNames() {\n        const\n            tempDate      = new Date('2000-01-01T12:00:00'),\n            dayNames      = DH._dayNames || [],\n            dayShortNames = DH._dayShortNames || [];\n\n        dayNames.length = 0;\n        dayShortNames.length = 0;\n\n        for (let day = 2; day < 9; day++) {\n            tempDate.setDate(day);\n            dayNames.push(DH.format(tempDate, 'dddd'));\n            dayShortNames.push(DH.format(tempDate, 'ddd'));\n        }\n\n        DH._dayNames = dayNames;\n        DH._dayShortNames = dayShortNames;\n    }\n\n    static getDayNames() {\n        return DH._dayNames;\n    }\n\n    static getDayName(day) {\n        return DH._dayNames[day];\n    }\n\n    static getDayShortNames() {\n        return DH._dayShortNames;\n    }\n\n    static getDayShortName(day) {\n        return DH._dayShortNames[day];\n    }\n\n    static fillMonthNames() {\n        const\n            tempDate        = new Date('2000-01-15T12:00:00'),\n            monthNames      = DH._monthNames || [],\n            monthShortNames = DH._monthShortNames || [],\n            monthNamesIndex = {},\n            monthShortNamesIndex = {};\n\n        monthNames.length = 0;\n        monthShortNames.length = 0;\n\n        for (let month = 0; month < 12; month++) {\n            tempDate.setMonth(month);\n\n            const monthName = DH.format(tempDate, 'MMMM');\n            monthNames.push(monthName);\n\n            const monthShortName = DH.format(tempDate, 'MMM');\n            monthShortNames.push(monthShortName);\n\n            monthNamesIndex[monthName.toLowerCase()] = { name : monthName, value : month };\n            monthShortNamesIndex[monthShortName.toLowerCase()] = { name : monthShortName, value : month };\n        }\n\n        DH._monthNames = monthNames;\n        DH._monthShortNames = monthShortNames;\n\n        DH._monthNamesIndex = monthNamesIndex;\n        DH._monthShortNamesIndex = monthShortNamesIndex;\n    }\n\n    static getMonthShortNames() {\n        return DH._monthShortNames;\n    }\n\n    static getMonthShortName(month) {\n        return DH._monthShortNames[month];\n    }\n\n    static getMonthNames() {\n        return DH._monthNames;\n    }\n\n    static getMonthName(month) {\n        return DH._monthNames[month];\n    }\n\n    static set locale(name) {\n        locale = name;\n        intlFormatterCache = {};\n        formatCache = {};\n        formatRedirects = {};\n    }\n\n    static get locale() {\n        return locale;\n    }\n\n    static setupDurationRegEx(unitNames = [], unitAbbreviations = []) {\n        const\n            me         = this,\n            unitLookup = {};\n\n        let unitAbbrRegEx = '';\n\n        for (let i = 0; i < unitAbbreviations.length; i++) {\n            const\n                // for example ['s', 'sec']\n                abbreviations = unitAbbreviations[i],\n                // for example { single : 'second', plural : 'seconds', abbrev : 's' }\n                unitNamesCfg  = unitNames[i];\n\n            unitNamesCfg.canonicalUnitName = canonicalUnitNames[i];\n\n            // Create a unitLookup object keyed by unit full names\n            // both lower and upper case to be able to look up plurals or abbreviations\n            // also always include english names, since those are used in sources\n            unitLookup[unitNamesCfg.single] =\n                unitLookup[unitNamesCfg.single.toUpperCase()] =\n                    unitLookup[unitNamesCfg.canonicalUnitName] =\n                        unitLookup[unitNamesCfg.canonicalUnitName.toUpperCase()] = unitNamesCfg;\n\n            unitAbbrRegEx += `${i ? '|' : ''}(`;\n\n            for (let j = 0; j < abbreviations.length; j++) {\n                unitAbbrRegEx += `${abbreviations[j]}|`;\n            }\n\n            locale = me.localize('L{locale}') || 'en-US';\n\n            if (locale !== 'en-US') {\n                // Add canonical values to be able to parse durations specified in configs\n                const canonicalAbbreviations = canonicalUnitAbbreviations[i];\n\n                for (let j = 0; j < canonicalAbbreviations.length; j++) {\n                    unitAbbrRegEx += `${canonicalAbbreviations[j]}|`;\n                }\n            }\n\n            unitAbbrRegEx += `${unitNamesCfg.single}|${unitNamesCfg.plural}|${unitNamesCfg.canonicalUnitName}|${unitNamesCfg.canonicalUnitName}s)`;\n        }\n\n        me.unitLookup = unitLookup;\n        me.durationRegEx = new RegExp(`^(?:${unitAbbrRegEx})$`);\n    }\n\n    static applyLocale() {\n        const\n            me                = this,\n            unitAbbreviations = me.localize('L{unitAbbreviations}') || [],\n            unitNames         = me.unitNames = me.localize('L{unitNames}');\n\n        // This happens when applying an incomplete locale, as done in Localizable.t.js.\n        // Invalid usecase, but return to prevent a crash in that test.\n        if (unitNames === 'unitNames') {\n            return;\n        }\n\n        locale = me.localize('L{locale}') || 'en-US';\n\n        if (locale === 'en-US') {\n            // TODO: Include in En locale instead?\n            ordinalSuffix = enOrdinalSuffix;\n        }\n        else {\n            ordinalSuffix = me.localize('L{ordinalSuffix}') || ordinalSuffix;\n        }\n\n        formatCache = {};\n        formatRedirects = {};\n        parserCache = {};\n        intlFormatterCache = {};\n        DH._weekStartDay = null;\n\n        DH.setupDurationRegEx(unitNames, unitAbbreviations);\n\n        // rebuild day/month names cache\n        DH.fillDayNames();\n        DH.fillMonthNames();\n    }\n\n    //endregion\n}\n\nconst DH = DateHelper;\n\nDH.useIntlFormat = useIntlFormat; // to use on tests\n\n/* <remove-on-release> */\n// Need to preserve name before locale is applied\n// Fixes trial localization example\n/* </remove-on-release> */\n\n// Update when changing locale\nLocaleManager.ion({\n    locale  : 'applyLocale',\n    prio    : 1000,\n    thisObj : DH\n});\n\n// Apply default locale\nif (LocaleManager.locale) {\n    DH.applyLocale();\n}\n","import Objects from './util/Objects.js';\n\n// NOTE: This import prevents this module from being imported by Base (or anything Base imports):\nimport DateHelper from './DateHelper.js';\n\n/**\n * @module Core/helper/ObjectHelper\n */\n\n// Detect if browser has bad implementation of toFixed()\nconst\n    { hasOwn } = Objects,\n    toFixedFix = (1.005).toFixed(2) === '1.01' ? null : function(number, fractionDigits) {\n        const\n            split = number.toString().split('.'),\n            newNumber = +(!split[1] ? split[0] : split.join('.') + '1');\n\n        return number.toFixed.call(newNumber, fractionDigits);\n    };\n\n/**\n * Helper for Object manipulation.\n */\nexport default class ObjectHelper extends Objects {\n    // These methods are inherited from Objects (an internal class) but need to be documented here for public use.\n    // This is primarily because static methods, while inherited by JavaScript classes, are not displayed in derived\n    // classes in the docs.\n\n    /**\n     * Copies all enumerable properties from the supplied source objects to `dest`. Unlike `Object.assign`, this copy\n     * also includes inherited properties.\n     * @param {Object} dest The destination object.\n     * @param {...Object} sources The source objects.\n     * @returns {Object} The `dest` object.\n     * @method assign\n     * @static\n     */\n\n    /**\n     * Copies all enumerable properties from the supplied source objects to `dest`, only including properties that does\n     * not already exist on `dest`. Unlike `Object.assign`, this copy also includes inherited properties.\n     * @param {Object} dest The destination object.\n     * @param {...Object} sources The source objects.\n     * @returns {Object} The `dest` object.\n     * @method assignIf\n     * @static\n     */\n\n    /**\n     * Creates a deep copy of the `value`. Simple objects ({@link #function-isObject-static}, arrays and `Date` objects\n     * are cloned. The enumerable properties of simple objects and the elements of arrays are cloned recursively.\n     * @param {*} value The value to clone.\n     * @param {Function} [handler] An optional function to call for values of types other than simple object, array or\n     * `Date`. This function should return the clone of the `value` passed to it. It is only called for truthy values\n     * whose `typeof` equals `'object'`.\n     * @param {*} handler.value The value to clone.\n     * @returns {*} The cloned value.\n     * @method clone\n     * @static\n     */\n\n    /**\n     * Converts a list of names (either a space separated string or an array), into an object with those properties\n     * assigned truthy values. The converse of {@link #function-getTruthyKeys-static}.\n     * @param {String|String[]} source The list of names to convert to object form.\n     * @method createTruthyKeys\n     * @static\n     */\n\n    /**\n     * Gathers the names of properties which have truthy values into an array.\n     *\n     * This is useful when gathering CSS class names for complex element production.\n     * Instead of appending to an array or string which may already contain the\n     * name, and instead of contending with space separation and concatenation\n     * and conditional execution, just set the properties of an object:\n     *\n     *     cls = {\n     *         [this.selectedCls] : this.isSelected(thing),\n     *         [this.dirtyCls] : this.isDirty(thing)\n     *     };\n     *\n     * @param {Object} source Source of keys to gather into an array.\n     * @returns {String[]} The keys which had a truthy value.\n     * @method getTruthyKeys\n     * @static\n     */\n\n    /**\n     * Gathers the values of properties which are truthy into an array.\n     * @param {Object} source Source of values to gather into an array.\n     * @returns {String[]} The truthy values from the passed object.\n     * @method getTruthyValues\n     * @static\n     */\n\n    /**\n     * Tests whether a passed object has any enumerable properties.\n     * @param {Object} object\n     * @returns {Boolean} `true` if the passed object has no enumerable properties.\n     * @method isEmpty\n     * @static\n     */\n\n    /**\n     * Returns `true` if the `value` is a simple `Object`.\n     * @param {Object} value\n     * @returns {Boolean} `true` if the `value` is a simple `Object`.\n     * @method isObject\n     * @static\n     */\n\n    /**\n     * Copies all enumerable properties from the supplied source objects to `dest`, recursing when the properties of\n     * both the source and `dest` are objects.\n     * ```\n     *  const o = {\n     *      a : 1,\n     *      b : {\n     *          c : 2\n     *      }\n     *  };\n     *  const o2 = {\n     *      b : {\n     *          d : 3\n     *      }\n     *  }\n     *\n     *  console.log(merge(o, o2));\n     *\n     *  > { a : 1, b : { c : 2, d : 3 } }\n     * ```\n     * @param {Object} dest The destination object.\n     * @param {...Object} sources The source objects.\n     * @returns {Object} The `dest` object.\n     * @method merge\n     * @static\n     */\n\n    /**\n     * Returns the specific type of the given `value`. Unlike the `typeof` operator, this function returns the text\n     * from the `Object.prototype.toString` result allowing `Date`, `Array`, `RegExp`, and others to be differentiated.\n     * ```\n     *  console.log(typeOf(null));\n     *  > null\n     *\n     *  console.log(typeOf({}));\n     *  > object\n     *\n     *  console.log(typeOf([]));\n     *  > array\n     *\n     *  console.log(typeOf(new Date()));\n     *  > date\n     *\n     *  console.log(typeOf(NaN));\n     *  > nan\n     *\n     *  console.log(typeOf(/a/));\n     *  > regexp\n     * ```\n     * @param {*} value\n     * @returns {String}\n     * @method typeOf\n     * @static\n     */\n\n    /**\n     * Returns value for a given path in the object\n     * @param {Object} object Object to check path on\n     * @param {String} path Dot-separated path, e.g. 'object.childObject.someKey'\n     * @returns {*} Value associated with passed key\n     * @method getPath\n     * @static\n     */\n\n    /**\n     * Sets value for a given path in the object\n     * @param {Object} object Target object\n     * @param {String} path Dot-separated path, e.g. 'object.childObject.someKey'\n     * @param {*} value Value for a given path\n     * @returns {Object} Returns passed object\n     * @method setPath\n     * @static\n     */\n\n    /**\n     * Creates a new object where key is a property in array item (`ref` by default) or index in the array and value is array item.\n     *\n     * From:\n     * ```\n     * [\n     *     {\n     *          text : 'foo',\n     *          ref : 'fooItem'\n     *     },\n     *     {\n     *          text : 'bar'\n     *     }\n     * ]\n     * ```\n     *\n     * To:\n     * ```\n     * {\n     *     fooItem : {\n     *         text : 'foo',\n     *         ref  : 'fooItem'\n     *     },\n     *     1 : {\n     *         text : 'bar'\n     *     }\n     * }\n     * ```\n     *\n     * @param {Object[]} arrayOfItems Array to transform.\n     * @param {String} [prop] Property to read the key from. `ref` by default.\n     * @returns {Object} namedItems\n     */\n    static transformArrayToNamedObject(arrayOfItems, prop = 'ref') {\n        const namedItems = {};\n\n        arrayOfItems.forEach((item, index) => {\n            const\n                // 0 is valid value, but empty string in not valid\n                key = (item[prop] != null && item[prop].toString().length) ? item[prop] : index;\n\n            namedItems[key] = item;\n        });\n\n        return namedItems;\n    }\n\n    /**\n     * Creates a new array from object values and saves key in a property (`ref` by default) of each item.\n     *\n     * From:\n     * ```\n     * {\n     *     fooItem : {\n     *         text : 'foo'\n     *     },\n     *     1 : {\n     *         text : 'bar'\n     *     },\n     *     barItem : false // will be ignored\n     * }\n     * ```\n     *\n     * To:\n     * ```\n     * [\n     *     {\n     *          text : 'foo',\n     *          ref : 'fooItem'\n     *     },\n     *     {\n     *          text : 'bar',\n     *          ref : 1\n     *     }\n     * ]\n     * ```\n     *\n     * @param {Object} namedItems Object to transform.\n     * @param {String} [prop] Property to save the key to. `ref` by default.\n     * @returns {Object[]} arrayOfItems\n     */\n    static transformNamedObjectToArray(namedItems, prop = 'ref') {\n        return Object.keys(namedItems).filter(key => namedItems[key]).map(key => {\n            const item = namedItems[key];\n\n            item[prop] = key;\n\n            return item;\n        });\n    }\n\n    /**\n     * Checks if two values are equal. Basically === but special handling of dates.\n     * @param {*} a First value\n     * @param {*} b Second value\n     * @returns {*} true if values are equal, otherwise false\n     */\n    static isEqual(a, b, useIsDeeply = false) {\n        // Eliminate null vs undefined mismatch\n        if (\n            (a === null && b !== null) ||\n            (a === undefined && b !== undefined) ||\n            (b === null && a !== null) ||\n            (b === undefined && a !== undefined)\n        ) {\n            return false;\n        }\n\n        // Covers undefined === undefined and null === null, since mismatches are eliminated above\n        if (a == null && b == null) {\n            return true;\n        }\n\n        // The same instance should equal itself.\n        if (a === b) {\n            return true;\n        }\n\n        const\n            typeA = typeof a,\n            typeB = typeof b;\n\n        if (typeA === typeB) {\n            switch (typeA) {\n                case 'number':\n                case 'string':\n                case 'boolean':\n                    return a === b;\n            }\n\n            switch (true) {\n                case a instanceof Date && b instanceof Date:\n                    // faster than calling DateHelper.isEqual\n                    // https://jsbench.me/3jk2bom2r3/1\n                    return a.getTime() === b.getTime();\n\n                case Array.isArray(a) && Array.isArray(b):\n                    return a.length === b.length ? a.every((v, idx) => OH.isEqual(v, b[idx], useIsDeeply)) : false;\n\n                case typeA === 'object' && a.constructor.prototype === b.constructor.prototype:\n                    return useIsDeeply ? OH.isDeeplyEqual(a, b, useIsDeeply) : JSON.stringify(a) === JSON.stringify(b);\n            }\n        }\n\n        return String(a) === String(b);\n    }\n\n    /**\n     * Checks if two objects are deeply equal\n     * @param {Object} a\n     * @param {Object} b\n     * @param {Object} [options] Additional comparison options\n     * @param {Object} [options.ignore] Map of property names to ignore when comparing\n     * @param {Function} [options.shouldEvaluate] Function used to evaluate if a property should be compared or not.\n     * Return false to prevent comparison\n     * @param {Function} [options.evaluate] Function used to evaluate equality. Return `true`/`false` as evaluation\n     * result or anything else to let `isEqual` handle the comparison\n     * @returns {Boolean}\n     */\n    static isDeeplyEqual(a, b, options = {}) {\n        // Same object, equal :)\n        if (a === b) {\n            return true;\n        }\n\n        // Nothing to compare, not equal\n        if (!a || !b) {\n            return false;\n        }\n\n        // Property names excluding ignored\n        const\n            aKeys = OH.keys(a, options.ignore),\n            bKeys = OH.keys(b, options.ignore);\n\n        // Property count differs, not equal\n        if (aKeys.length !== bKeys.length) {\n            return false;\n        }\n\n        for (let i = 0; i < aKeys.length; i++) {\n            const\n                aKey = aKeys[i],\n                bKey = bKeys[i];\n\n            // Property name differs, not equal\n            if (aKey !== bKey) {\n                return false;\n            }\n\n            const\n                aVal = a[aKey],\n                bVal = b[bKey];\n\n            // Allow caller to determine if property values should be evaluated or not\n            // TODO: Not currently used\n            if (options.shouldEvaluate) {\n                if (options.shouldEvaluate(\n                    aKey,\n                    {\n                        value  : aVal,\n                        object : a\n                    }, {\n                        value  : bVal,\n                        object : b\n                    }\n                ) === false) {\n                    continue;\n                }\n            }\n\n            // Allow caller to determine equality of properties\n            if (options.evaluate) {\n                const result = options.evaluate(aKey, {\n                    value  : aVal,\n                    object : a\n                }, {\n                    value  : bVal,\n                    object : b\n                });\n\n                // Not equal\n                if (result === false) {\n                    return false;\n                }\n\n                // Equal, skip isEqual call below\n                if (result === true) {\n                    continue;\n                }\n            }\n\n            // Values differ, not equal (also digs deeper)\n            if (!OH.isEqual(aVal, bVal, options)) {\n                return false;\n            }\n        }\n\n        // Found to be equal\n        return true;\n    }\n\n    /**\n     * Checks if value B is partially equal to value A.\n     * @param {*} a First value\n     * @param {*} b Second value\n     * @returns {Boolean} true if values are partially equal, false otherwise\n     */\n    static isPartial(a, b) {\n        a = String(a).toLowerCase();\n        b = String(b).toLowerCase();\n\n        return a.indexOf(b) !== -1;\n    }\n\n    /**\n     * Checks if value a is smaller than value b.\n     * @param {*} a First value\n     * @param {*} b Second value\n     * @returns {Boolean} true if a < b\n     */\n    static isLessThan(a, b) {\n        if (a instanceof Date && b instanceof Date) {\n            return DateHelper.isBefore(a, b);\n        }\n        return a < b;\n    }\n\n    /**\n     * Checks if value a is bigger than value b.\n     * @param {*} a First value\n     * @param {*} b Second value\n     * @returns {Boolean} true if a > b\n     */\n    static isMoreThan(a, b) {\n        if (a instanceof Date && b instanceof Date) {\n            return DateHelper.isAfter(a, b);\n        }\n        return a > b;\n    }\n\n    /**\n     * Used by the Base class to make deep copies of defaultConfig blocks\n     * @private\n     */\n    static fork(obj) {\n        let ret, key, value;\n\n        if (obj && obj.constructor === Object) {\n            ret = Object.setPrototypeOf({}, obj);\n\n            for (key in obj) {\n                value = obj[key];\n\n                if (value) {\n                    if (value.constructor === Object) {\n                        ret[key] = OH.fork(value);\n                    }\n                    else if (value instanceof Array) {\n                        ret[key] = value.slice();\n                    }\n                }\n            }\n        }\n        else {\n            ret = obj;\n        }\n\n        return ret;\n    }\n\n    /**\n     * Copies the named properties from the `source` parameter into the `dest` parameter.\n     * @param {Object} dest The destination into which properties are copied.\n     * @param {Object} source The source from which properties are copied.\n     * @param {String[]} props The list of property names.\n     * @returns {Object} The `dest` object.\n     */\n    static copyProperties(dest, source, props) {\n        let prop, i;\n        for (i = 0; i < props.length; i++) {\n            prop = props[i];\n            if (prop in source) {\n                dest[prop] = source[prop];\n            }\n        }\n        return dest;\n    }\n\n    /**\n     * Copies the named properties from the `source` parameter into the `dest` parameter\n     * unless the property already exists in the `dest`.\n     * @param {Object} dest The destination into which properties are copied.\n     * @param {Object} source The source from which properties are copied.\n     * @param {String[]} props The list of property names.\n     * @returns {Object} The `dest` object.\n     */\n    static copyPropertiesIf(dest, source, props) {\n        if (source) {\n            for (const prop of props) {\n                if (!(prop in dest)) {\n                    dest[prop] = source[prop];\n                }\n            }\n        }\n        return dest;\n    }\n\n    /**\n     * Returns an array containing the keys and values of all enumerable properties from every prototype level for the\n     * object. If `object` is `null`, this method returns an empty array.\n     * @param {Object} object Object from which to retrieve entries.\n     * @param {Object|Function} [ignore] Optional object of names to ignore or a function accepting the name and value\n     * which returns `true` to ignore the item.\n     * @returns {Array}\n     * @internal\n     */\n    static entries(object, ignore) {\n        const\n            result = [],\n            call = typeof ignore === 'function';\n\n        if (object) {\n            for (const p in object) {\n                if (call ? !ignore(p, object[p]) : !ignore?.[p]) {\n                    result.push([p, object[p]]);\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Populates an `object` with the provided `entries`.\n     * @param {Array} entries The key/value pairs (2-element arrays).\n     * @param {Object} [object={}] The object onto which to add `entries`.\n     * @returns {Object} The passed `object` (by default, a newly created object).\n     * @internal\n     */\n    static fromEntries(entries, object) {\n        object = object || {};\n\n        if (entries) {\n            for (let i = 0; i < entries.length; ++i) {\n                object[entries[i][0]] = entries[i][1];\n            }\n        }\n\n        return object;\n    }\n\n    /**\n     * Returns an array containing all enumerable property names from every prototype level for the object. If `object`\n     * is `null`, this method returns an empty array.\n     * @param {Object} object Object from which to retrieve property names.\n     * @param {Object|Function} [ignore] Optional object of names to ignore or a function accepting the name and value\n     * which returns `true` to ignore the item.\n     * @param {Function} [mapper] Optional function to call for each non-ignored item. If provided, the result of this\n     * function is stored in the returned array. It is called with the array element as the first parameter, and the\n     * index in the result array as the second argument (0 for the first, non-ignored element, 1 for the second and so\n     * on).\n     * @returns {String[]}\n     */\n    static keys(object, ignore, mapper) {\n        const\n            result = [],\n            call = typeof ignore === 'function';\n\n        if (object) {\n            let index = 0;\n\n            for (const p in object) {\n                if (call ? !ignore(p, object[p]) : !ignore?.[p]) {\n                    result.push(mapper ? mapper(p, index) : p);\n                    ++index;\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Returns an array containing the values of all enumerable properties from every prototype level for the object.\n     * If `object` is `null`, this method returns an empty array.\n     * @param {Object} object Object from which to retrieve values.\n     * @param {Object|Function} [ignore] Optional object of names to ignore or a function accepting the name and value\n     * which returns `true` to ignore the item.\n     * @param {Function} [mapper] Optional function to call for each non-ignored item. If provided, the result of this\n     * function is stored in the returned array. It is called with the array element as the first parameter, and the\n     * index in the result array as the second argument (0 for the first, non-ignored element, 1 for the second and so\n     * on).\n     * @returns {Array}\n     * @internal\n     */\n    static values(object, ignore, mapper) {\n        const\n            result = [],\n            call = typeof ignore === 'function';\n\n        if (object) {\n            let index = 0;\n\n            for (const p in object) {\n                if (call ? !ignore(p, object[p]) : !ignore?.[p]) {\n                    result.push(mapper ? mapper(object[p], index) : object[p]);\n                    ++index;\n                }\n            }\n        }\n\n        return result;\n    }\n\n    //region Path\n\n    /**\n     * Checks if a given path exists in an object\n     * @param {Object} object Object to check path on\n     * @param {String} path Dot-separated path, e.g. 'object.childObject.someKey'\n     * @returns {Boolean} Returns `true` if path exists or `false` if it does not\n     */\n    static pathExists(object, path) {\n        const properties = path.split('.');\n\n        return properties.every(property => {\n            if (!object || !(property in object)) {\n                return false;\n            }\n            object = object[property];\n            return true;\n        });\n    }\n\n    /**\n     * Creates a simple single level key-value object from complex deep object.\n     * @param {Object} object Object to extract path and values from\n     * @returns {Object} Key-value object where key is a path to the corresponding value\n     * @internal\n     *\n     * ```javascript\n     * // converts deep object\n     * {\n     *     foo : {\n     *         bar : {\n     *             test : 1\n     *         }\n     *     }\n     * }\n     * // into a single level object\n     * {\n     *     'foo.bar.test' : 1\n     * }\n     * ```\n     */\n    static pathifyKeys(object) {\n        const result = {};\n\n        for (const key in object) {\n            if (hasOwn(object, key)) {\n                if (Array.isArray(object[key])) {\n                    result[key] = object[key].slice();\n                }\n                else if (object[key] instanceof Object) {\n                    const paths = this.pathifyKeys(object[key]);\n\n                    for (const path in paths) {\n                        result[`${key}.${path}`] = paths[path];\n                    }\n                }\n                else {\n                    result[key] = object[key];\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Removes value for a given path in the object. Doesn't cleanup empty objects.\n     * @param {Object} object\n     * @param {String} path Dot-separated path, e.g. `obj.child.someKey`\n     * @internal\n     */\n    static deletePath(object, path) {\n        path.split('.').reduce((result, key, index, array) => {\n            if (result == null) {\n                return null;\n            }\n\n            if (hasOwn(result, key)) {\n                if (index === array.length - 1) {\n                    delete result[key];\n                }\n                else {\n                    return result[key];\n                }\n            }\n        }, object);\n    }\n\n    //endregion\n\n    static coerce(from, to) {\n        const fromType = Objects.typeOf(from),\n            toType = Objects.typeOf(to),\n            isString = typeof from === 'string';\n\n        if (fromType !== toType) {\n            switch (toType) {\n                case 'string':\n                    return String(from);\n                case 'number':\n                    return Number(from);\n                case 'boolean':\n                    // See http://ecma262-5.com/ELS5_HTML.htm#Section_11.9.3 as to why '0'.\n                    // TL;DR => ('0' == 0), so if given string '0', we must return boolean false.\n                    return isString && (!from || from === 'false' || from === '0') ? false : Boolean(from);\n                case 'null':\n                    return isString && (!from || from === 'null') ? null : false;\n                case 'undefined':\n                    return isString && (!from || from === 'undefined') ? undefined : false;\n                case 'date':\n                    return isString && isNaN(from) ? DateHelper.parse(from) : Date(Number(from));\n            }\n        }\n        return from;\n    }\n\n    static wrapProperty(object, propertyName, newGetter, newSetter, deep = true) {\n        const newProperty = {};\n\n        let proto = Object.getPrototypeOf(object),\n            existingProperty = Object.getOwnPropertyDescriptor(proto, propertyName);\n\n        while (!existingProperty && proto && deep) {\n            proto = Object.getPrototypeOf(proto);\n            if (proto) {\n                existingProperty = Object.getOwnPropertyDescriptor(proto, propertyName);\n            }\n        }\n\n        if (existingProperty) {\n            if (existingProperty.set) {\n                newProperty.set = v => {\n                    existingProperty.set.call(object, v);\n\n                    // Must invoke the getter in case \"v\" has been transformed.\n                    newSetter && newSetter.call(object, existingProperty.get.call(object));\n                };\n            }\n            else {\n                newProperty.set = newSetter;\n            }\n            if (existingProperty.get) {\n                newProperty.get = () => {\n                    let result = existingProperty.get.call(object);\n                    if (newGetter) {\n                        result = newGetter.call(object, result);\n                    }\n                    return result;\n                };\n            }\n            else {\n                newProperty.get = newGetter;\n            }\n        }\n        else {\n            newProperty.set = v => {\n                object[`_${propertyName}`] = v;\n                newSetter && newSetter.call(object, v);\n            };\n            newProperty.get = () => {\n                let result = object[`_${propertyName}`];\n                if (newGetter) {\n                    result = newGetter.call(object, result);\n                }\n                return result;\n            };\n        }\n        Object.defineProperty(object, propertyName, newProperty);\n    }\n\n    /**\n     * Intercepts access to a `property` of a given `object`.\n     *\n     * ```javascript\n     *      ObjectHelper.hookProperty(object, 'prop', class {\n     *          get value() {\n     *              return super.value;\n     *          }\n     *          set value(v) {\n     *              super.value = v;\n     *          }\n     *      });\n     * ```\n     * The use of `super` allows the hook's getter and setter to invoke the object's existing get/set.\n     *\n     * @param {Object} object\n     * @param {String} property\n     * @param {Function} hook A `class` defining a `value` property getter and/or setter.\n     * @returns {Function} A function that removes the hook when called.\n     * @internal\n     */\n    static hookProperty(object, property, hook) {\n        const\n            desc = ObjectHelper.getPropertyDescriptor(hook.prototype, 'value'),\n            existingDesc = ObjectHelper.getPropertyDescriptor(object, property),\n            fieldName = `_${property}`,\n            base = class {\n                get value() {\n                    return existingDesc ? existingDesc.get.call(this) : this[fieldName];\n                }\n\n                set value(v) {\n                    if (existingDesc) {\n                        existingDesc.set.call(this, v);\n                    }\n                    else {\n                        this[fieldName] = v;\n                    }\n                }\n            },\n            baseDesc = ObjectHelper.getPropertyDescriptor(base.prototype, 'value');\n\n        Object.setPrototypeOf(hook.prototype, base.prototype);  // direct super calls to our \"base\" implementation\n        Object.defineProperty(object, property, {\n            configurable : true,\n\n            get : desc.get || baseDesc.get,\n            set : desc.set || baseDesc.set\n        });\n\n        return () => delete object[property];\n    }\n\n    /**\n     * Finds a property descriptor for the passed object from all inheritance levels.\n     * @param {Object} object The Object whose property to find.\n     * @param {String} propertyName The name of the property to find.\n     * @returns {Object} An ECMA property descriptor is the property was found, otherwise `null`\n     */\n    static getPropertyDescriptor(object, propertyName) {\n        let result = null;\n\n        for (let o = object; o && !result && !hasOwn(o, 'isBase'); o = Object.getPrototypeOf(o)) {\n            result = Object.getOwnPropertyDescriptor(o, propertyName);\n        }\n\n        return result;\n    }\n\n    /**\n     * Changes the passed object and removes all null and undefined properties from it\n     * @param {Object} object Target object\n     * @param {Boolean} [keepNull] Pass true to only remove undefined properties\n     * @returns {Object} Passed object\n     */\n    static cleanupProperties(object, keepNull = false) {\n        Object.entries(object).forEach(([key, value]) => {\n            if (keepNull) {\n                value === undefined && delete object[key];\n            }\n            else {\n                value == null && delete object[key];\n            }\n        });\n        return object;\n    }\n\n    /**\n     * Changes the passed object and removes all properties from it.\n     * Used while mutating when need to keep reference to the object but replace its properties.\n     * @param {Object} object Target object\n     * @returns {Object} Passed object\n     */\n    static removeAllProperties(obj) {\n        Object.keys(obj).forEach(key => delete obj[key]);\n        return obj;\n    }\n\n    //region Assert type\n\n    /**\n     * Checks that the supplied value is of the specified type.Throws if it is not\n     * @param {Object} value Value to check type of\n     * @param {String} type Expected type\n     * @param {String} name Name of the value, used in error message\n     * @param {Boolean} [allowNull] Accept `null` without throwing\n     */\n    static assertType(value, type, name) {\n        const valueType = Objects.typeOf(value);\n\n        if (value != null && valueType !== type) {\n            throw new Error(`Incorrect type \"${valueType}\" for ${name}, expected \"${type}\"`);\n        }\n    }\n\n    /**\n     * Checks that the supplied value is a plain object. Throws if it is not\n     * @param {Object} value Value to check type of\n     * @param {String} name Name of the value, used in error message\n     */\n    static assertObject(value, name) {\n        OH.assertType(value, 'object', name);\n    }\n\n    /**\n     * Checks that the supplied value is an instance of a Bryntum class. Throws if it is not\n     * @param {Object} value Value to check type of\n     * @param {String} name Name of the value, used in error message\n     */\n    static assertInstance(value, name) {\n        OH.assertType(value, 'instance', name);\n    }\n\n    /**\n     * Checks that the supplied value is a Bryntum class. Throws if it is not\n     * @param {Object} value Value to check type of\n     * @param {String} name Name of the value, used in error message\n     */\n    static assertClass(value, name) {\n        OH.assertType(value, 'class', name);\n    }\n\n    /**\n     * Checks that the supplied value is a function. Throws if it is not\n     * @param {Object} value Value to check type of\n     * @param {String} name Name of the value, used in error message\n     */\n    static assertFunction(value, name) {\n        if (typeof value !== 'function' || value.isBase || value.$$name) {\n            throw new Error(`Incorrect type for ${name}, got \"${value}\" (expected a function)`);\n        }\n    }\n\n    /**\n     * Checks that the supplied value is a number. Throws if it is not\n     * @param {Object} value Value to check type of\n     * @param {String} name Name of the value, used in error message\n     */\n    static assertNumber(value, name) {\n        const asNumber = Number(value);\n\n        if (typeof value !== 'number' || isNaN(asNumber)) {\n            throw new Error(`Incorrect type for ${name}, got \"${value}\" (expected a Number)`);\n        }\n    }\n\n    /**\n     * Checks that the supplied value is a boolean. Throws if it is not\n     * @param {Object} value Value to check type of\n     * @param {String} name Name of the value, used in error message\n     */\n    static assertBoolean(value, name) {\n        OH.assertType(value, 'boolean', name);\n    }\n\n    /**\n     * Checks that the supplied value is a string. Throws if it is not\n     * @param {Object} value Value to check type of\n     * @param {String} name Name of the value, used in error message\n     */\n    static assertString(value, name) {\n        OH.assertType(value, 'string', name);\n    }\n\n    /**\n     * Checks that the supplied value is an array. Throws if it is not\n     * @param {Object} value Value to check type of\n     * @param {String} name Name of the value, used in error message\n     */\n    static assertArray(value, name) {\n        OH.assertType(value, 'array', name);\n    }\n\n    //endregion\n\n    /**\n     * Number.toFixed(), with polyfill for browsers that needs it\n     * @param {Number} number\n     * @param {Number} digits\n     * @returns {String} A fixed point string representation of the passed number.\n     */\n    static toFixed(number, digits) {\n        if (toFixedFix) {\n            return toFixedFix(number, digits);\n        }\n\n        return number.toFixed(digits);\n    }\n\n    /**\n     * Round the passed number to closest passed step value.\n     * @param {Number} number The number to round.\n     * @param {Number} [step] The step value to round to.\n     * @returns {Number} The number rounded to the closest step.\n     */\n    static roundTo(number, step = 1) {\n        return Math.round(number / step) * step;\n    }\n\n    /**\n     * Round the passed number to the passed number of decimals.\n     * @param {Number} number The number to round.\n     * @param {Number} digits The number of decimal places to round to.\n     * @returns {Number} The number rounded to the passed number of decimal places.\n     */\n    static round(number, digits) {\n        // Undefined or null means do not round. NOT round to no decimals.\n        if (digits == null) {\n            return number;\n        }\n\n        const factor = 10 ** digits;\n\n        return Math.round(number * factor) / factor;\n    }\n\n    /**\n     * Returns a non-null entry from a Map for a given key path. This enables a specified defaultValue to be added \"just\n     * in time\" which is returned if the key is not already present.\n     * @param {Map} map The Map to find the key in (and potentially add to).\n     * @param {String|Number|String[]|Number[]} path Dot-separated path, e.g. 'firstChild.childObject.someKey',\n     * or the key path as an array, e.g. ['firstChild', 'childObject', 'someKey'].\n     * @param {Object} [defaultValue] Optionally the value to insert if the key is not found.\n     */\n    static getMapPath(map, path, defaultValue) {\n        const\n            keyPath   = Array.isArray(path) ? path : typeof path === 'string' ? path.split('.') : [path],\n            simpleKey = keyPath.length === 1,\n            topKey    = keyPath[0],\n            topValue  = map.has(topKey) ? map.get(topKey) : map.set(topKey, simpleKey ? defaultValue : {}).get(topKey);\n\n        // If it was a simple key, we are done.\n        if (simpleKey) {\n            return topValue;\n        }\n\n        // Go down the property path on the top Object, filling entries in until the leaf.\n        return OH.getPathDefault(topValue, keyPath.slice(1), defaultValue);\n    }\n}\n\nconst OH = ObjectHelper;\n","/**\n * @module Core/helper/util/Rectangle\n */\n\nimport DomHelper from '../DomHelper.js';\nimport BrowserHelper from '../BrowserHelper.js';\nimport ObjectHelper from '../ObjectHelper.js';\n\nconst\n    allBorders        = ['border-top-width', 'border-right-width', 'border-bottom-width', 'border-left-width'],\n    allMargins        = ['margin-top', 'margin-right', 'margin-bottom', 'margin-left'],\n    allPaddings       = ['padding-top', 'padding-right', 'padding-bottom', 'padding-left'],\n    borderNames       = {\n        t : 'border-top-width',\n        r : 'border-right-width',\n        b : 'border-bottom-width',\n        l : 'border-left-width'\n    },\n    paddingNames      = {\n        t : 'padding-top',\n        r : 'padding-right',\n        b : 'padding-bottom',\n        l : 'padding-left'\n    },\n    zeroBased         = Object.freeze({\n        x : 0,\n        y : 0\n    }),\n    alignSpecRe       = /^([trblc])(\\d*)-([trblc])(\\d*)$/i,\n    alignPointRe      = /^([trblc])(\\d*)$/i,\n    edgeNames         = [\n        'top',\n        'right',\n        'bottom',\n        'left'\n    ],\n    edgeIndices       = {\n        t : 0,\n        r : 1,\n        b : 2,\n        l : 3\n    },\n    defaultAlignments = [\n        'b-t',\n        'l-r',\n        't-b',\n        'r-l'\n    ],\n    edgeAligments = {\n        bt : 1,\n        tb : 1,\n        lr : 2,\n        rl : 2\n    },\n    zeroOffsets       = Object.freeze([0, 0]),\n    matchDimensions   = ['width', 'height'],\n    parseEdges        = (top, right = top, bottom = top, left = right) => {\n        return Array.isArray(top) ? parseEdges.apply(null, top) : [top, right, bottom, left];\n    };\n\n// Parse a l0-r0 (That's how Menus align to their owning MenuItem) align spec.\n// If we are in an RTL env, then reverse the percentage values if we are\n// aligning horizontal edges.\nfunction parseAlign(alignSpec, rtl) {\n    const parts        = alignSpecRe.exec(alignSpec),\n        myEdge       = parts[1],\n        targetEdge   = parts[3],\n        mO           = parseInt(parts[2] || 50),\n        tO           = parseInt(parts[4] || 50),\n        myOffset     = rtl && !(edgeIndices[myEdge]     & 1) ? 100 - mO : mO,\n        targetOffset = rtl && !(edgeIndices[targetEdge] & 1) ? 100 - tO : tO,\n        edgeAligned  = edgeAligments[myEdge + targetEdge];\n\n    //<debug>\n    if (!parts) {\n        throw new Error('Invalid Rectangle alignment specification \"' + alignSpec + '\"');\n    }\n    //</debug>\n\n    // Comments assume the Menu's alignSpec of l0-r0 is used.\n    return {\n        myAlignmentPoint     : myEdge + myOffset,         // l0\n        myEdge,                                           // l\n        myOffset,                                         // 0\n        targetAlignmentPoint : targetEdge + targetOffset, // r0\n        targetEdge,                                       // r\n        targetOffset,                                     // 0\n        startZone            : edgeIndices[targetEdge],   // 1 - start trying zone 1 in TRBL order\n        edgeAligned                                       // Edge-to-edge align requested\n    };\n}\n\n// Takes a result from the above function and flips edges for the axisLock config\nfunction flipAlign(align) {\n    return `${edgeNames[(edgeIndices[align.myEdge] + 2) % 4][0]}${align.myOffset}-${edgeNames[(edgeIndices[align.targetEdge] + 2) % 4][0]}${align.targetOffset}`;\n}\n\nfunction createOffsets(offset) {\n    if (offset == null) {\n        return zeroOffsets;\n    }\n    else if (typeof offset === 'number') {\n        return [offset, offset];\n    }\n    //<debug>\n    else if (!Array.isArray(offset)) {\n        throw new Error('Rectangle offset must be a single number, or an [x, y] array');\n    }\n    //</debug>\n    return offset;\n}\n\nexport { parseAlign };\n\n/**\n * Encapsulates rectangular areas for comparison, intersection etc.\n *\n * Note that the `right` and `bottom` properties are *exclusive*.\n *\n */\nexport default class Rectangle {\n    // Class does not extend Base, so we need to define this\n    get isRectangle() {\n        return true;\n    }\n\n    /**\n     * Returns the Rectangle in document based coordinates of the passed element.\n     *\n     * *Note:* If the element passed is the `document` or `window` the `window`'s\n     * rectangle is returned which is always at `[0, 0]` and encompasses the\n     * browser's entire document viewport.\n     * @param {HTMLElement|Core.widget.Widget|Core.widget.Mask} element The element to calculate the Rectangle for.\n     * @param {HTMLElement} [relativeTo] Optionally, a parent element in whose space to calculate the Rectangle.\n     * @param {Boolean} [ignorePageScroll=false] Use browser viewport based coordinates.\n     * @returns {Core.helper.util.Rectangle} The Rectangle in document based (or, optionally viewport based) coordinates. Relative to the _relativeTo_ parameter if passed.\n     */\n    static from(element, relativeTo, ignorePageScroll) {\n        // Convenient in tests\n        if (typeof element === 'string') {\n            element = document.querySelector(element);\n        }\n        // If a shadowRoot or other type of document fragment passed, get closest Element\n        else if (element?.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n            element = element.host || element.ownerDocument;\n        }\n\n        if (typeof relativeTo === 'string') {\n            relativeTo = document.querySelector(relativeTo);\n        }\n\n        if (element == null || element.isRectangle) {\n            return element;\n        }\n\n        element = element.element || element;  // works for Widget and Mask\n\n        if (ignorePageScroll === undefined && typeof relativeTo === 'boolean') {\n            ignorePageScroll = relativeTo;\n            relativeTo = null;\n        }\n\n        if (!relativeTo?.isRectangle) {\n            if (relativeTo) {\n                // TODO: nige should figure out if there is a better solution\n                let { scrollLeft, scrollTop } = relativeTo;\n                if (BrowserHelper.isSafari && relativeTo === document.body) {\n                    scrollLeft = scrollTop = 0;\n                }\n\n                relativeTo = Rectangle.from(relativeTo).translate(-scrollLeft, -scrollTop);\n            }\n            else {\n                relativeTo = zeroBased;\n            }\n        }\n\n        // Viewport is denoted by requesting window or document.\n        // document.body may overflow the viewport, so this must not be evaluated as the viewport.\n        const\n            // If body is 0 height we should treat this case as a viewport\n            isViewport   = element === document || element === globalThis,\n            isSFViewport = element === document.body && document.body.offsetHeight === 0,\n            sfElRect     = isSFViewport && element.getBoundingClientRect(),\n            viewRect     = isSFViewport\n                // In Salesforce body and html have 0 height so to get correct viewport vertical size we have to use\n                // scrollHeight on html element.\n                ? new Rectangle(sfElRect.left, sfElRect.top, sfElRect.width, document.body.parentElement.scrollHeight)\n                : isViewport\n                    ? new Rectangle(0, 0, globalThis.innerWidth, globalThis.innerHeight)\n                    : element.getBoundingClientRect(),\n            scrollOffset = (ignorePageScroll || isViewport) ? [0, 0] : [globalThis.pageXOffset, globalThis.pageYOffset];\n\n        return new Rectangle(\n            viewRect.left + scrollOffset[0] - relativeTo.x,\n            viewRect.top + scrollOffset[1] - relativeTo.y,\n            viewRect.width,\n            viewRect.height\n        );\n    }\n\n    /**\n     * Returns the Rectangle in viewport coordinates of the passed element.\n     *\n     * *Note:* If the element passed is the `document` or `window` the `window`'s rectangle is returned which is always\n     * at `[0, 0]` and encompasses the browser's entire document viewport.\n     * @param {HTMLElement} element The element to calculate the Rectangle for.\n     * @param {HTMLElement} [relativeTo] Optionally, a parent element in whose space to calculate the Rectangle.\n     * @returns {Core.helper.util.Rectangle} The Rectangle in viewport based coordinates. Relative to the _relativeTo_\n     * parameter if provided.\n     */\n    static fromScreen(element, relativeTo) {\n        return Rectangle.from(element, relativeTo, /* ignorePageScroll = */ true);\n    }\n\n    /**\n     * Returns the inner Rectangle (within border) in document based coordinates of the passed element.\n     * @param {HTMLElement} element The element to calculate the Rectangle for.\n     * @param {HTMLElement} [relativeTo] Optionally, a parent element in whose space to calculate the Rectangle.\n     * @param {Boolean} [ignorePageScroll] Use browser viewport based coordinates.\n     * @returns {Core.helper.util.Rectangle} The Rectangle in document based (or, optionally viewport based) coordinates. Relative to the _relativeTo_ parameter if passed.\n     */\n    static inner(element, relativeTo, ignorePageScroll = false) {\n        const result = this.from(element, relativeTo, ignorePageScroll);\n\n        // Can only ask for the following styles if element is in the document.\n        if (document.body.contains(element)) {\n            const borders = DomHelper.getStyleValue(element, allBorders);\n\n            result.x += parseFloat(borders[borderNames.l]);\n            result.y += parseFloat(borders[borderNames.t]);\n            result.right -= parseFloat(borders[borderNames.r]);\n            result.bottom -= parseFloat(borders[borderNames.b]);\n        }\n\n        return result;\n    }\n\n    /**\n     * Returns the content Rectangle (within border and padding) in document based coordinates of the passed element.\n     * @param {HTMLElement} element The element to calculate the Rectangle for.\n     * @param {HTMLElement} [relativeTo] Optionally, a parent element in whose space to calculate the Rectangle.\n     * @param {Boolean} [ignorePageScroll] Use browser viewport based coordinates.\n     * @returns {Core.helper.util.Rectangle} The Rectangle in document based (or, optionally viewport based) coordinates. Relative to the _relativeTo_ parameter if passed.\n     */\n    static content(element, relativeTo, ignorePageScroll = false) {\n        const result = this.from(element, relativeTo, ignorePageScroll);\n\n        // Can only ask for the following styles if element is in the document.\n        if (document.body.contains(element)) {\n            const borders = DomHelper.getStyleValue(element, allBorders),\n                padding = DomHelper.getStyleValue(element, allPaddings);\n\n            result.x += parseFloat(borders[borderNames.l]) + parseFloat(padding[paddingNames.l]);\n            result.y += parseFloat(borders[borderNames.t]) + parseFloat(padding[paddingNames.t]);\n            result.right -= parseFloat(borders[borderNames.r]) + parseFloat(padding[paddingNames.r]);\n            result.bottom -= parseFloat(borders[borderNames.b]) + parseFloat(padding[paddingNames.b]);\n        }\n\n        return result;\n    }\n\n    /**\n     * Returns the client Rectangle (within border and padding and scrollbars) in document based coordinates of the\n     * passed element.\n     * @param {HTMLElement} element The element to calculate the Rectangle for.\n     * @param {HTMLElement} [relativeTo] Optionally, a parent element in whose space to calculate the Rectangle.\n     * @param {Boolean} [ignorePageScroll] Use browser viewport based coordinates.\n     * @returns {Core.helper.util.Rectangle} The Rectangle in document based (or, optionally viewport based) coordinates. Relative to the _relativeTo_ parameter if passed.\n     */\n    static client(element, relativeTo, ignorePageScroll = false) {\n        const\n            result         = this.content(element, relativeTo, ignorePageScroll),\n            scrollbarWidth = DomHelper.scrollBarWidth;\n\n        let padding;\n\n        if (scrollbarWidth) {\n            // Capture width taken by any vertical scrollbar.\n            // If there is a vertical scrollbar, shrink the box.\n            // TODO: We may have to shrink from the left in RTL mode.\n            if (element.scrollHeight > element.clientHeight && DomHelper.getStyleValue(element, 'overflow-y') !== 'hidden') {\n                padding = parseFloat(DomHelper.getStyleValue(element, 'padding-right'));\n                result.right += padding - Math.max(padding, scrollbarWidth);\n            }\n\n            // Capture height taken by any horizontal scrollbar.\n            // If there is a horizontal scrollbar, shrink the box.\n            if (element.scrollWidth > element.clientWidth && DomHelper.getStyleValue(element, 'overflow-x') !== 'hidden') {\n                padding = parseFloat(DomHelper.getStyleValue(element, 'padding-bottom'));\n                result.bottom += padding - Math.max(padding, scrollbarWidth);\n            }\n        }\n\n        // The client region excluding any scrollbars.\n        return result;\n    }\n\n    /**\n     * Returns the outer Rectangle (including margin) in document based coordinates of the passed element.\n     * @param {HTMLElement} element The element to calculate the Rectangle for.\n     * @param {HTMLElement} [relativeTo] Optionally, a parent element in whose space to calculate the Rectangle.\n     * @param {Boolean} [ignorePageScroll] Use browser viewport based coordinates.\n     * @returns {Core.helper.util.Rectangle} The Rectangle in document based (or, optionally viewport based) coordinates.\n     * Relative to the _relativeTo_ parameter if passed.\n     * @internal\n     */\n    static outer(element, relativeTo, ignorePageScroll = false) {\n        const result = this.from(element, relativeTo, ignorePageScroll);\n\n        // Can only ask for the following styles if element is in the document.\n        if (document.body.contains(element)) {\n            const margin = DomHelper.getStyleValue(element, allMargins);\n\n            result.x -= parseFloat(margin['margin-left']);\n            result.y -= parseFloat(margin['margin-top']);\n            result.right += parseFloat(margin['margin-right']);\n            result.bottom += parseFloat(margin['margin-bottom']);\n        }\n\n        return result;\n    }\n\n    /**\n     * Returns a new rectangle created as the union of all supplied rectangles.\n     * @param {Core.helper.util.Rectangle[]} rectangles\n     * @returns {Core.helper.util.Rectangle}\n     */\n    static union(...rectangles) {\n        let { x, y, right, bottom } = rectangles[0],\n            current;\n\n        if (rectangles.length > 1) {\n            for (let i = 1; i < rectangles.length; i++) {\n                current = rectangles[i];\n\n                if (current.x < x) {\n                    x = current.x;\n                }\n\n                if (current.y < y) {\n                    y = current.y;\n                }\n\n                if (current.right > right) {\n                    right = current.right;\n                }\n\n                if (current.bottom > bottom) {\n                    bottom = current.bottom;\n                }\n            }\n        }\n\n        return new Rectangle(x, y, right - x, bottom - y);\n    }\n\n    /**\n     * Rounds this Rectangle to the pixel resolution of the current display or to the nearest\n     * passed unit which defaults to the current display's [`devicePixelRatio`](https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio).\n     * @param {Number} [devicePixelRatio] device pixel ratio which defaults to `window.devicePixelRatio`\n     */\n    roundPx(devicePixelRatio = globalThis.devicePixelRatio || 1) {\n        const\n            me = this;\n\n        me._x = DomHelper.roundPx(me._x, devicePixelRatio);\n        me._y = DomHelper.roundPx(me._y, devicePixelRatio);\n        me._width = DomHelper.roundPx(me._width, devicePixelRatio);\n        me._height = DomHelper.roundPx(me._height, devicePixelRatio);\n\n        return me;\n    }\n\n    // This class doesn't extend Base and extending doesn't seem to be\n    // the way to go. Instead we duplicate smallest piece of logic here\n    static get $$name() {\n        return hasOwnProperty.call(this, '$name') && this.$name ||\n            // _$name is filled by webpack for every class (cls._$name = '...')\n            hasOwnProperty.call(this, '_$name') && this._$name ||\n            this.name;\n    }\n\n    get $$name() {\n        return this.constructor.$$name;\n    }\n\n    /**\n     * Constructs a Rectangle\n     * @param {Number} x The X coordinate\n     * @param {Number} y The Y coordinate\n     * @param {Number} width The width\n     * @param {Number} height The height\n     */\n    constructor(x, y, width, height) {\n        ObjectHelper.assertNumber(x, 'Rectangle.x');\n        ObjectHelper.assertNumber(y, 'Rectangle.y');\n        ObjectHelper.assertNumber(width, 'Rectangle.width');\n        ObjectHelper.assertNumber(height, 'Rectangle.height');\n\n        const me = this;\n\n        // Normalize rectangle definitions with -ve offsets from their origin\n        if (width < 0) {\n            x += width;\n            width = -width;\n        }\n        if (height < 0) {\n            y += height;\n            height = -height;\n        }\n\n        me._x = x;\n        me._y = y;\n        me._width = width;\n        me._height = height;\n    }\n\n    /**\n     * Creates a copy of this Rectangle.\n     */\n    clone() {\n        const\n            me     = this,\n            result = new Rectangle(me.x, me.y, me.width, me.height);\n\n        result.isAlignRectangle = me.isAlignRectangle;\n        result.minHeight = me.minHeight;\n        result.minWidth = me.minWidth;\n\n        return result;\n    }\n\n    /**\n     * Returns `true` if this Rectangle wholly contains the passed rectangle.\n     *\n     * Note that a {@link Core.helper.util.Point} may be passed.\n     * @param {Core.helper.util.Rectangle} other The Rectangle to test for containment within this Rectangle\n     * @returns {Boolean} `true` if the other Rectangle is wholly contained within this Rectangle\n     */\n    contains(other) {\n        const me = this;\n\n        if (other.isRectangle) {\n            return other._x >= me._x &&\n                other._y >= me._y &&\n                other.right <= me.right &&\n                other.bottom <= me.bottom;\n        }\n        else {\n            return false;\n        }\n    }\n\n    /**\n     * Checks if this Rectangle intersects the passed Rectangle\n     * @param {Core.helper.util.Rectangle} other The Rectangle to intersect with this.\n     * @param {Boolean} [useBoolean] Specify `true` to return a boolean value instead of constructing a new Rectangle\n     * @param {Boolean} [allowZeroDimensions] `true` to consider zero-width or zero-hight rectangles as intersecting if coordinates indicate the intersection\n     * @returns {Core.helper.util.Rectangle|Boolean} Returns the intersection Rectangle or `false` if there is no intersection.\n     */\n    intersect(other, useBoolean = false, allowZeroDimensions = false) {\n        const\n            me        = this,\n            y         = Math.max(me.y, other.y),\n            r         = Math.min(me.right, other.right),\n            b         = Math.min(me.bottom, other.bottom),\n            x         = Math.max(me.x, other.x),\n            intersect = allowZeroDimensions ? (b >= y && r >= x) : (b > y && r > x);\n\n        if (intersect) {\n            return useBoolean ? true : new Rectangle(x, y, r - x, b - y);\n        }\n        else {\n            return false;\n        }\n    }\n\n    equals(other, round = false) {\n        const processor = round ? x => Math.round(x) : x => x;\n\n        return other.isRectangle &&\n            processor(other.x) === processor(this.x) &&\n            processor(other.y) === processor(this.y) &&\n            processor(other.width) === processor(this.width) &&\n            processor(other.height) === processor(this.height);\n    }\n\n    /**\n     * Translates this Rectangle by the passed vector. Size is maintained.\n     * @param {Number} x The X translation vector.\n     * @param {Number} y The Y translation vector.\n     * @returns {Core.helper.util.Rectangle} This Rectangle;\n     */\n    translate(x, y) {\n        this._x += x || 0;\n        this._y += y || 0;\n        return this;\n    }\n\n    /**\n     * Moves this Rectangle to the passed `x`, `y` position. Size is maintained.\n     * @param {Number} x The new X position.\n     * @param {Number} y The new Y position.\n     * @returns {Core.helper.util.Rectangle}  This Rectangle;\n     */\n    moveTo(x, y) {\n        if (x != null) {\n            this._x = x;\n        }\n        if (y != null) {\n            this._y = y;\n        }\n        return this;\n    }\n\n    /**\n     * Returns the vector which would translate this Rectangle (or Point) to the same position as the other Rectangle (or point)\n     * @param {Core.helper.util.Rectangle|Core.helper.util.Point} other The Rectangle or Point to calculate the delta to.\n     * @returns {Array} Returns a vector using format `[deltaX, deltaY]`\n     * @internal\n     */\n    getDelta(other) {\n        return [other.x - this.x, other.y - this.y];\n    }\n\n    /**\n     * The center point of this rectangle.\n     * @property {Core.helper.util.Point}\n     */\n    get center() {\n        return new Rectangle.Point(this.x + this.width / 2, this.y + this.height / 2);\n    }\n\n    /**\n     * Get/sets the X coordinate of the Rectangle. Note that this does *not* translate the\n     * Rectangle. The requested {@link #property-width} will change.\n     * @property {Number}\n     */\n    set x(x) {\n        const xDelta = x - this._x;\n\n        this._x = x;\n        this._width -= xDelta;\n    }\n\n    get x() {\n        return this._x;\n    }\n\n    get start() {\n        return this.left;\n    }\n\n    /**\n     * Alias for x. To match DOMRect.\n     * @property {Number}\n     */\n    set left(x) {\n        this.x = x;\n    }\n\n    get left() {\n        return this.x;\n    }\n\n    /**\n     * Alias for y. To match DOMRect.\n     * @property {Number}\n     */\n    set top(y) {\n        this.y = y;\n    }\n\n    get top() {\n        return this.y;\n    }\n\n    /**\n     * Get/sets the Y coordinate of the Rectangle. Note that this does *not* translate the\n     * Rectangle. The requested {@link #property-height} will change.\n     * @property {Number}\n     */\n    set y(y) {\n        const yDelta = y - this._y;\n\n        this._y = y;\n        this._height -= yDelta;\n    }\n\n    get y() {\n        return this._y;\n    }\n\n    /**\n     * Get/sets the width of the Rectangle. Note that the requested {@link #property-right} will change.\n     * @property {Number}\n     */\n    set width(width) {\n        this._width = width;\n    }\n\n    get width() {\n        return this._width;\n    }\n\n    /**\n     * Get/sets the height of the Rectangle. Note that the requested {@link #property-bottom} will change.\n     * @property {Number}\n     */\n    set height(height) {\n        this._height = height;\n    }\n\n    get height() {\n        return this._height;\n    }\n\n    /**\n     * Get/sets the right edge of the Rectangle. Note that the requested {@link #property-width} will change.\n     *\n     * The right edge value is exclusive of the calculated rectangle width. So x=0 and right=10\n     * means a width of 10.\n     * @property {Number}\n     */\n    set right(right) {\n        this._width = right - this._x;\n    }\n\n    get right() {\n        return this._x + this._width;\n    }\n\n    get end() {\n        return this.right;\n    }\n\n    /**\n     * Get/sets the bottom edge of the Rectangle. Note that the requested {@link #property-height} will change.\n     *\n     * The bottom edge value is exclusive of the calculated rectangle height. So y=0 and bottom=10\n     * means a height of 10.\n     * @property {Number}\n     */\n    set bottom(bottom) {\n        this._height = bottom - this._y;\n    }\n\n    get bottom() {\n        return this._y + this._height;\n    }\n\n    getStart(rtl, horizontal = true) {\n        if (horizontal) {\n            return rtl ? this.right : this.left;\n        }\n\n        return this.top;\n    }\n\n    getEnd(rtl, horizontal = true) {\n        if (horizontal) {\n            return rtl ? this.left : this.right;\n        }\n\n        return this.bottom;\n    }\n\n    get area() {\n        return this.width * this.height;\n    }\n\n    set minWidth(minWidth) {\n        const\n            me = this;\n\n        if (isNaN(minWidth)) {\n            me._minWidth = null;\n        }\n        else {\n            me._minWidth = Number(minWidth);\n\n            // If this is being used as an alignment calculation rectangle, minWidth has a different meaning.\n            // It does not mean that the width has to be at least this value. It means that under constraint,\n            // it is willing to shrink down to that value before falling back to another align position.\n            if (!me.isAlignRectangle) {\n                me.width = Math.max(me.width, me._minWidth);\n            }\n        }\n    }\n\n    get minWidth() {\n        return this._minWidth;\n    }\n\n    set minHeight(minHeight) {\n        const\n            me = this;\n\n        if (isNaN(minHeight)) {\n            me._minHeight = null;\n        }\n        else {\n            me._minHeight = Number(minHeight);\n\n            // If this is being used as an alignment calculation rectangle, minHeight has a different meaning.\n            // It does not mean that the height has to be at least this value. It means that under constraint,\n            // it is willing to shrink down to that value before falling back to another align position.\n            if (!me.isAlignRectangle) {\n                me.height = Math.max(me.height, me._minHeight);\n            }\n        }\n    }\n\n    get minHeight() {\n        return this._minHeight;\n    }\n\n    /**\n     * Modifies the bounds of this Rectangle by the specified deltas.\n     * @param {Number} x How much to *add* to the x position.\n     * @param {Number} y  How much to *add* to the y position.\n     * @param {Number} width  How much to add to the width.\n     * @param {Number} height  How much to add to the height.\n     * @returns {Core.helper.util.Rectangle} This Rectangle\n     */\n    adjust(x, y, width, height) {\n        const me = this;\n        me.x += x;\n        me.y += y;\n        me.width += width;\n        me.height += height;\n        return me;\n    }\n\n    /**\n     * Modifies the bounds of this rectangle by expanding them by the specified amount in all directions.\n     * The parameters are read the same way as CSS margin values.\n     *\n     * - If one value is passed, all edges are inflated by that value.\n     * - If two values are passed they are top/bottom inflation and left/right inflation.\n     * - If four values are passed, that's top, right, bottom, left.\n     * @param {Number} amount How much to inflate, or the top value if more than one values passed.\n     * @param {Number} right How much to inflate the right side, or both left and right is only two values passed.\n     * @param {Number} bottom How much to inflate the bottom side.\n     * @param {Number} left How much to inflate the left side.\n     * @returns {Core.helper.util.Rectangle} This Rectangle\n     * @internal\n     */\n    inflate(top, right = top, bottom = top, left = right) {\n        if (Array.isArray(top)) {\n            [top, right, bottom, left] = parseEdges(top);\n        }\n        return this.adjust(-left, -top, right, bottom);\n    }\n\n    /**\n     * Modifies the bounds of this rectangle by reducing them by the specified amount in all directions.\n     * The parameters are read the same way as CSS margin values.\n     *\n     * - If one value is passed, all edges are deflated by that value.\n     * - If two values are passed they are top/bottom deflation and left/right deflation.\n     * - If four values are passed, that's top, right, bottom, left.\n     * @param {Number} amount How much to deflate, or the top value if more than one values passed.\n     * @param {Number} right How much to deflate the right side, or both left and right is only two values passed.\n     * @param {Number} bottom How much to deflate the bottom side.\n     * @param {Number} left How much to deflate the left side.\n     * @returns {Core.helper.util.Rectangle} This Rectangle\n     * @internal\n     */\n    deflate(top, right = top, bottom = top, left = right) {\n        if (Array.isArray(top)) {\n            [top, right, bottom, left] = parseEdges(top);\n        }\n        return this.adjust(left, top, -right, -bottom);\n    }\n\n    /**\n     * Attempts constrain this Rectangle into the passed Rectangle. If the `strict` parameter is `true`\n     * then this method will return `false` if constraint could not be achieved.\n     *\n     * If this Rectangle has a `minHeight` or `minWidth` property, size will be adjusted while attempting to constrain.\n     *\n     * Right and bottom are adjusted first leaving the top and bottom sides to \"win\" in the case that this Rectangle overflows\n     * the constrainTo Rectangle.\n     * @param {Core.helper.util.Rectangle} constrainTo The Rectangle to constrain this Rectangle into if possible.\n     * @param {Boolean} strict Pass `true` to return false, and leave this Rectangle unchanged if constraint\n     * could not be achieved.\n     * @returns {Core.helper.util.Rectangle|Boolean} This Rectangle. If `strict` is true, and constraining was not successful, `false`.\n     */\n    constrainTo(constrainTo, strict) {\n        const\n            me             = this,\n            originalHeight = me.height,\n            originalY      = me.y,\n            minWidth       = me.minWidth || me.width,\n            minHeight      = me.minHeight || me.height;\n\n        if (me.height >= constrainTo.height) {\n            // If we're strict, fail if we could *never* fit into available height.\n            if (strict && minHeight > constrainTo.height) {\n                return false;\n            }\n            // If we are >= constrain height, we will have to be at top edge of constrainTo\n            me._y = constrainTo.y;\n            me.height = constrainTo.height;\n        }\n\n        if (me.width >= constrainTo.width) {\n            // If we're strict, fail if we could *never* fit into available width.\n            if (strict && minWidth > constrainTo.width) {\n                // Could not be constrained; undo any previous attempt with height\n                me.y = originalY;\n                me.height = originalHeight;\n                return false;\n            }\n            // If we are >= constrain width, we will have to be at left edge of constrainTo\n            me._x = constrainTo.x;\n            me.width = constrainTo.width;\n        }\n\n        let overflow = me.bottom - constrainTo.bottom;\n\n        // Overflowing the bottom side, translate upwards.\n        if (overflow > 0) {\n            me.translate(0, -overflow);\n        }\n\n        overflow = me.right - constrainTo.right;\n\n        // Overflowing the right side, translate leftwards.\n        if (overflow > 0) {\n            me.translate(-overflow);\n        }\n\n        overflow = constrainTo.y - me.y;\n\n        // Now, after possible translation upwards, we overflow the top, translate downwards.\n        if (overflow > 0) {\n            me.translate(0, overflow);\n        }\n\n        overflow = constrainTo.x - me.x;\n\n        // Now, after possible translation leftwards, we overflow the left, translate rightwards.\n        if (overflow > 0) {\n            me.translate(overflow);\n        }\n\n        return me;\n    }\n\n    /**\n     * Returns a cloned version of this Rectangle aligned to a target Rectangle, or element or {@link Core.widget.Widget}.\n     * @param {Object} spec Alignment specification.\n     * @param {HTMLElement|Core.widget.Widget|Core.helper.util.Rectangle} spec.target The Widget or element or Rectangle to align to.\n     * @param {Number[]} [spec.anchorSize] The `[width, height]` of the anchor pointer when in `top` position. The\n     * width is the baseline length, and the height is the height of the arrow. If passed, the anchor position\n     * will be calculated to be at the centre of the overlap of the two aligned edges and returned in the `anchor`\n     * property of the resulting Rectangle:\n     *\n     *     {\n     *         edge: 'top',         // or 'right' or 'bottom' or 'left'\n     *         x/y: offset          // dimension to translate and value to translate by.\n     *     }\n     *\n     * @param {Object} [spec.anchorPosition] an `{ x: n, y: n }` anchor translation to be used *if the requested alignment\n     * succeeds without violating constraints*. If a fallback alignment is used, the anchor will be centered in the\n     * overlap of the aligned edges as usual.\n     * @param {Boolean} [spec.overlap] True to allow this to overlap the target.\n     * @param {String} spec.align The edge alignment specification string, specifying two points to bring together.\n     *\n     * Each point is described by an edge initial (`t` for top edge, `b` for bottom edge etc) followed\n     * by a percentage along that edge.\n     *\n     * So the form would be `[trblc][n]-[trblc][n].` The `n` is the percentage offset along that edge\n     * which defines the alignment point. This is not valid for alignment point `c` which means the center point.\n     *\n     * For example `t0-b0' would align this Rectangle's top left corner with the bottom left corner of the `target`.\n     * @param {HTMLElement|Core.widget.Widget|Core.helper.util.Rectangle} [spec.constrainTo] The Widget or Element or Rectangle to constrain to.\n     * If the requested alignment cannot be constrained (it will first shrink the resulting Rectangle according\n     * to the `minWidth` and `minHeight` properties of this rectangle), then it will try aligning at other edges\n     * (honouring the `axisLock` option), and pick the fallback alignment which results in the shortest translation.\n     * @param {Boolean} [spec.axisLock] Specify as a truthy value to fall back to aligning against the opposite\n     * edge first if the requested alignment cannot be constrained into the `constrainTo` option. If specified\n     * as `'flexible'`, then fallback will continue searching for solutions on the remaining two sides.\n     * @param {Boolean} [spec.matchSize] When aligning edge-to-edge, match the length of the aligned-to\n     * edge of the target. This is only honored when `axisLock` is enabled and alignment succeeds on the requested axis.\n     * If __not__ aligning edge-to-edge, `matchSize` matches both dimensions of the target.\n     * @param {Number|Number[]} [spec.offset] The 'x' and 'y' offset values to create an extra margin round the target\n     * to offset the aligned widget further from the target. May be configured as -ve to move the aligned widget\n     * towards the target - for example producing the effect of the anchor pointer piercing the target.\n     * @param {Number|Number[]} [spec.constrainPadding] The amount of pixels to pad from the `constrainTo` target,\n     * either a single value, or an array of values in CSS edge order.\n     * @param {Boolean} [spec.rtl] Pass as true if this is being used in an RTL environment, and aligning 0% to\n     * 100% along a horizontal edge must proceed from right to left.\n     * @returns {Core.helper.util.Rectangle} A new Rectangle aligned as requested if possible, but if the requested position violates\n     * the `constrainTo` Rectangle, the shortest translation from the requested position which obeys constraints will be used.\n     */\n    alignTo(spec) {\n        //<debug>\n        if (!spec.target && !spec.position) {\n            throw new Error('alignTo must be either passed a target to position by, or a position Point to position at');\n        }\n        //</debug>\n\n        // The target and constrainTo may be passed as HtmlElements or Widgets.\n        // If so, extract the Rectangles without mutating the incoming spec.\n        let result      = this.clone(),\n            {\n                target,\n                constrainTo,\n                constrainPadding\n            } = spec,\n            calculatedAnchorPosition, zone, resultZone, constrainingToViewport;\n\n        if (target && !target.isRectangle) {\n            target = Rectangle.from(target.element ? target.element : target);\n        }\n        if (constrainTo) {\n            if (!constrainTo.isRectangle) {\n                // Viewport is denoted by requesting window or document.\n                // document.body may overflow the viewport, so this must not be evaluated as the viewport.\n                constrainingToViewport = constrainTo === globalThis || constrainTo === document;\n\n                // When rectangle is constrained to some element on the page other than window/document, page scroll\n                // should not be taken into account\n                const ignorePageScroll = 'ignorePageScroll' in spec ? spec.ignorePageScroll : !constrainingToViewport;\n\n                constrainTo = Rectangle.from(constrainTo.element ? constrainTo.element : constrainTo, null, ignorePageScroll);\n            }\n\n            // Shrink the constrainTo Rectangle to account for the constrainPadding\n            if (constrainPadding) {\n                // An array may be used to specify sides in the CSS standard order.\n                // One value means all sides reduce by the same amount.\n                constrainPadding = parseEdges(constrainPadding);\n\n                // If we are aligning to an element which is closer to an edge than the\n                // constrainPadding value for that edge, override the constrainPadding so that\n                // the visual alignment is maintained.\n                constrainPadding[0] = Math.min(constrainPadding[0], target.top);\n                constrainPadding[1] = Math.min(constrainPadding[1], constrainTo.right - target.right);\n                constrainPadding[2] = Math.min(constrainPadding[0], constrainTo.bottom - target.bottom);\n                constrainPadding[3] = Math.min(constrainPadding[0], target.left);\n\n                // Must clone a passed Rectangle so as not to mutate objects passed in.\n                constrainTo = constrainTo.deflate.apply(constrainTo.clone(), constrainPadding);\n            }\n        }\n        const me                  = this,\n            targetOffsets       = createOffsets(spec.offset),\n            {\n                align,\n                axisLock,\n                anchorSize,\n                anchorPosition,\n                matchSize,\n                position,\n                rtl\n            }                   = spec,\n            alignSpec           = parseAlign(align, rtl),\n            targetConstrainRect = constrainTo && constrainTo.clone(),\n            constraintZones     = [],\n            zoneOrder           = [{\n                zone : zone = alignSpec.startZone,\n                align\n            }],\n            matchDimension      = matchSize && matchDimensions[alignSpec.startZone & 1],\n            originalSize        = me[matchDimension];\n\n        // Match the size of the edge we are aligning against\n        if (matchDimension && axisLock) {\n            result[matchDimension] = target[matchDimension];\n        }\n        // If we are not aligning to an edge, match both diensions.\n        else if (!alignSpec.edgeAligned && matchSize) {\n            result.width = target.width;\n            result.height = target.height;\n        }\n\n        // Ensure we will fit before trying\n        if (constrainTo) {\n            result.constrainTo(constrainTo);\n        }\n\n        // If we are aligning edge-to-edge, then plan our fallback strategy when we are constrained.\n        if (constrainTo && alignSpec.startZone != null) {\n            // Create the list of zone numbers and alignments to try in the preferred order.\n            //\n            // In the case of axisLock, go through the zones by each axis.\n            // So if they asked for t-b, which is zone 2,\n            // the array will be [2, 0, 3, 1] (t-b, b-t, r-l, l-r)\n            if (axisLock) {\n                // First axis flip has to maintain the offset along that axis.\n                // so align: l0-r0 has to flip to align: r0-l0. See submenu flipping when\n                // constrained to the edge. It flips sides but maintains vertical position.\n                zoneOrder.push({\n                    zone  : zone = (zone + 2) % 4,\n                    align : flipAlign(alignSpec)\n                });\n\n                // Only try the other axis is axisLock is 'flexible'\n                if (axisLock === 'flexible') {\n                    zoneOrder.push({\n                        zone  : zone = (alignSpec.startZone + 1) % 4,\n                        align : defaultAlignments[zone]\n                    });\n                    zoneOrder.push({\n                        zone  : zone = (zone + 2) % 4,\n                        align : defaultAlignments[zone]\n                    });\n                }\n            }\n            // Go through the zones in order from the requested start.\n            // So if they asked for t-b, which is zone 2,\n            // the array will be [2, 3, 0, 1] (t-b, r-l, b-t, l-r)\n            else {\n                for (let i = 1; i < 4; i++) {\n                    zoneOrder.push({\n                        zone  : zone = (zone + 1) % 4,\n                        align : defaultAlignments[zone]\n                    });\n                }\n            }\n        }\n\n        // Allow them to pass anchorPosition: {x: 10} to indicate that after a fully successful,\n        // unconstrained align, the anchor should be 10px from the start.\n        if (anchorPosition) {\n            const pos = (alignSpec.startZone & 1) ? 'y' : 'x';\n\n            calculatedAnchorPosition = {\n                [pos] : anchorPosition[pos],\n                edge  : edgeNames[(alignSpec.startZone + 2) % 4]\n            };\n        }\n\n        // Keep the target within reach. If it's way outside, pull it back so that it's only just outside);\n        if (targetConstrainRect && target) {\n            targetConstrainRect.adjust(-target.width, -target.height, target.width, target.height);\n            target.constrainTo(targetConstrainRect);\n        }\n\n        // As part of fallback process when fitting within constraints, result may shrink to our minima\n        result.minWidth = me.minWidth;\n        result.minHeight = me.minHeight;\n\n        // We're being commanded to try to align at a position\n        if (position) {\n            result.moveTo(position.x, position.y);\n            if (constrainTo) {\n                result.constrainTo(constrainTo);\n            }\n        }\n\n        // We're aligning to a Target Rectangle within a ConstrainTo Rectangle, taking into account\n        // a possible anchor pointer, or x/y offsets. Here's the situation:\n        //\n        //                             <-- ConstrainTo Rectangle -->\n        //  +-----------------------------------+--------------------+-------------------------+\n        //  |                                   |                    |                         |\n        //  |                                   |                    |                         |\n        //  |                                   |                    |                         |\n        //  |-----------------------------------+--------------------+-------------------------+\n        //  |                                   |          ▼         |                         |\n        //  |                                   | +----------------+ |                         |\n        //  |                                   | |                | |                         |\n        //  |                                   | |                | |                         |\n        //  |                                   |▶|     Target     |◀|                         |\n        //  |                                   | |                | |                         |\n        //  |                                   | |                | |                         |\n        //  |                                   | +----------------+ |                         |\n        //  |                                   |          ▲         |                         |\n        //  +-----------------------------------+--------------------+-------------------------|\n        //  |                                   |                    |                         |\n        //  |                                   |                    |                         |\n        //  |                                   |                    |                         |\n        //  +-----------------------------------+--------------------+-------------------------+\n        //\n        // Which results in the four possible constraint zones above, which we index in standard CSS order.\n        //\n        // Top    = 0\n        // Right  = 1\n        // Bottom = 2\n        // Left   = 3\n        //\n        // If the initially requested alignment is not within the constrainTo rectangle\n        // then, calculate these four, and then loop through them, beginning at the requested one,\n        // quitting when we find a position which does not violate constraints. This includes\n        // shrinking the aligning Rectangle towards its minima to attempt a fit.\n        //\n        // The final fallback, if there is no position which does not violate constraints\n        // is to position in whichever of the four rectangles has the largest area shrinking overflowing\n        // dimensions down to minima if specified.\n        //\n        else {\n            // Offsets: If we are using an anchor to move away from the target, use anchor height in both dimensions.\n            // It's rotated so that \"height\" always has the same meaning. It's the height of the arrow.\n            const\n                centerAligned = alignSpec.myEdge === 'c' || alignSpec.targetEdge === 'c',\n                offsets       = anchorSize && !centerAligned ? [anchorSize[1] + targetOffsets[0], anchorSize[1] + targetOffsets[1]] : targetOffsets,\n                targetPoint   = target.getAlignmentPoint(alignSpec.targetAlignmentPoint, offsets),\n                myPoint       = result.getAlignmentPoint(alignSpec.myAlignmentPoint);\n\n            result.translate(targetPoint[0] - myPoint[0], targetPoint[1] - myPoint[1]);\n\n            // If an overlapping position was requested, then we are *not* trying out those four zones.\n            // We just respect constraint, and that's it.\n            let overlap = result.intersect(target, true);\n\n            // If we are aligned over our target, we just obey that within any constraint.\n            // No complex edge alignment attempts to fall back to.\n            if (overlap) {\n                if (constrainTo) {\n                    result.constrainTo(constrainTo);\n                }\n                resultZone = alignSpec.startZone;\n\n                result.translate(...offsets);\n            }\n            // Aligned to outside of our target, and we need to be constrained\n            else if (constrainTo && !constrainTo.contains(result)) {\n                const\n                    requestedResult = result.clone(),\n                    solutions       = [];\n                let zone, largestZone;\n\n                // Any configured anchorPosition becomes invalid now that we're having to move the resulting zone\n                // to some unpredictable new place where it fits. It will have to be calculated based upon where\n                // we end up aligning.\n                calculatedAnchorPosition = null;\n\n                // Calculate the four constraint zones illustrated above.\n                // Top\n                constraintZones[0] = zone = constrainTo.clone();\n                zone.bottom = target.y - offsets[1];\n\n                // Right\n                constraintZones[1] = zone = constrainTo.clone();\n                zone.x = target.right + offsets[0];\n\n                // Bottom\n                constraintZones[2] = zone = constrainTo.clone();\n                zone.y = target.bottom + offsets[1];\n\n                // Left\n                constraintZones[3] = zone = constrainTo.clone();\n                zone.right = target.x - offsets[0];\n\n                // Start from the preferred edge and see if we are able to constrain to within each rectangle\n                for (let i = 0; i < zoneOrder.length; i++) {\n                    // Revert to incoming dimension for fallback out of axisLock\n                    if (matchDimension && i == 2) {\n                        result[matchDimension] = originalSize;\n                    }\n\n                    zone = constraintZones[resultZone = zoneOrder[i].zone];\n\n                    // Perform unconstrained alignment at the calculated alignment for the zone\n                    result = result.alignTo({\n                        target  : target,\n                        offsets : offsets,\n                        align   : zoneOrder[i].align\n                    });\n\n                    // If we are able to strictly constrain into this area, then it's one of the possible solutions.\n                    // We choose the solution which result in the shortest translation from the initial position.\n                    if (result.constrainTo(zone, true)) {\n                        solutions.push({\n                            result : result,\n                            zone   : resultZone\n                        });\n\n                        // If this successful constraint is at the requested alignment, or at a fallback\n                        // alignment which has used min size constraints, then that's the correct solution.\n                        // If there's no size compromising, we have to pick the shortest translation.\n                        if (!largestZone || result.width < me.width || result.height < me.height) {\n                            result.align = zoneOrder[i].align;\n                            break;\n                        }\n                    }\n\n                    // Cache the largest zone we find in case we need the final fallback.\n                    if (!largestZone || zone.area > largestZone.area) {\n                        const r = result.clone();\n\n                        // And just move the result clone into the edge zone\n                        switch (resultZone) {\n                            // Top\n                            case 0:\n                                r.moveTo(null, zone.bottom - r.height);\n                                break;\n                            // Right\n                            case 1:\n                                r.moveTo(zone.left);\n                                break;\n                            // Bottom\n                            case 2:\n                                r.moveTo(null, zone.top);\n                                break;\n                            // Left\n                            case 3:\n                                r.moveTo(zone.right - r.width);\n                                break;\n                        }\n\n                        largestZone = {\n                            area   : zone.area,\n                            result : r,\n                            zone   : resultZone\n                        };\n                    }\n                }\n\n                // The loop found at least one solution\n                if (solutions.length) {\n                    // Multiple fallbacks with no axisLock.\n                    // Use the solution which resulted in the shortest translation distance from the requested alignment.\n                    if (solutions.length > 1 && !axisLock) {\n                        solutions.sort((s1, s2) => {\n                            const\n                                s1TranslationDistance = Math.sqrt((requestedResult.x - s1.result.x) ** 2 + (requestedResult.y - s1.result.y) ** 2),\n                                s2TranslationDistance = Math.sqrt((requestedResult.x - s2.result.x) ** 2 + (requestedResult.y - s2.result.y) ** 2);\n\n                            return s1TranslationDistance - s2TranslationDistance;\n                        });\n                    }\n                    // Initial success, or axisLock. Use first successful solution.\n                    result = solutions[0].result;\n                    resultZone = solutions[0].zone;\n                }\n                // No solutions found - use the largest rectangle.\n                else {\n                    result = largestZone.result;\n                    resultZone = largestZone.zone;\n\n                    // When we are constraining to the viewport, we must still must be constrained,\n                    // even after we've given up making it align *and* constrain.\n                    if (constrainingToViewport) {\n                        result.constrainTo(constrainTo);\n                    }\n                }\n            }\n            else {\n                resultZone = alignSpec.startZone;\n            }\n\n            result.zone = resultZone;\n            result.overlap = overlap = result.intersect(target, true);\n\n            // If they included an anchor, calculate its position along its edge.\n            // TODO: Handle the edge overlap being less than anchor width.\n            if (anchorSize && !overlap) {\n                // If we were passed an anchorPosition, and it has remained valid (meaning the requested\n                // alignment succeeded with no constraint), then anchorPosition will be set. If not,\n                // we have to calculate it based upon the aligned edge.\n                if (!calculatedAnchorPosition) {\n                    const\n                        isLeftOrRight = resultZone & 1,\n                        start         = isLeftOrRight ? 'y' : 'x',\n                        end           = isLeftOrRight ? 'bottom' : 'right',\n                        startValue    = Math.max(target[start], result[start]),\n                        endValue      = Math.min(target[end], result[end]);\n                    let anchorStart = (startValue + (endValue - startValue) / 2 - anchorSize[0] / 2);\n                    const anchorEnd = anchorStart + anchorSize[0];\n\n                    if (anchorEnd > result[end]) {\n                        anchorStart -= (anchorEnd - result[end]);\n                    }\n                    if (anchorStart < result[start]) {\n                        anchorStart += (result[start] - anchorStart);\n                    }\n\n                    // Return an anchor property which will have an x or y property and an edge name onto which the\n                    // arrow should be aligned.\n                    calculatedAnchorPosition = {\n                        [start] : anchorStart - result[start],\n                        edge    : edgeNames[(resultZone + 2) % 4]\n                    };\n                }\n\n                result.anchor = calculatedAnchorPosition;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Returns the `[x, y]` position of the specified anchor point of this Rectangle in <edge><offset> format.\n     * for example passing \"t50\" will return the centre point of the top edge, passing \"r0\" will return the start\n     * position of the right edge (the top right corner).\n     *\n     * Note that the offset defaults to 50, so \"t\" means the centre of the top edge.\n     * @param {String} alignmentPoint The alignment point to calculate. Must match the RegExp `[trbl]\\d*`\n     * @param {Number[]} margins The `[x, y]` margins to add from the left/right, top/bottom edge.\n     * @internal\n     */\n    getAlignmentPoint(alignmentPoint, margins = zeroOffsets) {\n        //<debug>\n        if (typeof alignmentPoint !== 'string' || !alignmentPoint.match(alignPointRe)) {\n            throw new Error('Alignment point must be of the form /[trblc]\\\\d*/');\n        }\n        //</debug>\n\n        const\n            me         = this,\n            parts      = alignPointRe.exec(alignmentPoint),\n            edge       = parts[1].toLowerCase(),\n            edgeOffset = Math.min(Math.max(parseInt(parts[2] || 50), 0), 100) / 100;\n\n        switch (edge) {\n            case 't':\n                return [me.x + me.width * edgeOffset, me.y - margins[1]];\n            case 'r':\n                return [me.right + margins[0], me.y + me.height * edgeOffset];\n            case 'b':\n                return [me.x + me.width * edgeOffset, me.bottom + margins[1]];\n            case 'l':\n                return [me.x - margins[0], me.y + me.height * edgeOffset];\n            case 'c': {\n                return [me.x + me.width / 2, me.y + me.height / 2];\n            }\n        }\n    }\n\n    /**\n     * Highlights this Rectangle using the highlighting effect of {@link Core.helper.DomHelper}\n     * on a transient element which encapsulates the region's area.\n     */\n    highlight() {\n        const\n            me               = this,\n            highlightElement = DomHelper.createElement({\n                parent : document.body,\n                style  : `position:absolute;z-index:9999999;pointer-events:none;\n                            left:${me.x}px;top:${me.y}px;width:${me.width}px;height:${me.height}px`\n            });\n\n        return DomHelper.highlight(highlightElement).then(() => highlightElement.remove());\n    }\n\n    /**\n     * Visualizes this Rectangle by adding a DOM element which encapsulates the region's area into the provided parent element.\n     * @param {DomConfig} config Element config object\n     * @returns {Element} The highlight element\n     * @internal\n     */\n    visualize(config, asDomConfig) {\n        const\n            me        = this,\n            domConfig = ObjectHelper.merge({\n                style : {\n                    left          : `${me.x}px`,\n                    top           : `${me.y}px`,\n                    width         : `${me.width}px`,\n                    height        : `${me.height}px`,\n                    pointerEvents : 'none',\n                    // If this visualization is provided a CSS class, let outside handle position + z-index\n                    ...(config.class ? {  } : { position : 'absolute', 'z-index' : 9999999 })\n                }\n            }, config);\n        return asDomConfig ? domConfig : DomHelper.createElement(domConfig);\n    }\n\n    toString(delimiter = ',') {\n        return [`${this.top}px`, `${this.right}px`, `${this.bottom}px`, `${this.left}px`].join(delimiter);\n    }\n\n    //<debug>\n    show(duration = 5000) {\n        let me = this;\n\n        // Passing an element or Rectangle means it's relative to that.\n        // For example an event in a scheduler.\n        const relativeTo = duration.isRectangle ? duration : (duration.nodeType === Element.ELEMENT_NODE ? Rectangle.from(duration) : null);\n        if (relativeTo) {\n            duration = arguments[1];\n            me = me.clone();\n            me.translate(relativeTo.x, relativeTo.y);\n        }\n        const\n            highlightElement = me.visualize({\n                parent : document.body,\n                style  : {\n                    left            : 0,\n                    top             : 0,\n                    transform       : `translate(${me.x}px, ${me.y}px)`,\n                    backgroundColor : typeof duration === 'string' ? duration : '#52a0db',\n                    opacity         : 0.4\n                }\n            }),\n            unhighlight      = () => document.body.removeChild(highlightElement);\n\n        setTimeout(unhighlight, typeof duration === 'number' ? duration : 5000);\n\n        return highlightElement;\n    }\n\n    //</debug>\n}\n","import Objects from './Objects.js';\nimport StringHelper from '../StringHelper.js';\n\n/**\n * @module Core/helper/util/DomClassList\n */\n\nconst\n    // Presence of '[' is likely an \"[object Object]\" or other bogus stringification\n    invalidClsRe  = /\\[|undefined|null/,\n    valueSymbol   = Symbol('value'),\n    lengthSymbol  = Symbol('length');\n\n/**\n * This class encapsulates a list of CSS classes which can be set as the `className`\n * on an `HTMLElement`.\n *\n * Properties names set on this class equate to *adding* a class if the property's value\n * is _truthy_, or removing a class if the value is _falsy_.\n *\n * ```javascript\n * const myClassList = new DomClassList('b-test-button');\n *\n * myClassList.add('test-class');\n * myClassList.important = 1;\n *\n * myHtmlElement.className = myClassList; // Sets it to \"b-test-button test-class important\"\n * ```\n */\nexport default class DomClassList {\n    static change(cls, add, remove, as = 'string') {\n        remove = DomClassList.normalize(remove, 'object');\n\n        const after = DomClassList.normalize(cls, 'array').filter(c => !remove[c]);\n\n        if (add) {\n            add = DomClassList.normalize(add, 'array');\n\n            for (let i = 0; i < add.length; ++i) {\n                if (!after.includes(add[i])) {\n                    after.push(add[i]);\n                }\n            }\n        }\n\n        return DomClassList.normalize(after, as);\n    }\n\n    static from(classes, returnEmpty) {\n        if (classes) {\n            if (classes.isDomClassList) {\n                returnEmpty = returnEmpty ?? true;\n            }\n            else {\n                returnEmpty = returnEmpty ?? (Objects.isObject(classes) && !Objects.isEmpty(classes));\n                classes = new DomClassList(classes);\n            }\n\n            if (!classes.value && !returnEmpty) {\n                classes = null;\n            }\n        }\n\n        return classes || (returnEmpty ? new DomClassList() : null);\n    }\n\n    /**\n     * Converts a class name of any understood type to a desired form.\n     * @param {String|String[]|Object|Set|Map|HTMLElement} cls\n     * @param {String} as Pass `'object'` to return an object with the class names as its keys (all keys will have a\n     * value of `true`), or pass `'array'` to return an array of class names, or pass `'string'` (the default) to\n     * return a space-separated string of class names.\n     * @returns {String|String[]|Object}\n     * @internal\n     */\n    static normalize(cls, as = 'string') {\n        cls = cls || '';  // promote null to '' to avoid typeof snag\n\n        const\n            type = typeof cls,\n            asArray = as === 'array',\n            asObject = as === 'object',\n            asString = !asArray && !asObject;\n\n        let isString = type === 'string',\n            c, i, ret;\n\n        if (type === 'object') {\n            if (cls.nodeType === Element.ELEMENT_NODE && typeof cls.getAttribute === 'function') {\n                cls = cls.getAttribute('class') || '';  // cannot use className for SVG el's\n                isString = true;\n            }\n            else if (cls?.isDomClassList) {\n                cls = cls.values;\n            }\n            else if (cls instanceof DOMTokenList) {\n                cls = Array.from(cls);\n            }\n            else if (cls instanceof Map) {\n                cls = Array.from(cls.keys()).filter(k => cls.get(k));\n            }\n            else if (cls instanceof Set) {\n                cls = Array.from(cls);\n            }\n            else if (!Array.isArray(cls)) {\n                cls = Objects.getTruthyKeys(cls);\n            }\n        }\n\n        if (isString) {\n            // Pass through Set to ensure only unique class names\n            cls = [...new Set(StringHelper.split(cls))];\n        }\n\n        // cls is now an array\n        for (i = cls.length; i-- > 0; /* empty */) {\n            c = cls[i];\n\n            //<debug>\n            if (invalidClsRe.test(c)) {\n                throw new Error(`Invalid CSS class name \"${c}\"`);\n            }\n            //</debug>\n\n            if (!c.length) {\n                cls.splice(i, 1);\n            }\n            else if (c.includes(' ')) {\n                cls.splice(i, 1, ...StringHelper.split(c));\n            }\n        }\n\n        if (asArray) {\n            ret = cls;\n        }\n        else if (asString) {\n            ret = cls.join(' ');\n        }\n        else {\n            ret = Object.create(null);\n\n            for (i = 0; i < cls.length; ++i) {\n                ret[cls[i]] = true;\n            }\n        }\n\n        return  ret;\n    }\n\n    /**\n     * Initializes a new DomClassList.\n     * @param {...String|Object} classes The CSS classes as strings or objects.\n     * @function constructor\n     */\n    constructor(...classes) {\n        this.process(1, classes);\n    }\n\n    /**\n     * Clears all class names from this DomClassList instance.\n     * @returns {Core.helper.util.DomClassList} this DomClassList.\n     */\n    clear() {\n        // Keep internal class same shape. Do not delete members.\n        for (const key in this) {\n            this[key] = false;\n        }\n        return this;\n    }\n\n    /**\n     * Sets this DomClassList instance to represent the classes passed as either strings or objects.\n     * @returns {Core.helper.util.DomClassList} this DomClassList.\n     */\n    set(...classes) {\n        return this.clear().process(1, classes);\n    }\n\n    // To gain some speed in DomHelper.sync(), faster than instanceof etc\n    get isDomClassList() {\n        return true;\n    }\n\n    /**\n     * Returns a clone of this DomClassList with all the same keys set.\n     * @returns {Core.helper.util.DomClassList} A clone of this DomClassList.\n     */\n    clone() {\n        return new DomClassList(this);\n    }\n\n    /**\n     * Returns a Boolean value, indicating whether this ClassList has the specified CSS class name.\n     * @param {String} className CSS class name to check\n     * @returns {Boolean} true if this ClassList contains the passed CSS class name, false otherwise\n     */\n    contains(className) {\n        if (typeof className === 'string' && className) {\n            return Boolean(this[className]);\n        }\n        return false;\n    }\n\n    // An instance of this class may be assigned directly to an element's className\n    // it will be coerced to a string value using this method.\n    toString() {\n        // Adding space at the end if there is content to make concatenation code simpler in renderers.\n        return this.length ? `${this.value} ` : '';\n    }\n\n    toJSON() {\n        return this.toString();\n    }\n\n    /**\n     * Analogous to string.trim, returns the string value of this `DomClassList` with no trailing space.\n     * @returns {String} A concatenated string value of all the class names in this `DomClassList`\n     * separated by spaces.\n     */\n    trim() {\n        return this.value;\n    }\n\n    /**\n     * Compares this DomClassList to another DomClassList (or class name string of space separated classes).\n     * If the same class names (regardless of order) are present, the two are considered equal.\n     *\n     * So `new DomClassList('foo bar bletch').isEqual('bletch bar foo')` would return `true`\n     * @param {Core.helper.util.DomClassList|String} other The `DomClassList` or string of classes to compare to.\n     * @returns {Boolean} `true` if the two contain the same class names.\n     */\n    isEqual(other) {\n        const\n            otherClasses = DomClassList.normalize(other, 'array'),\n            len = otherClasses.length;\n\n        if (this.length === len) {\n            for (let i = 0; i < len; i++) {\n                if (!this[otherClasses[i]]) {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Get/set string value.\n     * Class names separated with space.\n     * @property {String}\n     */\n    get value() {\n        let value = this[valueSymbol],\n            keys;\n\n        if (value == null) {\n            keys = Objects.getTruthyKeys(this);\n\n            this[lengthSymbol] = keys.length;\n            this[valueSymbol] = value = keys.join(' ');\n        }\n\n        return value;\n    }\n\n    set value(value) {\n        const\n            me = this,\n            keys = Object.keys(me),\n            len = keys.length;\n\n        for (let i = 0; i < len; i++) {\n            delete me[keys[i]];\n        }\n\n        if (value) {\n            me.process(1, [value]);\n        }\n        else {\n            // String value needs recalculating\n            delete me[valueSymbol];\n        }\n    }\n\n    /**\n     * Returns string values as an array.\n     * @readonly\n     * @property {String[]}\n     */\n    get values() {\n        return Objects.getTruthyKeys(this);\n    }\n\n    get length() {\n        // Maintainer: We MUST access the value getter to force\n        // the value to be calculated if it's currently dirty.\n        return this.value ? this[lengthSymbol] : 0;\n    }\n\n    process(value, classes) {\n        for (let cls, k, i = 0; i < classes.length; i++) {\n            if (classes[i]) {\n                cls = classes[i];\n\n                if (cls.isDomClassList || Objects.isObject(cls)) {\n                    // preserve all keys, even falsy ones\n                    for (k in cls) {\n                        this[k] = value ? cls[k] : !cls[k];\n                    }\n                }\n                else {\n                    cls = DomClassList.normalize(classes[i], 'array');\n\n                    for (k = 0; k < cls.length; ++k) {\n                        this[cls[k]] = value;\n                    }\n                }\n            }\n        }\n\n        // String value needs recalculating\n        delete this[valueSymbol];\n\n        return this;\n    }\n\n    /**\n     * Adds/removes class names according to the passed object's properties.\n     *\n     * Properties with truthy values are added.\n     * Properties with falsy values are removed.\n     * @param {Object} classList Object containing properties to set/clear\n     */\n    assign(classList) {\n        for (const cls in classList) {\n            if (!this[cls] !== !classList[cls]) {\n                this[cls] = classList[cls];\n\n                // String value needs recalculating\n                delete this[valueSymbol];\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * Adds/removes this objects classes to the passed `classList` or element.\n     *\n     * Properties with truthy values are added.\n     * Properties with falsy values are removed.\n     * @param {HTMLElement|DOMTokenList} element The element or the element's `classList` to be updated.\n     */\n    assignTo(element) {\n        const\n            classList = element.nodeType === Element.ELEMENT_NODE ? element.classList : element,\n            temp      = DomClassList.from(classList);\n\n        temp.add(this);\n\n        classList.value = temp.value;\n    }\n\n    /**\n     * Add CSS class(es)\n     * ```\n     * myClassList.add('bold', 'small');\n     * ```javascript\n     * @param {String|String[]|Object} classes CSS classes to add\n     */\n    add(...classes) {\n        return this.process(1, classes);\n    }\n\n    /**\n     * Remove CSS class(es)\n     * ```javascript\n     * myClassList.remove('bold', 'small');\n     * ```\n     * @param {String} classes CSS classes to remove\n     */\n    remove(...classes) {\n        return this.process(0, classes);\n    }\n\n    /**\n     * Toggles the passed CSS class name.\n     *\n     * If the `force` parameter is passed, `true` means add the class name, `false` means remove it.\n     *\n     * ```javascript\n     * myClassList.toggle('bold', isImportant);\n     * ```\n     * @param {String} className CSS class to toggle\n     * @param {Boolean} [force] `true` to add the class, `false` to remove it.\n     * @returns {Boolean} `true` if the operation changed the value.\n     */\n    toggle(className, flag = Boolean(!this[className])) {\n        flag = Boolean(flag);\n\n        // Only disturb the set classwes if we need to.\n        if (Boolean(this[className]) !== flag) {\n            this[className] = flag;\n\n            // String value needs recalculating\n            delete this[valueSymbol];\n\n            return true;\n        }\n    }\n\n    /**\n     * Analogous to the `String#split` method, but with no delimiter\n     * parameter. This method returns an array containing the individual\n     * CSS class names set.\n     * @returns {String[]} The individual class names in this `DomClassList`\n     */\n    split() {\n        return Objects.getTruthyKeys(this);\n    }\n\n    forEach(fn) {\n        return Objects.getTruthyKeys(this).forEach(fn);\n    }\n};\n\n// We put this on the prototype and delete it from instances to mark dirty state. This maintains the same shape for\n// the instance to help the JIT\nDomClassList.prototype[valueSymbol] = null;\n","import Rectangle from './Rectangle.js';\n\n/**\n * @module Core/helper/util/Point\n */\n\n/**\n * Encapsulates an X,Y coordinate point.\n * @extends Core/helper/util/Rectangle\n */\nexport default class Point extends Rectangle {\n    /**\n     * Creates a new Point encapsulating the event's page position.\n     * @param {Event} event\n     * @returns {Core.helper.util.Point}\n     * @typings ignore\n     */\n    static from(event) {\n        const touchPoints = event.changedTouches;\n\n        return new Point(touchPoints ? touchPoints[0].screenX : event.screenX, touchPoints ? touchPoints[0].screenY : event.pageY);\n    }\n\n    /**\n     * Constructs a Point\n     * @param x The X coordinate\n     * @param y The Y coordinate\n     */\n    constructor(x, y) {\n        super(x, y, 0, 0);\n    }\n\n    /**\n     * Coerces this Point to be within the passed Rectangle. Translates it into the bounds.\n     * @param {Core.helper.util.Rectangle} into The Rectangle into which to coerce this Point.\n     */\n    constrain(into) {\n        this.x = Math.min(Math.max(this.x, into.x), into.right - 1);\n        this.y = Math.min(Math.max(this.y, into.y), into.bottom - 1);\n        return  this;\n    }\n\n    toArray() {\n        return [this.x, this.y];\n    }\n}\n\n// The Rectangle class uses the Point class, but cannot import it.\n// TODO: find a better way of getting a reference to the Point class in Rectangle.\n\n// #8224 - Gantt angular demo doesn't work in production\nObject.getPrototypeOf(Point).Point = Point;\n","/* eslint-disable bryntum/no-on-in-lib */\nimport DomHelper from './DomHelper.js';\nimport ObjectHelper from './ObjectHelper.js';\nimport FunctionHelper from './FunctionHelper.js';\nimport BrowserHelper from './BrowserHelper.js';\nimport Rectangle from './util/Rectangle.js';\nimport './util/Point.js';\nimport StringHelper from './StringHelper.js';\n\n/**\n * @module Core/helper/EventHelper\n */\n\n/**\n * @typedef {Object.<String,Function|Boolean|Object|Object[]|Number|String>} ElementListenerConfig\n * @property {HTMLElement} options.element The element to add the listener to.\n * @property {Object} options.thisObj The default `this` reference for all handlers added in this call.\n * @property {Boolean} [options.autoDetach=true] The listeners are automatically removed when the `thisObj` is destroyed.\n * @property {String} [options.delegate] A CSS selector string which only fires the handler when the event takes place in a matching element.\n * @property {Boolean} [options.once] Specify as `true` to have the listener(s) removed upon first invocation.\n * @property {Number} [options.delay] The number of milliseconds to delay the handler call after the event fires:\n * @property {Number|Object} [options.expires] The listener only waits for a specified time before\n * being removed. The value may be a number or an object containing an expiry handler.\n * @property {Number} [options.expires.delay] How long to wait for the event for.\n * @property {String|Function} [options.expires.alt] The function to call when the listener expires\n * **without having been triggered**.\n */\n\nconst\n    touchProperties = [\n        'clientX',\n        'clientY',\n        'pageX',\n        'pageY',\n        'screenX',\n        'screenY'\n    ],\n    isOption = {\n        element    : 1,\n        thisObj    : 1,\n        once       : 1,\n        delegate   : 1,\n        delay      : 1,\n        capture    : 1,\n        passive    : 1,\n        throttled  : 1,\n        autoDetach : 1,\n        expires    : 1,\n        block      : 1\n    },\n    configurable = true,\n    returnTrueProp = {\n        configurable,\n        value : true\n    },\n    normalizedKeyNames = {\n        Spacebar : 'Space',\n        Del      : 'Delete',\n        Esc      : 'Escape',\n        Left     : 'ArrowLeft',\n        Up       : 'ArrowUp',\n        Right    : 'ArrowRight',\n        Down     : 'ArrowDown'\n    },\n    ignoreModifierKeys     = {\n        Meta    : 1,\n        Control : 1,\n        Alt     : 1\n    },\n    // Required to identify a keyup event for special key\n    specialKeys = {\n        Control : 'ctrl',\n        Alt     : 'alt',\n        Shift   : 'shift'\n    },\n    // Allow an unsteady finger to jiggle by this much\n    longpressMoveThreshold = 5,\n    specialKeyRe           = /^(ctrl|shift|alt|meta)$/;\n\n/**\n * Utility methods for dealing with Events, normalizing Touch/Pointer/Mouse events.\n */\nexport default class EventHelper {\n    /**\n     * DOM event to trigger name mapping.\n     * @internal\n     */\n    static eventNameMap = {\n        mousedown   : 'MouseDown',\n        mouseup     : 'MouseUp',\n        click       : 'Click',\n        dblclick    : 'DblClick',\n        contextmenu : 'ContextMenu',\n        mouseover   : 'MouseOver',\n        mouseout    : 'MouseOut',\n        keyup       : 'KeyUp',\n        keydown     : 'KeyDown',\n        keypress    : 'KeyPress'\n    };\n\n    static normalizeEvent(event) {\n        return ObjectHelper.copyPropertiesIf(event, event.changedTouches[0] || event.touches[0], touchProperties);\n    }\n\n    /**\n     * Returns the `[x, y]` coordinates of the event in the viewport coordinate system.\n     * @param {Event} event The event\n     * @returns {Number[]} The coordinate.\n     */\n    static getXY(event) {\n        if (event.touches) {\n            event = event.touches[0];\n        }\n        return [event.clientX, event.clientY];\n    }\n\n    /**\n     * Returns the pixel distance between two mouse/touch/pointer events.\n     * @param {Event} event1 The first event.\n     * @param {Event} event2 The second event.\n     * @returns {Number} The distance in pixels between the two events.\n     */\n    static getDistanceBetween(event1, event2) {\n        const\n            xy1 = EH.getXY(event1),\n            xy2 = EH.getXY(event2);\n\n        // No point in moving this to Point. We are dealing only with number values here.\n        return Math.sqrt(Math.pow(xy1[0] - xy2[0], 2) + Math.pow(xy1[1] - xy2[1], 2));\n    }\n\n    /**\n     * Returns a {@link Core.helper.util.Point} which encapsulates the `pageX/Y` position of the event.\n     * May be used in {@link Core.helper.util.Rectangle} events.\n     * @param {Event} event A browser mouse/touch/pointer event.\n     * @returns {Core.helper.util.Point} The page point.\n     */\n    static getPagePoint(event) {\n        return new Rectangle.Point(event.pageX, event.pageY);\n    }\n\n    /**\n     * Returns a {@link Core.helper.util.Point} which encapsulates the `clientX/Y` position of the event.\n     * May be used in {@link Core.helper.util.Rectangle} events.\n     * @param {Event} event A browser mouse/touch/pointer event.\n     * @returns {Core.helper.util.Point} The page point.\n     */\n    static getClientPoint(event) {\n        return new Rectangle.Point(event.clientX, event.clientY);\n    }\n\n    /**\n     * Add a listener or listeners to an element\n     * The `options` parameter allows supplying options for the listener(s), for available options see {@link #typedef-ElementListenerConfig}.\n     *\n     * @param {HTMLElement} element The element to add a listener/listeners to.\n     * @param {String|Object} eventName Either a string, being the name of the event to listen for,\n     * or an options object containing event names and options as keys. See the options parameter\n     * for details, or the {@link #function-on-static} method for details.\n     * @param {Function} [handler] If the second parameter is a string event name, this is the handler function.\n     * @param {ElementListenerConfig} [options] If the second parameter is a string event name, this is the options.\n     * @returns {Function} A detacher function which removes all the listeners when called.\n     */\n    static addListener(element, eventName, handler, options) {\n        if (element.nodeType) {\n            // All separate params, element, eventName and handler\n            if (typeof eventName === 'string') {\n                options = Object.assign({\n                    element,\n                    [eventName] : handler\n                }, options);\n            }\n            // element, options\n            else {\n                options = Object.assign({\n                    element\n                }, eventName);\n            }\n        }\n        // Just an options object passed\n        else {\n            options = element;\n        }\n        return EH.on(options);\n    }\n\n    /**\n     * Adds a listener or listeners to an element.\n     * all property names other than the options listed below are taken to be event names,\n     * and the values as handler specs.\n     *\n     * A handler spec is usually a function reference or the name of a function in the `thisObj`\n     * option.\n     *\n     * But a handler spec may also be an options object containing a `handler` property which is\n     * the function or function name, and local options, including `element` and `thisObj`\n     * which override the top level options.\n     *\n     * The `options` parameter allows supplying options for the listener(s), for available options see {@link #typedef-ElementListenerConfig}.\n     *\n     *  Usage example\n     *\n     * ```javascript\n     * construct(config) {\n     *     super.construct(config);\n     *\n     *     // Add auto detaching event handlers to this Widget's reference elements\n     *     EventHelper.on({\n     *         element : this.iconElement,\n     *         click   : '_handleIconClick',\n     *         thisObj : this,\n     *         contextmenu : {\n     *             element : document,\n     *             handler : '_handleDocumentContextMenu'\n     *         }\n     *     });\n     * }\n     *```\n     *\n     * The `click` handler on the `iconElement` calls `this._handleIconClick`.\n     *\n     * The `contextmenu` handler is added to the `document` element, but the `thisObj`\n     * is defaulted in from the top `options` and calls `this._handleDocumentContextMenu`.\n     *\n     * Note that on touch devices, `dblclick` and `contextmenu` events are synthesized.\n     * Synthesized events contain a `browserEvent` property containing the final triggering\n     * event of the gesture. For example a synthesized `dblclick` event would contain a\n     * `browserEvent` property which is the last `touchend` event. A synthetic `contextmenu`\n     * event will contain a `browserEvent` property which the longstanding `touchstart` event.\n     *\n     * @param {ElementListenerConfig} options The full listener specification.\n     * @returns {Function} A detacher function which removes all the listeners when called.\n     */\n    static on(options) {\n        const\n            element        = options.element,\n            thisObj        = options.thisObj,\n            handlerDetails = [];\n\n        for (const eventName in options) {\n            // Only treat it as an event name if it's not a supported option\n            if (!isOption[eventName]) {\n                let handlerSpec = options[eventName];\n                if (typeof handlerSpec !== 'object') {\n                    handlerSpec = {\n                        handler : handlerSpec\n                    };\n                }\n                const targetElement = handlerSpec.element || element;\n                // If we need to convert taphold to an emulated contextmenu, add a wrapping function\n                // in addition to the contextmenu listener. Platforms may support mouse *and* touch.\n                if (BrowserHelper.isTouchDevice && !BrowserHelper.isAndroid) {\n                    if (eventName === 'contextmenu') {\n                        handlerDetails.push(EH.addElementListener(targetElement, 'touchstart', {\n                            handler : EH.createContextMenuWrapper(handlerSpec.handler, handlerSpec.thisObj || thisObj)\n                        }, options));\n                    }\n                }\n\n                // Keep track of the real handlers added.\n                // addElementLister returns [ element, eventName, addedFunction, capture ]\n                handlerDetails.push(EH.addElementListener(targetElement, eventName, handlerSpec, options));\n            }\n        }\n\n        const detacher = () => {\n            for (let handlerSpec, i = 0; i < handlerDetails.length; i++) {\n                handlerSpec = handlerDetails[i];\n                EH.removeEventListener(handlerSpec[0], handlerSpec[1], handlerSpec[2]);\n            }\n            handlerDetails.length = 0;\n        };\n\n        // { autoDetach : true, thisObj : scheduler } means remove all listeners when the scheduler dies.\n        if (thisObj && options.autoDetach !== false) {\n            thisObj.doDestroy = FunctionHelper.createInterceptor(thisObj.doDestroy, detacher, thisObj);\n        }\n\n        return detacher;\n    }\n\n    /**\n     * Used internally to add a single event handler to an element.\n     * @param {HTMLElement} element The element to add the handler to.\n     * @param {String} eventName The name of the event to add a handler for.\n     * @param {Function|String|Object} handlerSpec Either a function to call, or\n     * the name of a function to call in the `thisObj`, or an object containing\n     * the handler local options.\n     * @param {Function|String} [handlerSpec.handler] Either a function to call, or\n     * the name of a function to call in the `thisObj`.\n     * @param {HTMLElement} [handlerSpec.element] Optionally a local element for the listener.\n     * @param {Object} [handlerSpec.thisObj] A local `this` specification for the handler.\n     * @param {Object} defaults The `options` parameter from the {@link #function-addListener-static} call.\n     * @private\n     */\n    static addElementListener(element, eventName, handlerSpec, defaults) {\n        const\n            handler  = EH.createHandler(element, eventName, handlerSpec, defaults),\n            { spec } = handler,\n            expires  = handlerSpec.expires || defaults.expires,\n            options  = spec.capture != null || spec.passive != null ? {\n                capture : spec.capture,\n                passive : spec.passive\n            } : undefined;\n\n        element.addEventListener(eventName, handler, options);\n\n        if (expires) {\n            // Extract expires : { delay : 100, alt : 'onExpireFn' }\n            const\n                thisObj   = handlerSpec.thisObj || defaults.thisObj,\n                delayable = thisObj?.isDelayable ? thisObj : globalThis,\n                { alt }   = expires,\n                delay     = alt ? expires.delay : expires,\n                { spec }  = handler;\n\n            // expires is not applied with other options in createHandler(), store it here\n            spec.expires = expires;\n\n            spec.timerId = delayable[typeof delay === 'number' ? 'setTimeout' : 'requestAnimationFrame'](() => {\n                spec.timerId = null;\n\n                EH.removeEventListener(element, eventName, handler);\n\n                // If we make it here and the handler has not been called, invoke the alt handler\n                if (alt && !handler.called) {\n                    (typeof alt === 'string' ? thisObj[alt] : alt).call(thisObj);\n                }\n            }, delay, `listener-timer-${performance.now()}`);\n        }\n\n        return [element, eventName, handler, options];\n    }\n\n    // composedPath throws in salesforce\n    // https://github.com/bryntum/support/issues/4432\n    static getComposedPathTarget(event) {\n        return event.composedPath()[0] || event.path[0];\n    }\n\n    static fixEvent(event) {\n        if (event.fixed) {\n            return event;\n        }\n\n        const { type, target } = event;\n\n        // When we listen to event on document and get event which bubbled from shadow dom, reading its target would\n        // return shadow root element, or null if accessed in an async timeframe.\n        // We need actual element which started the event\n        if ((target?.shadowRoot || target?.getRootNode?.().host) && event.composedPath) {\n            const\n                targetElement  = this.getComposedPathTarget(event),\n                originalTarget = target;\n\n            // Can there be an event which actually originated from custom element, not its shadow dom?\n            Object.defineProperty(event, 'target', {\n                value : targetElement,\n                configurable\n            });\n\n            // Save original target just in case\n            Object.defineProperty(event, 'originalTarget', {\n                value : originalTarget,\n                configurable\n            });\n        }\n\n        // Flag that we have fixed this event\n        Object.defineProperty(event, 'fixed', returnTrueProp);\n\n        // Normalize key names\n        if (type.startsWith('key')) {\n            const normalizedKeyName = normalizedKeyNames[event.key];\n            if (normalizedKeyName) {\n                Object.defineProperty(event, 'key', {\n                    value : normalizedKeyName,\n                    configurable\n                });\n            }\n\n            // Polyfill the code property for SPACE because it is not set for synthetic events.\n            if (event.key === ' ' && !event.code) {\n                Object.defineProperty(event, 'code', {\n                    value : 'Space',\n                    configurable\n                });\n            }\n        }\n\n        // Sync OSX's meta key with the ctrl key. This will only happen on Mac platform.\n        // It's read-only, so define a local property to return true for ctrlKey.\n        if (event.metaKey && !event.ctrlKey) {\n            Object.defineProperty(event, 'ctrlKey', returnTrueProp);\n        }\n\n        // if (isRTL && (type.startsWith('mouse') || type.startsWith('pointer') || type === 'click')) {\n        //     event.nativePageX = event.pageX;\n        //\n        //     if (!Object.getOwnPropertyDescriptor(event, 'pageX')) {\n        //         Object.defineProperties(event, {\n        //             pageX : {\n        //                 get : () => {\n        //                     return document.body.offsetWidth - event.nativePageX;\n        //                 }\n        //             }\n        //         });\n        //     }\n        // }\n\n        // offsetX/Y are within padding box. Border is outside padding box, so -ve values are possible\n        // which are not useful for calculating intra-element positions.\n        // We add borderOffsetX and borderOffsetY properties which are offsets within the border box.\n        // Tested in EventHelper.js\n        if (target && 'offsetX' in event) {\n            // Wrap calculating `borderOffsetX/Y` until this property is actually accessed in the code to avoid forced reflow.\n            if (!Object.getOwnPropertyDescriptor(event, 'borderOffsetX')) {\n                Object.defineProperty(event, 'borderOffsetX', {\n                    get : () => {\n                        return event.offsetX + (BrowserHelper.isSafari ? 0 : parseInt(target.ownerDocument.defaultView.getComputedStyle(target).getPropertyValue('border-left-width')));\n                    }\n                });\n            }\n            if (!Object.getOwnPropertyDescriptor(event, 'borderOffsetY')) {\n                Object.defineProperty(event, 'borderOffsetY', {\n                    get : () => {\n                        return event.offsetY + (BrowserHelper.isSafari ? 0 : parseInt(target.ownerDocument.defaultView.getComputedStyle(target).getPropertyValue('border-top-width')));\n                    }\n                });\n            }\n        }\n\n        // Firefox has a bug where it can report that the target is the #document when mouse is over a pseudo element\n        if (target?.nodeType === Element.DOCUMENT_NODE && 'clientX' in event) {\n            const targetElement = DomHelper.elementFromPoint(event.clientX, event.clientY);\n            Object.defineProperty(event, 'target', {\n                value : targetElement,\n                configurable\n            });\n        }\n\n        // Firefox has a bug where it can report a textNode as an event target/relatedTarget.\n        // We standardize this to report the parentElement.\n        if (target?.nodeType === Element.TEXT_NODE) {\n            const targetElement = event.target.parentElement;\n            Object.defineProperty(event, 'target', {\n                value : targetElement,\n                configurable\n            });\n        }\n        if (event.relatedTarget?.nodeType === Element.TEXT_NODE) {\n            const relatedTargetElement = event.target.parentElement;\n            Object.defineProperty(event, 'relatedTarget', {\n                value : relatedTargetElement,\n                configurable\n            });\n        }\n\n        // If it's a touch event, move the positional details\n        // of touches[0] up to the event.\n        if (type.startsWith('touch') && event.touches.length) {\n            this.normalizeEvent(event);\n        }\n\n        return event;\n    }\n\n    static createHandler(element, eventName, handlerSpec, defaults) {\n        const\n            delay                   = handlerSpec.delay || defaults.delay,\n            throttled               = handlerSpec.throttled || defaults.throttled,\n            block                   = handlerSpec.block || defaults.block,\n            once                    = ('once'     in handlerSpec) ? handlerSpec.once     : defaults.once,\n            capture                 = ('capture'  in handlerSpec) ? handlerSpec.capture  : defaults.capture,\n            passive                 = ('passive'  in handlerSpec) ? handlerSpec.passive  : defaults.passive,\n            delegate                = ('delegate' in handlerSpec) ? handlerSpec.delegate : defaults.delegate,\n            wrappedFn               = handlerSpec.handler,\n            expires                 = handlerSpec.expires,\n            thisObj                 = handlerSpec.thisObj || defaults.thisObj,\n            { rtlSource = thisObj } = thisObj || {};\n\n        //Capture initial conditions in case of destruction of thisObj.\n        // Destruction completely wipes the object.\n        //<debug>\n        const\n            thisObjClassName = thisObj?.constructor.name || 'Object',\n            thisObjId        = thisObj?.id || 'unknown';\n        //</debug>\n\n        // Innermost level of wrapping which calls the user's handler.\n        // Normalize the event cross-browser, and attempt to normalize touch events.\n        let handler = (event, ...args) => {\n            // When playing a demo using DemoBot, only handle synthetic events\n            if (EH.playingDemo && event.isTrusted) {\n                return;\n            }\n\n            // If the thisObj is already destroyed, we cannot call the function.\n            // If in dev mode, warn the developer with a JS error.\n            if (thisObj?.isDestroyed) {\n                //<debug>\n                throw new Error(`Attempting to fire ${eventName} event on destroyed ${thisObjClassName} instance with id: ${thisObjId}`);\n                //</debug>\n                // eslint-disable-next-line\n                return;\n            }\n\n            // Fix up events to handle various browser inconsistencies\n            event = EH.fixEvent(event, rtlSource?.rtl);\n\n            // Flag for the expiry timer\n            handler.called = true;\n\n            (typeof wrappedFn === 'string' ? thisObj[wrappedFn] : wrappedFn).call(thisObj, event, ...args);\n\n            // Remove properties that our fixEvent method added.\n            // Other applications to which this may bubble need the pure browser event.\n            delete event.target;\n            delete event.relatedTarget;\n            delete event.originalarget;\n            delete event.key;\n            delete event.code;\n            delete event.ctrlKey;\n            delete event.fixed;\n        };\n\n        // Allow events to be blocked for a certain time\n        if (block) {\n            const wrappedFn = handler;\n            let lastCallTime, lastTarget;\n\n            handler = (e, ...args) => {\n                const now = performance.now();\n                if (!lastCallTime || e.target !== lastTarget || now - lastCallTime > block) {\n                    lastTarget = e.target;\n                    lastCallTime = now;\n                    wrappedFn(e, ...args);\n                }\n            };\n        }\n\n        // Go through options, each creates a new handler by wrapping the previous handler to implement the options.\n        // Right now, we have delay. Note that it may be zero, so test != null\n        if (delay != null) {\n            const\n                wrappedFn = handler,\n                delayable = thisObj?.setTimeout ? thisObj : globalThis;\n\n            handler = (...args) => {\n                delayable.setTimeout(() => {\n                    wrappedFn(...args);\n                }, delay);\n            };\n        }\n\n        // If they specified the throttled option, wrap the handler in a createdThrottled\n        // version. Allow the called to specify an alt function to call when the event\n        // fires before the buffer time has expired.\n        if (throttled != null) {\n            let alt, buffer = throttled;\n\n            if (throttled.buffer) {\n                alt = e => {\n                    return throttled.alt.call(EH, EH.fixEvent(e, rtlSource?.rtl));\n                };\n                buffer = throttled.buffer;\n            }\n\n            if (thisObj?.isDelayable) {\n                handler = thisObj.throttle(handler, {\n                    delay     : buffer,\n                    throttled : alt\n                });\n            }\n            else {\n                handler = FunctionHelper.createThrottled(handler, buffer, thisObj, null, alt);\n            }\n        }\n\n        // This must always be added late to be processed before delay so that the handler is removed immediately.\n        // Note that we cant use native once because of our support for `delegate`, it would remove the listener even\n        // when delegate does not match\n        if (once) {\n            const wrappedFn = handler;\n            handler = (...args) => {\n                EH.removeEventListener(element, eventName, handler);\n                wrappedFn(...args);\n            };\n        }\n\n        // This must be added last to be called first, once and delay should not act on wrong targets when configured\n        // with a delegate\n        if (delegate) {\n            const wrappedFn = handler;\n            handler = (event, ...args) => {\n                event = EH.fixEvent(event, rtlSource?.rtl);\n\n                // delegate: '.b-field-trigger' only fires when click is in a matching el.\n                // currentTarget becomes the delegate.\n\n                // Maintainer: In Edge event.target can be an empty object for transitionend events\n                const delegatedTarget = event.target.closest?.call && event.target.closest(delegate);\n                if (!delegatedTarget) {\n                    return;\n                }\n\n                // Allow this to be redefined as it bubbles through listeners up the parentNode axis\n                // which might have their own delegate settings.\n                Object.defineProperty(event, 'currentTarget', {\n                    get          : () => delegatedTarget,\n                    configurable : true\n                });\n\n                wrappedFn(event, ...args);\n            };\n        }\n\n        // Only autoDetach here if there's a local thisObj is in the handlerSpec for this one listener.\n        // If it's in the defaults, then the \"on\" method will handle it.\n        if (handlerSpec.thisObj && handlerSpec.autoDetach !== false) {\n            thisObj.doDestroy = FunctionHelper.createInterceptor(thisObj.doDestroy, () => EH.removeEventListener(element, eventName, handler), thisObj);\n        }\n\n        handler.spec = {\n            delay,\n            throttled,\n            block,\n            once,\n            thisObj,\n            capture,\n            expires,\n            passive,\n            delegate\n        };\n\n        return handler;\n    }\n\n    static removeEventListener(element, eventName, handler) {\n        const { expires, timerId, thisObj, capture } = handler.spec;\n\n        // Cancel outstanding expires.alt() call when removing the listener\n        if (expires?.alt && timerId) {\n            const delayable = thisObj?.isDelayable ? thisObj : globalThis;\n            delayable[typeof expires.delay === 'number' ? 'clearTimeout' : 'cancelAnimationFrame'](timerId);\n        }\n\n        element.removeEventListener(eventName, handler, capture);\n    }\n\n    /**\n     * Calls a callback when the described animation completes.\n     *\n     * @param {Object} detail\n     * @param {HTMLElement} detail.element The element which is being animated.\n     * @param {String|RegExp} [detail.animationName] The name of the animation to wait for.\n     * @param {String} [detail.property] If no `animationName` specified, the CSS property\n     * which is being animated.\n     * @param {Function} detail.handler The function to call on animation end.\n     * @param {Number} [detail.duration] Optional fallback time to wait until calling the callback.\n     * @param {Object} [detail.thisObj] The `this` reference to call the callback with.\n     * @param {Array} [detail.args] Optional arguments to call the callback with.\n     * @param {Core.mixin.Delayable} [detail.timerSource] A Delayable to provide the fallback timeout.\n     * @param {Boolean} [detail.runOnDestroy] If `timerSource` is a {@link Core.mixin.Delayable},\n     * `true` to invoke the callback if it is destroyed during the animation.\n     * @returns {Function} a function which detaches the animation end listener.\n     */\n    static onTransitionEnd({\n        element,\n        animationName,\n        property,\n        handler,\n        mode     = animationName ? 'animation' : 'transition',\n        duration = DomHelper[`get${mode === 'transition' ? 'Property' : ''}${StringHelper.capitalize(mode)}Duration`](element, property),\n        thisObj  = globalThis,\n        args     = [],\n        timerSource,\n        runOnDestroy\n    }) {\n        let timerId;\n\n        timerSource = timerSource || (thisObj.isDelayable ? thisObj : globalThis);\n\n        const\n            callbackArgs = [element, property, ...args],\n            doCallback  = () => {\n                detacher();\n                if (!thisObj.isDestroyed) {\n                    if (thisObj.callback) {\n                        thisObj.callback(handler, thisObj, callbackArgs);\n                    }\n                    else {\n                        handler.apply(thisObj, callbackArgs);\n                    }\n                }\n            },\n            detacher    = EH.on({\n                element,\n                [`${mode}end`]({ animationName : endedAnimation,  propertyName, target }) {\n                    if (target === element) {\n                        if (propertyName === property || endedAnimation?.match(animationName)) {\n                            if (timerId) {\n                                timerSource.clearTimeout(timerId);\n                                timerId = null;\n                            }\n\n                            doCallback();\n                        }\n                    }\n                }\n            });\n\n        // If the transition has not signalled its end within duration + 50 milliseconds\n        // then give up on it. Remove the listener and call the handler.\n        if (duration != null) {\n            timerId = timerSource.setTimeout(doCallback, duration + 50, 'onTransitionEnd', runOnDestroy);\n        }\n\n        return detacher;\n    }\n\n    /**\n     * Waits for the described animation completes.\n     *\n     * @param {Object} config\n     * @param {HTMLElement} config.element The element which is being animated.\n     * @param {String|RegExp} [config.animationName] The name of the animation to wait for.\n     * @param {String} [config.property] If no `animationName` specified, the CSS property\n     * which is being animated.\n     * @param {Number} [config.duration] Optional fallback time to wait until calling the callback.\n     * @param {Core.mixin.Delayable} [config.timerSource] A Delayable to provide the fallback timeout.\n     * @param {Boolean} [config.runOnDestroy] If `timerSource` is a {@link Core.mixin.Delayable},\n     * `true` to invoke the callback if it is destroyed during the animation.\n     * @async\n     */\n    static async waitForTransitionEnd(config) {\n        return new Promise(resolve => {\n            config.handler = resolve;\n            EventHelper.onTransitionEnd(config);\n        });\n    }\n\n    /**\n     * Private function to wrap the passed function. The returned wrapper function to be used as\n     * a `touchstart` handler which will call the passed function passing a fabricated `contextmenu`\n     * event if there's no `touchend` or `touchmove` after a default of 400ms.\n     * @param {String|Function} handler The handler to call.\n     * @param {Object} thisObj The owner of the function.\n     * @private\n     */\n    static createContextMenuWrapper(handler, thisObj) {\n        return event => {\n            // Only attempt conversion to contextmenu if it's a single touch start.\n            if (event.touches.length === 1) {\n                // Do not convert longpress to contextmenu for feature elements\n                // For example DependencyCreation terminals.\n                if (event.target.closest('[data-feature]')) {\n                    return;\n                }\n                const tapholdStartTouch = event.touches[0],\n                    // Dispatch a synthetic \"contextmenu\" event from the touchpoint in <longPressTime> milliseconds.\n                    tapholdTimer      = setTimeout(() => {\n                        // Remove the gesture cancelling listeners\n                        touchMoveRemover();\n\n                        const contextmenuEvent = new MouseEvent('contextmenu', tapholdStartTouch);\n                        Object.defineProperty(contextmenuEvent, 'target', {\n                            get() {\n                                return tapholdStartTouch.target;\n                            }\n                        });\n                        if (typeof handler === 'string') {\n                            handler = thisObj[handler];\n                        }\n\n                        contextmenuEvent.browserEvent = event;\n\n                        // Call the wrapped handler passing the fabricated contextmenu event\n                        handler.call(thisObj, contextmenuEvent);\n                        EH.contextMenuTouchId = tapholdStartTouch.identifier;\n                    }, EH.longPressTime),\n                    // This is what gets called if the user moves their touchpoint,\n                    // or releases the touch before <longPressTime>ms is up\n                    onMoveOrPointerUp = ({ clientX, clientY, type }) => {\n                        let cancel = type === 'touchend' || type === 'pointerup';\n\n                        // for move events, check if we only moved a little\n                        if (!cancel) {\n                            const\n                                deltaX = Math.abs(clientX - tapholdStartTouch.clientX),\n                                deltaY = Math.abs(clientY - tapholdStartTouch.clientY);\n\n                            cancel = deltaX >= longpressMoveThreshold || deltaY >= longpressMoveThreshold;\n                        }\n\n                        if (cancel) {\n                            EH.contextMenuTouchId = null;\n                            touchMoveRemover();\n                            clearTimeout(tapholdTimer);\n                        }\n                    },\n                    // Touchmove or touchend before that timer fires cancels the timer and removes these listeners.\n                    touchMoveRemover  = EH.on({\n                        element     : document,\n                        touchmove   : onMoveOrPointerUp,\n                        touchend    : onMoveOrPointerUp,\n                        pointermove : onMoveOrPointerUp,\n                        pointerup   : onMoveOrPointerUp,\n                        capture     : true\n                    });\n            }\n        };\n    }\n\n    /**\n     * Private function to wrap the passed function. The returned wrapper function to be used as\n     * a `touchend` handler which will call the passed function passing a fabricated `dblclick`\n     * event if there is a `click` within 300ms.\n     * @param {Element} element element\n     * @param {String|Function} handler The handler to call.\n     * @param {Object} thisObj The owner of the function.\n     * @private\n     */\n    static createDblClickWrapper(element, handler, thisObj) {\n        let startId, secondListenerDetacher, tapholdTimer;\n\n        return () => {\n            if (!secondListenerDetacher) {\n                secondListenerDetacher = EH.on({\n                    element,\n\n                    // We only get here if a touchstart arrives within 300ms of a click\n                    touchstart : secondStart => {\n                        startId = secondStart.changedTouches[0].identifier;\n                        // Prevent zoom\n                        secondStart.preventDefault();\n                    },\n                    touchend : secondClick => {\n                        if (secondClick.changedTouches[0].identifier === startId) {\n                            secondClick.preventDefault();\n\n                            clearTimeout(tapholdTimer);\n                            startId = secondListenerDetacher = null;\n\n                            const\n                                targetRect          = Rectangle.from(secondClick.changedTouches[0].target, null, true),\n                                offsetX             = secondClick.changedTouches[0].pageX - targetRect.x,\n                                offsetY             = secondClick.changedTouches[0].pageY - targetRect.y,\n                                dblclickEventConfig = Object.assign({\n                                    browserEvent : secondClick\n                                }, secondClick),\n                                dblclickEvent       = new MouseEvent('dblclick', dblclickEventConfig);\n\n                            Object.defineProperties(dblclickEvent, {\n                                target  : { value : secondClick.target },\n                                offsetX : { value : offsetX },\n                                offsetY : { value : offsetY }\n                            });\n\n                            if (typeof handler === 'string') {\n                                handler = thisObj[handler];\n                            }\n\n                            // Call the wrapped handler passing the fabricated dblclick event\n                            handler.call(thisObj, dblclickEvent);\n                        }\n                    },\n                    once : true\n                });\n\n                // Cancel the second listener is there's no second click within <dblClickTime> milliseconds.\n                tapholdTimer = setTimeout(() => {\n                    secondListenerDetacher();\n                    startId = secondListenerDetacher = null;\n                }, EH.dblClickTime);\n            }\n        };\n    }\n\n    /**\n     * Handles various inputs to figure out the name of the special key of the event.\n     *\n     * ```javascript\n     * EventHelper.toSpecialKey('ctrl') // 'ctrlKey'\n     * EventHelper.toSpecialKey(true)   // 'ctrlKey', default\n     * EventHelper.toSpecialKey(false)  // false\n     * EventHelper.toSpecialKey('foo')  // false\n     * ```\n     *\n     * @param {*} value User input value to process.\n     * @param {String} defaultValue Default value to fall back to if `true` value is passed.\n     * @returns {Boolean|String} Returns `false` if provided value cannot be converted to special key and special key\n     * name otherwise.\n     * @internal\n     */\n    static toSpecialKey(value, defaultValue = 'ctrlKey') {\n        let result = false;\n\n        if (value === true) {\n            result = defaultValue;\n        }\n        else if (typeof value === 'string') {\n            value = value.toLowerCase();\n\n            if (value.match(specialKeyRe)) {\n                result = `${value}Key`;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * If keyup event is triggered when special key is pressed, we don't get special key value from properties like\n     * `ctrlKey`. Instead we need to read `event.key`. That property uses full name and we use abbreviations, so we\n     * need to convert the key.\n     * @param {String} code\n     * @returns {String}\n     * @internal\n     */\n    static specialKeyFromEventKey(code) {\n        return specialKeys[code] || '';\n    }\n}\n\nconst EH = EventHelper;\n\n/**\n * The time in milliseconds for a `taphold` gesture to trigger a `contextmenu` event.\n * @member {Number} [longPressTime=500]\n * @readonly\n * @static\n */\nEH.longPressTime = 500;\n\n/**\n * The time in milliseconds within which a second touch tap event triggers a `dblclick` event.\n * @member {Number} [dblClickTime=300]\n * @readonly\n * @static\n */\nEH.dblClickTime = 300;\n\n// Flag body if last user action used keyboard, used for focus styling etc.\nEH.globalListenerDetacher = EH.on({\n    element : document,\n    capture : true,\n    passive : true,\n    pointerdown({ target }) {\n        const rootEl = DomHelper.getRootElement(target);\n\n        DomHelper.usingKeyboard = false;\n\n        rootEl.classList?.remove('b-using-keyboard');\n        DomHelper.removeClsGlobally(rootEl, 'b-using-keyboard');\n    },\n    keydown({ target, key }) {\n        if (!ignoreModifierKeys[key]) {\n            DomHelper.usingKeyboard = true;\n\n            const rootElement = DomHelper.getRootElement(target);\n\n            // if shadow root, add to outer children (shadow root itself lacks a classList :( )\n            if (rootElement.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n                Array.from(rootElement.children).forEach(node => {\n                    if (node.matches('.b-outer')) {\n                        node.classList.add('b-using-keyboard');\n                    }\n                });\n            }\n            else {\n                // document.body\n                rootElement.classList.add('b-using-keyboard');\n            }\n        }\n    }\n});\n\n// When dragging on a touch device, we need to prevent scrolling from happening.\n// Dragging only starts on a touchmove event, by which time it's too late to preventDefault\n// on the touchstart event which started it.\n// To do this we need a capturing, non-passive touchmove listener at the document level so we can preventDefault.\n// This is in lieu of a functioning touch-action style on iOS Safari. When that's fixed, this will not be needed.\nif (BrowserHelper.isTouchDevice) {\n    EH.on({\n        element   : document,\n        touchmove : event => {\n            // If we're touching a b-dragging event, then stop any panning by preventing default.\n            if (event.target.closest('.b-dragging')) {\n                event.preventDefault();\n            }\n        },\n        passive : false,\n        capture : true\n    });\n}\n","import ArrayHelper from './ArrayHelper.js';\nimport AsyncHelper from './AsyncHelper.js';\nimport BrowserHelper from './BrowserHelper.js';\nimport StringHelper from './StringHelper.js';\nimport Rectangle from './util/Rectangle.js';\nimport ObjectHelper from './ObjectHelper.js';\nimport DomClassList from './util/DomClassList.js';\nimport GlobalEvents from '../GlobalEvents.js';\nimport VersionHelper from './VersionHelper.js';\nimport EventHelper from './EventHelper.js';\n\n// Point must be imported because it needs to inject itself into the Rectangle class\n//import './util/Point.js';\n// TODO import VersionHelper from './VersionHelper.js';\n\n// https://app.assembla.com/spaces/bryntum/tickets/7903-rendering-fails\n// HACK: this value is required to calculate width if it was configured relative to font size (em) but no element is set\nconst\n    DEFAULT_FONT_SIZE = 14,\n    t0t0              = { align : 't0-t0' },\n    // eslint-disable-next-line no-undef\n    ELEMENT_NODE      = Node.ELEMENT_NODE,\n    // eslint-disable-next-line no-undef\n    TEXT_NODE         = Node.TEXT_NODE,\n    { isObject }      = ObjectHelper,\n\n    // Transform matrix parse Regex. CSS transform computed style looks like this:\n    // matrix(scaleX(), skewY(), skewX(), scaleY(), translateX(), translateY())\n    // or\n    // matrix3d(scaleX(), skewY(), 0, 0, skewX(), scaleY(), 0, 0, 0, 0, 1, 0, translateX(), translateY())\n    // This is more reliable than using the style literal which may include\n    // relative styles such as \"translateX(-20em)\", or not include the translation at all if it's from a CSS rule.\n    // Use a const so as to only compile RexExp once\n    // Extract repeating number regexp to simplify next expressions. Available values are: https://developer.mozilla.org/en-US/docs/Web/CSS/number\n    numberRe            = /[+-]?\\d*\\.?\\d+[eE]?-?\\d*/g, // -2.4492935982947064e-16 should be supported\n    numberReSrc         = numberRe.source,\n    translateMatrix2dRe = new RegExp(`matrix\\\\((?:${numberReSrc}),\\\\s?(?:${numberReSrc}),\\\\s?(?:${numberReSrc}),\\\\s?(?:${numberReSrc}),\\\\s?(${numberReSrc}),\\\\s?(${numberReSrc})`),\n    translateMatrix3dRe = new RegExp(`matrix3d\\\\((?:-?\\\\d*),\\\\s?(?:-?\\\\d*),\\\\s?(?:-?\\\\d*),\\\\s?(?:-?\\\\d*),\\\\s?(?:-?\\\\d*),\\\\s?(?:-?\\\\d*),\\\\s?(?:-?\\\\d*),\\\\s?(?:-?\\\\d*),\\\\s?(?:-?\\\\d*),\\\\s?(?:-?\\\\d*),\\\\s?(?:-?\\\\d*),\\\\s?(?:-?\\\\d*),\\\\s?(-?\\\\d*),\\\\s?(-?\\\\d*)`),\n    translateMatrixRe   = new RegExp(`(?:${translateMatrix2dRe.source})|(?:${translateMatrix3dRe.source})`),\n    pxTtranslateXRe     = new RegExp(`translate(3d|X)?\\\\((${numberReSrc})px(?:,\\\\s?(${numberReSrc})px)?`),\n    pxTtranslateYRe     = new RegExp(`translate(3d|Y)?\\\\((${numberReSrc})px(?:,\\\\s?(${numberReSrc})px)?`),\n    whiteSpaceRe        = /\\s+/,\n    semicolonRe         = /\\s*;\\s*/,\n    colonRe             = /\\s*:\\s*/,\n    digitsRe            = /^-?((\\d+(\\.\\d*)?)|(\\.?\\d+))$/,\n    elementPropKey      = '$bryntum',\n\n    // A blank value means the expando name is the same as the key in this object, otherwise the key in this object is\n    // the name of the domConfig property and the value is the name of the DOM element expando property.\n    elementCreateExpandos = {\n        elementData   : '',\n        for           : 'htmlFor',\n        retainElement : ''\n    },\n\n    // DomHelper#createElement properties which require special processing.\n    // All other configs such as id and type are applied directly to the element.\n    elementCreateProperties  = {\n        // these two are handled by being in elementCreateExpands:\n        // elementData  : 1,\n        // for          : 1,\n        tag          : 1,\n        html         : 1,\n        text         : 1,\n        children     : 1,\n        tooltip      : 1,\n        style        : 1,\n        dataset      : 1,\n        parent       : 1,\n        nextSibling  : 1,\n        ns           : 1,\n        reference    : 1,\n        class        : 1,\n        className    : 1,\n        unmatched    : 1, // Used by syncId approach\n        onlyChildren : 1, // Used by sync to not touch the target element itself,\n        listeners    : 1,\n        compareHtml  : 1, // Sync\n        syncOptions  : 1, // Sync\n        keepChildren : 1  // Sync\n    },\n\n    styleIgnoreProperties    = {\n        length     : 1,\n        parentRule : 1,\n        style      : 1\n    },\n\n    nativeEditableTags = {\n        INPUT    : 1,\n        TEXTAREA : 1\n    },\n    nativeFocusableTags = {\n        BUTTON   : 1,\n        IFRAME   : 1,\n        EMBED    : 1,\n        INPUT    : 1,\n        OBJECT   : 1,\n        SELECT   : 1,\n        TEXTAREA : 1,\n        BODY     : 1\n    },\n    win              = globalThis,\n    doc              = document,\n    emptyObject      = Object.freeze({}),\n    arraySlice       = Array.prototype.slice,\n    immediatePromise = Promise.resolve(),\n    fontProps        = [\n        'font-size',\n        'font-size-adjust',\n        'font-style',\n        'font-weight',\n        'font-family',\n        'font-kerning',\n        'font-stretch',\n        'line-height',\n        'text-transform',\n        'text-decoration',\n        'letter-spacing',\n        'word-break'\n    ],\n    isHiddenWidget = e => e._hidden,\n    parentNode     = el => el.parentNode || el.host,\n    mergeChildren  = (dest, src, options) => {\n        if (options.key === 'children') {\n            // Normally \"children\" is an array (for which we won't be here, due to isObject check in caller). To\n            // maintain declarative order of children as an object, we need some special sauce:\n            return ObjectHelper.mergeItems(dest, src, options);\n        }\n\n        return ObjectHelper.blend(dest, src, options);\n    },\n    isVisible = e => {\n        const style = e.ownerDocument.defaultView.getComputedStyle(e);\n\n        return style.getPropertyValue('display') !== 'none' && style.getPropertyValue('visibility') !== 'hidden';\n    },\n    getRootNode = doc.documentElement.getRootNode ? el => el.getRootNode() : el => {\n        while (el.parentNode) el = el.parentNode;\n        return el;\n    },\n    // Both Shadow Root Element and Anchor <a> Element have `host` property.\n    // https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot/host\n    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/host\n    // Need make sure `host` is an Element.\n    isShadowRoot = el => el.host && el.host instanceof Element,\n    // Check whether the element has an offsetParent.\n    // Nodes such as SVG which do not expose such a property must have an ancestor which has an offsetParent.\n    // If position:fixed, there's no offsetParent, so continue to interrogate parentNode.\n    // If the el has appeared through a timer from a destroyed frame, the defaultView will be null.\n    hasLayout = el => el && (el === doc.body || Boolean(el.offsetParent) || (el.ownerDocument.defaultView && ('offsetParent' in el && DomHelper.getStyleValue(el, 'position') !== 'fixed') ? el.offsetParent : hasLayout(el.parentNode))),\n\n    // Check for node being in document.\n    // If part of shadow DOM, see if the root's host is in the DOM\n    isInDocument             = el => el && (doc.body.contains(el) || ((root = getRootNode(el)) && isShadowRoot(root) && isInDocument(root.host))),\n    elementOrConfigToElement = elementOrConfig => {\n        if (elementOrConfig instanceof Node) {\n            return elementOrConfig;\n        }\n        if (typeof elementOrConfig === 'string') {\n            return DH.createElementFromTemplate(elementOrConfig);\n        }\n        return DH.createElement(elementOrConfig);\n    },\n    canonicalStyles = Object.create(null),\n    canonicalizeStyle = (name, hasUnit) => {\n        const entry = canonicalStyles[name] || [StringHelper.hyphenate(name), hasUnit];\n\n        if (!canonicalStyles[name]) {\n            canonicalStyles[entry[0]] = canonicalStyles[name] = entry;\n        }\n\n        return entry;\n    },\n    getOffsetParent = node => node.ownerSVGElement ? node.ownerSVGElement.parentNode : node.offsetParent,\n    slideInAnimationName = /b-slide-in-from-\\w+/;\n\nexport { hasLayout, isVisible, isInDocument };\n\n// Push the styles that have units into the map:\n[\n    'top', 'right', 'bottom', 'left', 'width', 'height', 'maxWidth', 'maxHeight', 'minWidth', 'minHeight',\n    'borderSpacing', 'borderWidth', 'borderTopWidth', 'borderRightWidth', 'borderBottomWidth', 'borderLeftWidth',\n    'marginTop', 'marginRight', 'marginBottom', 'marginLeft',\n    'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft',\n    'fontSize', 'letterSpacing', 'lineHeight', 'outlineWidth', 'textIndent', 'wordSpacing'\n].forEach(name => canonicalizeStyle(name, true));\n\n// We only do the measurement once, if the value is null\nlet scrollBarWidth = null,\n    idCounter      = 0,\n    themeInfo      = null,\n    root, templateElement, htmlParser, scrollBarMeasureElement;\n\n/**\n * @module Core/helper/DomHelper\n */\n\n/**\n * An object that describes a DOM element. Used for example by {@link #function-createElement-static createElement()}\n * and by {@link Core.helper.DomSync#function-sync-static DomSync.sync()}.\n *\n * ```javascript\n * DomHelper.createElement({\n *    class : {\n *        big   : true,\n *        small : false\n *    },\n *    children : [\n *        { tag : 'img', src : 'img.png' },\n *        { html : '<b style=\"color: red\">Red text</b>' }\n *    ]\n * });\n * ```\n *\n * @typedef {Object} DomConfig\n * @property {String} [tag='div'] Tag name, for example 'span'\n * @property {HTMLElement} [parent] Parent element\n * @property {HTMLElement} [nextSibling] Element's next sibling in the parent element\n * @property {String|Object} [class] CSS classes, as a string or an object (truthy keys will be applied)\n * @property {String|Object} [className] Alias for `class`\n * @property {String|Object} [style] Style, as a string or an object (keys will be hyphenated)\n * @property {Object} [elementData] Data object stored as an expando on the resulting element\n * @property {Object} [dataset] Dataset applied to the resulting element\n * @property {DomConfig[]|Object<String,DomConfig>|String[]|HTMLElement[]} [children] Child elements, as an array that can include\n * DomConfigs that will be turned into elements, plain strings that will be used as text nodes or existing elements that\n * will be moved. Also accepts an object map of DomConfigs, but please note that it cannot be used with\n * `DomHelper.createElement()`\n * @property {String} [html] Html string, used as the resulting elements `innerHTML`. Mutually exclusive with the `children` property\n * @property {TooltipConfig|String} [tooltip] Tooltip config applied to the resulting element\n * @property {String} [text] Text content, XSS safe when you want to display text in the element. Mutually exclusive with the `children` property\n * @property {String} [id] Element's `id`\n * @property {String} [href] Element's `href`\n * @property {String} [ns] Element's namespace\n * @property {String} [src] Element's `src`\n */\n\n/**\n * Helps with dom querying and manipulation.\n *\n * ```javascript\n * DomHelper.createElement({\n *   tag: 'div',\n *   className: 'parent',\n *   style: 'background: red',\n *   children: [\n *      { tag: 'div', className: 'child' },\n *      { tag: 'div', className: 'child' }\n *   ]\n * });\n * ```\n */\nexport default class DomHelper {\n\n    /**\n     * Animates the specified element to slide it into view within the visible viewport\n     * of its parentElement from the direction of movement.\n     *\n     * So in a left-to-right Widget, `direction` 1 means it slides in from the right\n     * and `direction` -1 means it slides in from the left. RTL reverses the movement.\n     *\n     * See the forward/backward navigations in {@link Core.widget.DatePicker} for an example\n     * of this in action.\n     *\n     * If \"next\" should arrive from below and \"previous\" should arrive from above, add the\n     * class `b-slide-vertical` to the element.\n     * @param {HTMLElement} element The element to slide in.\n     * @param {Number} direction\n     * * `1` to slide in from the \"next\" direction.\n     * * `-1` to slide in from the \"previous\" direction.\n     *\n     * If the element is inside an RTL widget the directions are reversed.\n     * @async\n     */\n    static async slideIn(element, direction = 1) {\n        const\n            cls           = `b-slide-in-${direction > 0 ? 'next' : 'previous'}`,\n            { classList } = element,\n            { style }     = element.parentNode,\n            {\n                overflow,\n                overflowX,\n                overflowY\n            }  = style;\n\n        style.overflow = 'hidden';\n        classList.add(cls);\n        await EventHelper.waitForTransitionEnd({\n            element,\n            animationName : slideInAnimationName\n        });\n        style.overflow = overflow;\n        style.overflowX = overflowX;\n        style.overflowY = overflowY;\n        classList.remove(cls);\n    }\n\n    /**\n     * Returns `true` if the passed element is focusable either programmatically or through pointer gestures.\n     * @param {HTMLElement} element The element to test.\n     * @returns {Boolean} Returns `true` if the passed element is focusable\n     */\n    static isFocusable(element, skipAccessibilityCheck = false) {\n        if (!skipAccessibilityCheck) {\n            // If element is hidden or in a hidden Widget, it's not focusable.\n            if (!DH.isVisible(element) || DH.Widget.fromElement(element, isHiddenWidget)) {\n                return false;\n            }\n        }\n\n        const nodeName = element.nodeName;\n\n        /*\n         * An element is focusable if:\n         *   - It is natively focusable, or\n         *   - It is an anchor or link with href attribute, or\n         *   - It has a tabIndex, or\n         *   - It is an editing host (contenteditable=\"true\")\n         */\n        return nativeFocusableTags[nodeName] ||\n            ((nodeName === 'A' || nodeName === 'LINK') && !!element.href) ||\n            element.getAttribute('tabIndex') != null ||\n            element.contentEditable === 'true';\n    }\n\n    /**\n     * Returns `true` if the passed element accepts keystrokes to edit its contents.\n     * @returns {Boolean} Returns `true` if the passed element is editable.\n     */\n    static isEditable(element) {\n        return element.isContentEditable || nativeEditableTags[element.nodeName];\n    }\n\n    /**\n     * Returns the rectangle of the element which is currently visible in the browser viewport, i.e. user can find it on\n     * screen, or `false` if it is scrolled out of view.\n     * @param {HTMLElement} target The element to test.\n     * @param {Boolean} [whole=false] Whether to check that whole element is visible, not just part of it.\n     * If this is passed as true, the result will be a boolean, `true` or `false`.\n     * @privateparam {Core.widget.Widget} [caller] the Widget aligning to the target.\n     * @returns {Core.helper.util.Rectangle|Boolean} Returns the rectangle of the element which is currently visible in\n     * the browser viewport, or `false` if it is out of view.\n     */\n    static isInView(target, whole = false, caller) {\n        // If the target cannot yield a Rectangle, shortcut all processing.\n        if (!hasLayout(target)) {\n            return false;\n        }\n\n        const\n            positioned        = caller?.positioned && DomHelper.getStyleValue(caller.element, 'position') !== 'fixed',\n            docRect           = Rectangle.from(globalThis),\n            method            = whole ? 'contains' : 'intersect',\n            cOp               = positioned && caller.element.offsetParent,\n            cOpR              = positioned && Rectangle.from(cOp);\n\n        // If we get to the top, the visible rectangle is the entire document.\n        docRect.height = doc.scrollingElement.scrollHeight;\n\n        // If they asked to test the body, it's always in view\n        if (target === doc.body) {\n            return docRect;\n        }\n\n        const result = this.getViewportIntersection(target, docRect, method);\n\n        // We must use the *viewport* coordinate system to ascertain viewability\n        if (result && positioned) {\n            result.translate(doc.scrollingElement.scrollLeft, doc.scrollingElement.scrollTop);\n        }\n\n        // Return any rectangle to its positioned coordinate system\n        return positioned && result ? result.translate(-cOpR.x + cOp.scrollLeft, -cOpR.y + cOp.scrollTop) : result;\n    }\n\n    /**\n     * This method goes up the DOM tree checking that all ancestors are visible in the viewport\n     * @param {HTMLElement} target Starting html element\n     * @param {Core.helper.util.Rectangle} docRect Window rectangle\n     * @param {String} method 'contains' or 'intersect'\n     * @returns {Core.helper.util.Rectangle}\n     */\n    static getViewportIntersection(target, docRect, method) {\n        const\n            { parentNode }    = target,\n            { parentElement } = (parentNode.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? target.getRootNode().host : target),\n            peStyle           = parentElement.ownerDocument.defaultView.getComputedStyle(parentElement),\n            parentScroll      = peStyle.overflowX !== 'visible' || peStyle.overflowY !== 'visible',\n            offsetParent      = getOffsetParent(target);\n\n        let result = Rectangle.from(target, null, true);\n\n        for (let viewport = parentScroll ? target.parentNode : offsetParent; result && viewport !== doc.documentElement; viewport = viewport.parentNode) {\n            // Skip shadow root node.\n            if (viewport.nodeType === Node.DOCUMENT_FRAGMENT_NODE && viewport.host) {\n                viewport = viewport.host.parentNode;\n            }\n\n            const\n                isTop        = viewport === doc.body,\n                style        = viewport.ownerDocument.defaultView.getComputedStyle(viewport),\n                viewportRect = isTop ? docRect : Rectangle.inner(viewport, null, true);\n\n            // If this level allows overflow to show, don't clip. Obv, <body> can't show overflowing els.\n            if (isTop || style.overflow !== 'visible') {\n                result = viewportRect[method](result, false, true);\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Returns `true` if the passed element is deeply visible. Meaning it is not hidden using `display`\n     * or `visibility` and no ancestor node is hidden.\n     * @param {HTMLElement} element The element to test.\n     * @returns {Boolean} `true` if deeply visible.\n     */\n    static isVisible(element) {\n        const document = element.ownerDocument;\n\n        // Use the parentNode function so that we can traverse upwards through shadow DOM\n        // to correctly ascertain visibility of nodes in web components.\n        for (; element; element = parentNode(element)) {\n            // Visible if we've reached top of the owning document without finding a hidden Element.\n            if (element === document) {\n                return true;\n            }\n            // Must not evaluate a shadow DOM's root fragment.\n            if (element.nodeType === element.ELEMENT_NODE && !isVisible(element)) {\n                return false;\n            }\n        }\n\n        // We get here if the node is detached.\n        return false;\n    }\n\n    /**\n     * Returns true if DOM Event instance is passed. It is handy to override to support Locker Service.\n     * @param event\n     * @internal\n     * @returns {Boolean}\n     */\n    static isDOMEvent(event) {\n        return event instanceof Event;\n    }\n\n    /**\n     * Merges specified source DOM config objects into a `dest` object.\n     * @param {DomConfig} dest The destination DOM config object.\n     * @param {...DomConfig} sources The DOM config objects to merge into `dest`.\n     * @returns {DomConfig} The `dest` object.\n     * @internal\n     */\n    static merge(dest, ...sources) {\n        return ObjectHelper.blend(dest, sources, { merge : mergeChildren });\n    }\n\n    /**\n     * Updates in-place a DOM config object whose `children` property may be an object instead of the typical array.\n     * The keys of such objects become the `reference` property upon conversion.\n     *\n     * @param {DomConfig} domConfig\n     * @param {Function} [namedChildren] A function to call for each named child element.\n     * @privateparam {Boolean} [ignoreRefs] Not meant to be manually set, used when recursing.\n     * @returns {DomConfig} Returns the altered DOM config\n     * @internal\n     */\n    static normalizeChildren(domConfig, namedChildren, ignoreRefs) {\n        let children = domConfig?.children,\n            child, i, name, kids, ref;\n\n        // Allow redirecting/opting out of ref ownership in a hierarchy\n        if (domConfig?.syncOptions?.ignoreRefs) {\n            ignoreRefs = true;\n        }\n\n        if (children && !(domConfig instanceof Node)) {\n            if (Array.isArray(children)) {\n                for (i = 0; i < children.length; ++i) {\n                    DH.normalizeChildren(children[i], namedChildren, ignoreRefs);\n                }\n            }\n            else {\n                kids = children;\n\n                domConfig.children = children = [];\n\n                for (name in kids) {\n                    child = kids[name];\n\n                    if (child?.isWidget) {\n                        child = child.element;\n                    }\n\n                    // $ prefix indicates element is not a reference:\n                    ref = !name.startsWith('$') && !DH.isElement(child);\n\n                    ref && namedChildren?.(name, /* hoist = */!ignoreRefs);\n\n                    if (child) {\n                        if (!(child instanceof Node)) {\n                            if (child.reference === false) {\n                                delete child.reference;\n                            }\n                            else if (ref && typeof child !== 'string') {\n                                child.reference = name;\n                            }\n\n                            DH.normalizeChildren(child, namedChildren, ignoreRefs);\n                        }\n\n                        children.push(child);\n                    }\n                }\n            }\n        }\n\n        return domConfig;\n    }\n\n    static roundPx(px, devicePixelRatio = globalThis.devicePixelRatio || 1) {\n        const multiplier = 1 / devicePixelRatio;\n        return Math.round(px / multiplier) * multiplier;\n    }\n\n    // For use when we are dividing a DOM element into even parts. The resulting value\n    // must be floored to prevent overflow. But only floored to the device's resolution,\n    // so raw Math.floor will not work - it would leave empty space in hi resolution screens.\n    static floorPx(px, devicePixelRatio = globalThis.devicePixelRatio || 1) {\n        const multiplier = 1 / devicePixelRatio;\n        return Math.floor(px * multiplier) / multiplier;\n    }\n\n    /**\n     * Returns true if element has opened shadow root\n     * @param {HTMLElement} element Element to check\n     * @returns {Boolean}\n     */\n    static isCustomElement(element) {\n        return Boolean(element?.shadowRoot);\n    }\n\n    /**\n     * Resolves element from point, checking shadow DOM if required\n     * @param {Number} x\n     * @param {Number} y\n     * @returns {HTMLElement}\n     */\n    static elementFromPoint(x, y) {\n        let el = document.elementFromPoint(x, y);\n\n        // Try to check shadow dom if it exists\n        if (DH.isCustomElement(el)) {\n            el = el.shadowRoot.elementFromPoint(x, y) || el;\n        }\n\n        return el;\n    }\n\n    /**\n     * Resolves child element from point __in the passed element's coordinate space__.\n     * @param {HTMLElement} parent The element to find the occupying element in.\n     * @param {Number|Core.helper.util.Point} x Either the `X` part of a point, or the point to find.\n     * @param {Number} [y] The `Y` part of the point.\n     * @returns {HTMLElement}\n     * @internal\n     */\n    static childFromPoint(el, x, y, /* internal */ parent = el) {\n        const p = y == null ? x : new Rectangle(x, y, 0, 0);\n\n        let result = null;\n\n        Array.from(el.children).some(el => {\n            if (Rectangle.from(el, parent).contains(p)) {\n                // All rectangles must be relative to the topmost el, so that must be\n                // passed down as the \"parent\" of all Rectangles.\n                result = (el.children.length) && DH.childFromPoint(el, p, null, parent) || el;\n                return true;\n            }\n        });\n\n        return result;\n    }\n\n    /**\n     * Converts a name/value pair of a style name and its value into the canonical (hyphenated) name of the style\n     * property and a value with the `defaultUnit` suffix appended if no unit is already present in the `value`.\n     *\n     * For example:\n     * ```javascript\n     *  const [property, value] = DomHelper.unitize('marginLeft', 50);\n     *  console.log(property, value);\n     * ```\n     *\n     * ```\n     *  > margin-left 50px\n     * ```\n     * @param {String} name\n     * @param {String|Number} value\n     * @param {String} [defaultUnit]\n     * @returns {String[]}\n     * @internal\n     */\n    static unitize(name, value, defaultUnit = 'px') {\n        const [trueName, hasUnits] = canonicalizeStyle(name);\n\n        if (value != null) {\n            value = String(value);\n            value = (hasUnits && digitsRe.test(value)) ? value + defaultUnit : value;\n        }\n\n        return [trueName, value];\n    }\n\n    /**\n     * Returns active element checking shadow dom too\n     * @readonly\n     * @property {HTMLElement}\n     */\n    static get activeElement() {\n        //<debug>\n        console.warn('Using DomHelper.activeElement will not work in LockerService environment. Use DomHelper.getActiveElement(element) instead, passing any real element in the current scope');\n        //</debug>\n\n        let el = document.activeElement;\n\n        while (el.shadowRoot) {\n            el = el.shadowRoot.activeElement;\n        }\n\n        return el;\n    }\n\n    // returns active element for DOM tree / shadow DOM tree to which element belongs\n    static getActiveElement(element) {\n        if (element?.isWidget) {\n            element = element.element;\n        }\n\n        // If no element passed, fallback to document\n        let el = (element?.getRootNode() || document).activeElement;\n\n        while (el?.shadowRoot) {\n            el = el.shadowRoot.activeElement;\n        }\n\n        return el;\n    }\n\n    // Returns the visible root (either document.body or a web component shadow root)\n    static getRootElement(element) {\n        const\n            root         = element.getRootNode?.(),\n            { nodeType } = root;\n\n        // If the root is a document, return its body.\n        // If it is a document fragment, then it us a shadow root, so return that.\n        // fall back to using the passed element's owning document body.\n        return nodeType === Node.DOCUMENT_NODE ? root.body : nodeType === Node.DOCUMENT_FRAGMENT_NODE ? root : (element.ownerDocument.contains(element) ? element.ownerDocument.body : null);\n    }\n\n    // Returns the topmost HTMLElement inside the current context (either document.body or a direct child of a web component shadow root)\n    static getOutermostElement(element) {\n        const root = element.getRootNode?.();\n\n        if (root?.body) {\n            return root?.body;\n        }\n\n        // we are in a shadow root\n        // parentNode might be null in salesforce\n        while (element.parentNode !== root && element.parentNode) {\n            element = element.parentNode;\n        }\n\n        return element;\n    }\n\n    static isValidFloatRootParent(target) {\n        return target === document.body || target.constructor.name === 'ShadowRoot';\n    }\n\n    /**\n     * Returns the `id` of the passed element. Generates a unique `id` if the element does not have one.\n     * @param {HTMLElement} element The element to return the `id` of.\n     */\n    static getId(element) {\n        return element.id || (element.id = 'b-element-' + (++idCounter));\n    }\n\n    /**\n     * Returns common widget/node ancestor for from/to arguments\n     * @param {Core.widget.Widget|HTMLElement} from\n     * @param {Core.widget.Widget|HTMLElement} to\n     * @returns {Core.widget.Widget|HTMLElement}\n     * @internal\n     */\n    static getCommonAncestor(from, to) {\n        if (from === to) {\n            return from;\n        }\n\n        while (from && !(from[from.isWidget ? 'owns' : 'contains']?.(to) || from === to)) {\n            from = from.owner || from.parentNode;\n        }\n\n        return from;\n    }\n\n    //region Internal\n\n    /**\n     * Internal convenience fn to allow specifying either an element or a CSS selector to retrieve one\n     * @private\n     * @param {String|HTMLElement} elementOrSelector element or selector to lookup in DOM\n     * @returns {HTMLElement}\n     */\n    static getElement(elementOrSelector) {\n        // also used for SVG elements, so need to use more basic class, that is also returned by querySelector\n        if (elementOrSelector instanceof Element) {\n            return elementOrSelector;\n        }\n\n        return doc.querySelector(elementOrSelector);\n    }\n\n    /**\n     * Sets attributes passed as object to given element\n     * @param {String|Element} elementOrSelector\n     * @param {Object} attributes\n     * @internal\n     */\n    static setAttributes(elementOrSelector, attributes) {\n        const element = DH.getElement(elementOrSelector);\n\n        if (element && attributes) {\n            for (const key in attributes) {\n                if (attributes[key] == null) {\n                    element.removeAttribute(key);\n                }\n                else {\n                    element.setAttribute(key, attributes[key]);\n                }\n            }\n        }\n    }\n\n    /**\n     * Sets a CSS [length](https://developer.mozilla.org/en-US/docs/Web/CSS/length) style value.\n     * @param {String|HTMLElement} element The element to set the style in, or, if just the result is required,\n     * the style magnitude to return with units added. If a nullish value is passed, an empty string\n     * is returned.\n     * @param {String} [style] The name of a style property which specifies a [length](https://developer.mozilla.org/en-US/docs/Web/CSS/length)\n     * @param {Number|String} [value] The magnitude. If a number is used, the value will be set in `px` units.\n     * @returns {String} The style value string.\n     */\n    static setLength(element, style, value) {\n        if (arguments.length === 1) {\n            value = typeof element === 'number' ? `${element}px` : element ?? '';\n        }\n        else {\n            element = DH.getElement(element);\n            value = element.style[style] = typeof value === 'number' ? `${value}px` : value ?? '';\n        }\n\n        return value;\n    }\n\n    /**\n     * Returns string percentified and rounded value for setting element's height, width etc.\n     * @param {String|Number} value percent value\n     * @param {Number} digits number of decimal digits for rounding\n     * @returns {string} percentified value or empty string if value can not be parsed\n     * @internal\n     */\n    static percentify(value, digits = 2) {\n        const mult = Math.pow(10, digits);\n        return value == null || value === '' || isNaN(value) ? '' : `${Math.round(value * mult) / mult}%`;\n    }\n\n    //endregion\n\n    //region Children, going down...\n\n    /**\n     * Gets the first direct child of `element` that matches `selector`.\n     * @param {HTMLElement} element Parent element\n     * @param {String} selector CSS selector\n     * @returns {HTMLElement}\n     * @category Query children\n     */\n    static getChild(element, selector) {\n        return element.querySelector(':scope>' + selector);\n    }\n\n    /**\n     * Checks if `element` has any child that matches `selector`.\n     * @param {HTMLElement} element Parent element\n     * @param {String} selector CSS selector\n     * @returns {Boolean} true if any child matches selector\n     * @category Query children\n     */\n    static hasChild(element, selector) {\n        return DH.getChild(element, selector) != null;\n    }\n\n    /**\n     * Returns all child elements (not necessarily direct children) that matches `selector`.\n     *\n     * If `selector` starts with `'>'` or `'# '`, then all components of the `selector` must match inside of `element`.\n     * The scope selector, `:scope` is prepended to the selector (and if `#` was used, it is removed).\n     *\n     * These are equivalent:\n     *\n     *      DomHelper.children(el, '# .foo .bar');\n     *\n     *      el.querySelectorAll(':scope .foo .bar');\n     *\n     * These are also equivalent:\n     *\n     *      DomHelper.children(el, '> .foo .bar');\n     *\n     *      el.querySelectorAll(':scope > .foo .bar');\n     *\n     * @param {HTMLElement} element The parent element\n     * @param {String} selector The CSS selector\n     * @returns {HTMLElement[]} Matched elements, somewhere below `element`\n     * @category Query children\n     */\n    static children(element, selector) {\n        // a '#' could be '#id' but '# ' (hash and space) is not a valid selector...\n        if (selector[0] === '>' || selector.startsWith('# ')) {\n            if (selector[0] === '#') {\n                selector = selector.substr(2);\n            }\n\n            selector = ':scope ' + selector;\n        }\n\n        return Array.from(element.querySelectorAll(selector));\n    }\n\n    // Salesforce doesn't yet support childElementCount. So we relace all native usages with this wrapper and\n    // override it for salesforce environment.\n    // https://github.com/bryntum/support/issues/3008\n    static getChildElementCount(element) {\n        return element.childElementCount;\n    }\n\n    /**\n     * Looks at the specified `element` and all of its children for the one that first matches `selector.\n     * @param {HTMLElement} element Parent element\n     * @param {String} selector CSS selector\n     * @returns {HTMLElement} Matched element, either element or an element below it\n     * @category Query children\n     */\n    static down(element, selector) {\n        if (!element) {\n            return null;\n        }\n\n        if (element.matches && element.matches(selector)) {\n            return element;\n        }\n        selector = ':scope ' + selector;\n        return element.querySelector(selector);\n    }\n\n    /**\n     * Checks if childElement is a descendant of parentElement (contained in it or a sub element)\n     * @param {HTMLElement} parentElement Parent element\n     * @param {HTMLElement} childElement Child element, at any level below parent (includes nested shadow roots)\n     * @returns {Boolean}\n     * @category Query children\n     */\n    static isDescendant(parentElement, childElement) {\n        const\n            parentRoot = DH.getRootElement(parentElement),\n            childRoot = DH.getRootElement(childElement);\n\n        if (childRoot && parentRoot !== childRoot && childRoot.host) {\n            return DH.isDescendant(parentRoot, childRoot.host);\n        }\n        return parentElement.contains(childElement);\n    }\n\n    /**\n     * Returns the specified element of the given `event`. If the `event` is an `Element`, it is returned. Otherwise,\n     * the `eventName` argument is used to retrieve the desired element property from `event` (this defaults to the\n     * `'target'` property).\n     * @param {Event|Element} event\n     * @param {String} [elementName]\n     * @returns {Element}\n     */\n    static getEventElement(event, elementName = 'target') {\n        return (!event || DH.isElement(event)) ? event : event[elementName];\n    }\n\n    /**\n     * Returns `true` if the provided value is _likely_ a DOM element. If the element can be assured to be from the\n     * same document, `instanceof Element` is more reliable.\n     * @param {*} value\n     * @returns {Boolean}\n     */\n    static isElement(value) {\n        return value?.nodeType === document.ELEMENT_NODE && DH.isNode(value);\n    }\n\n    /**\n     * Returns `true` if the provided element is an instance of React Element.\n     * All React elements require an additional $$typeof: Symbol.for('react.element') field declared on the object for security reasons.\n     * The object which React.createElement() return has $$typeof property equals to Symbol.for('react.element')\n     *\n     * Sources:\n     * https://reactjs.org/blog/2015/12/18/react-components-elements-and-instances.html\n     * https://github.com/facebook/react/pull/4832\n     *\n     * @param {*} element\n     * @returns {Boolean}\n     * @internal\n     */\n    static isReactElement(element) {\n        return element?.$$typeof === Symbol.for('react.element');\n    }\n\n    /**\n     * Returns `true` if the provided value is _likely_ a DOM node. If the node can be assured to be from the same\n     * document, `instanceof Node` is more reliable.\n     * @param {*} value\n     * @returns {Boolean}\n     */\n    static isNode(value) {\n        // cannot use instanceof across frames. Using it here won't help since we'd need the same logic if it were\n        // false... meaning we'd have the same chances of a false-positive.\n        return Boolean(value) && typeof value.nodeType === 'number' && !isObject(value);\n    }\n\n    /**\n     * Iterates over each result returned from `element.querySelectorAll(selector)`. First turns it into an array to\n     * work in IE. Can also be called with only two arguments, in which case the first argument is used as selector and\n     * document is used as the element.\n     * @param {HTMLElement} element Parent element\n     * @param {String} selector CSS selector\n     * @param {Function} fn Function called for each found element\n     * @category Query children\n     */\n    static forEachSelector(element, selector, fn) {\n        if (typeof element === 'string') {\n            // Legacy internal API, no longer valid\n            throw new Error('DomHelper.forEachSelector must provide a root element context (for shadow root scenario)');\n        }\n        DH.children(element, selector).forEach(fn);\n    }\n\n    /**\n     * Iterates over the direct child elements of the specified element. First turns it into an array to\n     * work in IE.\n     * @param {HTMLElement} element Parent element\n     * @param {Function} fn Function called for each child element\n     * @category Query children\n     */\n    static forEachChild(element, fn) {\n        Array.from(element.children).forEach(fn);\n    }\n\n    /**\n     * Removes each element returned from `element.querySelectorAll(selector)`.\n     * @param {HTMLElement} element\n     * @param {String} selector\n     * @category Query children\n     */\n    static removeEachSelector(element, selector) {\n        DH.forEachSelector(element, selector, child => child.remove());\n    }\n\n    static removeClsGlobally(element, ...classes) {\n        classes.forEach(cls => DH.forEachSelector(element, '.' + cls, child => child.classList.remove(cls)));\n    }\n\n    //endregion\n\n    //region Parents, going up...\n\n    static isOrphaned(element) {\n        return !isInDocument(element);\n    }\n\n    /**\n     * Looks at the specified element and all of its parents for the one that first matches selector.\n     * @deprecated Since 5.3.9, use native `element.closest()` instead\n     * @param {HTMLElement} element Element\n     * @param {String} selector CSS selector\n     * @returns {HTMLElement} Matched element, either the passed in element or an element above it\n     * @category Query parents\n     */\n    static up(element, selector) {\n        VersionHelper.deprecate('Core', '6.0.0', 'DomHelper.up() deprecated, use native `element.closest()` instead');\n\n        return element.closest(selector);\n    }\n\n    static getAncestor(element, possibleAncestorParents, outerElement = null) {\n        let found  = false,\n            ancestor,\n            parent = element;\n\n        possibleAncestorParents = ArrayHelper.asArray(possibleAncestorParents);\n\n        while ((parent = parent.parentElement)) {\n            if (possibleAncestorParents.includes(parent)) {\n                found = true;\n                break;\n            }\n            if (outerElement && parent === outerElement) break;\n            ancestor = parent;\n        }\n\n        if (!found) return null;\n        return ancestor || element;\n    }\n\n    /**\n     * Retrieves all parents to the specified element.\n     * @param {HTMLElement} element Element\n     * @returns {HTMLElement[]} All parent elements, bottom up\n     * @category Query parents\n     */\n    static getParents(element) {\n        const parents = [];\n\n        while (element.parentElement) {\n            parents.push(element.parentElement);\n            element = element.parentElement;\n        }\n\n        return parents;\n    }\n\n    //endregion\n\n    //region Creation\n\n    /**\n     * Converts the passed id to an id valid for usage as id on a DOM element.\n     * @param {String} id\n     * @returns {String}\n     */\n    static makeValidId(id, replaceValue = '') {\n        return StringHelper.makeValidDomId(id, replaceValue);\n    }\n\n    /**\n     * Creates an Element, accepts a {@link #typedef-DomConfig} object. Example usage:\n     *\n     * ```javascript\n     * DomHelper.createElement({\n     *   tag         : 'table', // defaults to 'div'\n     *   className   : 'nacho',\n     *   html        : 'I am a nacho',\n     *   children    : [ { tag: 'tr', ... }, myDomElement ],\n     *   parent      : myExistingElement // Or its id\n     *   style       : 'font-weight: bold;color: red',\n     *   dataset     : { index: 0, size: 10 },\n     *   tooltip     : 'Yay!',\n     *   ns          : 'http://www.w3.org/1999/xhtml'\n     * });\n     * ```\n     *\n     * @param {DomConfig} config Element config object\n     * @param {Object} [options] An object specifying creation options. If this is a boolean value, it is\n     * understood to be the `returnAll` option.\n     * @param {Boolean} [options.ignoreRefs] Pass `true` to ignore element references.\n     * @param {Boolean} [options.returnAll] Specify true to return all elements & child elements\n     * created as an array.\n     * @returns {HTMLElement|HTMLElement[]|Object<String,HTMLElement>} Single element or array of elements `returnAll` was set to true.\n     * If any elements had a `reference` property, this will be an object containing a reference to\n     * all those elements, keyed by the reference name.\n     * @category Creation\n     */\n    static createElement(config = {}, options) {\n        let returnAll = options,\n            element, i, ignoreChildRefs, ignoreRefOption, ignoreRefs, key, name, value, refOwner, refs, syncIdField;\n\n        if (typeof returnAll === 'boolean') {\n            throw new Error('Clean up');\n        }\n        else if (options) {\n            ignoreRefs = options.ignoreRefs;\n            refOwner = options.refOwner;\n            refs = options.refs;\n            returnAll = options.returnAll;\n            syncIdField = options.syncIdField;\n\n            if (ignoreRefs) {\n                ignoreChildRefs = true;\n                ignoreRefs = ignoreRefs !== 'children';\n            }\n        }\n\n        if (typeof config.parent === 'string') {\n            config.parent = document.getElementById(config.parent);\n        }\n\n        // nextSibling implies a parent\n        const\n            parent = config.parent || (config.nextSibling && config.nextSibling.parentNode),\n            { dataset, html, reference, syncOptions, text } = config;\n\n        if (syncOptions) {\n            syncIdField = syncOptions.syncIdField || syncIdField;\n            ignoreRefOption = syncOptions.ignoreRefs;\n\n            if (ignoreRefOption) {\n                ignoreChildRefs = true;\n                ignoreRefs = ignoreRefOption !== 'children';\n\n                options = {\n                    ...options,\n                    ignoreRefs : true\n                };\n            }\n        }\n\n        if (ignoreRefs) {\n            refOwner = null;\n        }\n\n        if (config.ns) {\n            element = doc.createElementNS(config.ns, config.tag || 'svg');\n        }\n        else {\n            element = doc.createElement(config.tag || 'div');\n        }\n\n        if (text != null) {\n            DH.setInnerText(element, text);\n        }\n        else if (html != null) {\n            if (html instanceof DocumentFragment) {\n                element.appendChild(html);\n            }\n            else {\n                element.innerHTML = html;\n            }\n        }\n\n        if (config.tooltip) {\n            DH.Widget.attachTooltip(element, config.tooltip);\n        }\n\n        if (config.style) {\n            DH.applyStyle(element, config.style);\n        }\n\n        if (dataset) {\n            for (name in dataset) {\n                value = dataset[name];\n\n                if (value != null) {\n                    element.dataset[name] = value;\n                }\n            }\n        }\n\n        if (parent) {\n            this.addChild(parent, element, config.nextSibling);\n        }\n\n        if (refOwner) {\n            // Tag each element created by the refOwner's id to enable DomSync\n            element.$refOwnerId = refOwner.id;\n        }\n\n        if (reference && !ignoreRefs) {\n            // SalesForce platform does not allow custom attributes, but existing code\n            // uses querySelector('[reference]'), so bypass it when we can:\n            if (refOwner) {\n                element.$reference = reference;\n\n                refOwner.attachRef(reference, element, config);\n            }\n            else {\n                // TODO fixup callers to do the above\n                if (!refs) {\n                    options = Object.assign({}, options);\n                    options.refs = refs = {};\n                }\n\n                refs[reference] = element;\n                element.setAttribute('data-reference', reference);\n            }\n        }\n\n        const\n            className = config.className || config.class, // matches DomSync\n            keys = Object.keys(config);\n\n        if (className) {\n            element.setAttribute('class', DomClassList.normalize(className));\n        }\n\n        for (i = 0; i < keys.length; ++i) {\n            name = keys[i];\n            value = config[name];\n\n            // We have to use setAttribute() for custom attributes to work and this is inline with how DomSync\n            // handles attributes. For \"expando\" properties, however, we have to simply assign them.\n            if ((key = elementCreateExpandos[name]) != null) {\n                element[key || name] = value;\n            }\n            else if (!elementCreateProperties[name] && name && value != null) {\n                // if (config.ns) {\n                //     element.setAttributeNS(config.ns, name, value);\n                // }\n                // else {\n                //     element.setAttribute(name, value);\n                // }\n                element.setAttribute(name, value);\n            }\n        }\n\n        // ARIA. In the absence of a defined role or the element being hidden from ARIA,\n        // omit unfocusable elements from the accessibility tree.\n        if (!config['aria-hidden'] && !config.role && !config.tabIndex && !DomHelper.isFocusable(element, true) && !element.htmlFor) {\n            element.setAttribute('role', 'presentation');\n        }\n\n        // Mimic the way DomSync issues callbacks as elements are created (needed by TaskBoard to trigger custom\n        // taskRenderer calls as elements get produced).\n        options?.callback?.({\n            action        : 'newElement',\n            domConfig     : config,\n            targetElement : element,\n            syncId        : refOwner ? reference : (options.syncIdField && config.dataset?.[options.syncIdField])\n        });\n\n        // if returnAll is true, use array\n        if (returnAll === true) {\n            options.returnAll = returnAll = [element];\n        }\n        // if it already is an array, add to it (we are probably a child)\n        else if (Array.isArray(returnAll)) {\n            returnAll.push(element);\n        }\n\n        if (config.children) {\n            if (syncIdField) {\n                // Map syncId -> child element to avoid querying dom later on\n                element.syncIdMap = {};\n            }\n\n            config.children.forEach(child => {\n                // Skip null children, convenient to allow those for usage with Array.map()\n                if (child) {\n                    // Append string children as text nodes\n                    if (typeof child === 'string') {\n                        const textNode = document.createTextNode(child);\n\n                        if (refOwner) {\n                            textNode.$refOwnerId = refOwner.id;\n                        }\n\n                        element.appendChild(textNode);\n                    }\n                    // Just append Elements directly.\n                    else if (isNaN(child.nodeType)) {\n                        child.parent = element;\n\n                        if (!child.ns && config.ns) {\n                            child.ns = config.ns;\n                        }\n\n                        const\n                            childElement = DH.createElement(child, {\n                                ...options,\n                                ignoreRefs : config.syncOptions?.ignoreRef ?? ignoreChildRefs\n                            }),\n                            syncId = child.dataset?.[syncIdField];\n\n                        // syncId is used with DomHelper.sync to match elements. Populate a map here to make finding them faster\n                        if (syncId != null) {\n                            element.syncIdMap[syncId] = childElement;\n                        }\n\n                        // Do not want to alter the initial config\n                        delete child.parent;\n                    }\n                    else {\n                        element.appendChild(child);\n                    }\n                }\n            });\n        }\n\n        // Store used config, to be able to compare on sync to determine if changed without hitting dom\n        element.lastDomConfig = config;\n\n        // If references were used, return them in an object\n        // If returnAll was specified, return the array\n        // By default, return the root element\n        return refs || returnAll || element;\n    }\n\n    /**\n     * Create element(s) from a template (html string). Note that\n     * `textNode`s are discarded unless the `raw` option is passed\n     * as `true`.\n     *\n     * If the template has a single root element, then the single element will be returned\n     * unless the `array` option is passed as `true`.\n     *\n     * If there are multiple elements, then an Array will be returned.\n     *\n     * @param {String} template The HTML string from which to create DOM content\n     * @param {Object} [options] An object containing properties to modify how the DOM is created and returned.\n     * @param {Boolean} [options.array] `true` to return an array even if there's only one resulting element.\n     * @param {Boolean} [options.raw] Return all child nodes, including text nodes.\n     * @param {Boolean} [options.fragment] Return a DocumentFragment.\n     * @private\n     */\n    static createElementFromTemplate(template, options = emptyObject) {\n        const { array, raw, fragment } = options;\n        let result;\n\n        // Use template by preference if it exists. It's faster on most supported platforms\n        // https://jsperf.com/domparser-vs-template/\n        if (DH.supportsTemplate) {\n            (templateElement || (templateElement = doc.createElement('template'))).innerHTML = template;\n\n            result = templateElement.content;\n            if (fragment) {\n                // The template is reused, so therefore is its fragment.\n                // If we release the fragment to a caller, it must be a clone.\n                return result.cloneNode(true);\n            }\n        }\n        else {\n            result = (htmlParser || (htmlParser = new DOMParser())).parseFromString(template, 'text/html').body;\n\n            // We must return a DocumentFragment.\n            // myElement.append(fragment) inserts the contents of the fragment, not the fragment itself.\n            if (fragment) {\n                const nodes = result.childNodes;\n                result = document.createDocumentFragment();\n                while (nodes.length) {\n                    result.appendChild(nodes[0]);\n                }\n                return result;\n            }\n        }\n\n        // Raw means all child nodes are returned\n        if (raw) {\n            result = result.childNodes;\n        }\n        // Otherwise, only element nodes\n        else {\n            result = result.children;\n        }\n\n        return result.length === 1 && !array ? result[0] : arraySlice.call(result);\n    }\n\n    /**\n     * Dispatches a MouseEvent of the passed type to the element at the visible centre of the passed element.\n     * @param {HTMLElement} targetElement The element whose center receives the mouse event.\n     * @param {String} [type=contextmenu] The mouse event type to dispatch.\n     * @internal\n     */\n    static triggerMouseEvent(targetElement, type = 'contextmenu') {\n        const\n            isInView         = this.isInView(targetElement),\n            targetRect       = isInView || Rectangle.from(targetElement),\n            targetPoint      = targetRect.center,\n            contextmenuEvent = new MouseEvent(type, {\n                clientX : targetPoint.x,\n                clientY : targetPoint.y,\n                bubbles : true\n            });\n\n        targetElement.dispatchEvent(contextmenuEvent);\n    }\n\n    /**\n     * Inserts an `element` at first position in `into`.\n     * @param {HTMLElement} into Parent element\n     * @param {HTMLElement} element Element to insert, or an element config passed on to createElement()\n     * @returns {HTMLElement}\n     * @category Creation\n     */\n    static insertFirst(into, element) {\n        if (element && element.nodeType !== ELEMENT_NODE && element.tag) {\n            element = DH.createElement(element);\n        }\n        return into.insertBefore(element, into.firstElementChild);\n    }\n\n    /**\n     * Inserts a `element` before `beforeElement` in `into`.\n     * @param {HTMLElement} into Parent element\n     * @param {HTMLElement} element Element to insert, or an element config passed on to createElement()\n     * @param {HTMLElement} beforeElement Element before which passed element should be inserted\n     * @returns {HTMLElement}\n     * @category Creation\n     */\n    static insertBefore(into, element, beforeElement) {\n        if (element && element.nodeType !== ELEMENT_NODE && element.tag) {\n            element = DH.createElement(element);\n        }\n        return beforeElement ? into.insertBefore(element, beforeElement) : DH.insertFirst(into, element);\n    }\n\n    static insertAt(parentElement, newElement, index) {\n        const siblings = Array.from(parentElement.children);\n\n        if (index >= siblings.length) {\n            return DH.append(parentElement, newElement);\n        }\n\n        const beforeElement = siblings[index];\n\n        return DH.insertBefore(parentElement, newElement, beforeElement);\n    }\n\n    /**\n     * Appends element to parentElement.\n     * @param {HTMLElement} parentElement Parent element\n     * @param {HTMLElement|DomConfig|String} elementOrConfig Element to insert, or an element config passed on to\n     * `createElement()`, or an html string passed to `createElementFromTemplate()`\n     * @returns {HTMLElement}\n     * @category Creation\n     */\n    static append(parentElement, elementOrConfig) {\n        if (elementOrConfig.forEach) {\n            // Ensure all elements of an Array are HTMLElements.\n            // The other implementor of forEach is a NodeList which needs no conversion.\n            if (Array.isArray(elementOrConfig)) {\n                elementOrConfig = elementOrConfig.map(elementOrConfig => elementOrConfigToElement(elementOrConfig));\n            }\n            if (parentElement.append) {\n                parentElement.append(...elementOrConfig);\n            }\n            else {\n                const docFrag = document.createDocumentFragment();\n\n                elementOrConfig.forEach(function(child) {\n                    docFrag.appendChild(child);\n                });\n\n                parentElement.appendChild(docFrag);\n            }\n            return elementOrConfig;\n        }\n        else {\n            return parentElement.appendChild(elementOrConfigToElement(elementOrConfig));\n        }\n    }\n\n    //endregion\n\n    //region Get position\n\n    /**\n     * Returns the element's `transform translateX` value in pixels.\n     * @param {HTMLElement} element\n     * @returns {Number} X transform\n     * @category Position, get\n     */\n    static getTranslateX(element) {\n        const transformStyle = element.style.transform;\n        let matches = pxTtranslateXRe.exec(transformStyle);\n\n        // Use inline transform style if it contains \"translate(npx, npx\" or \"translate3d(npx, npx\" or \"translateX(npx\"\n        if (matches) {\n            return parseFloat(matches[2]);\n        }\n        else {\n            // If the inline style is the matrix() form, then use that, otherwise, use computedStyle\n            matches =\n                translateMatrixRe.exec(transformStyle) ||\n                translateMatrixRe.exec(DH.getStyleValue(element, 'transform'));\n            return matches ? parseFloat(matches[1] || matches[3]) : 0;\n        }\n    }\n\n    /**\n     * Returns the element's `transform translateY` value in pixels.\n     * @param {HTMLElement} element\n     * @returns {Number} Y coordinate\n     * @category Position, get\n     */\n    static getTranslateY(element) {\n        const transformStyle = element.style.transform;\n        let matches = pxTtranslateYRe.exec(transformStyle);\n\n        // Use inline transform style if it contains \"translate(npx, npx\" or \"translate3d(npx, npx\" or \"translateY(npx\"\n        if (matches) {\n            // If it was translateY(npx), use first item in the parens.\n            const y = parseFloat(matches[matches[1] === 'Y' ? 2 : 3]);\n            // FF will strip `translate(x, 0)` -> `translate(x)`, so need to check for isNaN also\n            return isNaN(y) ? 0 : y;\n        }\n        else {\n            // If the inline style is the matrix() form, then use that, otherwise, use computedStyle\n            matches =\n                translateMatrixRe.exec(transformStyle) ||\n                translateMatrixRe.exec(DH.getStyleValue(element, 'transform'));\n            return matches ? parseFloat(matches[2] || matches[4]) : 0;\n        }\n    }\n\n    /**\n     * Gets both X and Y coordinates as an array [x, y]\n     * @param {HTMLElement} element\n     * @returns {Number[]} [x, y]\n     * @category Position, get\n     */\n    static getTranslateXY(element) {\n        return [DH.getTranslateX(element), DH.getTranslateY(element)];\n    }\n\n    /**\n     * Get elements X offset within a containing element\n     * @param {HTMLElement} element\n     * @param {HTMLElement} container\n     * @returns {Number} X offset\n     * @category Position, get\n     */\n    static getOffsetX(element, container = null) {\n        return container ? element.getBoundingClientRect().left - container.getBoundingClientRect().left : element.offsetLeft;\n    }\n\n    /**\n     * Get elements Y offset within a containing element\n     * @param {HTMLElement} element\n     * @param {HTMLElement} container\n     * @returns {Number} Y offset\n     * @category Position, get\n     */\n    static getOffsetY(element, container = null) {\n        return container ? element.getBoundingClientRect().top - container.getBoundingClientRect().top : element.offsetTop;\n    }\n\n    /**\n     * Gets elements X and Y offset within containing element as an array [x, y]\n     * @param {HTMLElement} element\n     * @param {HTMLElement} container\n     * @returns {Number[]} [x, y]\n     * @category Position, get\n     */\n    static getOffsetXY(element, container = null) {\n        return [DH.getOffsetX(element, container), DH.getOffsetY(element, container)];\n    }\n\n    /**\n     * Focus element without scrolling the element into view.\n     * @param {HTMLElement} element\n     */\n    static focusWithoutScrolling(element) {\n\n        function resetScroll(scrollHierarchy) {\n            scrollHierarchy.forEach(({ element, scrollLeft, scrollTop }) => {\n                // Check first to avoid triggering unnecessary `scroll` events\n                if (element.scrollLeft !== scrollLeft) {\n                    element.scrollLeft = scrollLeft;\n                }\n                if (element.scrollTop !== scrollTop) {\n                    element.scrollTop = scrollTop;\n                }\n            });\n        }\n\n        // Check browsers which do support focusOptions. Currently only Safari lags.\n        // https://caniuse.com/mdn-api_htmlelement_focus_preventscroll_option\n        const preventScrollSupported = !BrowserHelper.isSafari;\n\n        if (preventScrollSupported) {\n            element.focus({ preventScroll : true });\n        }\n        else {\n            // Examine every parentNode of the target and cache the scrollLeft and scrollTop,\n            // and restore all values after the focus has taken place\n            const\n                parents         = DH.getParents(element),\n                scrollHierarchy = parents.map(parent => ({\n                    element    : parent,\n                    scrollLeft : parent.scrollLeft,\n                    scrollTop  : parent.scrollTop\n                }));\n\n            element.focus();\n\n            // Reset in async.\n            setTimeout(() => resetScroll(scrollHierarchy), 0);\n        }\n    }\n\n    /**\n     * Get elements X position on page\n     * @param {HTMLElement} element\n     * @returns {Number}\n     * @category Position, get\n     */\n    static getPageX(element) {\n        return element.getBoundingClientRect().left + win.pageXOffset;\n    }\n\n    /**\n     * Get elements Y position on page\n     * @param {HTMLElement} element\n     * @returns {Number}\n     * @category Position, get\n     */\n    static getPageY(element) {\n        return element.getBoundingClientRect().top + win.pageYOffset;\n    }\n\n    /**\n     * Returns extremal (min/max) size (height/width) of the element in pixels\n     * @param {HTMLElement} element\n     * @param {String} style minWidth/minHeight/maxWidth/maxHeight\n     * @returns {Number}\n     * @internal\n     */\n    static getExtremalSizePX(element, style) {\n        const\n            prop    = StringHelper.hyphenate(style),\n            measure = prop.split('-')[1];\n\n        let value   = DH.getStyleValue(element, prop);\n\n        if (/%/.test(value)) {\n            // Element might be detached from DOM\n            if (element.parentElement) {\n                value = parseInt(DH.getStyleValue(element.parentElement, measure), 10);\n            }\n            else {\n                value = NaN;\n            }\n        }\n        else {\n            value = parseInt(value, 10);\n        }\n\n        return value;\n    }\n\n    //endregion\n\n    //region Set position\n\n    /**\n     * Set element's `scale`.\n     * @param {HTMLElement} element\n     * @param {Number} scaleX The value by which the element should be scaled in the X axis (0 to 1)\n     * @param {Number} [scaleY] The value by which the element should be scaled in the Y axis (0 to 1).\n     * Defaults to `scaleX`\n     * @category Position, set\n     * @internal\n     */\n    static setScale(element, scaleX, scaleY = scaleX) {\n        const t = DH.getStyleValue(element, 'transform').split(/,\\s*/);\n\n        if (t.length > 1) {\n            if (t[0].startsWith('matrix3d')) {\n                t[0] = `matrix3d(${scaleX}`;\n                t[5] = scaleY;\n            }\n            else {\n                t[0] = `matrix(${scaleX}`;\n                t[3] = scaleY;\n            }\n            element.style.transform = t.join(',');\n        }\n        else {\n            element.style.transform = `scale(${scaleX}, ${scaleY})`;\n        }\n    }\n\n    /**\n     * Set element's `X` translation in pixels.\n     * @param {HTMLElement} element\n     * @param {Number} x The value by which the element should be translated from its default position.\n     * @category Position, set\n     */\n    static setTranslateX(element, x) {\n        const t = DH.getStyleValue(element, 'transform').split(/,\\s*/);\n\n        // Avoid blurry text on non-retina displays\n        x = DH.roundPx(x);\n\n        if (t.length > 1) {\n            t[t[0].startsWith('matrix3d') ? 12 : 4] = x;\n            element.style.transform = t.join(',');\n        }\n        else {\n            element.style.transform = `translateX(${x}px)`;\n        }\n    }\n\n    /**\n     * Set element's `Y` translation in pixels.\n     * @param {HTMLElement} element\n     * @param {Number} y  The value by which the element should be translated from its default position.\n     * @category Position, set\n     */\n    static setTranslateY(element, y) {\n        const t = DH.getStyleValue(element, 'transform').split(/,\\s*/);\n\n        // Avoid blurry text on non-retina displays\n        y = DH.roundPx(y);\n\n        if (t.length > 1) {\n            t[t[0].startsWith('matrix3d') ? 13 : 5] = y;\n            element.style.transform = t.join(',') + ')';\n        }\n        else {\n            element.style.transform = `translateY(${y}px)`;\n        }\n    }\n\n    /**\n     * Set element's style `top`.\n     * @param {HTMLElement} element\n     * @param {Number|String} y The top position. If numeric, `'px'` is used as the unit.\n     * @category Position, set\n     */\n    static setTop(element, y) {\n        DH.setLength(element, 'top', y);\n    }\n\n    /**\n     * Set element's style `left`.\n     * @param {HTMLElement} element\n     * @param {Number|String} x The top position. If numeric, `'px'` is used as the unit.\n     * @category Position, set\n     */\n    static setLeft(element, x) {\n        DH.setLength(element, 'left', x);\n    }\n\n    static setTopLeft(element, y, x) {\n        DH.setLength(element, 'top', y);\n        DH.setLength(element, 'left', x);\n    }\n\n    static setRect(element, { x, y, width, height }) {\n        DH.setTopLeft(element, y, x);\n        DH.setLength(element, 'width', width);\n        DH.setLength(element, 'height', height);\n    }\n\n    /**\n     * Set elements `X` and `Y` translation in pixels.\n     * @param {HTMLElement} element\n     * @param {Number} [x] The `X translation.\n     * @param {Number} [y] The `Y translation.\n     * @category Position, set\n     */\n    static setTranslateXY(element, x, y) {\n        if (x == null) {\n            return DH.setTranslateY(element, y);\n        }\n        if (y == null) {\n            return DH.setTranslateX(element, x);\n        }\n\n        // Avoid blurry text on non-retina displays\n        x = DH.roundPx(x);\n        y = DH.roundPx(y);\n\n        const\n            t    = DH.getStyleValue(element, 'transform').split(/,\\s*/),\n            is3d = t[0].startsWith('matrix3d');\n\n        if (t.length > 1) {\n            t[is3d ? 12 : 4] = x;\n            t[is3d ? 13 : 5] = y;\n            element.style.transform = t.join(',') + ')';\n        }\n        else {\n            element.style.transform = `translate(${x}px, ${y}px)`;\n        }\n    }\n\n    /**\n     * Increase `X` translation\n     * @param {HTMLElement} element\n     * @param {Number} x The number of pixels by which to increase the element's `X` translation.\n     * @category Position, set\n     */\n    static addTranslateX(element, x) {\n        DH.setTranslateX(element, DH.getTranslateX(element) + x);\n    }\n\n    /**\n     * Increase `Y` position\n     * @param {HTMLElement} element\n     * @param {Number} y The number of pixels by which to increase the element's `Y` translation.\n     * @category Position, set\n     */\n    static addTranslateY(element, y) {\n        DH.setTranslateY(element, DH.getTranslateY(element) + y);\n    }\n\n    /**\n     * Increase X position\n     * @param {HTMLElement} element\n     * @param {Number} x\n     * @category Position, set\n     */\n    static addLeft(element, x) {\n        DH.setLeft(element, DH.getOffsetX(element) + x);\n    }\n\n    /**\n     * Increase Y position\n     * @param {HTMLElement} element\n     * @param {Number} y\n     * @category Position, set\n     */\n    static addTop(element, y) {\n        DH.setTop(element, DH.getOffsetY(element) + y);\n    }\n\n    /**\n     * Align the passed element with the passed target according to the align spec.\n     * @param {HTMLElement} element The element to align.\n     * @param {HTMLElement|Core.helper.util.Rectangle} target The target element or rectangle to align to\n     * @param {Object} [alignSpec] See {@link Core.helper.util.Rectangle#function-alignTo} Defaults to `{ align : 't0-t0' }`\n     * @param {Boolean} [round] Round the calculated Rectangles (for example if dealing with scrolling which\n     * is integer based).\n     */\n    static alignTo(element, target, alignSpec = t0t0, round) {\n        target = (target instanceof Rectangle) ? target : Rectangle.from(target, true);\n\n        const\n            elXY       = DH.getTranslateXY(element),\n            elRect     = Rectangle.from(element, true);\n\n        if (round) {\n            elRect.roundPx();\n            target.roundPx();\n        }\n\n        const targetRect = elRect.alignTo(Object.assign(alignSpec, {\n            target\n        }));\n\n        DH.setTranslateXY(element, elXY[0] + targetRect.x - elRect.x, elXY[1] + targetRect.y - elRect.y);\n    }\n\n    //endregion\n\n    //region Styles & CSS\n\n    /**\n     * Returns a style value or values for the passed element.\n     * @param {HTMLElement} element The element to read styles from\n     * @param {String|String[]} propName The property or properties to read\n     * @param {Boolean} [inline=false] Pass as `true` to read the element's inline style.\n     * Note that this could return inaccurate results if CSS rules apply to this element.\n     * @returns {String|Object} The value or an object containing the values keyed by the requested property name.\n     * @category CSS\n     */\n    static getStyleValue(element, propName, inline, pseudo) {\n        const styles = inline ? element.style : element.ownerDocument.defaultView.getComputedStyle(element, pseudo);\n\n        if (Array.isArray(propName)) {\n            const result = {};\n\n            for (const prop of propName) {\n                result[prop] = styles.getPropertyValue(StringHelper.hyphenate(prop));\n            }\n\n            return result;\n        }\n\n        // Use the elements owning view to get the computed style.\n        // Ensure the property name asked for is hyphenated.\n        // getPropertyValue doesn't work with camelCase\n        return styles.getPropertyValue(StringHelper.hyphenate(propName));\n    }\n\n    /**\n     * Returns an object with the parse style values for the top, right, bottom, and left\n     * components of the given edge style.\n     *\n     * The return value is an object with `top`, `right`, `bottom`, and `left` properties\n     * for the respective components of the edge style, as well as `width` (the sum of\n     * `left` and `right`) and `height` (the sum of `top` and `bottom`).\n     *\n     * @param {HTMLElement} element\n     * @param {String} edgeStyle The element's desired edge style such as 'padding', 'margin',\n     * or 'border'.\n     * @param {String} [edges='trbl'] A string with one character codes for each edge. Only\n     * those edges will be populated in the returned object. By default, all edges will be\n     * populated.\n     * @returns {Object}\n     */\n    static getEdgeSize(element, edgeStyle, edges) {\n        const\n            suffix = (edgeStyle === 'border') ? '-width' : '',\n            ret = {\n                raw : {}\n            };\n\n        for (const edge of ['top', 'right', 'bottom', 'left']) {\n            if (!edges || edges.includes(edge[0])) {\n                // This produces px units even if the provided style is em or other (i.e.,\n                // getComputedStyle normalizes this):\n                ret[edge] = parseFloat(\n                    ret.raw[edge] = DH.getStyleValue(element, `${edgeStyle}-${edge}${suffix}`)\n                );\n            }\n        }\n\n        // These may not even be requested (based on \"edges\") but conditional code here\n        // would be wasted since the caller would still need to know not to use them...\n        // Replace NaN with 0 to keep calculations correct if they only asked for one side.\n        ret.width = (ret.left || 0) + (ret.right || 0);\n        ret.height = (ret.top || 0) + (ret.bottom || 0);\n\n        return ret;\n    }\n\n    /**\n     * Splits a style string up into object form. For example `'font-weight:bold;font-size:150%'`\n     * would convert to\n     *\n     * ```javascript\n     * {\n     *     font-weight : 'bold',\n     *     font-size : '150%'\n     * }\n     * ```\n     * @param {String} style A DOM style string\n     * @returns {Object} the style declaration in object form.\n     */\n    static parseStyle(style) {\n        if (typeof style === 'string') {\n            const styles = style.split(semicolonRe);\n\n            style = {};\n            for (let i = 0, { length } = styles; i < length; i++) {\n                const propVal = styles[i].split(colonRe);\n\n                style[propVal[0]] = propVal[1];\n            }\n        }\n        return style || {};\n    }\n\n    /**\n     * Applies specified style to the passed element. Style can be an object or a string.\n     * @param {HTMLElement} element Target element\n     * @param {String|Object} style Style to apply, 'border: 1px solid black' or { border: '1px solid black' }\n     * @param {Boolean} [overwrite] Specify `true` to replace style instead of applying changes\n     * @category CSS\n     */\n    static applyStyle(element, style, overwrite = false) {\n        if (typeof style === 'string') {\n            if (overwrite) {\n                // Only assign if either end has any styles, do not want to add empty `style` tag on element\n                if (style.length || element.style.cssText.length) {\n                    element.style.cssText = style;\n                }\n            }\n            else {\n                // Add style so as not to delete configs in style such as width, height, flex etc.\n                // If a style is already there, the newest, appended one will take precedence.\n                element.style.cssText += style;\n            }\n        }\n        else if (style) {\n            if (overwrite) {\n                element.style.cssText = '';\n                //element.removeAttribute('style');\n            }\n\n            // Has a sub-style block in object form? Use it to override style block\n            if (style.style && typeof style.style !== 'string') {\n                style = ObjectHelper.assign({}, style, style.style);\n            }\n\n            let key, value;\n\n            // Prototype chained objects may be passed, so use direct loop.\n            for (key in style) {\n                // Ignore readonly properties of the CSSStyleDeclaration object:\n                // https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration\n                // Also ignores sub-style blocks, which are applied above\n                if (!styleIgnoreProperties[key]) {\n                    [key, value] = DH.unitize(key, style[key]);\n\n                    // Cannot use element.style[key], wont work with CSS vars\n                    if (value == null) {\n                        element.style.removeProperty(key);\n                    }\n                    else {\n                        element.style.setProperty(key, value);\n                    }\n                }\n            }\n\n            // Has sub-styles as string? Add to cssText after applying style block, to override it\n            if (typeof style.style === 'string') {\n                element.style.cssText += style.style;\n            }\n        }\n    }\n\n    static getCSSText(style) {\n        if (typeof style === 'string') {\n            return style;\n        }\n\n        let cssText = '';\n\n        for (const key in style) {\n            // Ignore readonly properties of the CSSStyleDeclaration object:\n            // https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration\n            if (!styleIgnoreProperties[key]) {\n                cssText += `${StringHelper.hyphenate(key)}:${style[key]};`;\n            }\n        }\n\n        return cssText;\n    }\n\n    /**\n     * Add multiple classes to elements classList.\n     * @param {HTMLElement} element\n     * @param {String[]} classes\n     * @deprecated Since 5.0. Use {@link https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/add add} method\n     * for {@link https://developer.mozilla.org/en-US/docs/Web/API/Element/classList Element.classlist}\n     * @category CSS\n     */\n    static addClasses(element, classes) {\n        VersionHelper.deprecate('Core', '6.0.0', 'DomHelper.addClasses should be replaced by native classList.add');\n        element.classList.add(...classes);\n    }\n\n    /**\n     * Remove multiple classes from elements classList.\n     * @param {HTMLElement} element\n     * @param {String[]} classes\n     * @deprecated Since 5.0. Use {@link https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/remove remove} method\n     * for {@link https://developer.mozilla.org/en-US/docs/Web/API/Element/classList Element.classlist}\n     * @category CSS\n     */\n    static removeClasses(element, classes) {\n        VersionHelper.deprecate('Core', '6.0.0', 'DomHelper.removeClasses should be replaced by native classList.remove');\n        element.classList.remove(...classes);\n    }\n\n    /**\n     * Toggle multiple classes in elements classList. Helper for toggling multiple classes at once.\n     * @param {HTMLElement} element\n     * @param {String[]} classes\n     * @param {Boolean} [force] Specify true to add classes, false to remove. Leave blank to toggle\n     * @category CSS\n     */\n    static toggleClasses(element, classes, force = null) {\n        classes = ArrayHelper.asArray(classes);\n\n        if (force === true) {\n            element.classList.add(...classes);\n        }\n        else if (force === false) {\n            element.classList.remove(...classes);\n        }\n        else {\n            classes.forEach(cls => element.classList.toggle(cls));\n        }\n    }\n\n    /**\n     * Adds a CSS class to an element during the specified duration\n     * @param {HTMLElement} element Target element\n     * @param {String} cls CSS class to add temporarily\n     * @param {Number} duration Duration in ms, 0 means cls will not be applied\n     * @param {Core.mixin.Delayable} delayable The delayable to tie the setTimeout call to\n     * @typings delayable -> {typeof Delayable}\n     * @category CSS\n     */\n    static addTemporaryClass(element, cls, duration, delayable = globalThis) {\n        if (duration > 0) {\n            element.classList.add(cls);\n\n            delayable.setTimeout({\n                fn                : cls => element.classList.remove(cls),\n                delay             : duration,\n                name              : cls,\n                args              : [cls],\n                cancelOutstanding : true\n            });\n        }\n    }\n\n    /**\n     * Reads computed style from the element and returns transition duration for a given property in milliseconds\n     * @param {HTMLElement} element Target DOM element\n     * @param {String} property Animated property name\n     * @returns {Number} Duration in ms\n     * @internal\n     */\n    static getPropertyTransitionDuration(element, property) {\n        const\n            style      = globalThis.getComputedStyle(element),\n            properties = style.transitionProperty.split(', '),\n            durations  = style.transitionDuration.split(', '),\n            index      = properties.indexOf(StringHelper.hyphenate(property));\n\n        let result;\n\n        if (index !== -1) {\n            // get floating value of transition duration in seconds and convert into milliseconds\n            result = parseFloat(durations[index]) * 1000;\n        }\n\n        return result;\n    }\n\n    /**\n     * Reads computed style from the element and returns the animation duration for any\n     * attached animation in milliseconds\n     * @param {HTMLElement} element Target DOM element\n     * @returns {Number} Duration in ms\n     * @internal\n     */\n    static getAnimationDuration(element) {\n        return parseFloat(DH.getStyleValue(element, 'animation-duration')) * 1000;\n    }\n\n    //endregion\n\n    //region Effects\n\n    /**\n     * Highlights the passed element or Rectangle according to the theme's highlighting rules.\n     * Usually an animated framing effect.\n     *\n     * The framing effect is achieved by adding the CSS class `b-fx-highlight` which references\n     * a `keyframes` animation named `b-fx-highlight-animation`. You may override the animation\n     * name referenced, or the animation itself in your own CSS.\n     *\n     * @param {HTMLElement|Core.helper.util.Rectangle} element The element or Rectangle to highlight.\n     */\n    static highlight(element, delayable = globalThis) {\n        if (element instanceof Rectangle) {\n            return element.highlight();\n        }\n        return new Promise(resolve => {\n            delayable.setTimeout(() => {\n                element.classList.add('b-fx-highlight');\n                delayable.setTimeout(() => {\n                    element.classList.remove('b-fx-highlight');\n                    resolve();\n                }, 1000);\n            }, 0);\n        });\n    }\n\n    //endregion\n\n    //region Measuring / Scrollbar\n\n    /**\n     * Measures the scrollbar width using a hidden div. Caches result\n     * @property {Number}\n     * @readonly\n     */\n    static get scrollBarWidth() {\n        // Ensure the measurement is only done once, when the value is null and body is available.\n        // Leave measure element in place. It needs to be remeasured when the zoom level is changed\n        // which is detected using a window resize listener, so *may* be called frequently.\n        if (scrollBarWidth === null && doc.body) {\n            const element = scrollBarMeasureElement || (scrollBarMeasureElement = DH.createElement({\n                parent : doc.body,\n                style  : 'position:absolute;top:-9999em;height:100px;overflow-y:scroll'\n            }));\n            if (element.parentNode !== doc.body) {\n                doc.body.appendChild(element);\n            }\n            scrollBarWidth = element.offsetWidth;\n        }\n\n        return scrollBarWidth;\n    }\n\n    static get scrollBarPadElement() {\n        return {\n            className : 'b-yscroll-pad',\n            children  : [{\n                className : 'b-yscroll-pad-sizer'\n            }]\n        };\n    }\n\n    /**\n     * Resets DomHelper.scrollBarWidth cache, triggering a new measurement next time it is read\n     */\n    static resetScrollBarWidth() {\n        scrollBarWidth = null;\n    }\n\n    /**\n     * Measures the text width using a hidden div\n     * @param {String} text\n     * @param {HTMLElement} sourceElement\n     * @returns {Number} width\n     * @category Measure\n     */\n    static measureText(text, sourceElement, useHTML = false, parentElement = undefined) {\n        const offScreenDiv = DH.getMeasureElement(sourceElement, parentElement);\n\n        offScreenDiv[useHTML ? 'innerHTML' : 'innerText'] = text;\n\n        const result = offScreenDiv.clientWidth;\n        offScreenDiv.className = '';\n\n        return result;\n    }\n\n    /**\n     * Measures a relative size, such as a size specified in `em` units for the passed element.\n     * @param {String} size The CSS size value to measure.\n     * @param {HTMLElement} sourceElement\n     * @param {Boolean} [round] Pass true to return exact width, not rounded value\n     * @returns {Number} size The size in pixels of the passed relative measurement.\n     * @category Measure\n     */\n    static measureSize(size, sourceElement, round = true) {\n        if (!size) {\n            return 0;\n        }\n\n        if (typeof size === 'number') {\n            return size;\n        }\n\n        if (!size.length) {\n            return 0;\n        }\n\n        if (/^\\d+(px)?$/.test(size)) {\n            return parseInt(size);\n        }\n\n        if (sourceElement) {\n            const offScreenDiv = DH.getMeasureElement(sourceElement);\n            offScreenDiv.innerHTML = '';\n            offScreenDiv.style.width = DH.setLength(size);\n            const result = round ? offScreenDiv.offsetWidth : offScreenDiv.getBoundingClientRect().width;\n            offScreenDiv.style.width = offScreenDiv.className = '';\n            return result;\n        }\n\n        if (/^\\d+em$/.test(size)) {\n            return parseInt(size) * DEFAULT_FONT_SIZE;\n        }\n\n        return isNaN(size) ? 0 : parseInt(size);\n    }\n\n    // parentElement allows measurement to happen inside a specific element, allowing scoped css rules to match\n    static getMeasureElement(sourceElement, parentElement = doc.body) {\n        const\n            sourceElementStyle = win.getComputedStyle(sourceElement),\n            offScreenDiv       = parentElement.offScreenDiv = parentElement.offScreenDiv || DH.createElement({\n                parent    : parentElement,\n                style     : 'position:fixed;top:-10000px;left:-10000px;visibility:hidden;contain:strict',\n                className : 'b-measure-element',\n                children  : [{\n                    style : 'white-space:nowrap;display:inline-block;will-change:contents;width:auto;contain:none'\n                }]\n            }, { returnAll : true })[1];\n\n        fontProps.forEach(prop => {\n            if (offScreenDiv.style[prop] !== sourceElementStyle[prop]) {\n                offScreenDiv.style[prop] = sourceElementStyle[prop];\n            }\n        });\n        offScreenDiv.className = sourceElement.className;\n\n        // In case the measure element was moved/removed, re-add it\n        if (offScreenDiv.parentElement.parentElement !== parentElement) {\n            parentElement.appendChild(offScreenDiv.parentElement);\n        }\n\n        return offScreenDiv;\n    }\n\n    /**\n     * Strips the tags from a html string, returning text content.\n     *\n     * ```javascript\n     * DomHelper.stripTags('<div class=\"custom\"><b>Bold</b><i>Italic</i></div>'); // -> BoldItalic\n     * ```\n     *\n     * @internal\n     * @param {String} htmlString HTML string\n     * @returns {String} Text content\n     */\n    static stripTags(htmlString) {\n        const\n            // we need to avoid any kind of evaluation of embedded XSS scripts or \"web bugs\" (img tags that issue\n            // GET requests)\n            parser = DH.$domParser || (DH.$domParser = new DOMParser()),\n            doc = parser.parseFromString(htmlString, 'text/html');\n\n        return doc.body.textContent;\n    }\n\n    //endregion\n\n    //region Sync\n\n    /**\n     * Sync one source element attributes, children etc. to a target element. Source element can be specified as a html\n     * string or an actual HTMLElement.\n     *\n     * NOTE: This function is superseded by {@link Core/helper/DomSync#function-sync-static DomSync.sync()}, which works\n     * with DOM configs. For most usecases, use it instead.\n     *\n     * @param {String|HTMLElement} sourceElement Source \"element\" to copy from\n     * @param {HTMLElement} targetElement Target element to apply to, can also be specified as part of the config object\n     * @returns {HTMLElement} Returns the updated targetElement (which is also updated in place)\n     */\n    static sync(sourceElement, targetElement) {\n        if (typeof sourceElement === 'string') {\n            if (sourceElement === '') {\n                targetElement.innerHTML = '';\n                return;\n            }\n            else {\n                sourceElement = DH.createElementFromTemplate(sourceElement);\n            }\n        }\n\n        DH.performSync(sourceElement, targetElement);\n\n        return targetElement;\n    }\n\n    // Internal helper used for recursive syncing\n    static performSync(sourceElement, targetElement) {\n        // Syncing identical elements is a no-op\n        if (sourceElement.outerHTML !== targetElement.outerHTML) {\n            DH.syncAttributes(sourceElement, targetElement);\n            DH.syncContent(sourceElement, targetElement);\n            DH.syncChildren(sourceElement, targetElement);\n\n            return true;\n        }\n        return false;\n    }\n\n    // Attributes as map { attr : value, ... }, either from an html element or from a config\n    static getSyncAttributes(element) {\n        const\n            attributes = {},\n            // Attribute names, simplifies comparisons and calls to set/removeAttribute\n            names      = [];\n\n        // Extract from element\n        for (let i = 0; i < element.attributes.length; i++) {\n            const attr = element.attributes[i];\n            if (attr.specified) {\n                const name = attr.name.toLowerCase();\n                attributes[name] = attr.value;\n                names.push(name);\n            }\n        }\n\n        return { attributes, names };\n    }\n\n    /**\n     * Syncs attributes from sourceElement to targetElement.\n     * @private\n     * @param {HTMLElement} sourceElement\n     * @param {HTMLElement} targetElement\n     */\n    static syncAttributes(sourceElement, targetElement) {\n        const\n            // Extract attributes from elements (sourceElement might be a config)\n            {\n                attributes : sourceAttributes,\n                names      : sourceNames\n            }          = DH.getSyncAttributes(sourceElement),\n            {\n                attributes : targetAttributes,\n                names      : targetNames\n            }          = DH.getSyncAttributes(targetElement),\n            // Used to ignore data-xx attributes when we will be setting entire dataset\n            hasDataset = sourceNames.includes('dataset'),\n            // Intersect arrays to determine what needs adding, removing and syncing\n            toAdd      = sourceNames.filter(attr => !targetNames.includes(attr)),\n            toRemove   = targetNames.filter(attr => !sourceNames.includes(attr) && (!hasDataset || !attr.startsWith('data-'))),\n            toSync     = sourceNames.filter(attr => targetNames.includes(attr));\n\n        if (toAdd.length > 0) {\n            for (let i = 0; i < toAdd.length; i++) {\n                const attr = toAdd[i];\n\n                // Style requires special handling\n                if (attr === 'style') {\n                    DH.applyStyle(targetElement, sourceAttributes.style, true);\n                }\n                // So does dataset\n                else if (attr === 'dataset') {\n                    Object.assign(targetElement.dataset, sourceAttributes.dataset);\n                }\n                // Other attributes are set using setAttribute (since it calls toString() DomClassList works fine)\n                else {\n                    targetElement.setAttribute(attr, sourceAttributes[attr]);\n                }\n            }\n        }\n\n        if (toRemove.length > 0) {\n            for (let i = 0; i < toRemove.length; i++) {\n                targetElement.removeAttribute(toRemove[i]);\n            }\n        }\n\n        if (toSync.length > 0) {\n            for (let i = 0; i < toSync.length; i++) {\n                const attr = toSync[i];\n                // Set all attributes that has changed, with special handling for style\n                if (attr === 'style') {\n                    // TODO: Check for changes?\n                    DH.applyStyle(targetElement, sourceAttributes.style, true);\n                }\n                // And dataset\n                else if (attr === 'dataset') {\n                    // TODO: Any cost to assigning same values?\n                    Object.assign(targetElement.dataset, sourceAttributes.dataset);\n                }\n                // And class, which might be a DomClassList or an config for a DomClassList\n                else if (attr === 'class' && (sourceAttributes.class.isDomClassList || typeof sourceAttributes.class === 'object')) {\n                    let classList;\n\n                    if (sourceAttributes.class.isDomClassList) {\n                        classList = sourceAttributes.class;\n                    }\n                    else {\n                        // TODO : Reuse a single DomClassList?\n                        classList = new DomClassList(sourceAttributes.class);\n                    }\n\n                    if (!classList.isEqual(targetAttributes.class)) {\n                        targetElement.setAttribute('class', classList);\n                    }\n                }\n                else if (targetAttributes[attr] !== sourceAttributes[attr]) {\n                    targetElement.setAttribute(attr, sourceAttributes[attr]);\n                }\n            }\n        }\n    }\n\n    /**\n     * Sync content (innerText) from sourceElement to targetElement\n     * @private\n     * @param {HTMLElement} sourceElement\n     * @param {HTMLElement} targetElement\n     */\n    static syncContent(sourceElement, targetElement) {\n        if (DH.getChildElementCount(sourceElement) === 0) {\n            targetElement.innerText = sourceElement.innerText;\n        }\n    }\n\n    static setInnerText(targetElement, text) {\n        // setting firstChild.data is faster than innerText (and innerHTML),\n        // but in some cases the inner node is lost and needs to be recreated\n        const { firstChild } = targetElement;\n\n        if (firstChild?.nodeType === Element.TEXT_NODE) {\n            firstChild.data = text;\n        }\n        else {\n            // textContent is supposed to be faster than innerText, since it does not trigger layout\n            targetElement.textContent = text;\n        }\n    }\n\n    /**\n     * Sync traversing children\n     * @private\n     * @param {HTMLElement} sourceElement Source element\n     * @param {HTMLElement} targetElement Target element\n     */\n    static syncChildren(sourceElement, targetElement) {\n        const\n            me          = this,\n            sourceNodes = arraySlice.call(sourceElement.childNodes),\n            targetNodes = arraySlice.call(targetElement.childNodes);\n\n        while (sourceNodes.length) {\n            const\n                sourceNode = sourceNodes.shift(),\n                targetNode = targetNodes.shift();\n\n            // only textNodes and elements allowed (no comments)\n            if (sourceNode && sourceNode.nodeType !== TEXT_NODE && sourceNode.nodeType !== ELEMENT_NODE) {\n                throw new Error(`Source node type ${sourceNode.nodeType} not supported by DomHelper.sync()`);\n            }\n            if (targetNode && targetNode.nodeType !== TEXT_NODE && targetNode.nodeType !== ELEMENT_NODE) {\n                throw new Error(`Target node type ${targetNode.nodeType} not supported by DomHelper.sync()`);\n            }\n\n            if (!targetNode) {\n                // out of target nodes, add to target\n                targetElement.appendChild(sourceNode);\n            }\n            else {\n                // match node\n\n                if (sourceNode.nodeType === targetNode.nodeType) {\n                    // same type of node, take action depending on which type\n                    if (sourceNode.nodeType === TEXT_NODE) {\n                        // text\n                        targetNode.data = sourceNode.data;\n                    }\n                    else {\n                        if (sourceNode.tagName === targetNode.tagName) {\n                            me.performSync(sourceNode, targetNode);\n                        }\n                        else {\n                            // new tag, remove targetNode and insert new element\n                            targetElement.insertBefore(sourceNode, targetNode);\n                            targetNode.remove();\n                        }\n                    }\n                }\n                // Trying to set text node as element, use it as innerText\n                // (we get this in FF with store mutations and List)\n                else if (sourceNode.nodeType === TEXT_NODE && targetNode.nodeType === ELEMENT_NODE) {\n                    targetElement.innerText = sourceNode.data.trim();\n                }\n                else {\n                    const logElement = sourceNode.parentElement || sourceNode;\n                    throw new Error(`Currently no support for transforming nodeType.\\n${logElement.outerHTML}`);\n                }\n            }\n        }\n\n        // Out of source nodes, remove remaining target nodes\n        targetNodes.forEach(targetNode => {\n            targetNode.remove();\n        });\n    }\n\n    /**\n     * Replaces the passed element's `className` with the class names\n     * passed in either Array or String format or Object.\n     *\n     * This method compares the existing class set with the incoming class set and\n     * avoids mutating the element's class name set if possible.\n     *\n     * This can avoid browser style invalidations.\n     * @param {HTMLElement} element The element whose class list to synchronize.\n     * @param {String[]|String|Object} newClasses The incoming class names to set on the element.\n     * @returns {Boolean} `true` if the DOM class list was changed.\n     * @category CSS\n     */\n    static syncClassList(element, newClasses) {\n        const\n            { classList } = element,\n            isString      = typeof newClasses === 'string',\n            newClsArray   = isString ? newClasses.split(whiteSpaceRe) : DomClassList.normalize(newClasses, 'array'),\n            classCount    = newClsArray.length;\n\n        let changed = classList.length !== classCount,\n            i;\n\n        // If the incoming and existing class lists are the same length\n        // then check that each contains the same names. As soon as\n        // we find a non-matching name, we know we have to update the\n        // className.\n        for (i = 0; !changed && i < classCount; i++) {\n            //<debug>\n            // Protect against IE throwing difficult to debug illegalCharacter errors\n            // by validating that no className contains spaces.\n            if (newClsArray[i].match(whiteSpaceRe)) {\n                throw new Error(`Illegal space character detected in CSS className ${newClsArray[i]}`);\n            }\n            //</debug>\n            changed = !classList.contains(newClsArray[i]);\n        }\n\n        if (changed) {\n            element.className = isString ? newClasses : newClsArray.join(' ');\n        }\n        return changed;\n    }\n\n    /**\n     * Applies the key state of the passed object or DomClassList to the passed element.\n     *\n     * Properties with a falsy value mean that property name is *removed* as a class name.\n     *\n     * Properties with a truthy value mean that property name is *added* as a class name.\n     *\n     * This is different from {@link #function-syncClassList-static}. That sets the `className` of the element to the\n     * sum of all its truthy keys, regardless of what the pre-existing value of the `className` was, and ignoring falsy\n     * keys.\n     *\n     * This _selectively_ updates the classes in the `className`. If there is a truthy key, the name is added. If there\n     * is a falsy key, the name is removed.\n     * @param {HTMLElement} element The element to apply the class list to .\n     * @param {Object|Core.helper.util.DomClassList} classes The classes to add or remove.\n     * @returns {Boolean} `true` if the DOM class list was changed.\n     * @category CSS\n     */\n    static updateClassList(element, classes) {\n        const { classList } = element;\n        let cls, add, changed = false;\n\n        for (cls in classes) {\n            add = Boolean(classes[cls]);\n\n            if (classList.contains(cls) !== add) {\n                classList[add ? 'add' : 'remove'](cls);\n                changed = true;\n            }\n        }\n        return changed;\n    }\n\n    /**\n     * Changes the theme to the passed theme name if possible.\n     *\n     * Theme names are case insensitive. The `href` used is all lower case.\n     *\n     * To use this method, the `<link rel=\"stylesheet\">` _must_ use the default,\n     * Bryntum-supplied CSS files where the `href` end with `<themeName>.css`, so that\n     * it can be found in the document, and switched out for a new link with\n     * the a modified `href`. The new `href` will use the same path, just\n     * with the `themeName` portion substituted for the new name.\n     *\n     * If no `<link>` with that name pattern can be found, an error will be thrown.\n     *\n     * If you use this method, you  must ensure that the theme files are\n     * all accessible on your server.\n     *\n     * Because this is an asynchronous operation, a `Promise` is returned.\n     * The theme change event is passed to the success function. If the\n     * theme was not changed, because the theme name passed is the current theme,\n     * nothing is passed to the success function.\n     *\n     * The theme change event contains two properties:\n     *\n     *  - `prev` The previous Theme name.\n     *  - `theme` The new Theme name.\n     *\n     * @param {String} newThemeName the name of the theme that should be applied\n     * @privateparam {String} [defaultTheme] Optional, the name of the theme that should be used in case of fail\n     * @returns {Promise} A promise who's success callback receives the theme change\n     * event if the theme in fact changed. If the theme `href` could not be loaded,\n     * the failure callback is called, passing the error event caught.\n     * @async\n     */\n    static setTheme(newThemeName, defaultTheme) {\n        newThemeName = newThemeName.toLowerCase();\n\n        const\n            { head }     = document,\n            oldThemeName = DH.getThemeInfo(defaultTheme).name.toLowerCase();\n\n        let oldThemeLinks = head.querySelectorAll('[data-bryntum-theme]:not([data-loading])'),\n            loaded = 0;\n\n        if (oldThemeName === newThemeName) {\n            return immediatePromise;\n        }\n\n        // Remove any links currently loading\n        DH.removeEachSelector(head, '#bryntum-theme[data-loading],link[data-bryntum-theme][data-loading]');\n\n        const themeEvent = {\n            theme : newThemeName,\n            prev  : oldThemeName\n        };\n\n        function replaceTheme(oldThemeLink, resolve, reject) {\n            const newThemeLink = DomHelper.createElement({\n                tag     : 'link',\n                rel     : 'stylesheet',\n                dataset : {\n                    loading      : true,\n                    bryntumTheme : true\n                },\n                href        : oldThemeLink.href.replace(oldThemeName, newThemeName),\n                nextSibling : oldThemeLink\n            });\n\n            newThemeLink.addEventListener('load', () => {\n                delete newThemeLink.dataset.loading;\n                themeInfo = null;\n                // Flip all products to the new theme at the same time\n                if (++loaded === oldThemeLinks.length) {\n                    oldThemeLinks.forEach(link => link.remove());\n                    GlobalEvents.trigger('theme', themeEvent);\n                    resolve(themeEvent);\n                }\n            });\n\n            newThemeLink.addEventListener('error', (e) => {\n                delete newThemeLink.dataset.loading;\n                reject(e);\n            });\n        }\n\n        if (oldThemeLinks.length) {\n            return new Promise((resolve, reject) => {\n                oldThemeLinks.forEach((oldThemeLink, i) => {\n                    replaceTheme(oldThemeLink, resolve, reject, i === oldThemeLinks.length - 1);\n                });\n            });\n        }\n        else {\n            const oldThemeLink =\n                      head.querySelector('#bryntum-theme:not([data-loading])') ||\n                      head.querySelector(`[href*=\"${oldThemeName}.css\"]:not([data-loading])`);\n\n            // Theme link href ends with <themeName>.css also there could be a query - css?11111...\n            if (!oldThemeLink?.href.includes(`${oldThemeName}.css`)) {\n                throw new Error(`Theme link for ${oldThemeName} not found`);\n            }\n\n            oldThemeLinks = [oldThemeLink];\n\n            return new Promise((resolve, reject) => replaceTheme(oldThemeLink, resolve, reject));\n        }\n    }\n\n    /**\n     * A theme information object about the current theme.\n     *\n     * Currently, this has only one property:\n     *\n     *   - `name` The current theme name.\n     * @property {Object}\n     * @readonly\n     */\n    static get themeInfo() {\n        return DomHelper.getThemeInfo();\n    }\n\n    /**\n     * A theme information object about the current theme.\n     *\n     * Currently this has only one property:\n     *\n     *   - `name` The current theme name.\n     * @param {String} defaultTheme the name of the theme used as backup value in case of fail\n     * @param {HTMLElement} contextElement The element for which to find the theme. If using a\n     * web component, the theme will be encapsulated in the web component's encapsulated style\n     * so a context element is required. If no web components are in use, this may be omitted and\n     * `document.body` will be used.\n     * @returns {Object} info, currently it contains only one property - 'name'.\n     * @private\n     */\n    static getThemeInfo(defaultTheme) {\n        if (!themeInfo) {\n            const\n                // The content it creates for 'b-theme-info' is described in corresponding theme in Core/resources/sass/themes\n                // for example in Core/resources/sass/themes/material.scss\n                // ```\n                // .b-theme-info:before {\n                //     content : '{\"name\":\"Material\"}';\n                // }\n                // ```\n                testDiv   = DH.createElement({\n                    parent    : document.body,\n                    className : 'b-theme-info'\n                }),\n                // Theme desc object is in the :before pseudo element.\n                themeData = DH.getStyleValue(testDiv, 'content', false, ':before');\n\n            if (themeData) {\n                // themeData could be invalid JSON string in case there is no content rule\n                try {\n                    themeInfo = JSON.parse(themeData.replace(/^[\"']|[\"']$|\\\\/g, ''));\n                }\n                catch (e) {\n                    themeInfo = null;\n                }\n            }\n\n            // CSS file has to be loaded to make the themeInfo available, so fallback to the default theme name\n            themeInfo = themeInfo || (defaultTheme ? { name : defaultTheme } : null);\n\n            testDiv.remove();\n        }\n        return themeInfo;\n    }\n\n    //endregion\n\n    //region Transition\n\n    static async transition({\n        element : outerElement,\n        selector = '[data-dom-transition]',\n        duration,\n        action,\n        thisObj = this,\n        addTransition = {},\n        removeTransition = {}\n    }) {\n        const\n            scrollers = new Set(),\n            beforeElements = Array.from(outerElement.querySelectorAll(selector)),\n            beforeMap      = new Map(beforeElements.map(element => {\n                let depth = 0,\n                    parent = element.parentElement;\n\n                while (parent && parent !== outerElement) {\n                    depth++;\n                    parent = parent.parentElement;\n                }\n\n                element.$depth = depth;\n\n                // Store scrolling elements and their current scroll pos, for restoring later\n                if (element.scrollHeight > element.offsetHeight && getComputedStyle(element).overflow === 'auto') {\n                    element.$scrollTop = element.scrollTop;\n                    scrollers.add(element);\n                }\n\n                // Intersect our bounds with parents, to trim away overflow\n                const\n                    { parentElement } = element,\n                    globalBounds      = Rectangle.from(element, outerElement),\n                    localBounds       = Rectangle.from(element, parentElement),\n                    style             = getComputedStyle(parentElement),\n                    borderLeftWidth   = parseFloat(style.borderLeftWidth);\n\n                if (borderLeftWidth) {\n                    globalBounds.left -= borderLeftWidth;\n                    localBounds.left -= borderLeftWidth;\n                }\n\n                return [\n                    element.id,\n                    { element, globalBounds, localBounds, depth, parentElement }\n                ];\n            }));\n\n        action.call(thisObj);\n\n        const\n            afterElements = Array.from(outerElement.querySelectorAll(selector)),\n            afterMap      = new Map(afterElements.map(element => {\n                const\n                    globalBounds    = Rectangle.from(element, outerElement),\n                    localBounds     = Rectangle.from(element, element.parentElement),\n                    style           = globalThis.getComputedStyle(element.parentElement),\n                    borderLeftWidth = parseFloat(style.borderLeftWidth);\n\n                if (borderLeftWidth) {\n                    globalBounds.left -= borderLeftWidth;\n                    localBounds.left -= borderLeftWidth;\n                }\n\n                return [\n                    element.id,\n                    { element, globalBounds, localBounds }\n                ];\n            })),\n            styleProps    = ['position', 'top', 'left', 'width', 'height', 'padding', 'margin', 'zIndex', 'minWidth', 'minHeight', 'opacity', 'overflow'];\n\n        // Convert to absolute layout, iterating elements remaining after action\n        for (const [id, before] of beforeMap) {\n            // We match before vs after on id and not actual element, allowing adding a new element with the same id to\n            // transition from the old (which was removed or released). To match what will happen when DomSyncing with\n            // multiple containing elements (columns in TaskBoard)\n            const after = afterMap.get(id);\n\n            if (after) {\n                const\n                    { element }              = after,\n                    { style, parentElement } = element,\n                    // Need to keep explicit zIndex to keep above other stuff\n                    zIndex                   = parseInt(DH.getStyleValue(element, 'zIndex')),\n                    {\n                        globalBounds,\n                        localBounds,\n                        depth,\n                        parentElement : beforeParent\n                    }                        = before,\n                    parentChanged            = beforeParent !== parentElement;\n\n                // Store initial state, in case element has a style prop we need to restore later\n                ObjectHelper.copyProperties(element.$initial = { parentElement }, style, styleProps);\n\n                // Prevent transition during the process, forced further down instead\n                // element.remove();\n\n                let bounds;\n\n                // Action moved element to another parent, move it to the outer element to allow transitioning to the\n                // new parent. Also use coordinates relative to that element\n                if (parentChanged) {\n                    after.bounds = after.globalBounds;\n                    bounds = globalBounds;\n                    outerElement.appendChild(element);\n                }\n                // Keep element in current parent if it was not moved during the action call above.\n                // Need to use coords relative to the parent\n                else {\n                    after.bounds = after.localBounds;\n                    bounds = localBounds;\n                    beforeParent.appendChild(element);\n                }\n\n                let overflow = 'hidden'; // Looks weird with content sticking out if height is transitioned\n\n                if (scrollers.has(element)) {\n                    element.$scrollPlaceholder = DH.createElement({\n                        parent : element,\n                        style  : {\n                            height : element.scrollHeight\n                        }\n                    });\n\n                    overflow = 'auto';\n                }\n\n                // Move element back to where it started\n                Object.assign(style, {\n                    position  : 'absolute',\n                    top       : `${bounds.top}px`,\n                    left      : `${bounds.left}px`,\n                    width     : `${bounds.width}px`,\n                    height    : `${bounds.height}px`,\n                    minWidth  : 0,\n                    minHeight : 0,\n                    padding   : 0,\n                    margin    : 0,\n                    zIndex    : depth + (zIndex || 0),\n                    overflow\n                });\n\n                after.processed = true;\n            }\n            // Existed before but not after = removed\n            else {\n                const\n                    { element, localBounds : bounds, depth, parentElement } = before;\n\n                element.$initial = { removed : true };\n\n                Object.assign(element.style, {\n                    position  : 'absolute',\n                    top       : `${bounds.top}px`,\n                    left      : `${bounds.left}px`,\n                    width     : `${bounds.width}px`,\n                    height    : `${bounds.height}px`,\n                    minWidth  : 0,\n                    minHeight : 0,\n                    padding   : 0,\n                    margin    : 0,\n                    zIndex    : depth,\n                    overflow  : 'hidden' // Looks weird with content sticking out if height is transitioned\n                });\n\n                parentElement.appendChild(element);\n\n                // Inject among non-removed elements to have it transition away\n                afterMap.set(id, { element, bounds, removed : true, processed : true });\n                afterElements.push(element);\n            }\n        }\n\n        // Handle new elements\n        for (const [, after] of afterMap) {\n            if (!after.processed) {\n                const\n                    { element }              = after,\n                    { style, parentElement } = element,\n                    bounds                   = after.bounds = after.localBounds;\n\n                element.classList.add('b-dom-transition-adding');\n\n                ObjectHelper.copyProperties(element.$initial = { parentElement }, style, styleProps);\n\n                // Props in `addTransition` will be transitioned\n                Object.assign(style, {\n                    position : 'absolute',\n                    top      : addTransition.top ? 0 : `${bounds.top}px`,\n                    left     : addTransition.left ? 0 : `${bounds.left}px`,\n                    width    : addTransition.width ? 0 : `${bounds.width}px`,\n                    height   : addTransition.height ? 0 : `${bounds.height}px`,\n                    opacity  : addTransition.opacity ? 0 : null,\n                    zIndex   : parentElement.$depth + 1,\n                    overflow : 'hidden' // Looks weird with content sticking out if height is transitioned\n                });\n            }\n        }\n\n        // Restore scroll after modifying layout\n        for (const element of scrollers) {\n            element.scrollTop = element.$scrollTop;\n        }\n\n        // Enable transitions\n        outerElement.classList.add('b-dom-transition');\n        // Trigger layout, to be able to transition below\n        outerElement.firstElementChild.offsetWidth;\n\n        // Transition to new layout\n        for (const [, { element, bounds : afterBounds, removed }] of afterMap) {\n            if (removed) {\n                Object.assign(element.style, {\n                    top     : removeTransition.top ? 0 : `${afterBounds.top}px`,\n                    left    : removeTransition.left ? 0 : `${afterBounds.left}px`,\n                    width   : removeTransition.width ? 0 : `${afterBounds.width}px`,\n                    height  : removeTransition.height ? 0 : `${afterBounds.height}px`,\n                    opacity : removeTransition.opacity ? 0 : element.$initial.opacity\n                });\n            }\n            else {\n                Object.assign(element.style, {\n                    top     : `${afterBounds.top}px`,\n                    left    : `${afterBounds.left}px`,\n                    width   : `${afterBounds.width}px`,\n                    height  : `${afterBounds.height}px`,\n                    opacity : element.$initial.opacity\n                });\n            }\n        }\n\n        // Wait for transition to finish\n        await AsyncHelper.sleep(duration);\n\n        outerElement.classList.remove('b-dom-transition');\n\n        // Restore layout after transition\n        for (const element of afterElements) {\n            if (element.$initial) {\n                if (element.$initial.removed) {\n                    element.remove();\n                }\n                else {\n                    ObjectHelper.copyProperties(element.style, element.$initial, styleProps);\n\n                    if (element.$scrollPlaceholder) {\n                        element.$scrollPlaceholder.remove();\n                        delete element.$scrollPlaceholder;\n                    }\n\n                    element.classList.remove('b-dom-transition-adding');\n\n                    element.$initial.parentElement.appendChild(element);\n                }\n            }\n        }\n\n        // Restore scroll positions last when all layout is restored\n        for (const element of scrollers) {\n            element.scrollTop = element.$scrollTop;\n            delete element.$scrollTop;\n        }\n    }\n\n    //endregion\n\n    static async loadScript(url) {\n        return new Promise((resolve, reject) => {\n            const script = document.createElement('script');\n\n            script.src = url;\n            script.onload = resolve;\n            script.onerror = reject;\n\n            document.head.appendChild(script);\n        });\n    }\n\n    static isNamedColor(color) {\n        return color && !/^(#|hsl|rgb|hwb)/.test(color);\n    }\n\n    //#region Salesforce hooks\n\n    // Wrap NodeFilter to support salesforce\n    static get NodeFilter() {\n        return NodeFilter;\n    }\n\n    static addChild(parent, child, sibling) {\n        parent.insertBefore(child, sibling);\n    }\n\n    //#endregion\n}\n\nconst DH = DomHelper;\n\nlet clearTouchTimer;\nconst\n    clearTouchEvent = () => DH.isTouchEvent = false,\n    setTouchEvent   = () => {\n        DH.isTouchEvent = true;\n\n        // Jump round the click delay\n        clearTimeout(clearTouchTimer);\n        clearTouchTimer = setTimeout(clearTouchEvent, 400);\n    };\n\n// Set event type flags so that mousedown and click handlers can know whether a touch gesture was used.\n// This is used. This must stay until we have a unified DOM event system which handles both touch and mouse events.\ndoc.addEventListener('touchstart', setTouchEvent, true);\ndoc.addEventListener('touchend', setTouchEvent, true);\n\nDH.canonicalStyles = canonicalStyles;\nDH.supportsTemplate = 'content' in doc.createElement('template');\nDH.elementPropKey = elementPropKey;\nDH.numberRe = numberRe;\n\n//region Polyfills\n\n// TODO: include babels polyfills instead of keeping own?\n\nif (!('children' in Node.prototype)) {\n    const elementFilter = node => node.nodeType === node.ELEMENT_NODE;\n    Object.defineProperty(Node.prototype, 'children', {\n        get : function() {\n            return Array.prototype.filter.call(this.childNodes, elementFilter);\n        }\n    });\n}\n\nif (!Element.prototype.matches) {\n    Element.prototype.matches =\n        Element.prototype.matchesSelector ||\n        Element.prototype.mozMatchesSelector ||\n        Element.prototype.msMatchesSelector ||\n        Element.prototype.oMatchesSelector ||\n        Element.prototype.webkitMatchesSelector ||\n        function(s) {\n            const matches = (this.document || this.ownerDocument).querySelectorAll(s);\n            let i = matches.length;\n            // eslint-disable-next-line no-empty\n            while (--i >= 0 && matches.item(i) !== this) {}\n            return i > -1;\n        };\n}\n\nif (win.Element && !Element.prototype.closest) {\n    Node.prototype.closest = Element.prototype.closest = function(s) {\n        let el = this;\n        if (!doc.documentElement.contains(el)) return null;\n\n        do {\n            if (el.matches(s)) return el;\n            el = el.parentElement || el.parentNode;\n        } while (el !== null && el.nodeType === el.ELEMENT_NODE);\n        return null;\n    };\n}\nelse {\n    // It's crazy that closest is not already on the Node interface!\n    // Note that some Node types (eg DocumentFragment) do not have a parentNode.\n    Node.prototype.closest = function(selector) {\n        return this.parentNode?.closest(selector);\n    };\n}\n\n// from MDN (public domain): https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/remove\n(function(arr) {\n    arr.forEach(function(item) {\n        if (Object.prototype.hasOwnProperty.call(item, 'remove')) {\n            return;\n        }\n        Object.defineProperty(item, 'remove', {\n            configurable : true,\n            enumerable   : true,\n            writable     : true,\n            value        : function remove() {\n                this.parentNode && this.parentNode.removeChild(this);\n            }\n        });\n    });\n})([Element.prototype, CharacterData.prototype, DocumentType.prototype]);\n\n//endregion\n\n// CTRL/+ and  CTRL/- zoom gestures must invalidate the scrollbar width.\n// Window resize is triggered by this operation on Blink (Chrome & Edge), Firefox and Safari.\nglobalThis.addEventListener('resize', () => scrollBarWidth = null);\n","import Base from './Base.js';\nimport Events from './mixin/Events.js';\nimport DomHelper from './helper/DomHelper.js';\n\n/**\n * @module Core/GlobalEvents\n */\nconst\n    isFloatingWidget = w => w.floating,\n    GlobalEvents = new (class extends Base.mixin(Events) {\n        suspendFocusEvents() {\n            focusEventsSuspended = true;\n        }\n\n        resumeFocusEvents() {\n            focusEventsSuspended = false;\n        }\n\n        setupFocusListenersOnce(rootElement, EventHelper) {\n            if (rootElement && !GlobalEvents.observedElements.has(rootElement)) {\n                GlobalEvents.setupFocusListeners(rootElement, EventHelper);\n                GlobalEvents.observedElements.add(rootElement);\n            }\n        }\n\n        // This is imported by EventHelper and that makes the call to set up the listeners\n        // `detach` argument is required to not setup more listeners than we need to. In case of salesforce we include floatroot\n        // inside the webcomponent element and thus don't need default listeners on document. In regular webcomponents demo we\n        // don't need to do it, because with multiple components on one page that would force us to make more complex lookups.\n        setupFocusListeners(element = document, EventHelper, detach = false) {\n            const listeners = {\n                element,\n                touchstart(touchstart) {\n                    if (!globaltouchStart && touchstart.changedTouches.length === 1) {\n                        globaltouchStart = touchstart.changedTouches[0];\n                    }\n                    else {\n                        globaltouchStart = null;\n                    }\n                },\n                // Just this one has to be passive: false so that we are allowed to preventDefault\n                // if we are part of a contextmenu longpress emulation. Otherwise the gesture will\n                // proceed to cause a mousedown event.\n                touchend : {\n                    handler : event => {\n                        if (globaltouchStart) {\n                            // If the touchstart was used to synthesize a contextmenu event\n                            // stop the touch gesture processing right now.\n                            // Also prevent the conversion of the touch into  click.\n                            if (globaltouchStart.identifier === EventHelper.contextMenuTouchId) {\n                                event.stopImmediatePropagation();\n                                event.preventDefault();\n                            }\n                            else if (event.changedTouches.length === 1 && event.changedTouches[0].identifier === globaltouchStart.identifier) {\n                                GlobalEvents.trigger('globaltap', { event });\n                            }\n                            globaltouchStart = null;\n                        }\n                    },\n                    passive : false\n                },\n                mousedown : {\n                    handler : event => {\n                        lastInteractionType = 'mouse';\n                        if (!globaltouchStart) {\n                            GlobalEvents.trigger('globaltap', { event });\n                        }\n                        currentMouseDown = event;\n                        // If no keydown is catched, and the mouse down has modifier key. Add a fake key event.\n                        const hasModifierKey = event.ctrlKey || event.altKey || event.shiftKey || event.metaKey;\n                        if (!currentKeyDown && hasModifierKey) {\n                            currentKeyDown = new KeyboardEvent('keydown', {\n                                key : event.ctrlKey ? 'Control'\n                                    : (event.shiftKey ? 'Shift'\n                                        : (event.altKey ? 'Alt' : 'Meta')),\n                                ctrlKey  : event.ctrlKey,\n                                altKey   : event.altKey,\n                                shiftKey : event.shiftKey,\n                                metaKey  : event.metaKey\n                            });\n                        }\n                        else if (currentKeyDown && !hasModifierKey) {\n                            currentKeyDown = null;\n                        }\n                    },\n                    passive : false\n                },\n                mouseup() {\n                    currentMouseDown = null;\n                },\n                keydown(ev) {\n                    lastInteractionType = 'key';\n                    currentKeyDown = ev;\n                },\n                keypress() {\n                    lastInteractionType = 'key';\n                },\n                keyup() {\n                    currentKeyDown = null;\n                },\n                focusin(focusin) {\n                    const { Widget } = GlobalEvents;\n\n                    // https://app.assembla.com/spaces/bryntum/tickets/5503\n                    // Caused by the browser scrolling a focused element into view. The browser will do *whatever it takes*\n                    // to scroll a focused element so that as much of it is in view as possible. Its first point of scrolling will\n                    // be the float containing element. That must never scroll.\n                    // TODO: Remove when https://www.w3.org/TR/css-overflow-3/#valdef-overflow-clip is supported.\n                    Widget.resetFloatRootScroll();\n\n                    if (focusEventsSuspended) {\n                        return;\n                    }\n\n                    const\n                        fromElement     = !focusin.relatedTarget\n                            ? null\n                            : (focusin.relatedTarget instanceof HTMLElement ? focusin.relatedTarget : document.body),\n                        toElement       = focusin.target || document.body,\n                        fromWidget      = Widget.fromElement(fromElement),\n                        toWidget        = Widget.fromElement(toElement),\n                        commonAncestor  = DomHelper.getCommonAncestor(fromWidget, toWidget),\n                        // Flag if the fromElement is DOCUMENT_POSITION_FOLLOWING toElement\n                        backwards       = !!(fromElement && (toElement.compareDocumentPosition(fromElement) & 4)),\n                        topVisibleModal = Widget.query(isTopVisibleModal);\n\n                    let currentFocus = null;\n\n                    if (toElement && toElement !== document.body) {\n                        currentFocus = DomHelper.getActiveElement(toElement);\n                    }\n                    else {\n                        currentFocus = DomHelper.getActiveElement(document);\n                    }\n\n                    // If there is a topmost modal that is not actively reverting focus, and the focus is moving to\n                    // somewhere *not* a descendant of that modal, and that somewhere is not in a floater that us\n                    // *above* that modal (the compareDocumentPosition call), then we enforce modality and sweep focus\n                    // back into the modal.\n                    // By default, the Container class will yield the first focusable descendant widget's focusEl as its\n                    // focusEl, so that will be out of the box behaviour for Popups.\n                    if (topVisibleModal && !topVisibleModal._isRevertingFocus) {\n                        if (!toWidget || (!topVisibleModal.owns(toWidget) && !(topVisibleModal.element.compareDocumentPosition(toWidget.element) & 4 && toWidget.up(isFloatingWidget)))) {\n                            return topVisibleModal.focus();\n                        }\n                    }\n\n                    let event = createWidgetEvent('focusout', fromElement, focusin.target, fromWidget, toWidget, backwards);\n\n                    // Bubble focusout event up the \"from\" side of the tree\n                    for (let target = fromWidget, owner; target && target !== commonAncestor; target = owner) {\n                        // Capture before any focus out handling is done. It may be manipulated.\n                        owner = target.owner;\n\n                        if (!target.isDestroying && target.onFocusOut) {\n                            target.onFocusOut(event);\n\n                            // It is possible for focusout handlers to refocus themselves (editor's invalidAction='block'), so\n                            // check if the focus is still where it was when we started unless we are in a document\n                            // loss of focus situation (no target)\n                            if (focusin.target && currentFocus !== DomHelper.getActiveElement(focusin.target)) {\n                                // If the focus has moved, that movement would have kicked off a nested sequence of focusin/out\n                                // notifications, so everyone has already been notified... no more to do here.\n                                return;\n                            }\n                        }\n                    }\n\n                    // Focus is moving upwards to the ancestor widget.\n                    // Its focus method might delegate focus to a focusable descendant.\n                    if (commonAncestor && focusin.target === commonAncestor.element) {\n                        // If one of the handlers above has not moved focus onwards\n                        // and the common ancestor is a container which delegates\n                        // focus inwards to a descendant, then give it the opportunity to do that.\n                        if (!commonAncestor.isDestroying && DomHelper.getActiveElement(commonAncestor) === toElement && commonAncestor.focusElement && commonAncestor.focusElement !== commonAncestor.element) {\n                            // If focus is not inside, move focus inside\n                            if (!commonAncestor.element.contains(currentFocus) || commonAncestor.focusDescendant) {\n                                // Wait until out of the focusin handler to move focus on.\n                                commonAncestor.setTimeout(() => commonAncestor.focus?.(), 0);\n                            }\n                        }\n                    }\n                    // Focus is moving between two branches of a subtree.\n                    // Bubble focusin event up the \"to\" side of the tree\n                    else {\n                        event = createWidgetEvent('focusin', toElement, fromElement, fromWidget, toWidget, backwards);\n                        for (let target = toWidget; target && target !== commonAncestor; target = target.owner) {\n                            if (!target.isDestroying) {\n                                target.onFocusIn?.(event);\n                            }\n                        }\n                    }\n\n                    // Fire element focusmove event. Grid navigation will use  this when cells are focusable.\n                    const commonAncestorEl = DomHelper.getCommonAncestor(fromElement?.nodeType === Element.ELEMENT_NODE ? fromElement : null, toElement) || toElement.parentNode;\n\n                    // Common ancestor may be null is salesforce\n                    // https://github.com/bryntum/support/issues/4865\n                    if (commonAncestorEl) {\n                        event = createWidgetEvent('focusmove', toElement, fromElement, fromWidget, toWidget, backwards, { bubbles : true });\n                        commonAncestorEl.dispatchEvent(event);\n                    }\n                },\n                focusout(focusout) {\n                    if (focusEventsSuspended) {\n                        return;\n                    }\n\n                    if (!focusout.relatedTarget || !GlobalEvents.Widget.fromElement(focusout.relatedTarget)) {\n                        // When switching between tabs in Salesforce app `relatedTarget` of the focusout event might be not an instance of\n                        // HTMLElement.\n                        const target = focusout.relatedTarget && focusout.relatedTarget instanceof HTMLElement ? focusout.relatedTarget : null;\n\n                        listeners.focusin({\n                            target,\n                            relatedTarget : focusout.target\n                        });\n\n                        currentKeyDown = currentMouseDown = null;\n                    }\n                },\n                // This will clear keydown and mousedown status on window blur\n                blur : {\n                    element : window,\n                    handler(event) {\n                        if (event.target === window) {\n                            currentKeyDown = null;\n                            currentMouseDown = null;\n                        }\n                    }\n                },\n                capture : true,\n                passive : true\n            };\n\n            // detach previous listeners\n            detach && detacher?.();\n\n            detacher = this.detachEvents = EventHelper.on(listeners);\n        }\n\n        get lastInteractionType() {\n            return lastInteractionType;\n        }\n\n        get shiftKeyDown() {\n            return currentKeyDown?.shiftKey;\n        }\n\n        get ctrlKeyDown() {\n            return currentKeyDown?.ctrlKey || currentKeyDown?.metaKey;\n        }\n\n        get altKeyDown() {\n            return currentKeyDown?.altKey;\n        }\n\n        isKeyDown(key) {\n            return !key ? Boolean(currentKeyDown) : (currentKeyDown?.key === key || currentKeyDown[key?.toLowerCase() + 'Key'] === true);\n        }\n\n        isMouseDown(button = 0) {\n            return currentMouseDown?.button === button;\n        }\n\n        get currentMouseDown() {\n            return currentMouseDown;\n        }\n\n        get currentKeyDown() {\n            return currentKeyDown;\n        }\n\n    })(),\n    isTopVisibleModal = w => w.isVisible && w.isTopModal;\n\nGlobalEvents.observedElements = new Set();\n\n/**\n * Fired after the theme is changed\n * @event theme\n * @param {Core.GlobalEvents} source\n * @param {String} theme The new theme name\n */\n\nlet globaltouchStart,\n    focusEventsSuspended = false,\n    lastInteractionType,\n    currentKeyDown,\n    currentMouseDown,\n    detacher;\n\nfunction createWidgetEvent(eventName, target, relatedTarget, fromWidget, toWidget, backwards, options) {\n    const result = new CustomEvent(eventName, options);\n\n    // Workaround for Salesforce. They use strict mode and define non-configurable property `target`. We use this\n    // CustomEvent as a synthetic one, feels fine to use non-standard handle for target.\n    Object.defineProperty(result, '_target', {\n        get() {\n            return target;\n        }\n    });\n    Object.defineProperty(result, 'relatedTarget', {\n        get() {\n            return relatedTarget;\n        }\n    });\n    result.fromWidget = fromWidget;\n    result.toWidget = toWidget;\n    result.backwards = backwards;\n\n    return result;\n}\n\n/**\n * A singleton firing global application level events like 'theme'.\n *\n * ```javascript\n * GlobalEvents.on({\n *    theme() {\n *        // react to theme changes here\n *    }\n * });\n * ```\n *\n * @class\n * @singleton\n * @mixes Core/mixin/Events\n */\nexport default GlobalEvents;\n","import Base from '../Base.js';\nimport Events from '../mixin/Events.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\nimport StringHelper from '../helper/StringHelper.js';\nimport Localizable from '../localization/Localizable.js';\n\n/**\n * @module Core/mixin/InstancePlugin\n */\n\nfunction getDescriptor(me, fnName) {\n    const property = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(me), fnName);\n\n    return (property && (property.get || property.set)) ? property : null;\n}\n\n/**\n * Base class for plugins. Published functions will be available from the other class. `this` in published functions is\n * referenced to the plugin, access the other class using `this.client`.\n *\n * Observe that plugin doesn't apply itself on class level but instead on instance level. Plugin is its own instance\n * that can have own functions and data that is not exposed to target class.\n *\n * Functions can be published in four ways:\n *\n * * `assign` (when function is not already available on target)\n * * `before` (when function is already available on target, will be called before original function)\n * * `after` (when function is already available on target, will be called after original function)\n * * `override` (replaces function on target, but old function can be reached)\n *\n * To configure which functions get published and in what way, specify `pluginConfig` getter on plugin:\n *\n * ```\n * class Sort extends InstancePlugin {\n *   static get pluginConfig {\n *      return {\n *          before   : ['init'],\n *          after    : ['destroy', 'onElementClick'],\n *          override : ['render']\n *      };\n *   }\n * }\n * ```\n * @extends Core/Base\n * @mixes Core/localization/Localizable\n * @mixes Core/mixin/Events\n * @plugin\n */\nexport default class InstancePlugin extends Base.mixin(Events, Localizable) {\n\n    static $name = 'InstancePlugin';\n\n    //region Config\n\n    static get configurable() {\n        return {\n            clientListeners : null,\n\n            /**\n             * Get/set the plugin/feature `disabled` state.\n             * @member {Boolean} disabled\n             * @category Common\n             */\n            /**\n             * The plugin/feature `disabled` state.\n             *\n             * For a feature that is **off** by default that you want to enable later during runtime,\n             * configure it with `disabled : true`.\n             * ```javascript\n             * const grid = new Grid({\n             *      features : {\n             *          featureName : {\n             *              disabled : true // on and disabled, can be enabled later\n             *          }\n             *      }\n             * });\n             *\n             * // enable the feature\n             * grid.features.featureName.disabled = false;\n             * ```\n             *\n             * If the feature is **off** by default, and you want to include and enable the feature, configure it as `true`:\n             * ```javascript\n             * const grid = new Grid({\n             *      features : {\n             *          featureName : true // on and enabled, can be disabled later\n             *      }\n             * });\n             *\n             * // disable the feature\n             * grid.features.featureName.disabled = true;\n             * ```\n             *\n             * If the feature is **on** by default, but you want to turn it **off**, configure it as `false`:\n             * ```javascript\n             * const grid = new Grid({\n             *      features : {\n             *          featureName : false // turned off, not included at all\n             *      }\n             * });\n             * ```\n             *\n             * If the feature is **enabled** by default and you have no need of reconfiguring it,\n             * you can omit the feature configuration.\n             *\n             * @config {Boolean}\n             * @default\n             * @category Common\n             */\n            disabled : false,\n\n            /**\n             * The Widget which was passed into the constructor,\n             * which is the Widget we are providing extra services for.\n             * @member {Core.widget.Widget} client\n             * @readonly\n             * @category Misc\n             */\n            /**\n             * The widget which this plugin is to attach to.\n             * @config {Core.widget.Widget}\n             * @category Misc\n             */\n            client : null,\n\n            // The plugins can define their own keyMap which will then be merged with their client's keyMap.\n            keyMap : null\n        };\n    }\n\n    //endregion\n\n    updateClient(client) {\n        // So that this.callback can reach the owning Widget when resolving function names.\n        if (!this.owner) {\n            this.owner = client;\n        }\n    }\n\n    /**\n     * This will merge a feature's (subclass of InstancePlugin) keyMap with it's client's keyMap.\n     * @private\n     */\n    updateKeyMap(keyMap) {\n        const { client } = this;\n        client.keyMap = client.mergeKeyMaps(client.keyMap, keyMap, StringHelper.uncapitalize(this.constructor.$name));\n    }\n\n    //region Init\n\n    /**\n     * Call from another instance to add plugins to it.\n     * @example\n     * InstancePlugin.initPlugins(this, Search, Stripe);\n     * @param plugInto Instance to mix into (usually this)\n     * @param plugins Classes to plug in\n     * @internal\n     */\n    static initPlugins(plugInto, ...plugins) {\n        const property = plugInto.plugins || (plugInto.plugins = {});\n\n        for (const PluginClass of plugins) {\n            property[PluginClass.$$name] = new PluginClass(plugInto);\n        }\n    }\n\n    /**\n     * Simple wrapper for {@link #property-disabled} to make optional chaining simple:\n     *\n     * ```javascript\n     * grid.features.myFeature?.enabled // returns true when feature exists and is enabled\n     * ```\n     * @returns {Boolean}\n     * @internal\n     */\n    get enabled() {\n        return !this.disabled;\n    }\n\n    // We can act as an owner of a widget, so must be able to participate in focus reversion\n    getFocusRevertTarget() {\n        return this.client?.getFocusRevertTarget();\n    }\n\n    construct(...args) {\n        const me = this;\n\n        let [plugInto, config] = args,\n            listeners;\n\n        // When called with one argument (a config object), grab the \"client\" from the config object.\n        if (args.length === 1) {\n            if (ObjectHelper.isObject(plugInto)) {\n                config = plugInto;\n                plugInto = config.client;\n            }\n        }\n        // Two args, so client is the first. Ensure the config doesn't contain a client property.\n        else {\n            config = ObjectHelper.assign({}, config);\n            delete config.client;\n        }\n\n        me.client = plugInto;\n\n        super.construct(config);\n\n        me.applyPluginConfig(plugInto);\n\n        listeners = me.clientListeners;\n\n        if (listeners) {\n            listeners = ObjectHelper.assign({}, listeners);\n            listeners.thisObj = me;\n\n            // NOTE: If clientListeners are ever made public, we need to separate internal clientListeners from app ones\n            plugInto.ion(listeners);\n        }\n    }\n\n    /**\n     * Applies config as found in plugInto.pluginConfig, or published all if no config found.\n     * @private\n     * @param plugInto Target instance to plug into\n     */\n    applyPluginConfig(plugInto) {\n        const\n            me     = this,\n            config = me.pluginConfig || me.constructor.pluginConfig;\n\n        if (config) {\n            const { assign, chain, after, before, override } = config;\n\n            assign && me.applyAssign(plugInto, assign);\n            (chain || after) && me.applyChain(plugInto, chain || after);\n            before && me.applyChain(plugInto, before, false);\n            override && me.applyOverride(plugInto, override);\n        }\n    }\n\n    /**\n     * Applies assigning for specified functions.\n     * @private\n     * @param plugInto\n     * @param fnNames\n     */\n    applyAssign(plugInto, fnNames) {\n        fnNames.forEach(fnName => this.assign(plugInto, fnName));\n    }\n\n    /**\n     * Applies chaining for specified functions.\n     * @private\n     * @param plugInto\n     * @param functions\n     * @param after\n     */\n    applyChain(plugInto, functions, after = true) {\n        if (Array.isArray(functions)) {\n            for (const fnName of functions) {\n                this.chain(plugInto, fnName, fnName, after);\n            }\n        }\n        else {\n            for (const intoName in functions) {\n                this.chain(plugInto, intoName, functions[intoName], after);\n            }\n        }\n    }\n\n    /**\n     * Applies override for specified functions.\n     * @private\n     * @param plugInto\n     * @param fnNames\n     */\n    applyOverride(plugInto, fnNames) {\n        const me = this;\n\n        if (!me.overridden) {\n            me.overridden = {};\n        }\n\n        fnNames.forEach(fnName => {\n            if (!me[fnName]) {\n                throw new Error(`Trying to chain fn ${plugInto.$$name}#${fnName}, but plugin fn ${me.$$name}#${fnName} does not exist`);\n            }\n            // override\n            if (typeof plugInto[fnName] === 'function') {\n                me.overridden[fnName] = plugInto[fnName].bind(plugInto);\n            }\n\n            plugInto[fnName] = me[fnName].bind(me);\n        });\n    }\n\n    /**\n     * Assigns specified functions.\n     * @private\n     * @param plugInto\n     * @param fnName\n     */\n    assign(plugInto, fnName) {\n        const\n            me       = this,\n            property = getDescriptor(me, fnName);\n\n        if (property) {\n            // getter/setter, define corresponding property on target\n            Object.defineProperty(plugInto, fnName, {\n                configurable : true,\n                enumerable   : true,\n                get          : property.get && property.get.bind(me),\n                set          : property.set && property.set.bind(me)\n            });\n        }\n        else {\n            plugInto[fnName] = me[fnName].bind(me);\n        }\n    }\n\n    //endregion\n\n    //region Chaining\n\n    /**\n     * Chains functions. When the function is called on the target class all functions in the chain will be called in\n     * the order they where added.\n     * @private\n     * @param plugInto\n     * @param intoName\n     * @param hookName\n     * @param after\n     */\n    chain(plugInto, intoName, hookName, after = true) {\n        // default hook prio\n        let prio = 0;\n\n        if (typeof intoName === 'object') {\n            intoName = intoName.fn;\n        }\n\n        // if hook is provided as an object\n        if (typeof hookName === 'object') {\n            // hook prio to order runs\n            prio     = hookName.prio || 0;\n            hookName = hookName.fn;\n        }\n\n        const\n            me    = this,\n            chains = plugInto.pluginFunctionChain || (plugInto.pluginFunctionChain = {}),\n            hookFn =\n                //<debug>\n                // Previously, RowManager was (mistakenly) using chain to put a getter on\n                // the grid. This will ensure that property getters are not passed in as\n                // chain/before/after:\n                !getDescriptor(me, hookName) &&\n                //</debug>\n                me[hookName] && me[hookName].bind(me),\n            // Grab the fn so that we won't need our this pointer to call it. This is due\n            // to this instance possibly being destroyed by the time a chain call is made.\n            functionChainRunner = me.functionChainRunner;\n\n        if (!hookFn) {\n            throw new Error(`Trying to chain fn ${plugInto.$$name}#${hookName}, but plugin fn ${me.$$name}#${hookName} does not exist`);\n        }\n\n        if (!chains[intoName]) {\n            let intoFn = plugInto[intoName];\n\n            if (intoFn) {\n                intoFn = intoFn.bind(plugInto);\n                intoFn.$this = plugInto;\n                // use default prio\n                intoFn.$prio = 0;\n            }\n\n            chains[intoName] = intoFn ? [intoFn] : [];\n\n            plugInto[intoName] = (...params) => functionChainRunner(chains[intoName], params);\n        }\n\n        hookFn.$this = me;\n        hookFn.$prio = prio;\n        chains[intoName][after ? 'push' : 'unshift'](hookFn);\n        chains[intoName].$sorted = false;\n    }\n\n    /**\n     * Used to run multiple plugged in functions with the same name, see chain above. Returning false from a\n     * function will abort chain.\n     * @private\n     * @param {Array} chain\n     * @param {Array} params\n     * @returns {*} value returned from last function in chain (or false if any returns false)\n     */\n    functionChainRunner(chain, params) {\n        // NOTE: even though we are an instance method, we must not use our \"this\" pointer\n        // since our instance may be destroyed. We cope with that by receiving parameters\n        // for everything we need (so we're just a pure function).\n        let fn, i, returnValue;\n\n        // sort hooks by prio before running them\n        if (!chain.$sorted) {\n            chain.sort((a, b) => b.$prio - a.$prio);\n            chain.$sorted = true;\n        }\n\n        for (i = 0; i < chain.length; i++) {\n            fn = chain[i];\n\n            // Feature hooks remain in place even after GridBase loops and destroys its\n            // features, so skip over any destroyed features on the chain. In particular,\n            // bindStore hooks will be called when GridBase sets store to null.\n            if (!fn.$this.isDestroyed) {\n                returnValue = fn(...params);\n\n                if (returnValue === false) {\n                    break;\n                }\n            }\n        }\n\n        return returnValue;\n    }\n\n    //endregion\n\n    /**\n     * Called when disabling/enabling the plugin/feature, not intended to be called directly. To enable or disable a\n     * plugin/feature, see {@link #property-disabled}.\n     *\n     * By default removes the cls of the plugin from its client. Override in subclasses to take any other actions necessary.\n     * @category Misc\n     */\n    doDisable(disable) {\n        const\n            me = this,\n            { constructor } = me,\n            cls = 'featureClass' in constructor ? constructor.featureClass : `b-${constructor.$$name.toLowerCase()}`;\n\n        // Some features do not use a cls\n        if (cls) {\n            me.client?.element?.classList[disable ? 'remove' : 'add'](cls);\n        }\n\n        if (!me.isConfiguring) {\n            if (disable) {\n                /**\n                 * Fired when the plugin/feature is disabled.\n                 * @event disable\n                 * @param {Core.mixin.InstancePlugin} source\n                 */\n                me.trigger('disable');\n            }\n            else {\n                /**\n                 * Fired when the plugin/feature is enabled.\n                 * @event enable\n                 * @param {Core.mixin.InstancePlugin} source\n                 */\n                me.trigger('enable');\n            }\n        }\n    }\n\n    updateDisabled(disabled) {\n        this.doDisable(disabled);\n    }\n\n    throwOverrideIsMissing(data) {\n        throw new Error(`Trying to override fn ${data.plugIntoName}#${data.fnName}, but plugin fn ${data.pluginName}#${data.fnName} does not exist`);\n    }\n\n    // Convenience method to read the rootElement from the owner widget\n    get rootElement() {\n        return this.client.rootElement;\n    }\n}\n","import Base from '../Base.js';\nimport InstancePlugin from './InstancePlugin.js';\n\n/**\n * @module Core/mixin/Pluggable\n */\n\n/**\n * Enables using plugins for a class by specifying property plugins as an array of plugin classes. If only a single plugin\n * is used, just give the plugin class instead of an array. This class isn't required for using plugins, just makes it\n * easier. Without mixin you can otherwise use `InstancePlugin.initPlugins(this, PluginClass)`.\n *\n * @example\n * new Store({\n *   plugins: [PluginClass, ...]\n * });\n *\n * @mixin\n */\nexport default Target => class Pluggable extends (Target || Base) {\n    static get $name() {\n        return 'Pluggable';\n    }\n\n    /**\n     * Specify plugins (an array of classes) in config\n     * @config {Function[]} plugins\n     * @category Misc\n     */\n\n    /**\n     * Map of applied plugins\n     * @property {Object<String,Core.mixin.InstancePlugin>}\n     * @readonly\n     * @category Misc\n     */\n    get plugins() {\n        if (!this._plugins) {\n            this._plugins = {};\n        }\n        return this._plugins;\n    }\n\n    set plugins(plugins) {\n        if (plugins) {\n            if (!Array.isArray(plugins)) plugins = [plugins];\n            InstancePlugin.initPlugins(this, ...plugins);\n        }\n        this.initPlugins();\n    }\n\n    /**\n     * Template method which may be implemented in subclasses to initialize any plugins.\n     * This method is empty in the `Pluggable` base class.\n     * @internal\n     */\n    initPlugins() {\n\n    }\n\n    /**\n     * Adds plugins to an instance.\n     * @param {Function[]} plugins The plugins to add\n     * @category Misc\n     */\n    addPlugins(...plugins) {\n        InstancePlugin.initPlugins(this, ...plugins);\n    }\n\n    /**\n     * Checks if instance has plugin.\n     * @param {String|Function} pluginClassOrName Plugin or name to check for\n     * @returns {Boolean}\n     * @category Misc\n     */\n    hasPlugin(pluginClassOrName) {\n        return this.getPlugin(pluginClassOrName) != null;\n    }\n\n    /**\n     * Get a plugin instance.\n     * @param {String|Function} pluginClassOrName\n     * @returns {Core.mixin.InstancePlugin}\n     * @category Misc\n     */\n    getPlugin(pluginClassOrName) {\n        if (typeof pluginClassOrName === 'function') {\n            pluginClassOrName = pluginClassOrName.$$name;\n        }\n        return this.plugins?.[pluginClassOrName];\n    }\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n","import Base from '../Base.js';\nimport VersionHelper from '../helper/VersionHelper.js';\nimport BrowserHelper from '../helper/BrowserHelper.js';\n\nconst { defineProperty } = Reflect;\n\nlet performance;\n\nif (BrowserHelper.isBrowserEnv) {\n    performance = globalThis.performance;\n}\nelse {\n    performance = {\n        now() {\n            return new Date().getTime();\n        }\n    };\n}\n\n/**\n * @module Core/mixin/Delayable\n */\n\n// Global timeout collections for tests\nlet globalDelays = null;\n\nif (VersionHelper.isTestEnv) {\n    const bryntum = globalThis.bryntum || (globalThis.bryntum = {});\n\n    globalDelays = bryntum.globalDelays = {\n        timeouts        : new Map(),\n        intervals       : new Map(),\n        animationFrames : new Map(),\n        idleCallbacks   : new Map(),\n        isEmpty(includeIntervals = false) {\n            return globalDelays.timeouts.size + globalDelays.animationFrames.size + globalDelays.idleCallbacks.size + (includeIntervals ? globalDelays.intervals.size : 0) === 0;\n        },\n        /**\n         * Returns filtered delays array\n         * @param {Object} options\n         * @param {String[]} [options.ignoreTimeouts] array of delays names to ignore\n         * @param {Number} [options.maxDelay] maximum delay in milliseconds. Timeouts with bigger delay will be filtered out\n         * @param {Boolean} [options.includeIntervals] include intervals\n         * @returns {Object[]} array of filtered delays\n         * @internal\n         */\n        getFiltered({ ignoreTimeouts = [], maxDelay = 5000, includeIntervals = false }) {\n            const\n                result = [],\n                scopes = ['timeouts', 'animationFrames', 'idleCallbacks'];\n            if (includeIntervals) {\n                scopes.push('intervals');\n            }\n            // Filter delays\n            for (const scope of scopes) {\n                const map = globalDelays[scope];\n                for (const [, entry] of map.entries()) {\n                    if (!ignoreTimeouts.includes(entry.name) && (!Number.isInteger(entry.delay) || entry.delay < maxDelay)) {\n                        result.push(entry);\n                    }\n                }\n            }\n            return result;\n        }\n    };\n}\n\nconst\n    /**\n     * Creates and returns a function that will call the user-supplied `fn`.\n     *\n     * @param {Core.mixin.Delayable} me\n     * @param {Function} fn The user function to call when the timer fires.\n     * @param {Function} wrapFn The function the user will call to start the timer.\n     * @param {Object} options The invoke options.\n     * @param {Array} [options.appendArgs] The argument list to append to those passed to the function.\n     * @param {Object} [options.thisObj] The `this` reference for `fn`.\n     * @returns {Function}\n     * @private\n     */\n    makeInvoker = (me, fn, wrapFn, options) => {\n        const\n            named      = typeof fn === 'string',\n            appendArgs = options?.appendArgs || [],\n            // The invoker fn is intended to be wired directly to native setTimeout/requestAnimationFrame/etc and so\n            // it does not receive any arguments worth passing on to the user's fn. Those come from the original call\n            // to the wrapFn.\n            invoker    = () => {\n                wrapFn.timerId = null;\n                wrapFn.lastCallTime = performance.now();\n\n                // Grab args now and null the stored args out (to avoid leaks):\n                const args = wrapFn.args;\n\n                wrapFn.args = null;\n\n                if (named) {\n                    me[fn](...args, ...appendArgs);\n                }\n                else {\n                    fn.call(me, ...args, ...appendArgs);\n                }\n\n                wrapFn.called = true;\n                ++wrapFn.calls;\n            };\n\n        if (options) {\n            me = options.thisObj || me;\n        }\n\n        // We put most everything as properties on the wrapFn so that it can all be inspected in the debugger (unlike\n        // closure variables) and expected in tests.\n        wrapFn.lastCallTime = -9e9;  // performance.now() = 0 at start...\n        wrapFn.calls = 0;\n        wrapFn.invoker = invoker;\n\n        invoker.wrapFn = wrapFn;\n\n        return invoker;\n    },\n\n    /**\n     * Decorates the supported `wrapFn` with additional methods and an `isPending` readonly\n     * property. These decorations are available to user code to help manage the scheduling\n     * behavior of the buffered function.\n     *\n     * @param {Core.mixin.Delayable} me\n     * @param {Function} wrapFn The function the user will call to start the timer.\n     * @param {String} cancelFn The name of the function that will cancel a timer.\n     * @returns {Function} The `wrapFn` is returned.\n     * @private\n     */\n    decorateWrapFn = (me, wrapFn, cancelFn = 'clearTimeout') => {\n        wrapFn.cancel = () => {\n            if (wrapFn.isPending) {\n                me[cancelFn](wrapFn.timerId);\n                // avoid leaks and cleanup:\n                wrapFn.args = wrapFn.timerId = null;\n            }\n        };\n\n        wrapFn.flush = () => {\n            if (wrapFn.isPending) {\n                me[cancelFn](wrapFn.timerId);\n                wrapFn.timerId = null;\n                // we don't call cancel() since it also sets args=null\n\n                wrapFn.invoker();\n            }\n        };\n\n        wrapFn.now = (...args) => {\n            wrapFn.cancel();\n            wrapFn.args = args;\n            wrapFn.invoker();\n        };\n\n        wrapFn.resume = all => {\n            const n = wrapFn.suspended;\n\n            wrapFn.suspended = (all || n < 1) ? 0 : (n - 1);\n        };\n\n        wrapFn.suspend = () => {\n            ++wrapFn.suspended;\n        };\n\n        wrapFn.immediate = false;\n        wrapFn.suspended = 0;\n        wrapFn.timerId = null;\n\n        defineProperty(wrapFn, 'isPending', {\n            get() {\n                return wrapFn.timerId !== null;\n            }\n        });\n\n        return wrapFn;\n    };\n\n/**\n * Configuration options available when defining a delayable function.\n *\n * @typedef {Object} DelayableConfig\n * @property {'buffer'|'raf'|'idle'|'throttle'} type Type of delay to use. `raf` is short for `requestAnimationFrame`,\n * 'idle' for `requestIdleCallback` (not supported in Safari)\n * @property {Number} [delay] Number of milliseconds to wait before (buffer) or after (throttle) calling the underlying\n * method. A value of 0 is equivalent to setting `immediate: true`.\n * @property {Boolean} [immediate] Set to `true` to call immediately (effectively disabling the buffer/throttle)\n * @property {Boolean} [cancelOutstanding] Set to `true` to cancel any pending animation frame requests and\n * schedule a new one on each call.\n */\n\n/**\n * Tracks setTimeout, setInterval and requestAnimationFrame calls and clears them on destroy.\n *\n * @example\n * someClass.setTimeout(() => console.log('hi'), 200);\n * someClass.setInterval(() => console.log('annoy'), 100);\n * // can also use named timeouts for easier tracking\n * someClass.setTimeout(() => console.log('named'), 300, 'named');\n * someClass.clearTimeout('named');\n *\n * @mixin\n */\nexport default Target => class Delayable extends (Target || Base) {\n    static get $name() {\n        return 'Delayable';\n    }\n\n    static get declarable() {\n        return [\n            /**\n             * This class property returns an object that specifies methods to wrap with configurable timer behaviors.\n             *\n             * It is used like so:\n             * ```javascript\n             *  class Foo extends Base.mixin(Delayable) {\n             *      static get delayable() {\n             *          return {\n             *              expensiveMethod : 500\n             *          };\n             *      }\n             *\n             *      expensiveMethod() {\n             *          this.things();\n             *          this.moreThings();\n             *          this.evenMoreThings();\n             *      }\n             *  }\n             * ```\n             * With the above in place, consider:\n             * ```javascript\n             *  let instance = new Foo();\n             *\n             *  instance.expensiveMethod();\n             * ```\n             * Instead of the above code immediately calling the `expensiveMethod()`, it will start a timer that will\n             * invoke the method 500ms later. Because `expensiveMethod()` is an instance method, each instance of `Foo`\n             * will have its own timer.\n             *\n             * NOTE: Only instance methods are currently supported (i.e., only non-`static` methods).\n             *\n             * #### Options\n             * The value of each key configures how the method will be scheduled. If the value is a number, it is\n             * promoted to a config object of `type='buffer'` as in the following:\n             * ```javascript\n             *  class Foo extends Base.mixin(Delayable) {\n             *      static get delayable() {\n             *          return {\n             *              expensiveMethod : {\n             *                  type  : 'buffer',\n             *                  delay : 500\n             *              }\n             *          };\n             *      }\n             *  }\n             * ```\n             * The `type` property of the config object must be one of three values. Other options can be provided\n             * depending on the `type`:\n             *\n             *  - `buffer`<br>\n             *    Other options:\n             *     - `delay` (Number) : The number of milliseconds to wait before calling the underlying method. A\n             *       value of 0 is equivalent to setting `immediate: true`.\n             *     - `immediate` (Boolean) : Set to `true` to call immediately (effectively disabling the buffer).\n             *  - `raf` (short for \"request animation frame\")<br>\n             *  - `idle` (short for \"request idle callback\") __Not available on Safari__ <br>\n             *    Other options:\n             *     - `cancelOutstanding` (Boolean) : Set to `true` to cancel any pending animation frame requests and\n             *       schedule a new one on each call.\n             *     - `immediate` (Boolean) : Set to `true` to call immediately.\n             *  - `throttle`<br>\n             *    Other options:\n             *     - `delay` (Number) : The number of milliseconds to wait after each execution before another\n             *       execution takes place. A value of 0 is equivalent to setting `immediate: true`.\n             *     - `immediate` (Boolean) : Set to `true` to call immediately (effectively disabling the throttle).\n             *\n             * While `immediate: true` can be specified at the class level, it is more typical to set it on the\n             * instance's method as described below.\n             *\n             * #### Delayable Method API\n             * Delayable methods have a consistent API to manage their scheduling. This API is added to the methods\n             * themselves.\n             *\n             * For example:\n             * ```javascript\n             *  let instance = new Foo();\n             *\n             *  instance.expensiveMethod();         // schedule a call in 500ms\n             *  instance.expensiveMethod.isPending; // true\n             *  instance.expensiveMethod.cancel();\n             *  instance.expensiveMethod.flush();\n             *  instance.expensiveMethod.now();\n             *\n             *  instance.expensiveMethod.delay = 10;\n             *  instance.expensiveMethod();         // schedule a call in 10ms\n             * ```\n             *\n             * ##### `isPending` (Boolean, readonly)\n             * This boolean property will be `true` if a call has been scheduled, and false otherwise.\n             *\n             * ##### `cancel()`\n             * Cancels a pending call if one has been scheduled. Otherwise this method does nothing.\n             *\n             * ##### `flush()`\n             * Cancels the timer and causes the pending call to execute immediately. If there is no pending call, this\n             * method does nothing.\n             *\n             * ##### `now()`\n             * Cancels the timer (if one is pending) and executes the method immediately. If there is no pending call,\n             * this method will still call the underlying method.\n             *\n             * @static\n             * @member {Object<String,'raf'|Number|DelayableConfig>} delayable\n             * @internal\n             */\n            'delayable'\n        ];\n    }\n\n    doDestroy() {\n        const me = this;\n\n        // Normally one would expect this call at the end of this method... but in this case we need to run cleanup\n        // of this stuff after config nullification since those can trigger delayable method calls.\n        super.doDestroy();\n\n        if (me.timeoutIds) {\n            me.timeoutIds.forEach((fn, id) => {\n                if (typeof fn === 'function') {\n                    fn();\n                }\n\n                clearTimeout(id);\n                globalDelays?.timeouts.delete(id);\n            });\n            me.timeoutIds = null;\n        }\n\n        if (me.timeoutMap) {\n            me.timeoutMap.forEach((name, id) => clearTimeout(id));\n            me.timeoutMap = null;\n        }\n\n        if (me.intervalIds) {\n            me.intervalIds.forEach(id => {\n                clearInterval(id);\n                globalDelays?.intervals.delete(id);\n            });\n            me.intervalIds = null;\n        }\n\n        if (me.animationFrameIds) {\n            me.animationFrameIds.forEach(id => {\n                cancelAnimationFrame(id);\n                globalDelays?.animationFrames.delete(id);\n            });\n            me.animationFrameIds = null;\n        }\n\n        if (me.idleCallbackIds) {\n            me.idleCallbackIds.forEach(id => {\n                cancelIdleCallback(id);\n                globalDelays?.idleCallbacks.delete(id);\n            });\n            me.idleCallbackIds = null;\n        }\n    }\n\n    /**\n     * Check if a named timeout is active\n     * @param name\n     * @internal\n     */\n    hasTimeout(name) {\n        return Boolean(this.timeoutMap?.has(name));\n    }\n\n    /**\n     * Same as native setTimeout, but will be cleared automatically on destroy. If a propertyName is supplied it will\n     * be used to store the timeout id.\n     * @param {Object} timeoutSpec An object containing the details about that function, and the time delay.\n     * @param {Function|String} timeoutSpec.fn The function to call, or name of function in this object to call. Used as the `name` parameter if a string.\n     * @param {Number} timeoutSpec.delay The milliseconds to delay the call by.\n     * @param {Object[]} timeoutSpec.args The arguments to pass.\n     * @param {String} [timeoutSpec.name] The name under which to register the timer. Defaults to `fn.name`.\n     * @param {Boolean} [timeoutSpec.runOnDestroy] Pass `true` if this function should be executed if the Delayable instance is destroyed while function is scheduled.\n     * @param {Boolean} [timeoutSpec.cancelOutstanding] Pass `true` to cancel any outstanding invocation of the passed function.\n     * @returns {Number}\n     * @internal\n     */\n    setTimeout({ fn, delay, name, runOnDestroy, cancelOutstanding, args }) {\n        if (arguments.length > 1 || typeof arguments[0] === 'function') {\n            [fn, delay, name, runOnDestroy] = arguments;\n        }\n        if (typeof fn === 'string') {\n            name = fn;\n        }\n        else if (!name) {\n            name = fn.name || fn;\n        }\n\n        if (cancelOutstanding) {\n            this.clearTimeout(name);\n        }\n\n        const\n            me         = this,\n            timeoutIds = me.timeoutIds || (me.timeoutIds = new Map()),\n            timeoutMap = me.timeoutMap || (me.timeoutMap = new Map()),\n            timeoutId  = setTimeout(() => {\n                if (typeof fn === 'string') {\n                    fn = me[name];\n                }\n\n                // Cleanup before invocation in case fn throws\n                timeoutIds?.delete(timeoutId);\n                timeoutMap?.delete(name);\n                globalDelays?.timeouts.delete(timeoutId);\n\n                fn.apply(me, args);\n\n            }, delay);\n\n        timeoutIds.set(timeoutId, runOnDestroy ? fn : true);\n\n        // Commented out code is helpful when debugging timeouts in tests\n        globalDelays?.timeouts.set(timeoutId, { fn, delay, name/*, stack : new Error().stack*/ });\n\n        if (name) {\n            timeoutMap.set(name, timeoutId);\n        }\n\n        return timeoutId;\n    }\n\n    /**\n     * clearTimeout wrapper, either call with timeout id as normal clearTimeout or with timeout name (if you specified\n     * a name to setTimeout())\n     * property to null.\n     * @param {Number|String} idOrName timeout id or name\n     * @internal\n     */\n    clearTimeout(idOrName) {\n        let id = idOrName;\n\n        if (typeof id === 'string') {\n            if (this.timeoutMap) {\n                id = this.timeoutMap.get(idOrName);\n                this.timeoutMap.delete(idOrName);\n            }\n            else {\n                return;\n            }\n        }\n\n        clearTimeout(id);\n\n        this.timeoutIds?.delete(id);\n        globalDelays?.timeouts.delete(id);\n    }\n\n    /**\n     * clearInterval wrapper\n     * @param {Number} id\n     * @internal\n     */\n    clearInterval(id) {\n        clearInterval(id);\n\n        this.intervalIds?.delete(id);\n\n        globalDelays?.intervals.delete(id);\n    }\n\n    /**\n     * Same as native setInterval, but will be cleared automatically on destroy\n     * @param {Function} fn callback method\n     * @param {Number} delay delay in milliseconds\n     * @param {String} name delay name for debugging\n     * @returns {Number}\n     * @internal\n     */\n    setInterval(fn, delay, name) {\n        const intervalId = setInterval(fn, delay);\n\n        (this.intervalIds || (this.intervalIds = new Set())).add(intervalId);\n\n        globalDelays?.intervals.set(intervalId, { fn, delay, name });\n\n        return intervalId;\n    }\n\n    /**\n     * Relays to native requestAnimationFrame and adds to tracking to have call automatically canceled on destroy.\n     * @param {Function} fn\n     * @param {Object[]} [extraArgs] The argument list to append to those passed to the function.\n     * @param {Object} [thisObj] `this` reference for the function.\n     * @returns {Number}\n     * @internal\n     */\n    requestAnimationFrame(fn, extraArgs = [], thisObj = this) {\n        const\n            animationFrameIds = this.animationFrameIds || (this.animationFrameIds = new Set()),\n            frameId           = requestAnimationFrame(() => {\n                globalDelays?.animationFrames.delete(frameId);\n                // [dongriffin 2022-01-19] It was observed that we can still be called even though we issued the\n                // cancelAnimationFrame call. Since delete() returns true if our frameId was present and is now\n                // removed, we can tell that we haven't been cancelled before we call our fn:\n                animationFrameIds.delete(frameId) && fn.apply(thisObj, extraArgs);\n            });\n\n        animationFrameIds.add(frameId);\n\n        globalDelays?.animationFrames.set(frameId, { fn, extraArgs, thisObj });\n\n        return frameId;\n    }\n\n    /**\n     * Relays to native requestIdleCallback and adds to tracking to have call automatically canceled on destroy.\n     * @param {Function} fn\n     * @param {Object[]} [extraArgs] The argument list to append to those passed to the function.\n     * @param {Object} [thisObj] `this` reference for the function.\n     * @returns {Number}\n     * @internal\n     */\n    requestIdleCallback(fn, extraArgs = [], thisObj = this) {\n        const\n            idleCallbackIds = this.idleCallbackIds || (this.idleCallbackIds = new Set()),\n            frameId           = requestIdleCallback(() => {\n                globalDelays?.idleCallbacks.delete(frameId);\n                // Since delete() returns true if our frameId was present and is now\n                // removed, we can tell that we haven't been cancelled before we call our fn:\n                idleCallbackIds.delete(frameId) && fn.apply(thisObj, extraArgs);\n            });\n\n        idleCallbackIds.add(frameId);\n\n        globalDelays?.idleCallbacks.set(frameId, { fn, extraArgs, thisObj });\n\n        return frameId;\n    }\n\n    /**\n     * Creates a function which will execute once, on the next animation frame. However many time it is\n     * called in one event run, it will only be scheduled to run once.\n     * @param {Function|String} fn The function to call, or name of function in this object to call.\n     * @param {Object[]} [args] The argument list to append to those passed to the function.\n     * @param {Object} [thisObj] `this` reference for the function.\n     * @param {Boolean} [cancelOutstanding] Cancel any outstanding queued invocation upon call.\n     * @internal\n     */\n    createOnFrame(fn, args = [], thisObj = this, cancelOutstanding) {\n        let rafId;\n\n        const result = (...callArgs) => {\n            // Cancel if outstanding if requested\n            if (rafId != null && cancelOutstanding) {\n                this.cancelAnimationFrame(rafId);\n                rafId = null;\n            }\n            if (rafId == null) {\n                rafId = this.requestAnimationFrame(() => {\n                    if (typeof fn === 'string') {\n                        fn = thisObj[fn];\n                    }\n                    rafId = null;\n                    callArgs.push(...args);\n                    fn.apply(thisObj, callArgs);\n                });\n            }\n        };\n\n        result.cancel = () => this.cancelAnimationFrame(rafId);\n\n        return result;\n    }\n\n    /**\n     * Relays to native cancelAnimationFrame and removes from tracking.\n     * @param {Number} handle\n     * @internal\n     */\n    cancelAnimationFrame(handle) {\n        cancelAnimationFrame(handle);\n\n        this.animationFrameIds?.delete(handle);\n\n        globalDelays?.animationFrames.delete(handle);\n    }\n\n    /**\n     * Relays to native cancelIdleCallback and removes from tracking.\n     * @param {Number} handle\n     * @internal\n     */\n    cancelIdleCallback(handle) {\n        cancelIdleCallback(handle);\n\n        this.idleCallbackIds?.delete(handle);\n\n        globalDelays?.idleCallbacks.delete(handle);\n    }\n\n    async nextAnimationFrame() {\n        return new Promise(resolve => this.requestAnimationFrame(resolve));\n    }\n\n    /**\n     * Wraps a function with another function that delays it specified amount of time, repeated calls to the wrapper\n     * resets delay.\n     * @param {Function|String} fn The function to call. If this is a string, it is looked up as a method on `this`\n     * instance (or `options.thisObj` instead, if provided).\n     * @param {Object|Number} options The delay in milliseconds or an options object.\n     * @param {Number} options.delay The delay in milliseconds.\n     * @param {Array} [options.appendArgs] The argument list to append to those passed to the function.\n     * @param {Object} [options.thisObj] The `this` reference for the function.\n     * @returns {Function} Wrapped function to call.\n     * @internal\n     */\n    buffer(fn, options) {\n        let delay = options;\n\n        if (options && typeof options !== 'number') {  // if (config object)\n            delay = options.delay;\n        }\n        else {\n            options = null;\n        }\n\n        const\n            bufferWrapFn = (...params) => {\n                if (bufferWrapFn.suspended) {\n                    return;\n                }\n\n                const { delay } = bufferWrapFn;\n\n                bufferWrapFn.cancel();\n                bufferWrapFn.called = false;\n                bufferWrapFn.args = params;\n\n                // If delay=0, the buffer has been disabled so always call immediately.\n                if (bufferWrapFn.immediate || !delay) {\n                    invoker();\n                }\n                else {\n                    bufferWrapFn.timerId = this.setTimeout(invoker, delay);\n                }\n            },\n\n            invoker = makeInvoker(this, fn, bufferWrapFn, options);\n\n        bufferWrapFn.delay = delay;\n\n        return decorateWrapFn(this, bufferWrapFn);\n    }\n\n    /**\n     * Returns a function that when called will schedule a call to `fn` on the next animation frame.\n     *\n     * @param {Function|String} fn The function to call. If this is a string, it is looked up as a method on `this`\n     * instance (or `options.thisObj` instead, if provided).\n     * @param {Boolean|Object} [options] An options object or the `cancelOutstanding` boolean property of it.\n     * @param {Boolean} [options.cancelOutstanding] Pass `true` to cancel any pending animation frame requests and\n     * schedule a new one on each call to the returned function.\n     * @param {Array} [options.appendArgs] The argument list to append to those passed to the function.\n     * @param {Object} [options.thisObj] The `this` reference for the function.\n     * @returns {Function}\n     * @internal\n     */\n    raf(fn, options) {\n        // NOTE: This method is only intended for use with `delayable`. It has a signature that is compatible\n        // with `buffer()` and `throttle()`. The name is 'raf' to make the following aesthetically pleasing:\n        //\n        //  class Foo extends Delayable() {\n        //      static get delayable() {\n        //          return {\n        //              bar : 'raf'\n        //          };\n        //      }\n        //  }\n\n        let cancelOutstanding = options;\n\n        if (options && typeof options !== 'boolean') {  // if (config object)\n            cancelOutstanding = options.cancelOutstanding;\n        }\n        else {\n            options = null;\n        }\n\n        const\n            rafWrapFn = (...params) => {\n                if (rafWrapFn.suspended) {\n                    return;\n                }\n\n                // Reschedule the frame on each call if requested\n                if (rafWrapFn.cancelOutstanding) {\n                    rafWrapFn.cancel();\n                }\n\n                rafWrapFn.called = false;\n                rafWrapFn.args = params;\n\n                if (rafWrapFn.immediate) {\n                    invoker();\n                }\n                else if (!rafWrapFn.isPending) {\n                    rafWrapFn.timerId = this.requestAnimationFrame(invoker);\n                }\n            },\n\n            invoker = makeInvoker(this, fn, rafWrapFn, options);\n\n        rafWrapFn.cancelOutstanding = cancelOutstanding;\n\n        return decorateWrapFn(this, rafWrapFn, 'cancelAnimationFrame');\n    }\n\n    idle(fn, options) {\n        let cancelOutstanding = options;\n\n        if (options && typeof options !== 'boolean') {  // if (config object)\n            cancelOutstanding = options.cancelOutstanding;\n        }\n        else {\n            options = null;\n        }\n\n        const\n            idleWrapFn = (...params) => {\n                if (idleWrapFn.suspended) {\n                    return;\n                }\n\n                // Reschedule the frame on each call if requested\n                if (idleWrapFn.cancelOutstanding) {\n                    idleWrapFn.cancel();\n                }\n\n                idleWrapFn.called = false;\n                idleWrapFn.args = params;\n\n                if (idleWrapFn.immediate) {\n                    invoker();\n                }\n                else if (!idleWrapFn.isPending) {\n                    idleWrapFn.timerId = this.requestIdleCallback(invoker);\n                }\n            },\n\n            invoker = makeInvoker(this, fn, idleWrapFn, options);\n\n        idleWrapFn.cancelOutstanding = cancelOutstanding;\n\n        // If the timer is still there in 100ms, then invoke it.\n        this.setTimeout(() => this.idleCallbackIds.delete(idleWrapFn.timerId) && idleWrapFn.now(), 100);\n\n        return decorateWrapFn(this, idleWrapFn, 'cancelIdleCallback');\n    }\n\n    /**\n     * Create a \"debounced\" function which will call on the \"leading edge\" of a timer period.\n     * When first invoked will call immediately, but invocations after that inside its buffer\n     * period will be rejected, and *one* invocation will be made after the buffer period has expired.\n     *\n     * This is useful for responding immediately to a first mousemove, but from then on, only\n     * calling the action function on a regular timer while the mouse continues to move.\n     *\n     * @param {Function|String} fn The function to call. If this is a string, it is looked up as a method on `this`\n     * instance (or `options.thisObj` instead, if provided).\n     * @param {Number|Object} options The milliseconds to wait after each execution before another execution takes place\n     * or a object containing options.\n     * @param {Object} [options.thisObj] `this` reference for the function.\n     * @param {Array} [options.appendArgs] The argument list to append to those passed to the function.\n     * @param {Function|String} [options.throttled] A function to call when the invocation is delayed due to buffer\n     * time not having expired. If this is a string, it is looked up as a method on `this` instance (or `options.thisObj`\n     * instead, if provided). When called, the same arguments are passed as would have been passed to `fn`, including\n     * any `options.appendArgs`.\n     * @internal\n     */\n    throttle(fn, options) {\n        let delay = options,\n            throttled;\n\n        if (options && typeof options !== 'number') {  // if (config object)\n            delay = options.delay;\n            throttled = options.throttled;\n        }\n        else {\n            options = null;\n        }\n\n        const\n            me = this,\n\n            throttleWrapFn = (...args) => {\n                if (throttleWrapFn.suspended) {\n                    return;\n                }\n\n                const\n                    { delay } = throttleWrapFn,\n                    elapsed = performance.now() - throttleWrapFn.lastCallTime;\n\n                throttleWrapFn.args = args;\n\n                // If it's been more then the delay period since we invoked, we can call it now.\n                // Setting delay=0 effectively disables the throttle (which is the goal)\n                if (throttleWrapFn.immediate || elapsed >= delay) {\n                    me.clearTimeout(throttleWrapFn.timerId);\n                    invoker();\n                }\n                else {\n                    // Kick off a timer for the requested period.\n                    if (!throttleWrapFn.isPending) {\n                        throttleWrapFn.timerId = me.setTimeout(invoker, delay - elapsed);\n                        throttleWrapFn.called = false;\n                    }\n\n                    if (throttled) {\n                        // Args have to be stored on the wrapFn for the invoker to pick them up:\n                        throttled.wrapFn.args = args;\n                        throttled();\n                    }\n                }\n            },\n\n            invoker = makeInvoker(me, fn, throttleWrapFn, options);\n\n        throttleWrapFn.delay = delay;\n\n        if (throttled) {\n            // Make an invoker for this callback to handle thisObj and typeof=string etc (pass a dud wrapFn):\n            throttled = makeInvoker(me, throttled, () => {}, options);\n        }\n\n        return decorateWrapFn(me, throttleWrapFn);\n    }\n\n    static setupDelayable(cls) {\n        cls.setupDelayableMethods(cls.delayable);\n    }\n\n    /**\n     * This method initializes the `delayable` methods on this class.\n     * @param {Object} delayable The `delayable` property.\n     * @param {Function} [cls] This parameter will be used internally to process static methods.\n     * @private\n     */\n    static setupDelayableMethods(delayable, cls = null) {\n        const\n            me = this,\n            statics = delayable.static,\n            target = cls || me.prototype;\n\n        if (statics) {\n            //<debug>\n            if (cls) {\n                throw new Error(`[${this.name}.delayable] Unexpected \"static\" property`);\n            }\n            //</debug>\n\n            // TODO me.setupDelayableMethods(statics, me);\n            delete delayable.static;\n        }\n\n        for (const name in delayable) {\n            let options = delayable[name];\n            const\n                implName = name + 'Now',\n                type = typeof options;\n\n            if (!target[implName]) {\n                // Only move foo() -> fooNow() if a base class hasn't done so already\n                target[implName] = target[name];\n            }\n\n            if (type === 'number') {\n                options = {\n                    type  : 'buffer',\n                    delay : options\n                };\n            }\n            else if (type === 'string') {\n                options = {\n                    type : options\n                };\n            }\n\n            //<debug>\n            if (cls) {\n                // TODO add support for static buffered methods (a bit of refactoring needed on the underlying timer\n                //  methods since they only work for instances).\n                continue;\n            }\n            //</debug>\n\n            // For instance methods, we place a getter on the prototype. When the method is first accessed from the\n            // prototype, we create an instance-specific version by calling this.buffer()/throttle() (based on the type\n            // desired) and set that as the instance-level property.\n            defineProperty(target, name, {\n                get() {\n                    const value = this[options.type]((...params) => {\n                        this[implName](...params);\n                    }, options);\n\n                    defineProperty(this, name, { value });\n\n                    return value;\n                }\n            });\n        }\n    }\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n","/**\n * @module Core/state/StateStorage\n */\n\n/**\n * Base class representing interface used by the {@link Core.state.StateProvider} to actually store the state data.\n * This class is not intended to be used directly.\n *\n * This class has an interface similar to the [Storage API](https://developer.mozilla.org/en-US/docs/Web/API/Storage).\n */\nexport default class StateStorage {\n    /**\n     * Returns an object with all stored keys and their values as its properties\n     * @member {Object}\n     */\n    get data() {\n        return Object.create(null);\n    }\n\n    /**\n     * Returns the stored keys as set by {@link #function-setItem}\n     * @member {String[]}\n     */\n    get keys() {\n        return [];\n    }\n\n    /**\n     * Remove all stored keys\n     */\n    clear() {}\n\n    /**\n     * Returns key value as set by {@link #function-setItem}\n     * @param {String} key\n     * @returns {*}\n     */\n    getItem(key) {\n        return null;\n    }\n\n    /**\n     * Removes the specified key\n     * @param {String} key\n     */\n    removeItem(key) {}\n\n    /**\n     * Sets the specified key to the given value\n     * @param {String} key\n     * @param {*} value The item value\n     */\n    setItem(key, value) {}\n}\n","import Base from '../Base.js';\nimport Delayable from '../mixin/Delayable.js';\nimport Events from '../mixin/Events.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\nimport StateStorage from './StateStorage.js';\n\n/**\n * @module Core/state/StateProvider\n */\n\nconst\n    empty = () => Object.create(null),\n    getKeys = (prefix, pos = 0) => {\n        const\n            keys = [],\n            count = localStorage.length;\n\n        for (let key, i = 0; i < count; ++i) {\n            key = localStorage.key(i);\n\n            key.startsWith(prefix) && keys.push(key.slice(pos));\n        }\n\n        return keys;\n    },\n    Local = class extends StateStorage {\n        constructor(stateProvider) {\n            super();\n            this.prefix = stateProvider.prefix || '';\n        }\n\n        get isLocal() {\n            return true;\n        }\n\n        get data() {\n            const\n                data = empty(),\n                keys = this.keys;\n\n            for (const key of keys) {\n                data[key] = this.getItem(key);\n            }\n\n            return data;\n        }\n\n        get keys() {\n            return getKeys(this.prefix, this.prefix.length);\n        }\n\n        clear() {\n            // It's important that we only clear our own StateProvider's keys, not all of localStorage. We get the\n            // full keys not the suffixes since we're just going to call removeItem() with them...\n            const keys = getKeys(this.prefix);\n\n            for (const key of keys) {\n                localStorage.removeItem(key);\n            }\n        }\n\n        getItem(key) {\n            const value = localStorage.getItem(this.prefix + key);\n\n            // We handle the JSON translation at this layer because the Memory storage does not do any such pickling\n            // of data but localStorage only handles strings\n            return (value === null) ? value : JSON.parse(value);\n        }\n\n        removeItem(key) {\n            return localStorage.removeItem(this.prefix + key);\n        }\n\n        setItem(key, value) {\n            return localStorage.setItem(this.prefix + key, JSON.stringify(value));\n        }\n    },\n    Memory = class extends StateStorage {\n        constructor() {\n            super();\n            this.clear();\n        }\n\n        get isMemory() {\n            return true;\n        }\n\n        get data() {\n            return ObjectHelper.clone(this._data);\n        }\n\n        get keys() {\n            return Object.keys(this._data);\n        }\n\n        clear() {\n            this._data = empty();\n        }\n\n        getItem(key) {\n            return (key in this._data) ? this._data[key] : null;\n        }\n\n        removeItem(key) {\n            delete this._data[key];\n        }\n\n        setItem(key, value) {\n            this._data[key] = value;\n        }\n    },\n    nullStorage = new StateStorage(),\n    storageTypes = {\n        local  : Local,\n        memory : Memory\n    };\n\n/**\n * Instances of this class are used to manage data storage for objects that use the {@link Core.mixin.State} mixin, i.e.\n * stateful components. When such components change their {@link Core.mixin.State#config-stateful} properties, they\n * notify the associated {@link Core.mixin.State#config-stateProvider}, which will save the changes after a short\n * delay (to allow multiple changes to coalesce into a single save operation).\n *\n * There are two (2) built-in types of storage supported by `StateProvider`:\n *\n *  - `local` : Stores data in the browser's `localStorage`. Because of this, all `StateProvider` instances share their\n *    state data if they have the same {@link #config-prefix}.\n *  - `memory` : Stores data in the provider's memory. Each instance has its own storage. This is typically used when\n *    the state data is saved to a backend server.\n *\n * ## Using `local` Storage\n *\n * The global `StateProvider` is typically to use `localStorage` for the page or application like so:\n *\n * ```javascript\n *  StateProvider.setup('local');\n * ```\n * With this provider in place, all {@link Core.mixin.State stateful components} will save their\n * {@link Core.mixin.State#property-state} to this provider by default.\n *\n * This is the most typical, and recommended, strategy for proving data to stateful components. This approach allows\n * various widgets on the page to simply declare their {@link Core.mixin.State#config-stateId} to participate in the\n * saving and restoring of application state.\n *\n * Because this storage type uses `localStorage`, the `StateProvider` applies a string prefix to isolate its data from\n * other users of `localStorage`. The default prefix is `'bryntum-state:'`, but this can be configured to a different\n * value. This could be desired, for example, to isolate state data from multiple pages or for version changes.\n *\n * ```javascript\n *  StateProvider.setup({\n *      storage : 'local',\n *      prefix  : 'myApp-v1:'\n *  });\n * ```\n *\n * ## Using `memory` Storage\n *\n * In some applications it may be desirable to save state to a server and restore it on other devices for the user.\n * Because state data is consumed synchronously, and server I/O is asynchronous, the `StateProvider` can be configured\n * to use `'memory'` storage and the actual state data can be loaded/saved by the application.\n *\n * Two factors are important to consider before deciding to save application state on the server (beyond the async\n * adaptation):\n *\n * - State properties are often more of a reflection of the user's device than they are application preferences\n *   and, therefore, may not apply well on other devices.\n * - Potentially undesired application state will not be cleared by clearing local browser user data (a common\n *   troubleshooting strategy) and will follow the user to other browsers (another common troubleshooting technique).\n *\n * The use this type of storage, the global `StateProvider` is configured like so:\n *\n * ```javascript\n *  StateProvider.setup('memory');\n * ```\n * In this scenario, application code would download the user's state and use {@link #property-data} to populate\n * the {@link #property-instance-static StateProvider.instance}. In this case, the {@link #event-save} event is used\n * to save the data back to the server when it changes.\n *\n * See [state](https://bryntum.com/products/grid/examples/state/) demo for a usage example.\n */\nexport default class StateProvider extends Base.mixin(Delayable, Events) {\n    static get $name() {\n        return 'StateProvider';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * The key prefix applied when using the `'local'` {@link #config-storage} type.\n             * @config {String}\n             * @default\n             */\n            prefix : 'bryntum-state:',\n\n            /**\n             * Storage instance\n             * @member {Core.state.StateStorage} storage\n             */\n            /**\n             * One of the following storage types:\n             *  - `local` : Stores data in the browser's `localStorage` using the {@link #config-prefix}.\n             *  - `memory` : Stores data in the provider's memory.\n             *\n             * @config {'local'|'memory'|Core.state.StateStorage}\n             * @default\n             */\n            storage : 'local'\n        };\n    }\n\n    static get delayable() {\n        /*\n            The StateProvider uses a delayed write to save stateful components in batches. To illustrate, consider the\n            \"collapsed\" config for a Panel that has been marked as \"stateful\":\n\n                App                         Stateful                      State\n                Code                        Component                    Provider\n                  :                             :                           :\n                  | .collapsed=true             :                           :\n                  |---------------------------->|                           :\n                  |         onConfigChange() +--|                           :\n                  |                          |  |                           :\n                  |                          +->|                           :\n                  |              saveState() +--|                           :\n                  |                          |  |                           :\n                  |                          +->| saveStateful()            :\n                  |                             |-------------------------->|\n                  |                             |                           | pendingSaves.push()\n                  |                             |                           |----+ writeStatefuls()\n                  | .collapsed=true             |<..........................:    :\n                  |<............................:                           :    :  (maybe other changes)\n                  :                             :                           :    :\n                  :                             :                           |<---+ (50 ms later)\n                  :                             :                           | writeStatefuls()\n                  :                             :       saveState({         |\n                  :                             :         immediate:true})  | <---------------+\n                  :                             |<--------------------------|                  \\\n                  :                             | setValue()                |                   \\\n                  :                             |-------------------------->|                    \\\n                  :                             |                           | .trigger('set')     ) one or more of these\n                  :                             |<..........................|                    /\n                  :                             |              saveState()  |                   /\n                  :                             :..........................>|                  /\n                  :                             :                           | <---------------+\n                  :                             :                           |\n                  :                             :                           | .trigger('save')\n                  :                             :                           |\n                  :                             :                           :....> writeStatefuls()\n                  :                             :                           :\n\n        */\n        return {\n            writeStatefuls : 50\n        };\n    }\n\n    /**\n     * The default {@link Core.mixin.State#config-stateProvider} for stateful objects.\n     * @property {Core.state.StateProvider}\n     */\n    static get instance() {\n        return this._instance;\n    }\n\n    static set instance(inst) {\n        if (inst == null) {\n            inst = nullProvider;\n        }\n        else {\n            if (typeof inst === 'string' || ObjectHelper.isClass(inst) || (inst instanceof StateStorage)) {\n                inst = {\n                    storage : inst\n                };\n            }\n\n            if (ObjectHelper.isObject(inst)) {\n                inst = new StateProvider(inst);\n            }\n        }\n\n        this._instance = inst;\n    }\n\n    /**\n     * Initializes the default `StateProvider` instance for the page. This method can be passed an instance or one of\n     * the following type aliases:\n     *\n     *  - `'local'` : use `localStorage` to store application state (most common)\n     *  - `'memory'` : holds application state in the `StateProvider` instance (used when state is saved to a server)\n     *\n     * Once the `StateProvider` is initialized, components that use {@link Core.mixin.State} and assign components a\n     * {@link Core.mixin.State#config-stateId} will use this default provider to automatically save and restore their\n     * state.\n     *\n     * @param {'local'|'memory'|Core.state.StateProvider} inst The state provider storage type ('local' or 'memory') or\n     * the `StateProvider` instance.\n     * @returns {Core.state.StateProvider}\n     */\n    static setup(inst) {\n        this.instance = inst;  // use smart setter\n\n        return this.instance;\n    }\n\n    doDestroy() {\n        self.writeStatefuls.flush();\n\n        super.doDestroy();\n    }\n\n    /**\n     * On read, this property returns all state data stored in the provider. On write, this property _adds_ all the\n     * given values to the state provider's data. To replace the data, call {@link #function-clear} before assigning\n     * this property. This is used to bulk populate this `StateProvider` with data for stateful components.\n     * @member {Object}\n     */\n    get data() {\n        return this.storage.data;\n    }\n\n    set data(data) {\n        if (!data) {\n            this.clear();\n        }\n        else {\n            for (const key in data) {\n                this.setValue(key, data[key]);\n            }\n        }\n    }\n\n    /**\n     * Clears all state date\n     * @returns {Core.state.StateProvider} this instance\n     */\n    clear() {\n        this.storage.clear();\n\n        return this;\n    }\n\n    changeStorage(storage) {\n        if (storage == null) {\n            storage = nullStorage;\n        }\n        else {\n            if (typeof storage === 'string') {\n                if (!storageTypes[storage]) {\n                    throw new Error(`Invalid storage type \"${storage}\" (expected one of: \"${\n                        Object.keys(storageTypes).join('\", \"')}\")`);\n                }\n\n                storage = storageTypes[storage];\n            }\n\n            if (ObjectHelper.isClass(storage)) {\n                storage = new storage(this);\n            }\n        }\n\n        return storage;\n    }\n\n    /**\n     * This method is called to schedule saving the given `stateful` object.\n     * @param {Core.mixin.State} stateful The stateful object to save.\n     * @param {Object} [options] An object of options that affect the state saving process.\n     * @param {String} [options.id] The key for the saved state.\n     * @param {Boolean} [options.immediate] Pass `true` to save the data synchronously instead of on a delay.\n     * @internal\n     */\n    saveStateful(stateful, options) {\n        (this.pendingSaves || (this.pendingSaves = [])).push([stateful, options]);\n\n        this.writeStatefuls();\n    }\n\n    /**\n     * A delayable method that flushes pending stateful objects.\n     * @private\n     */\n    writeStatefuls() {\n        const\n            me = this,\n            { pendingSaves } = me,\n            n = pendingSaves?.length,\n            stateIds = [],\n            saved = [];\n\n        me.pendingSaves = null;\n\n        if (n) {\n            for (let options, stateful, stateId, i = 0; i < n; ++i) {\n                [stateful, options] = pendingSaves[i];\n\n                if (!stateful.isDestroying && stateful.isSaveStatePending) {\n                    stateId = stateful.saveState({\n                        ...options,\n                        immediate : true\n                    });\n\n                    if (stateId) {\n                        stateIds.push(stateId);\n                        saved.push(stateful);\n                    }\n                }\n            }\n\n            if (stateIds.length) {\n                /**\n                 * Triggered after one or more stateful objects save their state to the state provider. This event can\n                 * be used to save state to a backend server.\n                 *\n                 * For example, to save the page's state object as a single object on the server:\n                 *\n                 * ```javascript\n                 *  StateProvider.instance.on({\n                 *      save() {\n                 *          const data = StateProvider.instance.data;\n                 *\n                 *          // TODO save \"data\" to server\n                 *      }\n                 *  });\n                 * ```\n                 *\n                 * Or, to save individual stateful components to the server:\n                 *\n                 * ```javascript\n                 *  StateProvider.instance.on({\n                 *      save({ stateIds }) {\n                 *          for (const stateId of stateIds) {\n                 *              const data = StateProvider.instance.getValue(stateId);\n                 *\n                 *              if (data == null) {\n                 *                  // TODO remove \"stateId\" from the server\n                 *              }\n                 *              else {\n                 *                  // TODO save new \"data\" for \"stateId\" to the server\n                 *              }\n                 *          }\n                 *      }\n                 *  });\n                 * ```\n                 *\n                 * Multi-page applications should probably include a page identifier in addition to the `stateId` to\n                 * prevent state from one page affecting other pages. If there are common components across all (or\n                 * many) pages, the `stateId` values would need to be assigned with all pages in mind.\n                 *\n                 * @event save\n                 * @param {Core.state.StateProvider} source The source of the event\n                 * @param {String[]} stateIds An array of `stateId` values that were saved to the state provider.\n                 * @param {Core.mixin.State[]} saved An array of stateful objects saved just saved to state provider\n                 * storage, in the same order as the `stateIds` array.\n                 */\n                me.trigger('save', {\n                    stateIds,\n                    saved\n                });\n            }\n        }\n    }\n\n    /**\n     * Returns the stored state given its `key`.\n     * @param {String} key The identifier of the state to return.\n     * @returns {Object}\n     */\n    getValue(key) {\n        this.writeStatefuls.flush();\n\n        return this.storage.getItem(key);\n    }\n\n    /**\n     * Stores the given state `value` under the specified `key`.\n     * @param {String} key The identifier of the state value.\n     * @param {Object} value The state value to set.\n     * @returns {Core.state.StateProvider} this instance\n     */\n    setValue(key, value) {\n        const\n            me = this,\n            { storage } = me,\n            was = me.getValue(key);\n\n        if (value != null) {\n            storage.setItem(key, value);\n\n            /**\n             * Triggered after an item is stored to the state provider.\n             * @event set\n             * @param {Core.state.StateProvider} source The source of the event\n             * @param {String} key The name of the stored item.\n             * @param {*} value The value of the stored item.\n             * @param {*} was The previous value of the stored item.\n             */\n            me.trigger('set', { key, value, was });\n        }\n        else if (was !== null) {\n            storage.removeItem(key);\n\n            /**\n             * Triggered after an item is removed from the state provider.\n             * @event remove\n             * @param {Core.state.StateProvider} source The source of the event\n             * @param {String} key The name of the removed item.\n             * @param {*} was The value of the removed item.\n             */\n            me.trigger('remove', { key, was });\n        }\n\n        return me;\n    }\n};\n\nconst nullProvider = new StateProvider({\n    storage : nullStorage\n});\n\nStateProvider._instance = nullProvider;\n","import Base from '../Base.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\nimport StringHelper from '../helper/StringHelper.js';\nimport StateProvider from '../state/StateProvider.js';\n\n//import Config from '../Config.js';\n\n/**\n * @module Core/mixin/State\n */\n\nconst\n    primitiveRe = /boolean|number|string/;\n\n/**\n * A mixin that handles accessing, saving, and restoring an object's persistent state.\n *\n * ## Using Stateful Components\n *\n * Instances of classes that use this mixin (i.e., \"stateful components\") have a {@link #property-state} property that\n * provides read/write access to their persistable state in the form of a simple object. These state objects can be\n * saved and restored under application control, e.g., using `localStorage`.\n *\n * This approach can be streamlined using a {@link Core.state.StateProvider} either by setting the\n * {@link Core.state.StateProvider#property-instance-static default state provider} or by using an instance-level\n * {@link #config-stateProvider} config.\n *\n * When using a state provider, stateful components with a {@link #config-stateId} or an\n * {@link Core.widget.Widget#config-id} will automatically save (see {@link #function-saveState}) and restore\n * (see {@link #function-loadState}) their `state`. This use of the `id` as a `stateId` can be disabled by assigning\n * the {@link #config-stateful} config to `false`. When using a `stateId` and a state provider, it is not necessary to\n * call the {@link #function-loadState} and {@link #function-saveState} methods directly.\n *\n * ### Simple vs Complex State\n *\n * Some stateful components (e.g., {@link Core.widget.Panel panels}) have state that can be described purely by their\n * config properties. For these components, the {@link #config-stateful} config can be used to control which config\n * properties to include in their persistent state. For example:\n *\n * ```javascript\n *  const mainPanel = new Panel({\n *      collapsible : true,\n *      stateId     : 'mainPanel',\n *      stateful    : ['collapsed']\n *  });\n * ```\n *\n * Other components have a complex state (e.g., `GridState`), and do not use the `stateful` config in this way. In all\n * other ways, however, these components behave the same as their simple state counterparts.\n *\n * ## Implementing Stateful Components\n *\n * Implementors of stateful components have two main design points to consider:\n *\n *  - Getting and setting their persistent {@link #property-state} object.\n *  - Initiating calls to {@link #function-saveState} when the object's persistent state changes.\n *\n * ### Persistent State\n *\n * For simple cases, the {@link #config-stateful} config can be set to the list of config property names that should be\n * saved:\n *\n * ```javascript\n *  class MyStatefulComponent extends Base.mixin(State) {\n *      static get configurable() {\n *          return {\n *              stateful : ['text', 'size']\n *          };\n *      }\n *  }\n * ```\n *\n * While the `stateful` config supports an object form (where keys with truthy values are the config names), this form\n * is typically reserved for configuring instances.\n *\n * Classes can choose to implement the {@link #function-getState} and {@link #function-applyState} methods to enhance\n * the `state` object with data not easily mapped to config properties. These method can call their `super` methods or\n * fully replace them.\n *\n * ```javascript\n *  class MyStatefulComponent extends Base.mixin(State) {\n *      getState() {\n *          return {\n *              text : this.text,\n *              size : this.size\n *          };\n *      }\n *\n *      applyState(state) {\n *          this.text = state.text;\n *          this.size = state.size;\n *      }\n *  }\n * ```\n *\n * ### Saving State\n *\n * When the persistent state of a stateful component changes, it must call {@link #function-saveState}. This method\n * schedules an update of the component's persistence {@link #property-state} with the appropriate\n * {@link #config-stateProvider}. When a config property named in the {@link #config-stateful} config changes, this\n * call will be made automatically. This means that even if a component replaces {@link #function-getState} and\n * {@link #function-applyState}, it can still be helpful to specify a value for the `stateful` config.\n *\n * ```javascript\n *  class MyStatefulComponent extends Base.mixin(State) {\n *      static get configurable() {\n *          return {\n *              stateful : ['text', 'size']\n *          };\n *      }\n *\n *      getState() { ... }\n *      applyState(state) { ... }\n *  }\n * ```\n *\n * Another way to ensure {@link #function-saveState} is called when necessary is to use {@link #config-statefulEvents}.\n *\n * ```javascript\n *  class MyStatefulComponent extends Base.mixin(State) {\n *      static get configurable() {\n *          return {\n *              statefulEvents : ['change', 'resize']\n *          };\n *      }\n *  }\n * ```\n *\n * @mixin\n */\nexport default Target => class State extends (Target || Base) {\n    static $name = 'State';\n\n    static configurable = {\n        /**\n         * This value can be one of the following:\n         *\n         * - `false` to not use an explicitly assigned {@link Core.widget.Widget#config-id} as the component's\n         * {@link #config-stateId} (this is only necessary when there is a {@link #config-stateProvider}).\n         * - An array of strings naming the config properties to save in the component's {@link #property-state}\n         * object.\n         * - An object whose truthy keys are the config properties to save in the component's {@link #property-state}\n         * object.\n         *\n         * These last two uses of the `stateful` config property do not apply to components that have a complex\n         * state, as described in the {@link Core.mixin.State State mixin documentation}.\n         *\n         * This config property is typically set by derived classes to a value including any config property that\n         * the user can affect via the user interface. For example, the {@link Core.widget.Panel#config-collapsed}\n         * config property is listed for a {@link Core.widget.Panel} since the user can toggle this config property\n         * using the {@link Core.widget.panel.PanelCollapser#config-tool collapse tool}.\n         *\n         * @config {Boolean|Object|String[]}\n         * @category State\n         */\n        stateful : null,\n\n        /**\n         * The events that, when fired by this component, should trigger it to save its state by calling\n         * {@link #function-saveState}.\n         *\n         * ```javascript\n         *  class MyStatefulComponent extends Base.mixin(State) {\n         *      static get configurable() {\n         *          return {\n         *              statefulEvents : [ 'change', 'resize' ]\n         *          };\n         *      }\n         *  }\n         * ```\n         * In the above example, {@link #function-saveState} will be called any time an instance of this class\n         * fires the `change` or `resize` event.\n         *\n         * This config is typically set by derived classes as a way to ensure {@link #function-saveState} is called\n         * whenever their persistent state changes.\n         *\n         * @config {Object|String[]}\n         * @category State\n         * @default\n         */\n        statefulEvents : {\n            $config : {\n                merge : 'classList'\n            },\n\n            value : ['stateChange']\n        },\n\n        /**\n         * The key to use when saving this object's state in the {@link #config-stateProvider}. If this config is\n         * not assigned, and {@link #config-stateful} is not set to `false`, the {@link Core.widget.Widget#config-id}\n         * (if explicitly specified) will be used as the `stateId`.\n         *\n         * If neither of these is given, the {@link #function-loadState} and {@link #function-saveState} methods\n         * will need to be called directly to make use of the `stateProvider`.\n         *\n         * For single page applications (SPA's), or multi-page applications (MPA's) that have common, stateful\n         * components on multiple pages, the `stateId` should be unique across all stateful components (similar to DOM\n         * element id's). MPA's that want each page to be isolated can more easily achieve that isolation using the\n         * {@link Core.state.StateProvider#config-prefix}.\n         *\n         * @config {String}\n         * @category State\n         */\n        stateId : null,\n\n        /**\n         * The `StateProvider` to use to save and restore this object's {@link #property-state}. By default, `state`\n         * will be saved using the {@link Core.state.StateProvider#property-instance-static default state provider}.\n         *\n         * This config is useful for multi-page applications that have a set of common components that want to share\n         * state across pages, as well as other components that want their state to be isolated. One of these groups\n         * of stateful components could be assigned an explicit `stateProvider` while the other group could use the\n         * default state provider.\n         *\n         * @config {Core.state.StateProvider}\n         * @category State\n         */\n        stateProvider : null\n    };\n\n    static prototypeProperties = {\n        statefulLoaded : false,\n\n        statefulSuspended : 0\n    };\n\n    afterConstruct() {\n        super.afterConstruct();\n\n        this.loadState();\n    }\n\n    finalizeInit() {\n        // For widgets, this should happen before rendering which happens in Widget.finalizeInit():\n        this.loadState();\n\n        super.finalizeInit();\n    }\n\n    /**\n     * Returns `true` if this instance implements the {@link Core.mixin.State} interface.\n     * @property {Boolean}\n     * @readonly\n     */\n    get isStateful() {\n        // TODO consider renaming this mixin to Core.mixin.Stateful since \"foo.isState\" doesn't look/feel right...\n        return true;\n    }\n\n    /**\n     * Returns `true` if this instance is ready to participate in state activities.\n     * @property {Boolean}\n     * @readonly\n     * @internal\n     */\n    get isStatefulActive() {\n        // If a widget is rendered via appendTo (for example), this happens inside construct(), before we are called\n        // in afterConstruct(). When the Widget uses Responsive mixin, that will trigger its initial responsive update.\n        // In short, when isResponsivePending, the Widget is Responsive _and_ has not yet determined its responsiveState.\n        // In this case we do NOT want to activate statefulness.\n        // Further, if we are updating configs from a responsiveUpdate, we do not want to save to state.\n        return !this.statefulSuspended && !this.isResponsivePending && !this.isResponsiveUpdating;\n    }\n\n    // state\n\n    /**\n     * Gets or sets a component's state\n     * @property {Object}\n     * @category State\n     */\n    get state() {\n        return this._state = this.getState();\n    }\n\n    set state(state) {\n        this._state = state;\n\n        if (state) {\n            this.applyState(state);\n        }\n    }\n\n    // statefulEvents\n\n    updateStatefulEvents(events) {\n        const\n            me        = this,\n            listeners = {\n                name    : 'statefulEvents',\n                thisObj : me\n            };\n\n        me.detachListeners(listeners.name);\n\n        if (events) {\n            if (typeof events === 'string') {\n                events = StringHelper.split(events);\n            }\n            else if (!Array.isArray(events)) {\n                events = ObjectHelper.getTruthyKeys(events);\n            }\n\n            if (events.length) {\n                for (const event of events) {\n                    listeners[event] = 'onStatefulEvent';\n                }\n\n                me.ion?.(listeners);\n            }\n        }\n    }\n\n    // statefulId\n\n    /**\n     * Returns the state key to use for this instance. This will be either the {@link #config-stateId} or the\n     * {@link Core.widget.Widget#config-id} (if explicitly specified and {@link #config-stateful} is not `false`).\n     * @property {String}\n     * @category State\n     * @internal\n     */\n    get statefulId() {\n        const\n            me = this,\n            { responsiveState } = me;\n\n        let statefulId = me.stateId;\n\n        if (statefulId == null && me.hasGeneratedId === false && me.stateful !== false) {\n            statefulId = me.id;\n        }\n\n        if (statefulId && responsiveState) {\n            statefulId = `${statefulId}[${responsiveState}]`;  // ex = 'foo[small]'\n        }\n\n        return statefulId;\n    }\n\n    // statefulness\n\n    /**\n     * Returns an object whose truthy keys are the config properties to include in this object's {@link #property-state}.\n     * @property {Object}\n     * @category State\n     * @readonly\n     * @private\n     */\n    get statefulness() {\n        const { stateful } = this;\n\n        return Array.isArray(stateful) ? ObjectHelper.createTruthyKeys(stateful) : stateful;\n    }\n\n    // stateProvider\n\n    get stateProvider() {\n        return this._stateProvider || StateProvider.instance;\n    }\n\n    //---------------------------------------------------------------------------------------------------------------\n    // Methods\n\n    /**\n     * Applies the given `state` to this instance.\n     *\n     * This method is not called directly, but is called when the {@link #property-state} property is assigned a value.\n     *\n     * This method is implemented by derived classes that have complex state which exceeds the simple list of config\n     * properties provided by {@link #config-stateful}. In these cases, the `super` method can be called to handle any\n     * config properties that are part of the complex state. The default implementation of this method will only assign\n     * those config properties listed in {@link #config-stateful} from the provided `state` object.\n     *\n     * @param {Object} state The state object to apply to this instance.\n     * @category State\n     */\n    applyState(state) {\n        state = this.pruneState(state);\n\n        if (state) {\n            this.setConfig(state);\n        }\n    }\n\n    /**\n     * Returns this object's state information.\n     *\n     * This method is not called directly, but is called to return the value of the {@link #property-state} property.\n     *\n     * This method is implemented by derived classes that have complex state which exceeds the simple list of config\n     * properties provided by {@link #config-stateful}. In these cases, the `super` method can be called to gather the\n     * config properties that are part of the complex state. The default implementation of this method will only copy\n     * those config properties listed in {@link #config-stateful} to the returned `state` object.\n     *\n     * @returns {Object}\n     * @category State\n     */\n    getState() {\n        const\n            me               = this,\n            { statefulness } = me;\n\n        let state = null,\n            key, value;\n\n        if (statefulness) {\n            state = {};\n\n            for (key in statefulness) {\n                if (statefulness[key]) {\n                    value = me[key];\n\n                    if (value?.isStateful) {\n                        value = value.state;  // e.g.: stateful : { store : true }\n                    }\n                    else if (value === me.initialConfig?.[key] || !primitiveRe.test(typeof value)) {\n                        continue;  // ignore configs that have their initial value or aren't primitives\n                    }\n\n                    state[key] = value;\n                }\n            }\n        }\n\n        return state;\n    }\n\n    /**\n     * Loads this object's state from its {@link #config-stateProvider} and applies it to its {@link #property-state}.\n     *\n     * This method only acts upon its first invocation for a given instance (unless `true` is passed for the `reload`\n     * parameter). This allows for flexibility in the timing of that call during the early stages of the instances'\n     * lifecycle. To reload the state after this time, manually assign the desired value to the {@link #property-state}\n     * property or call this method and pass `reload` as `true`.\n     *\n     * This method is called automatically during construction when a {@link #config-stateId} or (in some cases) an\n     * explicit {@link Core.widget.Widget#config-id} is provided.\n     *\n     * @param {String} [stateId] An overriding key to use instead of this object's {@link #config-stateId}.\n     * @param {Boolean} [reload=false] Pass `true` to load the state even if previously loaded.\n     * @category State\n     */\n    loadState(stateId, reload) {\n        if (typeof stateId === 'boolean') {\n            reload = stateId;\n            stateId = null;\n        }\n\n        const\n            me = this,\n            { statefulLoaded } = me;\n\n        if (me.isStatefulActive && (reload || !statefulLoaded)) {\n            const state = me.loadStatefulData(stateId || (stateId = me.statefulId));\n\n            if (!statefulLoaded && stateId) {\n                // whether we have state data or not, we attempted to load it, so track the defaults and load attempt\n                me.defaultState = me.state;\n                me.statefulLoaded = true;\n            }\n\n            if (state) {\n                me.state = state;\n            }\n        }\n    }\n\n    loadStatefulData(stateId) {\n        stateId = this.isStatefulActive ? stateId || this.statefulId : null;\n\n        return stateId && this.stateProvider?.getValue(stateId);\n    }\n\n    resetDefaultState() {\n        if (this.defaultState) {\n            this.state = this.defaultState;\n        }\n    }\n\n    resumeStateful(full = false) {\n        this.statefulSuspended = full ? 0 : Math.max(this.statefulSuspended - 1, 0);\n    }\n\n    /**\n     * Saves this object's state to its {@link #config-stateProvider}.\n     *\n     * When a {@link #config-stateId} or (in some cases) an explicit {@link Core.widget.Widget#config-id} is provided,\n     * this method will be called automatically any time a config property listed in {@link #config-stateful} changes or\n     * when a {@link #config-statefulEvents stateful event} is fired.\n     *\n     * Derived classes are responsible for calling this method whenever the persistent {@link #property-state} of the\n     * object changes.\n     *\n     * @param {Object|String} [options] Options that affect the state saving process or, if a string, the state `id`.\n     * @param {String} [options.id] The state id for the saved state (overrides {@link #config-stateId}).\n     * @param {Boolean} [options.immediate] Pass `true` to save the data synchronously instead of on a delay.\n     * @category State\n     */\n    saveState(options) {\n        if (typeof options === 'string') {\n            options = {\n                id : options\n            };\n        }\n        else {\n            options = options || {};\n        }\n\n        const\n            me                = this,\n            { stateProvider } = me,\n            statefulId        = options.id || (me.isStatefulActive && me.statefulId);\n\n        if (statefulId && stateProvider) {\n            if (options.immediate) {\n                me.isSaveStatePending = false;\n\n                stateProvider.setValue(statefulId, me.state);\n            }\n            else if (!me.isSaveStatePending) {\n                me.isSaveStatePending = true;\n\n                stateProvider.saveStateful(me, options);\n            }\n\n            return statefulId;\n        }\n    }\n\n    suspendStateful() {\n        ++this.statefulSuspended;\n    }\n\n    //---------------------------------------------------------------------------------------------------------------\n    // Private / Internal\n\n    onConfigChange({ name, value, was, config }) {\n        super.onConfigChange({ name, value, was, config });\n\n        if (!this.isConstructing && this.isStatefulActive && this.statefulId) {\n            const { stateful } = this;\n\n            if (Array.isArray(stateful) ? stateful.includes(name) : stateful?.[name]) {\n                this.saveState();\n            }\n        }\n    }\n\n    onStatefulEvent() {\n        if (!this.isConstructing) {\n            this.saveState();\n        }\n    }\n\n    /**\n     * Returns an object that copies the {@link #config-stateful} config properties from the provided `state` object.\n     *\n     * @param {Object} state A state object from which to copy stateful configs.\n     * @returns {Object}\n     * @category State\n     * @private\n     */\n    pruneState(state) {\n        const { statefulness } = this;\n\n        if (statefulness) {\n            const pruned = {};\n\n            for (const key in state) {\n                if (statefulness[key]) {\n                    pruned[key] = state[key];\n                }\n            }\n\n            state = pruned;\n        }\n\n        return state;\n    }\n\n    //---------------------------------------------------------------------------------------------------------------\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n","import Base from '../Base.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\n\n/**\n * @module Core/mixin/Identifiable\n */\n\nconst\n    // Id generation should be on a per page basis, not per module\n    idCounts     = ObjectHelper.getPathDefault(globalThis, 'bryntum.idCounts', Object.create(null)),\n    idTypes      = {\n        string : 1,\n        number : 1\n    };\n\n/**\n * A mixin which provides identifier services such as auto-creation of `id`s and registration and\n * lookup of instances by `id`.\n *\n * @mixin\n * @internal\n */\nexport default Target => class Identifiable extends (Target || Base) {\n    static get $name() {\n        return 'Identifiable';\n    }\n\n    static get declarable() {\n        return [\n            'identifiable'\n        ];\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * The id of this object.  If not specified one will be generated. Also used for lookups through the\n             * static `getById` of the class which mixes this in. An example being {@link Core.widget.Widget}.\n             *\n             * For a {@link Core.widget.Widget Widget}, this is assigned as the `id` of the DOM\n             * {@link Core.widget.Widget#config-element element} and must be unique across all elements\n             * in the page's `document`.\n             * @config {String}\n             * @category Common\n             */\n            id : ''\n        };\n    }\n\n    static setupIdentifiable(cls, meta) {\n        const { identifiable } = cls;\n\n        identifiable.idMap = Object.create(null);\n\n        Reflect.defineProperty(cls, 'identifiable', {\n            get() {\n                return identifiable;\n            }\n        });\n    }\n\n    doDestroy() {\n        this.constructor.unregisterInstance(this);\n\n        super.doDestroy();\n    }\n\n    changeId(id) {\n        return ((this.hasGeneratedId /* assignment */ = !id)) ? this.generateAutoId() : id;\n    }\n\n    updateId(id, oldId) {\n        const\n            me = this,\n            C = me.constructor;\n\n        oldId && C.unregisterInstance(me, oldId);\n\n        if (!me.hasGeneratedId || C.identifiable.registerGeneratedId !== false) {\n            C.registerInstance(me, id);\n        }\n    }\n\n    /**\n     * This method generates an id for this instance.\n     * @returns {String}\n     * @internal\n     */\n    generateAutoId() {\n        return this.constructor.generateId(`b-${this.$$name.toLowerCase()}-`);\n    }\n\n    static get all() {\n        // not documented here since type of array is not knowable... documented at mixin target class\n        return Object.values(this.identifiable.idMap);\n    }\n\n    /**\n     * Generate a new id, using an internal counter and a prefix.\n     * @param {String} prefix Id prefix\n     * @returns {String} Generated id\n     */\n    static generateId(prefix = 'generatedId') {\n        // This produces \"b-foo-1, b-foo-2, ...\" for each prefix independently of the others. In other words, it makes\n        // id's more stable since the counter is on a per-class basis.\n        return prefix + (idCounts[prefix] = (idCounts[prefix] || 0) + 1);\n    }\n\n    static registerInstance(instance, instanceId = instance.id) {\n        const { idMap } = this.identifiable;\n\n        // Code editor sets `disableThrow` to not get conflicts when loading the same module again\n        if (instanceId in idMap && !this.disableThrow) {\n            throw new Error('Id ' + instanceId + ' already in use');\n        }\n\n        idMap[instanceId] = instance;\n    }\n\n    /**\n     * Unregister Identifiable instance, normally done on destruction\n     * @param {Object} instance Object to unregister\n     * @param {String} id The id of the instance to unregister.\n     */\n    static unregisterInstance(instance, id = instance.id) {\n        const { idMap } = this.identifiable;\n\n        // ID may be passed, for example if the instance is destroyed and can no longer yield an id.\n        if (idTypes[typeof instance]) {\n            delete idMap[instance];\n        }\n        // Have to check for identity in case another instance by the same id has been created.\n        // Allow that to be overridden. Stores have always just evicted the previous owner of their IDs\n        else if (idMap[id] === instance) {\n            delete idMap[id];\n        }\n    }\n\n    static getById(id) {\n        const idMap = this.identifiable.idMap;\n\n        if (idMap) {\n            return idMap[id];\n        }\n    }\n\n    static get registeredInstances() {\n        const idMap = this.identifiable.idMap;\n\n        return idMap ? Object.values(idMap) : [];\n    }\n};\n","/**\n * @module Core/data/stm/mixin/ModelStm\n */\nimport Base from '../../../Base.js';\n\nconst\n    STM_PROP         = Symbol('STM_PROP'),\n    unrecordedFields = {\n        // This field's value is a by product of node insertion and must not be recorded here.\n        // It's the node insertion operation which is recorded by STM.\n        parentIndex : 1\n    };\n\n/**\n * Mixin making a model compatible with {@link Core/data/stm/StateTrackingManager}\n *\n * @mixin\n */\nexport default Target => class ModelStm extends (Target || Base) {\n    static get $name() {\n        return 'ModelStm';\n    }\n\n    static get defaultConfig() {\n        return {\n            stm : null\n        };\n    }\n\n    //<debug>\n    afterConstruct() {\n        super.afterConstruct();\n\n        console.assert(\n            typeof this.set == 'function',\n            \"Can't mix into this model class, no method `set` found!\"\n        );\n    }\n    //</debug>\n\n    joinStore(store) {\n        // No super on purpose, micro optimization of critical perf path\n        // super.joinStore && super.joinStore(store);\n\n        if (!this.stm) {\n            this.stm = store.stm;\n        }\n    }\n\n    unjoinStore(store) {\n        if (this.stm === store.stm) {\n            this.stm = null;\n        }\n\n        super.unjoinStore?.(store);\n    }\n\n    /**\n     * Reference to STM manager, if used\n     * @member {Core.data.stm.StateTrackingManager}\n     * @category Misc\n     */\n    get stm() {\n        return this[STM_PROP];\n    }\n\n    set stm(stm) {\n        this[STM_PROP] = stm;\n    }\n\n    // Hook for chronograph entity field accessors, for example; task.duration = 123.\n    // Triggers before setting the value.\n    beforeChronoFieldSet(fieldName, value) {\n        const\n            me       = this,\n            { stm  } = me,\n            result   = [];\n\n        if (!me.inSetting && stm?.enabled && !unrecordedFields[fieldName] && !me.constructor.nonPersistableFields[fieldName]) {\n            // Do not record changes of identifiers that are not fields\n            if (me.getFieldDefinition(fieldName)) {\n                const\n                    newDataCandidate = { [fieldName] : value },\n                    oldDataCandidate = { [fieldName] : me[fieldName] };\n\n                result.push([newDataCandidate, oldDataCandidate]);\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Overridden to collect initial data for the fields about to be changed.\n     * The method is called from within {@link Core/data/Model#function-set} method.\n     *\n     * @private\n     */\n    beforeSet(field, value, silent, fromRelationUpdate) {\n        const { stm } = this;\n\n        if (stm?.enabled && !unrecordedFields[field] && !this.constructor.nonPersistableFields[field]) {\n            const preResult = super.beforeSet?.(field, value, silent, fromRelationUpdate) || [];\n\n            let newDataCandidate, oldDataCandidate;\n\n            if (typeof field == 'object') {\n                [newDataCandidate, oldDataCandidate] = Object.keys(field).reduce(\n                    (data, fName) => {\n                        data[0][fName] = field[fName];\n                        data[1][fName] = this.get(fName);\n                        return data;\n                    },\n                    [{}, {}]\n                );\n            }\n            else {\n                newDataCandidate = { [field] : value };\n                oldDataCandidate = { [field] : this.get(field) };\n            }\n\n            preResult.push([newDataCandidate, oldDataCandidate]);\n\n            return preResult;\n        }\n\n        return [];\n    }\n\n    // Hook for chronograph entity field accessors, for example; task.duration = 123\n    // Triggers after setting the value.\n    afterChronoFieldSet(fieldName, value, beforeResult) {\n        if (beforeResult?.[0]) {\n            this.afterSet(fieldName, value, false, false, beforeResult, beforeResult[0][0], true);\n        }\n    }\n\n    shouldRecordFieldChange(fieldName, oldValue, newValue) {\n        const store = this.firstStore;\n\n        // By default, we do not record:\n        // - not persistable field changes\n        // - null vs undefined changes\n        // - same value changes, compared by reference (by value for dates)\n        // - \"id\" changes\n        // - \"parentId\" changes caused by parent record idChange\n        return !(\n            this.constructor.nonPersistableFields[fieldName] ||\n            (oldValue == null && newValue == null) ||\n            (oldValue === newValue) ||\n            ((oldValue instanceof Date) && (newValue instanceof Date) && oldValue.getTime() === newValue.getTime()) ||\n            fieldName === 'id' ||\n            (fieldName === 'parentId' && store && store.oldIdMap[oldValue] === store.getById(newValue))\n        );\n    }\n\n    /**\n     * Overridden to store initial data of the changed fields and to notify STM\n     * manager about the change action if anything has been changed in result.\n     *\n     * The method is called from within {@link Core/data/Model#function-set} method.\n     *\n     * @private\n     */\n    afterSet(field, value, silent, fromRelationUpdate, beforeResult, wasSet, isChronoFieldSet) {\n        const\n            { stm }              = this,\n            nonPersistableFields = this.constructor.nonPersistableFields;\n\n        if (stm?.isBase && stm.enabled && !unrecordedFields[field] && !nonPersistableFields[field]) {\n            const preResult = beforeResult.pop();\n\n            if (wasSet) {\n                let shouldRecord;\n\n                const\n                    [newDataCandidate, oldDataCandidate] = preResult,\n                    [newData, oldData]                   = Object.keys(wasSet).reduce(\n                        (data, fieldName) => {\n                            const\n                                newValue = newDataCandidate[fieldName],\n                                oldValue = oldDataCandidate[fieldName];\n\n                            if (this.shouldRecordFieldChange(fieldName, oldValue, newValue)) {\n                                shouldRecord       = true;\n                                data[0][fieldName] = newValue;\n                                data[1][fieldName] = oldValue;\n                            }\n\n                            return data;\n                        },\n                        [{}, {}]\n                    );\n\n                if (shouldRecord) {\n                    stm.onModelUpdate(this, newData, oldData, isChronoFieldSet);\n                }\n            }\n        }\n\n        // No super on purpose, micro optimization of critical perf path\n        // super.afterSet && super.afterSet(field, value, silent, fromRelationUpdate, beforeResult, wasSet);\n    }\n\n    /**\n     * Called from {@link Core/data/mixin/TreeNode#function-insertChild} to obtain inserted\n     * records initial parents and parent index, to be able to restore the state back upon undo.\n     *\n     * @param {Core.data.Model[]} childRecords\n     * @returns {Array} Array of results from this call and any of super calls if any.\n     *               This result is consumed by {@link #function-afterInsertChild} which pops\n     *               from the result array to take only results of this method call and leave\n     *               results from super calls untouched.\n     *\n     * @private\n     */\n    beforeInsertChild(childRecords) {\n        const\n            preResult = super.beforeInsertChild?.(childRecords) || [],\n            { stm }   = this;\n\n        if (stm?.enabled) {\n            preResult.push(\n                childRecords.reduce((result, childRecord) => {\n                    // We are interested only in records from the same root node.\n                    // Removing (which is done before insertion) of the records\n                    // from another root (and store) should\n                    // be handled by that store STM instance.\n                    if (childRecord.root === this.root) {\n                        result.set(childRecord, {\n                            parent : childRecord.parent,\n                            index  : childRecord.parent ? childRecord.parentIndex : undefined\n                        });\n                    }\n\n                    return result;\n                }, new Map())\n            );\n        }\n\n        return preResult;\n    }\n\n    /**\n     * Called from {@link Core/data/mixin/TreeNode#function-insertChild} to notify {@link Core/data/stm/StateTrackingManager}\n     * about children insertion. Provides it with all necessary context information collected\n     * in {@link #function-beforeInsertChild} required to undo/redo the action.\n     *\n     * @private\n     */\n    afterInsertChild(index, childRecords, beforeResult, inserted) {\n        const { stm } = this;\n\n        if (stm?.enabled) {\n            const context = beforeResult.pop();\n\n            if (inserted) {\n                stm.onModelInsertChild(this, index, inserted, context);\n            }\n        }\n\n        super.afterInsertChild?.(index, childRecords, beforeResult, inserted);\n    }\n\n    /**\n     * Called from {@link Core/data/mixin/TreeNode#function-removeChild} to obtain removed\n     * records initial parent index, to be able to restore the state back upon undo.\n     *\n     * @param {Core.data.Model[]} childRecords\n     * @param {Boolean} isMove\n     * @returns {Array} Array of results from this call and any of super calls if any.\n     *               This result is consumed by {@link #function-afterRemoveChild} which pops\n     *               from the result array to take only results of this method call and leave\n     *               results from super calls untouched.\n     *\n     * @private\n     */\n    beforeRemoveChild(childRecords, isMove) {\n        const\n            preResult = super.beforeRemoveChild ? super.beforeRemoveChild(childRecords, isMove) : [],\n            { stm }   = this;\n\n        // If it's move then InsertChildAction will handle this case\n        if (stm?.enabled && !isMove) {\n            // Child records we receive are guaranteed to be direct children\n            // of this node, see Core/data/mixin/TreeNode#removeChild method\n\n            // Here we interested in the original index for each child removed,\n            // we collect it and store for future use in RemoveChildAction\n            preResult.push(\n                childRecords.reduce((result, childRecord) => {\n                    result.set(childRecord, childRecord.parentIndex);\n                    return result;\n                }, new Map())\n            );\n        }\n\n        return preResult;\n    }\n\n    /**\n     * Called from {@link Core/data/mixin/TreeNode#function-removeChild} to notify {@link Core/data/stm/StateTrackingManager}\n     * about children removing. Provides it with all necessary context information collected\n     * in {@link #function-beforeRemoveChild} required to undo/redo the action.\n     *\n     * @private\n     */\n    afterRemoveChild(childRecords, beforeResult, isMove) {\n        const { stm } = this;\n\n        // If it's move then InsertChildAction will handle this case\n        if (stm?.enabled && !isMove) {\n            const context = beforeResult.pop();\n\n            if (childRecords && childRecords.length) {\n                stm.onModelRemoveChild(this, childRecords, context);\n            }\n        }\n\n        super.afterRemoveChild?.(childRecords, beforeResult, isMove);\n    }\n};\n","import Base from '../../Base.js';\nimport ArrayHelper from '../../helper/ArrayHelper.js';\n\n/**\n * @module Core/data/mixin/TreeNode\n */\n\nconst\n    defaultTraverseOptions = {\n        includeFilteredOutRecords : false\n    },\n    fixTraverseOptions     = options => {\n        options = options || false;\n\n        if (typeof options === 'boolean') {\n            options = {\n                includeFilteredOutRecords : options\n            };\n        }\n\n        return options || defaultTraverseOptions;\n    };\n\n/**\n * Mixin for Model with tree node related functionality. This class is mixed into the {@link Core/data/Model} class.\n *\n * ## Adding and removing child nodes\n *\n * ```javascript\n * const parent = store.getById(1),\n *\n * firstBorn = parent.insertChild({\n *     name : 'Child node'\n * }, parent.children[0]); // Insert a child at a specific place in the children array\n *\n * parent.removeChild(parent.children[0]); // Removes a child node\n * parent.appendChild({ name : 'New child node' }); // Appends a child node\n * ```\n *\n * @mixin\n */\nexport default Target => class TreeNode extends (Target || Base) {\n    static get $name() {\n        return 'TreeNode';\n    }\n\n    /**\n     * This static configuration option allows you to control whether an empty parent task should be converted into a\n     * leaf. Enable/disable it for a whole class:\n     *\n     * ```javascript\n     * Model.convertEmptyParentToLeaf = false;\n     * ```\n     *\n     * By specifying `true`, all empty parents will be considered leafs. Can also be assigned a configuration object\n     * with the following Boolean properties to customize the behaviour:\n     *\n     * ```javascript\n     * Model.convertEmptyParentToLeaf = {\n     *     onLoad   : false,\n     *     onRemove : true\n     * }\n     * ```\n     *\n     * @member {Boolean|{ onLoad : Boolean, onRemove : Boolean }} convertEmptyParentToLeaf\n     * @property {Boolean} onLoad Apply the transformation on load to any parents without children (`children : []`)\n     * @property {Boolean} onRemove Apply the transformation when all children have been removed from a parent\n     * @default false\n     * @static\n     * @category Parent & children\n     * */\n    static set convertEmptyParentToLeaf(value) {\n        if (value === true) {\n            value = {\n                onLoad   : true,\n                onRemove : true\n            };\n        }\n        else if (value === false) {\n            value = {\n                onLoad   : false,\n                onRemove : false\n            };\n        }\n        this._convertEmptyParentToLeaf = value;\n    }\n\n    static get convertEmptyParentToLeaf() {\n        return this._convertEmptyParentToLeaf || { onLoad : false, onRemove : false };\n    }\n\n    /**\n     * This is a read-only property providing access to the parent node.\n     * @member {Core.data.Model} parent\n     * @readonly\n     * @category Parent & children\n     */\n\n    /**\n     * This is a read-only field provided in server synchronization packets to specify\n     * which record id is the parent of the record.\n     * @readonly\n     * @field {String|Number|null} parentId\n     * @category Tree\n     */\n\n    /**\n     * This is a read-only field provided in server synchronization packets to specify\n     * which position the node takes in the parent's children array.\n     * This index is set on load and gets updated automatically after row reordering, sorting, etc.\n     * To save the order, need to persist the field on the server and when data is fetched to be loaded,\n     * need to sort by this field.\n     * @readonly\n     * @field {Number} parentIndex\n     * @category Tree\n     */\n\n    /**\n     * This is a read-only field provided in server synchronization packets to specify\n     * which position the node takes in the parent's ordered children array.\n     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering\n     * have no effect on it.\n     * @readonly\n     * @field {Number} orderedParentIndex\n     * @category Tree\n     */\n\n    ingestChildren(childRecord, stores = this.stores) {\n        const\n            { inProcessChildren, constructor : MyClass } = this,\n            store                                        = stores[0];\n\n        if (childRecord === true) {\n            if (inProcessChildren) {\n                return true;\n            }\n            return [];\n        }\n        if (childRecord) {\n            childRecord = ArrayHelper.asArray(childRecord);\n\n            const\n                len    = childRecord.length,\n                result = [];\n\n            for (let i = 0, child; i < len; i++) {\n                child = childRecord[i];\n                child = child.isModel ? child : (store ? store.createRecord(child, false, true) : new MyClass(child, null, null, true));\n                child = store ? store.processRecord(child) : child;\n                result.push(child);\n            }\n\n            if (this.children === true && store) {\n                const sorter = store.createSorterFn(store.sorters);\n                result.sort(sorter);\n            }\n            return result;\n        }\n    }\n\n    /**\n     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf\n     * tasks.\n     *\n     * Note, if the tree store loads data from a remote origin, make sure {@link Core/data/AjaxStore#config-readUrl}\n     * is specified, and optionally {@link Core/data/AjaxStore#config-parentIdParamName} is set, otherwise\n     * {@link Core/data/Store#function-loadChildren} has to be implemented.\n     *\n     * @field {Boolean|Object[]|Core.data.Model[]} children\n     * @category Parent & children\n     */\n\n    /**\n     * Array of sorted tree nodes but without a filter applied\n     * @member {Core.data.Model[]|null} unfilteredChildren\n     * @category Parent & children\n     * @private\n     */\n\n    /**\n     * Array of children unaffected by sorting and filtering, keeps original tree structure\n     * @member {Core.data.Model[]|null} orderedChildren\n     * @category Parent & children\n     * @private\n     */\n\n    /**\n     * Called during creation to also turn any children into Models joined to the same stores as this model\n     * @internal\n     * @category Parent & children\n     */\n    processChildren(stores = this.stores) {\n        const\n            me       = this,\n            { meta } = me;\n\n        me.inProcessChildren = true;\n\n        const children = me.ingestChildren(me.data[me.constructor.childrenField], stores);\n\n        if (children) {\n            const\n                { convertEmptyParentToLeaf } = me.constructor,\n                shouldConvert                = convertEmptyParentToLeaf === true || convertEmptyParentToLeaf.onLoad;\n\n            if (shouldConvert ? children.length : Array.isArray(children)) {\n                meta.isLeaf = false;\n                // We are processing a remote load\n                if (me.children === true) {\n                    me.children = [];\n                }\n                else if (children.length === 0) {\n                    me.children = children;\n                    return;\n                }\n                me.appendChild(children);\n            }\n            // Flagged for load on demand\n            else if (children === true) {\n                meta.isLeaf = false;\n                me.children = true;\n            }\n            // Empty child array, flag is leaf if configured to do so\n            else if (!me.isRoot) {\n                meta.isLeaf = me.constructor.convertEmptyParentToLeaf.onLoad;\n            }\n        }\n\n        me.inProcessChildren = false;\n    }\n\n    /**\n     * This method returns `true` if this record has all expanded ancestors and is therefore\n     * eligible for inclusion in a UI.\n     * @param {Core.data.Store} [store] Optional store, defaults to nodes first store\n     * @returns {Boolean}\n     * @readonly\n     * @category Parent & children\n     * @returns {Boolean}\n     */\n    ancestorsExpanded(store = this.firstStore) {\n        const { parent } = this;\n\n        return !parent || (parent.isExpanded(store) && parent.ancestorsExpanded(store));\n    }\n\n    /**\n     * Used by stores to assess the record's collapsed/expanded state in that store.\n     * @param {Core.data.Store} store\n     * @category Parent & children\n     * @returns {Boolean}\n     */\n    isExpanded(store = this.firstStore) {\n        const mapMeta = this.instanceMeta(store.id);\n\n        // Default initial expanded/collapsed state when in the store\n        // to the record's original expanded property.\n        if (!Object.prototype.hasOwnProperty.call(mapMeta, 'collapsed')) {\n            mapMeta.collapsed = !this.expanded;\n        }\n\n        return !mapMeta.collapsed;\n    }\n\n    // A read-only property. It provides the initial state upon load\n    // The UI's expanded/collapsed state is in the store's meta map.\n    get expanded() {\n        return this.data.expanded;\n    }\n\n    /**\n     * Depth in the tree at which this node exists. First visual level of nodes are at level 0, their direct children at\n     * level 1 and so on.\n     * @property {Number}\n     * @readonly\n     * @category Parent & children\n     */\n    get childLevel() {\n        let node = this,\n            ret  = -1;\n\n        while (node && !node.isRoot) {\n            ++ret;\n            node = node.parent;\n        }\n\n        return ret;\n    }\n\n    /**\n     * Is a leaf node in a tree structure?\n     * @property {Boolean}\n     * @readonly\n     * @category Parent & children\n     */\n    get isLeaf() {\n        return this.meta.isLeaf !== false && !this.isRoot;\n    }\n\n    /**\n     * Returns `true` if this node is the root of the tree\n     * @member {Boolean} isRoot\n     * @readonly\n     * @category Parent & children\n     */\n\n    /**\n     * Is a parent node in a tree structure?\n     * @property {Boolean}\n     * @readonly\n     * @category Parent & children\n     */\n    get isParent() {\n        return !this.isLeaf;\n    }\n\n    /**\n     * Returns true for parent nodes with children loaded (there might still be no children)\n     * @property {Boolean}\n     * @readonly\n     * @category Parent & children\n     */\n    get isLoaded() {\n        return this.isParent && Array.isArray(this.children);\n    }\n\n    /**\n     * Count all children (including sub-children) for a node (in its `firstStore´)\n     * @member {Number}\n     * @category Parent & children\n     */\n    get descendantCount() {\n        return this.getDescendantCount();\n    }\n\n    /**\n     * Count visible (expanded) children (including sub-children) for a node (in its `firstStore`)\n     * @member {Number}\n     * @category Parent & children\n     */\n    get visibleDescendantCount() {\n        return this.getDescendantCount(true);\n    }\n\n    /**\n     * Count visible (expanded)/all children for this node, optionally specifying for which store.\n     * @param {Boolean} [onlyVisible] Specify `true` to only count visible (expanded) children.\n     * @param {Core.data.Store} [store] A Store to which this node belongs\n     * @returns {Number}\n     * @category Parent & children\n     */\n    getDescendantCount(onlyVisible = false, store = this.firstStore) {\n        const children = this.children;\n\n        if (!children || !Array.isArray(children) || (onlyVisible && !this.isExpanded(store))) {\n            return 0;\n        }\n\n        return children.reduce((count, child) => count + child.getDescendantCount(onlyVisible), children.length);\n    }\n\n    /**\n     * Retrieve all children (by traversing sub nodes)\n     * @property {Core.data.Model[]}\n     * @category Parent & children\n     */\n    get allChildren() {\n        const children = this.children;\n        if (!children) return [];\n\n        return children.reduce((all, child) => {\n            all.push(child);\n\n            // push.apply is faster than push with array spread:\n            // https://jsperf.com/push-apply-vs-push-with-array-spread/1\n            all.push.apply(all, child.allChildren);\n            return all;\n        }, []);\n    }\n\n    /**\n     * Get the first child of this node\n     * @property {Core.data.Model}\n     * @readonly\n     * @category Parent & children\n     */\n    get firstChild() {\n        const children = this.children;\n\n        return (children?.length && children[0]) || null;\n    }\n\n    /**\n     * Get the last child of this node\n     * @property {Core.data.Model}\n     * @readonly\n     * @category Parent & children\n     */\n    get lastChild() {\n        const children = this.children;\n\n        return (children?.length && children[children.length - 1]) || null;\n    }\n\n    /**\n     * Get the previous sibling of this node\n     * @member {Core.data.Model} previousSibling\n     * @readonly\n     * @category Parent & children\n     */\n\n    /**\n     * Get the next sibling of this node\n     * @member {Core.data.Model} nextSibling\n     * @readonly\n     * @category Parent & children\n     */\n\n    /**\n     * Returns count of all preceding sibling nodes (including their children).\n     * @property {Number}\n     * @category Parent & children\n     */\n    get previousSiblingsTotalCount() {\n        let task  = this.previousSibling,\n            count = this.parentIndex;\n\n        while (task) {\n            count += task.descendantCount;\n            task = task.previousSibling;\n        }\n\n        return count;\n    }\n\n    get previousOrderedSibling() {\n        return this.parent?.orderedChildren[this.orderedParentIndex - 1];\n    }\n\n    get nextOrderedSibling() {\n        return this.parent?.orderedChildren[this.orderedParentIndex + 1];\n    }\n\n    get root() {\n        return this.parent?.root || this;\n    }\n\n    /**\n     * Reading this property returns the id of the parent node, if this record is a child of a node.\n     *\n     * Setting this property appends this record to the record with the passed id **in the same store that this record\n     * is already in**.\n     *\n     * Note that setting this property is **only valid if this record is already part of a tree store**.\n     *\n     * This is not intended for general use. This is for when a server responds to a record mutation and the server\n     * decides to move a record to a new parent. If a `parentId` property is passed in the response data for a record,\n     * that record will be moved.\n     *\n     * @property {Number|String|null}\n     * @category Parent & children\n     */\n    get parentId() {\n        return this.parent && !this.parent.isAutoRoot ? this.parent.id : null;\n    }\n\n    set parentId(parentId) {\n        const\n            me         = this,\n            { parent } = me,\n            newParent  = parentId === null ? me.firstStore.rootNode : me.firstStore.getById(parentId);\n\n        // Handle exact equality of parent.\n        // Also handle one being null and the other being undefined meaning no change.\n        if (!(newParent === parent || (!parent && !newParent))) {\n            // If we are batching, we do not trigger a change immediately.\n            // endBatch will set the field which will set the property again.\n            if (me.isBatchUpdating) {\n                me.meta.batchChanges.parentId = parentId;\n            }\n            else {\n                if (newParent) {\n                    newParent.appendChild(me);\n                }\n                else {\n                    me.parent.removeChild(me);\n                }\n            }\n        }\n    }\n\n    static set parentIdField(parentIdField) {\n        // Maintainer: the \"this\" references in here reference two different contexts.\n        // Outside of the property definition, it's the Model Class.\n        // In the getter and setter, it's the record instance.\n        this._parentIdField = parentIdField;\n\n        Object.defineProperty(this.prototype, parentIdField, {\n            set : function(parentId) {\n                // no arrow functions here, need `this` to change to instance\n                // noinspection JSPotentiallyInvalidUsageOfClassThis\n                this.parentId = parentId;\n            },\n            get : function() {\n                // no arrow functions here, need `this` to change to instance\n                // noinspection JSPotentiallyInvalidUsageOfClassThis\n                return this.parentId;\n            }\n        });\n    }\n\n    static get parentIdField() {\n        return this._parentIdField || 'parentId';\n    }\n\n    getChildren(options) {\n        let result;\n\n        if (options.includeFilteredOutRecords) {\n            result = this.unfilteredChildren || this.children;\n        }\n        else if (options.useOrderedTree) {\n            result = this.orderedChildren;\n        }\n        else {\n            result = this.children;\n        }\n\n        return result;\n    }\n\n    /**\n     * Traverses all child nodes recursively calling the passed function\n     * on a target node **before** iterating the child nodes.\n     * @param {Function} fn The function to call\n     * @param {Boolean} [skipSelf=false] True to ignore self\n     * @param {Object|Boolean} [options] A boolean for includeFilteredOutRecords, or an options object\n     * @param {Boolean} [options.includeFilteredOutRecords] True to also include filtered out records\n     * @param {Boolean} [options.useOrderedTree] True to traverse unsorted/unfiltered tree\n     * @category Parent & children\n     */\n    traverse(fn, skipSelf, options) {\n        options = fixTraverseOptions(options);\n\n        const\n            me       = this,\n            children = me.getChildren(options);\n\n        if (!skipSelf) {\n            fn.call(me, me);\n        }\n\n        // Simply testing whether there is non-zero children length\n        // is 10x faster than using this.isLoaded\n        for (let i = 0, l = children?.length; i < l; i++) {\n            children[i].traverse(fn, false, options);\n        }\n    }\n\n    /**\n     * Traverses all child nodes recursively calling the passed function\n     * on child nodes of a target **before** calling it it on the node.\n     * @param {Function} fn The function to call\n     * @param {Boolean} [skipSelf=false] True to skip this node in the traversal\n     * @param {Object|Boolean} [options] A boolean for includeFilteredOutRecords, or an options object\n     * @param {Boolean} [options.includeFilteredOutRecords] True to also include filtered out records\n     * @category Parent & children\n     */\n    traverseBefore(fn, skipSelf, options) {\n        options = fixTraverseOptions(options);\n\n        const\n            me       = this,\n            children = me.getChildren(options);\n\n        // Simply testing whether there is non-zero children length\n        // is 10x faster than using me.isLoaded\n        for (let i = 0, l = children?.length; i < l; i++) {\n            children[i].traverse(fn, false, options);\n        }\n\n        if (!skipSelf) {\n            fn.call(me, me);\n        }\n    }\n\n    /**\n     * Traverses child nodes recursively while fn returns true\n     * @param {Function} fn\n     * @param {Boolean} [skipSelf=false] True to skip this node in the traversal\n     * @param {Object|Boolean} [options] A boolean for includeFilteredOutRecords, or an options object\n     * @param {Boolean} [options.includeFilteredOutRecords] True to also include filtered out records\n     * @category Parent & children\n     * @returns {Boolean}\n     */\n    traverseWhile(fn, skipSelf, options) {\n        options = fixTraverseOptions(options);\n\n        const me = this;\n\n        let goOn = skipSelf || fn.call(me, me) !== false;\n\n        if (goOn) {\n            const children = me.getChildren(options);\n\n            // Simply testing whether there is non-zero children length\n            // is 10x faster than using me.isLoaded\n            if (children?.length) {\n                goOn = children.every(child => child.traverseWhile(fn, false, options));\n            }\n        }\n\n        return goOn;\n    }\n\n    /**\n     * Bubbles up from this node, calling the specified function with each node.\n     *\n     * @param {Function} fn The function to call for each node\n     * @param {Boolean} [skipSelf] True to skip this node in the traversal\n     * @category Parent & children\n     */\n    bubble(fn, skipSelf = false) {\n        let me = this;\n\n        if (!skipSelf) {\n            fn.call(me, me);\n        }\n\n        while (me.parent) {\n            me = me.parent;\n            fn.call(me, me);\n        }\n    }\n\n    /**\n     * Bubbles up from this node, calling the specified function with each node,\n     * while the function returns true.\n     *\n     * @param {Function} fn The function to call for each node\n     * @param {Boolean} [skipSelf] True to skip this node in the traversal\n     * @category Parent & children\n     * @returns {Boolean}\n     */\n    bubbleWhile(fn, skipSelf = false) {\n        let me   = this,\n            goOn = true;\n\n        if (!skipSelf) {\n            goOn = fn.call(me, me);\n        }\n\n        while (goOn && me.parent) {\n            me   = me.parent;\n            goOn = fn.call(me, me);\n        }\n\n        return goOn;\n    }\n\n    /**\n     * Checks if this model contains another model as one of it's descendants\n     *\n     * @param {Core.data.Model|String|Number} childOrId child node or id\n     * @param {Boolean} [skipSelf=false] True to ignore self in the traversal\n     * @category Parent & children\n     * @returns {Boolean}\n     */\n    contains(childOrId, skipSelf = false) {\n        if (childOrId && typeof childOrId === 'object') {\n            childOrId = childOrId.id;\n        }\n        return !this.traverseWhile(node => node.id != childOrId, skipSelf);\n    }\n\n    getTopParent(all) {\n        let result;\n\n        if (all) {\n            result = [];\n            this.bubbleWhile((t) => {\n                result.push(t);\n                return t.parent && !t.parent.isRoot;\n            });\n        }\n        else {\n            result = null;\n            this.bubbleWhile((t) => {\n                if (!t.parent) {\n                    result = t;\n                }\n                return t.parent && !t.parent.isRoot;\n            });\n        }\n\n        return result;\n    }\n\n    /**\n     * Append a child record(s) to any current children.\n     * @param {Core.data.Model|Core.data.Model[]|Object|Object[]} childRecord Array of records/data or a single\n     * record/data to append\n     * @param {Boolean} [silent] Pass `true` to not trigger events during append\n     * @returns {Core.data.Model|Core.data.Model[]|null}\n     * @category Parent & children\n     */\n    appendChild(childRecord, silent = false) {\n        return this.insertChild(childRecord, null, silent);\n    }\n\n    /**\n     * Insert a child record(s) before an existing child record.\n     * @param {Core.data.Model|Core.data.Model[]|Object|Object[]} childRecord Array of records/data or a single\n     * record/data to insert\n     * @param {Core.data.Model} [before] Optional record to insert before, leave out to append to the end\n     * @param {Boolean} [silent] Pass `true` to not trigger events during append\n     * @returns {Core.data.Model|Core.data.Model[]|null}\n     * @category Parent & children\n     */\n    insertChild(childRecord, before = null, silent = false, options = {}) {\n        const\n            me          = this,\n            returnArray = Array.isArray(childRecord);\n\n        childRecord = ArrayHelper.asArray(childRecord);\n\n        if (typeof before === 'number') {\n            before = me.children?.[before] ?? null;\n        }\n\n        if (!silent && !me.stores.every(s => s.trigger('beforeAdd', {\n            records : childRecord, parent : me\n        }) !== false)) {\n            return null;\n        }\n\n        // This call makes child record an array containing Models\n        childRecord = me.ingestChildren(childRecord);\n\n        // NOTE: see comment in Model::set() about before/in/after calls approach.\n        const\n            index     = before?.parentIndex ?? me.children?.length ?? 0,\n            preResult = me.beforeInsertChild?.(childRecord),\n            inserted  = me.internalAppendInsert(childRecord, before, silent, options);\n\n        // Turn into a parent if not already one\n        if (inserted.length) {\n            me.convertToParent(silent);\n        }\n\n        me.afterInsertChild?.(index, childRecord, preResult, inserted);\n\n        return (returnArray || !inserted) ? inserted : inserted[0];\n    }\n\n    /**\n     * Converts a leaf node to a parent node, assigning an empty array as its children\n     * @param {Boolean} [silent] Pass `true` to not trigger any event\n     * @category Parent & children\n     */\n    convertToParent(silent = false) {\n        const\n            me      = this,\n            wasLeaf = me.isLeaf;\n\n        me.meta.isLeaf = false;\n\n        if (!me.children) {\n            me.children = [];\n        }\n\n        // Signal a change event so that the UI updates, unless it is during load in which case StoreTree#onNodeAddChild\n        // will handle it\n        if (wasLeaf && !me.root.isLoading && !silent) {\n            me.signalNodeChanged({\n                isLeaf : {\n                    value    : false,\n                    oldValue : true\n                }\n            });\n        }\n    }\n\n    signalNodeChanged(changes) {\n        this.stores.forEach(s => {\n            s.trigger('update', { record : this, records : [this], changes });\n            s.trigger('change', { action : 'update', record : this, records : [this], changes });\n        });\n    }\n\n    tryInsertChild() {\n        return this.insertChild(...arguments);\n    }\n\n    internalAppendInsert(recordsToInsert, beforeRecord, silent, options) {\n        const\n            me                         = this,\n            { stores, root }           = me,\n            { firstStore : rootStore } = root,\n            { parentIdField }          = me.constructor,\n            parentId                   = me.isAutoRoot ? null : me.id,\n            oldParentIndices           = [],\n            isMove                     = {};\n\n        let isNoop, start, i, newRecordsCloned;\n\n        if (!root.isLoading) {\n            for (i = 0; i < recordsToInsert.length; i++) {\n                const newRecord = recordsToInsert[i];\n\n                // Store added should not be modified for adds\n                // caused by moving.\n                isMove[newRecord.id] = newRecord.root === root;\n                oldParentIndices[i]  = newRecord.parentIndex;\n            }\n        }\n\n        // The reference node must be one of our children. If not, fall back to an append.\n        if (beforeRecord && beforeRecord.parent !== me) {\n            beforeRecord = null;\n        }\n\n        // If the records starting at insertAt or (insertAt - 1), are the same sequence\n        // that we are being asked to add, this is a no-op.\n        if (me.children) {\n            const\n                children = me.children,\n                insertAt = beforeRecord ? beforeRecord.parentIndex : children.length;\n\n            if (children[start = insertAt] === recordsToInsert[0] || children[start = insertAt - 1] === recordsToInsert[0]) {\n                for (isNoop = true, i = 0; isNoop && i < recordsToInsert.length; i++) {\n                    if (recordsToInsert[i] !== children[start + i]) {\n                        isNoop = false;\n                    }\n                }\n            }\n        }\n\n        // Fulfill the contract of appendChild/insertChild even if we did not have to do anything.\n        // Callers must be able to correctly postprocess the returned value as an array.\n        if (isNoop) {\n            return recordsToInsert;\n        }\n\n        // Remove incoming child nodes from any current parent.\n        for (i = 0; i < recordsToInsert.length; i++) {\n            const\n                newRecord = recordsToInsert[i],\n                oldParent = newRecord.parent;\n\n            // Check if any descendants of the added node are moves.\n            if (rootStore && !root.isLoading) {\n                newRecord.traverse(r => {\n                    if (r.root === root) {\n                        isMove[r.id] = true;\n                    }\n                });\n            }\n\n            // If the new record has a parent, remove from that parent.\n            // This operation may be vetoed by listeners.\n            // If it is vetoed, then remove from the newRecords and do not\n            // set the parent property\n            if (oldParent?.removeChild(newRecord, isMove[newRecord.id], silent, { isInserting : true, ...options }) === false) {\n                if (!newRecordsCloned) {\n                    recordsToInsert  = recordsToInsert.slice();\n                    newRecordsCloned = true;\n                }\n                recordsToInsert.splice(i--, 1);\n            }\n            else {\n                newRecord.parent = me;\n\n                // Set parentId directly to data, record.parentId uses a getter to return record.parent.id\n                newRecord.data[parentIdField] = parentId;\n\n                if (oldParent) {\n                    newRecord.meta.oldParentId = oldParent.id;\n                }\n            }\n        }\n\n        // Still records to insert after beforeRemove listeners may have vetoed some\n        if (recordsToInsert.length) {\n            if (!Array.isArray(me.children)) {\n                me.children = [];\n            }\n\n            if (!Array.isArray(me.orderedChildren)) {\n                me.orderedChildren = [];\n            }\n\n            // Add to the children\n            const insertAt = me.addToChildren(beforeRecord, recordsToInsert, options);\n\n            stores.forEach(store => {\n                if (!store.isChained) {\n\n                    recordsToInsert.forEach(record => {\n                        // Initialize context for newly added records\n                        record.joinStore(store);\n                    });\n\n                    // Add to store (will also add any child records and trigger events)\n                    store.onNodeAddChild(me, recordsToInsert, insertAt, isMove, silent);\n\n                    recordsToInsert.forEach((record, i) => {\n                        // If we are in the recursive inclusion of children at construction\n                        // time, or in a store load, that must not be a data modification.\n                        // Otherwise, we have to signal a change\n                        if (record.meta.oldParentId != null && !(me.inProcessChildren || me.isLoading)) {\n                            const\n                                toSet                     = {\n                                    [parentIdField]                   : parentId,\n                                    [me.getDataSource('parentIndex')] : record.parentIndex\n                                },\n                                wasSet                    = {},\n                                { modified, oldParentId } = record.meta,\n                                oldParentIndex            = oldParentIndices[i];\n\n                            delete record.meta.oldParentId;\n\n                            if (me.id !== oldParentId) {\n                                wasSet[parentIdField] = {\n                                    value    : parentId,\n                                    oldValue : oldParentId\n                                };\n                            }\n\n                            if (record.parentIndex !== oldParentIndex) {\n                                wasSet.parentIndex = {\n                                    value    : record.parentIndex,\n                                    oldValue : oldParentIndex\n                                };\n                            }\n\n                            // Changing back to its original value\n                            if (modified[parentIdField] === me.id) {\n                                Reflect.deleteProperty(modified, parentIdField);\n                            }\n                            // Cache its original value\n                            else if (!(parentIdField in modified)) {\n                                modified[parentIdField] = oldParentId;\n                            }\n\n                            record.afterChange(toSet, wasSet);\n                        }\n                    });\n                }\n            });\n        }\n\n        return recordsToInsert;\n    }\n\n    /**\n     * Remove a child record. Only direct children of this node can be removed, others are ignored.\n     * @param {Core.data.Model|Core.data.Model[]} childRecords The record(s) to remove.\n     * @param {Boolean} [isMove] Pass `true` if the record is being moved within the same store.\n     * @param {Boolean} [silent] Pass `true` to not trigger events during remove.\n     * @privateparam {Object} [options]\n     * @privateparam {Object} [options.isInserting] `true` is passed when removal is part of record inserting (acted on by\n     * ModelLink)\n     * @returns {Core.data.Model[]} All records (including nested children) removed\n     * @category Parent & children\n     */\n    removeChild(childRecords, isMove = false, silent = false, options = {}) {\n        const\n            me                = this,\n            allRemovedRecords = [],\n            wasLeaf           = me.isLeaf,\n            {\n                children,\n                stores\n            }                 = me;\n\n        childRecords = ArrayHelper.asArray(childRecords);\n\n        childRecords = childRecords.filter(r => r.parent === me);\n\n        if (!silent) {\n            // Allow store listeners to veto the beforeRemove event\n            for (const store of stores) {\n                if (!store.isChained && store.trigger('beforeRemove', {\n                    parent : me, records : childRecords, isMove\n                }) === false) {\n                    return false;\n                }\n            }\n        }\n\n        const preResult = me.beforeRemoveChild?.(childRecords, isMove);\n\n        for (const childRecord of childRecords) {\n            const\n                { parentIdField } = childRecord.constructor,\n                { modified }      = childRecord.meta,\n                oldParentId       = childRecord.parent ? childRecord.parent.id : null;\n\n            // Cache its original value (not if it is a link, that would pollute original)\n            if (!(parentIdField in modified) && !childRecord.isLinked) {\n                modified[parentIdField] = oldParentId;\n            }\n\n            const index = me.removeFromChildren(childRecord, options);\n\n            stores.forEach(store => {\n                if (!store.isChained) {\n                    const { isRemoving } = store;\n                    // Raise the store isRemoving flag (it's set in Store#remove() but not when we call record#removeChild() directly)\n                    store.isRemoving = true;\n                    allRemovedRecords.push(...store.onNodeRemoveChild(me, [childRecord], index, { isMove, silent }));\n                    // restore the flag initial state\n                    store.isRemoving = isRemoving;\n                }\n            });\n\n            // No need to clean up the node parent info and other meta data in case it is \"move\" operation. The info will be updated after \"insert\" operation.\n            if (!isMove) {\n                childRecord.parent = childRecord.parentIndex = childRecord.unfilteredIndex = childRecord.nextSibling = childRecord.previousSibling = null;\n\n                // Reset parentId in data, record.parentId uses a getter to return record.parent.id\n                childRecord.data[parentIdField] = null;\n            }\n        }\n\n        // Convert emptied parent into leaf if configured to do so\n        if ((me.unfilteredChildren || children).length === 0 && me.constructor.convertEmptyParentToLeaf.onRemove && !me.isRoot) {\n            me.meta.isLeaf = true;\n        }\n\n        // If we've transitioned to being a leaf node, signal a change event\n        // so that the UI updates\n        if (me.isLeaf !== wasLeaf && !silent) {\n            me.stores.forEach(s => {\n                const changes = {\n                    isLeaf : {\n                        value    : true,\n                        oldValue : false\n                    }\n                };\n                s.trigger('update', { record : me, changes });\n                s.trigger('change', { action : 'update', record : me, changes });\n            });\n        }\n\n        me.afterRemoveChild?.(childRecords, preResult, isMove);\n\n        return allRemovedRecords;\n    }\n\n    clearParentId() {\n        const me = this;\n\n        Reflect.deleteProperty(me.data, me.parentIdField);\n        Reflect.deleteProperty(me.originalData, me.parentIdField);\n\n        if (me.meta.modified) {\n            Reflect.deleteProperty(me.meta.modified, me.parentIdField);\n        }\n    }\n\n    /**\n     * Replaces all child nodes with the new node set.\n     * @param {Core.data.Model|Core.data.Model[]} childRecords The new child record set.\n     * @returns {Core.data.Model[]}\n     * @category Parent & children\n     */\n    replaceChildren(newChildren) {\n        this.clearChildren();\n        this.data[this.constructor.childrenField] = newChildren;\n        this.processChildren();\n        return this.children;\n    }\n\n    /**\n     * Removes all child nodes from this node.\n     * @param {Boolean} [silent=false] Pass `true` to not fire Store events during the remove.\n     * @returns {Core.data.Model[]}\n     * @category Parent & children\n     */\n    clearChildren(silent = false) {\n        const\n            me         = this,\n            { stores } = me,\n            children   = me.unfilteredChildren || me.children;\n\n        me.children        = [];\n        me.orderedChildren = [];\n        if (children && children !== true) {\n            stores.forEach(store => {\n                if (!store.isChained) {\n                    // unfiltered:true to unregister children on filtered stores\n                    store.onNodeRemoveChild(me, children, 0, { unfiltered : true, silent });\n                }\n            });\n\n            // clear unfilteredChildren (must be after the above loop)\n            if (me.unfilteredChildren) {\n                me.unfilteredChildren = [];\n            }\n        }\n    }\n\n    /**\n     * Removes all records from the rootNode\n     * @private\n     */\n    clear() {\n        const\n            me         = this,\n            { stores } = me,\n            children   = me.children?.slice();\n\n        // Only allow for root node and if data is present\n        if (!me.isRoot || !children) {\n            return;\n        }\n\n        for (const store of stores) {\n            if (!store.isChained) {\n                if (store.trigger('beforeRemove', {\n                    parent : me, records : children, isMove : false, removingAll : true\n                }) === false) {\n                    return false;\n                }\n            }\n        }\n\n        me.children.length = 0;\n\n        if (me.unfilteredChildren) {\n            me.unfilteredChildren.length = 0;\n        }\n\n        stores.forEach(store => {\n            children.forEach(child => {\n                if (child.stores.includes(store)) {\n                    // this will drill down the child, unregistering whole branch\n                    child.unjoinStore(store);\n                }\n\n                child.parent = child.parentIndex = child.nextSibling = child.previousSibling = null;\n            });\n\n            store.storage.suspendEvents();\n            store.storage.clear();\n            store.storage.resumeEvents();\n\n            store.added.clear();\n            store.modified.clear();\n\n            store.trigger('removeAll');\n            store.trigger('change', { action : 'removeall' });\n        });\n    }\n\n    updateChildrenIndices(children, indexName, silent = false) {\n        let previousSibling = null;\n\n        for (let i = 0; i < children.length; i++) {\n            const\n                child    = children[i],\n                oldValue = child[indexName];\n\n            if (indexName === 'parentIndex' || indexName === 'orderedParentIndex') {\n                // Record should not be considered modified by initial assignment of parentIndex\n                if (oldValue === undefined || silent) {\n                    child.setData(indexName, i);\n                }\n                // Check to avoid pointless beforeUpdates from inSet\n                else if (oldValue !== i) {\n                    // Silent set, do not want to trigger events from updated indices\n                    child.set(indexName, i, true);\n                }\n            }\n            else {\n                child[indexName] = i;\n            }\n\n            if (indexName === 'parentIndex') {\n                child.previousSibling = previousSibling;\n                if (previousSibling) {\n                    previousSibling.nextSibling = child;\n                }\n                // Last child never has a nextSibling\n                if (i === children.length - 1) {\n                    child.nextSibling = null;\n                }\n                previousSibling = child;\n            }\n        }\n    }\n\n    addToChildren(beforeRecord, newRecords, options = {}) {\n        // children can be sorted and filtered\n        // unfilteredChildren can not be filtered\n        // orderedChildren can not be nor filtered nor sorted. it holds true tree hierarchy\n        const\n            me      = this,\n            configs = [\n                [me.children, 'parentIndex', beforeRecord],\n                [me.unfilteredChildren, 'unfilteredIndex', beforeRecord],\n                [me.orderedChildren, 'orderedParentIndex', options?.orderedBeforeNode ?? beforeRecord]\n            ];\n\n        for (const config of configs) {\n            const [children, indexName, beforeRecord] = config;\n\n            if (children) {\n                const index = beforeRecord ? beforeRecord[indexName] : children.length;\n\n                config.push(index);\n\n                children.splice(index, 0, ...newRecords);\n\n                if (!options?.[indexName]?.skip) {\n                    me.updateChildrenIndices(children, indexName);\n                }\n            }\n        }\n\n        // always return index of the record in the children array\n        return configs[0][3];\n    }\n\n    removeFromChildren(childRecord, options) {\n        const configs = [\n            [this.children, 'parentIndex'],\n            [this.unfilteredChildren, 'unfilteredIndex'],\n            [this.orderedChildren, 'orderedParentIndex']\n        ];\n\n        for (const config of configs) {\n            const [children, indexName] = config;\n\n            if (children) {\n                // parentIndex/orderedParentIndex might be changed when applying a remote changeset leading to\n                // record getting removed from the wrong position in the children array. Therefore, we should\n                // not rely on the index value, instead we query array itself\n                const index = children.indexOf(childRecord);\n\n                config.push(index);\n\n                if (index > -1) {\n                    children.splice(index, 1);\n                    if (!options?.[indexName]?.skip) {\n                        this.updateChildrenIndices(children, indexName);\n                    }\n                }\n            }\n        }\n\n        // always return index of the record in the children array\n        return configs[0][2];\n    }\n\n    /**\n     * Iterates orderedChildren array to apply sorting order according to `orderedParentIndex`.\n     * Normally sorting is not required because order is maintained on append/insert. But is useful\n     * when pasting number of records to restore their original order.\n     * @param {Boolean} [deep=true] True to dive into children. False to sort own children.\n     * @param {Boolean} [usePreviousOrder=false] Enable to use previous value of `orderedParentIndex`.\n     * @returns {Set} Returns Set of moved nodes which require WBS update\n     * @private\n     */\n    sortOrderedChildren(deep = true, usePreviousOrder = false) {\n        // Collect moved nodes, we need to recalculate WBS on them.\n        const movedNodes = [];\n\n        if (!this.isLeaf) {\n            this.orderedChildren.sort((a, b) => {\n                if (usePreviousOrder) {\n                    const\n                        aPrevIndex = a.meta.modified.orderedParentIndex ?? a.orderedParentIndex,\n                        bPrevIndex = b.meta.modified.orderedParentIndex ?? b.orderedParentIndex,\n                        result     = aPrevIndex - bPrevIndex;\n\n                    if (result !== 0) {\n                        movedNodes.push(a);\n                        movedNodes.push(b);\n                    }\n\n                    return result;\n                }\n                else {\n                    return a.orderedParentIndex - b.orderedParentIndex;\n                }\n            });\n\n            if (deep) {\n                this.orderedChildren.forEach(child => {\n                    movedNodes.push(...child.sortOrderedChildren(deep, usePreviousOrder));\n                });\n            }\n\n            this.updateChildrenIndices(this.orderedChildren, 'orderedParentIndex', true);\n        }\n\n        return new Set(movedNodes);\n    }\n\n};\n","import Base from '../../Base.js';\nimport ArrayHelper from '../../helper/ArrayHelper.js';\nimport StringHelper from '../../helper/StringHelper.js';\n\n/**\n * @module Core/data/mixin/ModelLink\n */\n\nconst\n    // Properties set on the proxy instead of on the original\n    propertyOverrides = {\n        id              : 1,\n        stores          : 1,\n        parentIndex     : 1,\n        parent          : 1,\n        previousSibling : 1,\n        nextSibling     : 1,\n        unfilteredIndex : 1\n    },\n    proxyConfig = {\n        get(target, prop) {\n            // Proxy record has some additional meta\n            if (prop === 'proxyMeta') {\n                return this.proxyMeta;\n            }\n\n            // Accessing constructor in functions should lead to original records constructor\n            // (for static fns etc.)\n            if (prop === 'constructor') {\n                return target.constructor;\n            }\n\n            // Override setData / set to reroute parentIndex updates\n            if (prop === 'setData') {\n                return this.setDataOverride;\n            }\n            if (prop === 'set') {\n                return this.setOverride;\n            }\n\n            // Special properties not shared with the original record\n            if (propertyOverrides[prop]) {\n                return this.proxyMeta.data[prop];\n            }\n\n            // Everything else is scoped to the proxy record\n            return Reflect.get(target, prop, this.proxyRecord);\n        },\n\n        set(target, prop, value) {\n            // Special properties not shared with the original record\n            if (propertyOverrides[prop]) {\n                this.proxyMeta.data[prop] = value;\n            }\n            // Everything else is relayed to the original record\n            else {\n                target[prop] = value;\n            }\n\n            return true;\n        },\n\n        // Override setData & set to reroute parentIndex updates\n        setDataOverride(toSet, value) {\n            if (toSet === 'parentIndex') {\n                this.proxyMeta.data.parentIndex = value;\n            }\n            else {\n                this.proxyMeta.originalRecord.setData(toSet, value);\n            }\n        },\n        setOverride(field, value, ...args) {\n            if (field === 'parentIndex') {\n                this.proxyMeta.data.parentIndex = value;\n            }\n            else {\n                this.proxyMeta.originalRecord.set(field, value, ...args);\n            }\n        }\n\n    };\n\n/**\n * Mixin that allows creating proxy records linked to an original record. See {@link #function-link} for more\n * information.\n *\n * <div class=\"note\">Note that not all UI features support linked records</div>\n *\n * @mixin\n */\nexport default Target => class ModelLink extends (Target || Base) {\n    static $name = 'ModelLink';\n\n    /**\n     * Creates a proxy record (using native Proxy) linked to this record (the original). The proxy records shares most\n     * data with the original, except for its `id` (which is always generated), and ordering fields such as\n     * `parentIndex` and `parentId` etc.\n     *\n     * Any change to the proxy record will be reflected on the original, and vice versa. A proxy record is not meant to\n     * be persisted, only the original record should be persisted. Thus, proxy records are not added to stores change\n     * tracking (added, modified and removed records).\n     *\n     * Removing the original record removes all proxies.\n     *\n     * Creating a proxy record allows a Store to seemingly contain the record multiple times, something that is\n     * otherwise not possible. It also allows a record to be used in both a tree store and in a flat store.\n     *\n     * <div class=\"note\">Note that not all UI features support linked records</div>\n     *\n     * @returns {Proxy} Proxy record linked to the original record\n     * @category Misc\n     */\n    link() {\n        // Calling link on a link creates another link of the original record\n        if (this.isLinked) {\n            return this.$original.link();\n        }\n\n        const\n            me           = this,\n            useConfig    =  {\n                ...proxyConfig,\n                // Data not shared with the original record\n                proxyMeta : {\n                    originalRecord : me,\n                    data           : {\n                        id     : `${me.id}_link_${StringHelper.generateUUID()}`,\n                        stores : []\n                    }\n                }\n            },\n            proxyRecord = new Proxy(me, useConfig);\n\n        useConfig.proxyRecord = proxyRecord;\n\n        // Original record keeps tracks of all proxies\n        (me.meta.linkedRecords || (me.meta.linkedRecords = [])).push(proxyRecord);\n\n        return proxyRecord;\n    }\n\n    /**\n     * Is this record linked to another record?\n     * @member {Boolean}\n     * @readonly\n     * @category Misc\n     */\n    get isLinked() {\n        return Boolean(this.proxyMeta?.originalRecord);\n    }\n\n    /**\n     * Are other records linked to this record?\n     * @member {Boolean}\n     * @readonly\n     * @category Misc\n     */\n    get hasLinks() {\n        return Boolean(!this.proxyMeta && this.$links.length);\n    }\n\n    // Logic to remove a link shared between removing in a flat store and a tree store\n    removeLink(link, records = null, silent = false) {\n        // Removing original, also remove linked records\n        if (link.hasLinks) {\n            for (const linked of link.$links.slice()) {\n                // Flat\n                if (records) {\n                    ArrayHelper.include(records, linked);\n                }\n                // Tree\n                else {\n                    linked.remove(silent);\n                }\n            }\n        }\n        // Removing linked record, remove from originals link tracking\n        else if (link.isLinked) {\n            ArrayHelper.remove(link.$original.$links, link);\n        }\n    }\n\n    // Overrides beforeRemove in Model, to remove all linked records when original record is removed.\n    beforeRemove(records) {\n        this.removeLink(this, records);\n    }\n\n    // Overrides removeChild in TreeNode, to remove the original node and all linked nodes when either a linked or\n    // original node is removed.\n    removeChild(childRecords, isMove, silent, options) {\n        if (!options?.isInserting) {\n            childRecords = ArrayHelper.asArray(childRecords);\n\n            for (const child of childRecords) {\n                this.removeLink(child, null, silent);\n            }\n        }\n\n        return super.removeChild(childRecords, isMove, silent, options);\n    }\n\n    // Convenience getter for code keying by id that needs to work with both link and original\n    get $originalId() {\n        return this.$original.id;\n    }\n\n    // Convenience getter to retrieve linked records\n    get $links() {\n        return this.meta.linkedRecords ?? [];\n    }\n};\n","import Base from '../Base.js';\nimport StringHelper from '../helper/StringHelper.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\n\n/**\n * @module Core/mixin/Factoryable\n */\n\nconst\n    { defineProperty } = Reflect,\n    ownerSymbol        = Symbol('owner'),\n    typeSplitRe        = /[\\s,]+/;\n\n/**\n * This mixin is applied to base classes of a type that will be dynamically created by type name aliases.\n * ```\n *  class Layout extends Base.mixin(Factoryable) {\n *      static get factoryable() {\n *          return {\n *              defaultType : 'default'\n *          };\n *      }\n *\n *      static get type() {\n *          return 'default';\n *      }\n *  }\n *\n *  class Fit extends Layout {\n *      static get type() {\n *          return 'fit';\n *      }\n *  }\n * ```\n *\n * Once a family of classes has been defined, instances are created using the `create()` method:\n * ```\n *  const layout = Layout.create(config);\n * ```\n *\n * In the above example, `config` can be a type name (such as \"fit\") or a config object with a `type` property that\n * holds the type name.\n *\n * Factories can also extend other factories. For example, one factory creates objects that are useful across a wide\n * range of consumers, and a second factory creates objects for a more specialized consumer. If that specialized\n * consumer can also consume objects from the first factory, then the second factory can specify this relationship:\n * ```\n *  class General extends Base.mixin(Factoryable) {\n *      ...\n *  }\n *\n *  class Specialized extends Base.mixin(Factoryable) {\n *      static get factoryable() {\n *          return {\n *              extends : General,\n *              ...\n *          };\n *      }\n *  }\n * ```\n * The `extends` factoryable option can be either a class that mixes in `Factoryable` or an array of such classes.\n * @mixin\n * @internal\n */\nexport default Target => class Factoryable extends (Target || Base) {\n    static get $name() {\n        return 'Factoryable';\n    }\n\n    static get declarable() {\n        return [\n            /**\n             * This property getter returns options that control the factory process. This property getter must be\n             * defined by the class that mixes in `Factoryable` in order to initialize the factory properly.\n             * ```\n             *  static get factoryable() {\n             *      return {\n             *          defaultType : 'default'\n             *      };\n             *  }\n             * ```\n             * If there are no special options to provide, this method can return nothing (`undefined`):\n             * ```\n             *  static get factoryable() {\n             *      // initialize the factory with all default options\n             *  }\n             * ```\n             * @static\n             * @member {Object} factoryable\n             * @property {Boolean} [factoryable.caseless=true] Specify `false` to use case-sensitive type names. The\n             * default is to ignore case.\n             * @property {String} [factoryable.defaultType=null] The default type to create when a config object has\n             * no `typeKey` property.\n             * @property {Function|Function[]} [factoryable.extends] One or more classes that mix in `Factoryable` to\n             * use for resolving type names when a type name is not found in this factory.\n             * @property {String} [factoryable.typeKey='type'] The name of the property in a config object that holds\n             * the type name.\n             * @internal\n             */\n            'factoryable',\n\n            /**\n             * One or more additional type name aliases for this class. This can be useful for renaming and maintaining\n             * a previous type name.\n             * ```\n             *  class Fit extends Layout {\n             *      static get type() {\n             *          return 'fit';\n             *      }\n             *\n             *      static get alias() {\n             *          return 'fill';  // deprecated type name (now known as 'fit')\n             *      }\n             *  }\n             * ```\n             * @static\n             * @member {String|String[]} alias\n             * @internal\n             */\n            'alias',\n\n            /**\n             * The (canonical) type name for this class by which instances can be created using the static\n             * {@link #function-create-static create()} method.\n             * @static\n             * @member {String} type\n             */\n            'type'\n        ];\n    }\n\n    /**\n     * Registers a class (`cls`) associated with the given `type`.\n     * @param {String|String[]} type A string, array of strings or a comma-separated string containing the type names\n     * for the specified `cls` class.\n     * @param {Function} cls The class (constructor function)\n     * @param {Boolean} [replace] Pass `true` to overwrite existing registered types. Otherwise, this method will throw\n     * an exception if the `type` is already registered with this factory.\n     * @internal\n     */\n    static register(type, cls, replace = globalThis.__BRYNTUM_EXAMPLE) {\n        // `replace` default value is set to true while we are run inside a bryntum demo where code editor changes might\n        // lead to same widget class being registered over and over.\n        const\n            { factoryable }        = this.initClass(),\n            { caseless, registry } = factoryable,\n            types                  = StringHelper.split(type, typeSplitRe);  // if type is a string[] it will just be returned\n\n        for (let lower, name, i = 0; i < types.length; ++i) {\n            name = types[i];\n            lower = caseless ? name.toLowerCase() : name;\n\n            if (!replace && lower in registry) {\n                throw new Error(`Type \"${name}\" already registered with ${factoryable.class.name} factory`);\n            }\n\n            // Ensure class being registered is initialized. (initClass returns the class)\n            registry[name] = registry[lower] = cls.initClass();\n        }\n    }\n\n    /**\n     * Returns `true` if the passed instance is of the passed type or of a derived class.\n     * @param {Object} instance The object to test.\n     * @param {String} type The type to test against\n     */\n    static isA(instance, type) {\n        return this.isType(instance, type, true);\n    }\n\n    /**\n     * Returns `true` if the passed instance is of the passed type.\n     * @param {Object} instance The object to test.\n     * @param {String} type The type to test against\n     * @param {Boolean} [deep] Pass `true` to return `true` if the class is a subclass of the passed type.\n     */\n    static isType(instance, type, deep) {\n        const\n            { factoryable }        = this,\n            { caseless, registry } = factoryable,\n            typeCls                = registry[caseless ? type.toLowerCase() : type];\n\n        // If the type to be tested against maps to a class, see if the instance is an instanceof that\n        if (typeCls) {\n            if (deep) {\n                return instance instanceof typeCls;\n            }\n\n            return instance.constructor === typeCls;\n        }\n\n        return false;\n    }\n\n    static setupAlias(cls) {\n        cls.register(cls.alias, cls);\n    }\n\n    static setupFactoryable(cls, meta) {\n        const superClass = meta.super.class;\n\n        let { factoryable } = cls;\n\n        factoryable = {\n            caseless    : true,\n            defaultType : null,\n            extends     : superClass.factoryable ? [superClass] : null,\n            typeKey     : 'type',\n\n            ...factoryable\n        };\n\n        factoryable.class = cls;\n        factoryable.registry = Object.create(null);\n\n        if (factoryable.extends && !Array.isArray(factoryable.extends)) {\n            factoryable.extends = [factoryable.extends];\n        }\n\n        // Replace the class/static getter with a new one that returns the complete factoryable object:\n        defineProperty(cls, 'factoryable', {\n            get() {\n                return factoryable;\n            }\n        });\n    }\n\n    static setupType(cls, meta) {\n        const { type } = cls;\n\n        cls.register(type, cls, meta.replaceType);\n\n        // Copy the static type property onto the prototype as a readonly property:\n        defineProperty(cls.prototype, 'type', {\n            value : type\n        });\n    }\n\n    /**\n     * Creates an instance from this factory, given the type name or a config object.\n     * @param {String|Object} config The type name string or config object.\n     * @param {String|Function|Object} [options] Creation options (for details see {@link #function-reconfigure-static}).\n     * @returns {Object}\n     */\n    static create(config, options) {\n        return this.reconfigure(null, config, options);\n    }\n\n    /**\n     * Reconfigures an optional existing instance based on the provided config and returns the correctly configured\n     * instance. This will be the `existingInstance` if the `config` does not specify a different type.\n     *\n     * If `config` is `null` (or simply falsy), this method will destroy the `existingInstance` (if any) and return\n     * `null`.\n     *\n     * If there is no `existingInstance`, the config must specify a type. That is, it must be a string (the type name)\n     * or an object containing a `type` property, the `defaultType` must be provided or the factory itself must have\n     * a `defaultType` specified (see {@link #property-factoryable-static}).\n     *\n     * When an `existingInstance` is provided and a type is specified, the instance will be reconfigured via `setConfig`\n     * if it is of that type. Otherwise, the `existingInstance` is destroyed (if it is owned by the `options.owner`)\n     * and a new instance of the correct type is created.\n     *\n     * @param {Object} existingInstance The instance to reconfigure. This can be `null`.\n     *\n     * @param {String|Object} config The type name string or config object.\n     *\n     * @param {String|Function|Object} [options] Additional options to control the reconfiguration process. If this\n     * value is a string or a class constructor, it treated as `options.type`. If this value is a class instance, it\n     * is used as the `options.owner`. If this is a function, it is treated as `options.setup`. NOTE: functions declared\n     * using the `function` keyword are equivalent to class constructors. Use an arrow function or a class method to\n     * avoid this when a `setup` function is intended.\n     *\n     * @param {String|Function} [options.type] The default type to use if the `config` object does not specify a type.\n     *\n     * @param {Object} [options.owner] The owner of any created instances. If the `existingInstance` is being replaced,\n     * this value determines if the instance will be destroyed.\n     *\n     * @param {Object} [options.defaults] A config object of default values to use when creating a new instance.\n     *\n     * @param {Function|String} [options.setup] A function or the name of a method (on the `options.owner`) to call\n     * prior to creating a new instance. It is passed the config object that will be used to create the instance. If a\n     * truthy value is returned, that value is passed to the constructor instead of the provided config object.\n     *\n     * @param {Function|String} [options.transform] A function or the name of a method (on the `options.owner`) to call\n     * with the raw config object prior to processing and the value it returns replaces the raw value. This function is\n     * used to transform strings or arrays (for example) into proper config objects.\n     *\n     * @param {Function|String} [options.cleanup] A function or the name of a method (on the `options.owner`) to call\n     * prior to destroying the `existingInstance`. The `existingInstance` is passed as the sole argument.\n     *\n     * @returns {Object} The reconfigured instance (either `existingInstance` or a new instance of the desired type)\n     */\n    static reconfigure(existingInstance, config, options) {\n        const\n            me              = this,\n            { factoryable } = me,\n            { typeKey }     = factoryable;\n\n        let defaultType = options,\n            cleanup, defaults, mergeType, owner, prepared, setup, t, transform, type;\n\n        // Pick apart the options and set the vars accordingly\n        if (options && !ObjectHelper.isClass(options)) {  // if (options is not the defaultType)\n            defaultType = null;\n\n            t = typeof options;\n\n            if (t === 'function') {\n                setup = options;\n            }\n            else if (t === 'string') {\n                defaultType = options;\n            }\n            else if (ObjectHelper.isObject(options)) {\n                // TODO revert to\n                //  ({ cleanup, defaults, owner, setup, type : defaultType } = options);\n                //  after this issue is fixed https://github.com/bryntum/bryntum-suite/issues/1457\n                cleanup     = options.cleanup;\n                defaults    = options.defaults;\n                owner       = options.owner;\n                setup       = options.setup;\n                defaultType = options.type;\n                transform   = options.transform;\n            }\n            else {\n                owner = options;\n            }\n        }\n\n        if (transform) {\n            config = (typeof transform === 'string') ? owner[transform](config) : transform(config);\n        }\n\n        type = config;\n\n        // Figure out config... it's either a type (string), a config object or the actual instance.\n        if (typeof type === 'string') {\n            config = {};\n        }\n        else if (config) {\n            if (config === true) {\n                config = {};\n            }\n\n            if (!ObjectHelper.isObject(config)) {\n                // If we are being given an instance (not a config object), discard or destroy the existingInstance\n                if (owner && config !== existingInstance && existingInstance?.[ownerSymbol] === owner) {\n                    (typeof cleanup === 'string') ? owner[cleanup](existingInstance) : cleanup?.(existingInstance);\n                    existingInstance.destroy();\n                }\n\n                return config;\n            }\n\n            type = config[typeKey];\n        }\n\n        type = type && me.resolveType(type);\n\n        // We've got our orders... make it so...\n\n        if (existingInstance) {\n            // We can have a type-less config object when reconfiguring an existing instance, but if we have a type,\n            // the existingInstance must be of that type. If !config that means we are nulling out.\n            if (config && (!type || existingInstance.constructor === type)) {\n                if (typeKey in config) {\n                    config = ObjectHelper.assign({}, config);\n                    delete config[typeKey];  // so \"type\" won't be processed as a config property\n                }\n\n                existingInstance.setConfig(config);\n\n                return existingInstance;\n            }\n\n            if (owner && existingInstance[ownerSymbol] === owner) {\n                (typeof cleanup === 'string') ? owner[cleanup](existingInstance) : cleanup?.(existingInstance);\n                existingInstance.destroy();\n            }\n        }\n\n        if (config) {\n            if (defaults) {\n                if (!(mergeType = type)) {\n                    if (!(mergeType = defaults[typeKey] || defaultType || factoryable.defaultType)) {\n                        throw new Error(`No default mergeType defined for ${factoryable.class.name} factory`);\n                    }\n\n                    mergeType = me.resolveType(mergeType);\n                }\n\n                if (mergeType) {\n                    // Allow the merge fn of each config to perform the task:\n                    config = mergeType.mergeConfigs(defaults, config);\n                }\n            }\n\n            if (setup) {\n                prepared = (typeof setup === 'string') ? owner[setup](config, type, defaults) : setup(config, type, defaults);\n\n                if (prepared === null) {\n                    return prepared;\n                }\n\n                config = prepared || config;\n            }\n\n            if (!type) {\n                // One more check on config[typeKey] since the setup() function may have added it...\n                if (!(type = config[typeKey] || defaultType || factoryable.defaultType)) {\n                    throw new Error(`No default type defined for ${factoryable.class.name} factory`);\n                }\n\n                type = me.resolveType(type);\n            }\n\n            if (defaults && !mergeType) {\n                config = type.mergeConfigs(defaults, config);\n            }\n\n            if (typeKey in config) {\n                config = ObjectHelper.assign({}, config);\n                delete config[typeKey];  // so \"type\" won't be processed as a config property\n            }\n\n            config = new type(config);\n\n            if (owner) {\n                config[ownerSymbol] = owner;\n            }\n        }\n\n        return config || null;\n    }\n\n    /**\n     * This method returns the constructor of the class registered for the given type name.\n     * @param {String} type The type name to look up.\n     * @param {Boolean} [optional] Pass `true` to return `null` if `type` is not found instead of throwing an exception.\n     * @returns {Function}\n     */\n    static resolveType(type, optional) {\n        if (typeof type !== 'string') {\n            return type;\n        }\n\n        const\n            { factoryable } = this,\n            bases           = factoryable.extends;\n\n        let result = factoryable.registry[factoryable.caseless ? type.toLowerCase() : type],\n            i;\n\n        for (i = 0; !result && bases && i < bases.length; ++i) {\n            // Pass optional=true to base factory so the error is our own should the lookup fail:\n            result = bases[i].resolveType(type, /* optional = */true);\n        }\n\n        if (!result && !optional) {\n            throw new Error(`Invalid type name \"${type}\" passed to ${factoryable.class.name} factory`);\n        }\n\n        return result;\n    }\n};\n","import Base from '../../Base.js';\nimport Factoryable from '../../mixin/Factoryable.js';\nimport ObjectHelper from '../../helper/ObjectHelper.js';\n\n/**\n * @module Core/data/field/DataField\n */\n\nconst { getOwnPropertyDescriptor } = Reflect;\n\n/**\n * This is the base class for Model field classes. A field class defines how to handle the data for a particular type\n * of field. Many of these behaviors can be configured on individual field instances.\n *\n * @extends Core/Base\n * @datafield\n */\nexport default class DataField extends Base.mixin(Factoryable) {\n    static get $name() {\n        return 'DataField';\n    }\n\n    static get type() {\n        return 'auto';\n    }\n\n    static get factoryable() {\n        return {\n            defaultType : 'auto'\n        };\n    }\n\n    static get prototypeProperties() {\n        return {\n            /**\n             * The name of the field.\n             * @config {String} name\n             */\n\n            /**\n             * The label text for a form item generated for this field. This is also used to create\n             * a column header for a {@link #config-column} for this field.\n             * @config {String} label\n             */\n\n            /**\n             * A column config object for a column to display this field in a grid. For simple, atomic\n             * data types, such as `date`, `string`, `boolean`, `number` and `integer`, this is optional\n             * and the appropriate column type can be inferred.\n             *\n             * This also provides default values for column configuration if a configured column definition\n             * for a grid lacks a property.\n             *\n             * For complex fields, such as identifiers which link to other records, a more capable\n             * column type may be specified, for example a `type : `number'` field may be configured\n             * with\n             *\n             * ```javascript\n             * column : 'percent'\n             * ```\n             * or\n             * ```javascript\n             * column : {\n             *     type : 'percent',\n             *     width : 100\n             * }\n             * ```\n             * if it represents a percentage vaue and needs appropriate rendering and editing.\n             * @config {String|Object} column\n             */\n\n            /**\n             * A config object for a widget to edit this field in a form. For simple, atomic\n             * data types, such as `date`, `string`, `boolean`, `number` and `integer`, this is optional\n             * and the appropriate input widget type can be inferred.\n             *\n             * For complex fields, such as identifiers which link to other records, a more capable\n             * widget may be specified.\n             * @config {String|InputFieldConfig} editor\n             * @private\n             */\n\n            /**\n             * A function that compares two values and returns a value < 0 if the first is less than the second, or 0\n             * if the values are equal, or a value > 0 if the first is greater than the second.\n             * @config {Function}\n             * @default\n             */\n            compare : null,\n\n            /**\n             * A function that compares two objects or records using the `compare` function on the properties of each\n             * objects based on the `name` of this field.\n             * @config {Function}\n             * @default\n             * @internal\n             */\n            compareItems : null,\n\n            /**\n             * The property in a record's data object that contains the field's value.\n             * Defaults to the field's `name`.\n             * @config {String}\n             */\n            dataSource : null,\n\n            /**\n             * The default value to assign to this field in a record if no value is provided.\n             * @config {*} defaultValue\n             */\n\n            /**\n             * Setting to `true` will ensure this field is included in any update/insert request payload\n             * when a Store / Project / CrudManager performs a request.\n             * @config {Boolean}\n             * @default\n             */\n            alwaysWrite : false,\n\n            /**\n             * Setting to `false` indicates that `null` is not a valid value.\n             * @config {Boolean}\n             * @default\n             */\n            nullable : true,\n\n            /**\n             * The value to return from {@link #function-print} for a `null` or `undefined` value.\n             * @config {String}\n             * @default\n             */\n            nullText : null,\n\n            /**\n             * The value to replace `null` when the field is not `nullable`.\n             * @config {*}\n             * @default\n             */\n            nullValue : undefined,\n\n            /**\n             * Set to `false` to exclude this field when saving records to a server.\n             * @config {Boolean}\n             * @default\n             */\n            persist : true,\n\n            /**\n             * Set to `true` for the field's set accessor to ignore attempts to set this field.\n             * @config {Boolean}\n             * @default\n             */\n            readOnly : false,\n\n            /**\n             * By default, defined {@link Core.data.Model} fields may be used to create a grid column\n             * suitable for diplaying that field in a grid cell. Some fields may not be suitable for\n             * features which automatically generate columns for view. These fields are created using\n             * `internal : true`. Some examples are the `expanded` and `rowHeight` fields which are used\n             * internally.\n             * @config {Boolean}\n             * @default\n             */\n            internal : false\n        };\n    }\n\n    /**\n     * The class that first defined this field. Derived classes that override a field do not change this property.\n     * @member {Core.data.Model} definedBy\n     * @private\n     * @readonly\n     */\n\n    /**\n     * The class that most specifically defined this field. Derived classes that override a field set this property to\n     * themselves.\n     * @member {Core.data.Model} owner\n     * @private\n     * @readonly\n     */\n\n    // NOTE: Since we create lots of instances, they have no life cycle (they are not destroyed) and are readonly after\n    // creation, this class does not use configurable.\n    construct(config) {\n        const me = this;\n\n        if (config) {\n            me.name = config.name;  // assign name first for diagnostic reasons\n\n            Object.assign(me, config);\n        }\n\n        if (me.compare) {\n            // We wrap in this way to allow compareItems() to be used as an array sorter fn (which gets no \"this\"):\n            me.compareItems = (itemA, itemB) => me.compare(itemA?.[me.name], itemB?.[me.name]);\n        }\n    }\n\n    /**\n     * This method transforms a data value into the desired form for storage in the record's data object.\n     *\n     * ```javascript\n     * export default class Task extends TaskModel {\n     *    static get fields() {\n     *        return [\n     *            {\n     *                name    : 'status',\n     *                convert : value => {\n     *                    if (value >= 100) {\n     *                        return 'done';\n     *                    }\n     *                    else if (value > 0) {\n     *                        return 'started';\n     *                    }\n     *                }\n     *            }\n     *        ];\n     *    }\n     * }\n     * ```\n     *\n     * @method convert\n     * @param {*} value The value to convert for storage in a record.\n     * @returns {*} The converted value.\n     */\n\n    /**\n     * This method transforms a data value into the desired form for transmitting to a server.\n     * @method serialize\n     * @param {*} value The value to serialize\n     * @param {Core.data.Model} record The record that contains the value being serialized.\n     * @returns {*} The serialized value.\n     */\n\n    /**\n     * This optional method is called when setting a data value on a record.\n     * @method set\n     * @param {*} value The value to set\n     * @param {Object} data The records future or current data object to set value to\n     * @param {Core.data.Model} record The record that owns or will own the data object\n     * @internal\n     */\n\n    /**\n     * This optional method is called when a record using this field is created.\n     * @method init\n     * @param {Core.data.Model} record The record being created\n     * @internal\n     */\n\n    /**\n     * Create getter and setter functions for the specified field name under the specified key.\n     * @internal\n     */\n    defineAccessor(target, force) {\n        const { name, dataSource } = this;\n\n        // Bail out if trying to override an explicitly defined accessor\n        if (\n            !force &&\n            name in target &&\n            target.$meta.hierarchy.some(current => getOwnPropertyDescriptor(current.prototype, name)?.enumerable === false)\n        ) {\n            return;\n        }\n\n        Reflect.defineProperty(target, name, {\n            configurable : true, // To allow removing it later\n            enumerable   : true,\n\n            // no arrow functions here, need `this` to change to instance\n            get : this.complexMapping\n                ? function() {\n                    return this.complexGet(name, dataSource);\n                }\n                : function() {\n                    // Inlined copy of Model#flatGet, to save a fn call since this is hit very often\n\n                    // When changes are batched, they get stored by field name, not dataSource\n                    if (this.batching && name in this.meta.batchChanges) {\n                        return this.meta.batchChanges[name];\n                    }\n\n                    return dataSource in this.data ? this.data[dataSource] : this.data[name];\n                },\n\n            // no arrow functions here, need `this` to change to instance\n            set(value) {\n                // Since the accessor is defined on a base class, we dip into the fields map for the actual\n                // calling class to get the correct field definition\n                const field = this.$meta.fields.map[name];\n\n                // Only set if field is read/write. Privately, we use setData to set its value\n                if (!(field && field.readOnly)) {\n                    this.set(name, value);\n                }\n            }\n        });\n    }\n\n    /**\n     * Compares two values for this field and returns `true` if they are equal, and `false` if not.\n     * @param {*} first The first value to compare for equality.\n     * @param {*} second The second value to compare for equality.\n     * @returns {Boolean} `true` if `first` and `second` are equal.\n     */\n    isEqual(first, second) {\n        return ObjectHelper.isEqual(first, second);\n    }\n\n    /**\n     * Returns the given field value as a `String`. If `value` is `null` or `undefined`, the value specified by\n     * {@link #config-nullText} is returned.\n     * @param {*} value The value to convert to a string.\n     * @returns {String}\n     */\n    print(value) {\n        return (value == null) ? this.nullText : this.printValue(value);\n    }\n\n    /**\n     * Returns the given, non-null field value as a `String`.\n     * @param {*} value The value to convert to a string (will not be `null` or `undefined`).\n     * @returns {String}\n     * @protected\n     */\n    printValue(value) {\n        return String(value);\n    }\n}\n","import DataField from './DataField.js';\n\n/**\n * @module Core/data/field/ArrayDataField\n */\n\n/**\n * This field class handles fields that hold an array.\n *\n * ```javascript\n * class Task extends Model {\n *     static get fields() {\n *         return [\n *             'name',\n *             // Array field\n *             { name : 'todo', type : 'array' }\n *         ];\n *     }\n * }\n * ```\n *\n * A record can be constructed like this:\n *\n * ```javascript\n * const task = new Task({\n *     name : 'Task 1',\n *     todo : [\n *         { text : 'Something', done : false },\n *         { text : 'Some other thing', done : true }\n *     ]\n * };\n * ```\n *\n * Or by populating a store:\n *\n * ```\n * const store = new Store({\n *     modelClass : Task,\n *     data : [\n *         {\n *             name : 'Task 1',\n *             todo : [\n *                 { text : 'Something', done : false },\n *                 { text : 'Some other thing', done : true }\n *             ]\n *         },\n *         ...\n *     ]\n * });\n *\n * ```\n *\n * For the field to count as modified, the whole array has to be replaced:\n *\n * ```javascript\n * // This wont be detected as a modification\n * task.todo[0].done = true;\n * // task.isModified === false\n *\n * // But this will\n * const todo = task.todo.slice(); // Create a new array with same contents\n * todo[0].done = true;\n * task.todo = todo;\n * // task.isModified === true\n * ```\n *\n * @extends Core/data/field/DataField\n * @classtype array\n * @datafield\n */\nexport default class ArrayDataField extends DataField {\n    static get $name() {\n        return 'ArrayDataField';\n    }\n\n    static get type() {\n        return 'array';\n    }\n\n    isEqual(a, b) {\n        return a === b;\n    }\n}\n\nArrayDataField.initClass();\n","import DataField from './DataField.js';\n\n/**\n * @module Core/data/field/BooleanDataField\n */\n\n/**\n * This field class handles field of type `Boolean`.\n *\n * ```javascript\n * class Person extends Model {\n *     static get fields() {\n *         return [\n *             'name',\n *             { name : 'active', type : 'boolean' }\n *         ];\n *     }\n * }\n * ```\n *\n * When a field is declared as a `'boolean'`, non-null values are promoted to `Boolean` type. This is seldom required,\n * but can be useful if a field value is received as a number but should be treated as a boolean.\n *\n * @extends Core/data/field/DataField\n * @classtype boolean\n * @datafield\n */\nexport default class BooleanDataField extends DataField {\n    static get $name() {\n        return 'BooleanDataField';\n    }\n\n    static get type() {\n        return 'boolean';\n    }\n\n    static get alias() {\n        return 'bool';\n    }\n\n    static get prototypeProperties() {\n        return {\n            /**\n             * The value to replace `null` when the field is not `nullable`.\n             * @config {Boolean}\n             * @default\n             */\n            nullValue : false\n        };\n    }\n\n    isEqual(first, second) {\n        if (first == null && second == null) {\n            return true;\n        }\n\n        return super.isEqual(first, second);\n    }\n\n    convert(value) {\n        if (value == null) {\n            return this.nullable ? value : this.nullValue;\n        }\n        // string 'false' will convert to false, other strings to true\n        if (value.toLowerCase?.() === 'false') {\n            return false;\n        }\n\n        return Boolean(value);\n    }\n}\n\nBooleanDataField.initClass();\n","import DataField from './DataField.js';\nimport DateHelper from '../../helper/DateHelper.js';\n\n/**\n * @module Core/data/field/DateDataField\n */\n\n/**\n * This field class handles field of type `Date`.\n *\n * ```javascript\n * class Person extends Model {\n *     static get fields() {\n *         return [\n *             'name',\n *             { name : 'birthday', type : 'date', format : 'YYYY-MM-DD' },\n *             { name : 'age', readOnly : true }\n *         ];\n *     }\n * }\n * ```\n *\n * When a field is declared as a `'date'`, non-null values are promoted to `Date` type. This is frequently needed due\n * to how date types are serialized to JSON strings.\n *\n * Date fields can have a special `defaultValue` of `'now'` which will convert to the current date/time.\n *\n * @extends Core/data/field/DataField\n * @classtype date\n * @datafield\n */\nexport default class DateDataField extends DataField {\n    static get $name() {\n        return 'DateDataField';\n    }\n\n    static get type() {\n        return 'date';\n    }\n\n    static get prototypeProperties() {\n        return {\n            /**\n             * The format of the date field.\n             *\n             * See {@link Core.helper.DateHelper DateHelper} for details.\n             * @config {String} format\n             * @default DateHelper.defaultFormat\n             */\n            format : null\n        };\n    }\n\n    convert(value) {\n        if (value == null) {\n            if (!this.nullable) {\n                value = this.nullValue;\n            }\n        }\n        else if (value === 'now') {\n            value = new Date();\n        }\n        else if (!(value instanceof Date)) {\n            // Use configured format, if null/undefined use DateHelpers default format\n            value = DateHelper.parse(value, this.format || DateHelper.defaultParseFormat);\n\n            // if parsing has failed, we would like to return `undefined` to indicate the \"absence\" of data\n            // instead of `null` (presence of \"empty\" data)\n            if (!value || isNaN(value)) {\n                value = undefined;\n            }\n        }\n\n        return value;\n    }\n\n    serialize(value) {\n        if (value instanceof Date) {\n            // Use configured format or DateHelpers default one\n            value = DateHelper.format(value, this.format || DateHelper.defaultFormat);\n        }\n\n        return value;\n    }\n\n    printValue(value) {\n        return DateHelper.format(value, this.format || DateHelper.defaultFormat);\n    }\n}\n\nDateDataField.initClass();\n","import DataField from './DataField.js';\n\n/**\n * @module Core/data/field/StringDataField\n */\n\n/**\n * This field class handles field of type `String`.\n *\n * ```javascript\n * class Person extends Model {\n *     static get fields() {\n *         return [\n *             { name : 'name', type : 'string' }\n *         ];\n *     }\n * }\n * ```\n *\n * When a field is declared as a `'string'`, non-null values are promoted to `String` type. This is seldom required, but\n * can be useful if a field value is received as a number but should be treated as a string.\n *\n * @extends Core/data/field/DataField\n * @classtype string\n * @datafield\n */\nexport default class StringDataField extends DataField {\n    static get $name() {\n        return 'StringDataField';\n    }\n\n    static get type() {\n        return 'string';\n    }\n\n    static get prototypeProperties() {\n        return {\n            /**\n             * The value to replace `null` when the field is not `nullable`.\n             * @config {String}\n             * @default\n             */\n            nullValue : ''\n        };\n    }\n\n    convert(value) {\n        return (value == null) ? (this.nullable ? value : this.nullValue) : String(value);\n    }\n}\n\nStringDataField.initClass();\n","import DateHelper from '../../helper/DateHelper.js';\nimport StringDataField from './StringDataField.js';\n\n/**\n * @module Core/data/field/DurationUnitDataField\n */\n\n/**\n * This field class handles field of type `durationunit` (string type). See {@link Core.data.Duration} for more information.\n *\n * ```javascript\n * class Event extends Model {\n *     static get fields() {\n *         return [\n *             { name : 'durationUnit', type : 'durationunit' }\n *         ];\n *     }\n * }\n * ```\n *\n * @extends Core/data/field/StringDataField\n * @classtype durationunit\n * @datafield\n */\nexport default class DurationUnitDataField extends StringDataField {\n    static get $name() {\n        return 'DurationUnitDataField';\n    }\n\n    static get type() {\n        return 'durationunit';\n    }\n\n    isEqual(first, second) {\n        return DateHelper.compareUnits(first, second) === 0;\n    }\n}\n\nDurationUnitDataField.initClass();\n","import DataField from './DataField.js';\n\n/**\n * @module Core/data/field/IntegerDataField\n */\n\n/**\n * This field class handles field of type `Number` with no decimal digits.\n *\n * ```javascript\n * class Person extends Model {\n *     static get fields() {\n *         return [\n *             'name',\n *             { name : 'age', type : 'int' }\n *         ];\n *     }\n * }\n * ```\n *\n * When a field is declared as a `'int'`, non-null values are promoted to `Number` type and decimals are removed using\n * a specified `rounding`. This field type can be useful if a field value is received as a string but should be stored\n * as a number or has a fractional component that must be rounded or truncated.\n *\n * @extends Core/data/field/DataField\n * @classtype integer\n * @datafield\n */\nexport default class IntegerDataField extends DataField {\n    static get $name() {\n        return 'IntegerDataField';\n    }\n\n    static get type() {\n        return 'integer';\n    }\n\n    static get alias() {\n        return 'int';\n    }\n\n    static get prototypeProperties() {\n        return {\n            /**\n             * The value to replace `null` when the field is not `nullable`.\n             * @config {Number}\n             * @default\n             */\n            nullValue : 0,\n\n            /**\n             * The `Math` method to use to ensure fractional component is removed.\n             * @config {'round'|'floor'|'ceil'}\n             * @default\n             */\n            rounding : 'round'\n        };\n    }\n\n    convert(value) {\n        return (value == null) ? (this.nullable ? value : this.nullValue) : Math[this.rounding](Number(value));\n    }\n}\n\nIntegerDataField.initClass();\n","import DataField from './DataField.js';\n\n/**\n * @module Core/data/field/ModelDataField\n */\n\n/**\n * This field class handles fields that hold other records.\n *\n * ```javascript\n * class Person extends Model {\n *     static get fields() {\n *         return [\n *             'name',\n *             { name : 'address', type : 'model' }\n *         ];\n *     }\n * }\n * ```\n *\n * @internal\n * @extends Core/data/field/DataField\n * @classtype model\n * @datafield\n */\nexport default class ModelDataField extends DataField {\n    static get $name() {\n        return 'ModelDataField';\n    }\n\n    static get type() {\n        return 'model';\n    }\n\n    static get prototypeProperties() {\n        return {\n            complexMapping : true\n        };\n    }\n\n    isEqual(first, second) {\n        // Check for semantic equality. An instance of the same Model class of the same ID is equal.\n        return (first && second) && (second instanceof first.constructor) && second.id == first.id;\n    }\n}\n\nModelDataField.initClass();\n","import DataField from './DataField.js';\n\n/**\n * @module Core/data/field/NumberDataField\n */\n\n/**\n * This field class handles field of type `Number`.\n *\n * ```javascript\n * class Person extends Model {\n *     static get fields() {\n *         return [\n *             'name',\n *             { name : 'age', type : 'number' }\n *         ];\n *     }\n * }\n * ```\n *\n * When a field is declared as a `'number'`, non-null values are promoted to `Number` type. This is seldom required, but\n * can be useful if a field value is received as a string but should be treated as a number.\n *\n * @extends Core/data/field/DataField\n * @classtype number\n * @datafield\n */\nexport default class NumberDataField extends DataField {\n    static get $name() {\n        return 'NumberDataField';\n    }\n\n    static get type() {\n        return 'number';\n    }\n\n    static get alias() {\n        return 'float';\n    }\n\n    static get prototypeProperties() {\n        return {\n            /**\n             * The value to replace `null` when the field is not `nullable`.\n             * @config {Number}\n             * @default\n             */\n            nullValue : 0,\n\n            /**\n             * The numeric precision of this field. Values are rounded to the specified number of digits. If `null`,\n             * the default, no rounding is performed.\n             * @config {Number}\n             * @default\n             */\n            precision : null\n        };\n    }\n\n    isEqual(first, second) {\n        // NaN !== NaN in JS which results having a number field w/ such value always dirty\n        // Not sure having two NaN-s not equal each other makes any sense here to us ..so handle it\n        return (isNaN(Number(first)) && isNaN(Number(second))) || super.isEqual(first, second);\n    }\n\n    convert(value) {\n        if (value == null) {\n            return this.nullable ? value : this.nullValue;\n        }\n\n        value = Number(value);\n\n        // Returning undefined to let set know that this is a invalid value\n        if (isNaN(value)) {\n            return;\n        }\n\n        let scale = this.precision;\n\n        if (scale) {\n            scale = 10 ** scale;\n            value = Math.round(value * scale) / scale;\n        }\n        else if (scale === 0) {\n            value = Math.round(value);\n        }\n\n        return value;\n    }\n}\n\nNumberDataField.initClass();\n","import DataField from './DataField.js';\n\n/**\n * @module Core/data/field/ObjectDataField\n */\n\n/**\n * This field class handles fields that hold an object.\n *\n * ```javascript\n * class Person extends Model {\n *     static get fields() {\n *         return [\n *             'name',\n *             { name : 'address', type : 'object' }\n *         ];\n *     }\n * }\n * ```\n *\n * For the field to count as modified, the whole object has to be replaced:\n *\n * ```javascript\n * person.address = { ...address };\n * ```\n *\n * @extends Core/data/field/DataField\n * @classtype object\n * @datafield\n */\nexport default class ObjectDataField extends DataField {\n    static get $name() {\n        return 'ObjectDataField';\n    }\n\n    static get type() {\n        return 'object';\n    }\n\n    static get prototypeProperties() {\n        return {\n            complexMapping : true\n        };\n    }\n}\n\nObjectDataField.initClass();\n","import DataField from './DataField.js';\nimport ObjectHelper from '../../helper/ObjectHelper.js';\nimport StringHelper from '../../helper/StringHelper.js';\n\n/**\n * @module Core/data/field/StoreDataField\n */\n\n/**\n * This field class handles fields that accepts an array that is then converted to a store.\n *\n * ```javascript\n * class Task extends Model {\n *     static fields = [\n *         'name',\n *         // Store field\n *         { name : 'subTasks', type : 'store', storeClass : Store }\n *     ];\n * }\n * ```\n *\n * A record can be constructed like this:\n *\n * ```javascript\n * const task = new Task({\n *     name : 'Task 1',\n *     subTasks : [\n *         { text : 'Something', done : false },\n *         { text : 'Some other thing', done : true }\n *     ]\n * };\n * ```\n *\n * Or by populating a store:\n *\n * ```javascript\n * const store = new Store({\n *     modelClass : Task,\n *     data : [\n *         {\n *             name : 'Task 1',\n *             subTasks : [\n *                 { text : 'Something', done : false },\n *                 { text : 'Some other thing', done : true }\n *             ]\n *         },\n *         ...\n *     ]\n * });\n * ```\n *\n * Whenever the store or its records are manipulated, the field will be marked as modified:\n *\n * ```javascript\n * // These will all be detected as modifications\n * task.subTasks.first.done = true;\n * task.subTasks.last.remove();\n * task.subTasks.add({ text : 'New task', done : false });\n * ```\n *\n * @extends Core/data/field/DataField\n * @classtype store\n * @datafield\n */\nexport default class StoreDataField extends DataField {\n    static $name = 'StoreDataField';\n\n    static type = 'store';\n\n    /**\n     * Store class to use when creating the store.\n     *\n     * ```javascript\n     * class TodoStore extends Store {\n     *     ...\n     * }\n     *\n     * const task = new Store({\n     *     static fields = [\n     *         { type : 'store', name: 'todoItems', storeClass : TodoStore }\n     *     ]\n     * });\n     * ```\n     *\n     * @config {Class} storeClass\n     * @typings {typeof Store}\n     */\n\n    /**\n     * Model class to use for the store (can also be configured as usual on the store class, this config is for\n     * convenience).\n     *\n     * ```javascript\n     * class TodoItem extends Model {\n     *   ...\n     * }\n     *\n     * const task = new Store({\n     *     static fields = [\n     *         { type : 'store', name: 'todoItems', storeClass : Store, modelClass : TodoItem }\n     *     ]\n     * });\n     * ```\n     *\n     * @config {Class} modelClass\n     * @typings {typeof Model}\n     */\n\n    // Initializer, called when creating a record. Sets up the store and populates it with any initial data\n    init(data, record) {\n        const\n            me        = this,\n            storeName = `${me.name}Store`,\n            config    = { skipStack : true }; // Optimization when used from sources, don't create a stack in Base\n\n        // Optionally apply modelClass, for convenient configuration\n        if (me.modelClass) {\n            config.modelClass = me.modelClass;\n        }\n\n        // Call optional initializer (initSubTasksStore for subTasks field) on the record, letting it manipulate the\n        // config before creating a store\n        record[`init${StringHelper.capitalize(storeName)}`]?.(config);\n\n        if (!config.storeClass && !me.storeClass) {\n            throw new Error(`Field '${me.name}' with type 'store' must have a storeClass configured`);\n        }\n\n        // Store has to be assigned on the record, field is shared\n        const store = record.meta[storeName] = new (config.storeClass || me.storeClass)(config);\n\n        if (me.complexMapping) {\n            ObjectHelper.setPath(data, me.dataSource, store);\n        }\n        else {\n            data[me.dataSource] = store;\n        }\n\n        // Don't warn about generated ids, responsibility lies elsewhere\n        store.verifyNoGeneratedIds = false;\n        // Keep track of if id should be included when serializing or not\n        store.usesId = !store.count || !store.every(record => record.hasGeneratedId);\n        // Cache value\n        store.$currentValue = me.getValue(store);\n\n        // Track changes to the store, applying them to the record and caching current value to be used when\n        // serializing and in comparisons (required, otherwise we would be comparing to already updated store\n        store.ion({\n            change : ({ action }) => {\n                const value = me.getValue(store);\n\n                if (!store.$isSettingStoreFieldData) {\n                    const oldPreserveCurrentDataset = store.$preserveCurrentDataset;\n\n                    store.$preserveCurrentDataset = me.subStore && (\n                        action === 'update' || action === 'remove' || action === 'add'\n                    );\n\n                    record.set(me.name, value);\n\n                    store.$preserveCurrentDataset = oldPreserveCurrentDataset;\n                }\n\n                // cache the field current value\n                store.$currentValue = value;\n            }\n        });\n    }\n\n    // Called when setting a new value to the field on a record\n    set(value, data, record) {\n        const\n            me        = this,\n            storeName = `${me.name}Store`,\n            { [storeName] : store } = record.meta;\n\n        // Lazy store might not be created yet, gets created on first access. Returning false keeps the value for later\n        // if called during init\n        if (!store) {\n            // Missing store suggests value was not yet initialized and future value resides\n            // in a special meta property. In which case we need to update it there\n            record.meta.initableValues.set(me, value);\n\n            return false;\n        }\n\n        // Prevent changes from leading to recursive calls\n        if (store.$isSettingStoreFieldData) {\n            return;\n        }\n\n        store.$isSettingStoreFieldData = true;\n\n        // Call optional processing fn (processSubTasksStoreData for subTasks field) on the record, letting it\n        // manipulate the data before creating records\n        value = record[`process${StringHelper.capitalize(storeName)}Data`]?.(value, record) ?? value;\n\n        // Apply incoming array to store\n        if (!store.$preserveCurrentDataset) {\n            store.data = value;\n        }\n\n        store.$isSettingStoreFieldData = false;\n\n        // Keep track of if id should be included when serializing or not\n        store.usesId = !store.count || !store.every(record => record.hasGeneratedId);\n    }\n\n    serialize(value, record) {\n        return record.meta[`${this.name}Store`].$currentValue;\n    }\n\n    // Extract persistable values, optionally including id depending on if ids are used\n    getValue(store) {\n        return store.allRecords.map(r => {\n            const data = r.persistableData;\n\n            if (!store.usesId) {\n                delete data.id;\n            }\n\n            return data;\n        });\n    }\n\n    isEqual(a, b) {\n        if (a?.isStore) {\n            a = a.$currentValue;\n        }\n\n        if (b?.isStore) {\n            b = b.$currentValue;\n        }\n\n        return ObjectHelper.isDeeplyEqual(a, b);\n    }\n}\n\nStoreDataField.initClass();\n","import Base from '../Base.js';\nimport ArrayHelper from '../helper/ArrayHelper.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\nimport StringHelper from '../helper/StringHelper.js';\nimport ModelStm from './stm/mixin/ModelStm.js';\nimport TreeNode from './mixin/TreeNode.js';\nimport ModelLink from './mixin/ModelLink.js';\nimport DataField from './field/DataField.js';\n\n// The built-in model field types:\nimport './field/ArrayDataField.js';\nimport './field/BooleanDataField.js';\nimport './field/DateDataField.js';\nimport './field/DurationUnitDataField.js';\nimport './field/IntegerDataField.js';\nimport './field/ModelDataField.js';\nimport './field/NumberDataField.js';\nimport './field/ObjectDataField.js';\nimport './field/StoreDataField.js';\nimport './field/StringDataField.js';\n\n/**\n * @module Core/data/Model\n */\n\n/**\n * Defines the properties of a relation between two stores.\n *\n * Used as the values of a Model's {@link Core.data.Model#property-relations-static} definition.\n *\n * This snippet will define a relation called `team`, allowing access to the foreign record via `player.team`. It will\n * point to a record in the `teamStore` (must be available as `record.firstStore.teamStore)` with an id matching the\n * players `teamId` field. The team record in turn, will have a field called `players` which is a collection of all\n * players in the team.\n *\n * ```javascript\n * class Player extends Model {\n *     static relations = {\n *         team : {\n *             foreignKey            : 'teamId',\n *             foreignStore          : 'teamStore',\n *             relatedCollectionName : 'players'\n *         }\n *     }\n * }\n * ```\n *\n * See {@link Core.data.Model#property-relations-static} for a more extensive example.\n *\n * @typedef {Object} RelationConfig\n * @property {String} foreignKey Name of a field on this model which holds the foreign key value.\n * @property {String|Core.data.Store} foreignStore Name of a property on the model's first store, which holds the\n * foreign store. Or the actual store instance\n * @property {String} [relatedCollectionName] Optionally, name of a property that will be added to the records of the\n * foreign store, which will hold all records from the model's store related to it.\n */\n\nconst\n    { defineProperty } = Reflect,\n    { hasOwn }         = ObjectHelper,\n    _undefined         = undefined,\n    internalProps      = {\n        children : 1,\n        data     : 1,\n        meta     : 1\n    },\n    abbreviationFields = [\n        'name',\n        'title',\n        'text',\n        'label',\n        'description'\n    ],\n    fieldDataTypes = {\n        boolean : 1,\n        number  : 1,\n        date    : 1,\n        object  : 1\n    };\n\n/**\n * A Model is the definition of a record which can be added to (or loaded into) a {@link Core.data.Store}. It defines\n * which fields the data contains and exposes an interface to access and manipulate that data. The Model data is\n * populated through simple a JSON object.\n *\n * By default, a Model stores a shallow copy of its raw json, but for records in stores configured with\n * `useRawData: true` it stores the supplied json object as is.\n *\n * ## Defining fields\n *\n * A Model can either define its fields explicitly (see {@link #property-fields-static}) or have them created from its\n * data (see {@link #property-autoExposeFields-static}). This snippet shows a model with 4 fields defined explicitly:\n *\n * ```javascript\n * class Person extends Model {\n *     static fields = [\n *         'name',\n *         { name : 'birthday', type : 'date', format : 'YYYY-MM-DD' },\n *         { name : 'shoeSize', type : 'number', defaultValue : 11 },\n *         { name : 'age', readOnly : true }\n *     ]\n * }\n * ```\n *\n * The first field (name) has an unspecified type, which means the field's value is held as received with no conversion\n * applied. The second field (birthday) is defined to be a date, which will make the model parse any supplied value into\n * an actual date. The parsing is handled by {@link Core/helper/DateHelper#function-parse-static DateHelper.parse()}\n * using the specified `format`, or if no format is specified using\n * {@link Core/helper/DateHelper#property-defaultFormat-static DateHelper.defaultFormat}.\n *\n * The set of standard field types is as follows:\n *\n *  - {@link Core.data.field.ArrayDataField `array`}\n *  - {@link Core.data.field.BooleanDataField `boolean`}\n *  - {@link Core.data.field.DateDataField `date`}\n *  - {@link Core.data.field.IntegerDataField `integer`}\n *  - {@link Core.data.field.ObjectDataField `object`}\n *  - {@link Core.data.field.NumberDataField `number`}\n *  - {@link Core.data.field.StoreDataField `store`}\n *  - {@link Core.data.field.StringDataField `string`}\n *\n * You can also set a `defaultValue` that will be used if the data does not contain a value for the field:\n *\n * ```javascript\n * { name : 'shoeSize', type : 'number', defaultValue : 11 }\n * ```\n *\n * To create a record from a Model, supply data to its constructor:\n *\n * ```javascript\n * let guy = new Person({\n *     id       : 1,\n *     name     : 'Dude',\n *     birthday : '2014-09-01'\n * });\n * ```\n *\n * If no id is specified, a temporary id based on a UUID will be generated. This id is not meant to be serialized, it\n * should instead be replaced by the backend with a proper id from the underlying database (or similar).\n *\n * Please avoid using reserved names for your fields (such as `parent`, `children` and others that are used as Model\n * properties) to avoid possible data collisions and bugs.\n *\n * ## Nested fields\n *\n * Model supports mapping fields to nested data structures using dot `.` separated paths as the `dataSource`. For\n * example given this JSON object:\n *\n * ```json\n * {\n *     name : 'Borje Salming',\n *     team : {\n *         name   : 'Toronto Maple Leafs',\n *         league : 'NHL'\n *     }\n * }\n * ```\n *\n * A field can be mapped to the nested team name by using `dataSource : 'team.name'`:\n *\n * ```javascript\n * class Player extends Model {\n *     static get fields() {\n *         return [\n *             'name',\n *             // Field mapped to a property on a nested object\n *             { name : 'teamName', dataSource : 'team.name' }\n *         ]\n *     }\n * }\n * ```\n *\n * Usage:\n *\n * ```javascript\n * const player = new Player(json);\n *\n * console.log(player.teamName); // > Toronto Maple Leafs\n * player.teamName = 'Minnesota Wild'; // Updates name property of the team object\n * ```\n *\n * ### Updating a nested object\n *\n * Note that directly altering a property of the nested object wont register as an update of the record, record does not\n * track changes deeply. If nested fields (as described above) is not enough for your usecase you can map a field\n * directly to the nested object and then assign a shallow copy of it to the record on changes:\n *\n * ```javascript\n * class Player extends Model {\n *     static get fields() {\n *         return [\n *             ...,\n *             // Field mapped directly to the nested object\n *             { name : 'team', type : 'object' }\n *         ]\n *     }\n * }\n *\n * // \"External object\" to nest\n * const team = {\n *     name   : 'Brynas',\n *     league : 'SHL'\n * }\n *\n * const player = new Player({\n *     name : 'Borje Salming',\n *     team\n * });\n *\n * // This will not flag player as dirty\n * team.league = 'CHL';\n *\n * // Instead you have to reassign the mapped field\n * player.team = { ...player.team };\n * ```\n *\n * ## Arrays of atomic types\n *\n * When a field holds an array of atomic types (strings, numbers etc.) we recommend using the\n * {@link Core/data/field/ArrayDataField `array`} type for the field:\n *\n * ```javascript\n * class GroceryList extends Model {\n *     static get fields() {\n *         return [\n *             'name',\n *             { name : 'items', type : 'array' }\n *         ];\n *     }\n * }\n *\n * const list = new GroceryList({\n *    name  : 'My list',\n *    items : ['Milk', 'Bread', 'Eggs']\n * });\n * ```\n *\n * <div class=\"note\">Modifying items in the array will not flag the field as updated, since the array itself does not\n * change. For it to register a change, you must assign it a new array (could be a copy of the old one). For more info,\n * see {@link Core/data/field/ArrayDataField}</div>\n *\n * ## Arrays of objects\n *\n * When a field holds an array of objects, we recommend using the {@link Core/data/field/StoreDataField `store`} type\n * for the field:\n *\n * ```javascript\n * class GroceryList extends Model {\n *     static fields = [\n *         'name',\n *         { name : 'items', type : 'store', storeClass : Store }\n *     ]\n * }\n *\n * const list = new GroceryList({\n *    name  : 'My list',\n *    items : [\n *        { name : 'Milk', quantity : 1 },\n *        { name : 'Bread', quantity : 2 },\n *        { name : 'Eggs', quantity : 12 }\n *    ]\n * });\n * ```\n *\n * The `items` field on the `list` above will be a {@link Core.data.Store} instance (because we passed that as\n * `storeClass`), which can be used to manipulate the items in the list. Doing so will flag the `list` as modified. For\n * more info, see {@link Core.data.field.StoreDataField}.\n *\n * ## Persisting fields\n *\n * By default, all fields are persisted. If you don't want particular field to get saved to the server, configure it\n * with `persist: false`. In this case field will not be among changes which are sent by\n * {@link Core/data/AjaxStore#function-commit store.commit()}, otherwise its behavior doesn't change.\n *\n * ```javascript\n * class Person extends Model {\n *     static get fields() {\n *         return [\n *             'name',\n *             { name : 'age', persist : false }\n *         ];\n *     }\n * }\n * ```\n *\n * ## The `id` field\n * By default Model expects its id field to be stored in a data source named \"id\". The data source for the id field can\n * be customized by setting {@link Core/data/field/DataField#config-dataSource} on the id field object configuration.\n *\n * ```javascript\n * class Person extends Model {\n *     static fields = [\n *         { name : 'id', dataSource: 'personId'},\n *         'name',\n *         { name : 'age', persist : false },\n *         { name : 'birthday', type : 'date' }\n *      ];\n * }\n *\n * let girl = new Person({\n *     personId : 2,\n *     name     : 'Lady',\n *     birthday : '2011-11-05'\n * });\n * ```\n *\n * Also, it is possible to change the id field data source by setting {@link #property-idField-static}:\n *\n * ```javascript\n * class Person extends Model {\n *     // Id drawn from 'id' property by default; use custom field here\n *     static idField = 'personId';\n *\n *     static fields = [\n *         'name',\n *         { name : 'age', persist : false },\n *         { name : 'birthday', type : 'date' }\n *     ];\n * }\n * ```\n *\n * ## Getting and setting values\n *\n * Fields are used to generate getters and setters on the records. Use them to access or modify values (they are\n * reactive):\n *\n * ```javascript\n * console.log(guy.name);\n * girl.birthday = new Date(2011,10,6);\n * ```\n *\n * NOTE: In an application with multiple different models you should subclass Model, since the prototype is decorated\n * with getters and setters. Otherwise, you might get unforeseen collisions.\n *\n * ## Field data mapping\n *\n * By default, fields are mapped to data using their name. If you for example have a \"name\" field it expects data to be\n * `{ name: 'Some name' }`. If you need to map it to some other property, specify `dataSource` in your field definition:\n *\n * ```javascript\n * class Person extends Model {\n *     static get fields {\n *         return [\n *             { name : 'name', dataSource : 'TheName' }\n *         ];\n *     }\n * }\n *\n * // This is now OK:\n * let dude = new Person({ TheName : 'Manfred' });\n * console.log(dude.name); // --> Manfred\n * ```\n * ## Field inheritance\n *\n * Fields declared in a derived model class are added to those from its superclass. If a field declared by a derived\n * class has also been declared by its super class, the field properties of the super class are merged with those of\n * the derived class.\n *\n * For example:\n * ```javascript\n *  class Person extends Model {\n *      static get fields() {\n *          return [\n *              'name',\n *              { name : 'birthday', type : 'date', format : 'YYYY-MM-DD' }\n *          ];\n *      }\n *  }\n *\n *  class User extends Person {\n *      static get fields() {\n *          return [\n *              { name : 'birthday', dataSource : 'dob' },\n *              { name : 'lastLogin', type : 'date' }\n *          ];\n *      }\n *  }\n * ```\n *\n * In the above, the `Person` model declares the `birthday` field as a `date` with a specified `format`. The `User`\n * model extends `Person` and also declares the `birthday` field. This redeclared field only specifies `dataSource`, so\n * all the other fields are preserved from `Person`. The `User` model also adds a `lastLogin` field.\n *\n * The `User` from above could have been declared like so to achieve the same `fields`:\n *\n * ```javascript\n *  class User extends Model {\n *      static get fields() {\n *          return [\n *              'name',\n *              { name : 'birthday', type : 'date', format : 'YYYY-MM-DD', dataSource : 'dob' },\n *              { name : 'lastLogin', type : 'date' }\n *          ];\n *      }\n *  }\n * ```\n *\n * ## Override default values\n *\n * In case you need to define default value for a specific field, or override an existing default value, you can\n * define a new or re-define an existing field definition in {@link #property-fields-static} static getter:\n *\n * ```javascript\n * class Person extends Model {\n *     static get fields() {\n *         return [\n *             { name : 'username', defaultValue : 'New person' },\n *             { name : 'birthdate', type : 'date' }\n *         ];\n *     }\n * }\n *\n * class Bot extends Person {\n *     static get fields() {\n *         return [\n *             { name : 'username', defaultValue : 'Bot' } // default value of 'username' field is overridden\n *         ];\n *     }\n * }\n * ```\n *\n * ## Read-only records\n *\n * Model has a default field called {@link #field-readOnly}, which is used to make the record read-only in the UI while\n * still allowing programmatic changes to it. Setting it to `true` will prevent it from being edited by the built-in\n * editing features (cell editing in Grid, event draging in Scheduler, task editor in Gantt etc.). Please note that it\n * is not made read-only on the data level, the record can still be manipulated by application code.\n *\n * ```javascript\n * // Prevent record from being manipulated by the user\n * record.readOnly = true;\n *\n * // Programmatic manipulation is still allowed\n * record.remove();\n * ```\n *\n * ## Tree API\n *\n * This class mixes in the {@link Core/data/mixin/TreeNode TreeNode} mixin which provides an API for tree related\n * functionality (only relevant if your store is configured to be a {@link Core/data/Store#config-tree tree}).\n *\n * @mixes Core/data/mixin/ModelLink\n * @mixes Core/data/mixin/TreeNode\n * @mixes Core/data/stm/mixin/ModelStm\n */\nexport default class Model extends Base.mixin(ModelStm, TreeNode, ModelLink) {\n    static get $name() {\n        return 'Model';\n    }\n\n    static get declarable() {\n        return [\n            /**\n             * Array of defined fields for this model class. Subclasses add new fields by implementing this static\n             * getter:\n             *\n             * ```javascript\n             * // Model defining two fields\n             * class Person extends Model {\n             *     static get fields() {\n             *         return [\n             *             { name : 'username', defaultValue : 'New person' },\n             *             { name : 'birthdate', type : 'date' }\n             *         ];\n             *     }\n             * }\n             *\n             * // Subclass overriding one of the fields\n             * class Bot extends Person {\n             *     static get fields() {\n             *         return [\n             *             // Default value of 'username' field is overridden, any other setting from the parents\n             *             // definition is preserved\n             *             { name : 'username', defaultValue : 'Bot' }\n             *         ];\n             *     }\n             * }\n             * ```\n             *\n             * Fields in a subclass are merged with those from the parent class, making it easy to override mappings,\n             * formats etc.\n             *\n             * @member {Array<String|ModelFieldConfig|Core.data.field.DataField>} fields\n             * @readonly\n             * @static\n             * @category Fields\n             */\n            'fields'\n        ];\n    }\n\n    static get fields() {\n        return [\n            // The index of this item in its parent (respects filtering)\n            {\n                name     : 'parentIndex',\n                type     : 'number',\n                persist  : false,\n                internal : true\n            },\n\n            // The index of this item in its parent ghost (unsortable) children array\n            {\n                name     : 'orderedParentIndex',\n                type     : 'number',\n                persist  : false,\n                internal : true\n            },\n\n            /**\n             * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing\n             * features such as cell editing and event dragging.\n             *\n             * Does not prevent altering the record programmatically, it can still be manipulated by application code.\n             *\n             * For more info, see the \"Read-only records\" section above.\n             *\n             * @field {Boolean} readOnly\n             * @category Common\n             */\n            {\n                name : 'readOnly',\n                type : 'boolean'\n            }\n        ];\n    }\n\n    /**\n     * Override in a subclass of Model to define relations to records in other stores.\n     *\n     * Always defined on the \"one\" side, not the \"many\" side.\n     *\n     * Expects an object where keys are relation names and values are {@link #typedef-RelationConfig relation configs}.\n     *\n     * This snippet will define a relation called `team`, allowing access to the foreign record via `player.team`. It\n     * will point to a record in the `teamStore` (must be available as `record.firstStore.teamStore)` with an id\n     * matching the players `teamId` field. The team record in turn, will have a field called `players` which is a\n     * collection of all players in the team.\n     *\n     * ```javascript\n     * class Player extends Model {\n     *     static relations = {\n     *         // Define a relation between a player and a team\n     *         team : {\n     *             foreignKey            : 'teamId',\n     *             foreignStore          : 'teamStore',\n     *             relatedCollectionName : 'players'\n     *         }\n     *     }\n     * }\n     *\n     * const teamStore = new Store({\n     *     data : [\n     *         { id : 1, name : 'Brynas' },\n     *         { id : 2, name : 'Leksand' }\n     *     ]\n     * });\n     *\n     * const playerStore = new Store({\n     *     modelClass : Player,\n     *     // Matches foreignStore, allowing records of playerStore to find the related store\n     *     teamStore,\n     *     data       : [\n     *         // teamId is specified as foreignKey, will be used to match the team\n     *         { id : 1, name : 'Nicklas Backstrom', teamId : 1  },\n     *         { id : 2, name : 'Elias Lindholm',   teamId : 1  },\n     *         { id : 3, name : 'Filip Forsberg',  teamId : 2  }\n     *     ],\n     * }\n     *\n     * playerStore.first.team.name // > Brynas\n     * playerStore.last.team.name // > Leksand\n     * teamStore.first.players // > [nick, elias]\n     * teamStore.last.players // > [filip]\n     * ```\n     *\n     * @member {Object<String,RelationConfig>} relations\n     * @static\n     */\n    static relations = null;\n\n    /**\n     * Template static getter which is supposed to be overridden to define default field values for the Model class.\n     * Overrides `defaultValue` config specified by the {@link #property-fields-static} getter.\n     * Returns a named object where key is a field name and value is a default value for the field.\n     *\n     * NOTE: This is a legacy way of defining default values, we recommend using {@link #property-fields-static} moving\n     * forward.\n     *\n     * ```javascript\n     * class Person extends Model {\n     *     static get fields() {\n     *         return [\n     *             { name : 'username', defaultValue : 'New person' }\n     *         ];\n     *     }\n     * }\n     *\n     * class Bot extends Person {\n     *     static get defaults() {\n     *         return {\n     *             username : 'Bot' // default value of 'username' field is overridden\n     *         };\n     *     }\n     * }\n     * ```\n     *\n     * @member {Object} defaults\n     * @static\n     * @category Fields\n     */\n    // TODO: deprecate in 5.0 in favor of static fields getter\n    // static get defaults() {\n    //     return {};\n    // }\n\n    /**\n     * The data source for the id field which provides the ID of instances of this Model.\n     * @property {String}\n     * @category Fields\n     */\n    static set idField(idField) {\n        this._assignedIdField = true;\n        this._idField = idField;\n    }\n\n    static get idField() {\n        return this._idField;\n    }\n\n    /**\n     * The name of the data field which holds children of this Model when used in a tree structure\n     * ```javascript\n     * MyModel.childrenField = 'kids';\n     * const parent = new MyModel({\n     *     name : 'Dad',\n     *     kids : [\n     *         { name : 'Daughter' },\n     *         { name : 'Son' }\n     *     ]\n     * });\n     * ```\n     * @property {String}\n     * @category Fields\n     */\n    static set childrenField(childrenField) {\n        this._childrenField = childrenField;\n    }\n\n    static get childrenField() {\n        if (!this._childrenField) {\n            const dataField = this.fieldMap.children;\n            this._childrenField = dataField?.dataSource || 'children';\n        }\n        return this._childrenField;\n    }\n\n    /**\n     * Returns index path to this node. This is the index of each node in the node path\n     * starting from the topmost parent. (only relevant when its part of a tree store).\n     * @returns {Number[]} The index of each node in the path from the topmost parent to this node.\n     * @category Parent & children\n     * @private\n     */\n    get indexPath() {\n        const indices = [];\n\n        let node = this,\n            depth = node.childLevel;\n\n        for (node = this; node && !node.isRoot; node = node.parent) {\n            indices[depth--] = node.parentIndex + 1;\n        }\n\n        return indices;\n    }\n\n    /**\n     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as\n     * record.id. Will get a generated value if none is specified in records data.\n     *\n     * <div class=\"note\">Note that generated ids are meant to be temporary (phantom ids), they should not be serialized\n     * but instead replaced by the backend on commit</div>\n     *\n     * @field {String|Number} id\n     * @category Common\n     */\n\n    //region Init\n\n    /**\n     * Constructs a new record from the supplied data.\n     * @param {Object} [data] Raw data\n     * @param {Core.data.Store} [store] Data store\n     * @param {Object} [meta] Meta data\n     * @privateparam {Boolean} [skipExpose] Skip exposing properties from data\n     * @privateparam {Boolean} [forceUseRaw] Force using raw data, used by copy to not clone data twice\n     * @function constructor\n     * @category Lifecycle\n     */\n    construct(data = {}, store = null, meta = null, skipExpose = false, forceUseRaw = false, rawData = false) {\n        const\n            me     = this,\n            stores = ArrayHelper.asArray(store) ?? [],\n            { constructor, fieldMap } = me;\n\n        // null passed to Base construct inhibits config processing.\n        let configs = null;\n\n        store = stores[0];\n\n        me.meta = {\n            modified : {},\n            ...constructor.metaConfig,\n            ...meta\n        };\n\n        // Should apply configs?\n        if (constructor.applyConfigs) {\n            // Extract from data and combine with defaultConfigs\n            for (const key in me.getDefaultConfiguration()) {\n                if (!configs) {  // if (first config)\n                    configs = {};\n\n                    if (!me.useRawData || !me.useRawData.enabled) {\n                        // Shallow copy of data to not mutate incoming object\n                        data = { ...data };\n                    }\n                }\n\n                // Loop through configs excluding fields\n                if (key in data) {\n                    // Let defaults override any config supplied with an `undefined` value\n                    if (data[key] !== undefined) {\n                        // Use as config\n                        configs[key] = data[key];\n                    }\n\n                    // Always remove config from data\n                    delete data[key];\n                }\n            }\n        }\n\n        super.construct(configs);\n\n        // make getters/setters for fields, needs to be done before processing data to make sure defaults are available\n        if (!skipExpose) {\n            constructor.exposeProperties(data, rawData);\n        }\n\n        // It's only valid to do this once, on construction of the first instance\n        if (!hasOwn(constructor, 'idFieldProcessed')) {\n            // idField can be overridden from meta, or from the store if we have not had an idField set programmatically\n            // and if we have not had an id field defined above the base Model class level.\n\n            let overriddenIdField = me.meta.idField;\n\n            if (!overriddenIdField) {\n                // Might have been set to Model after construction but before load\n                if (constructor._assignedIdField) {\n                    overriddenIdField = constructor.idField;\n                }\n                // idField on store was deprecated, but should still work to not break code\n                // TODO: Remove in 3.0? Or reintroduce it...\n                else if (store) {\n                    overriddenIdField = store.idField;\n                }\n            }\n\n            // If it's overridden to something different than we already have, replace the 'id' field in the fieldMap\n            if (overriddenIdField && overriddenIdField !== fieldMap.id.dataSource) {\n                constructor.addField({\n                    name       : 'id',\n                    dataSource : overriddenIdField,\n                    internal   : true\n                });\n            }\n            // Model.idField should always reflect the idField mapping\n            constructor._idField = fieldMap.id.dataSource;\n            constructor.idFieldProcessed = true;\n        }\n\n        // assign internalId, unique among all records\n        me._internalId = Model._internalIdCounter++;\n\n        // relation code expects store to be available for relation lookup, but actual join done below\n        me.stores = [];\n        me.unjoinedStores = [];\n\n        // Superclass constructors may set this in their own way before this is called.\n        if (!me.originalData) {\n            me.originalData = data;\n        }\n\n        me.data = constructor.processData(data, false, store, me, forceUseRaw);\n\n        // Assign any intiable value last, so that it can reference this record if needed\n        me.meta.initableValues?.size && me.assignInitables();\n\n        // Consider undefined and null as missing id and generate one\n        if (me.id == null) {\n            // Assign a generated id silently, record should not be considered modified\n            me.setData('id', me.generateId(store));\n        }\n\n        if (me.data[constructor.childrenField]) {\n            me.processChildren(stores);\n        }\n        me.generation = 0;\n    }\n\n    /**\n     * Set this property to `true` when adding a record on a conditional basis, that is, it is yet\n     * to be confirmed as an addition.\n     *\n     * When this is set, the {@link #property-isPersistable} value of the record is **false**, and upon being\n     * added to a Store it will *not* be eligible to be synced with the server as an added record.\n     *\n     * Subsequently, *clearing* this property means this record will become persistable and eligible\n     * for syncing as an added record.\n     * @property {Boolean}\n     * @category Editing\n     */\n    set isCreating(isCreating) {\n        const me = this;\n\n        // A no-change must not have any effect.\n        if (Boolean(me.meta.isCreating) !== isCreating) {\n            // This flag contributes to the evaluation of isPersistable.\n            // A record is not persistable if it isCreating.\n            me.meta.isCreating = isCreating;\n\n            // Owning Stores may have things to do at this lifecycle point\n            me.stores.forEach(s => {\n                s.onIsCreatingToggle(me, isCreating);\n            });\n        }\n    }\n\n    get isCreating() {\n        return Boolean(this.meta.isCreating);\n    }\n\n    /**\n     * Compares this Model instance to the passed instance. If they are of the same type, and all fields\n     * (except, obviously, `id`) are equal, this returns `true`.\n     * @param {Core.data.Model} other The record to compare this record with.\n     * @returns {Boolean} `true` if the other is of the same class and has all fields equal.\n     * @category Misc\n     */\n    equals(other) {\n        if (other instanceof this.constructor) {\n            for (let fields = this.$meta.fields.defs, i = 0, { length } = fields; i < length; i++) {\n                const\n                    field    = fields[i],\n                    { name } = field;\n\n                if (name !== 'id' && !field.isEqual(this[name], other[name])) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n\n    get subclass() {\n        return new this.constructor(Object.setPrototypeOf({\n            id : _undefined\n        }, this.data), this.stores[0], null, true);\n    }\n\n    /**\n     * Processes raw data, converting values and setting defaults.\n     * @private\n     * @param {Object} data Raw data\n     * @param {Boolean} [ignoreDefaults] Ignore setting default values, used when updating\n     * @returns {Object} Processed data\n     * @category Fields\n     */\n    static processData(data, ignoreDefaults = false, store, record, forceUseRaw) {\n        const\n            { fieldMap, defaultValues } = this,\n            { useRawData = { enabled : false } } = store || { },\n            // Store configured with useRawData uses the supplied data object, polluting it. When not configured with\n            // useRawData it instead makes a copy (intentionally deep, in case data has a prototype chain or contains\n            // arrays or objects)\n            processed = (forceUseRaw || useRawData.enabled) ? data : ObjectHelper.clone(data);\n\n        let fieldName;\n\n        ignoreDefaults = ignoreDefaults || useRawData.disableDefaultValue || forceUseRaw;\n\n        if (!ignoreDefaults) {\n            for (fieldName in defaultValues) {\n                if (processed[fieldName] === _undefined) {\n                    let defaultValue = defaultValues[fieldName];\n\n                    // Avoid sharing arrays across instances\n                    if (Array.isArray(defaultValue)) {\n                        defaultValue = defaultValue.slice();\n                    }\n                    processed[fieldName] = defaultValue;\n                }\n            }\n        }\n\n        if (!useRawData.disableTypeConversion && !forceUseRaw) {\n            // Convert field types which need converting\n            for (fieldName in fieldMap) {\n                const\n                    field                = fieldMap[fieldName],\n                    { name, dataSource } = field,\n                    // Value might have been supplied either using mapped dataSource (when loading JSON etc. for example\n                    // event.myStartDate) or as field name (from internal code, for example event.startDate). If [name]\n                    // exists but not [dataSource], use it.\n                    hasSource            = dataSource !== name,\n                    complex              = field.complexMapping,\n                    sourceExists         = hasSource && (complex\n                        ? ObjectHelper.pathExists(data, dataSource)\n                        : dataSource in data),\n                    useNameForValue      = (name in data) && (!hasSource || !sourceExists),\n                    convert              = !useRawData.disableTypeConversion && field.convert;\n\n                // Only action field definitions which have a convert function or remap data\n                if (useNameForValue || convert) {\n                    // When ignoringDefaults, do not convert unspecified values\n                    if (!ignoreDefaults || useNameForValue || sourceExists) {\n                        const\n                            value     = useNameForValue\n                                ? processed[name]\n                                : complex\n                                    ? ObjectHelper.getPath(processed, dataSource)\n                                    : processed[dataSource],\n                            converted = convert ? field.convert(value, record) : value;\n\n                        if (complex) {\n                            ObjectHelper.setPath(processed, dataSource, converted);\n                        }\n                        else {\n                            processed[dataSource] = converted;\n                        }\n\n                        // Remove [startDate] from internal data holder, only keeping [myStartDate]\n                        if (hasSource) {\n                            delete processed[name];\n                        }\n                    }\n                }\n            }\n        }\n\n        // Fields that needs initializing\n        this.$meta.fields.initable.length && this.initInitables(record, processed);\n\n        return processed;\n    }\n\n    static setupClass(meta) {\n        super.setupClass(meta);\n\n        if (!meta.fields) {\n            // Normally setupFields will only run when a Model defines a fields getter, but we want to always run it:\n            this.setupFields(this, meta);\n        }\n    }\n\n    static setupFields(cls, meta) {\n        const\n            classFields = hasOwn(cls, 'fields') && cls.fields,\n            base        = meta.super.fields,\n            fieldsInfo  = meta.fields = {\n                defs : base?.defs.slice() ?? [],\n\n                // Set to true when an instance's data object is run through exposeProperties\n                exposedData : false,\n\n                // These objects are all keyed by field name:\n                defaults : base ? { ...base.defaults } : {}, // value=field.defaultValue\n                exposed  : Object.create(base?.exposed  ?? null),   // value=true if we've done defineProperty\n                ordinals : Object.create(base?.ordinals ?? null),   // value=index in the defs array\n                map      : Object.create(base?.map      ?? null),   // value=definition object\n                sources  : Object.create(base?.sources  ?? null)    // value=source definition object\n            };\n\n        // We use Object.create(null) as the base for these maps because some models declare \"constructor\" as a field\n        // NOTE: instead of chaining the defaults, we copy them so the defaults object can be used with Object.assign\n        // in other contexts (since it does not copy inherited properties from the prototype chain)\n\n        // Clone the superclass's defaults, and override that with our own defaults.\n        // As we find fields with a defaultValue, more defaults may be added\n        if (hasOwn(cls, 'defaults')) {\n            Object.assign(fieldsInfo.defaults, cls.defaults);\n        }\n\n        // Hook up our field maps with the class hierarchy's fieldMaps.\n        // We need to be able to look up field definitions by the name, or by the dataSource property name\n\n        // If the idField is overridden at this level, create a new field\n        if (hasOwn(cls, 'idField')) {\n            cls.addField({\n                name       : 'id',\n                dataSource : cls.idField,\n                internal   : true\n            });\n            fieldsInfo.exposed[cls.idField] = true;\n        }\n\n        // Process fields defined in the class definition\n        if (classFields?.length) {\n            classFields.map(cls.addField, cls);\n        }\n\n        // Collect fields that need to be initialized (StoreDataField for example)\n        fieldsInfo.initable = fieldsInfo.defs.filter(field => field.init);\n\n        cls.exposeRelations();\n    }\n\n    static get defaultValues() {\n        return this.$meta.fields.defaults;\n    }\n\n    /**\n     * An array containing all the _defined_ fields for this Model class. This will include all superclass's\n     * defined fields.\n     * @property {Core.data.field.DataField[]}\n     * @static\n     * @readonly\n     * @category Fields\n     */\n    static get allFields() {\n        return this.$meta.fields.defs;\n    }\n\n    /**\n     * Same as {@link #property-allFields-static}.\n     * @property {Core.data.field.DataField[]}\n     * @readonly\n     * @category Fields\n     */\n    get allFields() {\n        return this.$meta.fields.defs;\n    }\n\n    /**\n     * An object containing all the _defined_ fields for this Model class. This will include all superclass's\n     * defined fields through its prototype chain. So be aware that `Object.keys` and `Object.entries` will only\n     * access this class's defined fields.\n     * @property {Object<String,Core.data.field.DataField>}\n     * @static\n     * @readonly\n     * @category Fields\n     */\n    static get fieldMap() {\n        return this.$meta.fields.map;\n    }\n\n    /**\n     * Same as {@link #property-fieldMap-static}.\n     * @property {Object<String,Core.data.field.DataField>}\n     * @readonly\n     * @category Fields\n     */\n    get fieldMap() {\n        return this.$meta.fields.map;\n    }\n\n    static get fieldDataSourceMap() {\n        return this.$meta.fields.sources;\n    }\n\n    /**\n     * Makes getters and setters for fields (from definitions and data). Called once when class is defined and once when\n     * data is loaded first time.\n     * @internal\n     * @param {Object} [data] Raw data\n     * @param {Boolean} [raw=true] True if data is raw (contains data sources), False if data contains field names\n     * @category Fields\n     */\n    static exposeProperties(data, raw = true) {\n        const\n            me               = this,\n            fieldsInfo       = me.$meta.fields,\n            // exposeProperties method is called from two different places: from the model constructor which receives\n            // field names, and from store loadData method, which handles raw data. When loading data to store we need\n            // to use names as specified in the dataSource. And when calling a model constructor we need to use field\n            // names\n            fieldMapProperty = raw ? 'exposed' : 'map';\n\n        // Process the raw data properties and expose them as fields unless the property name\n        // has already been used by the \"dataSource\" of a defined field.\n        if (data && me.autoExposeFields && !fieldsInfo.exposedData) {\n            let dataProperty, fieldDef, type;\n\n            for (dataProperty in data) {\n                // We need to skip children field because it can be `true` and that would create boolean field.\n                // See https://github.com/bryntum/support/issues/2705\n                if (!fieldsInfo[fieldMapProperty][dataProperty] && dataProperty !== me.childrenField) {\n                    type = ObjectHelper.typeOf(data[dataProperty]);\n\n                    // Create a field definition in our fieldMap with the flag that it's from data\n                    fieldDef = {\n                        name       : dataProperty,\n                        dataSource : dataProperty,\n                        fromData   : true\n                    };\n\n                    if (fieldDataTypes[type]) {\n                        fieldDef.type = type;\n                    }\n\n                    me.addField(fieldDef);\n                }\n            }\n\n            fieldsInfo.exposedData = true;\n        }\n\n        me.exposeRelations();\n    }\n\n    /**\n     * Add a field definition in addition to those predefined in `fields`.\n     * @param {String|ModelFieldConfig} fieldDef A field name or definition\n     * @category Fields\n     */\n    static addField(fieldDef) {\n        if (fieldDef == null) {\n            return;\n        }\n\n        if (typeof fieldDef === 'string') {\n            fieldDef = {\n                name : fieldDef\n            };\n        }\n\n        const\n            me                = this.initClass(),\n            fieldsInfo        = me.$meta.fields,\n            { ordinals }      = fieldsInfo,\n            propertiesExposed = fieldsInfo.exposed,\n            { name }          = fieldDef,\n            existing          = fieldsInfo.map[name],\n            dataSource        = fieldDef.dataSource || (fieldDef.dataSource = name);\n\n        let field, key;\n\n        if (!existing || (fieldDef.type && fieldDef.type !== existing.type)) {\n            field = DataField.create(fieldDef);\n            field.definedBy = existing ? existing.definedBy : me;\n            field.ordinal = existing ? existing.ordinal : (ordinals[name] = fieldsInfo.defs.length);\n        }\n        else {\n            field = Object.create(existing);\n\n            for (key in fieldDef) {\n                if (key !== 'type') {\n                    field[key] = fieldDef[key];\n                }\n            }\n        }\n\n        field.owner = me;\n        fieldsInfo.defs[field.ordinal] = field;\n        fieldsInfo.map[name] = field;\n\n        if (!fieldsInfo.sources[dataSource]) {\n            fieldsInfo.sources[dataSource] = field;\n        }\n\n        // With complex mapping avoid exposing object as model field\n        if (dataSource.includes('.')) {\n            field.complexMapping = true;\n\n        }\n        if (field.complexMapping) {  // model fields have this set on their prototype...\n            propertiesExposed[dataSource.split('.')[0]] = true;\n        }\n        else {\n            // When iterating through the raw data, if autoExposeFields is set\n            // We do not need to create properties for raw property names we've processed here\n            propertiesExposed[dataSource] = true;\n        }\n\n        // Maintain an object of defaultValues for fields.\n        if ('defaultValue' in field) {\n            fieldsInfo.defaults[dataSource] = field.defaultValue;\n        }\n\n        // Create a property on this Model's prototype, named for the defined field name\n        // which reads the correct property out of the raw data object.\n        if (!internalProps[name]) {\n            // Either creates a new accessor or redefines an existing\n            field.defineAccessor(me.prototype);\n        }\n\n        me._nonPersistableFields = null;\n        me._alwaysWriteFields = null;\n\n        return field;\n    }\n\n    /**\n     * Remove a field definition by name.\n     * @param {String} fieldName Field name\n     * @category Fields\n     */\n    static removeField(fieldName) {\n        const\n            me = this.initClass(),\n            fieldsInfo = me.$meta.fields,\n            definition = fieldsInfo.map[fieldName],\n            { ordinals } = fieldsInfo,\n            index = ordinals[fieldName];\n\n        if (definition) {\n            fieldsInfo.defs.splice(index, 1);\n\n            delete ordinals[fieldName];\n            delete fieldsInfo.defaults[fieldName];\n            delete fieldsInfo.exposed[fieldName];\n            delete fieldsInfo.map[fieldName];\n            delete fieldsInfo.sources[definition.dataSource];\n\n            for (const name in ordinals) {\n                if (ordinals[name] > index) {\n                    --ordinals[name];\n                }\n            }\n\n            // Note: if field was exposed by superclass, this won't do anything...\n            delete me.prototype[fieldName];\n        }\n    }\n\n    /**\n     * Makes getters and setters for related records. Populates a Model#relation array with the relations, to allow it\n     * to be modified later when assigning stores.\n     * @internal\n     * @category Relations\n     */\n    static exposeRelations() {\n        const me = this;\n\n        if (hasOwn(me, 'exposedRelations')) {\n            return;\n        }\n\n        if (me.relations) {\n            me.exposedRelations = [];\n\n            for (const relationName in me.relations) {\n                const relation = me.relations[relationName];\n                relation.relationName = relationName;\n                me.exposedRelations.push(relation);\n\n                // getter and setter for related object\n                if (!Reflect.ownKeys(me.prototype).includes(relationName)) {\n                    defineProperty(me.prototype, relationName, {\n                        enumerable : true,\n                        get        : function() {\n                            // noinspection JSPotentiallyInvalidUsageOfClassThis\n                            return this.getForeign(relationName);\n                        },\n                        set : function(value) {\n                            // noinspection JSPotentiallyInvalidUsageOfClassThis\n                            this.setForeign(relationName, value, relation);\n                        }\n                    });\n                }\n            }\n        }\n    }\n\n    //endregion\n\n    //region Initable fields\n\n    // Initializes any fields using a data type that has an init method, and caches the value to assign to that field to\n    // be able to assign it after all others. That allows the initter to reference the records other data if needed\n    // (baselines use that to reference the task to get default values)\n    static initInitables(record, processedData) {\n        const laterValues = record.meta.initableValues = new Map();\n        // Initialize any initializable fields (only StoreDataField currently)\n        for (const field of this.$meta.fields.initable) {\n            // Set data (if any) later, in case it needs to reference this record\n            const value = ObjectHelper.getPath(processedData, field.dataSource);\n            value !== undefined && laterValues.set(field, value);\n\n            // Init field if not lazy, if lazy app is responsible for doing it\n            !field.lazy && field.init(processedData, record);\n        }\n    }\n\n    // Assigns values to the fields that were initialized earlier (see initInitables above)\n    assignInitables() {\n        const { initableValues } = this.meta;\n\n        for (const [field, value] of initableValues) {\n            if (field.set(value, this.data, this) !== false) {\n                initableValues.delete(field);\n            }\n        }\n    }\n\n    //endregion\n\n    //region Fields\n\n    /**\n     * Flag checked from Store when loading data that determines if fields found in first records should be exposed in\n     * same way as predefined fields.\n     *\n     * <div class=\"note\">Note that we for all but the most basic use cases recommend explicitly defining the fields.\n     * Having them auto exposed can lead to unexpected behavior, if the first record is not complete (fields missing,\n     * null etc).\n     * </div>\n     *\n     * @property {Boolean}\n     * @category Fields\n     */\n    static get autoExposeFields() {\n        return true;\n    }\n\n    /**\n     * Convenience getter to get field definitions from class.\n     * @property {Core.data.field.DataField[]}\n     * @readonly\n     * @category Fields\n     */\n    get fields() {\n        return this.$meta.fields.defs;\n    }\n\n    /**\n     * Convenience function to get the definition for a field from class.\n     * @param {String} fieldName Field name\n     * @returns {Core.data.field.DataField}\n     * @category Fields\n     */\n    getFieldDefinition(fieldName) {\n        return this.$meta.fields.map[fieldName];\n    }\n\n    getFieldDefinitionFromDataSource(dataSource) {\n        return this.$meta.fields.sources[dataSource];\n    }\n\n    /**\n     * Get the names of all fields in data.\n     * @property {String[]}\n     * @readonly\n     * @category Fields\n     */\n    get fieldNames() {\n        return Object.keys(this.data);\n    }\n\n    /**\n     * Get the definition for a field by name. Caches results.\n     * @param {String} fieldName Field name\n     * @returns {Core.data.field.DataField} Field definition or null if none found\n     * @category Fields\n     */\n    static getFieldDefinition(fieldName) {\n        return this.$meta.fields.map[fieldName];\n    }\n\n    /**\n     * Returns dataSource configuration for a given field name\n     * @param {String} fieldName\n     * @returns {String} Field `dataSource` mapping\n     * @internal\n     */\n    static getFieldDataSource(fieldName) {\n        return this.getFieldDefinition(fieldName).dataSource;\n    }\n\n    /**\n     * Get the data source used by specified field. Returns the fieldName if no data source specified.\n     * @param {String} fieldName Field name\n     * @returns {String}\n     * @category Fields\n     */\n    getDataSource(fieldName) {\n        const def = this.constructor.getFieldDefinition(fieldName);\n\n        return def?.dataSource || def?.name;\n    }\n\n    /**\n     * Processes input to a field, converting to expected type.\n     * @param {String} fieldName Field name\n     * @param {*} value Value to process\n     * @returns {*} Converted value\n     * @category Fields\n     */\n    static processField(fieldName, value, record) {\n        const field = this.fieldMap[fieldName];\n        return field?.convert ? field.convert(value, record) : value;\n    }\n\n    //endregion\n\n    //region Relations\n\n    /**\n     * Initializes model relations. Called from store when adding a record.\n     * @private\n     * @category Relations\n     */\n    initRelations() {\n        const\n            me        = this,\n            relations = me.constructor.exposedRelations;\n\n        if (!relations) {\n            return;\n        }\n\n        // TODO: feels strange to have to look at the store for relation config but didn't figure out anything better.\n        // TODO: because other option would be to store it on each model instance, not better...\n\n        me.stores.forEach(store => {\n            if (!store.modelRelations) {\n                store.initRelations();\n            }\n\n            // TODO: not at all tested for multiple stores, can't imagine it works as is\n            const relatedRecords = [];\n\n            store.modelRelations?.forEach(config => {\n                relatedRecords.push({ related : me.initRelation(config), config });\n            });\n            store.updateRecordRelationCache(me, relatedRecords);\n        });\n    }\n\n    /**\n     * Initializes/updates a single relation.\n     * @param config Relation config\n     * @returns {Core.data.Model} Related record\n     * @private\n     * @category Relations\n     */\n    initRelation(config) {\n        const\n            me            = this,\n            foreignId     = me.get(config.foreignKey),\n            foreign       = foreignId !== _undefined && typeof config.foreignStore !== 'string' && config.foreignStore.getById(foreignId),\n            relationCache = me.meta.relationCache || (me.meta.relationCache = {});\n\n        // apparently scheduler tests expect cache to work without matched related record, thus the placeholder\n        relationCache[config.relationName] = foreign || (foreignId != null ? { id : foreignId, placeHolder : true } : null);\n\n        return foreign;\n    }\n\n    removeRelation(config) {\n        const { relationName, foreignKey, nullFieldOnRemove } = config;\n        // (have to check for existence before deleting to work in Safari)\n        if (this.meta.relationCache[relationName]) {\n            delete this.meta.relationCache[relationName];\n            if (nullFieldOnRemove) {\n                // Setting to null silently, to not trigger additional relation behaviour\n                this.setData(foreignKey, null);\n            }\n        }\n    }\n\n    getForeign(name) {\n        return this.meta.relationCache?.[name];\n    }\n\n    setForeign(name, value, config) {\n        const id = Model.asId(value);\n        return this.set(config.foreignKey, id);\n    }\n\n    /**\n     * Get a relation config by name, from the first store.\n     * @param {String} name\n     * @returns {Object}\n     * @private\n     * @category Relations\n     */\n    getRelationConfig(name) {\n        //?\n        // Using first store for relations, might have to revise later...\n        return this.firstStore?.modelRelations?.find(r => r.foreignKey === name);\n    }\n\n    //endregion\n\n    //region Get/set values, data handling\n\n    flatGet(fieldName, dataSource) {\n        // NOTE: There is an inlined copy of this fn in DataField, when changing here make sure it is updated too\n\n        // When changes are batched, they get stored by field name, not dataSource\n        if (this.batching && fieldName in this.meta.batchChanges) {\n            return this.meta.batchChanges[fieldName];\n        }\n\n        return dataSource in this.data ? this.data[dataSource] : this.data[fieldName];\n    }\n\n    complexGet(fieldName, dataSource) {\n        // When changes are batched, they get stored by field name, not dataSource\n        if (this.batching && fieldName in this.meta.batchChanges) {\n            return this.meta.batchChanges[fieldName];\n        }\n\n        return ObjectHelper.getPath(this.data, dataSource);\n    }\n\n    /**\n     * Get value for specified field name. You can also use the generated getters if loading through a Store.\n     * If model is currently in batch operation this will return updated batch values which are not applied to Model\n     * until endBatch() is called.\n     * @param {String} fieldName Field name to get value from\n     * @returns {*} Fields value\n     * @category Fields\n     */\n    get(fieldName) {\n        if (!fieldName) {\n            return;\n        }\n\n        const field = this.fieldMap[fieldName];\n\n        // Getting property of nested record?\n        if (!field && fieldName.includes('.')) {\n            return this.complexGet(fieldName, fieldName);\n        }\n\n        if (field?.complexMapping) {\n            return this.complexGet(fieldName, field.dataSource);\n        }\n\n        return this.flatGet(fieldName, field?.dataSource || fieldName);\n    }\n\n    /**\n     * Internal function used to update a records underlying data block (record.data) while still respecting field\n     * mappings. Needed in cases where a field needs setting without triggering any associated behaviour and it has a\n     * dataSource with a different name.\n     *\n     * For example:\n     * ```javascript\n     * // startDate mapped to data.beginDate\n     * { name : 'startDate', dataSource : 'beginDate' }\n     *\n     * // Some parts of our code needs to update the data block without triggering any of the behaviour associated with\n     * // calling set. This would then not update \"beginDate\":\n     * record.data.startDate = xx;\n     *\n     * // But this would\n     * record.setData('startDate', xx);\n     * ```\n     * @internal\n     * @category Editing\n     */\n    setData(toSet, value) {\n        const { data, fieldMap } = this;\n\n        // Two separate paths for performance reasons\n\n        // setData('name', 'Quicksilver');\n        if (typeof toSet === 'string') {\n            const\n                field      = fieldMap[toSet],\n                dataSource = field?.dataSource ?? toSet;\n\n            if (field?.set) {\n                field.set(value, this.data, this);\n            }\n            else if (field?.complexMapping) {\n                ObjectHelper.setPath(data, dataSource, value);\n            }\n            else {\n                data[dataSource] = value;\n            }\n        }\n        // setData({ name : 'Magneto', power : 'Magnetism' });\n        else {\n            const keys = Object.keys(toSet);\n\n            for (let i = 0; i < keys.length; i++) {\n                const\n                    fieldName  = keys[i],\n                    field      = fieldMap[fieldName],\n                    dataSource = field?.dataSource ?? fieldName;\n\n                if (field?.set) {\n                    field.set(value, this.data, this);\n                }\n                else if (dataSource) {\n                    if (field?.complexMapping) {\n                        ObjectHelper.setPath(data, dataSource, toSet[fieldName]);\n                    }\n                    else {\n                        data[dataSource] = toSet[fieldName];\n                    }\n                }\n            }\n        }\n\n    }\n\n    /**\n     * Returns raw data from the encapsulated data object for the passed field name\n     * @param {String} fieldName The field to get data for.\n     * @returns {*} The raw data value for the field.\n     * @category Editing\n     */\n    getData(fieldName) {\n        const\n            field      = this.fieldMap[fieldName],\n            dataSource = field?.dataSource ?? fieldName;\n\n        if (dataSource) {\n            if (field?.complexMapping) {\n                return ObjectHelper.getPath(this.data, dataSource);\n            }\n\n            return this.data[dataSource];\n        }\n    }\n\n    /**\n     * Silently updates record's id with no flagging the property as modified.\n     * Triggers onModelChange event for changed id.\n     * @param {String|Number} value id value\n     * @private\n     */\n    syncId(value) {\n        const oldValue = this.id;\n        if (oldValue !== value) {\n            this.setData('id', value);\n            const data = { id : { value, oldValue } };\n            this.afterChange(data, data);\n        }\n    }\n\n    /**\n     * Set value for the specified field. You can also use the generated setters if loading through a Store.\n     *\n     * Setting a single field, supplying name and value:\n     *\n     * ```javascript\n     * record.set('name', 'Clark');\n     * ```\n     *\n     * Setting multiple fields, supplying an object:\n     *\n     * ```javascript\n     * record.set({\n     *     name : 'Clark',\n     *     city : 'Metropolis'\n     * });\n     * ```\n     *\n     * @param {String|Object} field The field to set value for, or an object with multiple values to set in one call\n     * @param {*} [value] Value to set\n     * @param {Boolean} [silent] Set to true to not trigger events. If event is recurring, occurrences won't be updated automatically.\n     * @privateparam {Boolean} [validOnly] If set to `true` it will ignore setting a `undefined` value, allowing conversion functions to invalidate a data input\n     * @fires Store#idChange\n     * @fires Store#update\n     * @fires Store#change\n     * @category Editing\n     */\n    set(field, value, silent = false, fromRelationUpdate = false, skipAccessors = false, validOnly = false) {\n        const me = this;\n\n        // We use beforeSet/inSet/afterSet approach here because mixin interested in overriding set() method\n        // like STM, for example, might be mixed before Model class or after. In general, we have no control over this.\n        // STM mixed before, so the only option to wrap set() method body is actually to call\n        // beforeSet()/afterSet().\n\n        if (me.isBatchUpdating) {\n            me.inBatchSet(field, value, silent || me.$silenceBatch);\n            return null;\n        }\n        else {\n            const\n                preResult = me.beforeSet?.(field, value, silent, fromRelationUpdate),\n                wasSet    = me.inSet(field, value, silent, fromRelationUpdate, skipAccessors, validOnly);\n            me.afterSet?.(field, value, silent, fromRelationUpdate, preResult, wasSet);\n            return wasSet;\n        }\n    }\n\n    fieldToKeys(field, value) {\n        if (typeof field !== 'string') {\n            // will get in trouble when setting same field on multiple models without this\n            return ObjectHelper.assign({}, field);\n        }\n\n        return {\n            [field] : value\n        };\n    }\n\n    inBatchSet(field, value, silent) {\n        const\n            me     = this,\n            {\n                meta,\n                constructor,\n                fieldMap\n            }      = me,\n            wasSet = {};\n\n        let cmp, changed = false;\n\n        if (typeof field !== 'string') {\n            Object.keys(me.fieldToKeys(field, value)).forEach(key => {\n                cmp = fieldMap[key] || ObjectHelper;\n                value = constructor.processField(key, field[key], me);\n\n                // Store batch changes\n                if (!cmp.isEqual(meta.batchChanges[key], value)) {\n                    wasSet[key] = {\n                        value,\n                        oldValue : me.get(key)\n                    };\n                    meta.batchChanges[key] = value;\n                    changed = true;\n                }\n            });\n        }\n        else {\n            cmp = fieldMap[field] || ObjectHelper;\n\n            // Minor optimization for engine writing back a lot of changes\n            if (!cmp.isEqual(meta.batchChanges[field], value)) {\n                wasSet[field] = {\n                    value,\n                    oldValue : me.get(field)\n                };\n                meta.batchChanges[field] = value;\n                changed = true;\n            }\n        }\n\n        // Callers need to be able to detect changes\n        if (changed) {\n            me.generation++;\n\n            if (!silent) {\n                // Fire batched events for UIs which need to update themselves during batched updates.\n                // An example is evenResize feature which batches the changes to the endDate\n                // or startDate, but the UI must update during the drag.\n                const event = {\n                    action  : 'update',\n                    record  : me,\n                    records : [me],\n                    changes : wasSet\n                };\n                me.stores.forEach(store => {\n                    store.trigger('batchedUpdate', { ...event });\n                });\n\n                // Propagate to linked records\n                me.forEachLinked((store, record) =>\n                    store.trigger('batchedUpdate', { ...event, record, records : [record] })\n                );\n            }\n        }\n    }\n\n    inSet(field, value, silent, fromRelationUpdate, skipAccessors = false, validOnly = false) {\n        const\n            me       = this,\n            {\n                data,\n                meta,\n                fieldMap,\n                constructor\n            }        = me,\n            {\n                prototype : myProto,\n                childrenField\n            }        = constructor,\n            wasSet   = {},\n            toSet    = me.fieldToKeys(field, value),\n            keys     = Object.keys(toSet);\n        let\n            changed  = false;\n\n        // Give a chance to cancel action before records updated.\n        if (!silent && !me.triggerBeforeUpdate(toSet)) {\n            return null;\n        }\n\n        me.inSetting = true;\n\n        for (let i = 0; i < keys.length; i++) {\n            const key = keys[i];\n\n            // Currently not allowed to set children in a TreeNode this way, will be ignored\n            if (key === childrenField) {\n                continue;\n            }\n\n            const\n                field    = fieldMap[key],\n                cmp      = field || ObjectHelper,\n                readOnly = field?.readOnly,\n                mapping  = field?.dataSource ?? key,\n                useProp  = !skipAccessors && !field && (key in myProto),\n                oldValue = useProp ? me[mapping] : field?.complexMapping ? ObjectHelper.getPath(data, mapping) : data[mapping],\n                value    = constructor.processField(key, toSet[key], me),\n                val      = toSet[key] = { value },\n                relation = me.getRelationConfig(key);\n\n            if (!readOnly && !cmp.isEqual(oldValue, value) && (!validOnly || value !== undefined)) {\n                // Indicate to observers that data has changed.\n                me.generation++;\n                val.oldValue = oldValue;\n\n                changed = true;\n\n                // Update `modified` state which is used in sync request\n                if (cmp.isEqual(me.meta.modified[key], value)) {\n                    // Remove changes if values are the same\n                    Reflect.deleteProperty(meta.modified, key);\n                }\n                else if (!me.ignoreBag) { // Private flag in engine, speeds initial commit up by not recording changes\n                    // Cache its original value\n                    if (!(key in meta.modified)) {\n                        me.storeFieldChange(key, oldValue);\n                    }\n\n                    if (val.oldValue === _undefined) {\n                        Reflect.deleteProperty(val, 'oldValue');\n                    }\n                }\n\n                // The wasSet object keys must be the field *name*, not its dataSource.\n                wasSet[key] = val;\n\n                me.applyValue(useProp, mapping, value, skipAccessors, field);\n\n                // changing foreign key\n                if (relation && !fromRelationUpdate) {\n                    me.initRelation(relation);\n                    me.stores.forEach(store => store.cacheRelatedRecord(me, value, relation.relationName, val.oldValue));\n                }\n            }\n        }\n\n        if (changed) {\n            me.afterChange(toSet, wasSet, silent, fromRelationUpdate, skipAccessors);\n        }\n\n        me.inSetting = false;\n\n        return changed ? wasSet : null;\n    }\n\n    // Provided as a hook for Engine to do what needs to be done which ever way a field value is changed\n    applyValue(useProp, key, value, skipAccessors, field) {\n        const me = this;\n\n        let complexMapping = field?.complexMapping;\n\n        // If we don't have a field, but we have a property define eg, the fullDuration property defined in TaskModel,\n        // then use the property.\n        // Setting parentId moves the node, always route through setter\n        if (key === me.constructor.parentIdField) {\n            // key is the dataSource, if we use property we need to use field name\n            (me.firstStore.getById(value) || me.firstStore.rootNode).insertChild(me, null, false, {\n                orderedParentIndex : { skip : true }\n            });\n            return;\n        }\n        else if (useProp) {\n            // key is the dataSource, if we use property we need to use field name\n            me[field?.name || key] = value;\n            return;\n        }\n\n        if (field?.set) {\n            field.set(value, me.data, me);\n            return;\n        }\n\n        // Might be setting value of nested object\n        if (!field && key.includes('.')) {\n            const nestedName = key.split('.')[0];\n\n            field = me.constructor.fieldMap[nestedName];\n\n            // We use complex mapping if the field's dataSource was defined as such,\n            // OR if we are being asked to set using dot notation and field is of Object type.\n            complexMapping = field?.complexMapping || field?.type === 'object';\n        }\n\n        // Use complex mapping?\n        if (complexMapping) {\n            ObjectHelper.setPath(me.data, key, value);\n        }\n        // Otherwise, push the value through into the data.\n        else {\n            me.data[key] = value;\n        }\n    }\n\n    // skipAccessors argument is used in the engine override\n    afterChange(toSet, wasSet, silent, fromRelationUpdate, skipAccessors) {\n        for (const store of this.stores) {\n            store.onModelChange(this, toSet, wasSet, silent, fromRelationUpdate, skipAccessors);\n        }\n\n        // Propagate to linked records\n        this.forEachLinked((store, record) =>\n            store.onModelChange(record, toSet, wasSet, silent, fromRelationUpdate, skipAccessors)\n        );\n    }\n\n    // Run fn for each store on each linked record\n    forEachLinked(fn) {\n        for (const linked of this.$links) {\n            for (const store of linked.stores) {\n                fn(store, linked);\n            }\n        }\n    }\n\n    /**\n     * This yields `true` if this record is eligible for syncing with the server.\n     * It can yield `false` if the record is in the middle of a {@link #property-isBatchUpdating batched update},\n     * or if it is a {@link #property-isCreating tentative record} yet to be confirmed as a new addition.\n     * @property {Boolean}\n     * @readonly\n     */\n    get isPersistable() {\n        // Record is not persistable if the owning app is in the middle of a batch update\n        // and the record is not flagged as being in the middle of a creation sequence.\n        // This means that a \"new\" record can be added on a conditional basis with its\n        // isCreating property set which means it is examplt from being synced until\n        // the isCreating flag is cleared.\n        return !this.isBatchUpdating && !this.isCreating;\n    }\n\n    /**\n     * True if this model has any uncommitted changes.\n     * @property {Boolean}\n     * @readonly\n     * @category Editing\n     */\n    get isModified() {\n        return Boolean(this.meta.modified && Object.keys(this.meta.modified).length > 0);\n    }\n\n    // TODO: Make this the behaviour of isModified?\n    get hasPersistableChanges() {\n        return this.isPersistable && !ObjectHelper.isEmpty(this.rawModificationData);\n    }\n\n    /**\n     * Returns true if this model has uncommitted changes for the provided field.\n     * @param {String} fieldName Field name\n     * @returns {Boolean} True if the field is changed\n     * @category Editing\n     */\n    isFieldModified(fieldName) {\n        return this.isModified && fieldName in this.meta.modified;\n    }\n\n    /**\n     * Returns field value that should be persisted, or `undefined` if field is configured with `persist: false`.\n     * @param {String|Core.data.field.DataField} nameOrField Name of the field to get value for, or its field definition\n     * @private\n     * @category Fields\n     */\n    getFieldPersistentValue(nameOrField) {\n        const\n            field = typeof nameOrField === 'string' ? this.getFieldDefinition(nameOrField) : nameOrField,\n            name  = field?.name || nameOrField;\n\n        let result;\n\n        if (!field || field.persist) {\n            result = this[name];\n            // if serialize function is provided we use it to prepare the persistent value\n            if (field?.serialize) {\n                result = field.serialize(result, this);\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Get a map of the modified fields in form of an object. The field *names* are used as the property names\n     * in the returned object.\n     * @property {Object}\n     * @readonly\n     * @category Editing\n     */\n    get modifications() {\n        const data = this.rawModifications;\n\n        if (data && Object.keys(data).length) {\n            data[this.constructor.idField] = this.id;\n        }\n\n        return data;\n    }\n\n    get rawModifications() {\n        const\n            me = this,\n            data = {};\n\n        if (!me.isModified) {\n            return null;\n        }\n\n        let keySet = false;\n\n        Object.keys(me.meta.modified).forEach(key => {\n            // TODO: isModified will report record as modified even if a modification won't be persisted here. Should it?\n            const value = me.getFieldPersistentValue(key);\n            if (value !== _undefined) {\n                data[key] = value;\n                keySet = true;\n            }\n        });\n\n        return keySet ? data : null;\n    }\n\n    /**\n     * Get a map of the modified fields in form of an object. The field´s {@link Core.data.field.DataField#config-dataSource}\n     * is used as the property name in the returned object. The record´s id is always included.\n     * @property {Object}\n     * @readonly\n     * @category Editing\n     */\n    get modificationData() {\n        const data = this.rawModificationData;\n\n        // If there are some persistable field changes, append record id\n        if (data && Object.keys(data).length) {\n            ObjectHelper.setPath(data, this.constructor.idField, this.id);\n        }\n\n        return data;\n    }\n\n    /**\n     * Returns a map of the modified persistable fields\n     * @internal\n     * @property {Object}\n     * @category Editing\n     */\n    get rawModificationData() {\n        const\n            me = this,\n            { fieldMap } = me.constructor,\n            data = {};\n\n        if (!me.isModified) {\n            return null;\n        }\n\n        let keySet = false;\n\n        Object.keys(me.meta.modified).forEach(fieldName => {\n            // TODO: isModified will report record as modified even if a modification wont be persisted here. Should it?\n            const field = fieldMap[fieldName];\n\n            // No field definition means there's no original dataSource to update\n            if (field?.persist) {\n                const value = me.getFieldPersistentValue(fieldName);\n\n                if (value !== _undefined) {\n                    ObjectHelper.setPath(data, field.dataSource, value);\n                    keySet = true;\n                }\n            }\n        });\n\n        return keySet ? data : null;\n    }\n\n    /**\n     * Get a map of the modified data fields along with any {@link Core/data/field/DataField#config-alwaysWrite} fields,\n     * in form of an object. The field´s *dataSource* is used as the property name in the returned object.\n     * Used internally by AjaxStore / CrudManager when sending updates.\n     * @property {Object}\n     * @readonly\n     * @category Editing\n     */\n    get modificationDataToWrite() {\n        const\n            alwaysWriteFields = this.constructor.alwaysWriteFields,\n            recordData        = this.modificationData;\n\n        alwaysWriteFields.forEach(fieldName => {\n            recordData[this.getFieldDefinition(fieldName).dataSource] = this.getFieldPersistentValue(fieldName);\n        });\n\n        return recordData;\n    }\n\n    /**\n     * Returns data for **all** {@link Core.data.field.DataField#config-persist persistable} fields in form of an\n     * object, using dataSource if present.\n     * @property {Object}\n     * @internal\n     * @readonly\n     * @category Editing\n     */\n    get persistableData() {\n        const\n            me   = this,\n            data = {};\n\n        me.fields.forEach(field => {\n            const value = me.getFieldPersistentValue(field);\n\n            if (value !== _undefined) {\n                if (field?.complexMapping) {\n                    ObjectHelper.setPath(data, field.dataSource, value);\n                }\n                else {\n                    data[field.dataSource] = value;\n                }\n            }\n        });\n\n        return data;\n    }\n\n    /**\n     * True if this models changes are currently being committed.\n     * @property {Boolean}\n     * @category Editing\n     */\n    get isCommitting() {\n        return Boolean(this.meta.committing);\n    }\n\n    /**\n     * Clear stored changes, used on commit. Does not revert changes.\n     * @param {Boolean} [includeDescendants] Supply `false` to not clear node descendants\n     * @privateparam {Boolean} [removeFromStoreChanges] Update related stores modified collection or not\n     * @privateparam {Object|null} [changes] Set of changes to clear on the record\n     * @category Editing\n     */\n    clearChanges(includeDescendants = true, removeFromStoreChanges = true, changes = null) {\n        const\n            me = this,\n            { meta } = me;\n\n        // If we've received an object with changes, we only need to clean that one up\n        if (changes) {\n            for (const key in changes) {\n                delete meta.modified[key];\n            }\n        }\n        else {\n            meta.modified = {};\n        }\n\n        // We can only remove record from changes if we no modified fields in meta\n        const noChanges = ObjectHelper.isEmpty(meta.modified);\n\n        meta.committing = false;\n\n        if (removeFromStoreChanges) {\n            me.stores.forEach(store => {\n                noChanges && store.modified.remove(me);\n                store.added.remove(me);\n                if (includeDescendants) {\n                    const descendants = store.collectDescendants(me).all;\n                    store.added.remove(descendants);\n                    noChanges && store.modified.remove(descendants);\n                }\n            });\n        }\n    }\n\n    storeFieldChange(key, oldValue) {\n        this.meta.modified[key] = oldValue;\n    }\n\n    /**\n     * Reverts changes in this back to their original values.\n     * @privateparam {Boolean} [silent] Specify `true` to not trigger events.\n     * @category Editing\n     */\n    revertChanges(silent = false) {\n        this.set(this.meta.modified, _undefined, silent);\n    }\n\n    applyChangeset(rawChanges, phantomIdField = '$PhantomId', remote = true) {\n        const\n            me                     = this,\n            modelClass             = me.constructor,\n            {\n                idField,\n                fieldDataSourceMap\n            } = modelClass,\n            rawChangesSimplePaths  = ObjectHelper.pathifyKeys(rawChanges),\n            ownChangesSimplePaths  = ObjectHelper.pathifyKeys(me.modificationData),\n            changes                = {},\n            // Value of id field cannot be changed, it can only be set. In which case phantom id field will be in the\n            // rawChanges objects\n            idChanged              = phantomIdField in rawChanges;\n\n        // Collect the changes into a change set for field names.\n        for (const dataSource in rawChangesSimplePaths) {\n            const\n                field    = fieldDataSourceMap[dataSource],\n                propName = field?.name ?? dataSource;\n\n            // Only apply change to the model:\n            // 1. if changes is remote\n            // 2. or local change is not outdated\n            // 3. we are setting id (in which case phantom id would be in raw changes). id value cannot be changed here,\n            // only assigned if record is phantom - because we use id from the raw data to resolve this record in the\n            // first place\n            if (\n                remote ||\n                (\n                    field?.name === idField\n                        ? idChanged\n                        : (rawChangesSimplePaths[dataSource] === ownChangesSimplePaths[dataSource])\n                )\n            ) {\n                changes[propName] = rawChangesSimplePaths[dataSource];\n            }\n        }\n\n        // Apply all changes in one go, making sure record is considered unmodified after\n        const wasSet = me.set(changes);\n\n        me.clearChanges(false, true, remote ? null : changes);\n\n        // wasSet has format { field : { oldValue, value }}, convert to { field : value }\n        return wasSet ? Object.entries(wasSet).reduce((result, [field, change]) => {\n            result[field] = change.value;\n            return result;\n        }, {}) : {};\n    }\n\n    // TODO CrudManager tests expect all changes to be cleared, keeping this in case we reconsider that\n    // Clear select changes, as opposed to clearChanges that always clears all\n    // clearChangeset(changes) {\n    //     const\n    //         me           = this,\n    //         { modified } = me.meta;\n    //\n    //     for (const fieldName in changes) {\n    //         delete modified[fieldName];\n    //     }\n    //\n    //     for (const store of me.stores) {\n    //         ObjectHelper.isEmpty(modified) && store.modified.remove(me);\n    //         store.added.remove(me);\n    //     }\n    // }\n\n    //endregion\n\n    //region Id\n\n    /**\n     * Gets the records internalId. It is assigned during creation, guaranteed to be globally unique among models.\n     * @property {Number}\n     * @category Identification\n     */\n    get internalId() {\n        return this._internalId;\n    }\n\n    /**\n     * Returns true if the record is new and has not been persisted (and received a proper id).\n     * @property {Boolean}\n     * @readonly\n     * @category Identification\n     */\n    get isPhantom() {\n        return this.id === '' || this.id == null || this.hasGeneratedId;\n    }\n\n    get isModel() {\n        return true;\n    }\n\n    /**\n     * Checks if record has a generated id.\n     *\n     * New records are assigned a generated id based on a UUID (starting with `_generated`), which is intended to be\n     * temporary and should be replaced by the backend on commit.\n     *\n     * @property {Boolean}\n     * @category Identification\n     */\n    get hasGeneratedId() {\n        return typeof this.id === 'string' && this.id.startsWith('_generated');\n    }\n\n    static generateId(text = this.$$name) {\n        return `_generated${text}_${StringHelper.generateUUID()}`;\n    }\n\n    /**\n     * Generates an id for a new record (a phantom id), based on a UUID (starting with `_generated`).\n     *\n     * Generated ids are intended to be temporary and should be replaced by the backend on commit.\n     *\n     * @category Identification\n     * @returns {String}\n     */\n    generateId() {\n        return this.constructor.generateId();\n    }\n\n    /**\n     * Gets the id of specified model or model data object, or the value if passed string/number.\n     * @param {Core.data.Model|String|Number} model\n     * @returns {String|Number} id\n     * @category Identification\n     */\n    static asId(model) {\n        return model?.isModel ? model.id : ObjectHelper.isObject(model) ? model[this.fieldMap.id.dataSource] : model;\n    }\n\n    //endregion\n\n    //region JSON\n\n    /**\n     * Get the records data as a json string.\n     *\n     * ```javascript\n     * const record = new Model({\n     *     title    : 'Hello',\n     *     children : [\n     *         ...\n     *     ]\n     * });\n     *\n     * const jsonString = record.json;\n     *\n     * //jsonString:\n     * '{\"title\":\"Hello\",\"children\":[...]}'\n     * ```\n     *\n     * @member {String}\n     * @category JSON\n     */\n    get json() {\n        return StringHelper.safeJsonStringify(this);  // calls our toJSON() method\n    }\n\n    /**\n     * Used by `JSON.stringify()` to correctly convert this record to json.\n     *\n     * In most cases no point in calling it directly.\n     *\n     * ```\n     * // This will call `toJSON()`\n     * const json = JSON.stringify(record);\n     * ```\n     *\n     * If called manually, the resulting object is a clone of `record.data` + the data of any children:\n     *\n     * ```\n     * const record = new Model({\n     *     title    : 'Hello',\n     *     children : [\n     *         ...\n     *     ]\n     * });\n     *\n     * const jsonObject = record.toJSON();\n     *\n     * // jsonObject:\n     * {\n     *     title : 'Hello',\n     *     children : [\n     *         ...\n     *     ]\n     * }\n     * ```\n     *\n     * @returns {Object}\n     * @category JSON\n     */\n    toJSON() {\n        const\n            { children, unfilteredChildren } = this,\n            jsonData                         = this.persistableData;\n\n        if (unfilteredChildren || children) {\n            jsonData[this.constructor.childrenField] = (unfilteredChildren || children).map(c => c.toJSON());\n        }\n\n        return jsonData;\n    }\n\n    /**\n     * Represent the record as a string, by default as a JSON string. Tries to use an abbreviated version of the\n     * object's data, using id + name/title/text/label/description. If no such field exists, the full data is used.\n     *\n     * ```javascript\n     * const record = new Model({ id : 1, name : 'Steve Rogers', alias : 'Captain America' });\n     * console.log(record.toString()); // logs { \"id\" : 1, \"name\" : \"Steve Rogers\" }\n     * ```\n     *\n     * @returns {String}\n     * @category JSON\n     */\n    toString() {\n        const\n            me        = this,\n            nameField = abbreviationFields.find(field => field in me.constructor.fieldMap),\n            data      = nameField ? { [me.constructor.idField] : me.id, [nameField] : me[nameField] } : me.data;\n\n        return StringHelper.safeJsonStringify(data);\n    }\n\n    //endregion\n\n    //region Batch\n\n    /**\n     * True if this Model is currently batching its changes.\n     * @property {Boolean}\n     * @readonly\n     * @category Editing\n     */\n    get isBatchUpdating() {\n        return Boolean(this.batching);\n    }\n\n    /**\n     * Returns `true` if this Model currently has outstanding batched changes for the specified field name.\n     * @param {String} fieldName The field name to check for batched updates on.\n     * @returns {Boolean}\n     * @category Editing\n     */\n    hasBatchedChange(fieldName) {\n        return this.meta?.batchChanges?.[fieldName];\n    }\n\n    /**\n     * Begin a batch, which stores changes and commits them when the batch ends.\n     * Prevents events from being fired during batch.\n     *\n     * ```javascript\n     * record.beginBatch();\n     * record.name = 'Mr Smith';\n     * record.team = 'Golden Knights';\n     * record.endBatch();\n     * ```\n     *\n     * Please note that you can also set multiple fields in a single call using {@link #function-set}, which in many\n     * cases can replace using a batch:\n     *\n     * ```javascript\n     * record.set({\n     *   name : 'Mr Smith',\n     *   team : 'Golden Knights'\n     * });\n     * ```\n     * @category Editing\n     * @privateparam {Boolean} silentUpdates Suppress firing the `batchUpdatedEvent`\n     */\n    beginBatch(silentUpdates = false) {\n        const me = this;\n\n        if (!me.batching) {\n            me.batching = 0;\n            me.meta.batchChanges = {};\n        }\n\n        if (silentUpdates) {\n            me.$silenceBatch = (me.$silenceBatch || 0) + 1;\n        }\n\n        me.batching++;\n    }\n\n    /**\n     * End a batch, triggering events if data has changed.\n     * @param {Boolean} [silent] Specify `true` to not trigger events. If event is recurring, occurrences won't be updated automatically.\n     * @category Editing\n    */\n    endBatch(silent = false, skipAccessors = false) {\n        const\n            me                = this,\n            { parentIdField } = me.constructor;\n\n        if (!me.batching) {\n            return;\n        }\n\n        me.batching--;\n\n        // Ideally we should track which batch was silenced, but that will complicate code more than what avoiding a few\n        // triggered events is worth (this is private and we do not start batches while batches are ongoing in the\n        // critical code path in engine)\n        me.$silenceBatch && me.$silenceBatch--;\n\n        if (me.batching > 0) {\n            return;\n        }\n\n        // Set pending batch changes\n        if (!ObjectHelper.isEmpty(me.meta.batchChanges)) {\n            const batchChanges = { ...me.meta.batchChanges };\n            me.meta.batchChanges = null;\n\n            // Move to its new parent before applying the other changes.\n            if (batchChanges[parentIdField]) {\n                me.parentId = batchChanges[parentIdField];\n                delete batchChanges[parentIdField];\n            }\n\n            me.set(batchChanges, _undefined, silent, false, skipAccessors);\n        }\n    }\n\n    /**\n     * Cancels current batch operation. Any changes during the batch are discarded.\n     * @category Editing\n     */\n    cancelBatch() {\n        if (this.batching) {\n            const\n                me               = this,\n                { batchChanges } = me.meta,\n                wasSet           = {};\n\n            me.batching = null;\n            me.meta.batchChanges = null;\n\n            me.generation++;\n\n            if (!me.$silenceBatch) {\n                // Create a wasSet describing the revert back from the batched values to the real values.\n                Object.entries(batchChanges).forEach(([key, oldValue]) => {\n                    wasSet[key] = {\n                        oldValue,\n                        value : me[key]\n                    };\n                });\n\n                // Fire batched events for UIs which need to update themselves during batched updates.\n                // An example is evenResize feature which batches the changes to the endDate\n                // or startDate, but the UI must update during the drag.\n                const event = {\n                    action  : 'update',\n                    record  : me,\n                    records : [me],\n                    changes : wasSet\n                };\n                me.stores.forEach(store => {\n                    // Cant use event directly, it will get polluted with `source` and then have that incorrect for\n                    // following calls\n                    store.trigger('batchedUpdate', { ...event });\n                });\n\n                // Propagate to linked records\n                me.forEachLinked((store, record) => {\n                    store.trigger('batchedUpdate', { ...event, record, records : [record] });\n                });\n            }\n\n            me.$silenceBatch && me.$silenceBatch--;\n        }\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Triggers beforeUpdate event for each store and checks if changes can be made from event return value.\n     * @param {Object} changes Data changes\n     * @returns {Boolean} returns true if data changes are accepted\n     * @private\n     */\n    triggerBeforeUpdate(changes) {\n        return !this.stores?.some(s => s.trigger('beforeUpdate', { record : this, changes }) === false);\n    }\n\n    //endregion\n\n    //region Additional functionality\n\n    /**\n     * Makes a copy of this model, assigning the specified id or a generated id and also allowing you to pass field values to\n     * the created copy.\n     *\n     * ```\n     * const record = new Model({ name : 'Super model', hairColor : 'Brown' });\n     * const clone = record.copy({ name : 'Super model clone' });\n     * ```\n     * @param {Number|String|Object} [newId] The id for the copied instance, or any field values to apply\n     * (overriding the values from the source record). If no id provided, one will be auto-generated\n     * @param {Boolean} [deep] True to also clone children\n     * @returns {Core.data.Model} Copy of this model\n     * @category Editing\n     */\n    copy(newId = null, deep) {\n        const\n            me      = this,\n            data    = ObjectHelper.clone(me.data),\n            idField = me.constructor.idField,\n            // Chrono model is adding more logic to copy and that logic should be manageable from arguments. So there is\n            // option to pass object as a last argument to switch method behavior. Used internally only, shouldn't be public.\n            useDeep = ObjectHelper.isObject(deep) ?  deep.deep : deep;\n\n        let id;\n\n        if (newId && typeof newId === 'object') {\n            id = newId[idField];\n\n            Object.assign(data, newId);\n        }\n        else {\n            id = newId;\n        }\n\n        // Iterate over instance children, because data may not reflect actual children state\n        if (useDeep && me.children) {\n            data.children = me.children.map(child => child.copy(undefined, deep));\n        }\n        else {\n            delete data.children;\n            delete data.expanded;\n        }\n\n        if (me.$meta.fields.initable.length > 0) {\n            const json    = me.toJSON();\n            for (const field of me.$meta.fields.initable) {\n                data[field.name] = json[field.name];\n            }\n        }\n\n        if (newId !== false) {\n            // We can use the value from the 'id' property, but as a fallback, generate the id.\n            data[idField] = id || me.generateId(me.firstStore);\n        }\n\n        // Force using raw data when creating a copy, since data was cloned above anyway\n        const copy = new me.constructor(data, null, null, false, true);\n\n        // Store original record internal id to lookup from copy later\n        copy.originalInternalId = me.internalId;\n\n        return copy;\n    }\n\n    // Copies data using the real field names to trigger setters\n    copyData(fromRecord) {\n        const propertiesAndValues = {};\n\n        fromRecord.allFields.forEach(({ name : fieldName }) => {\n            if (fieldName !== fromRecord.constructor.idField) {\n                propertiesAndValues[fieldName] = fromRecord[fieldName];\n            }\n        });\n\n        this.set(propertiesAndValues);\n    }\n\n    /**\n     * Removes this record from all stores (and in a tree structure, also from its parent if it has one).\n     * @param {Boolean} [silent] Specify `true` to not trigger events. If event is recurring, occurrences won't be updated automatically.\n     * @category Editing\n     */\n    remove(silent = false) {\n        const\n            me         = this,\n            { parent } = this;\n\n        // Remove from parent if we're in a tree structure.\n        // This informs the owning store(s)\n        if (parent) {\n            parent.removeChild(me);\n        }\n        // Store handles remove\n        // Not sure what should happen if you try to remove a special row (group row for example), bailing out\n        else if (me.stores.length && !me.isSpecialRow) {\n            me.stores.forEach(s => s.remove(me, silent, false, true));\n        }\n    }\n\n    // Called by stores before removing the record from the store. Returning false prevents the removal (overridden in\n    // ModelLink.js)\n    beforeRemove(stores, records) {\n        return super.beforeRemove(stores, records);\n    }\n\n    //endregion\n\n    //region Validation\n\n    /**\n     * Check if record has valid data. Default implementation returns true, override in your model to do actual validation.\n     * @property {Boolean}\n     * @category Editing\n     */\n    get isValid() {\n        return true;\n    }\n\n    //endregion\n\n    //region Store\n\n    /**\n     * Get the first store that this model is assigned to.\n     * @property {Core.data.Store}\n     * @readonly\n     * @category Misc\n     */\n    get firstStore() {\n        return this.stores.length > 0 && this.stores[0];\n    }\n\n    /**\n     * Joins this record and any children to specified store, if not already joined.\n     * @internal\n     * @param {Core.data.Store} store Store to join\n     * @category Misc\n     */\n    joinStore(store) {\n        const\n            me         = this,\n            { stores } = me;\n\n        if (!stores.includes(store)) {\n            const { unjoinedStores } = me;\n\n            super.joinStore(store);\n\n            store.register(me);\n            stores.push(store);\n            if (unjoinedStores.includes(store)) {\n                unjoinedStores.splice(unjoinedStores.indexOf(store), 1);\n            }\n            me.isLoaded && me.children.forEach(child => child.joinStore(store));\n            me.initRelations();\n\n            if (store.tree && !me.isRoot) {\n                me.instanceMeta(store.id).collapsed = !me.expanded;\n            }\n        }\n    }\n\n    /**\n     * Unjoins this record and any children from specified store, if already joined.\n     * @internal\n     * @param {Core.data.Store} store Store to join\n     * @param {Boolean} [isReplacing] `true` if this record is being replaced\n     * @category Misc\n     */\n    unjoinStore(store, isReplacing = false) {\n        const me = this,\n            { stores, unjoinedStores } = me;\n\n        if (stores.includes(store)) {\n            if (!store.isDestroying) {\n                store.unregister(me);\n\n                unjoinedStores.push(store);\n            }\n\n            // me.children may === true...\n            // If filtered, *all* children must be unjoined when we are.\n            (me.unfilteredChildren || me.children)?.forEach?.(child => child.unjoinStore(store, isReplacing));\n\n            stores.splice(stores.indexOf(store), 1);\n            // keep the cord to allow removed records to reach the store when needed\n\n            super.unjoinStore?.(store, isReplacing);\n\n            // remove from relation cache\n            store.uncacheRelatedRecord(me);\n        }\n    }\n\n    /**\n     * Returns true if this record is contained in the specified store, or in any store if store param is omitted.\n     * @internal\n     * @param {Core.data.Store} store Store to join\n     * @returns {Boolean}\n     * @category Misc\n     */\n    isPartOfStore(store) {\n        if (store) {\n            return store.includes(this);\n        }\n\n        return this.stores.length > 0;\n    }\n\n    /**\n     * Returns true if this record is not part of any store.\n     * @property {Boolean}\n     * @readonly\n     * @internal\n     */\n    get isRemoved() {\n        return !this.isPartOfStore();\n    }\n\n    //endregion\n\n    //region Per instance meta\n\n    /**\n     * Used to set per external instance meta data. For example useful when using a record in multiple grids to store some state\n     * per grid.\n     * @param {String|Object} instanceOrId External instance id or the instance itself, if it has id property\n     * @private\n     * @category Misc\n     */\n    instanceMeta(instanceOrId) {\n        const\n            { meta } = this,\n            id       = instanceOrId.id || instanceOrId;\n\n        if (!meta.map) {\n            meta.map = {};\n        }\n\n        return meta.map[id] || (meta.map[id] = {});\n    }\n\n    /**\n     * When called on a group header row returns list of records in that group. Returns `undefined` otherwise.\n     * @member {Core.data.Model[]|undefined} groupChildren\n     * @category Grouping\n     * @readonly\n     */\n\n    /**\n     * Returns true for a group header record\n     * @member {Boolean}\n     * @category Grouping\n     * @readonly\n     */\n    get isGroupHeader() {\n        return 'groupRowFor' in this.meta;\n    }\n\n    get isGroupFooter() {\n        return 'groupFooterFor' in this.meta;\n    }\n\n    get isSpecialRow() {\n        return Boolean(this.meta?.specialRow);\n    }\n\n    get $original() {\n        return this.isLinked ? this.proxyMeta.originalRecord : this;\n    }\n\n    //endregion\n\n    static get nonPersistableFields() {\n        const me = this;\n\n        if (!me._nonPersistableFields) {\n            me._nonPersistableFields = {};\n\n            me.allFields.forEach(field => {\n                if (!field.persist || field.calculated) {\n                    me._nonPersistableFields[field.name] = 1;\n                }\n            });\n        }\n\n        return me._nonPersistableFields;\n    }\n\n    static get alwaysWriteFields() {\n        const me = this;\n\n        if (!me._alwaysWriteFields) {\n            me._alwaysWriteFields = [];\n\n            me.allFields.forEach(field => {\n                if (field.alwaysWrite) {\n                    me._alwaysWriteFields.push(field.name);\n                }\n            });\n        }\n\n        return me._alwaysWriteFields;\n    }\n\n    // Id with spaces and dots replaced by -, for safe usage as an id in DOM\n    get domId() {\n        return typeof this.id === 'string' ? this.id.replace(/[ .]/g, '-') : this.id;\n    }\n\n    //region Extract config\n\n    // These functions are not meant to be called by any code other than Base#getCurrentConfig()\n\n    // Convert custom modelClass to string, keeping custom fields\n    static toJavaScriptValue(options) {\n        // Get name, skipping the automatically extended name that goes last (MyModel, not MyModelEx)\n        const\n            { names } = this.$meta,\n            className = names[names.length - 2],\n            superName =  names[names.length - 3];\n\n        return `class ${className} extends ${superName} { static fields = ${StringHelper.toJavaScriptValue(this.fields, options)}; }`;\n    }\n\n    // Get fields current values\n    getCurrentConfig(options) {\n        const\n            { data, children }              = this,\n            { defaultValues, applyConfigs } = this.constructor,\n            result                          = applyConfigs ? super.getCurrentConfig(options) : {};\n\n        if (result) {\n            for (const field of this.fields) {\n                if (field.persist) {\n                    const value = ObjectHelper.getPath(data, field.dataSource);\n                    if (!field.isEqual(value, defaultValues[field.name])) {\n                        ObjectHelper.setPath(result, field.dataSource, Base.processConfigValue(value, options));\n                    }\n                }\n            }\n\n            // Always include children\n            if (children) {\n                // Inline available children\n                if (Array.isArray(children)) {\n                    result.children = [];\n                    for (const child of children) {\n                        result.children.push(child.getCurrentConfig(options));\n                    }\n                }\n                // Load on demand\n                else {\n                    result.children = children;\n                }\n            }\n\n            if (this.hasGeneratedId) {\n                delete result.id;\n            }\n\n            delete result.parentId;\n            delete result.parentIndex;\n        }\n\n        return result;\n    }\n\n    //endregion\n}\n\nModel._idField = 'id';\nModel._internalIdCounter = 1;\nModel._assignedIdField = false;\n\nModel.exposeProperties();\n","import DateHelper from '../helper/DateHelper.js';\n\n/**\n * @module Core/data/Duration\n */\n\n/**\n * @typedef {Object} DurationConfig\n * @property {Number} magnitude The magnitude of the duration\n * @property {String} unit The unit of the duration\n */\n\n/**\n * Class which represents a duration object. A duration consists of a `magnitude` and a `unit`.\n *\n * ```javascript\n * {\n *    unit      : String,\n *    magnitude : Number\n * }\n * ```\n *\n * Valid values are:\n * - \"millisecond\" - Milliseconds\n * - \"second\" - Seconds\n * - \"minute\" - Minutes\n * - \"hour\" - Hours\n * - \"day\" - Days\n * - \"week\" - Weeks\n * - \"month\" - Months\n * - \"quarter\" - Quarters\n * - \"year\"- Years\n */\nexport default class Duration {\n\n    /**\n     * Duration constructor.\n     * @param {Number|String} magnitude Duration magnitude value or a duration + magnitude string ('2h', '4d')\n     * @param {String} [unit] Duration unit value\n     */\n    constructor(magnitude, unit) {\n        // we treat `magnitude === null` specially, it indicates the user intention\n        // to unschedule the task\n        if (typeof magnitude === 'number' || magnitude === null) {\n            this._magnitude = magnitude;\n            this._unit = unit;\n        }\n        else {\n            if (typeof magnitude === 'string') {\n                Object.assign(this, DateHelper.parseDuration(magnitude));\n            }\n            if (typeof magnitude === 'object') {\n                Object.assign(this, magnitude);\n            }\n        }\n    }\n\n    /**\n     * Get/Set numeric magnitude `value`.\n     * @property {Number}\n     */\n    get magnitude() {\n        return this._magnitude;\n    }\n\n    set magnitude(value) {\n        this._magnitude = (typeof value === 'number') && value;\n    }\n\n    /**\n     * Get/Set duration unit to use with the current magnitude value.\n     * Valid values are:\n     * - \"millisecond\" - Milliseconds\n     * - \"second\" - Seconds\n     * - \"minute\" - Minutes\n     * - \"hour\" - Hours\n     * - \"day\" - Days\n     * - \"week\" - Weeks\n     * - \"month\" - Months\n     * - \"quarter\" - Quarters\n     * - \"year\"- Years\n     *\n     * @member {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'}\n     */\n    get unit() {\n        return this._unit;\n    }\n\n    set unit(value) {\n        this._unit = DateHelper.parseTimeUnit(value);\n    }\n\n    get isValid() {\n        return this._magnitude != null && Boolean(DateHelper.normalizeUnit(this._unit));\n    }\n\n    /**\n     * The `milliseconds` property is a read only property which returns the number of milliseconds in this Duration\n     * @property {Number}\n     * @readonly\n     */\n    get milliseconds() {\n        // There's no smaller time unit in the Date class than milliseconds, so round any divided values\n        return this.isValid ? Math.round(DateHelper.asMilliseconds(this._magnitude, this._unit)) : 0;\n    }\n\n    /**\n     * Returns truthy value if this Duration equals the passed value.\n     * @param {Core.data.Duration} value\n     * @returns {Boolean}\n     */\n    isEqual(value) {\n        return Boolean(value) && this._magnitude != null && value._magnitude != null && this.milliseconds === value.milliseconds;\n    }\n\n    toString(useAbbreviation) {\n        const\n            me             = this,\n            abbreviationFn = useAbbreviation ? 'getShortNameOfUnit' : 'getLocalizedNameOfUnit';\n        return me.isValid ? `${me._magnitude} ${DateHelper[abbreviationFn](me._unit, me._magnitude !== 1)}` : '';\n    }\n\n    toJSON() {\n        return this.toString();\n    }\n\n    valueOf() {\n        return this.milliseconds;\n    }\n};\n","import Base from '../Base.js';\nimport DateHelper from '../helper/DateHelper.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\nimport FunctionHelper from '../helper/FunctionHelper.js';\nimport Identifiable from '../mixin/Identifiable.js';\nimport Duration from '../data/Duration.js';\n\n/**\n * @module Core/util/CollectionFilter\n */\n\nconst\n    nestedValueReducer = (object, path) => object?.[path],\n    relativeDateUnitRegExp = /^is(this|next|last)(week|month|year)$/i,\n    relativeDateOperators = [\n        'isToday',\n        'isTomorrow',\n        'isYesterday',\n        'isThisWeek',\n        'isNextWeek',\n        'isLastWeek',\n        'isThisMonth',\n        'isNextMonth',\n        'isLastMonth',\n        'isThisYear',\n        'isNextYear',\n        'isLastYear',\n        'isYearToDate'\n    ];\n\n/**\n * A class which encapsulates a single filter operation which may be applied to any object to decide whether to\n * include or exclude it from a set.\n *\n * A CollectionFilter generally has at least three main properties:\n *\n * * `property` - The name of a property in candidate objects from which to extract the value to test\n * * `value` - The value which  this filter uses to test against.\n * * `operator` - The comparison operator, eg: `'='` or `'>'` etc.\n *\n * Given these three essential values, further configurations may affect how the filter is applied:\n *\n * * `caseSensitive` - If configured as `false`, string comparisons are case insensitive.\n * * `convert` - A function which, when passed the extracted value from the candidate object, returns the value to test.\n *\n * A filter may also be configured with a single `filterBy` property. This function is just passed the raw\n * candidate object and must return `true` or `false`.\n *\n * A CollectionFilter may be configured to encapsulate a single filtering function by passing that function as the sole\n * parameter to the constructor:\n *\n *     new CollectionFilter(candidate => candidate.title.contains('search string'));\n *\n */\nexport default class CollectionFilter extends Base.mixin(Identifiable) {\n    static $name = 'CollectionFilter'\n\n    static get defaultConfig() {\n        return {\n            /**\n             * The value against which to compare the {@link #config-property} of candidate objects.\n             * @config {*}\n             */\n            value : null,\n\n            /**\n             * The operator to use when comparing a candidate object's {@link #config-property} with this CollectionFilter's {@link #config-value}.\n             * May be:\n             * `'='`, `'!='`, `'>'`, `'>='`, `'<'`, `'<='`, `'*'`,\n             * `'startsWith'`, `'endsWith'`, `'isIncludedIn'`, `'includes'`, `'doesNotInclude'`,\n             * `'empty'`, `'notEmpty'`, `'between'`, `'notBetween'`, `'sameDay'`,\n             * `'isToday'`, `'isTomorrow'`, `'isYesterday'`, `'isThisWeek'`, `'isLastWeek'`, `'isNextWeek'`, `'isThisMonth'`,\n             * `'isLastMonth'`, `'isNextMonth'`, `'isThisYear'`, `'isLastYear'`, `'isNextYear'`, `'isYearToDate`',\n             * `'isTrue'`, `'isFalse'`\n             * @config {'='|'!='|'>'|'>='|'<'|'<='|'*'|'startsWith'|'endsWith'|'isIncludedIn'|'isNotIncludedIn'|'includes'|'doesNotInclude'|'empty'|'notEmpty'|'between'|'notBetween'|'sameDay'|'isToday'|'isTomorrow'|'isYesterday'|'isThisWeek'|'isLastWeek'|'isNextWeek'|'isThisMonth'|'isLastMonth'|'isNextMonth'|'isThisYear'|'isLastYear'|'isNextYear'|'isYearToDate'|'isTrue'|'isFalse'}\n             */\n            operator : null,\n\n            /**\n             * May be used in place of the {@link #config-property}, {@link #config-value} and {@link #config-property} configs. A function which\n             * accepts a candidate object and returns `true` or `false`\n             * @config {Function}\n             */\n            filterBy : null,\n\n            /**\n             * A function which accepts a value extracted from a candidate object using the {@link #config-property} name, and\n             * returns the value which the filter should use to compare against its {@link #config-value}.\n             * @config {Function}\n             */\n            convert : null,\n\n            /**\n             * Configure as `false` to have string comparisons case insensitive.\n             * @config {Boolean}\n             * @default\n             */\n            caseSensitive : true,\n\n            /**\n             * The `id` of this Filter for when used by a {@link Core.util.Collection} Collection.\n             * By default the `id` is the {@link #config-property} value.\n             * @config {String}\n             */\n            id : null,\n\n            // Type is required to process the Date value in State API. Store doesn't always know about field type to\n            // process filter value, when it applies it from the state, e.g. when you don't declare model field as `date`\n            // type but provide a Date instance there. When DateColumn is used to shows this field, it could add date\n            // filters to the store. When store is applying state it cannot just infer type, because model doesn't\n            // declare it. Only column knows. So to properly process the Date instance for the filter State API would\n            // have to process the field additionally, checking model field type and column type. So it is simpler to\n            // make Filter to put this information. That way when filter is instantiated by the store, it can gracefully\n            // handle value processing, converting date string to the Date instance.\n            // Date is the only known value type so far which requires this processing.\n            type : null,\n\n            /**\n             * Setting the `internal` config on a filter means that it is a fixed part of your store's operation.\n             *\n             * {@link Core.data.Store#function-clearFilters} does not remove `internal` filters. If you add an\n             * `internal` filter, you must explicitly remove it if it is no longer required.\n             *\n             * Grid features which offer column-based filtering do *not* ingest existing store filters on\n             * their data field if the filter is `internal`\n             * @config {Boolean}\n             * @default false\n             */\n            internal : null,\n\n            /**\n             * When `true`, the filter will not be applied.\n             * @config {Boolean}\n             * @default\n             */\n            disabled : false\n        };\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * The name of a property of candidate objects which yields the value to compare against this CollectionFilter's {@link #config-value}.\n             * @member {String} property\n             */\n            /**\n             * The name of a property of candidate objects which yields the value to compare against this CollectionFilter's {@link #config-value}.\n             * @config {String}\n             */\n            property : null\n        };\n    }\n\n    construct(config) {\n        if (typeof config === 'function') {\n            config = {\n                filterBy : config\n            };\n        }\n\n        // If Filter is created without a type (yet everything except applying state) create one\n        if (!config.type) {\n            if (DateHelper.isDate(config.value) || (Array.isArray(config.value) && config.value.every(DateHelper.isDate))) {\n                config.type = 'date';\n            }\n            else if (config.value instanceof Duration) {\n                config.type = 'duration';\n            }\n        }\n        // If type already exist, it means we are applying state and should process value\n        else {\n            if (config.type === 'date' && config.value != null && !Array.isArray(config.value)) {\n                config.value = new Date(config.value);\n            }\n            else if (config.type === 'duration' && config.value != null && !Array.isArray(config.value)) {\n                config.value = new Duration(config.value);\n            }\n        }\n\n        super.construct(config);\n\n        //<debug>\n        if (!this._filterBy) {\n            if (!this.property) {\n                throw new Error('CollectionFilter must be configured with the name of a property to test in candidate items');\n            }\n        }\n        //</debug>\n    }\n\n    /**\n     * When in a Collection (A Collection holds its Filters in a Collection), we need an id.\n     * @property {String}\n     * @private\n     */\n    get id() {\n        if (!this._id) {\n            // Internal filters get a special, unique property so that they cannot collide\n            // with default filters for a field.\n            if (this.internal) {\n                this._id = CollectionFilter.generateId(`b-internal-${this.property}-filter-`);\n            }\n            else {\n                this._id = this.property || CollectionFilter.generateId('b-filter-');\n            }\n        }\n        return this._id;\n    }\n\n    set id(id) {\n        this._id = id;\n    }\n\n    onChange(propertyChanged) {\n        const me = this;\n\n        // Inform any owner (eg a Store), that it has to reassess its CollectionFilters\n        if (!me.isConfiguring && me.owner?.onFilterChanged && !me.owner.isConfiguring) {\n            me.owner.onFilterChanged(me, propertyChanged);\n        }\n    }\n\n    get filterBy() {\n        return this._filterBy || this.defaultFilterBy;\n    }\n\n    /**\n     * May be used in place of the {@link #config-property}, {@link #config-value} and {@link #config-property} configs. A function which\n     * accepts a candidate object and returns `true` or `false`\n     * @type {Function}\n     */\n    set filterBy(filterBy) {\n        this._filterBy = filterBy;\n    }\n\n    defaultFilterBy(candidate) {\n        const me = this;\n        let candidateValue;\n\n        // check if is nested property\n        if (me._propertyItems.length > 1) {\n            // support nested props (https://github.com/bryntum/support/issues/1861)\n            candidateValue = me._propertyItems.reduce(nestedValueReducer, candidate);\n        }\n        else {\n            candidateValue = candidate[me.property];\n        }\n\n        return me[me.operator](me.convert(candidateValue));\n    }\n\n    updateProperty(property) {\n        this._propertyItems = property.split('.');\n\n        // Signal to owner about filter change\n        this.onChange('property');\n    }\n\n    /**\n     * The value against which to compare the {@link #config-property} of candidate objects.\n     * @type {*}\n     */\n    set value(value) {\n        const me = this;\n        me._value = value;\n\n        // Filter value is a processed value to be used by the comparators. Useful when value is object, like Duration field\n        if (Array.isArray(value) && (\n            { date : 1, duration : 1 }[me.type] ||\n            (value.length > 0 && typeof value[0] === 'string')\n        )) {\n            me._filterValue = value.map(v => me.convert(v));\n        }\n        else if (!me.caseSensitive && Array.isArray(value) && value.length > 0 && typeof value[0] === 'string') {\n            me._filterValue = value.map(s => s?.toLowerCase());\n        }\n        else if (!me.caseSensitive && typeof value === 'string') {\n            me._filterValue = value.toLowerCase();\n        }\n        else {\n            me._filterValue = me.convert(value);\n        }\n\n        // Signal to owner about filter change\n        me.onChange('value');\n    }\n\n    get value() {\n        return this._value;\n    }\n\n    get filterValue() {\n        return this._filterValue;\n    }\n\n    /**\n     * The operator to use when comparing a candidate object's {@link #config-property} with this CollectionFilter's {@link #config-value}.\n     * May be:\n     * `'='`, `'!='`, `'>'`, `'>='`, `'<'`, `'<='`, `'*'`,\n     * `'startsWith'`, `'endsWith'`, `'isIncludedIn'`, `'includes'`, `'doesNotInclude'`,\n     * `'empty'`, `'notEmpty'`, `'between'`, `'notBetween'`,\n     * `'isToday'`, `'isTomorrow'`, `'isYesterday'`, `'isThisWeek'`, `'isLastWeek'`, `'isNextWeek'`, `'isThisMonth'`,\n     * `'isLastMonth'`, `'isNextMonth'`, `'isThisYear'`, `'isLastYear'`, `'isNextYear'`, `'isYearToDate`',\n     * `'isTrue'`, `'isFalse'`\n     * @type {'='|'!='|'>'|'>='|'<'|'<='|'*'|'startsWith'|'endsWith'|'isIncludedIn'|'isNotIncludedIn'|'includes'|'doesNotInclude'|'empty'|'notEmpty'|'between'|'notBetween'|'isToday'|'isTomorrow'|'isYesterday'|'isThisWeek'|'isLastWeek'|'isNextWeek'|'isThisMonth'|'isLastMonth'|'isNextMonth'|'isThisYear'|'isLastYear'|'isNextYear'|'isYearToDate'|'isTrue'|'isFalse'}\n     */\n    set operator(operator) {\n        this._operator = operator;\n\n        // Signal to owner about filter change\n        this.onChange('operator');\n    }\n\n    get operator() {\n        const me = this;\n        if (me._operator) {\n            return me._operator;\n        }\n\n        if (Array.isArray(me.filterValue)) {\n            return 'isIncludedIn';\n        }\n\n        return typeof me.filterValue === 'string' ? '*' : '=';\n    }\n\n    convert(value) {\n        // This is a workaround for filterbar feature: it always converts input value to string. When date is typed,\n        // it is converted into string, and Date.valueOf() would return number. So if we are matching date against string\n        // type, we should not convert it.\n        if (this.operator !== 'sameTime' && !(typeof this.filterValue === 'string' && value instanceof Date)) {\n            if (this.operator === 'sameDay') {\n                value = DateHelper.clearTime(value);\n            }\n\n            // if value is a complex type, try to access `value` property to get primitive value\n            value = value?.valueOf() ?? value;\n        }\n\n        value = !this.caseSensitive && (typeof value === 'string') ? value.toLowerCase() : value;\n\n        return value;\n    }\n\n    filter(candidate) {\n        return this.filterBy(candidate);\n    }\n\n    startsWith(v) {\n        return String(v).startsWith(this.filterValue);\n    }\n\n    endsWith(v) {\n        return String(v).endsWith(this.filterValue);\n    }\n\n    isIncludedIn(v) {\n        return this.filterValue.length === 0 || this.filterValue.includes(v);\n    }\n\n    isNotIncludedIn(v) {\n        return !this.isIncludedIn(v);\n    }\n\n    includes(v) {\n        return this.filterValue.length === 0 || String(v).includes(this.filterValue);\n    }\n\n    doesNotInclude(v) {\n        return !this.includes(v);\n    }\n\n    sameTime(v) {\n        return DateHelper.isSameTime(v, this.filterValue);\n    }\n\n    sameDay(v) {\n        return v === this.filterValue;\n    }\n\n    '='(v) {\n        return ObjectHelper.isEqual(v, this.filterValue);\n    }\n\n    '!='(v) {\n        return !ObjectHelper.isEqual(v, this.filterValue);\n    }\n\n    '>'(v) {\n        return ObjectHelper.isMoreThan(v, this.filterValue);\n    }\n\n    '>='(v) {\n        return ObjectHelper.isMoreThan(v, this.filterValue) || ObjectHelper.isEqual(v, this.filterValue);\n    }\n\n    '<'(v) {\n        return ObjectHelper.isLessThan(v, this.filterValue);\n    }\n\n    '<='(v) {\n        return ObjectHelper.isLessThan(v, this.filterValue) || ObjectHelper.isEqual(v, this.filterValue);\n    }\n\n    '*'(v) {\n        return ObjectHelper.isPartial(v, this.filterValue);\n    }\n\n    between(v) {\n        const [start, end] = this._filterValue;\n        return (ObjectHelper.isMoreThan(v, start) || ObjectHelper.isEqual(v, start)) &&\n            (ObjectHelper.isLessThan(v, end) || ObjectHelper.isEqual(v, end));\n    }\n\n    notBetween(v) {\n        return !this.between(v);\n    }\n\n    empty(v) {\n        return v === undefined || v === null || String(v).length === 0;\n    }\n\n    notEmpty(v) {\n        return !this.empty(v);\n    }\n\n    isToday(v) {\n        // Values have already been converted to fixed date range\n        return this.between(v);\n    }\n\n    isTomorrow(v) {\n        return this.between(v);\n    }\n\n    isYesterday(v) {\n        return this.between(v);\n    }\n\n    isThisWeek(v) {\n        return this.between(v);\n    }\n\n    isNextWeek(v) {\n        return this.between(v);\n    }\n\n    isLastWeek(v) {\n        return this.between(v);\n    }\n\n    isThisMonth(v) {\n        return this.between(v);\n    }\n\n    isNextMonth(v) {\n        return this.between(v);\n    }\n\n    isLastMonth(v) {\n        return this.between(v);\n    }\n\n    isThisYear(v) {\n        return this.between(v);\n    }\n\n    isNextYear(v) {\n        return this.between(v);\n    }\n\n    isLastYear(v) {\n        return this.between(v);\n    }\n\n    isYearToDate(v) {\n        return this.between(v);\n    }\n\n    isTrue(v) {\n        return v === true;\n    }\n\n    isFalse(v) {\n        return v === false;\n    }\n\n    // Fill in actual dates relative to now\n    setRelativeDateValues() {\n        this._filterValue = CollectionFilter.getRelativeDateRange(this._operator)\n            .map(date => date.valueOf());\n    }\n\n    static getRelativeDateRange(relativeExpr, now = new Date()) {\n        let todayStart, tomorrowStart, parts, oneTimeUnit, unitStart, which, timeUnit;\n        switch (relativeExpr) {\n            case 'isYearToDate':\n                return [DateHelper.floor(now, '1 year'), now];\n            case 'isToday':\n                todayStart = DateHelper.floor(now, '1 day');\n                return [todayStart, DateHelper.add(todayStart, 1, 'day')];\n            case 'isYesterday':\n                todayStart = DateHelper.floor(now, '1 day');\n                return [DateHelper.add(todayStart, -1, 'day'), todayStart];\n            case 'isTomorrow':\n                tomorrowStart = DateHelper.getStartOfNextDay(now);\n                return [tomorrowStart, DateHelper.add(tomorrowStart, 1, 'day')];\n            case 'isThisWeek':\n            case 'isNextWeek':\n            case 'isLastWeek':\n            case 'isThisMonth':\n            case 'isNextMonth':\n            case 'isLastMonth':\n            case 'isThisYear':\n            case 'isNextYear':\n            case 'isLastYear':\n                parts = relativeExpr.toLowerCase().match(relativeDateUnitRegExp);\n                if (!parts) {\n                    throw new Error(`Unrecognized relative date expression: ${relativeExpr}`);\n                }\n                [, which, timeUnit] = parts;\n                oneTimeUnit = `1 ${timeUnit}`;\n                unitStart = DateHelper.floor(now, oneTimeUnit);\n                if (which === 'next') {\n                    unitStart = DateHelper.add(unitStart, 1, timeUnit);\n                }\n                else if (which === 'last') {\n                    unitStart = DateHelper.add(unitStart, -1, timeUnit);\n                }\n                return [unitStart, DateHelper.add(unitStart, 1, timeUnit)];\n        }\n    }\n\n    // Accepts an array or a Collection\n    static generateFiltersFunction(filters) {\n        if (!filters || (!filters.length && !filters.count)) {\n            return FunctionHelper.returnTrue;\n        }\n\n        for (const filter of filters) {\n            if (filter.type === 'date' && relativeDateOperators.includes(filter._operator)) {\n                filter.setRelativeDateValues();\n            }\n        }\n\n        return function(candidate) {\n            let match = true;\n\n            for (const filter of filters) {\n                // Skip disabled filters\n                if (!filter.disabled) {\n                    match = filter.filter(candidate);\n                }\n                if (!match) {\n                    break;\n                }\n            }\n\n            return match;\n        };\n    }\n}\n","import ObjectHelper from './ObjectHelper.js';\n\n/**\n * @module Core/helper/IdHelper\n */\n\n// Id generation should be on a per page basis, not per module\nconst idCounts = ObjectHelper.getPathDefault(globalThis, 'bryntum.idCounts', Object.create(null));\n\n/**\n * IdHelper provides unique ID generation.\n *\n * This class is not intended for application use, it is used internally by the Bryntum infrastructure.\n * @internal\n */\nexport default class IdHelper {\n    /**\n     * Generate a new id, using IdHelpers internal counter and a prefix\n     * @param {String} prefix Id prefix\n     * @returns {String} Generated id\n     */\n    static generateId(prefix = 'generatedId') {\n        // This produces \"b-foo-1, b-foo-2, ...\" for each prefix independently of the others. In other words, it makes\n        // id's more stable since the counter is on a per-class basis.\n        return prefix + (idCounts[prefix] = (idCounts[prefix] || 0) + 1);\n    }\n}\n","import Base from '../Base.js';\nimport IdHelper from '../helper/IdHelper.js';\n\n/**\n * @module Core/util/CollectionSorter\n */\n\n/**\n * A class which encapsulates a single sorter operation which may be applied to a {@link Core.util.Collection} to\n * order its elements in a specific way.\n *\n * A CollectionSorter generally has two properties:\n *\n * * `property` - The name of a property in collection objects by which to sort\n * * `direction` - The sort direction, `'ASC'` or `'DESC'`.\n *\n * It may also be configured with just a {@link #config-sortFn} function which returns the desired comparison\n * result when passed two objects to compare. Note that this does *not* require or use the\n * {@link #config-property} config. Two collection items are passed for comparison.\n *\n * Further configurations may affect how the sorter is applied:\n *\n * * `convert` - A function which, when passed the {@link #config-property} value from\n * a collection object, returns the value to sort by.\n *\n * A CollectionSorter may be configured to encapsulate a {@link #config-sortFn} by passing that function as the sole\n * parameter to the constructor:\n *\n *     new CollectionSorter((lhs, rhs) => {\n *         lhs = lhs.customerDetails.companyName.toLowerCase();\n *         rhs = rhs.customerDetails.companyName.toLowerCase();\n *\n *         if (lhs < rhs) {\n *             return -1;\n *         }\n *         else if (lhs > rhs) {\n *             return 1;\n *         }\n *         else {\n *             return 0;\n *         }\n *     });\n *\n */\nexport default class CollectionSorter extends Base {\n    static get defaultConfig() {\n        return {\n            /**\n             * The name of a property of collection objects which yields the value to sort by.\n             * @config {String}\n             */\n            property : null,\n\n            /**\n             * The direction to sort in, `'ASC'` or `'DESC'`\n             * @config {'ASC'|'DESC'}\n             * @default\n             */\n            direction : 'ASC',\n\n            /**\n             * A function which takes the place of using {@link #config-property} and {@link #config-direction}.\n             * The function is passed two objects from the collection to compare and must return the comparison result.\n             * @config {Function}\n             */\n            sortFn : null,\n\n            /**\n             * When using {@link #config-property}, this may be specified as a function which takes the raw\n             * property value and returns the value to actually sort by.\n             * @config {Function}\n             */\n            convert : null,\n\n            /**\n             * The `id` of this Sorter for when used by a {@link Core.util.Collection} Collection.\n             * By default the `id` is the {@link #config-property} value.\n             * @config {String}\n             */\n            id : null,\n\n            /**\n             * Use `localeCompare()` when sorting, which lets the browser sort in a locale specific order. Set to `true`,\n             * a locale string or a locale config to enable.\n             *\n             * Enabling this has big negative impact on sorting performance. For more info on `localeCompare()`, see\n             * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare).\n             *\n             * ```javascript\n             * collection.addSorter({ field: 'name', useLocaleSort : 'sv-SE' });\n             * ```\n             *\n             * @config {Boolean|String|Object}\n             * @default false\n             */\n            useLocaleSort : null\n        };\n    }\n\n    construct(config) {\n        if (typeof config === 'function') {\n            config = {\n                sortFn : config\n            };\n        }\n\n        //<debug>\n        if (!config.sortFn && !config.property) {\n            throw new Error('CollectionFilter must be configured with the name of a property to compare or a sortFn');\n        }\n        //</debug>\n\n        super.construct(config);\n    }\n\n    /**\n     * When in a Collection (A Collection holds its Sorters in a Collection), we need an id.\n     * @property {String}\n     * @private\n     */\n    get id() {\n        return this._id || (this._id = this.property || IdHelper.generateId('b-sorter'));\n    }\n\n    set id(id) {\n        this._id = id;\n    }\n\n    set sortFn(sortFn) {\n        this._sortFn = sortFn;\n    }\n\n    get sortFn() {\n        if (this._sortFn) {\n            return this._sortFn;\n        }\n        return this.defaultSortFn;\n    }\n\n    /**\n     * Default sortFn used when no sortFn specified. Uses the {@link #config-property},\n     * {@link #config-direction}, and {@link #config-convert}.\n     * @private\n    */\n    defaultSortFn(lhs, rhs) {\n        const\n            me                                   = this,\n            { convert, property, useLocaleSort } = me,\n            multiplier                           = me.direction.toLowerCase() === 'desc' ? -1 : 1;\n\n        lhs = lhs[property];\n        rhs = rhs[property];\n\n        if (convert) {\n            lhs = convert(lhs);\n            rhs = convert(rhs);\n        }\n\n        if (useLocaleSort && lhs != null && rhs != null && typeof lhs === 'string') {\n            // Use systems locale\n            if (useLocaleSort === true) {\n                return String(lhs).localeCompare(rhs);\n            }\n\n            // Use specified locale\n            if (typeof useLocaleSort === 'string') {\n                return String(lhs).localeCompare(rhs, useLocaleSort);\n            }\n\n            // Use locale config\n            if (typeof useLocaleSort === 'object') {\n                return String(lhs).localeCompare(rhs, useLocaleSort.locale, useLocaleSort);\n            }\n        }\n\n        return ((lhs > rhs) ? 1 : (lhs < rhs ? -1 : 0)) * multiplier;\n    }\n\n    static generateSortFunction(sorters, tieBreaker) {\n        const items = sorters.isCollection ? sorters.values : sorters,\n            n = items.length;\n\n        return (lhs, rhs) => {\n            let comp, i;\n\n            for (i = 0; i < n; ++i) {\n                comp = items[i].sortFn(lhs, rhs);\n                if (comp) {\n                    return comp;\n                }\n            }\n\n            return tieBreaker ? tieBreaker(lhs, rhs) : 0;\n        };\n    }\n}\n","import Base from '../Base.js';\nimport Events from '../mixin/Events.js';\nimport CollectionFilter from './CollectionFilter.js';\nimport CollectionSorter from './CollectionSorter.js';\nimport FunctionHelper from '../helper/FunctionHelper.js';\nimport ArrayHelper from '../helper/ArrayHelper.js';\n\n/**\n * @module Core/util/Collection\n */\n\nconst\n    return0                 = () => 0,\n    reverseNumericSortFn    = (a, b) => b - a,\n    filteredIndicesProperty = Symbol('filteredIndicesProperty'),\n    emptyArray              = Object.freeze([]),\n    sortEvent               = Object.freeze({\n        action   : 'sort',\n        added    : emptyArray,\n        removed  : emptyArray,\n        replaced : emptyArray\n    }),\n    filterEvent             = Object.freeze({\n        action   : 'filter',\n        added    : emptyArray,\n        removed  : emptyArray,\n        replaced : emptyArray\n    }),\n    keyTypes               = {\n        string : 1,\n        number : 1\n    };\n\n// Adds a single item to a single index using the specified key\nfunction addItemToIndex(item, index, key) {\n    // Unique holds a single entry\n    if (index.unique !== false) {\n        index.set(key, item);\n    }\n    // Non-unique index holds a Set\n    else {\n        let set = index.get(key);\n\n        // Add a set if this is the first entry\n        if (!set) {\n            set = new Set();\n            index.set(key, set);\n        }\n\n        // Add entry to the set\n        set.add(item);\n    }\n}\n\n// Removes a single item from a single index using the specified key\nfunction removeItemFromIndex(item, index, key) {\n    // Unique holds single entry, remove it\n    if (index.unique !== false) {\n        index.delete(key);\n    }\n    else if (index.has(key)) {\n        // Remove from set\n        index.get(key).delete(item);\n\n        // Remove turned empty set\n        if (!index.get(key).size) {\n            index.delete(key);\n        }\n    }\n}\n\n// Used to fully build the indices, normal and filtered (if used). Better to do full builds for performance reasons\n// when assigning new datasets. For other CRUD operations, indices are kept up to date elsewhere\nfunction doRebuildIndices(values, indices, keyProps, indexCount) {\n    for (let i = 0; i < values.length; i++) {\n        const item = values[i];\n\n        for (let j = 0; j < indexCount; j++) {\n            const\n                keyProp = keyProps[j],\n                key     = item[keyProp],\n                index   = indices[keyProp];\n\n            addItemToIndex(item, index, key);\n        }\n    }\n}\n\n/**\n * A class which encapsulates a {@link #function-get keyed},\n * {@link #function-addFilter filterable}, {@link #function-addSorter sortable}\n * collection of objects. Entries may not be atomic data types such as `string` or `number`.\n *\n * The entries are keyed by their `id` which is determined by interrogating the {@link #config-idProperty}.\n *\n * To filter a Collection, add a {@link Core.util.CollectionFilter CollectionFilter}\n * using the {@link #function-addFilter} method. A Filter config object may be specified here\n * which will be promoted to a CollectionFilter instance.\n *\n * To sort a Collection, add a {@link Core.util.CollectionSorter CollectionSorter}\n * using the {@link #function-addSorter} method. A Sorter config object may be specified here\n * which will be promoted to a CollectionSorter instance.\n */\nexport default class Collection extends Base.mixin(Events) {\n\n    _sortFunction = null;\n    _addedValues = null;\n\n    //region Config\n\n    static get configurable() {\n        return {\n            /**\n             * Specify the name of the property of added objects which provides the lookup key\n             * @config {String}\n             * @default\n             */\n            idProperty : 'id',\n\n            /**\n             * Specify the names or index configs of properties which are to be indexed for fast lookup.\n             *\n             * Index configs use the format `{ property : string, unique : boolean }`. Unique indices stores one index\n             * per entry, non-unique stores a `Set`. If left out, `unique` defaults to `true`\n             *\n             * @config {String[]|Object[]}\n             * @property {String} property Property to index by\n             * @property {Boolean} [unique=true] `true` for unique keys (~primary keys), `false` for non-unique keys\n             * (~foreign keys)\n             */\n            extraKeys : null,\n\n            /**\n             * Automatically apply filters on item add.\n             * @config {Boolean}\n             * @default\n             */\n            autoFilter : true,\n\n            /**\n             * Automatically apply sorters on item add.\n             * @config {Boolean}\n             * @default\n             */\n            autoSort : true,\n\n            /**\n             * A {@link Core.util.CollectionSorter Sorter}, or Sorter config object, or\n             * an array of these, to use to sort this Collection.\n             * @config {CollectionSorterConfig[]}\n             * @default\n             */\n            sorters : {\n                $config : ['lazy'],\n                value   : []\n            }\n        };\n    }\n\n    get isCollection() {\n        return true;\n    }\n\n    //endregion\n\n    //region Init & destroy\n\n    construct(config) {\n        /**\n         * A counter which is incremented whenever the Collection is mutated in a meaningful way.\n         *\n         * If a {@link #function-splice} call results in no net replacement, removal or addition,\n         * then the `generation` will not be incremented.\n         * @property {Number}\n         * @readonly\n         */\n        this.generation = 0;\n\n        this._values = [];\n\n        super.construct(config);\n    }\n\n    doDestroy() {\n        super.doDestroy();\n\n        const me = this;\n\n        me._values.length = 0;\n\n        if (me.isFiltered) {\n            me._filteredValues.length = 0;\n            me.filters.destroy();\n        }\n\n        // eslint-disable-next-line no-unused-expressions\n        me._sorters?.destroy();\n    }\n\n    //endregion\n\n    //region \"CRUD\"\n\n    /**\n     * Clears this collection.\n     */\n    clear() {\n        const\n            me      = this,\n            removed = me._values.slice();\n\n        if (me.totalCount) {\n            me._values.length = 0;\n            if (me._filteredValues) {\n                me._filteredValues.length = 0;\n            }\n            me._indicesInvalid = true;\n\n            // Indicate to observers that data has changed.\n            me.generation++;\n            me.trigger('change', {\n                action : 'clear',\n                removed\n            });\n        }\n    }\n\n    /**\n     * Compares the content of this Collection with the content of the passed Collection or\n     * with the passed array. Order insensitive. This returns `true` if the two objects passed\n     * contain the same set of items.\n     * @param {Core.util.Collection|Array} other The Collection or array to compare with.\n     * @param {Function} [map] Optionally a function to convert the items into a comparable object\n     * to compare. For example `item => item.id` could be used to compare the ids of the\n     * constituent items.\n     * @returns {Boolean} `true` if the two objects passed have the same content.\n     */\n    equals(other, map) {\n        if (other.isCollection) {\n            other = other.values;\n        }\n\n        if (other.length === this.count) {\n            let { values } = this;\n\n            if (map) {\n                other = other.map(map);\n                values = values.map(map);\n            }\n            return ArrayHelper.delta(other, values).inBoth.length === this.count;\n        }\n        return false;\n    }\n\n    /**\n     * Replaces the internal `values` array with the passed `values`, or `filteredValues` array with the passed `filteredValues`.\n     * If `filteredValues` are not passed explicitly, but storage is filtered, decides internally `values` or `filteredValues` should\n     * be replaced by passed `values`.\n     *\n     * Note that this takes ownership of the array, and the array must not be mutated by outside code.\n     *\n     * This is an internal utility method, not designed for use by application code.\n     *\n     * @param {Object} params Values and parameters to replace\n     * @param {Object[]} params.values The new `values` array\n     * @param {Object[]} [params.filteredValues] The new `filteredValues` array. Applicable only when storage is filtered.\n     * @param {Boolean} [params.silent=false] If true, `change` event will not be fired\n     * @param {Boolean} [params.isNewDataset=false] If true, `values` is a new dataset\n     * @fires change\n     * @internal\n     */\n    replaceValues({ values, filteredValues, silent = false, isNewDataset = false }) {\n        const me = this;\n\n        let replacedValues, replacedFilteredValues;\n\n        // The isNewDataset flag is passed by store#loadData to indicate that it's\n        // a new data load, and that local filters can be applied.\n        // Other use cases are for purely local updates of an existing dataset such as\n        // refreshing the visible data with a values array containing group headers.\n        if (me.isFiltered && !isNewDataset) {\n            const filteredPassed = Boolean(filteredValues);\n\n            // If `filteredValues` are missing, take `values` as a source of filtered values\n            if (!filteredPassed) {\n                filteredValues = values.slice();\n                values = null;\n            }\n            // otherwise check if non-filtered values are passed together with filtered, and replace them too\n            else if (values) {\n                replacedValues = me._values;\n                me._values = values.slice();\n            }\n\n            replacedFilteredValues = me._filteredValues;\n            me._filteredValues = filteredValues.slice();\n        }\n        else {\n            replacedValues = me._values;\n            me._values = values.slice();\n            filteredValues = null;\n\n            if (me.isFiltered && isNewDataset && me.autoFilter) {\n                me._filterFunction = null;\n                me._filteredValues = me._values.filter(me.filterFunction);\n            }\n            else if (me._filteredValues) {\n                me._filteredValues.length = 0;\n            }\n        }\n\n        me._indicesInvalid = true;\n        me._addedValues = undefined;\n\n        // Indicate to observers that data has changed.\n        me.generation++;\n\n        if (!silent) {\n            me.trigger('change', {\n                action : 'replaceValues',\n                replacedValues,\n                replacedFilteredValues,\n                values,\n                filteredValues\n            });\n        }\n    }\n\n    set values(values) {\n        // Want a full rebuild for new dataset, less costly than doing it per item\n        this.invalidateIndices();\n\n        this.splice(0, this._values.length, values);\n    }\n\n    /**\n     * The set of values of this Collection. If this Collection {@link #property-isFiltered},\n     * this yields the filtered data set.\n     *\n     * Setting this property replaces the data set.\n     * @property {Object[]}\n     */\n    get values() {\n        return this.isFiltered ? this._filteredValues : this._values;\n    }\n\n    /**\n     * The set of filtered values of this Collection (those matching the current filters).\n     * @property {Object[]}\n     * @private\n     */\n    get filteredValues() {\n        return this._filteredValues;\n    }\n\n    /**\n     * Iterator that allows you to do `for (const item of collection)`\n     */\n    [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    /**\n     * Executes the passed function for each item in this Collection, passing in the item,\n     * ths index, and the full item array.\n     * @param {Function} fn The function to execute.\n     * @param {Boolean} [ignoreFilters=false] Pass `true` to include all items, bypassing filters.\n     */\n    forEach(fn, ignoreFilters = false) {\n        (this.isFiltered && !ignoreFilters ? this._filteredValues : this._values).forEach(fn);\n    }\n\n    /**\n     * Extracts ths content of this Collection into an array based upon the passed\n     * value extraction function.\n     * @param {Function} fn A function, which, when passed an item, returns a value to place into the resulting array.\n     * @param {Boolean} [ignoreFilters=false] Pass `true` to process an item even if it is filtered out.\n     * @returns {Object[]} An array of values extracted from this Collection.\n     */\n    map(fn, ignoreFilters = false) {\n        return (this.isFiltered && !ignoreFilters ? this._filteredValues : this._values).map(fn);\n    }\n\n    /**\n     * Returns the first item in this Collection which elicits a *truthy* return value from the passed function.\n     * @param {Function} fn A function, which, when passed an item, returns `true` to select it as the item to return.\n     * @param {Boolean} [ignoreFilters=false] Pass `true` to include filtered out items.\n     * @returns {Object} The matched item, or `undefined`.\n     */\n    find(fn, ignoreFilters = false) {\n        return (this.isFiltered && !ignoreFilters ? this._filteredValues : this._values).find(fn);\n    }\n\n    get first() {\n        return this.values[0];\n    }\n\n    get last() {\n        return this.values[this.count - 1];\n    }\n\n    /**\n     * The set of all values of this Collection regardless of filters applied.\n     * @readonly\n     * @property {Object[]}\n     */\n    get allValues() {\n        return this._values;\n    }\n\n    /**\n     * The set of values added to this Collection since the last sort or replaceValues operation.\n     * @private\n     * @readonly\n     * @property {Object[]}\n     */\n    get addedValues() {\n        return this._addedValues;\n    }\n\n    /**\n     * This method ensures that every item in this Collection is replaced by the matched by\n     * `id` item in the other Collection.\n     *\n     * By default, any items in this Collection which are __not__ in the other Collection are removed.\n     *\n     * If the second parameter is passed as `false`, then items which are not in the other\n     * Collection are not removed.\n     *\n     * This can be used for example when updating a selected record Collection when a new\n     * Store or new store dataset arrives. The selected Collection must reference the latest\n     * versions of the selected record `id`s\n     * @param {Core.util.Collection} other The Collection whose items to match.\n     */\n    match(other, allowRemove = true) {\n        const\n            me          = this,\n            { _values } = me,\n            toRemove    = [];\n\n        // Update selected records collection\n        me.forEach(item => {\n            const newInstance = other.get(item.id, true);\n            // If item exists in other Collection, update this with a reference to the other version.\n            // This must happen silently, so splice the _values array\n            if (newInstance) {\n                const\n                    index       = me.indexOf(item, true),\n                    oldInstance = _values[index];\n\n                // Replace the instance directly into our values\n                _values[index] = newInstance;\n\n                // Ensure the indexes match\n                me.removeFromIndices(oldInstance);\n                me.addToIndices(newInstance);\n\n            }\n            else if (allowRemove) {\n                toRemove.push(item);\n            }\n        });\n\n        if (toRemove.length) {\n            me.remove(toRemove);\n        }\n\n        // The filtered set must match the new reality.\n        if (me.isFiltered) {\n            me._filteredValues = me._values.filter(me.filterFunction);\n        }\n\n        return toRemove;\n    }\n\n    /**\n     * Adds items to this Collection. Multiple new items may be passed.\n     *\n     * By default, new items are appended to the existing values.\n     *\n     * Any {@link #property-sorters} {@link #property-sorters} present are re-run.\n     *\n     * Any {@link #property-filters} {@link #property-filters} present are re-run.\n     *\n     * *Note that if application functionality requires add and remove, the\n     * {@link #function-splice} operation is preferred as it performs both\n     * operations in an atomic manner*\n     * @param  {...Object} items The item(s) to add.\n     */\n    add(...items) {\n        if (items.length === 1) {\n            this.splice(this._values.length, null, ...items);\n        }\n        else {\n            this.splice(this._values.length, null, items);\n        }\n    }\n\n    /**\n     * Removes items from this Collection. Multiple items may be passed.\n     *\n     * Any {@link #property-sorters} {@link #property-sorters} present are re-run.\n     *\n     * Any {@link #property-filters} {@link #property-filters} present are re-run.\n     *\n     * *Note that if application functionality requires add and remove, the\n     * {@link #function-splice} operation is preferred as it performs both\n     * operations in an atomic manner*\n     * @param  {...Object} items The item(s) to remove.\n     */\n    remove(...items) {\n        if (items.length === 1) {\n            this.splice(0, ...items);\n        }\n        else {\n            this.splice(0, items);\n        }\n    }\n\n    /**\n     * Moves an individual item, or a block of items to another location.\n     * @param {Object|Object[]} items The item/items to move.\n     * @param {Object} [beforeItem] the item to insert the first item before. If omitted, the `item`\n     * is moved to the end of the Collection.\n     * @returns {Number} The new index of the `item`.\n     */\n    move(items, beforeItem) {\n        items = ArrayHelper.asArray(items);\n\n        // Handle the case of move(myItem, myItem). It's a no-op\n        while (items.length && items[0] === beforeItem) {\n            items.shift();\n        }\n        if (!items.length) {\n            return;\n        }\n\n        const\n            me          = this,\n            { _values } = me,\n            itemIndex   = me.indexOf(items[0], true);\n\n        // move(record, followingrecord) is a no-op\n        if (items.length === 1 && _values[itemIndex + 1] === beforeItem) {\n            return;\n        }\n\n        // Silently remove the items that are to be inserted before the \"beforeItem\".\n        me.suspendEvents();\n        me.remove(items);\n        me.resumeEvents();\n\n        const beforeIndex = beforeItem ? me.indexOf(beforeItem, true) : _values.length;\n\n        if (beforeIndex === -1) {\n            throw new Error('Collection move beforeItem parameter must be present in Collection');\n        }\n\n        _values.splice(beforeIndex, 0, ...items);\n        me._indicesInvalid = 1;\n\n        me.trigger('change', {\n            action : 'move',\n            items,\n            from   : itemIndex,\n            to     : beforeIndex\n        });\n\n        return beforeIndex;\n    }\n\n    /**\n     * The core data set mutation method. Removes and adds at the same time. Analogous\n     * to the `Array` `splice` method.\n     *\n     * Note that if items that are specified for removal are also in the `toAdd` array,\n     * then those items are *not* removed then appended. They remain in the same position\n     * relative to all remaining items.\n     *\n     * @param {Number} index Index at which to remove a block of items. Only valid if the\n     * second, `toRemove` argument is a number.\n     * @param {Object[]|Number} [toRemove] Either the number of items to remove starting\n     * at the passed `index`, or an array of items to remove (If an array is passed, the `index` is ignored).\n     * @param  {Object[]|Object} [toAdd] An item, or an array of items to add.\n     */\n    splice(index = 0, toRemove, ...toAdd) {\n        const\n            me         = this,\n            idProperty = me.idProperty,\n            values     = me._values,\n            newIds     = {},\n            removed    = [],\n            replaced   = [],\n            oldCount   = me.totalCount;\n\n        let added,\n            mutated;\n\n        // Create an \"newIds\" map of the new items so remove ops know if it's really a replace\n        // {\n        //     1234 : true\n        // }\n        // And an \"added\" array of the items that need adding (there was not already an entry for the id)\n        //\n\n        if (me.trigger('beforeSplice', { index, toRemove, toAdd }) === false) {\n            return;\n        }\n\n        if (toAdd) {\n            if (toAdd.length === 1 && Array.isArray(toAdd[0])) {\n                toAdd = toAdd[0];\n            }\n\n            // Check for replacements if we contain any data\n            if (oldCount && toAdd.length) {\n                // Only risk rebuilding the indices if we are adding\n                const idIndex = me.indices[idProperty];\n\n                added = [];\n\n                for (let i = 0; i < toAdd.length; i++) {\n                    const\n                        newItem       = toAdd[i],\n                        id            = newItem[idProperty],\n                        existingItem  = idIndex.get(id),\n                        existingIndex = existingItem ? values.indexOf(existingItem) : -1;\n\n                    // Register incoming id so that removal leaves it be\n                    newIds[id] = true;\n\n                    // Incoming id is already present.\n                    // Replace it in place.\n                    if (existingIndex !== -1) {\n                        // If incoming is the same object, it's a no-op\n                        if (values[existingIndex] !== newItem) {\n                            replaced.push([values[existingIndex], newItem]);\n                            values[existingIndex] = newItem;\n                        }\n                    }\n                    else {\n                        added.push(newItem);\n                    }\n                }\n            }\n            // Empty Collection, we simply add what we're passed\n            else {\n                added = toAdd;\n            }\n        }\n\n        if (toRemove) {\n            // We're removing a chunk starting at index\n            if (typeof toRemove === 'number') {\n                // Ensure we don't walk off the end if the toRemove count exceeds what we contain\n                toRemove = Math.min(toRemove, values.length - index);\n\n                for (let removeIndex = index; toRemove; --toRemove) {\n                    const id = values[removeIndex][idProperty];\n\n                    // If the entry here is being replaced, skip the insertion index past it\n                    if (newIds[id]) {\n                        index++;\n                        removeIndex++;\n                    }\n                    // If the id is not among incoming items, remove it\n                    else {\n                        removed.push(values[removeIndex]);\n                        values.splice(removeIndex, 1);\n                        mutated = true;\n                    }\n                }\n            }\n            // We are removing an item/items\n            else {\n                let contiguous = added.length === 0,\n                    lastIdx;\n\n                toRemove = ArrayHelper.asArray(toRemove);\n\n                // Create array of index points to remove.\n                // They must be in reverse order so that removal leaves following remove indices stable\n                const removeIndices = toRemove.reduce((result, item) => {\n                    const\n                        isNumeric = typeof item === 'number',\n                        idx       = isNumeric ? item : me.indexOf(item, true);\n\n                    // Drop out of contiguous mode if we find a non-contiguous record, or a remove *index*\n                    if (contiguous && (lastIdx != null && idx !== lastIdx + 1 || isNumeric)) {\n                        contiguous = false;\n                    }\n\n                    // Do not include indices out of range in our removeIndices\n                    if (idx >= 0 && idx < oldCount) {\n                        result.push(idx);\n                    }\n                    lastIdx = idx;\n                    return result;\n                }, []).sort(reverseNumericSortFn);\n\n                // If it's a pure remove of contiguous items with no adds, fast track it.\n                if (contiguous) {\n                    // If reduced to zero by being asked to remove items we do not contain\n                    // then this is a no-op\n                    if (removeIndices.length) {\n                        removed.push.apply(removed, toRemove);\n                        values.splice(removeIndices[removeIndices.length - 1], removeIndices.length);\n                        mutated = true;\n                    }\n                }\n                else {\n                    // Loop through removeIndices splicing each index out of the values\n                    // unless there's an incoming identical id.\n                    for (let i = 0; i < removeIndices.length; i++) {\n                        const removeIndex = removeIndices[i];\n\n                        if (removeIndex !== -1) {\n                            const id = values[removeIndex][idProperty];\n\n                            // If the id is not among incoming items, remove it\n                            if (!newIds[id]) {\n                                removed.unshift(values[removeIndex]);\n                                values.splice(removeIndex, 1);\n                                mutated = true;\n                            }\n                        }\n                    }\n                }\n            }\n\n            // Update indices only if they have been used\n            if (removed.length && !me._indicesInvalid) {\n                removed.forEach(me.removeFromIndices, me);\n            }\n        }\n\n        // If we collected genuinely new entries, insert them at the splice index\n        if (added.length) {\n            values.splice(Math.min(index, values.length), 0, ...added);\n            mutated = true;\n\n            // Update indices only if they have been used\n            if (!me._indicesInvalid) {\n                added.forEach(me.addToIndices, me);\n            }\n            if (!me._addedValues) {\n                me._addedValues = new Set();\n            }\n            for (const value of added) {\n                me._addedValues.add(value);\n            }\n        }\n\n        if (removed.length && me._addedValues) {\n            for (const value of removed) {\n                me._addedValues.delete(value);\n            }\n        }\n\n        // Update indices only if they have been used\n        if (replaced.length && !me._indicesInvalid) {\n            replaced.forEach(rep => {\n                me.removeFromIndices(rep[0]);\n                me.addToIndices(rep[1]);\n            });\n        }\n\n        // If we either added or removed items, or we did an in-place replace operation\n        // then inform all interested parties.\n        if (mutated || replaced.length) {\n            // Ensure order of values matches the sorters\n            if (me.isSorted) {\n                me.onSortersChanged();\n            }\n            // The sort will also recreate the filteredValues so that it can be in correct sort order\n            else if (me.isFiltered) {\n                if (me.autoFilter) {\n                    me.onFiltersChanged({ action : 'splice', oldCount : 1 });\n                }\n                else {\n                    me._filteredValues.splice(Math.min(index, me._filteredValues.length), 0, ...added);\n                }\n            }\n\n            // Indicate to observers that data has changed.\n            me.generation++;\n\n            /**\n             * Fired when items are added, replace or removed\n             * @event change\n             * @param {'splice'|'clear'|'replaceValues'|'move'|'sort'|'filter'} action The underlying operation\n             * which caused data change. May be `'splice'` (meaning an atomic add/remove operation, `'sort'` or\n             * `'filter'`), `'clear'`, `'replaceValues'`, `'move'`, `'sort'` or `'filter'`.\n             * @param {Core.util.Collection} source This Collection.\n             * @param {Object[]} removed An array of removed items. If the `action` is `'filter'`, the\n             * removed property represents the records which were filtered out by the action.\n             * @param {Object[]} added An array of added items. If the `action` is `'filter'`, the\n             * added property represents the records which were filtered in by the action.\n             * @param {Object[]} replaced An array of replacements, each entry of which contains `[oldValue, newValue]`.\n             * @param {Number} oldCount The number of items in the full, unfiltered collection prior to the splice operation.\n             */\n            me.trigger('change', {\n                action : 'splice',\n                removed,\n                added,\n                replaced,\n                oldCount\n            });\n        }\n        else {\n            /**\n             * Fired when a {@link #function-splice} operation is requested but the operation\n             * is a no-op and has caused no change to this Collection's dataset. The splice\n             * method's parameters are passed for reference.\n             * @event noChange\n             * @param {Number} index Index at which to remove a block of items.\n             * @param {Object[]|Number} [toRemove] Either the number of items to remove starting\n             * at the passed `index`, or an array of items to remove (If an array is passed, the `index` is ignored).\n             * @param  {Object[]|Object} [toAdd] An item, or an array of items to add.\n             */\n            me.trigger('noChange', {\n                index,\n                toRemove,\n                toAdd\n            });\n        }\n    }\n\n    /**\n     * Change the id of an existing member by mutating its {@link #config-idProperty}.\n     * @param {String|Number|Object} item The item or id of the item to change.\n     * @param {String|Number} newId The id to set in the existing member.\n     */\n    changeId(item, newId) {\n        const\n            me             = this,\n            { idProperty } = me,\n            oldId          = keyTypes[typeof item] ? item : item[idProperty],\n            member         = me.get(oldId);\n\n        if (member) {\n            const existingMember = me.get(newId);\n\n            if (existingMember && member !== existingMember) {\n                throw new Error(`Attempt to set item ${oldId} to already existing member's id ${newId}`);\n            }\n\n            me.removeIndexEntry(item, idProperty, oldId);\n            me.addIndexEntry(item, idProperty, newId);\n\n            // Last on purpose, onItemMutation would fail to find the item if its id was changed prior to the call\n            member[idProperty] = newId;\n        }\n    }\n\n    /**\n     * Returns the item with the passed `id`. By default, filtered are honoured, and\n     * if the item with the requested `id` is filtered out, nothing will be returned.\n     *\n     * To return the item even if it has been filtered out, pass the second parameter as `true`.\n     * @param {*} id The `id` to find.\n     * @param {Boolean} [ignoreFilters=false] Pass `true` to return an item even if it is filtered out.\n     * @returns {Object} The found item, or `undefined`.\n     */\n    get(id, ignoreFilters = false) {\n        return this.getBy(this.idProperty, id, ignoreFilters);\n    }\n\n    getAt(index, ignoreFilters = false) {\n        if (this.isFiltered && !ignoreFilters) {\n            return this._filteredValues[index];\n        }\n        else {\n            return this._values[index];\n        }\n    }\n\n    /**\n     * Returns the item with passed property name equal to the passed value. By default,\n     * filtered are honoured, and if the item with the requested `id` is filtered out,\n     * nothing will be returned.\n     *\n     * To return the item even if it has been filtered out, pass the third parameter as `true`.\n     * @param {String} propertyName The property to test.\n     * @param {*} value The value to find.\n     * @param {Boolean} [ignoreFilters=false] Pass `true` to return an item even if it is filtered out.\n     * @returns {Object} The found item, or `undefined`.\n     */\n    getBy(propertyName, value, ignoreFilters = false) {\n        return this.findItem(propertyName, value, this.isFiltered && ignoreFilters);\n    }\n\n    /**\n     * The number of items in this collection. Note that this honours filtering.\n     * See {@link #property-totalCount};\n     * @property {Number}\n     * @readonly\n     */\n    get count() {\n        return this.values.length;\n    }\n\n    /**\n     * The number of items in this collection regardless of filtering.\n     * @property {Number}\n     * @readonly\n     */\n    get totalCount() {\n        return this._values.length;\n    }\n\n    /**\n     * The property name used to extract item `id`s from added objects.\n     * @member {String} idProperty\n     */\n    updateIdProperty(idProperty) {\n        this.addIndex({ property : idProperty, unique : true });\n    }\n\n    //endregion\n\n    //region Sorting\n\n    /**\n     * The Collection of {@link Core.util.CollectionSorter Sorters} for this Collection.\n     * @member {Core.util.Collection} sorters\n     */\n    changeSorters(sorters) {\n        return new Collection({\n            values            : ArrayHelper.asArray(sorters),\n            internalListeners : {\n                change  : 'onSortersChanged',\n                thisObj : this\n            }\n        });\n    }\n\n    /**\n     * Adds a Sorter to the Collection of Sorters which are operating on this Collection.\n     *\n     * A Sorter may be specified as an instantiated {@link Core.util.CollectionSorter}, or a config object for a\n     * CollectionSorter of the form\n     *\n     *     {\n     *         property  : 'age',\n     *         direction : 'desc'\n     *     }\n     *\n     * Note that by default, a Sorter *replaces* a Sorter with the same `property` to make\n     * it easy to change existing Sorters. A Sorter's `id` is its `property` by default. You\n     * can avoid this and add multiple Sorters for one property by configuring Sorters with `id`s.\n     *\n     * A Sorter may also be specified as a function which compares two objects eg:\n     *\n     *     (lhs, rhs) => lhs.customerDetails.age - rhs.customerDetails.age\n     *\n     * @param {CollectionSorterConfig} sorter A Sorter configuration object to add to the Collection\n     * of Sorters operating on this Collection.\n     * @returns {Core.util.CollectionSorter} The resulting Sorter to make it easy to remove Sorters.\n     */\n    addSorter(sorter) {\n        const result = (sorter instanceof CollectionSorter) ? sorter : new CollectionSorter(sorter);\n\n        this.sorters.add(result);\n\n        return result;\n    }\n\n    /**\n     * A flag which is `true` if this Collection has active {@link #property-sorters}.\n     * @property {Boolean}\n     * @readonly\n     */\n    get isSorted() {\n        return Boolean(this._sorters?.count);\n    }\n\n    onSortersChanged() {\n        const me = this;\n\n        me._sortFunction = null;\n        me._addedValues = null;\n\n        me._values.sort(me.sortFunction);\n\n        me.trigger('change', sortEvent);\n    }\n\n    /**\n     * A sorter function which encapsulates the {@link Core.util.CollectionSorter Sorters}\n     * for this Collection.\n     * @property {Function}\n     * @readonly\n     */\n    get sortFunction() {\n        if (!this._sortFunction) {\n            if (this.isSorted) {\n                this._sortFunction = CollectionSorter.generateSortFunction(this.sorters.values);\n            }\n            else {\n                this._sortFunction = return0;\n            }\n        }\n\n        return this._sortFunction;\n    }\n\n    //endregion\n\n    //region Filtering\n\n    /**\n     * The Collection of {@link Core.util.CollectionFilter Filters} for this Collection.\n     * @property {Core.util.Collection}\n     * @readonly\n     */\n    get filters() {\n        if (!this._filters) {\n            this._filters = new Collection({\n                internalListeners : {\n                    change  : 'onFiltersChanged',\n                    thisObj : this\n                }\n            });\n        }\n        return this._filters;\n    }\n\n    /**\n     * Adds a Filter to the Collection of Filters which are operating on this Collection.\n     *\n     * A Filter may be an specified as an instantiated {@link Core.util.CollectionFilter\n     * CollectionFilter}, or a config object for a CollectionFilter of the form\n     *\n     *     {\n     *         property : 'age',\n     *         operator : '>=',\n     *         value    : 21\n     *     }\n     *\n     * Note that by default, a Filter *replaces* a Filter with the same `property` to make\n     * it easy to change existing Filters. A Filter's `id` is its `property` by default. You\n     * can avoid this and add multiple Filters for one property by configuring Filters with `id`s.\n     *\n     * A Filter may also be specified as a function which filters candidate objects eg:\n     *\n     *     candidate => candidate.customerDetails.age >= 21\n     *\n     * @param {CollectionFilterConfig|Core.util.CollectionFilter} filter A Filter or Filter configuration object to add\n     * to the Collection of Filters operating on this Collection.\n     * @returns {Core.util.CollectionFilter} The resulting Filter to make it easy to remove Filters.\n     */\n    addFilter(filter) {\n        const result = (filter instanceof CollectionFilter) ? filter : new CollectionFilter(filter);\n\n        this.filters.add(result);\n\n        return result;\n    }\n\n    removeFilter(filter) {\n        const { filters } = this;\n\n        if (!filter.isCollectionFilter) {\n            filter = filters.get(filter);\n        }\n        filters.remove(filter);\n    }\n\n    clearFilters() {\n        this.filters.clear();\n    }\n\n    /**\n     * A flag which is `true` if this Collection has active {@link #property-filters}.\n     * @property {Boolean}\n     * @readonly\n     */\n    get isFiltered() {\n        return Boolean(this._filters && this._filters.count);\n    }\n\n    onFiltersChanged({ action, removed : gone, oldCount }) {\n        const\n            me          = this,\n            oldDataset  = oldCount || (action === 'clear' && gone.length) ? me._filteredValues : me._values;\n\n        me._filterFunction = null;\n        me._filteredValues = me._values.filter(me.filterFunction);\n        me._indicesInvalid = true;\n\n        const {\n            toAdd    : added,\n            toRemove : removed\n        } = ArrayHelper.delta(me._filteredValues, oldDataset, true);\n\n        me.trigger('change', { ...filterEvent, added, removed });\n    }\n\n    /**\n     * A filter function which encapsulates the {@link Core.util.CollectionFilter Filters}\n     * for this Collection.\n     * @property {Function}\n     * @readonly\n     */\n    get filterFunction() {\n        if (!this._filterFunction) {\n            if (this.isFiltered) {\n                this._filterFunction = CollectionFilter.generateFiltersFunction(this.filters.values);\n            }\n            else {\n                this._filterFunction = FunctionHelper.returnTrue;\n            }\n        }\n\n        return this._filterFunction;\n    }\n\n    //endregion\n\n    //region Indexing\n\n    changeExtraKeys(extraKeys) {\n        const keys = ArrayHelper.asArray(extraKeys);\n        // Normalize to always be an array of index configs\n        return keys.map(config => {\n            if (typeof config === 'string') {\n                return { property : config, unique : true };\n            }\n            return config;\n        });\n    }\n\n    updateExtraKeys(extraKeys) {\n        for (let i = 0; i < extraKeys.length; i++) {\n            this.addIndex(extraKeys[i]);\n        }\n    }\n\n    /**\n     * Adds a lookup index for the passed property name or index config. The index is built lazily when an index is\n     * searched\n     * @internal\n     * @param {Object} indexConfig An index config\n     * @param {String} indexConfig.property The property name to add an index for\n     * @param {Boolean} [indexConfig.unique] Specify `false` to allow multiple entries of the same index, turning\n     *   entries into sets\n     * @param {Object} [indexConfig.dependentOn] The properties that make the key\n     */\n    addIndex(indexConfig) {\n        const me = this;\n\n        // Combo without valueField used in some tests -> addIndex(undefined). Safeguarding here\n        if (indexConfig) {\n            (me._indices || (me._indices = {}))[indexConfig.property] = new Map();\n\n            // Piggyback the index config\n            Object.assign(me._indices[indexConfig.property], indexConfig);\n\n            // Indices need a rebuild now.\n            me.invalidateIndices();\n\n            if (indexConfig.dependentOn) {\n                me.hasCompositeIndex = true;\n            }\n            /**\n             * this.indices is keyed by the property name, and contains the keys linked to an item in the _values array.\n             * So collection.add({id : foo, name : 'Nige'}, {id : 'bar', name : 'Faye'}) where collection has had an index\n             * added for the \"name\" property would result in:\n             *\n             * {\n             *     id : Map({\n             *         foo : nige,\n             *         bar : faye\n             *     }),\n             *     name : Map({\n             *         Nige : nige,\n             *         Faye : faye\n             *     })\n             * }\n             */\n        }\n    }\n\n    /**\n     * Return the index of the item with the specified key having the specified value.\n     *\n     * By default, filtering is taken into account and this returns the index in the filtered dataset if present. To\n     * bypass this, pass the third parameter as `true`.\n     *\n     * Only useful for indices configured with `unique: true`.\n     *\n     * @param {String} propertyName The name of the property to test.\n     * @param {*} value The value to test for.\n     * @param {Boolean} [ignoreFilters=false] Pass `true` to return the index in\n     * the original data set if the item is filtered out.\n     * @returns {Number} The index of the item or `-1` if not found for unique indices\n     */\n    findIndex(propertyName, value, ignoreFilters = false) {\n        const item = this.findItem(propertyName, value, ignoreFilters);\n\n        if (!item) {\n            return -1;\n        }\n\n        const values = this.isFiltered && !ignoreFilters ? this._filteredValues : this._values;\n\n        return values.indexOf(item);\n    }\n\n    /**\n     * Return the item with the specified key having the specified value.\n     *\n     * By default, filtering is taken into account. To bypass this, pass the third parameter as `true`.\n     *\n     * For indices configured with `unique: false`, a Set of items will be returned.\n     *\n     * @param {String} propertyName The name of the property to test.\n     * @param {*} value The value to test for.\n     * @param {Boolean} [ignoreFilters=false] Pass `true` to return the index in\n     * the original data set if the item is filtered out.\n     * @returns {Object|Set} The found item or Set of items or null\n     */\n    findItem(propertyName, value, ignoreFilters = false) {\n        const\n            me             = this,\n            { isFiltered } = me,\n            index          = isFiltered && !ignoreFilters\n                ? me.indices[filteredIndicesProperty][propertyName]\n                : me.indices[propertyName];\n\n        if (index) {\n            // If the key is a numeric string, cast it to a number and find.\n            // Store's idRegister is an object which treats numeric keys as strings\n            // but Maps are more picky, so we have to work round that.\n            const item = index.get(value) ?? ((typeof value === 'string' && value.length && !isNaN(value) && index.get(Number(value))) || null);\n\n            if (item != null) {\n                return item;\n            }\n        }\n        else {\n            // Search the filtered values if we are filtered and not ignoring filters\n            const\n                values = isFiltered && !ignoreFilters ? me._filteredValues : me._values,\n                count  = values.length;\n\n            for (let i = 0; i < count; i++) {\n                const item = values[i];\n                if (item[propertyName] == value) {\n                    return item;\n                }\n            }\n        }\n\n        return null;\n    }\n\n    removeIndex(propertyName) {\n        delete this._indices[propertyName];\n\n        this.hasCompositeIndex = Object.values(this.indices).some(index => index.dependentOn);\n    }\n\n    /**\n     * Returns the index of the item with the same `id` as the passed item.\n     *\n     * By default, filtering is honoured, so if the item in question has been added, but is currently filtered out of\n     * visibility, `-1` will be returned.\n     *\n     * To find the index in the master, unfiltered dataset, pass the second parameter as `true`;\n     * @param {Object|String|Number} item The item to find, or an `id` to find.\n     * @param {Boolean} [ignoreFilters=false] Pass `true` to find the index in the master, unfiltered data set.\n     * @returns {Number} The index of the item, or `-1` if not found.\n     */\n    indexOf(item, ignoreFilters = false) {\n        return this.findIndex(this.idProperty, keyTypes[typeof item] ? item : item[this.idProperty], ignoreFilters);\n    }\n\n    /**\n     * Returns `true` if this Collection includes an item with the same `id` as the passed item.\n     *\n     * By default, filtering is honoured, so if the item in question has been added,\n     * but is currently filtered out of visibility, `false` will be returned.\n     *\n     * To query inclusion in the master, unfiltered dataset, pass the second parameter as `true`;\n     * @param {Object|String|Number} item The item to find, or an `id` to find.\n     * @param {Boolean} [ignoreFilters=false] Pass `true` to find the index in the master, unfiltered data set.\n     * @returns {Boolean} True if the passed item is found.\n     */\n    includes(item, ignoreFilters = false) {\n        if (Array.isArray(item)) {\n            return item.some(item => this.includes(item));\n        }\n\n        return Boolean(this.findItem(this.idProperty, keyTypes[typeof item] ? item : item[this.idProperty], ignoreFilters));\n    }\n\n    get indices() {\n        if (this._indicesInvalid) {\n            this.rebuildIndices();\n        }\n        return this._indices;\n    }\n\n    invalidateIndices() {\n        this._indicesInvalid = true;\n    }\n\n    /**\n     * Called when the Collection is mutated and the indices have been flagged as invalid.\n     *\n     * Rebuilds the indices object to allow lookup by keys.\n     * @internal\n     */\n    rebuildIndices() {\n        const\n            me         = this,\n            isFiltered = me.isFiltered,\n            indices    = (me._indices || (me._indices = {})),\n            keyProps   = Object.keys(indices),\n            indexCount = keyProps.length,\n            values     = me._values;\n\n        let filteredIndices;\n\n        if (isFiltered) {\n            filteredIndices = indices[filteredIndicesProperty] = {};\n        }\n\n        // First, clear indices.\n        for (let i = 0; i < indexCount; i++) {\n            const index = indices[keyProps[i]];\n            index.clear();\n\n            if (isFiltered) {\n                let filteredIndex = filteredIndices[keyProps[i]];\n\n                if (filteredIndex) {\n                    filteredIndex.clear();\n                }\n                else {\n                    filteredIndex = filteredIndices[keyProps[i]] = new Map();\n                    // Piggyback config\n                    filteredIndex.unique = index.unique;\n                }\n            }\n        }\n\n        doRebuildIndices(values, indices, keyProps, indexCount);\n\n        // Create a parallel lookup structure into the _filteredValues\n        if (isFiltered) {\n            doRebuildIndices(me._filteredValues, filteredIndices, keyProps, indexCount);\n        }\n\n        me._indicesInvalid = false;\n    }\n\n    // Returns an array with [indices] or [indices, filteredIndices] if filtering is used\n    getIndices(propertyName) {\n        const indices = [this.indices[propertyName]];\n\n        if (this.isFiltered) {\n            indices.push(this.indices[filteredIndicesProperty][propertyName]);\n        }\n\n        return indices;\n    }\n\n    /**\n     * Add an item to all indices\n     * @param {*} item Item already available in the Collection\n     * @private\n     */\n    addToIndices(item) {\n        Object.keys(this.indices).forEach(propertyName => {\n            this.addIndexEntry(item, propertyName, item[propertyName]);\n        });\n    }\n\n    /**\n     * Remove an item from all indices\n     * @param {*} item Item already available in the Collection\n     * @private\n     */\n    removeFromIndices(item) {\n        Object.keys(this.indices).forEach(propertyName => {\n            this.removeIndexEntry(item, propertyName, item[propertyName]);\n        });\n    }\n\n    /**\n     * Remove an entry from an index, and if filtering is used also from the filtered index.\n     * @param {*} item Item already available in the Collection\n     * @param {String} propertyName Property of the item, will be matched with configured indices\n     * @param {*} oldValue Value to remove\n     * @private\n     */\n    removeIndexEntry(item, propertyName, oldValue) {\n        this.getIndices(propertyName).forEach(index => removeItemFromIndex(item, index, oldValue));\n    }\n\n    /**\n     * Add a new entry to an index, and if filtering is used also to the filtered index.\n     * @param {*} item Item already available in the Collection\n     * @param {String} propertyName Property of the item, will be matched with configured indices\n     * @param {*} value Value to store\n     * @private\n     */\n    addIndexEntry(item, propertyName, value) {\n        this.getIndices(propertyName).forEach(index => addItemToIndex(item, index, value));\n    }\n\n    /**\n     * Call externally to update indices on item mutation (from Store)\n     * @param {*} item Item already available in the Collection\n     * @param {Object} wasSet Uses the `wasSet` format from Store, `{ field : { oldValue, newValue } }`\n     * @internal\n     */\n    onItemMutation(item, wasSet) {\n        const me = this;\n\n        // Iterate over changes if we have extra indices defined, keeping those indices up to date\n        if (!me._indicesInvalid && Object.keys(me.indices).length > 1) {\n            Object.keys(wasSet).forEach(propertyName => {\n                const indexConfig = me.indices[propertyName];\n\n                if (indexConfig) {\n                    const { value, oldValue } = wasSet[propertyName];\n\n                    me.removeIndexEntry(item, propertyName, oldValue);\n                    me.addIndexEntry(item, propertyName, value);\n                }\n                else if (me.hasCompositeIndex) {\n                    // Now check if any composite index depends on the property that was changed\n                    const dependentIndex = Object.values(me.indices).find(index => index.dependentOn?.[propertyName]);\n\n                    if (dependentIndex) {\n                        const keysAndOldValues = {};\n\n                        for (const o in dependentIndex.dependentOn) {\n                            keysAndOldValues[o] = wasSet[o]?.oldValue || item[o];\n                        }\n\n                        const oldIndex = item.buildIndexKey(keysAndOldValues);\n                        me.removeIndexEntry(item, dependentIndex.property, oldIndex);\n                        me.addIndexEntry(item, dependentIndex.property, item[dependentIndex.property]);\n                    }\n                }\n            });\n        }\n    }\n\n    //endregion\n}\n\n// These are used by Bag for the same purpose\nexport  { keyTypes };\n","import { keyTypes } from './Collection.js';\nimport ArrayHelper from '../helper/ArrayHelper.js';\n\nconst\n    nonPrimitives          = new WeakMap(),\n    safeIndexKey           = (value) => {\n        if (value && typeof value === 'object') {\n            let substitute = nonPrimitives.get(value);\n            if (substitute === undefined) {\n                substitute = Symbol('bscik'); // Bryntum safe collection index key\n                nonPrimitives.set(value, substitute);\n            }\n            value = substitute;\n        }\n\n        return value;\n    };\n\n/**\n * @module Core/util/Bag\n */\n\n/**\n * A simple collection class to contain unique, keyed items.\n * @internal\n */\nexport default class Bag {\n    constructor(config) {\n        const me = this;\n\n        me.generation = 0;\n        me.items = new Set();\n        me.idMap = {};\n        me.idProperty = 'id';\n\n        if (config) {\n            if (config.idProperty) {\n                me.idProperty = config.idProperty;\n            }\n            if (config.values) {\n                me.values = config.values;\n            }\n        }\n    }\n\n    /**\n     * Returns the item with the passed `id`.\n     *\n     * @param {*} id The `id` to find.\n     * @returns {Object} The found item, or `undefined`.\n     */\n    get(key) {\n        return this.idMap[safeIndexKey(key)];\n    }\n\n    /**\n     * The number of items in this Bag.\n     * @property {Number}\n     * @readonly\n     */\n    get count() {\n        return this.items.size;\n    }\n\n    /**\n     * Adds the passed item(s) to this Bag. Existing items with the same ID\n     * will be replaced.\n     * @param {Object|Object[]} toAdd Item(s) to add.\n     */\n    add(...toAdd) {\n        if (toAdd.length === 1 && Array.isArray(toAdd[0])) {\n            toAdd = toAdd[0];\n        }\n\n        const\n            me  = this,\n            {\n                items,\n                idMap,\n                idProperty\n            }   = me,\n            len = toAdd.length;\n\n        for (let i = 0; i < len; i++) {\n            const\n                item         = toAdd[i],\n                key          = keyTypes[typeof item] ? item : safeIndexKey(item[idProperty]),\n                existingItem = idMap[key];\n\n            // Not already present\n            if (existingItem == null) {\n                idMap[key] = item;\n                items.add(item);\n                me.generation++;\n            }\n            // Already present, replace it if different. No generational change.\n            // IDs rule.\n            else if (existingItem !== item) {\n                idMap[key] = item;\n                items.delete(existingItem);\n                items.add(item);\n            }\n        }\n    }\n\n    /**\n     * Returns `nth` item in this Bag.\n     * @param {Number} nth The index of the matching item. Negative numbers index for the last item. For example, -1\n     * returns the last item, -2 the 2nd to last item etc.\n     * @returns {Object} The matched item, or `undefined`.\n     */\n    at(nth) {\n        let item, ret;\n\n        if (nth < 0) {\n            nth += this.count;  // ex: count=10 ... -1 -> 9, -2 -> 8, -3 -> 7, ... -9 -> 1, -10 -> 0\n        }\n\n        for (item of this.items) {\n            if (!nth--) {\n                ret = item;\n                break;\n            }\n        }\n\n        return ret;\n    }\n\n    /**\n     * Removes the passed item(s) from this Bag.\n     * @param {Object|Object[]} toRemove Item(s) to remove.\n     */\n    remove(toRemove) {\n        toRemove = ArrayHelper.asArray(toRemove);\n\n        const\n            { items, idMap, idProperty } = this,\n            len = toRemove.length;\n\n        for (let i = 0; i < len; i++) {\n            const\n                item         = toRemove[i],\n                key          = keyTypes[typeof item] ? item : safeIndexKey(item[idProperty]),\n                existingItem = idMap[key];\n\n            // Found match, so delete it\n            if (existingItem != null) {\n                items.delete(existingItem);\n                delete idMap[key];\n                this.generation++;\n            }\n        }\n    }\n\n    clear() {\n        this.items.clear();\n        this.idMap = {};\n        this.generation++;\n    }\n\n    /**\n     * Returns the number of items in this Bag which elicits a truthy return value from the passed function.\n     * @param {Function} fn A function, which, when passed an item, returns `true` to select it as the item to return.\n     * @returns {Number} The number of matched items.\n     */\n    countOf(fn) {\n        let ret = 0,\n            item;\n\n        for (item of this.items) {\n            if (fn(item)) {\n                ++ret;\n            }\n        }\n\n        return ret;\n    }\n\n    /**\n     * Change the id of an existing member by mutating its idProperty.\n     * @param {String|Number|Object} item The item or id of the item to change.\n     * @param {String|Number} newId The id to set in the existing member.\n     */\n    changeId(item, newId) {\n        const\n            me                    = this,\n            { idMap, idProperty } = me,\n            oldId                 = keyTypes[typeof item] ? item : safeIndexKey(item[idProperty]),\n            member                = me.get(oldId);\n\n        if (member) {\n            const existingMember = me.get(newId);\n\n            if (existingMember && member !== existingMember) {\n                throw new Error(`Attempt to set item ${oldId} to already existing member's id ${newId}`);\n            }\n\n            member[idProperty] = newId;\n            delete idMap[oldId];\n            idMap[newId] = member;\n        }\n    }\n\n    /**\n     * Extracts the matching items from this Bag into an array based upon the passed value filter function.\n     * @param {Function} fn A function, which, when passed an item, returns a `true` to place into the resulting array.\n     * @param {Object} [thisObj] The `this` reference when the function is called.\n     * @returns {Object[]} An array of values extracted from this Bag.\n     */\n    filter(fn, thisObj) {\n        const\n            { items } = this,\n            result    = [];\n\n        let i = 0;\n\n        items.forEach(item => {\n            if (fn.call(thisObj, item, i++, items)) {\n                result.push(item);\n            }\n        });\n\n        return result;\n    }\n\n    /**\n     * Returns `true` if this Collection includes an item with the same `id` as the passed item.\n     *\n     * @param {Object|String|Number} item The item to find, or an `id` to find.\n     * @returns {Boolean} True if the passed item is found.\n     */\n    includes(item) {\n        const key = keyTypes[typeof item] ? item : safeIndexKey(item[this.idProperty]);\n\n        return Boolean(this.idMap[key]);\n    }\n\n    /**\n     * Extracts the content of this Bag into an array based upon the passed\n     * value extraction function.\n     * @param {Function} fn A function, which, when passed an item, returns a value to place into the resulting array.\n     * @param {Object} [thisObj] The `this` reference when the function is called.\n     * @returns {Object[]} An array of values extracted from this Bag.\n     */\n    map(fn, thisObj) {\n        const\n            { items } = this,\n            result    = new Array(items.size);\n\n        // Set has no map\n        let i = 0;\n\n        items.forEach(item => {\n            result[i] = fn.call(thisObj, item, i++, items);\n        });\n\n        return result;\n    }\n\n    /**\n     * Executes the passed function for each item in this Bag, passing in the item.\n     * @param {Function} fn The function to execute.\n     * @param {Object} [thisObj] The `this` reference when the function is called.\n     */\n    forEach(fn, thisObj) {\n        return this.items.forEach(fn, thisObj);\n    }\n\n    /**\n     * Returns `nth` item in this Bag which elicits a truthy return value from the provided matcher function `fn`.\n     * @param {Function} fn A function which, when passed an item, returns `true` to select the item as a match.\n     * @param {Number} [nth=0] The index of the matching item. By default, 0 returns the first item that matches\n     * according to `fn`. Negative numbers index for the last item. For example, -1 returns the last matching item,\n     * -2 the 2nd to last matching item etc..\n     * @returns {Object} The matched item, or `undefined`.\n     */\n    find(fn, nth = 0) {\n        let item, ret;\n\n        if (nth < 0) {\n            nth += this.countOf(fn);  // ex: count=10 ... -1 -> 9, -2 -> 8, -3 -> 7, ... -9 -> 1, -10 -> 0\n        }\n\n        for (item of this.items) {\n            if (fn(item) && !nth--) {\n                ret = item;\n                break;\n            }\n        }\n\n        return ret;\n    }\n\n    /**\n     * Iterator that allows you to do for (let item of bag)\n     */\n    [Symbol.iterator]() {\n        return this.items[Symbol.iterator]();\n    }\n\n    indexOf(item, matchFn) {\n        let index = -1,\n            it;\n\n        for (it of this.items) {\n            if (!matchFn || matchFn(it)) {\n                ++index;\n\n                if (it === item) {\n                    return index;\n                }\n            }\n        }\n\n        return -1;\n    }\n\n    /**\n     * The set of values of this Bag.\n     *\n     * Setting this property replaces the data set.\n     * @property {Object[]}\n     */\n    get values() {\n        return [...this.items];\n    }\n\n    set values(values) {\n        values = ArrayHelper.asArray(values);\n\n        this.clear();\n        this.add.apply(this, values);\n        this.generation++;\n    }\n\n    /**\n     * Sort the values of this Bag using the passed comparison function.\n     *\n     * Setting this property replaces the data set.\n     * @param {Function} fn Comparison function which returns -ve, 0, or +ve\n     */\n    sort(fn) {\n        this.values = this.values.sort(fn);\n    }\n\n    some(fn, thisObj) {\n        return this.values.some(fn, thisObj);\n    }\n}\n","import Bag from '../util/Bag.js';\n\n/**\n * @module Core/data/StoreBag\n */\n\nexport default class StoreBag extends Bag {\n\n    add(...toAdd) {\n        if (toAdd.length === 1 && Array.isArray(toAdd[0])) {\n            toAdd = toAdd[0];\n        }\n\n        // ignore unpersistable records\n        return super.add(...toAdd.filter(record => record.isPersistable));\n    }\n\n};\n","import Base from '../../Base.js';\nimport ArrayHelper from '../../helper/ArrayHelper.js';\n\n/**\n * @module Core/data/mixin/StoreCRUD\n */\n\n/**\n * Mixin for Store that handles modifying records (add, remove etc).\n *\n * @example\n * // add new record to store\n * store.add({ id: 1, team: 'FC Krasnodar' });\n *\n * // remove a record from store, using id\n * store.remove(1);\n *\n * @mixin\n */\nexport default Target => class StoreCRUD extends (Target || Base) {\n    static get $name() {\n        return 'StoreCRUD';\n    }\n\n    //region Config\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Commit changes automatically\n             * @config {Boolean}\n             * @default\n             * @category Common\n             */\n            autoCommit : false\n        };\n    }\n\n    static get properties() {\n        return {\n            isRemoving   : false,\n            suspendCount : 0\n        };\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Fired after removing all records\n     * @event removeAll\n     * @param {Core.data.Store} source This Store\n     */\n\n    /**\n     * Fired before committing changes. Return false from handler to abort commit\n     * @event beforeCommit\n     * @param {Core.data.Store} source This Store\n     * @param {Object} changes Modification data\n     */\n\n    /**\n     * Fired after committing changes\n     * @event commit\n     * @param {Core.data.Store} source This Store\n     * @param {Object} changes Modification data\n     */\n\n    /**\n     * Fired before records are removed from this store by the {@link #function-remove} or {@link #function-removeAll}.\n     * Also fired when removing a child record in a tree store using {@link Core.data.mixin.TreeNode#function-removeChild}.\n     * The remove may be vetoed by returning `false` from a handler.\n     * @event beforeRemove\n     * @param {Core.data.Store} source This Store\n     * @param {Core.data.Model[]} records The records which are to be removed.\n     * @param {Core.data.Model} parent The record from which children are being removed when using a tree store. Only\n     * provided when removing a single node.\n     * @param {Boolean} isMove This flag is `true` if the child node is being removed by\n     * {@link Core.data.mixin.TreeNode#function-appendChild appendChild} to be moved\n     * _within the same tree_.\n     * @param {Boolean} removingAll This flag is `true` if the operation is removing the store's entire data set.\n     * @preventable\n     */\n\n    /**\n     * Fired before records are added to this store by the {@link #function-add} or {@link #function-insert}. In a tree\n     * store, also fired by {@link Core.data.mixin.TreeNode#function-appendChild} and\n     * {@link Core.data.mixin.TreeNode#function-insertChild}. The add or insert may be vetoed by returning `false`\n     * from a handler.\n     * @event beforeAdd\n     * @param {Core.data.Store} source This Store\n     * @param {Core.data.Model[]} records The records which are to be added\n     * @param {Core.data.Model} parent The parent node when using a tree store\n     * @preventable\n     */\n\n    /**\n     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the\n     * event. If it was inserted, event contains `index`\n     * @event add\n     * @param {Core.data.Store} source This Store\n     * @param {Core.data.Model[]} records Added records. In case of tree store, if branch is added, only branch root\n     * is returned\n     * @param {Core.data.Model[]} [allRecords] Flat list of all added records. In case of tree store, if branch is\n     * added, all new records are returned, not only branch root\n     * @param {Core.data.Model} [parent] If due to an {@link Core/data/mixin/TreeNode#function-appendChild}\n     * call, this is the parent node added to.\n     * @param {Number} [index] Insertion point in the store's {@link Core.data.Store#config-storage Collection}.\n     * @param {Number} [oldIndex] Not used for tree stores. The index of the first record moved.\n     * @param {Boolean} [isChild] Flag which is set to true if the records are added to a parent record\n     * @param {Boolean} [isExpand] Flag which is set to true if records are added to the store by expanding parent\n     * @param {Object} [isMove] An object keyed by the ids of the records which were moved from another\n     * position in the store, or from another parent node in the store. The ids of moved records will be\n     * property names with a value `true`.\n     */\n\n    /**\n     * Fired when one or more records are removed\n     * @event remove\n     * @param {Core.data.Store} source This Store\n     * @param {Core.data.Model[]} records Array of removed records. In case of tree store, if branch is removed, only branch root\n     * is returned\n     * @param {Core.data.Model[]} [allRecords] Flat array of all removed records. In case of tree store, if branch is\n     * removed, all removed records are returned, not only branch root\n     * @param {Core.data.Model} [parent] If due to a {@link Core.data.mixin.TreeNode#function-removeChild removeChild}\n     * call, this is the parent node removed from. Only applicable when removing a single tree node.\n     * @param {Number} [index] Visible index at which record was removed. In case the record was removed from a collapsed\n     * branch, -1 is returned. For tree store, this is only provided when removing a single node.\n     * @param {Boolean} [isChild] Flag which is set to true if the record was removed from a parent record\n     * @param {Boolean} [isCollapse] Flag which is set to true if records were removed from the store by collapsing parent\n     * @param {Boolean} [isMove] Passed as `true` if the remove was part of a move operation within this Store.\n     */\n    //endregion\n\n    //region Add, insert & remove\n\n    /**\n     * Removes a record from this store. Fires a single {@link #event-remove} event passing the removed records.\n     * @param {String|String[]|Number|Number[]|Core.data.Model|Core.data.Model[]} records Record/array of records (or record ids) to remove\n     * @param {Boolean} [silent] Specify `true` to suppress events/autoCommit\n     * @returns {Core.data.Model[]} Removed records\n     * @fires beforeRemove\n     * @fires remove\n     * @fires change\n     * @category CRUD\n     */\n    remove(records, silent = false) {\n        const\n            me          = this,\n            { storage } = me;\n\n        // Ensure we have an array of records in case we are passed IDs\n        records = ArrayHelper.asArray(records).reduce((result, r) => {\n            r = me.getById(r);\n            if (r) {\n                result.push(r);\n            }\n            return result;\n        }, []);\n\n        if (records.length === 0) {\n            return records;\n        }\n\n        // Flag that can be checked in linked store to determine if removal is ongoing\n        me.isRemoving = true;\n\n        // Ensure that records in collapsed groups are removed and events fired.\n        if (me.isGrouped) {\n            const\n                oldCount                 = storage.count,\n                recordsInCollapsedGroups = [],\n                changedGroupParents      = new Set();\n\n            // Collect any records which are in collapsed groups which will not be in the storage\n            // Collection, and so will not cause a store change.\n            // If we find some, we must fire the event which the store will react to and update itself.\n            for (const rec of records) {\n                const { groupParent } = rec.instanceMeta(me);\n\n                if (groupParent.meta.collapsed) {\n                    recordsInCollapsedGroups.push(rec);\n                }\n\n                // Collect group header records which change so they can announce this to cause UI updates.\n                ArrayHelper.remove(groupParent.groupChildren, rec);\n                groupParent.meta.childCount--;\n                changedGroupParents.add(groupParent);\n            }\n\n            // The changed group parents must announce their changes, otherwise the group headers\n            // in a UI will not refresh to reflect the change.\n            for (const groupParent of changedGroupParents) {\n                if (groupParent.groupChildren.length > 0) {\n                    me.onModelChange(groupParent, {}, {});\n                }\n            }\n\n            // The store must react as if these records in collapsed groups have been removed from storage\n            if (recordsInCollapsedGroups.length) {\n                storage.trigger('change', {\n                    action   : 'splice',\n                    removed  : recordsInCollapsedGroups,\n                    added    : [],\n                    replaced : [],\n                    oldCount\n                });\n            }\n        }\n        else if (me.tree) {\n            const\n                allRemovedRecords = [],\n                removingMultiple  = records.length > 1,\n                firstRemoved      = records[0],\n                // index is only relevant when removing single node\n                index             = removingMultiple ? undefined : storage.indexOf(firstRemoved),\n                // Group all tree nodes by their parent since they might be out of order\n                removeChildArgs   = records.reduce((result, child) => {\n                    const { parent } = child;\n\n                    if (parent) {\n                        if (!result[parent.id]) {\n                            result[parent.id] = [parent, []];\n                        }\n                        result[parent.id][1].push(child);\n                    }\n                    return result;\n                }, {});\n\n            if (!silent && me.trigger('beforeRemove', { records, isMove : false, parent : removingMultiple ? undefined : firstRemoved.parent }) === false) {\n                me.isRemoving = false;\n                return [];\n            }\n\n            // Remove the records each from their correct parent\n            for (const argBlock of Object.values(removeChildArgs)) {\n                const\n                    parent   = argBlock[0],\n                    children = argBlock[1];\n\n                allRemovedRecords.push(...parent.removeChild(children, false, true));\n            }\n\n            if (!silent) {\n                me.trigger('remove', {\n                    // parent is only relevant when removing single node\n                    parent     : removingMultiple ? undefined : firstRemoved.parent,\n                    index,\n                    isChild    : true,\n                    allRecords : allRemovedRecords,\n                    isMove     : false,\n                    records\n                });\n                me.trigger('change', {\n                    action : 'remove',\n                    records\n                });\n                me.isRemoving = false;\n            }\n\n            return records;\n        }\n\n        // Call model hook to allow taking action before removal (used by ModelLink to remove linked records)\n        for (const record of records) {\n            record.beforeRemove(records);\n        }\n\n        if (records.length === 0) {\n            return records;\n        }\n\n        // Give chance to veto or take action before records disappear.\n        if (!silent && me.trigger('beforeRemove', { records }) === false) {\n            me.isRemoving = false;\n            return [];\n        }\n\n        if (silent) {\n            me.suspendEvents();\n        }\n\n        storage.remove(records);\n\n        if (silent) {\n            me.resumeEvents();\n        }\n\n        if (me.autoCommit) {\n            me.doAutoCommit();\n        }\n\n        me.isRemoving = false;\n\n        return records;\n    }\n\n    /**\n     * Clears store data. Used by removeAll, separate function for using with chained stores.\n     * @private\n     * @category CRUD\n     */\n    clear(isLoading = false) {\n        const\n            me          = this,\n            { storage } = me;\n\n        // For tree store, we have to check unfilteredChildren to see if store has contents\n        if (me.storage.totalCount || me.rootNode?.unfilteredChildren?.length) {\n            // Give chance to veto or take action before records disappear.\n            if (!isLoading && me.trigger('beforeRemove', { records : storage.allValues, removingAll : true }) === false) {\n                return null;\n            }\n\n            // For tree scenario, clean up root node too\n            if (me.rootNode) {\n                // A chained tree store shares root node with its master store\n                if (!me.isChained) {\n                    me.rootNode.clearChildren(isLoading);\n                }\n            }\n            else if (isLoading) {\n                // If we are loading, we suspend events, and Store#onDataChange won't get to\n                // do all this stuff.\n                const allRecords = me.registeredRecords;\n\n                for (let i = allRecords.length - 1, rec; i >= 0; i--) {\n                    rec = allRecords[i];\n                    if (rec && !rec.isDestroyed) {\n                        rec.unjoinStore(me);\n                    }\n                }\n            }\n\n            if (isLoading) {\n                me.removed.clear();\n                storage.suspendEvents();\n            }\n            // Clearing the storage will trigger 'removeAll' and 'change' if `removing`\n            storage.clear();\n            if (isLoading) {\n                storage.resumeEvents();\n            }\n\n            me.added.clear();\n            me.modified.clear();\n        }\n    }\n\n    /**\n     * Removes all records from the store.\n     * @param {Boolean} [silent] Specify `true` to suppress events\n     * @returns {Boolean} `true` unless the action was prevented, in which case it returns `false`\n     * @fires beforeRemove\n     * @fires removeAll\n     * @fires change\n     * @category CRUD\n     */\n    removeAll(silent = false) {\n        const\n            me      = this,\n            storage = me.storage;\n\n        let result;\n\n        me.isRemoving = true;\n\n        // No reaction to the storage Collection's change event.\n        if (silent) {\n            storage.suspendEvents();\n\n            // If silent, the storage Collection won't fire the event we react to\n            // to unjoin, and we allow the removing flag in remove() to be true,\n            // so *it* will not do the unJoin, so if silent, so do it here.\n            const allRecords = me.registeredRecords;\n\n            for (let i = allRecords.length - 1, rec; i >= 0; i--) {\n                rec = allRecords[i];\n                if (rec && !rec.isDestroyed && !rec.isRoot) {\n                    rec.unjoinStore(me);\n                }\n            }\n        }\n\n        if (me.tree) {\n            result = me.rootNode.clear() !== false;\n        }\n        else {\n            result = me.clear() !== null;\n        }\n\n        if (silent) {\n            storage.resumeEvents();\n        }\n\n        me.isRemoving = false;\n\n        return result;\n    }\n\n    /**\n     * Add records to store.\n     * @param {Core.data.Model|Core.data.Model[]|Object|Object[]} records Array of records/data or a single record/data to add to store\n     * @param {Boolean} [silent] Specify `true` to suppress events\n     * @returns {Core.data.Model[]} Added records\n     * @fires add\n     * @fires change\n     * @category CRUD\n     */\n    add(records, silent = false, options = {}) {\n        const\n            me          = this,\n            { storage } = me;\n\n        records = ArrayHelper.asArray(records);\n\n        if (!records?.length) {\n            // Adding zero records, bail out\n            return;\n        }\n\n        me.tree = me.tree || Boolean(me.autoTree && records[0].children);\n\n        if (me.tree) {\n            const\n                // Map and not Object to allow keys to keep their type\n                parentIdMap       = new Map(),\n                parentIndexField  = me.modelClass.getFieldDataSource('parentIndex'),\n                { parentIdField } = me.modelClass,\n                added             = [];\n\n            records.forEach(node => {\n                const parentId = node[parentIdField];\n                if (!parentIdMap.has(parentId)) {\n                    parentIdMap.set(parentId, { append : [], insert : [] });\n                }\n\n                const entry = parentIdMap.get(parentId);\n                // Allow inserting raw data at specific index when passing a parentIndex, used by\n                // ProjectChangeHandlerMixin\n                if (!node.isModel && parentIndexField in node) {\n                    entry.insert.push(node);\n                }\n                else {\n                    entry.append.push(node);\n                }\n            });\n\n            parentIdMap.forEach(({ append, insert }, parentId) => {\n                const parentNode = parentId == null ? me.rootNode : me.getById(parentId);\n\n                if (!parentNode) {\n                    throw new Error(`Parent node with id ${parentId} not found, cannot add children.`);\n                }\n\n                // Append all that needs appending in one go\n                if (append.length) {\n                    added.push(...parentNode.appendChild(append, silent));\n                }\n                // Insertions has to happen one at the time\n                if (insert.length) {\n                    for (const toInsert of insert) {\n                        added.push(parentNode.insertChild(toInsert, toInsert[parentIndexField], silent, options));\n                    }\n                }\n            });\n\n            if (me.reapplySortersOnAdd) {\n                me.sort();\n            }\n            return added;\n        }\n\n        // Give chance to cancel action before records added.\n        if (!silent && me.trigger('beforeAdd', { records }) === false) {\n            return null;\n        }\n\n        me.tree = me.tree || Boolean(me.autoTree && records[0].children);\n\n        if (me.tree) {\n            return me.rootNode.appendChild(records);\n        }\n\n        const added = me.processRecords(records);\n\n        if (silent) {\n            me.suspendEvents();\n        }\n\n        storage.add(added);\n\n        if (silent) {\n            me.resumeEvents();\n        }\n\n        if (me.autoCommit) {\n            me.doAutoCommit();\n        }\n\n        return added;\n    }\n\n    processRecords(records, onRecordCreated) {\n        return records.map(data => {\n            const record = this.processRecord(data.isModel ? data : this.createRecord(data));\n\n            onRecordCreated?.call(this, record);\n\n            return record;\n        });\n    }\n\n    /**\n     * Insert records to store.\n     * @param {Number} index Index to insert at\n     * @param {Core.data.Model|Core.data.Model[]|Object|Object[]} records Array of records/data or a single record/data to insert to store\n     * @param {Boolean} [silent] Specify `true` to suppress events\n     * @returns {Core.data.Model[]} Inserted records\n     * @fires add\n     * @fires change\n     * @category CRUD\n     */\n    insert(index, records, silent = false) {\n        const\n            me            = this,\n            storage       = me.storage,\n            insertBefore  = me.getAt(index),\n            _records      = storage.values,\n            removeIndices = [];\n\n        records = ArrayHelper.asArray(records);\n\n        // Give chance to cancel action before records added.\n        if (!silent && me.trigger('beforeAdd', { records }) === false) {\n            return null;\n        }\n\n        let isNoop, start, i;\n\n        // If the records starting at index or (index - 1), are the same sequence\n        // that we are being asked to add, this is a no-op.\n        if (_records[start = index] === records[0] || _records[start = index - 1] === records[0]) {\n            for (isNoop = true, i = 0; isNoop && i < records.length; i++) {\n                if (records[i] !== _records[start + i]) {\n                    isNoop = false;\n                }\n            }\n        }\n        if (isNoop) {\n            return null;\n        }\n\n        const added = me.processRecords(records, record => {\n            const\n                removedAtIndex = storage.indexOf(record);\n\n            if (record.children && record.children.length && me.autoTree) {\n                me.tree = true;\n            }\n\n            // already in store, do some cleanup\n            if (removedAtIndex > -1) {\n                if (removedAtIndex < index && insertBefore) index--;\n                removeIndices.push(removedAtIndex);\n            }\n\n            // Store previous index to be able to determine that it is a move, since Collection does not handle that\n            record.meta.previousIndex = removedAtIndex;\n        });\n\n        if (me.tree) {\n            const root = me.rootNode;\n            return root.insertChild(records, root.children?.[index], silent);\n        }\n\n        // Silently remove them, so that they will be inserted into place.\n        // Collection is stable by default, and inserting an existing item\n        // is a no-op.\n        me.suspendEvents();\n        me.storage.remove(removeIndices);\n        me.resumeEvents();\n\n        if (silent) {\n            me.suspendEvents();\n        }\n        storage.splice(index, 0, ...added);\n        if (silent) {\n            me.resumeEvents();\n        }\n\n        if (me.autoCommit) {\n            me.doAutoCommit();\n        }\n\n        return added;\n    }\n\n    /**\n     * Moves a record, or block of records to another location.\n     * @param {Core.data.Model|Core.data.Model[]} records The record(s) to move.\n     * @param {Core.data.Model} beforeRecord the record to insert the first record(s) before.\n     * @fires change\n     * @category CRUD\n     */\n    move(records, beforeRecord) {\n        if (this.isTree) {\n            beforeRecord.parent.insertChild(records, beforeRecord);\n        }\n        else {\n            this.storage.move(records, beforeRecord);\n        }\n    }\n\n    //endregion\n\n    //region Update multiple\n\n    setMultiple(filterFn, field, value) {\n        const\n            me      = this,\n            records = [],\n            changes = [];\n\n        me.forEach(r => {\n            if (filterFn(r)) {\n                changes.push(r.set(field, value, true));\n                records.push(r);\n            }\n        });\n\n        // TODO: should consolidate with update, make it take an array instead? to only have to listen for one event outside of store?\n\n        me.trigger('updateMultiple', { records, all : me.records.length === records.length });\n        me.trigger('change', { action : 'updatemultiple', records, all : me.records.length === records.length });\n\n        if (me.reapplyFilterOnUpdate && me.isFiltered) me.filter();\n    }\n\n    setAll(field, value) {\n        const\n            me      = this,\n            changes = [];\n\n        me.forEach(r => {\n            changes.push(r.set(field, value, true));\n        });\n\n        me.trigger('updateMultiple', { records : me.records, all : true });\n        me.trigger('change', { action : 'updatemultiple', records : me.records, all : true });\n\n        if (me.reapplyFilterOnUpdate && me.isFiltered) me.filter();\n    }\n\n    //endregion\n\n    //region Commit\n\n    /**\n     * Accepts all changes, resets the modification tracking:\n     * * Clears change tracking for all records\n     * * Clears added\n     * * Clears modified\n     * * Clears removed\n     * Leaves the store in an \"unmodified\" state.\n     * @internal\n     */\n    acceptChanges() {\n        const me = this;\n\n        // Clear record change tracking\n        me.added.forEach(r => r.clearChanges(true, false));\n        me.modified.forEach(r => r.clearChanges(true, false));\n\n        // Clear store change tracking\n        me.added.clear();\n        me.modified.clear();\n        me.removed.clear();\n    }\n\n    /**\n     * Commits changes, per default only returns changes and resets tracking.\n     * @param {Boolean} [silent] Specify `true` to suppress events\n     * @returns {Object} Changes, see {@link #property-changes}\n     * @fires beforeCommit\n     * @fires commit\n     * @category CRUD\n     */\n    commit(silent = false) {\n        // resets stores tracking of changed records, doesn't store changes, only returns them\n        const\n            { changes } = this;\n\n        if (!silent && this.trigger('beforeCommit', { changes }) === false) {\n            return false;\n        }\n\n        this.acceptChanges();\n\n        if (!silent) {\n            this.trigger('commit', { changes });\n        }\n\n        return changes;\n    }\n\n    /**\n     * Reverts all changes in the store (adds removed records back, and removes newly added records).\n     * @fires change\n     * @fires refresh\n     * @category CRUD\n     */\n    revertChanges() {\n        const\n            me          = this,\n            { changes } = me;\n\n        if (changes) {\n            const event = { action : 'clearchanges', changes };\n\n            me.add(me.removed.values, true);\n            me.remove(me.added.values, true);\n            me.modified.forEach(r => r.revertChanges(true));\n\n            me.added.clear();\n            me.modified.clear();\n            me.removed.clear();\n\n            me.trigger('change', event);\n            me.trigger('refresh', event);\n        }\n    }\n\n    /**\n     * Get uncommitted changes as an object of added/modified/removed arrays of records.\n     *\n     * ```javascript\n     * // Format:\n     * {\n     *      added: [], // array of Core.data.Model\n     *      modified: [], // array of Core.data.Model\n     *      removed: [] // array of Core.data.Model\n     * }\n     * ```\n     *\n     * @member {Object} changes\n     * @property {Core.data.Model[]} changes.added Records that have been added\n     * @property {Core.data.Model[]} changes.modified Records that have changes to persistable fields\n     * @property {Core.data.Model[]} changes.removed Records that have been removed\n     * @readonly\n     * @category Records\n     */\n    get changes() {\n        const\n            me       = this,\n            // Only include modified records that have persistable changes\n            modified = me.modified.values.filter(r => r.rawModifications);\n\n        return (me.added.count || modified.length || me.removed.count) ? {\n            // Slicing to have changes intact when triggering commit\n            added   : me.added.values.slice(),\n            modified,\n            removed : me.removed.values.slice()\n        } : null;\n    }\n\n    /**\n     * Setting autoCommit to true automatically commits changes to records.\n     * @property {Boolean}\n     * @category Records\n     */\n    get autoCommit() {\n        return this._autoCommit;\n    }\n\n    set autoCommit(auto) {\n        this._autoCommit = auto;\n        if (auto && this.changes) {\n            this.commit();\n        }\n    }\n\n    /**\n     * Suspends automatic commits upon store changes. Can be called multiple times (it uses an internal counter).\n     * @category Records\n     */\n    suspendAutoCommit() {\n        this.suspendCount++;\n    }\n\n    /**\n     * Resumes automatic commits upon store changes. Will trigger commit if the internal counter is 0.\n     * @category Records\n     */\n    resumeAutoCommit(doCommit = true) {\n        this.suspendCount--;\n\n        if (this.autoCommit && doCommit) {\n            this.doAutoCommit();\n        }\n    }\n\n    doAutoCommit() {\n        if (this.suspendCount <= 0) {\n            this.commit();\n        }\n    }\n\n    //endregion\n};\n","import Base from '../../Base.js';\nimport ObjectHelper from '../../helper/ObjectHelper.js';\n\n/**\n * @module Core/data/mixin/StoreChanges\n */\n\n/**\n * Mixin for Store that handles applying changes (presumable from a backend)\n *\n * @mixin\n */\nexport default Target => class StoreChanges extends (Target || Base) {\n    static get $name() {\n        return 'StoreChanges';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Specifies target to filter and sort after applying changeset:\n             * * `'changes'` - apply sort and filter to changeset only (see more below)\n             * * `'none'` - do not apply sort and filter\n             *\n             * ### `changes` behavior\n             * If the store has filters in effect when the changeset is applied, the following rules will determine how the\n             * filtered values are affected:\n             * - Among added records, only those that match the filter will be included in the filtered set\n             * - Among updated records, those that did not previously match the filter but now do will be added to the filtered set,\n             *   and those that did match but no longer do will also remain in the filtered set. This means that new records may\n             *   appear in the filtered set as a result of `applyChanges`, but records will not disappear until filters are\n             *   re-applied.\n             *\n             * @default\n             * @prp {'changes'|'none'}\n             */\n            applyChangesetFilterSortTarget : 'changes'\n        };\n    }\n\n    /**\n     * Applies changes from another store to this store. Useful if cloning records in one store to display in a\n     * grid in a popup etc. to reflect back changes.\n     * @param {Core.data.Store} otherStore\n     * @category CRUD\n     */\n    applyChangesFromStore(otherStore) {\n        const\n            me          = this,\n            { changes } = otherStore;\n\n        if (!changes) {\n            return;\n        }\n\n        if (changes.added) {\n            me.add(changes.added);\n        }\n\n        if (changes.removed) {\n            // Remove using id, otherwise indexOf in remove fn won't yield correct result\n            me.remove(changes.removed.map(r => r.id));\n        }\n\n        if (changes.modified) {\n            changes.modified.forEach(record => {\n                const localRecord = me.getById(record.id);\n                localRecord.set(record.modifications);\n            });\n        }\n    }\n\n    /**\n     * Applies a set of changes (presumable from a backend) expressed as an object matching the format outputted by the\n     * {@link Core/data/Store#property-changes} property: `{ added : [], modified/updated : [], removed : [] }`\n     *\n     * `added` is expected to be an array of raw data objects consumable by the stores model class for records to add to\n     * the store (see example snippet below).\n     *\n     * `modified` (or `updated` for compatibility with Schedulers CrudManager) is expected to have the same format as\n     * `added`, but should always include the `id` of the record to update.\n     *\n     * Records that have been created locally and gets assigned a proper id by the backend are expected to also pass a\n     * `phantomId` field (name of the field is configurable using the `phantomIdField` arg, more info on phantom ids\n     * below), to match it with the current id of a local record (`id` will contain the new id).\n     *\n     * Note that it is also possible to pass this `phantomId` -> `id` mapping in the `added` array. When encountering a\n     * record in that array that already exists in the local store, it will be treated the same was as a record in the\n     * `modified` array.\n     *\n     * `removed` is expected to be an array of objects with the `{ id : xx }` shape. Any matches on an id in the store\n     * will be removed, those and any non matches will also be cleared from the change tracking of the store.\n     *\n     * If the store has filters in effect when the changeset is applied, the following rules will determine how the\n     * filtered values are affected:\n     * - Among added records, only those that match the filter will be included in the filtered set\n     * - Among updated records, those that did not previously match the filter but now do will be added to the filtered set,\n     *   and those that did match but no longer do will also remain in the filtered set. This means that new records may\n     *   appear in the filtered set as a result of `applyChanges`, but records will not disappear until filters are\n     *   re-applied.\n     *\n     * As an example, consider a store with the following initial state and some operations performed on it:\n     *\n     * ```javascript\n     * // Load some data into the store\n     * store.data = [\n     *     { id : 1, name : 'Minerva' },\n     *     { id : 2, name : 'Mars' },\n     *     { id : 3, name : 'Jupiter' }\n     * ];\n     * // Add a new record. It gets assigned a generated id,\n     * // for example 'generated56'\n     * store.add({ name : 'Artemis' });\n     * // Remove Jupiter\n     * store.remove(3);\n     * ```\n     *\n     * After syncing those operations to a custom backend (however you chose to solve it in your application) we might\n     * get the following response (see \"Transforming a response to the correct format\" below if your backend responds\n     * in another format):\n     *\n     * ```javascript\n     * const serverResponse = {\n     *     added : [\n     *         // Added by the backend, will be added locally\n     *         { id : 5, name : 'Demeter' }\n     *     ],\n     *\n     *     updated : [\n     *         // Will change the name of Minerva -> Athena\n     *         { id : 1, name : 'Athena' },\n     *         // Will set proper id 4 for Artemis\n     *         { $PhantomId : 'generated56', id : 4 }\n     *     ],\n     *\n     *     removed : [\n     *         // Confirmed remove of Jupiter\n     *         { id : 3 },\n     *         // Removed by the backend, Mars will be removed locally\n     *         { id : 2 }\n     *     ]\n     * };\n     * ```\n     *\n     * If that response is then passed to this function:\n     *\n     * ```javascript\n     * store.applyChangeSet(serverResponse);\n     * ```\n     *\n     * The end result will be the following data in the store:\n     *\n     * ```javascript\n     * [\n     *     { id : 1, name : 'Athena' }, // Changed name\n     *     { id : 4, name : 'Artemis' }, // Got a proper id\n     *     { id : 5, name : 'Demeter' } // Added by the backend\n     * ]\n     * ```\n     *\n     * ### Phantom ids\n     *\n     * When a record is created locally, it is always assigned a generated id. That id is called a phantom id (note that\n     * it is assigned to the normal id field). When passing the new record to the backend, the id is sent with it. When\n     * the backend inserts the record into the database, it (normally) gets a proper id assigned. That id then needs to\n     * be passed back in the response, to update the local record with the correct id. Making sure that future updates\n     * match the correct row in the database.\n     *\n     * For example a newly created record should be passed similar to this to the backend (pseudo format, up to the\n     * application/backend to decide):\n     *\n     * ```json\n     * {\n     *     \"added\" : {\n     *         \"id\" : \"generated79\",\n     *         \"name\" : \"Hercules\",\n     *         ...\n     *     }\n     * }\n     * ```\n     *\n     * For the backend response to be applicable for this function, it should then respond with:\n     *\n     * ```json\n     * {\n     *     \"updated\" : {\n     *         {\n     *             \"$PhantomId\" : \"generated79\",\n     *             \"id\" : 465\n     *         }\n     *     }\n     * }\n     * ```\n     *\n     * (Or, as stated above, it can also be passed in the \"added\" array. Which ever suits your backend best).\n     *\n     * This function will then change the id of the local record using the phantom id `generated79` to `465`.\n     *\n     * ### Transforming a response to the correct format\n     *\n     * This function optionally accepts a `transformFn`, a function that will be called with the `changes`. It is\n     * expected to return a changeset in the format described above (`{ added : [], updated : [], removed : [] }`),\n     * which then will be used to apply the changes.\n     *\n     * Consider the following \"non standard\" (made up) changeset:\n     *\n     * ```javascript\n     * const changes = {\n     *     // Database ids for records previously added locally\n     *     assignedIds : {\n     *         'phantom1' : 10,\n     *         'phantom2' : 15\n     *     },\n     *     // Ids records removed by the backend\n     *     removed : [11, 27],\n     *     // Modified records, keyed by id\n     *     altered : {\n     *         12 : { name : 'Changed' }\n     *     },\n     *     // New records, keyed by id\n     *     inserted : {\n     *         20  : { name : 'New' }\n     *     }\n     * }\n     * ```\n     *\n     * Since it does not match the expected format it has to be transformed:\n     *\n     * ```javascript\n     * store.applyChangeset(changes, ({ assignedIds, inserted, altered, removed }) => ({\n     *    // Convert inserted to [{ id : 20, name : 'New' }]\n     *    added : Object.entries(inserted).map(([id, data] => ({ id, ...data }),\n     *    updated : [\n     *        // Convert assignedIds to [{ $PhantomId : 'phantom1', id : 10 }, ...]\n     *       ...Object.entries(assignedIds).map(([phantomId, id])) => ({ $PhantomId : phantomId, id }),\n     *       // Convert altered to [{ id : 12, name : 'Changed' }]\n     *       ...Object.entries(modified).map(([id, data] => ({ id, ...data })\n     *    ],\n     *    // Convert removed to [{ id : 11 }, ...]\n     *    removed : removed.map(id => ({ id }))\n     * }));\n     * ```\n     *\n     * The transform function above would output:\n     *\n     * ```javascript\n     * {\n     *     added : [\n     *         {  id : 20, name : 'New' }\n     *     ],\n     *     updated : [\n     *         { $PhantomId : 'phantom1', id : 10 },\n     *         { $PhantomId : 'phantom2', id : 15 },\n     *         {  id : 12, name : 'Changed' }\n     *     ],\n     *     removed : [\n     *        { id : 11 },\n     *        { id : 12 }\n     *     ]\n     * }\n     * ```\n     *\n     * And that format can then be applied.\n     *\n     * @param {Object} changes Changeset to apply to the store, see specification above\n     * @param {Function} [transformFn] Optional function used to preprocess a changeset in a different format,\n     * should return an object with the format expected by this function (see above)\n     * @param {String} [phantomIdField] Field used by the backend when communicating a record being assigned a proper id\n     * instead of a phantom id (see above)\n     * @privateparam {Boolean} [remote] Set to true to indicate changes are from the remote source. Remote changes have\n     * precedence over local.\n     * @privateparam {Boolean} [logChanges] Used by CrudManager to be able to revert specific changes later\n     * @category CRUD\n     */\n    applyChangeset(changes, transformFn = null, phantomIdField = '$PhantomId', remote = true, logChanges = false) {\n        const\n            me                                    = this,\n            { added, updated, modified, removed } = transformFn?.(changes, me) ?? changes,\n            // To support both updated & modified (store uses modified, CM updated)\n            altered                               = updated ?? modified ?? [],\n            idDataSource                          = me.modelClass.getFieldDataSource('id'),\n            log                                   = logChanges ? new Map() : null,\n            allAdded                              = [],\n            allAltered                            = [];\n\n        let rootUpdated = false, modifiedParents = [];\n\n        // Process added records\n        if (added?.length > 0) {\n            const\n                toUpdate = [],\n                toAdd    = [];\n\n            // Separate actually new records from added records that get a proper id set up, to match more backends\n            for (const data of added) {\n                if (me.getById(data[phantomIdField] ?? ObjectHelper.getPath(data, idDataSource))) {\n                    // we need to keep order of the added records\n                    // https://github.com/bryntum/support/issues/5189\n                    toUpdate.push(data);\n                }\n                else {\n                    toAdd.push(data);\n                }\n            }\n\n            altered.unshift.apply(altered, toUpdate);\n\n            // Create new records in the store, and clear them out of the added bag\n            // When applying remote changes we do not want to update ordered tree index until all\n            // add/update/remove action are finalized. After that we can sort it correctly.\n            const addedRecords = me.add(toAdd, false, { orderedParentIndex : { skip : true } }) ?? [];\n            allAdded.push(...addedRecords);\n\n            if (me.tree) {\n                // Go over added records and find all parents which children are modified in case\n                // we need to restore ordered tree\n                for (const record of addedRecords) {\n                    const { parent } = record;\n\n                    // If root WBS should be updated\n                    if (parent.isRoot) {\n                        rootUpdated = true;\n                        modifiedParents = [parent];\n                        break;\n                    }\n\n                    if (!parent.isRoot && modifiedParents.every(r => !r.contains(parent))) {\n                        modifiedParents.push(parent);\n                    }\n                }\n            }\n\n            for (const record of addedRecords) {\n                log?.set(record.id, record.data);\n                record.clearChanges();\n            }\n        }\n\n        // Process modified records\n        if (altered?.length > 0) {\n            for (const data of altered) {\n                const\n                    phantomId = data[phantomIdField],\n                    id        = ObjectHelper.getPath(data, idDataSource),\n                    record    = me.getById(phantomId ?? id);\n\n                // Matching an existing record -> update it\n                if (record) {\n                    const changes = record.applyChangeset(data, phantomIdField, remote);\n\n                    // If current record is not part of tree already scheduled to ordering, add it\n                    if (me.tree && !rootUpdated && modifiedParents.every(r => !r.contains(record))) {\n                        if (record.parent.isRoot) {\n                            rootUpdated = true;\n                            modifiedParents = [record.parent];\n                        }\n                        else {\n                            modifiedParents.push(record.parent);\n                        }\n                    }\n\n                    log?.set(id, changes);\n                    allAltered.push(record);\n                }\n            }\n        }\n\n        // Process removed records\n        if (removed?.length > 0) {\n            me.applyRemovals(removed);\n        }\n\n        me.afterChangesetApplied(modifiedParents);\n\n        if (me.applyChangesetFilterSortTarget === 'changes') {\n            me.filterChangeset(allAdded, allAltered, me.isSorted ? me.createSorterFn(me.sorters) : undefined);\n        }\n\n        return log;\n    }\n\n    afterChangesetApplied(modifiedParents) {\n        // Can we always safely use ordered tree?\n        modifiedParents.forEach(parent => {\n            parent.traverse(record => {\n                record.sortOrderedChildren(false, false);\n\n                // Parent index from the remote source might have been applied, in which case\n                // we need to update local index because we do not want any movements in the tree\n                if (record.children) {\n                    record.updateChildrenIndices(record.children, 'parentIndex', true);\n                }\n                if (record.unfilteredChildren) {\n                    record.updateChildrenIndices(record.unfilteredChildren, 'unfilteredIndex', true);\n                }\n            });\n        });\n    }\n\n    // Apply removals, removing records and updating the `removed` bag to match.\n    //\n    // Accepts an array of objects containing an `id` property. Records in the store matching an entry in the array\n    // will be removed from the store and the `removed` bag. Unmatched entries will be removed from the `removed` bag.\n    applyRemovals(removals) {\n        const\n            me                         = this,\n            { removed : removedStash } = me,\n            idDataSource               = me.modelClass.idField,\n            toRemove                   = [];\n\n        for (const removedEntry of removals) {\n            const id = ObjectHelper.getPath(removedEntry, idDataSource);\n\n            // Removed locally and confirmed by server, just remove the record from the removed stash\n            if (removedStash.includes(id)) {\n                removedStash.remove(id);\n            }\n            // Server driven removal (most likely), collect for removal locally too\n            else  {\n                toRemove.push(id);\n            }\n        }\n\n        // Remove collected records in one go\n        me.remove(toRemove);\n\n        // Leave no trace of them at all\n        for (const record of toRemove) {\n            removedStash.remove(record);\n        }\n    }\n\n    /**\n     * Filters records that have been added/updated as part of a changeset. The `added` and `updated` parameters\n     * are arrays of values that have already been added/updated in the Collection's values. This method brings\n     * the Collection's `_filteredValues` in sync without performing a full sort or filter, using the following rules:\n     *\n     * - Added records that do not match the filter are removed from _filteredValues\n     *\n     * - Updated records that now match the filter are inserted at the correct position in _filteredValues\n     *   if they were not formerly included\n     *\n     * - Updated records that formerly matched the filter, but now do not, are NOT removed from _filteredValues\n     *\n     * If the collection is sorted, either on its own or via a sort applied at the store level, that sort order is\n     * respected when adding items to _filteredValues. If not, items are inserted in the same order they occur in\n     * _values.\n     *\n     * @param {Object[]} added An array of unique values that were added as part of the changeset.\n     * @param {Object[]} updated An array of unique values that were updated as part of the changeset.\n     * @param {Function} storeSortFunction Optional sort function that should be used to\n     *                   insert matching items in the correct order (the Store's sorters)\n     * @returns {Boolean} Whether any change was made to the filtered value collection.\n     * @private\n     */\n    filterChangeset(added, updated, storeSortFunction) {\n        const\n            me     = this,\n            {\n                isFiltered,\n                isGrouped,\n                tree\n            }      = me,\n            {\n                allValues,\n                addedValues,\n                isSorted,\n                filterFunction\n            }      = me.storage,\n            sorter = storeSortFunction != null || isSorted ? storeSortFunction ?? me.storage.sortFunction : null;\n\n        // If child node (updated or added) matches the filter, we need to also bring its parents up to the root to the\n        // tree. This method does not support it yet.\n        // Feature request: https://github.com/bryntum/support/issues/6155\n        if (tree || !isFiltered) {\n            return false;\n        }\n\n        let didChange = false, trigger = false, groupers;\n\n        // When groups are involved we always rebuild them entirely. We need to store groupers, remove them to get flat\n        // store, apply flat store logic regarding filtering changes, and then re-group store again\n        // https://github.com/bryntum/support/issues/6134\n        if (isGrouped) {\n            groupers = me.groupers;\n            me.clearGroupers(true);\n        }\n\n        const { filteredValues } = me.storage;\n\n        if (sorter) {\n            // Current approach is to divide the filtered list into a \"sorted\" head and an unsorted tail (items added since last sort)\n            // Insert the newly-matching items into the sorted part, re-sort that, then re-append the unsorted tail\n            const\n                sortedLength = addedValues\n                    ? (filteredValues.findLastIndex(value => !addedValues.has(value)) + 1)\n                    : filteredValues.length,\n                sorted = filteredValues.slice(0, sortedLength),\n                updatedMatches = new Set(updated.filter(filterFunction));\n            for (const value of filteredValues) {\n                if (updatedMatches.has(value)) {\n                    updatedMatches.delete(value);\n                }\n            }\n            for (const newMatch of updatedMatches) {\n                sorted.push(newMatch);\n            }\n            sorted.sort(sorter);\n            filteredValues.splice(0, sortedLength, ...sorted);\n\n            trigger = true;\n        }\n        else {\n            // Move through filtered and unfiltered lists in order, inserting raw value into filtered list whenever one\n            // is encountered that's in the set of matching, updated values\n            const updatedMatches = new Set(updated.filter(item =>\n                filterFunction(item) && !me.storage.includes(item)));\n            let\n                filteredIndex = 0,\n                rawIndex = 0,\n                allInserted = updatedMatches.size === 0;\n            while (rawIndex < allValues.length && !allInserted) {\n                const filteredValue = filteredValues[filteredIndex];\n                let rawValue = allValues[rawIndex];\n                // Move ahead in raw list until we find the matching item, inserting new items along the way\n                while (filteredValue !== rawValue) {\n                    if (updatedMatches.has(rawValue)) {\n                        filteredValues.splice(filteredIndex, 0, rawValue);\n                        trigger = didChange = true;\n                        filteredIndex++;\n                        updatedMatches.delete(rawValue);\n                        allInserted = updatedMatches.size === 0;\n                    }\n                    rawValue = allValues[++rawIndex];\n                }\n                // Keep going in filtered list\n                if (filteredIndex < filteredValues.length) {\n                    filteredIndex++;\n                }\n            }\n        }\n\n        // Un-show non-matching added records\n        const nonMatchingAdds = new Set(added.filter(value => !filterFunction(value)));\n\n        for (let filteredIndex = filteredValues.length - 1; filteredIndex >= 0; filteredIndex--) {\n            const value = filteredValues[filteredIndex];\n            if (nonMatchingAdds.has(value)) {\n                filteredValues.splice(filteredIndex, 1);\n                trigger = didChange = true;\n                nonMatchingAdds.delete(value);\n            }\n        }\n\n        if (groupers) {\n            me.group(groupers[0], null, false, true, true);\n            trigger = true;\n        }\n\n        if (trigger) {\n            // Storage content has changed, clear idMap to rebuild it\n            me._idMap = null;\n            me.trigger('refresh');\n        }\n\n        return didChange;\n    }\n};\n","import Base from '../../Base.js';\nimport Filter from '../../util/CollectionFilter.js';\nimport FunctionHelper from '../../helper/FunctionHelper.js';\nimport Collection from '../../util/Collection.js';\nimport ArrayHelper from '../../helper/ArrayHelper.js';\n\n/**\n * @module Core/data/mixin/StoreFilter\n */\n\n/**\n * Mixin for Store that handles filtering.\n * Filters are instances of {@link Core/util/CollectionFilter} class.\n *\n * - Adding a filter for the same property will replace the current one (unless a unique {@link Core.util.CollectionFilter#config-id} is specified),\n * but will not clear any other filters.\n * - Adding a filter through the {@link #function-filterBy} function is ultimate.\n * It will clear all the property based filters and replace the current filterBy function if present.\n * - Removing records from the store does not remove filters!\n * The filters will be reapplied if {@link #config-reapplyFilterOnAdd}/{@link #config-reapplyFilterOnUpdate} are true and you add new records or update current.\n *\n * ```\n * // Add a filter\n * store.filter({\n *     property : 'score',\n *     value    : 10,\n *     operator : '>'\n * });\n *\n * // Add filter as a function\n * store.filter(record => record.score > 10);\n *\n * // Add named filter as a function\n * store.filter({\n *     id : 'my filter',\n *     filterBy : record => record.score > 10\n * });\n *\n * // Replace any filter set with new filters\n * store.filter({\n *     filters : {\n *         property : 'score',\n *         value    : 10,\n *         operator : '>'\n *     },\n *     replace : true\n * });\n *\n * // Remove this one specific filter, leaving any possible others in place.\n * // A filter's id defaults to the property name that it's filtering on.\n * store.removeFilter('score');\n *\n * // Reapply filters without firing an event.\n * // Use if making multiple data mutations with the\n * // intention of updating UIs when all finished.\n * store.filter({\n *     silent : true\n * });\n * ```\n *\n * @mixin\n */\nexport default Target => class StoreFilter extends (Target || Base) {\n    static get $name() {\n        return 'StoreFilter';\n    }\n\n    //region Config\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Specify one or more {@link Core/util/CollectionFilter} config objects to apply initially.\n             *\n             * For example:\n             *\n             * ```javascript\n             *  // Configure the store to filter in clients over the age of 30\n             *  new Store({\n             *      ...,\n             *      filters : [{\n             *          property : 'age',\n             *          value    : 30,\n             *          operator : '>'\n             *      }],\n             *      ...\n             *  })\n             * ```\n             *\n             * or:\n             *\n             * ```javascript\n             *  // Configure the store to filter based on a complex operation\n             *  new Store({\n             *      ...,\n             *      filters : [{\n             *          filterBy(record) {\n             *              // Return true or false for filtering in or out\n             *              return shouldClientBeVisible(record);\n             *          }\n             *      }],\n             *      ...\n             *  })\n             * ```\n             *\n             * @config {CollectionFilterConfig|CollectionFilterConfig[]}\n             * @category Filtering\n             */\n            filters : null,\n\n            /**\n             * Specify true to reapply filters when a record is added to the store.\n             * @config {Boolean}\n             * @default\n             * @category Filtering\n             */\n            reapplyFilterOnAdd : false,\n\n            /**\n             * Specify true to reapply filters when a record is updated in the store.\n             * @config {Boolean}\n             * @default\n             * @category Filtering\n             */\n            reapplyFilterOnUpdate : false\n\n        };\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Fired after applying filters to the store\n     * @event filter\n     * @param {Core.data.Store} source This Store\n     * @param {Core.util.Collection} filters Filters used by this Store\n     * @param {Core.data.Model[]} removed The the records which were filtered out by the action.\n     * @param {Core.data.Model[]} added The records which were filtered back in by the action.\n     * @param {Core.data.Model[]} records Filtered records\n     */\n\n    //endregion\n\n    //region Properties\n\n    set reapplyFilterOnAdd(enable) {\n        this.storage.autoFilter = enable;\n    }\n\n    get reapplyFilterOnAdd() {\n        return this.storage.autoFilter;\n    }\n\n    /**\n     * Currently applied filters. A collection of {@link Core.util.CollectionFilter} instances.\n     * @type {Core.util.Collection}\n     * @readonly\n     * @category Sort, group & filter\n     */\n    set filters(filters) {\n        const\n            me         = this,\n            collection = me.filters;\n\n        collection.clear();\n\n        // Invalidate the filtersFunction so that it has to be recalculated upon next access\n        me._filtersFunction = null;\n\n        // If we are being asked to filter, parse the filters.\n        if (filters) {\n            if (filters.constructor.name === 'Object') {\n                for (const f of Object.entries(filters)) {\n                    // Entry keys are either a field name with its value being the filter value\n                    // or, there may be one filterBy property which specifies a filtering function.\n                    if (f[0] === 'filterBy' && typeof f[1] === 'function') {\n                        collection.add(new Filter({\n                            filterBy : f[1]\n                        }));\n                    }\n                    else {\n                        collection.add(new Filter(f[1].constructor.name === 'Object' ? Object.assign({\n                            property : f[0]\n                        }, f[1]) : {\n                            property : f[0],\n                            value    : f[1]\n                        }));\n                    }\n                }\n            }\n            else if (Array.isArray(filters)) {\n                // Make sure we are adding CollectionFilters\n                collection.add(...filters.map(filterConfig => {\n                    if (filterConfig instanceof Filter) {\n                        return filterConfig;\n                    }\n                    return new Filter(filterConfig);\n                }));\n            }\n            else if (filters.isCollection) {\n                // Use supplied collection? Opting to use items from it currently\n                collection.add(...filters.values);\n            }\n            else {\n                //<debug>\n                if (typeof filters !== 'function') {\n                    throw new Error('Store filters must be an object whose properties are Filter configs keyed by field name, or an array of Filter configs, or a filtering function');\n                }\n                //</debug>\n                collection.add(new Filter({\n                    filterBy : filters\n                }));\n            }\n\n            collection.forEach(item => item.owner = me);\n        }\n    }\n\n    get filters() {\n        return this._filters || (this._filters = new Collection({ extraKeys : ['property'] }));\n    }\n\n    set filtersFunction(filtersFunction) {\n        this._filtersFunction = filtersFunction;\n    }\n\n    get filtersFunction() {\n        const\n            me                     = this,\n            { filters, isGrouped } = me;\n\n        if (!me._filtersFunction) {\n            if (filters.count) {\n                const generatedFilterFunction = Filter.generateFiltersFunction(filters);\n\n                me._filtersFunction = candidate => {\n                    // A group record is filtered in if it has passing groupChildren.\n                    if (isGrouped && candidate.isSpecialRow) {\n                        return candidate.groupChildren.some(generatedFilterFunction);\n                    }\n                    else {\n                        return generatedFilterFunction(candidate);\n                    }\n                };\n            }\n            else {\n                me._filtersFunction = FunctionHelper.returnTrue;\n            }\n        }\n\n        return me._filtersFunction;\n    }\n\n    /**\n     * Check if store is filtered\n     * @property {Boolean}\n     * @readonly\n     * @category Sort, group & filter\n     */\n    get isFiltered() {\n        return this.filters.values.some(filter => !filter.disabled);\n    }\n\n    //endregion\n\n    traverseFilter(record) {\n        const\n            me          = this,\n            hitsCurrent = !record.isRoot && me.filtersFunction(record),\n            children    = record.unfilteredChildren || record.children;\n\n        // leaf, bail out\n        if (!children || !children.length) {\n            return hitsCurrent;\n        }\n\n        if (!record.unfilteredChildren) {\n            record.unfilteredChildren = record.children.slice();\n        }\n\n        record.children = record.unfilteredChildren.filter(r => {\n            return me.traverseFilter(r);\n        });\n\n        // unfilteredIndex must be set for child elements\n        record.updateChildrenIndices(record.unfilteredChildren, 'unfilteredIndex', true);\n\n        // parentIndex must be set for visible child elements\n        record.updateChildrenIndices(record.children, 'parentIndex', true);\n\n        return hitsCurrent || Boolean(record.children.length);\n    }\n\n    traverseClearFilter(record) {\n        const me = this;\n\n        if (record.unfilteredChildren) {\n            record.children = record.unfilteredChildren.slice();\n            record.unfilteredChildren = null;\n        }\n\n        if (record.children) {\n            record.children.forEach(r => me.traverseClearFilter(r));\n            record.updateChildrenIndices(record.children, 'parentIndex', true);\n        }\n    }\n\n    // TODO: Get rid of this.\n    // The Filter feature of a Grid pokes around in the Store to ask this question.\n    get latestFilterField() {\n        return this.filters.last ? this.filters.last.property : null;\n    }\n\n    /**\n     * Adds a single filter to the {@link #config-filters} collection. By default, filters are reevaluated\n     * and a Store change event fired.\n     *\n     * If the `silent` parameter is passed as `true`, multiple filters can be added without causing data changes.\n     *\n     * When the filters are as required, call {@link #function-filter} with no parameters\n     * to apply the filters to the store.\n     *\n     * @param {CollectionFilterConfig|Function} newFilters A {@link Core.util.CollectionFilter filter} config,\n     * or a function to use for filtering.\n     * @param {Boolean} [silent] Pass `true` to *not* refilter the store immediately. Such as when\n     * adding multiple filters.\n     * @returns {Core.util.CollectionFilter} The Filter instance that was added.\n     * @returns {Promise|Core.util.CollectionFilter} If {@link Core/data/AjaxStore#config-filterParamName} is set on store, this method\n     * returns Collection filter inside a `Promise` which is resolved after data is loaded from remote server, otherwise it returns `null`\n     * @async\n     * @category Sort, group & filter\n     */\n    addFilter(filter, silent = false) {\n        //<debug>\n        if (filter._filterBy && this.remoteFilter) {\n            throw new Error('Cannot filter with a function if remote filtering is being used');\n        }\n        //</debug>\n        const me = this;\n        filter = filter instanceof Filter ? filter : new Filter(filter);\n\n        // We want notification upon change of field, value or operator\n        filter.owner = me;\n\n        // Collection will replace any already existing filter on the field, unless it has id specified\n        me.filters.add(filter);\n\n        if (!silent) {\n            if (me.remoteFilter) {\n                return me.filter().then(() => filter);\n            }\n            else {\n                me.filter();\n            }\n        }\n        return filter;\n    }\n\n    /**\n     * Filters the store by **adding** the specified filter(s) to the existing filters collection applied to this Store.\n     * If a filter has an {@link Core.util.CollectionFilter#config-id id} specified,\n     * or a {@link Core.util.CollectionFilter#config-property property} specified,\n     * it will search for corresponding filter(s) in the existing filters first and replace it with a new filter.\n     * **It will not remove other filters applied to the store!**\n     *\n     * To **add** a new filter:\n     * ```\n     * // Filter using simple object\n     * store.filter({\n     *     property : 'age',\n     *     operator : '>',\n     *     value    : 90\n     * });\n     *\n     * // Filter using function\n     * store.filter(r => r.age < 90);\n     *\n     * // Filter using a named filter as a function\n     * store.filter({\n     *     id : 'my-filter',\n     *     filterBy : record => record.score > 10\n     * });\n     * ```\n     *\n     * To **remove** a specific filter, but keep other filters applied\n     * ```\n     * // Remove by filter `id` or `property`. Filter `id` defaults to the `property` name.\n     * store.removeFilter('age');\n     * store.removeFilter('my-filter');\n     * ```\n     *\n     * To **replace** all existing filters with a new filter\n     * ```\n     * // Remove all filters and filter using simple object\n     * store.filter({\n     *     filters : {\n     *         property : 'age',\n     *         operator : '<',\n     *         value    : 90\n     *     },\n     *     replace : true\n     * });\n     *\n     * // Remove all filters and filter using function\n     * store.filter({\n     *     filters : r => r.age > 90,\n     *     replace : true\n     * });\n     *\n     * // Remove all filters and filter using a named filter as a function\n     * store.filter({\n     *     filters : {\n     *         id : 'my-filter',\n     *         filterBy : record => record.score > 10\n     *     },\n     *     replace : true\n     * });\n     * ```\n     *\n     * Basically filters replacing is an equivalent of having two sequenced calls:\n     * {@link #function-clearFilters clearFilters} and {@link #function-filter filter}.\n     *\n     * Call without arguments to reapply filters.\n     * ```\n     * // Re-filter the store\n     * store.filter();\n     * ```\n     *\n     * @param {Object|CollectionFilterConfig|CollectionFilterConfig[]|Function} newFilters\n     *        A {@link Core.util.CollectionFilter filter} config,\n     *        or an array of {@link Core.util.CollectionFilter filter} configs,\n     *        or a function to use for filtering,\n     *        or a special object like: ```{ replace : true, filters : newFilters }```\n     * @param {Boolean} [newFilters.replace]\n     *        A flag, indicating whether or not the previous filters should be removed.\n     * @param {Boolean} [newFilters.silent]\n     *        Set as true to not fire events. UI will not be informed about the changes.\n     * @param {CollectionFilterConfig|CollectionFilterConfig[]|Function} [newFilters.filters]\n     *        If `newFilters` is an object and `replace` property is defined in the `newFilters`,\n     *        it means that special object is used and real filter configuration must be nested down to this `filters` property.\n     *        It can be:\n     *        A {@link Core.util.CollectionFilter filter} config,\n     *        or an array of {@link Core.util.CollectionFilter filter} configs,\n     *        or a function to use for filtering.\n     * @fires filter\n     * @fires change\n     * @returns {Promise|null} If {@link Core/data/AjaxStore#config-filterParamName} is set on store, this method returns Promise\n     * which is resolved after data is loaded from remote server, otherwise it returns null value\n     * @async\n     * @category Sort, group & filter\n     */\n    filter(newFilters) {\n        const me = this;\n\n        let silent = false, internal;\n\n        if (newFilters) {\n            let fieldType = typeof newFilters;\n\n            if (fieldType === 'object') {\n                if (('silent' in newFilters) || ('replace' in newFilters) || newFilters.filters) {\n                    silent = newFilters.silent;\n                    if (newFilters.replace) {\n                        // If replacing with empty filters (i.e. clearing filters), clearFilters should trigger a re-filter\n                        me.clearFilters(newFilters.filters.length === 0);\n                    }\n                    internal = newFilters.internal;\n                    newFilters = newFilters.filters;\n                    fieldType = typeof newFilters;\n                }\n            }\n\n            // If it was just a config object containing no filters, this will be null\n            if (newFilters) {\n                const wasFiltered = me.isFiltered;\n\n                // We will not be informed about Filter mutations while configuring.\n                me.isConfiguring = true;\n\n                // If we provide array of objects looking like :\n                //  {\n                //      property  : 'fieldName',\n                //      value     : 'someValue',\n                //      [operator : '>']\n                //  }\n                //  or ...\n                //  {\n                //      property : 'fieldName',\n                //      filterBy : function (value, record) {\n                //          return value > 50;\n                //      }\n                //  }\n                if (Array.isArray(newFilters)) {\n                    newFilters.forEach(f => me.addFilter(f, true), me);\n                }\n                else if (fieldType === 'function') {\n                    //<debug>\n                    if (me.remoteFilter) {\n                        throw new Error('Cannot filter with a function if remote filtering is being used');\n                    }\n                    //</debug>\n                    const filter = new Filter(newFilters);\n                    filter.internal = internal;\n                    me.addFilter(filter, true);\n                }\n                // Old signature of field name, value with implicit equality test.\n                // Not documented, but still tested.\n                else if (fieldType === 'string') {\n                    me.addFilter({\n                        property : newFilters,\n                        value    : arguments[1]\n                    }, true);\n                }\n                // An object-based filter definition\n                else {\n                    me.addFilter(newFilters, true);\n                }\n\n                // Open up to receiving Filter mutation notifications again\n                me.isConfiguring = false;\n\n                // We added a disabled filter to either no filters, or all disabled filters, so no change.\n                if (!me.isFiltered && !wasFiltered) {\n                    return null;\n                }\n            }\n        }\n\n        // Invalidate the filtersFunction so that it has to be recalculated upon next access\n        me.filtersFunction = null;\n\n        // Implemented here for local filtering.\n        // AjaxStore implements for remote and returns a Promise, so MUST return the call value.\n        return me.performFilter(silent);\n    }\n\n    /**\n     * Perform filtering according to the {@link #property-filters} Collection.\n     * This is the internal implementation which is overridden in {@link Core.data.AjaxStore} and\n     * must not be overridden.\n     * @private\n     */\n    performFilter(silent) {\n        const\n            me                             = this,\n            { storage, filters, rootNode } = me,\n            oldCount                       = me.count;\n\n        // Private event, did not need it documented or preventable right now\n        me.trigger('beforeFilter', { filters });\n\n        let added, removed;\n\n        if (me.tree) {\n            const oldDataset = storage.values;\n\n            if (me.isFiltered) {\n                me.traverseFilter(rootNode);\n            }\n            else {\n                me.traverseClearFilter(rootNode);\n            }\n\n            const newDataset = me.collectDescendants(rootNode).visible;\n\n            storage.replaceValues({\n                values : newDataset,\n                silent : true\n            });\n\n            const delta = ArrayHelper.delta(newDataset, oldDataset, true);\n\n            added   = delta.toAdd;\n            removed = delta.toRemove;\n        }\n        else {\n            // Collect the added and removed deltas from the filter operation\n            storage.ion({\n                change({ removed : r, added : a }) {\n                    removed = r;\n                    added = a;\n                },\n                once : true\n            });\n\n            if (me.isFiltered) {\n                // Bring collapsed away records in, to be considered in filtering\n                me.isGrouped && me.includeCollapsed();\n\n                storage.addFilter({\n                    id       : 'primary-filter', // no-sanity\n                    filterBy : me.filtersFunction\n                });\n\n                // Take them back out again after filtering\n                me.isGrouped && me.excludeCollapsed();\n            }\n            else {\n                storage.filters.clear();\n            }\n        }\n\n        me.afterPerformFilter(silent || me.isRemoteDataLoading ? null : {\n            action  : 'filter',\n            filters,\n            oldCount,\n            added,\n            removed,\n            records : me.storage.values\n        });\n    }\n\n    afterPerformFilter(event) {\n        this.resetRelationCache();\n\n        if (event) {\n            this.triggerFilterEvent(event);\n        }\n    }\n\n    get filtered() {\n        return this.storage.isFiltered;\n    }\n\n    // Used from filter() and StoreCRUD when reapplying filters\n    triggerFilterEvent(event) {\n        this.trigger('filter', event);\n\n        // Only fire these events if it's a local filter.\n        // If we are configured with filterParamName, the loadData will fire them.\n        if (!this.remoteFilter) {\n            this.trigger('refresh', event);\n            this.trigger('change', event);\n        }\n    }\n\n    /**\n     * *Adds* a function used to filter the store. Alias for calling `filter(fn)`. Return `true` from the function to\n     * include record in filtered set\n     *\n     * ```javascript\n     * store.filterBy(record => record.age > 25 && record.name.startsWith('A'));\n     * ```\n     *\n     * @param {Function} fn Function used to test records\n     * @returns {Promise|null} If {@link Core/data/AjaxStore#config-filterParamName} is set on store, this method returns `Promise`\n     * which is resolved after data is loaded from remote server, otherwise it returns `null`\n     * @async\n     * @category Sort, group & filter\n     */\n    filterBy(fn) {\n        return this.filter(fn);\n    }\n\n    /**\n     * Removes the passed filter, or the filter by the passed ID from the {@link #config-filters} collection.\n     * By default, filters are reevaluated and a Store change event fired.\n     *\n     * If the `silent` parameter is passed as `true`, multiple filters can be removed without causing data changes.\n     *\n     * When the filters are as required, call {@link #function-filter} with no parameters\n     * to apply the filters to the store.\n     *\n     * ```javascript\n     * // Only view top priority events\n     * myEventStore.filter({\n     *     id       : 'priorityFilter',\n     *     property : 'priority',\n     *     value    : 1,\n     *     operator : '='\n     * });\n     *\n     * // That individual filter can be removed like this\n     * myEventStore.removeFilter('priorityFilter');\n     *\n     * // Add named filter as a function\n     * store.filter({\n     *     id : 'my filter',\n     *     filterBy : record => record.score > 10\n     * });\n     *\n     * // Remove named filter function\n     * store.removeFilter('my filter');\n     * ```\n     *\n     * @param {String|Core.util.CollectionFilter} idOrInstance Filter to remove, or ID of the filter to remove. By default,\n     * filters are reevaluated and a change event fired.\n     * @param {Boolean} [silent] Pass `true` to *not* refilter the store immediately. Such as when\n     * removing multiple filters.\n     * @returns {Promise|Core.util.CollectionFilter} If {@link Core/data/AjaxStore#config-filterParamName} is set on store, this method\n     * returns Collection filter inside a `Promise` which is resolved after data is loaded from remote server, otherwise it returns `null`\n     * @async\n     * @category Sort, group & filter\n     */\n    removeFilter(idOrInstance, silent = false) {\n        const\n            me     = this,\n            filter = idOrInstance instanceof Filter ? idOrInstance : me.filters.get(idOrInstance);\n\n        // If we have such a filter, remove it.\n        if (filter) {\n            me.filters.remove(filter);\n\n            // Invalidate the filtersFunction so that it has to be recalculated upon next access\n            me._filtersFunction = null;\n\n            if (!silent) {\n                if (me.remoteFilter) {\n                    return me.filter().then(() => filter);\n                }\n                else {\n                    me.filter();\n                }\n            }\n\n            return filter;\n        }\n    }\n\n    /**\n     * Removes all filters from the store.\n     * @returns {Promise|null} If {@link Core/data/AjaxStore#config-filterParamName} is set on store, this method returns `Promise`\n     * which is resolved after data is loaded from remote server, otherwise it returns `null`\n     * @async\n     * @category Sort, group & filter\n     */\n    clearFilters(apply = true) {\n        // Remove all non-internal filters (those have to be explicitly removed)\n        this.filters.remove(this.filters.values.filter(f => !f.internal));\n\n        if (apply) {\n            return this.filter();\n        }\n    }\n\n    convertFilterToString(field) {\n        const filter = this.filters.getBy('property', field);\n        return (filter && !filter.filterBy) ? String(filter) : '';\n    }\n\n    doDestroy() {\n        this._filters?.destroy();\n\n        super.doDestroy();\n    }\n};\n","import Base from '../../Base.js';\nimport ObjectHelper from '../../helper/ObjectHelper.js';\nimport StringHelper from '../../helper/StringHelper.js';\n\n/**\n * @module Core/data/mixin/StoreGroup\n */\n\nconst resortActions = {\n    add     : 1,\n    replace : 1\n};\n\n/**\n * An immutable object representing a store grouper.\n *\n * @typedef {Object} Grouper\n * @property {String} field Field name\n * @property {Boolean} [ascending=true] `true` to group ascending, `false` to group descending\n */\n\n/**\n * Mixin for Store that handles grouping.\n *\n * ```javascript\n * // simple grouper\n * store.group('city');\n *\n * // grouper as object, descending order\n * store.group({ field : 'city', ascending : false });\n *\n * // using custom sorting function\n * store.group({\n *     field : 'city',\n *     fn : (recordA, recordB) => {\n *         // apply custom logic, for example:\n *         return recordA.city.length < recordB.city.length ? -1 : 1;\n *     }\n * });\n * ```\n *\n * Currently grouping is not supported when using pagination, the underlying store cannot group data that is split into pages.\n *\n * @mixin\n */\nexport default Target => class StoreGroup extends (Target || Base) {\n    static get $name() {\n        return 'StoreGroup';\n    }\n\n    //region Config\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Initial groupers, specify to have store grouped automatically after initially setting data\n             * @config {Grouper[]}\n             * @category Common\n             */\n            groupers : null,\n\n            useGroupFooters : false\n        };\n    }\n\n    static get properties() {\n        return {\n            collapsedGroups : new Set()\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    construct(config) {\n        super.construct(config);\n\n        // For handling record mutation, *not* add/remove of records.\n        // Sorts dataset if necessary.\n        this.ion({ change : 'onDataChanged', thisObj : this });\n    }\n\n    /**\n     * Currently used groupers.\n     * To set groupers when remote sorting is enabled by {@link Core/data/AjaxStore#config-sortParamName} you should use\n     * {@link #function-setGroupers} instead to be able wait for operation to finish.\n     * @member {Grouper[]} groupers\n     * @category Sort, group & filter\n     */\n    get groupers() {\n        return this._groupers;\n    }\n\n    set groupers(groupers) {\n        this.setGroupers(groupers);\n    }\n\n    /**\n     * Set groupers.\n     * @param {Grouper[]} groupers Array of groupers to apply to store\n     * @returns {Promise|null} If {@link Core/data/AjaxStore#config-sortParamName} is set on store, this method returns\n     * `Promise` which is resolved after data is loaded from remote server, otherwise it returns `null`\n     * @async\n     * @category Sort, group & filter\n     */\n    setGroupers(groupers, options) {\n        const\n            me         = this,\n            { storage } = me;\n\n        let result;\n\n        if (groupers?.length) {\n            me._groupers = groupers;\n        }\n        else if (me.groupers) {\n            delete me._groupers;\n\n            me.includeCollapsed();\n\n            storage.replaceValues({\n                values         : me.removeHeadersAndFooters(storage._values),\n                filteredValues : storage.isFiltered ? me.removeHeadersAndFooters(storage._filteredValues) : null,\n                silent         : true\n            });\n\n            result = me.group(null, null, null, false, options?.silent);\n        }\n\n        // Need to clear the id map so it gets rebuilt next time its accessed\n        me._idMap = null;\n        return result;\n    }\n\n    // Collects group headers/footers on the fly. Not used in any performance sensitive code, but if that need arises\n    // it should be cached and invalidated on record remove, add, update, grouping changes, filter and sorting...\n    get groupRecords() {\n        const groupRecords = [];\n\n        if (this.isGrouped) {\n            for (const record of this) {\n                if (record.isSpecialRow) {\n                    groupRecords.push(record);\n                }\n            }\n        }\n\n        return groupRecords;\n    }\n\n    // Temporarily include records from collapsed groups, for example prior to filtering\n    includeCollapsed() {\n        for (const groupId of this.collapsedGroups) {\n            this.expand(this.getById(groupId), false);\n        }\n    }\n\n    // Exclude records in collapsed groups, intended to be used after a call to includeCollapsed()\n    excludeCollapsed() {\n        for (const groupId of this.collapsedGroups) {\n            this.collapse(this.getById(groupId));\n        }\n    }\n\n    onDataChange({ source : storage, action, removed }) {\n        const\n            me           = this,\n            { groupers } = me;\n\n        // Only do grouping transformations if we have groupers to apply.\n        // In stores which never use grouping, this code is superfluous and will reduce performance.\n        // The else side will simply replace the ungrouped data with itself.\n        if (groupers) {\n            // When records are added or removed, re-evaluate the group records\n            // so that when the events are fired by the super call, the group\n            // records are in place.\n            if (groupers.length) {\n                if ((action === 'splice' && removed?.length) || action === 'move') {\n                    storage.replaceValues({\n                        values : me.prepareGroupRecords(),\n                        silent : true\n                    });\n                }\n            }\n            // Remove all group headers and footers\n            else {\n                storage.replaceValues({\n                    values : me.removeHeadersAndFooters(storage.values),\n                    silent : true\n                });\n            }\n        }\n\n        super.onDataChange?.(...arguments);\n    }\n\n    move(records, beforeRecord) {\n        const me = this;\n\n        if (me.isGrouped) {\n            if (beforeRecord?.isSpecialRow) {\n                beforeRecord = me.getPrev(beforeRecord, false, false);\n\n                if (!beforeRecord) {\n                    // Trying to move above first group header, no-op\n                    return;\n                }\n            }\n\n            const\n                groupField = me.groupers[0].field;\n\n            let newGroupValue;\n\n            if (beforeRecord) {\n                newGroupValue = beforeRecord.isGroupHeader ? beforeRecord.meta.groupRowFor : beforeRecord[groupField];\n            }\n            else {\n                newGroupValue = me.groupRecords[me.groupRecords.length - 1].meta.groupRowFor;\n            }\n\n            me.beginBatch();\n\n            records.forEach(record => record[groupField] = newGroupValue);\n\n            me.endBatch();\n        }\n\n        super.move(...arguments);\n    }\n\n    // private function that collapses on the data level\n    // TODO: make public and trigger events for grid to react to?\n    collapse(groupRecord) {\n        if (groupRecord && !groupRecord.meta.collapsed) {\n            this.excludeGroupRecords(groupRecord);\n            groupRecord.meta.collapsed = true;\n            // Track which groups are collapsed\n            this.collapsedGroups.add(groupRecord.id);\n            return true;\n        }\n        return false;\n    }\n\n    // private function that expands on the data level\n    // TODO: make public and trigger events for grid to react to?\n    expand(groupRecord, updateMap = true) {\n        if (groupRecord?.meta.collapsed) {\n            this.includeGroupRecords(groupRecord);\n            groupRecord.meta.collapsed = false;\n            // Optionally track which groups are collapsed (not done when expanding temporarily prior to filtering etc)\n            updateMap && this.collapsedGroups.delete(groupRecord.id);\n            return true;\n        }\n        return false;\n    }\n\n    removeHeadersAndFooters(records) {\n        return records.filter(r => {\n            if (r.isSpecialRow) {\n                this.unregister(r);\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n\n    prepareGroupRecords(sorter) {\n        const\n            me         = this,\n            toCollapse = me.collapsedGroups,\n            toExpand   = [];\n\n        let records = me.storage.filteredValues ?? me.storage.values;\n\n        for (const record of records) {\n            if (record.isGroupHeader && (record.meta.collapsed || toCollapse.has(record.id))) {\n                toCollapse.add(record.id); // TODO - This line should no longer be needed, try without it when tests pass\n                toExpand.push(record);\n            }\n        }\n\n        for (const record of toExpand) {\n            me.includeGroupRecords(record);\n        }\n\n        records = me.removeHeadersAndFooters(me.storage.values);\n\n        if (sorter) {\n            records = records.sort(sorter);\n        }\n\n        if (!me.isGrouped) {\n            return records;\n        }\n\n        const\n            groupedRecords = [],\n            field          = me.groupers[0].field;\n\n        let curGroup       = null,\n            curGroupRecord = null,\n            childCount     = 0;\n\n        function addFooter() {\n            const\n                val    = curGroupRecord.meta.groupRowFor,\n                id     = `group-footer-${typeof val === 'number' ? val : StringHelper.createId(val)}`,\n                footer = me.getById(id) || new me.modelClass({ id }, me, {\n                    specialRow     : true,\n                    groupFooterFor : val,\n                    groupRecord    : curGroupRecord\n                });\n\n            // Used by indexOf to determine if part of store\n            footer.stores = [me];\n\n            me.register(footer);\n            footer.groupChildren = curGroupRecord.groupChildren;\n\n            if (!curGroupRecord.meta.collapsed) {\n                groupedRecords.push(footer);\n            }\n\n            me.allRecords.push(footer);\n            curGroupRecord.groupChildren.push(footer);\n            childCount++;\n            return footer;\n        }\n\n        records.forEach(record => {\n            const\n                val = record[field] == undefined ? '__novalue__' : record[field],\n                id  = `group-header-${typeof val === 'number' ? val : StringHelper.createId(val)}`;\n\n            //<debug>\n            if (val.toString() === '[object Object]') {\n                throw new Error(val.constructor.name + ' missing toString() implementation;');\n            }\n            //</debug>\n\n            // A group header or footer record of an empty group.\n            // Remove from the data\n            if (record.groupChildren?.length === 0) {\n                me.unregister(record);\n                return;\n            }\n\n            if (!ObjectHelper.isEqual(val, curGroup)) {\n                if (curGroupRecord) {\n                    // also add group footer? used by GroupSummary feature\n                    if (me.useGroupFooters) {\n                        addFooter(curGroupRecord);\n                    }\n\n                    curGroupRecord.meta.childCount = childCount;\n                }\n\n                curGroupRecord = me.getById(id) || new me.modelClass({ id }, me, {\n                    specialRow  : true,\n                    groupRowFor : val,\n                    groupField  : field\n                });\n\n                curGroupRecord.meta.collapsed = toCollapse.has(id);\n\n                // Used by indexOf to determine if part of store\n                curGroupRecord.stores = [me];\n\n                me.register(curGroupRecord);\n                curGroupRecord.groupChildren = [];\n                groupedRecords.push(curGroupRecord);\n                me.allRecords.push(curGroupRecord);\n                curGroup = val;\n                childCount = 0;\n            }\n\n            record.instanceMeta(me.id).groupParent = curGroupRecord;\n\n            // Collapse groups that was collapsed earlier\n            if (!toCollapse.has(id)) {\n                groupedRecords.push(record);\n            }\n\n            curGroupRecord.groupChildren.push(record);\n            childCount++;\n        });\n\n        // misses for last group without this\n        if (curGroupRecord) {\n            // footer for last group\n            if (me.useGroupFooters) {\n                addFooter();\n            }\n\n            curGroupRecord.meta.childCount = childCount;\n        }\n\n        me._idMap = null;\n\n        return groupedRecords;\n    }\n\n    //endregion\n\n    //region Group and ungroup\n\n    /**\n     * Is store currently grouped?\n     * @property {Boolean}\n     * @readonly\n     * @category Sort, group & filter\n     */\n    get isGrouped() {\n        return Boolean(this.groupers?.length);\n    }\n\n    /**\n     * Group records, either by replacing current sorters or by adding to them.\n     * A grouper can specify a **_custom sorting function_** which will be called with arguments (recordA, recordB).\n     * Works in the same way as a standard array sorter, except that returning `null` triggers the stores\n     * normal sorting routine. Grouped store **must** always be sorted by the same field.\n     *\n     * ```javascript\n     * // simple grouper\n     * store.group('city');\n     *\n     * // grouper as object, descending order\n     * store.group({ field : 'city', ascending : false });\n     *\n     * // using custom sorting function\n     * store.group({\n     *     field : 'city',\n     *     fn : (recordA, recordB) => {\n     *         // apply custom logic, for example:\n     *         return recordA.city.length < recordB.city.length ? -1 : 1;\n     *     }\n     * });\n     * ```\n     *\n     * @param {String|Object} field Field to group by.\n     * Can also be a config containing a field to group by and a custom sorting function called `fn`.\n     * @param {Boolean} [ascending] Sort order of the group titles\n     * @param {Boolean} [add] Add a grouper (true) or use only this grouper (false)\n     * @param {Boolean} [performSort] Trigger sort directly, which does the actual grouping\n     * @param {Boolean} [silent] Set as true to not fire events\n     * @category Sort, group & filter\n     * @fires group\n     * @fires refresh\n     * @returns {Promise|null} If {@link Core/data/AjaxStore#config-sortParamName} is set on store, this method returns `Promise`\n     * which is resolved after data is loaded from remote server, otherwise it returns `null`\n     * @async\n     */\n    group(field, ascending, add = false, performSort = true, silent = false) {\n        const me = this;\n        let newGrouper, fn;\n\n        if (field && typeof field === 'object') {\n            ascending = field.ascending;\n            fn        = field.fn;\n            field     = field.field;\n        }\n\n        if (add) {\n            me.groupers.push(newGrouper = {\n                field,\n                ascending,\n                complexMapping : field.includes('.')\n            });\n        }\n        else if (field) {\n            if (ascending == null) {\n                ascending = me.groupInfo?.field === field && me.groupInfo?.fn === fn ? !me.groupInfo.ascending : true;\n            }\n\n            me.groupInfo = newGrouper = {\n                field,\n                ascending,\n                fn,\n                complexMapping : field.includes('.')\n            };\n\n            me.groupers = [me.groupInfo];\n        }\n\n        if (newGrouper) {\n            const { prototype } = me.modelClass;\n\n            // Create a getter for complex field names like \"get resource.city\"\n            if (newGrouper.complexMapping && !Object.prototype.hasOwnProperty.call(prototype, field)) {\n                Object.defineProperty(prototype, field, {\n                    get() {\n                        return ObjectHelper.getPath(this, field);\n                    }\n                });\n            }\n        }\n\n        // as far as the store is concerned, grouping is just more sorting. so trigger sort\n        if (performSort !== false) {\n            if (me.remoteSort && !me.isRemoteDataLoading) {\n                return me.sort(null, null, false, true).then(() => me.onAfterGrouping(silent));\n            }\n            else {\n                me.sort(null, null, false, true);\n            }\n        }\n\n        me.onAfterGrouping(silent);\n    }\n\n    onAfterGrouping(silent) {\n        if (silent) {\n            return;\n        }\n        const me = this;\n        /**\n         * Fired when grouping changes\n         * @event group\n         * @param {Core.data.Store} source This Store\n         * @param {Grouper[]} groupers Applied groupers\n         * @param {Core.data.Model[]} records Grouped records\n         */\n        me.trigger('group', { isGrouped : me.isGrouped, groupers : me.groupers, records : me.storage.values });\n        me.trigger('refresh', { action : 'group', isGrouped : me.isGrouped, groupers : me.groupers, records : me.storage.values });\n    }\n\n    // Internal since UI does not support multi grouping yet\n    /**\n     * Add a grouping level (a grouper).\n     * @param {String} field Field to group by\n     * @param {Boolean} ascending Group direction\n     * @category Sort, group & filter\n     * @returns {Promise|null} If {@link Core/data/AjaxStore#config-sortParamName} is set on store, this method returns `Promise`\n     * which is resolved after data is loaded from remote server, otherwise it returns `null`\n     * @async\n     * @internal\n     */\n    addGrouper(field, ascending = true) {\n        return this.group(field, ascending, true);\n    }\n\n    // Internal since UI does not support multi grouping yet\n    /**\n     * Removes a grouping level (a grouper)\n     * @param {String} field Grouper to remove\n     * @category Sort, group & filter\n     * @returns {Promise|null} If {@link Core/data/AjaxStore#config-sortParamName} is set on store, this method returns `Promise`\n     * which is resolved after data is loaded from remote server, otherwise it returns `null`\n     * @async\n     * @internal\n     */\n    removeGrouper(field) {\n        const\n            me           = this,\n            { groupers } = me,\n            index        = groupers.findIndex(grouper => grouper.field === field);\n\n        if (index > -1) {\n            groupers.splice(index, 1);\n\n            if (!groupers.length) {\n                return me.clearGroupers();\n            }\n            else {\n                return me.group();\n            }\n        }\n    }\n\n    /**\n     * Removes all groupers, turning store grouping off.\n     * @privateparam {Boolean} [silent=false] Pass true to suppress events.\n     * @returns {Promise|null} If {@link Core/data/AjaxStore#config-sortParamName} is set on store, this method returns `Promise`\n     * which is resolved after data is loaded from remote server, otherwise it returns `null`\n     * @async\n     * @category Sort, group & filter\n     */\n    clearGroupers(silent = false) {\n        return this.setGroupers(null, { silent });\n    }\n\n    //endregion\n\n    //region Get and check\n\n    /**\n     * Check if a record belongs to a certain group (only for the first grouping level)\n     * @param {Core.data.Model} record The Record\n     * @param {*} groupValue The group value\n     * @returns {Boolean} True if the record belongs to the group, otherwise false\n     * @category Sort, group & filter\n     */\n    isRecordInGroup(record, groupValue) {\n        if (!this.isGrouped) {\n            return null;\n        }\n\n        const groupField = this.groupers[0]?.field;\n\n        return record[groupField] === groupValue && !record.isSpecialRow;\n    }\n\n    isInCollapsedGroup(record) {\n        const parentGroupRec = record.instanceMeta(this).groupParent;\n\n        return parentGroupRec?.meta.collapsed;\n    }\n\n    /**\n     * Returns all records in the group with specified groupValue.\n     * @param {*} groupValue\n     * @returns {Core.data.Model[]} Records in specified group or null if store not grouped\n     * @category Sort, group & filter\n     */\n    getGroupRecords(groupValue) {\n        if (!this.isGrouped) {\n            return null;\n        }\n\n        return this.storage.values.filter(record => this.isRecordInGroup(record, groupValue));\n    }\n\n    /**\n     * Get all group titles.\n     * @returns {String[]} Group titles\n     * @category Sort, group & filter\n     */\n    getGroupTitles() {\n        if (!this.isGrouped) {\n            return null;\n        }\n\n        return this.getDistinctValues(this.groupers[0].field);\n    }\n\n    //endregion\n\n    onDataChanged({ changes, action }) {\n        if (\n            this.isGrouped && (\n                // If an action flagged as requiring resort is performed...\n                (!changes && resortActions[action]) ||\n                // ...or if the group field has changes...\n                (changes && this.groupers.some(grouper => grouper.field in changes))\n            )\n        ) {\n            // ...then re-sort\n            this.sort();\n        }\n    }\n\n    /**\n     * Adds or removes records in a group from storage. Used when expanding/collapsing groups.\n     * @private\n     * @param {Core.data.Model} groupRecord Group which records should be added or removed\n     * @param {Boolean} include Include (true) or exclude (false) records\n     * @category Grouping\n     */\n    internalIncludeExcludeGroupRecords(groupRecord, include) {\n        const\n            me                      = this,\n            index                   = me.indexOf(groupRecord),\n            { id : mapId, storage } = me,\n            { meta, groupChildren } = groupRecord;\n\n        // Skip if group record is not found, otherwise it removes records from wrong position.\n        // Also prevent removing from already collapsed and vice versa\n        if (index === -1 || (meta.collapsed && !include) || (!meta.collapsed && include)) {\n            return;\n        }\n\n        groupChildren.forEach(child =>\n            child.instanceMeta(mapId).hiddenByCollapse = !include\n        );\n\n        if (include) {\n            // Avoid adding record duplicates which may already have been reinserted by clearing filters\n            const includeChildren = groupChildren.filter(r => !me.isAvailable(r));\n            storage.values.splice(index + 1, 0, ...includeChildren);\n        }\n        else {\n            storage.values.splice(index + 1, groupChildren.length);\n        }\n\n        storage._indicesInvalid = true;\n        me._idMap = null;\n    }\n\n    /**\n     * Removes records in a group from storage. Used when collapsing a group.\n     * @private\n     * @param groupRecord Group which records should be removed\n     * @category Grouping\n     */\n    excludeGroupRecords(groupRecord) {\n        this.internalIncludeExcludeGroupRecords(groupRecord, false);\n    }\n\n    /**\n     * Adds records in a group to storage. Used when expanding a group.\n     * @private\n     * @param groupRecord Group which records should be added\n     * @category Grouping\n     */\n    includeGroupRecords(groupRecord) {\n        this.internalIncludeExcludeGroupRecords(groupRecord, true);\n    }\n\n    /**\n     * Collects all group headers + children, whether expanded or not\n     * @private\n     * @param {Boolean} allRecords True to include filtered out records\n     * @param {Boolean} includeHeaders True to also include group headers\n     * @returns {Core.data.Model[]}\n     */\n    collectGroupRecords(allRecords, includeHeaders = true) {\n        const records = allRecords ? this.storage.allValues : this.storage.values;\n\n        return records.reduce((records, record) => {\n            if (record.isSpecialRow) {\n                if (includeHeaders && !record.isGroupFooter) {\n                    records.push(record);\n                }\n\n                if (record.isGroupHeader) {\n                    records.push.apply(records, record.groupChildren);\n                }\n            }\n\n            return records;\n        }, []);\n    }\n};\n","import Base from '../../Base.js';\nimport StringHelper from '../../helper/StringHelper.js';\n\n/**\n * @module Core/data/mixin/StoreProxy\n */\n\n/**\n * Object-like interaction with a Store by using a Proxy. To enable, configure the store with `objectify : true`.\n *\n * ```javascript\n * const store = new Store({\n *    objectify : true,\n *    data      : [\n *        { id : 'batman', name : 'Bruce' }\n *    ]\n * });\n * ```\n *\n * Access records using their ids as Store properties:\n * ```javascript\n * console.log(store.batman.name); // logs Bruce\n * ```\n *\n * Add records by assigning properties to the Store:\n * ```javascript\n * store.superman = { name : 'Clark' }; // Id will be 'superman'\n * ```\n *\n * Remove records by removing their property:\n * ```javascript\n * delete store.batman;\n * ```\n *\n * Check if a certain id existing in the store by using `in`:\n * ```javascript\n * console.log('superman' in store): // logs true\n * ```\n *\n * Please note that this approach:\n * * Will affect performance slightly, not recommended for larger datasets.\n * * Uses native Proxy.\n * * Preserves predefined Store properties, records cannot use ids that match those.\n * * Might have other limitations preventing the use of it in some scenarios where a normal Store can be used.\n *\n * @mixin\n */\nexport default Target => class StoreProxy extends (Target || Base) {\n\n    static get configurable() {\n        return {\n            /**\n             * Allow object like interaction with the Store. For example:\n             *\n             * ```javascript\n             * const store = new Store({\n             *    objectify : true,\n             *    data      : [\n             *        { id : 'batman', name : 'Bruce' }\n             *    ]\n             * });\n             *\n             * // retrieve using id as property\n             * const record = store.batman;\n             *\n             * // add as property\n             * store.superman = { name : 'Clark' };\n             *\n             * // delete to remove\n             * delete store.batman;\n             * ``\n             *\n             * @config {Boolean}\n             * @default false\n             */\n            objectify : null\n        };\n    }\n\n    initProxy() {\n        if (!globalThis.Proxy) {\n            throw new Error('Proxy not supported');\n        }\n\n        const proxy = new Proxy(this, {\n            // Support getting records using `store[id/index]\n            get(target, property) {\n                // Stores own properties take precedence\n                if (property in target) {\n                    return target[property];\n                }\n\n                // To allow accessing the underlying store\n                if (property === '$store') {\n                    return target;\n                }\n\n                // Then ids\n                let record = target.getById(property);\n\n                // And finally index\n                if (!record && !isNaN(parseInt(property))) {\n                    record = target.getAt(parseInt(property));\n                }\n\n                return record;\n            },\n\n            // Support adding/replacing records using `store.id = { ...data }`\n            set(target, property, value) {\n                // Pass through when using names of existing properties or when destroyed/ing\n                if (property in target || target.isDestroying) {\n                    target[property] = value;\n                }\n                // Otherwise add/replace a record\n                else {\n                    target.add({ [target.modelClass.idField] : property, ...value });\n                }\n\n                return true;\n            },\n\n            // Support deleting records using `delete store.id`\n            deleteProperty(target, property) {\n                // Properties are deleted on destroy\n                if (target.isDestroying) {\n                    delete target[property];\n                    return true;\n                }\n\n                return Boolean(target.remove(property).length);\n            },\n\n            // Support `id in store`\n            has(target, property) {\n                // Actual property\n                if (property in target) {\n                    return true;\n                }\n\n                // Threat { ... } as JSON representation of a record (likely from toString())\n                if (property.startsWith('{') && property.endsWith('}')) {\n                    const data = StringHelper.safeJsonParse(property);\n                    property = data?.id;\n                }\n\n                return target.includes(property);\n            }\n\n        });\n\n        return proxy;\n    }\n\n};\n","import Base from '../../Base.js';\nimport ArrayHelper from '../../helper/ArrayHelper.js';\nimport StringHelper from '../../helper/StringHelper.js';\nimport Model from '../Model.js';\n\n/**\n * @module Core/data/mixin/StoreRelation\n */\n\n/**\n * Mixin for Store that handles relations with other stores.\n *\n * The relation is defined in a Model subclass, see Model's {@link Core/data/Model#property-relations-static} property\n * for more information.\n *\n * @mixin\n */\nexport default Target => class StoreRelation extends (Target || Base) {\n    static $name = 'StoreRelation';\n\n    //region Init\n\n    /**\n     * Initialized relations, called from constructor\n     * @private\n     */\n    initRelations(reset) {\n        const\n            me        = this,\n            relations = me.modelClass.exposedRelations;\n\n        if (reset && me.modelRelations) {\n            // reset will reinit all relations, stop listening for store events on existing ones\n            me.modelRelations.forEach(relation => relation.storeDetacher?.());\n        }\n\n        if ((!me.modelRelations || me.modelRelations.length === 0 || reset) && relations) {\n            me.modelRelations = [];\n\n            // foreignKeys is filled when model exposes its properties\n            relations?.forEach(modelRelationConfig => {\n                const\n                    config       = { ...modelRelationConfig },\n                    {\n                        foreignStore,\n                        relationName,\n                        relatedCollectionName\n                    }            = config,\n                    relatedStore = typeof foreignStore === 'string' ? me[foreignStore] : foreignStore;\n\n                config.dependentStore = me;\n\n                me.modelRelations.push(config);\n\n                if (relatedStore) {\n                    config.foreignStoreProperty = config.foreignStore;\n                    config.foreignStore = relatedStore; // repeated from initRelationStores, needed if stored is assigned late\n\n                    const dependentStoreConfigs = relatedStore.dependentStoreConfigs;\n\n                    // Add link to dependent store\n                    if (dependentStoreConfigs.has(me)) {\n                        const dependentConfigs = dependentStoreConfigs.get(me);\n\n                        // Remove existing config on reset\n                        if (reset) {\n                            const existingConfig = dependentConfigs.find(c => c.relationName === relationName);\n                            if (existingConfig) {\n                                ArrayHelper.remove(dependentConfigs, existingConfig);\n                            }\n                        }\n\n                        dependentConfigs.push(config);\n                    }\n                    else {\n                        dependentStoreConfigs.set(me, [config]);\n                    }\n\n                    // if foreign key specifies relatedCollectionName the related store should also be configured\n                    if (relatedCollectionName) {\n                        relatedStore.initRelationCollection(config, me);\n                    }\n\n                    if (relatedStore.count > 0) {\n                        relatedStore.updateDependentStores('dataset', relatedStore.records);\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     * Called from other end of an relation when this store should hold a collection of related records.\n     * @private\n     * @param config\n     * @param collectionStore\n     */\n    initRelationCollection(config, collectionStore) {\n        // TODO: parts of this should move to model?\n        const\n            me               = this,\n            name             = config.relatedCollectionName,\n            collectionStores = me.collectionStores || (me.collectionStores = {});\n\n        collectionStores[name] = {\n            store  : collectionStore,\n            config : config\n        };\n\n        if (!me[name + 'Store']) {\n            me[name + 'Store'] = collectionStore;\n        }\n\n        if (me.count > 0) {\n            me.initModelRelationCollection(name, me.records);\n        }\n    }\n\n    initModelRelationCollection(name, records) {\n        const me = this;\n        // add collection getter to each model\n        records.forEach(record => {\n            // Needs to work in trees also, if not a tree traverse just calls fn on self\n            record.traverse(node => {\n                // Add/replace $relatedAssignments (or similar) if assignments already exists on target\n                const useName = name in node ? `$related${StringHelper.capitalize(name)}` : name;\n                Object.defineProperty(node, useName, {\n                    enumerable   : true,\n                    configurable : true,\n                    get          : function() {\n                        return me.getCollection(this, name);\n                    },\n                    set : function(value) {\n                        return me.setCollection(this, name, value);\n                    }\n                });\n            });\n        });\n    }\n\n    //TODO: Do diff update, this is called on filtering and will be heavy with lots of records\n\n    /**\n     * Updates relationCache for all records.\n     * @private\n     */\n    resetRelationCache() {\n        this.relationCache = {};\n        this.forEach(record => record.initRelations());\n    }\n\n    /**\n     * Caches related records from related store on the local store.\n     * @private\n     * @param record Local record\n     * @param relations Relations to related store\n     */\n    updateRecordRelationCache(record, relations) {\n        relations?.forEach(relation => {\n            const\n                { config } = relation,\n                // use related records id, or if called before \"binding\" is complete use foreign key\n                foreignId = relation.related ? relation.related.id : record.get(config.foreignKey);\n            // cache on that id, removing previously cached value if any\n            foreignId !== undefined && this.cacheRelatedRecord(record, foreignId, config.relationName, foreignId);\n        });\n    }\n\n    //endregion\n\n    //region Getters\n\n    /**\n     * Returns records the relation cache. Same result as if retrieving the collection on the dependent store, but\n     * without the need of accessing that store.\n     * @internal\n     * @param {String} name\n     * @param {Core.data.Model|String|Number} recordOrId\n     * @returns {Array}\n     */\n    getRelationCollection(name, recordOrId) {\n        const id = Model.asId(recordOrId);\n        return (this.relationCache[name] && this.relationCache[name][id]) || [];\n    }\n\n    /**\n     * Returns records from a collection of related records. Not to be called directly, called from Model getter.\n     * TODO: Move to Model?\n     * @private\n     * @param {Core.data.Model} record\n     * @param {String} name\n     * @returns {Array}\n     */\n    getCollection(record, name) {\n        const { config, store } = this.collectionStores[name];\n\n        return (store.relationCache[config.relationName] && store.relationCache[config.relationName][record.id]) || [];\n    }\n\n    /**\n     * Sets a collection of related records. Will updated the related store and trigger events from it. Not to be called\n     * directly, called from Model setter.\n     * @private\n     */\n    setCollection(model, name, records) {\n        const\n            { config, store } = this.collectionStores[name],\n            relationCache     = store.relationCache[config.relationName] || (store.relationCache[config.relationName] = {}),\n            old               = (relationCache[model.id] || []).slice(),\n            added             = [],\n            removed           = [];\n\n        store.suspendEvents();\n\n        // Remove any related records not in the new collection\n        old.forEach(record => {\n            if (!records.includes(record)) {\n                record[config.foreignKey] = null;\n                store.remove(record);\n                removed.push(record);\n            }\n        });\n\n        // Add records from the new collection not already in store\n        records.forEach(record => {\n            if (record.isModel instanceof Model) {\n                if (!record.stores.includes(store)) {\n                    store.add(record);\n                    added.push(record);\n                }\n            }\n            else {\n                [record] = store.add(record);\n                added.push(record);\n            }\n\n            // Init relation\n            record[config.foreignKey] = model.id;\n        });\n\n        store.resumeEvents();\n\n        if (removed.length) {\n            store.trigger('remove', { records : removed });\n            store.trigger('change', { action : 'remove', records : removed });\n        }\n\n        if (added.length) {\n            store.trigger('add', { records : added });\n            store.trigger('change', { action : 'add', records : added });\n        }\n    }\n\n    //endregion\n\n    //region Caching\n\n    /**\n     * Adds a record to relation cache, optionally removing it if already there.\n     * @private\n     * @param record\n     * @param id\n     * @param name\n     * @param uncacheId\n     */\n    cacheRelatedRecord(record, id, name, uncacheId = null) {\n        const\n            me    = this,\n            cache = me.relationCache[name] || (me.relationCache[name] = {});\n\n        if (uncacheId !== null) {\n            me.uncacheRelatedRecord(record, name, uncacheId);\n        }\n\n        if (id != null) {\n            // Only include of not already in relation cache, which might happen when removing and re-adding the same instance\n            ArrayHelper.include(cache[id] || (cache[id] = []), record);\n        }\n    }\n\n    /**\n     * Removes a record from relation cache, for a specific relation (specify relation name and id) or for all relations\n     * @private\n     * @param record Record to remove from cache\n     * @param name Optional, relation name\n     * @param id Optional, id\n     */\n    uncacheRelatedRecord(record, name = null, id = null) {\n        const me = this;\n\n        function remove(relationName, relatedId) {\n            const\n                cache    = me.relationCache[relationName],\n                oldCache = cache?.[relatedId];\n\n            // When unjoining a record from a filtered store the relationCache will also be filtered\n            // and might give us nothing, in which case we have nothing to clean up and bail out\n            if (oldCache) {\n                const uncacheIndex = oldCache.indexOf(record);\n                uncacheIndex >= 0 && oldCache.splice(uncacheIndex, 1);\n\n                if (oldCache.length === 0) {\n                    delete cache[relatedId];\n                }\n            }\n        }\n\n        if (id != null) {\n            remove(name, id);\n        }\n        else {\n            if (record.meta.relationCache) {\n                Object.entries(record.meta.relationCache).forEach(([relationName, relatedRecord]) =>\n                    remove(relationName, relatedRecord?.id)\n                );\n            }\n        }\n    }\n\n    /**\n     * Updates related stores when store is cleared, a record is removed or added.\n     * @private\n     * @param {String} action\n     * @param {Core.data.Model[]} records\n     */\n    updateDependentStores(action, records) {\n        this.dependentStoreConfigs.forEach(configs => {\n            configs.forEach(config => {\n                const\n                    {\n                        dependentStore,\n                        relatedCollectionName,\n                        relationName,\n                        foreignKey\n                    }     = config,\n                    cache = dependentStore.relationCache[relationName];\n\n                if (action === 'dataset') {\n                    relatedCollectionName && this.initModelRelationCollection(relatedCollectionName, records);\n\n                    dependentStore.forEach(record => {\n                        const foreign = record.initRelation(config);\n                        foreign && dependentStore.cacheRelatedRecord(record, foreign.id, relationName, foreign.id);\n                    });\n\n                    return;\n                }\n\n                if (action === 'removeall') {\n                    dependentStore.forEach(record => record.removeRelation(config));\n\n                    delete dependentStore.relationCache[relationName];\n\n                    return;\n                }\n\n                if (action === 'add') {\n                    relatedCollectionName && this.initModelRelationCollection(relatedCollectionName, records);\n                }\n\n                if (action === 'add' || action === 'remove') {\n                    records.forEach(record => {\n                        const dependentRecords = cache?.[record.id];\n\n                        switch (action) {\n                            case 'remove':\n                                // removing related record removes from cache on model and store\n                                if (dependentRecords) {\n                                    dependentRecords.forEach(dependentRecord => dependentRecord.removeRelation(config));\n                                    // Altered to not delete on self, simplifies taking actions on related records after remove if relation still lives\n                                    //delete cache[relatedRecord.id];\n                                }\n                                // TODO: Should removing related set foreign key to null? (removing Team sets Player.teamId to null)\n                                break;\n                            case 'add':\n                                // adding a new record in related store checks if any foreign keys match the new id,\n                                // and if so it sets up the relation\n                                dependentStore.forEach(dependentRecord => {\n                                    if (dependentRecord.get(foreignKey) == record.id) {\n                                        dependentRecord.initRelation(config);\n                                        dependentStore.cacheRelatedRecord(dependentRecord, record.id, relationName);\n                                    }\n                                });\n                                break;\n                        }\n                    });\n                }\n            });\n        });\n    }\n\n    /**\n     * Updates relation cache and foreign key value when a related objects id is changed.\n     * @private\n     */\n    updateDependentRecordIds(oldValue, value) {\n        this.dependentStoreConfigs?.forEach(configs => {\n            configs.forEach(config => {\n                const\n                    {\n                        dependentStore,\n                        relationName,\n                        foreignKey\n                    }            = config,\n                    cache        = dependentStore.relationCache[relationName],\n                    localRecords = cache?.[oldValue]?.slice();\n\n                localRecords?.forEach(localRecord => {\n                    // First update cache\n                    dependentStore.cacheRelatedRecord(localRecord, value, relationName, oldValue);\n                    // Then update & announce, otherwise relations wont be up to date in listeners\n                    localRecord.set(foreignKey, value, false, true);\n                });\n            });\n        });\n    }\n\n    //endregion\n};\n","import Base from '../../Base.js';\n\n/**\n * @module Core/data/mixin/StoreSum\n */\n\n/**\n * Mixin for Store that handles summaries.\n *\n * @mixin\n */\nexport default Target => class StoreSum extends (Target || Base) {\n    static get $name() {\n        return 'StoreSum';\n    }\n\n    /**\n     * Returns sum calculated by adding value of specified field for specified records. Defaults to using all records\n     * in store\n     * @param {String} field Field to summarize by\n     * @param {Core.data.Model[]} records Records to summarize, uses all records if unspecified.\n     * @returns {Number}\n     * @category Sum\n     */\n    sum(field, records = this.storage.values) {\n        if (!records) return 0;\n\n        return records.reduce((sum, record) => {\n            if (record.isSpecialRow) return sum;\n            const v = Number(record[field]);\n\n            return isNaN(v) ? sum : sum + v;\n        }, 0);\n    }\n\n    /**\n     * Returns min value for the specified field, can be used with Date or Number values. Defaults to look through all records in store\n     * @param {String} field Field to find min value for\n     * @param {Core.data.Model[]} records Records to process, uses all records if unspecified\n     * @returns {Number|Date}\n     * @category Sum\n     */\n    min(field, records = this.storage.values) {\n        if (!records || !records.length) return 0;\n\n        return records.reduce((min, record) => {\n            const type = typeof record[field]?.valueOf();\n\n            if (type === 'number' && record[field] < min) min = record[field];\n            return min;\n        }, records[0][field]);\n    }\n\n    /**\n     * Returns max value for the specified field, can be used with Date or Number values. Defaults to look through all records in store\n     * @param {String} field Field to find max value for\n     * @param {Core.data.Model[]} records Records to process, uses all records if unspecified\n     * @returns {Number|Date}\n     * @category Sum\n     */\n    max(field, records = this.storage.values) {\n        if (!records || !records.length) return 0;\n\n        return records.reduce((max, record) => {\n            const type = typeof record[field]?.valueOf();\n\n            if (type === 'number' && record[field] > max) max = record[field];\n            return max;\n        }, records[0][field]);\n    }\n\n    /**\n     * Returns the average value for the specified field. Defaults to look through all records in store\n     * @param {String} field Field to calculate average value for\n     * @param {Core.data.Model[]} records Records to process, uses all records if unspecified\n     * @returns {Number}\n     * @category Sum\n     */\n    average(field, records = this.storage.values) {\n        if (!records || !records.length) return 0;\n\n        let count = 0;\n\n        const sum = records.reduce((sum, record) => {\n            if (record.isSpecialRow) return sum;\n\n            const v = parseFloat(record[field]);\n\n            if (!isNaN(v)) {\n                count++;\n                return sum + v;\n            }\n            else {\n                return sum;\n            }\n        }, 0);\n\n        return count > 0 ? sum / count : 0;\n    }\n\n    /**\n     * Returns sum by adding value of specified field for records in the group with the specified groupValue.\n     * @param {*} groupValue The group to summarize\n     * @param {String} field Field to summarize by\n     * @returns {Number} Sum or null if store not grouped\n     * @category Sum\n     */\n    groupSum(groupValue, field) {\n        return this.sum(field, this.getGroupRecords(groupValue));\n    }\n};\n","import Base from '../../Base.js';\nimport ObjectHelper from '../../helper/ObjectHelper.js';\n\n/**\n * @module Core/data/mixin/StoreSearch\n */\n\nconst\n    findInString = (value, text) => String(value).toLowerCase().includes(text),\n    matchFns     = {\n        string  : findInString,\n        number  : findInString,\n        boolean : findInString,\n        date    : (value, text) => {\n            if (value instanceof Date && text instanceof Date) {\n                return value - text === 0;\n            }\n            return String(value.getMonth() + 1).includes(text) ||\n                String(value.getDate()).includes(text) ||\n                String(value.getFullYear()).includes(text);\n        },\n        object    : (value, text) => value === text, // typeof null === object\n        undefined : (value, text) => value === text\n    };\n\n/**\n * Format returned by Store#findByField().\n * @typedef {Object} StoreSearchResult\n * @property {Number} index Index of the record in the store\n * @property {Core.data.Model} data The record\n */\n\n/**\n * Mixin for Store that handles searching (multiple records) and finding (single record).\n *\n * @example\n * // find all records that has a field containing the string john\n * let hits = store.search('john');\n *\n * @mixin\n */\nexport default Target => class StoreSearch extends (Target || Base) {\n    static get $name() {\n        return 'StoreSearch';\n    }\n\n    //region Search (multiple hits)\n\n    /**\n     * Find all hits matching the specified input\n     * @param {String} text Value to search for\n     * @param {String[]} fields Fields to search value in\n     * @param {Function[]} [formatters] An array of field formatting functions to format the found value\n     * @param {Boolean} [searchAllRecords] True to ignore any applied filters when searching\n     * @returns {StoreSearchResult[]} Array of hits, in the format { index: x, data: record }\n     * @category Search\n     */\n    search(text, fields = null, formatters, searchAllRecords) {\n        const\n            records = this.isTree && !searchAllRecords ? this.rootNode.allChildren : this.getAllDataRecords(searchAllRecords),\n            len     = records.length,\n            found   = [];\n\n        if (text == null) {\n            return [];\n        }\n\n        if (typeof text === 'string') {\n            text = text.toLowerCase();\n        }\n\n        let i,\n            j,\n            record,\n            value,\n            valueType,\n            comparison;\n\n        for (i = 0; i < len; i++) {\n            record = records[i];\n            j      = 0;\n\n            for (const key of fields || record.fieldNames) {\n                value     = record[key];\n                valueType = (value instanceof Date) ? 'date' : typeof value;\n\n                const formatter = formatters?.[j];\n\n                if (formatter) {\n                    value     = formatter(value);\n                    valueType = 'string';\n                }\n\n                comparison = matchFns[valueType];\n\n                if (value && comparison?.(value, text)) {\n                    found.push({\n                        index : i,\n                        data  : record,\n                        field : key,\n                        id    : record.id\n                    });\n                }\n                j++;\n            }\n        }\n\n        return found;\n    }\n\n    /**\n     * Find occurrences of the specified `value` in the specified `field` on all records in the store\n     * @param {String} field The record field to search in\n     * @param {*} value Value to search for\n     * @param {Boolean} distinct True to only return distinct matches, no duplicates\n     * @param {Boolean} [searchAllRecords] True to ignore any applied filters when searching\n     * @returns {StoreSearchResult[]} Array of hits, in the format { index: x, data: record }\n     * @category Search\n     */\n    findByField(field, value, distinct = false, searchAllRecords = false) {\n        const\n            records    = this.getAllDataRecords(searchAllRecords),\n            len        = records.length,\n            usedValues = new Set(),\n            found      = [];\n\n        let i, record, fieldValue;\n\n        if (value != null) {\n            value = String(value).toLowerCase();\n        }\n\n        for (i = 0; i < len; i++) {\n            record     = records[i];\n            fieldValue = record[field];\n\n            if (!distinct || !usedValues.has(fieldValue)) {\n                const\n                    type    = fieldValue instanceof Date ? 'date' : typeof fieldValue,\n                    matchFn = matchFns[type];\n\n                if ((value == null && fieldValue === value) || value && matchFn(fieldValue, value)) {\n                    found.push({\n                        id    : record.id,\n                        index : i,\n                        data  : record\n                    });\n\n                    if (distinct) {\n                        usedValues.add(fieldValue);\n                    }\n                }\n            }\n        }\n\n        return found;\n    }\n\n    //endregion\n\n    //region Find (single hit)\n\n    /**\n     * Finds the first record for which the specified function returns true\n     * @param {Function} fn Comparison function, called with record as parameter\n     * @param {Boolean} [searchAllRecords] True to ignore any applied filters when searching\n     * @returns {Core.data.Model} Record or undefined if none found\n     *\n     * @example\n     * store.find(record => record.color === 'blue');\n     * @category Search\n     */\n    find(fn, searchAllRecords = false)  {\n        return this.getAllDataRecords(searchAllRecords).find(fn);\n    }\n\n    /**\n     * Finds the first record for which the specified field has the specified value\n     * @param {String} fieldName Field name\n     * @param {*} value Value to find\n     * @param {Boolean} [searchAllRecords] True to ignore any applied filters when searching\n     * @returns {Core.data.Model} Record or undefined if none found\n     * @category Search\n     */\n    findRecord(fieldName, value, searchAllRecords = false) {\n        const\n            matchFn = r => ObjectHelper.isEqual(r[fieldName], value);\n\n        if (this.isTree) {\n            return this.query(matchFn, searchAllRecords)[0];\n        }\n        return this.getAllDataRecords(searchAllRecords).find(matchFn);\n    }\n\n    /**\n     * Searches the Store records using the passed function.\n     * @param {Function} fn A function that is called for each record. Return true to indicate a match\n     * @param {Boolean} [searchAllRecords] True to ignore any applied filters when searching\n     * @returns {Core.data.Model[]} An array of the matching Records\n     * @category Search\n     */\n    query(fn, searchAllRecords = false) {\n        if (this.isTree) {\n            const matches = [];\n\n            this.traverse((node) => {\n                if (fn(node)) {\n                    matches.push(node);\n                }\n            }, undefined, undefined, searchAllRecords);\n            return matches;\n        }\n\n        return this.getAllDataRecords(searchAllRecords).filter(fn);\n    }\n    //endregion\n\n    //region Others\n\n    /**\n     * Returns true if the supplied function returns true for any record in the store\n     * @param {Function} fn A function that should return true to indicate a match\n     * @param {Boolean} [searchAllRecords] True to ignore any applied filters when searching\n     * @returns {Boolean}\n     *\n     * @example\n     * store.some(record => record.age > 95); // true if any record has age > 95\n     * @category Search\n     */\n    some(fn, searchAllRecords = false) {\n        return this.getAllDataRecords(searchAllRecords).some(fn);\n    }\n\n    //endregion\n};\n","import Base from '../../Base.js';\nimport ObjectHelper from '../../helper/ObjectHelper.js';\n\n/**\n * @module Core/data/mixin/StoreSort\n */\n\nconst nestedRe = /\\./;\n\n/**\n * An immutable object representing a store sorter.\n *\n * @typedef {Object} Sorter\n * @property {String} field Field name\n * @property {Boolean} [ascending=true] `true` to sort ascending, `false` to sort descending\n */\n\n/**\n * Mixin for Store that handles simple sorting as well as multi-level sorting.\n *\n * ```javascript\n * // single sorter\n * store.sort('age');\n *\n * // single sorter as object, descending order\n * store.sort({ field : 'age', ascending : false });\n *\n * // multiple sorters\n * store.sort(['age', 'name']);\n *\n * // using custom sorting function\n * store.sort({\n *     fn : (recordA, recordB) => {\n *         // apply custom logic, for example:\n *         return recordA.name.length < recordB.name.length ? -1 : 1;\n *     }\n * });\n *\n * // using locale specific sort (slow)\n * store.sort({ field : 'name', useLocaleSort : 'sv-SE' });\n * ```\n *\n * @mixin\n */\nexport default Target => class StoreSort extends (Target || Base) {\n    static get $name() {\n        return 'StoreSort';\n    }\n\n    //region Config\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Use `localeCompare()` when sorting, which lets the browser sort in a locale specific order. Set to `true`,\n             * a locale string or a locale config to enable.\n             *\n             * Enabling this has big negative impact on sorting\n             * performance. For more info on `localeCompare()`, see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare).\n             *\n             * Examples:\n             *\n             * ```javascript\n             * const store = new Store({\n             *     // Swedish sorting\n             *     useLocaleSort : 'sv-SE'\n             * });\n             *\n             * const store = new Store({\n             *     // Swedish sorting with custom casing order\n             *     useLocaleSort : {\n             *         locale    : 'sv-SE',\n             *         caseFirst : 'upper'\n             *     }\n             * });\n             * ```\n             *\n             * Can also be configured on a per-sorter basis:\n             *\n             * ```javascript\n             * store.sort({ field: 'name', useLocaleSort : 'sv-SE' });\n             * ```\n             *\n             * @config {Boolean|String|Object}\n             * @default false\n             * @category Advanced\n             */\n            useLocaleSort : null\n        };\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Initial sorters, format is [{ field: 'name', ascending: false }, ...]\n             * @config {Sorter[]|String[]}\n             * @category Common\n             */\n            sorters : [],\n\n            /**\n             * Specify true to sort this store after records are added.\n             * @config {Boolean}\n             * @default\n             * @category Sorting\n             */\n            reapplySortersOnAdd : false\n        };\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Fired before sorting\n     * @event beforeSort\n     * @param {Core.data.Store} source This Store\n     * @param {Sorter[]} sorters Sorter configs\n     * @param {Core.data.Model[]} records Records to sort\n     */\n\n    /**\n     * Fired after sorting\n     * @event sort\n     * @param {Core.data.Store} source This Store\n     * @param {Sorter[]} sorters Sorter configs\n     * @param {Core.data.Model[]} records Sorted records\n     */\n\n    //endregion\n\n    //region Properties\n\n    /**\n     * Currently applied sorters\n     * @member {Sorter[]} sorters\n     * @readonly\n     * @category Sort, group & filter\n     */\n\n    /**\n     * Is store sorted?\n     * @property {Boolean}\n     * @readonly\n     * @category Sort, group & filter\n     */\n    get isSorted() {\n        return Boolean(this.sorters.length) || this.isGrouped;\n    }\n\n    changeSorters(sorters) {\n        return sorters.map(sorter => this.normalizeSorterConfig(sorter, true));\n    }\n\n    updateReapplySortersOnAdd(enable) {\n        this.storage.autoSort = enable;\n    }\n\n    //endregion\n\n    //region Add & remove sorters\n\n    /**\n     * Sort records, either by replacing current sorters or by adding to them.\n     * A sorter can specify a **_custom sorting function_** which will be called with arguments (recordA, recordB).\n     * Works in the same way as a standard array sorter, except that returning `null` triggers the stores\n     * normal sorting routine.\n     *\n     * ```javascript\n     * // single sorter\n     * store.sort('age');\n     *\n     * // single sorter as object, descending order\n     * store.sort({ field : 'age', ascending : false });\n     *\n     * // multiple sorters\n     * store.sort(['age', 'name']);\n     *\n     * // using custom sorting function\n     * store.sort((recordA, recordB) => {\n     *     // apply custom logic, for example:\n     *     return recordA.name.length < recordB.name.length ? -1 : 1;\n     * });\n     *\n     * // using locale specific sort (slow)\n     * store.sort({ field : 'name', useLocaleSort : 'sv-SE' });\n     * ```\n     *\n     * @param {String|Sorter[]|Sorter|Function} field Field to sort by.\n     * Can also be an array of {@link Core.util.CollectionSorter sorter} config objects, or a sorting function, or a\n     * {@link Core.util.CollectionSorter sorter} config.\n     * @param {Boolean} [ascending] Sort order.\n     * Applicable when the `field` is a string (if not specified and already sorted by the field, reverts direction),\n     * or an object and `ascending` property is not specified for the object. `true` by default.\n     * Not applicable when `field` is a function. `ascending` is always `true` in this case.\n     * @param {Boolean} [add] If `true`, adds a sorter to the sorters collection.\n     * Not applicable when `field` is an array. In this case always replaces active sorters.\n     * @param {Boolean} [silent] Set as true to not fire events. UI will not be informed about the changes.\n     * @category Sort, group & filter\n     * @fires beforeSort\n     * @fires sort\n     * @fires refresh\n     * @returns {Promise|null} If {@link Core/data/AjaxStore#config-sortParamName} is set on store, this method returns `Promise`\n     * which is resolved after data is loaded from remote server, otherwise it returns `null`\n     * @async\n     */\n    sort(field, ascending, add = false, silent = false) {\n        const\n            me             = this,\n            records        = me.allRecords,\n            currentSorters = me.sorters ? me.sorters.slice() : [];\n\n        let currentDir = null,\n            curSort;\n\n        if (field) {\n            if (Array.isArray(field)) {\n                // array of strings make fields always be sorted ascending\n                me.sorters = field.map(sorter => me.normalizeSorterConfig(sorter, typeof sorter === 'string' ? true : ascending));\n            }\n            else {\n                const sorter = me.normalizeSorterConfig(field, ascending);\n\n                if (add) {\n                    curSort = me.getCurrentSorterByField(sorter.field);\n\n                    // Field already among sorters? change sort direction instead of adding new sorter\n                    if (curSort) {\n                        currentDir        = curSort.ascending;\n                        curSort.ascending = sorter.ascending;\n                    }\n                    else {\n                        me.sorters.push(sorter);\n                    }\n                }\n                else {\n                    me.sorters = [sorter];\n                }\n            }\n        }\n\n        if (!silent && me.trigger('beforeSort', { sorters : me.sorters, records, currentSorters }) === false) {\n            // Restore sorters\n            me.sorters = currentSorters;\n\n            // Restore sorting direction if toggled\n            if (currentDir !== null) {\n                curSort.ascending = currentDir;\n            }\n\n            return null;\n        }\n\n        return me.performSort(silent);\n    }\n\n    normalizeSorterConfig(field, ascending) {\n        const\n            me     = this,\n            sorter = { ascending };\n\n        if (typeof field === 'object') {\n            ObjectHelper.assign(sorter, field);\n\n            if (field.fn) {\n                delete sorter.fn;\n                sorter.sortFn = field.fn;\n            }\n\n            sorter.ascending = field.ascending ?? ascending;\n        }\n        else if (typeof field === 'function') {\n            sorter.sortFn = field;\n        }\n        else {\n            sorter.field = field;\n        }\n\n        // sort in opposite direction if not specified and already sorted, default to sorting ascending\n        if (sorter.ascending == null) {\n            const curSort = me.getCurrentSorterByField(sorter.field);\n            sorter.ascending = curSort ? !curSort.ascending : true;\n        }\n\n        if (sorter.sortFn == null) {\n            const compareItems = me.modelClass?.$meta.fields.map[sorter.field]?.compareItems;\n\n            if (compareItems) {\n                // These sorters will be ignored by AjaxStore when remoting...\n                sorter.sortFn = compareItems;\n            }\n        }\n\n        return sorter;\n    }\n\n    getCurrentSorterByField(field) {\n        return typeof field === 'string' && this.sorters.find(s => s.field === field) || null;\n    }\n\n    /**\n     * Add a sorting level (a sorter).\n     * @param {String|Sorter[]|Sorter|Function} field Field to sort by. Can also be an array of sorters, or a sorting\n     * function, or a {@link Core.util.CollectionSorter sorter} config.\n     * @param {Boolean} [ascending] Sort order (used only if field specified as string)\n     * @returns {Promise|null} If {@link Core/data/AjaxStore#config-sortParamName} is set on store, this method returns `Promise`\n     * which is resolved after data is loaded from remote server, otherwise it returns `null`\n     * @async\n     * @category Sort, group & filter\n     */\n    addSorter(field, ascending = true) {\n        return this.sort(field, ascending, true);\n    }\n\n    /**\n     * Remove a sorting level (a sorter)\n     * @param {String|Function} field Stop sorting by this field (or sorter function)\n     * @returns {Promise|null} If {@link Core/data/AjaxStore#config-sortParamName} is set on store, this method returns `Promise`\n     * which is resolved after data is loaded from remote server, otherwise it returns `null`\n     * @async\n     * @category Sort, group & filter\n     */\n    removeSorter(field) {\n        const\n            sorterIndex = this.sorters.findIndex(sorter => sorter.field === field || sorter.sortFn === field);\n\n        if (sorterIndex > -1) {\n            this.sorters.splice(sorterIndex, 1);\n            return this.sort();\n        }\n    }\n\n    /**\n     * Removes all sorters, turning store sorting off.\n     * @returns {Promise|null} If {@link Core/data/AjaxStore#config-sortParamName} is set on store, this method returns `Promise`\n     * which is resolved after data is loaded from remote server, otherwise it returns `null`\n     * @async\n     * @category Sort, group & filter\n     */\n    clearSorters(silent = false) {\n        if (this.sorters.length) {\n            this.sorters.length = 0;\n            return this.sort(undefined, undefined, undefined, silent);\n        }\n    }\n\n    //region\n\n    //region Sorting logic\n\n    /**\n     * Creates a function used with Array#sort when sorting the store. Override to use your own custom sorting logic.\n     * @param {Sorter[]} sorters An array of sorter config objects\n     * @returns {Function}\n     * @category Sort, group & filter\n     */\n    createSorterFn(sorters) {\n        const storeLocaleSort = this.useLocaleSort;\n\n        return (lhs, rhs) => {\n            for (let i = 0; i < sorters.length; i++) {\n                const\n                    sorter = sorters[i],\n                    { field, ascending = true, useLocaleSort = storeLocaleSort } = sorter,\n                    fn = sorter.fn || sorter.sortFn,\n                    direction = ascending ? 1 : -1;\n\n                if (fn) {\n                    const val = fn.call(sorter, lhs, rhs);\n                    if (val !== null) {\n                        return val * direction;\n                    }\n                }\n\n                const\n                    nested = nestedRe.test(field),\n                    lhsValue = nested ? lhs.get(field) : lhs[field],\n                    rhsValue = nested ? rhs.get(field) : rhs[field];\n\n                if (lhsValue === rhsValue) {\n                    continue;\n                }\n\n                if (lhsValue == null) {\n                    return -direction;\n                }\n\n                if (rhsValue == null) {\n                    return direction;\n                }\n\n                if (useLocaleSort && typeof lhsValue === 'string') {\n                    // Use systems locale\n                    if (useLocaleSort === true) {\n                        return String(lhsValue).localeCompare(rhsValue) * direction;\n                    }\n\n                    // Use specified locale\n                    if (typeof useLocaleSort === 'string') {\n                        return String(lhsValue).localeCompare(rhsValue, useLocaleSort) * direction;\n                    }\n\n                    // Use locale config\n                    if (typeof useLocaleSort === 'object') {\n                        return String(lhsValue).localeCompare(rhsValue, useLocaleSort.locale, useLocaleSort) * direction;\n                    }\n                }\n\n                if (lhsValue > rhsValue) {\n                    return direction;\n                }\n                if (lhsValue < rhsValue) {\n                    return -direction;\n                }\n            }\n\n            return 0;\n        };\n    }\n\n    /**\n     * The sorter function for sorting records in the store.\n     * @member {Function}\n     * @internal\n     * @readonly\n     */\n    get sorterFn() {\n        const\n            me = this,\n            { sorters } = me;\n\n        // When remoteSort is enabled then always sort by data order received from remote server\n        // _remoteSortIndex is set inside store.setStoreData() method\n        return me.createSorterFn(me.remoteSort ?  [{ field : '_remoteSortIndex' }] : (me.isGrouped ? me.groupers.concat(sorters) : sorters));\n    }\n\n    /**\n     * Perform sorting according to the {@link #config-sorters} configured.\n     * This is the internal implementation which is overridden in {@link Core.data.AjaxStore} and\n     * must not be overridden.\n     * @async\n     * @private\n     * @category Sort, group & filter\n     */\n    performSort(silent) {\n        const\n            me = this,\n            { rootNode, storage, sorterFn: sorter } = me;\n\n        if (me.tree) {\n            !me.isChained && rootNode.traverse(node => {\n                if (node.isLoaded && node.isParent) {\n                    node.children.sort(sorter);\n                    // Since child nodes change order their parentIndex needs to be updated.\n                    // Update is silent, records won't be considered modified because of the sort\n                    node.updateChildrenIndices(node.children, 'parentIndex', true);\n                }\n            });\n            storage.replaceValues({\n                values : me.collectDescendants(rootNode).visible,\n                silent : true\n            });\n        }\n        else if (me.isGrouped) {\n            storage.replaceValues({\n                values : me.prepareGroupRecords(sorter),\n                silent : true\n            });\n        }\n        else {\n            storage.replaceValues({\n                values : storage.values.sort(sorter),\n                silent : true\n            });\n        }\n\n        me.afterPerformSort(silent || me.isRemoteDataLoading);\n    }\n\n    afterPerformSort(silent) {\n        if (silent) {\n            return;\n        }\n\n        const me = this;\n\n        me._idMap = null;\n\n        const event = {\n            action  : 'sort',\n            sorters : me.sorters,\n            records : me.allRecords\n        };\n\n        me.trigger('sort', event);\n        me.trigger('refresh', event);\n    }\n\n    //endregion\n};\n","import Base from '../../Base.js';\nimport ObjectHelper from '../../helper/ObjectHelper.js';\n// TODO: turn into plugin instead?\n\n/**\n * @module Core/data/mixin/StoreChained\n */\n// Intentionally using one param since we check function.length, don't remove\nconst returnTrue = rec => true;\n\n/**\n * A chained Store contains a subset of records from a master store. Which records to include is determined by a\n * filtering function, {@link #config-chainedFilterFn}.\n *\n * ```javascript\n * masterStore.chain(record => record.percent < 10);\n *\n * // or\n *\n * new Store({\n *   masterStore     : masterStore,\n *   chainedFilterFn : record => record.percent < 10\n * });\n * ```\n *\n * @mixin\n */\nexport default Target => class StoreChained extends (Target || Base) {\n    static get $name() {\n        return 'StoreChained';\n    }\n\n    //region Config\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Function used to filter records in the masterStore into a chained store. If not provided,\n             * all records from the masterStore will be included in the chained store.\n             * @config {Function}\n             * @category Chained store\n             */\n            chainedFilterFn : null,\n\n            /**\n             * Array of field names that should trigger filtering of chained store when the fields are updated.\n             * @config {String[]}\n             * @category Chained store\n             */\n            chainedFields : null,\n\n            /**\n             * Master store that a chained store gets its records from.\n             * @config {Core.data.Store}\n             * @category Chained store\n             */\n            masterStore : null,\n\n            /**\n             * Method names calls to which should be relayed to master store.\n             * @config {String[]}\n             * @category Chained store\n             */\n            doRelayToMaster : ['add', 'remove', 'insert'],\n\n            /**\n             * Method names calls to which shouldn't be relayed to master store.\n             * @config {String}\n             * @category Chained store\n             */\n            dontRelayToMaster : [],\n\n            /**\n             * Flag showing whether to keep added/removed uncommitted records when filling the store from master.\n             * @config {Boolean}\n             * @category Chained store\n             */\n            keepUncommittedChanges : false,\n\n            /**\n             * If true, collapsed records in original tree will be excluded from the chained store.\n             * @config {Boolean}\n             * @category Chained store\n             */\n            excludeCollapsedRecords : true\n        };\n    }\n\n    // All props should be predefined to work properly with objectified stores\n    static get properties() {\n        return {\n            chainedStores : null\n        };\n    }\n\n    //endregion\n\n    construct(config) {\n        super.construct(config);\n\n        const\n            me              = this,\n            { masterStore } = me,\n            sort            = me.syncOrder ? 'sort' : '';\n\n        if (masterStore) {\n            me.methodNamesToRelay.forEach(fnName => me[fnName] = (...params) => me.relayToMaster(fnName, params));\n\n            me.removeAll = (...params) => {\n                masterStore.remove(me.getRange(), ...params);\n            };\n\n            // TODO: prevent other functions?\n\n            masterStore.ion({\n                // HACK to have chained stores react early in a async events scenario (with engine). Could be turned\n                // into a config, but this way one does not have to think about it\n                changePreCommit : me.onMasterDataChangedPreCommit,\n                change          : me.onMasterDataChanged,\n                [sort]          : me.onMasterDataChanged,\n                prio            : 1,\n                thisObj         : me\n            });\n\n            if (!masterStore.chainedStores) {\n                masterStore.chainedStores = [];\n            }\n            masterStore.chainedStores.push(me);\n\n            me.fillFromMaster();\n        }\n    }\n\n    //region Properties\n\n    // For accessing the full set of records, whether chained or not\n    get $master() {\n        return this.masterStore || this;\n    }\n\n    /**\n     * Is this a chained store?\n     * @property {Boolean}\n     * @readonly\n     * @category Store\n     */\n    get isChained() {\n        return Boolean(this.masterStore);\n    }\n\n    set chainedFilterFn(chainedFilterFn) {\n        this._chainedFilterFn = this.thisObj ? chainedFilterFn.bind(this.thisObj) : chainedFilterFn;\n    }\n\n    get chainedFilterFn() {\n        return this._chainedFilterFn || returnTrue;\n    }\n\n    get methodNamesToRelay() {\n        const\n            doIsArray   = Array.isArray(this.doRelayToMaster),\n            dontIsArray = Array.isArray(this.dontRelayToMaster);\n\n        return doIsArray && this.doRelayToMaster.filter(name => !dontIsArray || !this.dontRelayToMaster.includes(name)) || [];\n    }\n\n    //endregion\n\n    //region Internal\n\n    updateChainedStores() {\n        if (this.chainedStores) {\n            this.chainedStores.forEach(store => store.fillFromMaster());\n        }\n    }\n\n    /**\n     * Updates records available in a chained store by filtering the master store records using\n     * {@link #config-chainedFilterFn}\n     * @category Chained store\n     */\n    fillFromMaster() {\n        const\n            me                      = this,\n            { masterStore, isTree } = me,\n            // the || is for BW compat since we had public demos using store.chain(() => true)\n            isRecordFilter          = me.chainedFilterFn.length > 0 || me.chainedFilterFn.toString().length <= 10;\n\n        let records;\n\n        if (!me.isChained) {\n            throw new Error('fillFromMaster only allowed on chained store');\n        }\n\n        if (me.keepUncommittedChanges) {\n            if (isTree) {\n                throw new Error('Cannot use keepUncommittedChanges on a chained tree store');\n            }\n\n            if (isRecordFilter) {\n                records = masterStore.allRecords.filter(r => !me.removed.includes(r) && !me.added.includes(r) && me.chainedFilterFn(r));\n            }\n            else {\n                records = me.chainedFilterFn().filter(r => !me.removed.includes(r) && !me.added.includes(r));\n            }\n            records = me.added.values.filter(r => !me.removed.includes(r)).concat(records);\n        }\n        else {\n            if (isRecordFilter) {\n                records = masterStore.allRecords.filter(me.chainedFilterFn);\n            }\n            else {\n                records = me.chainedFilterFn();\n            }\n\n            if (isTree) {\n                // All nodes will be registered\n                me.idRegister = {};\n                me.internalIdRegister = {};\n\n                // *all* owned records have to join, as they would have done if they'd all gone through\n                // the appendChild route for this store.\n                records.forEach(r => {\n                    if (r.stores.includes(me)) {\n                        me.register(r);\n                    }\n                    else {\n                        r.joinStore(me);\n                    }\n                });\n\n                // We exclude collapsed records by default. It's used in Columns Store.\n                // Because grid columns is a tree store when subgrid columns is just a chained store of the columns store.\n                // And we don't need to include collapsed column.\n                // If we need to show collapsed nodes in Combo we need to chain tree store and set `excludeCollapsedRecords` to `false`.\n                if (me.excludeCollapsedRecords) {\n                    const children = me.getChildren(me.rootNode);\n                    records = me.doIncludeExclude(children, true);\n                }\n            }\n        }\n\n        me.data = records;\n    }\n\n    /**\n     * Commits changes back to master.\n     * - the records deleted from chained store and present in master will be deleted from master\n     * - the records added to chained store and missing in master will added to master\n     * Internally calls {Store#function-commit commit()}.\n     * @returns {Object} Changes, see Store#changes\n     * @internal\n     */\n    commitToMaster() {\n        const\n            me = this,\n            master = me.masterStore;\n\n        if (!me.isChained) {\n            throw new Error('commitToMaster only allowed on chained store');\n        }\n\n        master.beginBatch();\n        master.remove(me.removed.values);\n        master.add(me.added.values);\n        master.endBatch();\n\n        return me.commit();\n    }\n\n    /**\n     * Relays some function calls to the master store\n     * @private\n     */\n    relayToMaster(fnName, params) {\n        return this.masterStore[fnName](...params);\n    }\n\n    // HACK, when used with engine the chained store will catch events early (sync) and prevent late (async) listeners\n    onMasterDataChangedPreCommit(event) {\n        this.onMasterDataChanged(event);\n        this.$masterEventhandled = true;\n    }\n\n    /**\n     * Handles changes in master stores data. Updates the chained store accordingly\n     * @private\n     */\n    onMasterDataChanged({ action, changes, $handled, isMove }) {\n        // Handled early in engine store (above), bail out\n        if (this.$masterEventhandled) {\n            this.$masterEventhandled = false;\n            return;\n        }\n\n        // 'move' action triggers a remove event first, we wait for the 'add' - no need to fill twice\n        if (isMove && action === 'remove') {\n            return;\n        }\n\n        // if a field not defined in chainedFields is changed, ignore the change.\n        // there is no need to refilter the store in such cases, the change will be available anyhow since data is\n        // shared\n        if (action !== 'update' || this.chainedFields?.some(field => field in changes)) {\n            this.fillFromMaster();\n        }\n    }\n\n    //endregion\n\n    //region public API\n\n    /**\n     * Creates a chained store, a new Store instance that contains a subset of the records from current store.\n     * Which records is determined by a filtering function, which is reapplied when data in the base store changes.\n     *\n     * ```javascript\n     * const oldies = store.makeChained(record => record.age > 50);\n     * // or use a simple query\n     * const ages = store.makeChained(() => store.allRecords.distinct('age')));\n     * ```\n     *\n     * If this store is a {@link Core.data.mixin.StoreTree#property-isTree tree} store, then the resulting chained store\n     * will be a tree store sharing the same root node, but only child nodes which pass the `chainedFilterFn` will be\n     * considered when iterating the tree through the methods such as\n     * {@link Core.data.Store#function-traverse} or {@link Core.data.Store#function-forEach}.\n     *\n     * @param {Function} [chainedFilterFn] Either a filter function called for every record to determine if it should be\n     * included (return true / false), or a query function called with no arguments (see example below). Defaults to\n     * including all records (fn always returning true)\n     * @param {String[]} [chainedFields] Array of fields that trigger filtering when they are updated\n     * @param {StoreConfig} [config] Additional chained store configuration. See {@link Core.data.Store#configs}\n     * @param {Class} [config.storeClass] The Store class to use if this Store type is not required.\n     * @returns {Core.data.Store}\n     */\n    makeChained(chainedFilterFn = returnTrue, chainedFields, config) {\n        //<debug>\n        // Guard against instances being passed in an attempt to clone.\n        if (config && !ObjectHelper.isObject(config)) {\n            throw new Error('Raw object must be passed to makeChained');\n        }\n\n        //</debug>\n        return new (config?.storeClass || this.constructor)({\n            ...config || {},\n            tree           : false,\n            autoTree       : false,\n            // If someone ever chains a chained store, chain master instead\n            masterStore    : this.$master,\n            modelClass     : this.modelClass,\n            // Chained store should never use syncDataOnLoad, that will create an infinite loop when they determine\n            // that a record is added and then add it to master, repopulating this store and round we go\n            syncDataOnLoad : false,\n            chainedFilterFn,\n            chainedFields\n        });\n    }\n\n    /**\n     * Alias for {@link Core.data.Store#function-makeChained}\n     *\n     * @param {Function} [chainedFilterFn] Either a filter function called for every record to determine if it should be\n     * included (return true / false), or a query function called with no arguments (see example below). Defaults to\n     * including all records (fn always returning true)\n     * @param {String[]} [chainedFields] Array of fields that trigger filtering when they are updated\n     * @param {StoreConfig} [config] Additional chained store configuration. See {@link Core.data.Store#configs}\n     * @param {Class} [config.storeClass] The Store class to use if this Store type is not required.\n     * @returns {Core.data.Store}\n     */\n    chain() {\n        return this.makeChained(...arguments);\n    }\n\n    //endregion\n\n    doDestroy() {\n        // Destroy chained store on master store destroy\n        this.chainedStores?.forEach(chainedStore => chainedStore.destroy());\n\n        // Events superclass fires destroy event.\n        super.doDestroy();\n    }\n};\n","import Base from '../../Base.js';\nimport ObjectHelper from '../../helper/ObjectHelper.js';\n\n/**\n * @module Core/data/mixin/StoreState\n */\n\n/**\n * A Mixin for Store that manages its state.\n *  * **sorters**\n *  * **groupers**\n *  * **filters**: Only serializable filters are saved (filters defined with `property` and `value`).\n * @mixin\n */\nexport default Target => class StoreState extends (Target || Base) {\n    static get $name() {\n        return 'StoreState';\n    }\n\n    /**\n     * Get store state. Used by State-plugin to serialize state\n     * @private\n     * @returns {{ sorters, groupers }}\n     */\n    getState() {\n        const\n            { sorters, groupers, filters } = this,\n            state                          = {};\n\n        if (sorters?.length) {\n            state.sorters = sorters.map(sorter => {\n                const clone = ObjectHelper.cleanupProperties(ObjectHelper.clone(sorter));\n\n                // Remove sorting fns\n                delete clone.fn;\n                delete clone.sortFn;\n\n                return clone;\n            });\n        }\n\n        if (groupers?.length) {\n            state.groupers = groupers.map(grouper => {\n                const clone = ObjectHelper.cleanupProperties(ObjectHelper.clone(grouper));\n\n                // Remove grouping fns\n                delete clone.fn;\n\n                return clone;\n            });\n        }\n\n        if (filters?.values.length) {\n            state.filters = filters.values.map(filter => {\n                const clone = ObjectHelper.cleanupProperties(ObjectHelper.clone(filter.config));\n\n                // Apply value, needed because of filterable fn reusing instance (so not in config)\n                clone.value = filter.value;\n\n                // Remove default value, no need to store that in state\n                if (clone.caseSensitive) {\n                    delete clone.caseSensitive;\n                }\n\n                // Remove filtering fns\n                // delete clone.filterBy; // Cannot remove it, required by export feature\n\n                return clone;\n            });\n        }\n\n        return state;\n    }\n\n    /**\n     * Apply store state. Used by State-plugin to restore a previously serialized state\n     * @private\n     * @param {{ sorters, groupers }} state\n     */\n    applyState(state) {\n        const\n            me = this,\n            {\n                sorters  = [],\n                groupers = [],\n                filters  = []\n            }  = state,\n            {\n                sortParamName,\n                filterParamName\n            } = me;\n\n        // We cannot apply sorters with a sortFn if we are doing server-side sorting\n        me.sorters = sorters.filter(sorter => sorter.field || (sorter.sortFn && !sortParamName));\n        me.groupers = groupers.slice();\n        me.sort();\n\n        // We cannot apply filters with a filterBy if we are doing server-side filtering\n        me.filters = filters.filter(filter => filter.property || (filter.filterBy && !filterParamName));\n        me.filter();\n    }\n};\n","/**\n * @module Core/data/Wbs\n */\n\nconst zeroPad = v => String(v).padStart(6, '0');\n\n/**\n * This class holds a WBS (Work Breakdown Structure) value (e.g., '1.2.1'). This class ensures that such values compare\n * correctly, for example, that '1.2' is less than '1.10' (which do not compare that way as simple text).\n */\nexport default class Wbs {\n\n    /**\n     * Wbs constructor.\n     * @param {String|Number} value The value of WBS\n     */\n    constructor(value) {\n        this.value = value;\n        this._padded = null;\n    }\n\n    /**\n     * The WBS value\n     * @readonly\n     * @member {String} value\n     */\n    set value(value) {\n        this._value = String(value ?? '');\n    }\n\n    get value() {\n        return this._value;\n    }\n\n    /**\n     * Returns a `Wbs` instance given a `value`. If the `value` is already a `Wbs` object, it is returned. Otherwise,\n     * a new `Wbs` is created. If `value` is `null` or `undefined`, that value is returned.\n     * @param {String|Number|Core.data.Wbs} value\n     * @returns {Core.data.Wbs}\n     */\n    static from(value) {\n        // this must preserve null to be useful as a data field, where a null value means no value present.\n        return (value == null) ? value : ((value instanceof Wbs) ? value : new Wbs(value));\n    }\n\n    /**\n     * Returns a WBS code where each component is 0-padded on the left to 6 digits. That is \"1.2\" is padded to be\n     * \"000001.000002\". These values can be compared for proper semantic order (e.g., Wbs.pad('1.2') < Wbs.pad('1.10')).\n     * @param {String|Number|Core.data.Wbs} value\n     * @returns {String}\n     * @private\n     */\n    static pad(value) {\n        return (value instanceof Wbs) ? value.valueOf() : Wbs.split(value).map(zeroPad).join('.');\n    }\n\n    /**\n     * Returns an array of digits from a given WBS code `value`. If the value cannot be converted, an empty array is\n     * returned.\n     * @param {String|Number|Core.data.Wbs} value\n     * @returns {Number[]}\n     * @private\n     */\n    static split(value) {\n        let i, ret;\n\n        if (value || value === 0) {\n            switch (typeof value) {\n                case 'object':\n                    value = String(value);\n                // noinspection FallThroughInSwitchStatementJS\n                case 'string': // eslint-disable-line no-fallthrough\n                    ret = value.split('.');\n\n                    for (i = ret.length; i-- > 0; /* empty */) {\n                        ret[i] = parseInt(ret[i], 10);\n                    }\n                    break;\n\n                case 'number':\n                    ret = [value];\n                    break;\n            }\n        }\n\n        return ret || [];\n    }\n\n    /**\n     * Compares two WBS values, returning 0 if equal, -1 if `lhs` is less than `rhs, or 1 if `lhs` is greater than `rhs`.\n     * @param {String|Core.data.Wbs} lhs\n     * @param {String|Core.data.Wbs} rhs\n     * @returns {Number}\n     */\n    static compare(lhs, rhs) {\n        if (lhs === rhs) {\n            return 0;\n        }\n\n        if (!lhs || !rhs) {\n            return lhs ? 1 : (rhs ? -1 : 0);\n        }\n\n        lhs = Wbs.pad(lhs);\n        rhs = Wbs.pad(rhs);\n\n        return (lhs < rhs) ? -1 : ((rhs < lhs) ? 1 : 0);\n    }\n\n    /**\n     * Appends a sub-level WBS value to this WBS code and returns a `Wbs` instance for it.\n     * @param {String|Number} value\n     * @returns {Core.data.Wbs}\n     */\n    append(value) {\n        const s = this.value;\n\n        return Wbs.from(s ? `${s}.${value}` : value);\n    }\n\n    /**\n     * Returns truthy value if this Wbs equals the passed value.\n     * @param {String|Core.data.Wbs} value\n     * @returns {Boolean}\n     */\n    isEqual(value) {\n        return !Wbs.compare(this, value);\n    }\n\n    /**\n     * Compares this WBS value with a specified pattern, returning `true` if they match. If the `pattern` is simply a\n     * sequence of digits and decimal points (e.g., \"1.2\"), it is a match if it is a substring of this WBS code (e.g.,\n     * \"3.1.2.4\"). If the `pattern` starts with `*` (e.g., \"*.1.2\"), it is a match if this WBS code ends with the text\n     * following the `*` (e.g., \"4.3.1.2\"). If the `pattern` ends with `*`, it is a match if this WBS code starts with\n     * the text up to the `*`.\n     *\n     * Some examples:\n     * ```\n     *  console.log(Wbs.from('1.2.3.4').match('2.3'));\n     *  > true\n     *  console.log(Wbs.from('1.2.3.4').match('*.4'));\n     *  > true\n     *  console.log(Wbs.from('1.2.3.4').match('1.2.*'));\n     *  > true\n     *\n     *  console.log(Wbs.from('1.2.3.4').match('2.4'));\n     *  > false\n     *  console.log(Wbs.from('1.2.3.4').match('*.3'));\n     *  > false\n     *  console.log(Wbs.from('1.2.3.4').match('2.*'));\n     *  > false\n     * ```\n     * @param {String} pattern A partial WBS code (e.g., \"1.2\"), optionally starting or ending with `*`.\n     * @returns {Boolean}\n     */\n    match(pattern) {\n        let ret = false;\n\n        if (pattern) {\n            const\n                wbs = this.value,\n                globLeft = pattern[0] === '*',\n                globRight = pattern.endsWith('*'),\n                n = pattern.length;\n\n            if (globLeft === globRight) {\n                // no globs behavior is the same as both globs ('1.2' is the same as '*1.2*')\n                ret = wbs.indexOf(globLeft ? pattern.substr(1, n - 2) : pattern) > -1;\n            }\n            else if (globLeft) {\n                ret = wbs.endsWith(pattern.substr(1));\n            }\n            else {\n                ret = wbs.startsWith(pattern.substr(0, n - 1));\n            }\n        }\n\n        return ret;\n    }\n\n    toString() {\n        return this.value;\n    }\n\n    toJSON() {\n        return this.toString();\n    }\n\n    valueOf() {\n        // the value we return is implicitly used by < and > operators when comparing instances of this type, so we\n        // need to return a value that makes \"1.2 < 1.10\" evaluate as true:\n        return this._padded ?? (this._padded = Wbs.pad(this.value));\n    }\n}\n","import Base from '../../Base.js';\nimport StringHelper from '../../helper/StringHelper.js';\nimport VersionHelper from '../../helper/VersionHelper.js';\nimport Wbs from './../Wbs.js';\n\n/**\n * @module Core/data/mixin/StoreTree\n */\nconst emptyArray = Object.freeze([]);\n\n/**\n * Mixin for store with tree related functionality. To learn more about working with tree nodes please see the\n * {@link Core/data/mixin/TreeNode} class and [this guide](#Core/guides/data/treedata.md).\n * @mixin\n */\nexport default Target => class StoreTree extends (Target || Base) {\n    static $name = 'StoreTree';\n\n    static configurable = {\n        /**\n         * Set to `true` to on load transform a flat dataset with raw objects containing `parentId` into the format\n         * expected for tree data.\n         *\n         * Example input format:\n         *\n         * ```javascript\n         * [\n         *   { id : 1, name : 'Parent' },\n         *   { id : 2, name : 'Child', parentId : 1 }\n         * ]\n         * ```\n         *\n         * Will be transformed into:\n         *\n         * ```javascript\n         * [\n         *   {\n         *     id       : 1,\n         *     name     : 'Parent',\n         *     children : [\n         *       { id : 2, name : 'Child', parentId : 1 }\n         *     ]\n         *   }\n         * ]\n         * ```\n         *\n         * @config {Boolean}\n         * @category Tree\n         */\n        transformFlatData : null,\n\n        /**\n         * This flag prevents firing of 'remove' event when moving a node in the tree. In 6.0 this will be the default\n         * behavior and this flag will be removed.\n         * @config {Boolean}\n         * @category Tree\n         */\n        fireRemoveEventForMoveAction : VersionHelper.checkVersion('core', '6.0', '<')\n    };\n\n    //region Getters\n\n    /**\n     * True if this Store is configured to handle tree data (with `tree : true`) or if this is a\n     * {@link Core.data.Store#function-makeChained chained store} and the master store is a tree store.\n     * @property {Boolean}\n     * @readonly\n     * @category Tree\n     */\n    get isTree() {\n        return this.tree || (this.masterStore && this.masterStore.tree);\n    }\n\n    /**\n     * Returns all leaf records in a tree store\n     * @property {Core.data.Model[]}\n     * @category Tree\n     */\n    get leaves() {\n        const me = this,\n            result = [];\n\n        if (me.isTree) {\n            me.traverse(record => {\n                if (record.isLeaf) {\n                    result.push(record);\n                }\n            });\n\n            return result;\n        }\n        else {\n            me.allRecords.forEach(r => {\n                if (r.isLeaf) {\n                    result.push(r);\n                }\n                r.traverse(record => {\n                    if (record.isLeaf) {\n                        result.push(record);\n                    }\n                }, true);\n            });\n        }\n        return result;\n    }\n\n    //endregion\n\n    //region Children\n\n    /**\n     * Loads children for a parent node that uses load on demand (when expanding it). Base implementation does nothing,\n     * either use AjaxStore which implements it, create your own subclass with an implementation or listen for\n     * `toggleNode` and insert records when you have them available.\n     * @param {Core.data.Model} parentRecord\n     * @returns {Promise} A Promise which will be resolved if the load succeeds, and rejected if the load is\n     * vetoed by a {@link Core.data.AjaxStore#event-beforeLoadChildren} handler, or if an {@link Core.data.AjaxStore#event-exception} is detected.\n     * The resolved function is passed the event object passed to any event handlers.\n     * The rejected function is passed the {@link Core.data.AjaxStore#event-exception} event if an exception occurred,\n     * or `false` if the load was vetoed by a {@link Core.data.AjaxStore#event-beforeLoadChildren} handler.\n     * @category Tree\n     */\n    async loadChildren(parentRecord) {\n    }\n\n    /**\n     * Called from Model when adding children. Not to be called directly, use Model#appendChild() instead.\n     * @internal\n     * @param {Core.data.mixin.TreeNode} parent\n     * @param {Core.data.mixin.TreeNode[]} children\n     * @param {Number} index\n     * @param {Object} isMove\n     * @param {Boolean} [silent]\n     * @fires add\n     * @fires change\n     * @category Tree\n     */\n    onNodeAddChild(parent, children, index, isMove, silent = false) {\n        const\n            me                  = this,\n            isRootLoad          = parent === me.rootNode && parent.isLoading,\n            { storage }         = me,\n            toAddToUI           = [],\n            toAdd               = [],\n            { previousSibling } = children[0];\n\n        let storeInsertionPoint;\n\n        me.collectDescendants(children, toAddToUI, toAdd, { inCollapsedBranch : !(parent.isExpanded(me) && parent.ancestorsExpanded(me)) });\n\n        // Keep CRUD caches up to date unless it's a root load\n        if (!isRootLoad && toAdd.length) {\n            for (const record of toAdd) {\n                // Only considered an add if not modified or moved\n                if (!me.modified.includes(record) && !isMove[record.id]) {\n                    // If was removed, remove from `removed` list\n                    if (me.removed.includes(record)) {\n                        me.removed.remove(record);\n                    }\n                    // Else add to `added` list\n                    else if (!record.isLinked) {\n                        me.added.add(record);\n                    }\n                }\n            }\n        }\n\n        // Root node inserted first\n        if (isRootLoad && me.rootVisible) {\n            toAddToUI.unshift(parent);\n            toAdd.unshift(parent);\n        }\n\n        if (toAddToUI.length) {\n            // Calculate the insertion point into the flat store.\n            // If the new node is the first, then it goes after the parent node.\n            if (index === 0 || !previousSibling) {\n                storeInsertionPoint = storage.indexOf(parent);\n            }\n            // Otherwise it has to go after the previous visible node which has\n            // to be calculated. See indexOfPreviousVisibleNode for explanation.\n            else {\n                storeInsertionPoint = storage.indexOf(previousSibling) + previousSibling.getDescendantCount(true, me);\n            }\n\n            // Insert added child nodes at correct location in storage.\n            // We must not react to change - we fire the events here.\n            storage.suspendEvents();\n            me.storage.splice(++storeInsertionPoint, 0, toAddToUI);\n            storage.resumeEvents();\n            me._idMap = null;\n        }\n\n        // Since we do not pass through Store#onDataChange we have to handle relations manually here. And since they are\n        // not tied to flat part of store, use all children\n        me.updateDependentStores('add', children);\n\n        // If it's a root level set data op, then signal 'dataset'\n        if (isRootLoad && toAddToUI.length) {\n            // If we have initial sorters, perform a silent sort before triggering `dataset`\n            // NOTE: Records in toAddToUI will be in the original order, not affected by the sort\n            if (me.sorters.length) {\n                me.sort(null, null, false, true);\n            }\n\n            me.afterLoadData?.();\n\n            if (!silent) {\n                const event = { action : 'dataset', data : me._data, records : toAddToUI };\n                me.trigger('refresh', event);\n                me.trigger('change', event);\n            }\n        }\n        // Else, continue as before to signal an \"isChild\" add.\n        else if (!silent) {\n            const event = { action : 'add', parent, isChild : true, isMove, records : children, allRecords : toAdd, index : storeInsertionPoint };\n            me.trigger('add', event);\n            me.trigger('change', event);\n\n            // Check if any add is actually a move\n            if (Object.values(isMove).some(wasMoved => wasMoved)) {\n                const event = {\n                    newParent  : parent,\n                    records    : children.filter(record => isMove[record.id]),\n                    oldParents : children.map(child => {\n                        const parent = me.getById(child.meta.oldParentId);\n                        return parent?.isRoot ? null : parent;\n                    })\n                };\n                me.trigger('move', event);\n            }\n        }\n    }\n\n    onNodeRemoveChild(parent, children, index, flags = { isMove : false, silent : false, unfiltered : false }) {\n        const\n            me                             = this,\n            { storage }                    = me,\n            toRemoveFromUI                 = [],\n            toRemove                       = [],\n            { isMove, silent, unfiltered } = flags,\n            removeUnfiltered               = unfiltered && me.isFiltered,\n            childrenToRemove               = removeUnfiltered && parent.unfilteredChildren ? parent.unfilteredChildren : children;\n\n        me.collectDescendants(childrenToRemove, toRemoveFromUI, toRemove, { inCollapsedBranch : !(parent.isExpanded(me) && parent.ancestorsExpanded(me)), unfiltered : removeUnfiltered });\n        // test StoreTree.t.js should fail if the next line replaces the above line\n        // me.collectDescendants(children, toRemoveFromUI, toRemove, { inCollapsedBranch : !(parent.isExpanded(me) && parent.ancestorsExpanded(me)) });\n\n        if (!isMove) {\n            // Unjoin is recursive, use flat children array\n            for (const record of children) {\n                record.unjoinStore(me);\n            }\n\n            // Keep CRUD caches up to date\n            for (const record of toRemove) {\n                // TODO remove this check as unjoinStore already checks (currently makes StoreTree.t.js fail)\n                if (record.stores.includes(me)) {\n                    record.unjoinStore(me);\n                }\n\n                // If was newly added, remove from `added` list\n                if (me.added.includes(record)) {\n                    me.added.remove(record);\n                }\n                // Else add to `removed` list\n                else if (!record.isLinked) {\n                    me.removed.add(record);\n                }\n            }\n            me.modified.remove(toRemove);\n        }\n\n        // Remove removed child nodes at correct location in storage\n        if (toRemoveFromUI.length) {\n            index = storage.indexOf(toRemoveFromUI[0]);\n            // We must not react to change - we fire the events here.\n            if (index > -1) {\n                storage.suspendEvents();\n                storage.splice(index, toRemoveFromUI.length);\n                storage.resumeEvents();\n                me._idMap = null;\n            }\n        }\n        else {\n            // If nothing is removed from UI (storage) return -1, showing that removed node was in a collapsed branch\n            index = -1;\n        }\n\n        if (!silent && (me.fireRemoveEventForMoveAction || !isMove)) {\n            const event = {\n                action     : 'remove',\n                parent,\n                isChild    : true,\n                isMove,\n                records    : children,\n                allRecords : toRemove,\n                index\n            };\n            me.trigger('remove', event);\n            me.trigger('change', event);\n        }\n\n        return toRemove;\n    }\n\n    collectDescendants(node, visible = [], all = [], flags) {\n        const me = this,\n            { inCollapsedBranch = false, unfiltered = false } = flags || 0,\n            children = Array.isArray(node) ? node : me.getChildren(node, unfiltered);\n\n        if (children) {\n            for (let i = 0, len = children.length, child; i < len; i++) {\n                child = children[i];\n\n                if (!inCollapsedBranch) {\n                    visible.push(child);\n                }\n\n                all.push(child);\n\n                me.collectDescendants(child, visible, all, {\n                    inCollapsedBranch : inCollapsedBranch || !child.isExpanded(me),\n                    unfiltered\n                });\n            }\n        }\n\n        return { visible, all };\n    }\n\n    /**\n     * Returns the children of the passed branch node which this store owns. By default, this\n     * is the entire `children` array.\n     *\n     * **If this store {@link Core.data.mixin.StoreChained#property-isChained isChained}**, then\n     * this returns only the subset of children which are filtered into this store by the\n     * {@link Core.data.mixin.StoreChained#config-chainedFilterFn chainedFilterFn}.\n     * @param {Core.data.Model} parent The node to return the children of.\n     * @returns {Core.data.Model[]}\n     * @category Tree\n     */\n    getChildren(parent, unfiltered = false) {\n        const\n            me = this,\n            children = ((unfiltered || me.isChained) && parent.unfilteredChildren) || parent.children;\n\n        return !children?.length ? emptyArray : (\n            me.isChained\n                // In case of chained store we need to apply chainedFilterFn and sorter\n                ? children.filter(me.chainedFilterFn).sort(me.sorterFn)\n                : children\n        );\n    }\n\n    /**\n     * Includes or excludes all records beneath parentRecord in storage. Used when expanding or collapsing\n     * nodes.\n     * @private\n     * @param parentRecord Parent record\n     * @param include Include (true) or exclude (false)\n     * @category Tree\n     */\n    internalToggleTreeSubRecords(parentRecord, include) {\n        const\n            me          = this,\n            { storage } = me,\n            index       = storage.indexOf(parentRecord),\n            children    = me.doIncludeExclude(me.getChildren(parentRecord), include);\n\n        // When expanded a parent node while being filtered, need to update the hidden flag of its children\n        if (me.isFiltered && include && parentRecord.unfilteredChildren) {\n            me.updateChildrenHiddenState(parentRecord);\n        }\n\n        // If we expanded a node which is yet to load children, the collected children\n        // array will be empty, so do not broadcast any change event.\n        // If we are collapsing a record which isn't visible (because parent is collapsed) we won't get an index,\n        // which is fine since it is already removed from processedRecords\n        if (children.length && index !== false) {\n            // We must not react to change - we fire the events here with a flag\n            // to tell responders that it's due to an expand or collapse.\n            storage.suspendEvents();\n\n            if (include) {\n                storage.splice(index + 1, 0, ...children);\n\n                const event = { action : 'add', isExpand : true, records : children, index : index + 1 };\n                me.trigger('add', event);\n                me.trigger('change', event);\n            }\n            else {\n                storage.splice(index + 1, children.length);\n\n                const event = { action : 'remove', isCollapse : true, records : children, index : index + 1 };\n                me.trigger('remove', event);\n                me.trigger('change', event);\n            }\n            storage.resumeEvents();\n            me._idMap = null;\n        }\n    }\n\n    // Updates the hidden flag of its children while store is filtered\n    updateChildrenHiddenState(parentRecord) {\n        parentRecord.unfilteredChildren?.forEach(child => {\n            child.instanceMeta(this.id).hidden = false;\n\n            if (!child.isLeaf) {\n                this.updateChildrenHiddenState(child);\n            }\n        });\n    }\n\n    doIncludeExclude(children, include, result = []) {\n        const\n            me         = this,\n            childCount = children?.length || 0;\n\n        for (let i = 0; i < childCount; i++) {\n            const child = children[i];\n\n            // Only consider child nodes who we own.\n            // If we are a chained store, skip nodes that are not ours.\n            if (!me.isChained || me.chainedFilterFn(child)) {\n                const mapMeta = child.instanceMeta(me.id);\n\n                if (include || !mapMeta.hidden) {\n                    // if including sub-records, add those who are not hidden by a collapsed sub parent\n                    result.push(child);\n                }\n                mapMeta.hidden = !include;\n\n                if (child.isExpanded(me)) {\n                    me.doIncludeExclude(me.getChildren(child), include, result);\n                }\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Collapse an expanded record or expand a collapsed. Optionally forcing a certain state.\n     * @param {String|Number|Core.data.Model} idOrRecord Record (the record itself) or id of a record to toggle\n     * @param {Boolean} [collapse] Force collapse (true) or expand (false)\n     * @category Tree\n     */\n    async toggleCollapse(idOrRecord, collapse) {\n        const\n            me                 = this,\n            record             = me.getById(idOrRecord),\n            meta               = record.instanceMeta(me);\n\n        if (collapse === undefined) {\n            collapse = !meta.collapsed;\n        }\n\n        // Reject if we're in the middle of loading children, or it's a leaf, or it's a no-op\n        if (!meta.isLoadingChildren && !record.isLeaf && record.isExpanded(me) === collapse) {\n            me.trigger('beforeToggleNode', { record, collapse });\n            meta.collapsed = collapse;\n\n            if (meta.collapsed) {\n                me.onNodeCollapse(record);\n                return true;\n            }\n            else {\n                me.onNodeExpand(record);\n                let success = true;\n\n                // Children not yet loaded, ask store for them.\n                // It will append them. Appending to a node which\n                // is expanded will insert the children into the UI.\n                if (!record.isLoaded) {\n                    meta.isLoadingChildren = true;\n\n                    try {\n                        await me.loadChildren(record);\n                    }\n                    catch (exception) {\n                        // Revert to being collapsed\n                        meta.collapsed = true;\n                        success = false;\n                        me.trigger('loadChildrenException', { record, exception });\n                    }\n                    finally {\n                        meta.isLoadingChildren = false;\n                    }\n                }\n                return success;\n            }\n        }\n    }\n\n    /**\n     * Remove all records beneath parentRecord from storage.\n     * @private\n     * @param parentRecord Parent record\n     * @category Tree\n     */\n    onNodeCollapse(parentRecord) {\n        // We don't care about collapse if it's inside a collapsed subtree\n        if (parentRecord.ancestorsExpanded(this)) {\n            return this.internalToggleTreeSubRecords(parentRecord, false);\n        }\n    }\n\n    /**\n     * Add all records beneath parentRecord from storage.\n     * @private\n     * @param parentRecord Parent record\n     * @category Tree\n     */\n    onNodeExpand(parentRecord) {\n        // We don't care about expand if it's inside a collapsed subtree\n        if (parentRecord.ancestorsExpanded(this)) {\n            return this.internalToggleTreeSubRecords(parentRecord, true);\n        }\n    }\n\n    //endregion\n\n    //region Transform flat data\n\n    /**\n     * Transforms flat data containing parent ids into tree data\n     * @param {Object[]} data Flat raw data\n     * @returns {Object[]} Tree data\n     * @private\n     */\n    transformToTree(data) {\n        const\n            { parentIdField, idField, childrenField } = this.modelClass,\n            parents                                   = new Map(),\n            transformed                               = [];\n\n        for (const node of data) {\n            const parentId = node[parentIdField];\n\n            // Child, find parent\n            if (parentId != null) {\n                // Detected parents are kept in a map to no have to iterate to find them each time\n                let parent = parents.get(parentId);\n\n                // Parent not in map, find it and add it (also adds unmatched parents, to not search for\n                // them again)\n                if (parent === undefined) {\n                    parent = data.find(node => node[idField] === parentId) ?? null;\n                    parents.set(parentId, parent);\n                }\n\n                // Parent found, add node as child of it\n                if (parent) {\n                    if (!parent[childrenField]) {\n                        parent[childrenField] = [];\n                    }\n\n                    parent[childrenField].push(node);\n                }\n            }\n            // Parent, keep\n            else {\n                transformed.push(node);\n            }\n        }\n\n        return transformed;\n    }\n\n    /**\n     * Transforms data into a tree with parent levels based on supplied fields.\n     *\n     * ```javascript\n     * const newRoot = store.treeify(['name', r => r.age % 10]);\n     * ```\n     *\n     * @param {Array<String|Function>} fields The field names, or a function to call to extract a value to create parent\n     * nodes for records with the same value.\n     * @param {Function} [parentTransform] A function which is called to allow the caller to transform the raw data\n     * object of any newly created parent nodes.\n     * @param {Boolean} [convertParents] Pass `true` to convert raw new parent data objects to this Store's\n     * {@link Core.data.Store#config-modelClass}.\n     * @returns {Core.data.Model} New root node\n     * @internal\n     */\n    treeify(fields, parentTransform, convertParents = false) {\n        const\n            { length } = fields,\n            parents    = [],\n            newRoot    = {};\n\n        let i, lastParent;\n\n        // New branch nodes are ID'd by their field values concatenated into\n        // string form.\n        //\n        // The key value that was used to create them is their \"key\" property.\n        //\n        // rootNode : {\n        //    children : [{\n        //        id       : 'p1',\n        //        name     : 'Parent 1',\n        //        expanded : true,\n        //        children : [\n        //            { id : 700, name : 'Task 700', startDate : '2021-11-26', duration : 3, percentDone : 20 },\n        //            { id : 500, name : 'Task 500', startDate : '2021-11-22', duration : 5, percentDone : 20 },\n        //            { id : 300, name : 'Task 300', startDate : '2021-11-24', duration : 3, percentDone : 10 },\n        //            { id : 100, name : 'Task 100', startDate : '2021-11-22', duration : 5, percentDone : 10 }\n        //       ]\n        //    },\n        //    {\n        //        id       : 'p2',\n        //        name     : 'Parent 2',\n        //        expanded : true,\n        //        children : [\n        //            { id : 600, name : 'Task 600', startDate : '2021-11-22', duration : 6, percentDone : 20 },\n        //            { id : 800, name : 'Task 800', startDate : '2021-11-26', duration : 2, percentDone : 20 },\n        //            { id : 400, name : 'Task 400', startDate : '2021-11-24', duration : 2, percentDone : 10 },\n        //            { id : 200, name : 'Task 200', startDate : '2021-11-22', duration : 6, percentDone : 10 }\n        //        ]\n        //    }]\n        // }\n        //\n        // Becomes the following. Note that all records are sorted into ascending\n        // order of their field values:\n        //\n        // rootNode : {\n        //    children : [{\n        //        id       : '10',\n        //        key      : 10,\n        //        expanded : true,\n        //        children : [\n        //            {\n        //                id       : '10Mon Nov 22 2021 00:00:00 GMT+0100 (Central European Standard Time)',\n        //                key      : new Date(2021, 10, 22),\n        //                expanded : true,\n        //                children : [\n        //                    { id : 100, name : 'Task 100', startDate : '2021-11-22', duration : 5, percentDone : 10 },\n        //                    { id : 200, name : 'Task 200', startDate : '2021-11-22', duration : 6, percentDone : 10 }\n        //                ]\n        //            },\n        //            {\n        //                id       : '10Wed Nov 24 2021 00:00:00 GMT+0100 (Central European Standard Time)',\n        //                key      : new Date(2021, 10, 24),\n        //                expanded : true,\n        //                children : [\n        //                    { id : 300, name : 'Task 300', startDate : '2021-11-24', duration : 3, percentDone : 10 },\n        //                    { id : 400, name : 'Task 400', startDate : '2021-11-24', duration : 2, percentDone : 10 }\n        //                ]\n        //            }\n        //        ]\n        //    },\n        //    {\n        //        id       : '20',\n        //        key      : 20,\n        //        expanded : true,\n        //        children : [\n        //            {\n        //                id       : '20Mon Nov 22 2021 00:00:00 GMT+0100 (Central European Standard Time)',\n        //                key      : new Date(2021, 10, 22),\n        //                expanded : true,\n        //                children : [\n        //                    { id : 500, name : 'Task 500', startDate : '2021-11-22', duration : 5, percentDone : 20 },\n        //                    { id : 600, name : 'Task 600', startDate : '2021-11-22', duration : 6, percentDone : 20 }\n        //                ]\n        //            },\n        //            {\n        //                id       : '20Fri Nov 26 2021 00:00:00 GMT+0100 (Central European Standard Time)',\n        //                key      : new Date(2021, 10, 26),\n        //                expanded : true,\n        //                children : [\n        //                    { id : 700, name : 'Task 700', startDate : '2021-11-26', duration : 3, percentDone : 20 },\n        //                    { id : 800, name : 'Task 800', startDate : '2021-11-26', duration : 2, percentDone : 20 }\n        //                ]\n        //            }\n        //        ]\n        //    }]\n        // }\n        //\n\n        // Convert field definitions to a function which extracts the field]\n        // for a simpler field value extraction.\n        for (i = 0; i < length; i++) {\n            if (!fields[i].call) {\n                const field = fields[i];\n                fields[i] = n => n[field];\n            }\n            parents[i] = new Map();\n        }\n\n        this.rootNode.traverse(n => {\n            lastParent = null;\n\n            if (n.isLeaf) {\n                for (i = 0; i < length; i++) {\n                    const\n                        lastParentPath = lastParent?.path || '',\n                        nodeMap        = parents[i],\n                        key            = fields[i](n),\n                        path           = `${lastParentPath + key}/`,\n                        id             = StringHelper.makeValidDomId(`generated_${path}`, '_'),\n                        parent         = nodeMap.get(id) || (nodeMap.set(id, {\n                            id,\n                            key,\n                            path,\n                            expanded        : true,\n                            readOnly        : true,\n                            children        : [],\n                            generatedParent : true\n                        })).get(id);\n\n                    if (lastParent && !lastParent.children.includes(parent)) {\n                        lastParent.children.push(parent);\n                    }\n\n                    lastParent = parent;\n                }\n                lastParent.children.push(n);\n            }\n        }, true);\n\n        // Call the optional transformer, and if we are configured to do so,\n        // convert the new branches into TreeNodes.\n        parents.forEach(p => p.forEach((p, id, map) => {\n            parentTransform?.(p);\n\n            if (convertParents) {\n                p = this.createRecord(p);\n                map.set(id, p);\n            }\n        }));\n\n        newRoot.children = [...parents[0].values()];\n\n        // Cascade a sort down so that all \"groups\" are in order.\n        const sort = (n) => {\n            if (n.children) {\n                n.children.sort((lhs, rhs) => {\n                    // If it's a leaf, sort by comparing all \"fields\"\n                    if (lhs.isLeaf) {\n                        let result;\n\n                        for (let i = 0; !result && i < length; i++) {\n                            const\n                                lv = fields[i](lhs),\n                                rv = fields[i](rhs);\n                            result = lv < rv ? -1 : rv > lv ? 1 : 0;\n                        }\n                        return result;\n                    }\n                    // Sort branch nodes by their key values\n                    else {\n                        // Sort numbers in strings nicely\n                        if (typeof lhs.key === 'string' || typeof rhs.key === 'string') {\n                            return lhs.key.localeCompare(rhs.key, undefined, { numeric : true });\n                        }\n\n                        return lhs.key < rhs.key ? -1 : lhs.key > rhs.key ? 1 : 0;\n                    }\n                });\n                n.children.forEach(sort);\n            }\n        };\n        sort(newRoot);\n\n        return newRoot;\n    }\n\n    //endregion\n\n    treeifyFlatData(data) {\n        const { childrenField, parentIdField } = this.modelClass;\n\n        let hasParentId     = false,\n            shouldTransform = true;\n\n        // Configured to transform flat data into tree data, make sure that we have:\n        // - raw data without children defined\n        // - parentIds\n        for (const node of data) {\n            if (node.isModel || Array.isArray(node[childrenField])) {\n                shouldTransform = false;\n                break;\n            }\n\n            if (node[parentIdField] != null) {\n                hasParentId = true;\n            }\n        }\n\n        if (shouldTransform && hasParentId) {\n            data = this.transformToTree(data);\n        }\n\n        return data;\n    }\n\n    /**\n     * Increase the indentation level of one or more nodes in the tree\n     * @param {Core.data.Model|Core.data.Model[]} nodes The nodes to indent.\n     * @fires indent\n     * @fires change\n     */\n    async indent(nodes) {\n        const me = this;\n\n        nodes = Array.isArray(nodes) ? nodes : [nodes];\n\n        // 2. Filtering out all nodes which parents are also to be indented as well as the ones having no previous\n        //    sibling since such nodes can't be indented\n        nodes = nodes.filter(node => {\n            let result = Boolean(node.previousSibling);\n\n            while (result && !node.isRoot) {\n                result = !nodes.includes(node.parent);\n                node   = node.parent;\n            }\n\n            return result;\n        });\n\n        /**\n         * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.\n         * @event beforeIndent\n         * @preventable\n         * @param {Core.data.Store} source The store\n         * @param {Core.data.Model|Core.data.Model[]} nodes The nodes to indent.\n         */\n        if (nodes.length && me.trigger('beforeIndent', { records : nodes }) !== false) {\n            // 3. Sorting nodes into tree walk order\n            nodes.sort((lhs, rhs) => Wbs.compare(lhs.wbsCode, rhs.wbsCode));\n\n            // No events should go to the UI until we have finished the operation successfully\n            me.beginBatch();\n\n            // Ask the project to try the indent operation\n            for (const node of nodes) {\n                const newParent = node.previousSibling;\n                newParent.appendChild(node);\n                me.toggleCollapse(newParent, false);\n            }\n\n            // Now show the successful result\n            me.endBatch();\n\n            /**\n             * Fired after tasks in the tree are indented\n             * @event indent\n             * @param {Core.data.Store} source The store\n             * @param {Core.data.Model[]} records Nodes that were indented\n             */\n            me.trigger('indent', { records : nodes });\n            me.trigger('change', {\n                action  : 'indent',\n                records : nodes\n            });\n        }\n    }\n\n    /**\n     * Decrease the indentation level of one or more nodes in the tree\n     * @param {Core.data.Model|Core.data.Model[]} nodes The nodes to outdent.\n     * @fires outdent\n     * @fires change\n     */\n    async outdent(nodes) {\n        const me = this;\n\n        nodes = Array.isArray(nodes) ? nodes : [nodes];\n\n        // 2. Filtering out all nodes which parents are also to be outdented as well as the ones having no previous sibling\n        //    since such nodes can't be indented\n        nodes = nodes.filter(node => {\n            const { parent } = node;\n            let result       = parent && !parent.isRoot;\n\n            while (result && !node.isRoot) {\n                result = !nodes.includes(parent);\n                node   = node.parent;\n            }\n\n            return result;\n        });\n\n        /**\n         * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.\n         * @event beforeOutdent\n         * @preventable\n         * @param {Core.data.Store} source This store\n         * @param {Core.data.Model[]} records Nodes to be outdented\n         */\n        if (nodes.length && me.trigger('beforeOutdent', { records : nodes }) !== false) {\n            // 3. Sorting nodes into reverse tree walk order\n            nodes.sort((lhs, rhs) => Wbs.compare(lhs.wbsCode, rhs.wbsCode));\n\n            // No events should go to the UI until we have finished the operation successfully\n            me.beginBatch();\n\n            for (const node of nodes) {\n                const\n                    { parent }  = node,\n                    newChildren = parent.children.slice(parent.children.indexOf(node) + 1);\n\n                parent.parent.insertChild(node, parent.nextSibling);\n\n                node.appendChild(newChildren);\n                me.toggleCollapse(node, false);\n            }\n\n            me.endBatch();\n\n            /**\n             * Fired after tasks in the tree are outdented\n             * @event outdent\n             * @param {Core.data.Store} source The store\n             * @param {Core.data.Model[]} records Nodes that were outdented\n             */\n            me.trigger('outdent', { records : nodes });\n            me.trigger('change', {\n                action  : 'outdent',\n                records : nodes\n            });\n        }\n    }\n};\n","/**\n * @module Core/helper/WalkHelper\n */\n\n/**\n * Tree walking helper\n * @internal\n */\nexport default class WalkHelper {\n\n    /**\n     * Pre-walks any hierarchical data structure\n     *\n     * @param {Object} data Walking starting point\n     * @param {Function} childrenFn Function to return `data` children entries in an array\n     *                   or null if no children exists for the entry\n     * @param {Function} fn Function to call on each entry\n     */\n    static preWalk(data, childrenFn, fn) {\n        const walkStack = [data];\n\n        let node, children;\n\n        while (walkStack.length) {\n\n            node = walkStack.pop();\n\n            fn(node);\n\n            children = childrenFn(node);\n\n            if (children) {\n                walkStack.push.apply(walkStack, children.slice().reverse());\n            }\n        }\n    }\n\n    /**\n     * Pre-walks any hierarchical data structure, passing along a link to the parent node\n     *\n     * @param {Object} data Walking starting point\n     * @param {Function} childrenFn Function to return `data` children entries in an array\n     *                   or null if no children exists for the entry\n     * @param {Function} fn Function to call on each entry, called with `parent` and `node`\n     */\n    static preWalkWithParent(data, childrenFn, fn) {\n        const walkStack = [{ node : data, parent : null }];\n\n        while (walkStack.length) {\n            const { parent, node } = walkStack.pop();\n\n            fn(parent, node);\n\n            const children = childrenFn(node);\n\n            if (Array.isArray(children)) {\n                walkStack.push(...children.slice().reverse().map(child => ({ node : child, parent : node })));\n            }\n        }\n    }\n\n    /**\n     * Pre-walk unordered.\n     *\n     * Like {@link #function-preWalk-static} but doesn't reverse children before walk,\n     * thus children will be walked last child first - first child last\n     *\n     * @param {Object} data Walking starting point\n     * @param {Function} childrenFn Function to return `data` children entries in an array\n     *                   or null if no children exists for the entry\n     * @param {Function} fn Function to call on each entry\n     */\n    static preWalkUnordered(data, childrenFn, fn) {\n        const walkStack = [data];\n\n        let node, children;\n\n        while (walkStack.length) {\n\n            node = walkStack[walkStack.length - 1];\n\n            fn(node);\n\n            children = childrenFn(node);\n\n            if (children) {\n                walkStack.splice(walkStack.length - 1, 1, ...children);\n            }\n            else {\n                walkStack.length = walkStack.length - 1;\n            }\n        }\n    }\n\n    /**\n     * Post-walks any hierarchical data structure\n     *\n     * @param {Object} data Walking starting point\n     * @param {Function} childrenFn Function to return `data` children entries in an array\n     *                   or null if no children exists for the entry\n     * @param {Function} fn Function to call on each entry\n     */\n    static postWalk(data, childrenFn, fn) {\n        const\n            visited = new Map(),\n            walkStack = [data];\n\n        let node, children;\n\n        while (walkStack.length) {\n\n            node = walkStack[walkStack.length - 1];\n\n            if (visited.has(node)) {\n                fn(node);\n                walkStack.pop();\n            }\n            else {\n                children = childrenFn(node);\n\n                if (children) {\n                    walkStack.push(...children.slice().reverse());\n                }\n\n                visited.set(node, node);\n            }\n        }\n    }\n\n    /**\n     * Pre-/Post-walks any hierarchical data structure calling inFn each node when it walks in,\n     * and outFn when it walks out.\n     *\n     * @param {Object} data Walking starting point\n     * @param {Function} childrenFn Function to return `data` children entries in an array\n     *                   or null if no children exists for the entry\n     * @param {Function} inFn  Function to call on each entry upon enter\n     * @param {Function} outFn Function to call on each entry upon exit\n     */\n    static prePostWalk(data, childrenFn, inFn, outFn) {\n        const\n            visited = new Map(),\n            walkStack = [data];\n\n        let node, children;\n\n        while (walkStack.length) {\n\n            node = walkStack[walkStack.length - 1];\n\n            if (visited.has(node)) {\n                outFn(node);\n                walkStack.pop();\n            }\n            else {\n                inFn(node);\n\n                children = childrenFn(node);\n\n                if (children) {\n                    walkStack.push(...children.slice().reverse());\n                }\n\n                visited.set(node, node);\n            }\n        }\n    }\n}\n","import Base from '../../Base.js';\nimport WalkHelper from '../../helper/WalkHelper.js';\n\n/**\n * @module Core/data/mixin/StoreSync\n */\n\n/**\n * Mixin that allows Store to sync a new dataset with its existing records, instead of fully replacing everything.\n * Configure Store with `syncDataOnLoad: true` to activate the functionality. Sync is performed when a new dataset\n * is loaded, either by directly assigning it to `store.data` or by loading it using Ajax (if using an AjaxStore).\n *\n * ```javascript\n * const store = new Store({\n *   syncDataOnLoad : true,\n *   data           : [\n *     { id : 1, name : 'Saitama' },\n *     { id : 2, name : 'Genos' },\n *     { id : 3, name : 'Mumen Rider' }\n *   ]\n * });\n *\n * // Sync a new dataset by assigning to data:\n * store.data = [\n *   { id : 1, name : 'Caped Baldy' },\n *   { id : 4, name : 'Horse-Bone' }\n * ];\n *\n *  // Result : Record 1 updated, record 2 & 3 removed, record 4 added\n * ```\n *\n * For more details, please see {@link #config-syncDataOnLoad}.\n *\n * @mixin\n */\nexport default Target => class StoreSync extends (Target || Base) {\n    static get $name() {\n        return 'StoreSync';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Configure with `true` to sync loaded data instead of replacing existing with a new dataset.\n             *\n             * By default (or when configured with `false`) assigning to `store.data` replaces the entire dataset\n             * with a new one, creating all new records:\n             *\n             * ```javascript\n             * store.data = [ { id : 1, name : 'Saitama' } ];\n             *\n             * const first = store.first;\n             *\n             * store.data = [ { id : 1, name : 'One-Punch man' } ];\n             *\n             * // store.first !== first;\n             * ```\n             *\n             * When configured with `true` the new dataset is instead synced against the old, figuring out what was\n             * added, removed and updated:\n             *\n             * ```javascript\n             * store.data = [ { id : 1, name : 'Saitama' } ];\n             *\n             * const first = store.first;\n             *\n             * store.data = [ { id : 1, name : 'One-Punch man' } ];\n             *\n             * // store.first === first;\n             * ```\n             *\n             * After the sync, any configured sorters, groupers and filters will be reapplied.\n             *\n             * #### Threshold\n             *\n             * The sync operation has a configurable threshold, above which the operation will be treated as a\n             * batch/refresh and only trigger a single `refresh` event. If threshold is not reached, individual events\n             * will be triggered (single `add`, `remove` and possible multiple `update`). To enable the threshold,\n             * supply a config object with a `threshold` property instead of `true`:\n             *\n             * ```javascript\n             * const store = new Store({\n             *     syncDataOnLoad : {\n             *         threshold : '20%'\n             *     }\n             * });\n             * ```\n             *\n             * `threshold` accepts numbers or strings. A numeric threshold means number of affected records, while a\n             * string is used as a percentage of the whole dataset (appending `%` is optional). By default no threshold\n             * is used.\n             *\n             * #### Missing fields\n             *\n             * The value of any field not supplied in the new dataset is by default kept as is (if record is not removed\n             * by the sync). This behaviour is configurable, by setting `keepMissingValues : false` in a config object\n             * it will reset any unspecified field back to their default values:\n             *\n             * ```javascript\n             * const store = new Store({\n             *     syncDataOnLoad : {\n             *         keepMissingValues : false\n             *     }\n             * });\n             * ```\n             *\n             * Considering the following sync operation:\n             *\n             * ```javascript\n             * // Existing data\n             * { id : 1, name : 'Saitama', powerLevel : 100 }\n             * // Sync data\n             * { id : 1, name : 'One-Punch Man' }\n             * ```\n             *\n             * The result would by default (or when explicitly configured with `true`)  be:\n             *\n             * ```javascript\n             * { id : 1, name : 'One-Punch Man', powerLevel : 100 }\n             * ```\n             *\n             * If configured with `keepMissingValues : false` it would instead be:\n             *\n             * ```javascript\n             * { id : 1, name : 'One-Punch Man' }\n             * ```\n             *\n             * <div class=\"note\">Never enable `syncDataOnLoad` on a chained store, it will create an infinite loop when\n             * it is populated from the main store (the main store can use the setting)</div>\n             *\n             * @config {Boolean|{ keepMissingValues : Boolean }}\n             * @property {Boolean} keepMissingValues How to handle values for missing fields, see description above\n             * @default false\n             * @category Common\n             */\n            syncDataOnLoad : null\n        };\n    }\n\n    /**\n     * Syncs a new dataset against the already loaded one, only applying changes.\n     * Not intended to be called directly, please configure store with `syncDataOnLoad: true` and assign to\n     * `store.data` as usual instead.\n     *\n     * ```\n     * const store = new Store({\n     *    syncDataOnLoad : true,\n     *    data : [\n     *        // initial data\n     *    ]\n     * });\n     *\n     * store.data = [ // new data ]; //  Difference between initial data and new data will be applied\n     * ```\n     *\n     * @param {Object[]|Core.data.Model[]} data New dataset, an array of records or data objects\n     * @private\n     */\n    syncDataset(data) {\n        const\n            me = this,\n            { storage } = me;\n\n        me.isSyncingDataOnLoad = true;\n\n        const { toAdd, toRemove, toMove, updated, ids } = me.tree ? me.syncTreeDataset(data) : me.syncFlatDataset(data);\n\n        let { threshold } = me.syncDataOnLoad,\n            surpassed = false;\n\n        // Check if threshold is surpassed\n        if (threshold) {\n            // Any string is treated as a percentage\n            if (typeof threshold === 'string') {\n                threshold = parseInt(threshold, 10) / 100 * me.count;\n            }\n\n            surpassed = toAdd.length + toRemove.length + toMove.length + updated.length > threshold;\n        }\n\n        if (me.tree) {\n            // Flat data is spliced into/out of the collection, but in a tree it has to be added/removed from store\n            // to end up on correct parents\n            if (toAdd.length) {\n                // Add all new nodes in one go, will be added to correct parent using `parentId`. Triggering multiple times\n                const added = me.add(toAdd, surpassed);\n\n                // parentId was tucked on in syncTreeDataset() to allow the single flat add above, clean it out\n                added.forEach(node => node.clearParentId());\n            }\n\n            if (toMove.length) {\n                for (const { parent, node, index } of toMove) {\n                    const newParent = me.getById(parent.id);\n                    newParent.insertChild(node, index);\n                }\n            }\n\n            // Remove in one go, removing from each parent. Triggering multiple times\n            me.remove(toRemove, surpassed);\n        }\n        else {\n            if (surpassed) {\n                me.suspendEvents();\n            }\n\n            // Add and remove, will trigger if below threshold/no threshold\n            // We cannot simply splice into our Collection because of the extra\n            // processing various Store mixins do in add and remove implementations\n            me.remove(toRemove);\n            me.add(toAdd);\n\n            if (surpassed) {\n                me.resumeEvents();\n            }\n        }\n\n        // Trigger updates if using threshold, but have not surpassed it. If threshold is not used, the updates\n        // are triggered when data is set (avoiding another iteration)\n        if (threshold && !surpassed) {\n            updated.forEach(({ record, toSet, wasSet }) => me.onModelChange(record, toSet, wasSet));\n        }\n\n        // Clear change-tracking\n        me.acceptChanges();\n\n        const event = { added : toAdd, removed : toRemove, updated, thresholdSurpassed : surpassed };\n\n        if (me.isFiltered && !me.remoteFilter) {\n            // Apply filtering to the next dataset if filtering is local\n            me.filter({\n                silent : me.isRemoteDataLoading\n            });\n        }\n\n        if (me.isGrouped) {\n            // Announced group\n            me.group(null, null, false, true, me.isRemoteDataLoading);\n        }\n        else if (me.isSorted) {\n            // If we updated records in-place, the order may not match what we sent to\n            // the server, so silently sort the collection according to our sorters.\n            if (me.remoteSort) {\n                storage.replaceValues({\n                    values : storage.values.sort(me.createSorterFn(me.sorters)),\n                    silent : true\n                });\n            }\n            // If we are sorting locally, just do a normal sort\n            else {\n                me.sort();\n            }\n        }\n        // Neither grouped nor sorted, match order in incoming data\n        else if (!me.tree) {\n            // Only bother if data isn't already in order (to avoid unnecessary re-rendering)\n            if (storage.values.some((record, index) => record.id !== ids[index])) {\n                storage.replaceValues({\n                    values : storage.values.sort((a, b) => ids.indexOf(a.id) - ids.indexOf(b.id)),\n                    silent : true\n                });\n\n                // Announce the sort, unless we will refresh below\n                !surpassed && me.afterPerformSort();\n            }\n        }\n        // Ditto, but not flat data\n        else {\n            let unsorted = false,\n                i = 0;\n            WalkHelper.preWalk(\n                me.rootNode,\n                n => Array.isArray(n.children) && !unsorted ? n.children : null,\n                node => {\n                    if (node.id !== ids[i++]) {\n                        unsorted = true;\n                    }\n                }\n            );\n\n            // Only bother if data isn't already in order (to avoid unnecessary re-rendering)\n            if (unsorted) {\n                // TODO: Discuss with nige\n                me.sort((a, b) => ids.indexOf(a.id) - ids.indexOf(b.id), undefined, undefined, true);\n                me.clearSorters(true);\n\n                // Announce the sort, unless we will refresh below\n                !surpassed && me.afterPerformSort();\n            }\n        }\n\n        // Trigger `batch` if threshold is surpassed, more similar to a batch than a full `dataset`\n        if (surpassed) {\n            me.trigger('refresh', {\n                action   : 'batch',\n                data     : data,\n                records  : storage.values,\n                syncInfo : event\n            });\n        }\n\n        me.isSyncingDataOnLoad = false;\n\n        me.trigger('loadSync', event);\n    }\n\n    // Used by syncDataset()\n    syncFlatDataset(data) {\n        if (!data) {\n            return {\n                toRemove : this.records\n            };\n        }\n\n        const\n            me                     = this,\n            { idField, allFields } = me.modelClass,\n            toRemove               = [],\n            toAdd                  = [],\n            updated                = [],\n            usedIds                = {},\n            ids                    = [];\n\n        const { threshold, keepMissingValues } = me.syncDataOnLoad;\n        let hitCount = 0;\n\n        data.forEach(rawData => {\n            rawData = rawData.isModel ? rawData.data : rawData;\n            const\n                id     = rawData[idField],\n                record = me.getById(id);\n\n            // Record exists, might be an update\n            if (record) {\n                // Apply default value for any missing fields if configured to do so\n                if (keepMissingValues === false) {\n                    for (const field of allFields) {\n                        if (!(field.dataSource in rawData) && (field.dataSource in record.data)) {\n                            rawData[field.dataSource] = field.defaultValue;\n                        }\n                    }\n                }\n\n                // Update silently if using threshold, otherwise trigger away\n                const wasSet = record.set(rawData, null, Boolean(threshold));\n                if (wasSet) {\n                    updated.push({ record, wasSet, toSet : rawData });\n                }\n\n                hitCount++;\n            }\n            // Does not exist, add\n            else {\n                toAdd.push(me.processRecord(me.createRecord(rawData)));\n            }\n\n            usedIds[id] = 1;\n            ids.push(id);\n        });\n\n        // Check removals, unless all records were visited above\n        if (hitCount < me.allCount) {\n            me.forEach(record => {\n                if (!usedIds[record.id]) {\n                    toRemove.push(record);\n                }\n            });\n        }\n\n        return { toAdd, toRemove, toMove : [], updated, ids };\n    }\n\n    // Used by syncDataset()\n    syncTreeDataset(data) {\n        if (!data) {\n            return {\n                toRemove : this.records\n            };\n        }\n\n        const\n            me                    = this,\n            {\n                idField,\n                parentIdField,\n                childrenField,\n                allFields\n            }                     = me.modelClass,\n            { keepMissingValues } = me.syncDataOnLoad,\n            toRemove              = [],\n            toAdd                 = [],\n            toMove                = [],\n            updated               = [],\n            usedIds               = {},\n            ids                   = [];\n\n        if (me.transformFlatData) {\n            data = me.treeifyFlatData(data);\n        }\n\n        const { threshold } = me.syncDataOnLoad;\n\n        WalkHelper.preWalkWithParent({ isRoot : true, id : me.rootNode.id, children : data }, n => n.children, (parent, rawData) => {\n            if (parent) {\n                const\n                    id   = rawData[idField],\n                    node = me.getById(id);\n\n                // Record exists, might be an update\n                if (node) {\n                    let childrenUpdated;\n                    const oldChildrenValue = node.children;\n\n                    // Edge case: Check for conversion from normal parent to lazy loaded\n                    if (oldChildrenValue !== true && rawData[childrenField] === true) {\n                        node.clearChildren();\n                        node.data[childrenField] = node.children = true;\n                        delete rawData[childrenField];\n                        me.toggleCollapse(node, true);\n                        childrenUpdated = true;\n                    }\n\n                    // Changed parent?\n                    if (node.parent.id !== parent[idField]) {\n                        toMove.push({ node, parent, index : parent[childrenField].indexOf(rawData) });\n                    }\n                    // parentIdField has no default value to not pollute flat data,\n                    // assign to root here if no value specified\n                    // else if (parent.isRoot && !(parentIdField in rawData)) {\n                    //     rawData[parentIdField] = null;\n                    // }\n\n                    // Apply default value for any missing fields if configured to do so\n                    if (keepMissingValues === false) {\n                        for (const field of allFields) {\n                            // Ignore parentId, handled above since it has no default\n                            if (field.name !== 'parentId' && !(field.dataSource in rawData) && (field.dataSource in node.data)) {\n                                rawData[field.dataSource] = field.defaultValue;\n                            }\n                        }\n                    }\n\n                    // Update silently if using threshold, otherwise trigger away\n                    const wasSet = node.set(rawData, null, Boolean(threshold));\n                    if (wasSet) {\n                        updated.push({ record : node, wasSet, toSet : rawData });\n                    }\n                    else if (childrenUpdated) {\n                        node.signalNodeChanged({\n                            [childrenField] : {\n                                value    : true,\n                                oldValue : oldChildrenValue\n                            }\n                        });\n                    }\n                }\n                // Does not exist, add\n                else {\n                    rawData[parentIdField] = parent[idField];\n\n                    toAdd.push({ ...rawData, ...(Array.isArray(rawData[childrenField]) ? { children : [] } : undefined) });\n                }\n\n                usedIds[id] = 1;\n                ids.push(id);\n            }\n        });\n\n        me.traverse(node => {\n            if (!usedIds[node.id]) {\n                toRemove.push(node);\n            }\n        });\n\n        return { toAdd, toRemove, toMove, updated, ids };\n    }\n};\n","/**\n * @module Core/data/stm/mixin/StoreStm\n */\nimport Base from '../../../Base.js';\nimport Model from '../../../data/Model.js';\n\nconst STM_PROP = Symbol('STM_PROP');\n\n/**\n * Store mixin to make it compatible with {@link Core/data/stm/StateTrackingManager}.\n * @mixin\n */\nexport default Target => class StoreStm extends (Target || Base) {\n    static get $name() {\n        return 'StoreStm';\n    }\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Reference to STM manager\n             *\n             * @config {Core.data.stm.StateTrackingManager}\n             * @default\n             * @category Advanced\n             */\n            stm : null,\n\n            /**\n             * Set false, to not record transaction during `applyChangeset` call\n             *\n             * @prp {Boolean}\n             * @default\n             */\n            ignoreRemoteChangesInSTM : false\n        };\n    }\n\n    //<debug>\n    afterConstruct() {\n        super.afterConstruct();\n\n        console.assert(\n            typeof this.add == 'function',\n            \"Can't mix into this store class, no method `add` found!\"\n        );\n\n        console.assert(\n            typeof this.insert == 'function',\n            \"Can't mix into this store class, no method `insert` found!\"\n        );\n\n        console.assert(\n            typeof this.remove == 'function',\n            \"Can't mix into this store class, no method `remove` found!\"\n        );\n\n        console.assert(\n            typeof this.removeAll == 'function',\n            \"Can't mix into this store class, no method `removeAll` found!\"\n        );\n    }\n    //</debug>\n\n    get stm() {\n        return this[STM_PROP];\n    }\n\n    set stm(stm) {\n        const me = this;\n\n        if (me.stm !== stm) {\n            if (me.stm?.hasStore(me)) {\n                me.stm.removeStore(me);\n            }\n\n            me[STM_PROP] = stm;\n\n            if (me.stm && !me.stm.hasStore(me)) {\n                me.stm.addStore(me);\n            }\n        }\n    }\n\n    // Overridden to notify STM about flat add action\n    add(records, silent = false, options = {}) {\n        let result;\n\n        const { stm } = this;\n\n        // Tree adding is routed via rootNode.appendChild() it has it's own\n        // STM override thus if the store is tree we ignore the action\n        if (!this.tree && stm?.enabled) {\n            // Flat adding here only, the only data needed to undo/redo the action\n            // is the list of records added.\n            result = super.add(records, silent);\n            // If adding wasn't vetoed and something has been added then\n            // notifying the STM about the fact.\n            if (result?.length) {\n                stm.onStoreModelAdd(this, result, silent);\n            }\n        }\n        else {\n            result = super.add(records, silent, options);\n        }\n\n        return result;\n    }\n\n    // Overridden to notify STM about flat insert action\n    insert(index, records, silent = false) {\n        let result;\n\n        const { stm } = this;\n\n        // Tree inserting is routed via rootNode.insertChild() it has it's own\n        // STM override thus if the store is tree we ignore the action\n        if (!this.tree && stm?.enabled) {\n            // Flat inserting here only, the only data needed to undo/redo the action is:\n            // - the list of record inserted\n            // - index they are inserted at\n            // - index they have been at if they are part of this store already and are moved\n\n            // Here we are getting indices of records which are in this store already\n            // not all records might be from this store, some might be new or from another store\n            const context = (Array.isArray(records) ? records : [records]).reduce(\n                (context, r) => {\n                    const index = r instanceof Model ? this.indexOf(r) : undefined;\n\n                    if (index !== undefined && index !== -1) {\n                        context.set(r, index);\n                    }\n\n                    return context;\n                },\n                new Map()\n            );\n\n            // Result here is the array of Models inserted or undefined,\n            // and it might be different from `records` we received as argument.\n            result = super.insert(index, records);\n\n            // Here we check if anything has been actually inserted.\n            // The insertion action might be vetoed by event handler or something\n            if (result?.length) {\n                // We can't rely on `index` we've got as argument since `result` might\n                // differ from records.\n                index = this.indexOf(result[0]);\n                // Notifying STM manager about the insertion action providing all\n                // the required data to undo/redo.\n                stm.onStoreModelInsert(this, index, result, context, silent);\n            }\n        }\n        else {\n            result = super.insert(index, records, silent);\n        }\n\n        return result;\n    }\n\n    // Overridden to notify STM about flat removing action\n    remove(recordsOrIds, silent = false, fromRemoveChild) {\n\n        let result;\n\n        const { stm } = this;\n\n        // Tree removing is routed via rootNode.removeChild() it has it's own\n        // STM override thus if the store is tree we ignore the action\n        if (!this.tree && stm?.enabled) {\n            // Flat removing here only, the only date needed to undo/redo the actions is:\n            // - the list of records removed\n            // - their original index to re-insert them back correctly\n            const recordsOrIdsNormalized = (Array.isArray(recordsOrIds) ? recordsOrIds : [recordsOrIds]).map(r => this.getById(r)).filter(r => !!r);\n\n            const context = recordsOrIdsNormalized.reduce(\n                (context, r) => {\n                    const index = this.indexOf(r);\n\n                    if (index !== undefined && index !== -1) {\n                        context.set(r, index);\n                    }\n\n                    return context;\n                },\n                new Map()\n            );\n\n            // Calling original store method\n            result = super.remove(recordsOrIds, silent, fromRemoveChild);\n\n            // Here we check if anything has been actually removed.\n            // The removing action might be vetoed by event handler or something\n            if (result?.length) {\n                stm.onStoreModelRemove(this, result, context, silent);\n            }\n        }\n        else {\n            result = super.remove(recordsOrIds, silent, fromRemoveChild);\n        }\n\n        return result;\n    }\n\n    // Overridden to notify STM about flat clear action\n    removeAll(silent) {\n        const { stm } = this;\n\n        let result;\n\n        if (stm?.enabled) {\n            // Here we are to detect if anything has been removed\n            // the only way is to check if store has anything before removing all\n            // and has nothing after.\n            const\n                { tree, rootNode, allRecords } = this,\n                wasNotEmpty                    = allRecords.length,\n                // need to store children/records before super method call, otherwise those would report empty list\n                records                        = tree ? rootNode.children.slice() : allRecords.slice();\n\n            result = super.removeAll(silent);\n\n            // The trick here is to distinguish tree and flat case\n            // For the flat case it's simple we just store all records\n            // For the tree we are to store root node children only\n            // Upon restoring store.add() will do the right thing for the flat case and tree case regardless.\n            if (wasNotEmpty && this.count === 0) {\n                stm.onStoreRemoveAll(this, records, silent);\n            }\n        }\n        else {\n            result = super.removeAll(silent);\n        }\n\n        return result;\n    }\n\n    beforeApplyChangeset() {\n        const { stm, crudManager } = this;\n\n        let shouldResume = false;\n\n        if (!crudManager?.applyingChangeset && stm?.enabled) {\n            shouldResume = true;\n\n            // If stm is recording at the moment, we need to stash changes and reject them\n            if (stm.isRecording) {\n                stm.stash();\n            }\n\n            if (this.ignoreRemoteChangesInSTM) {\n                stm.disable();\n            }\n            else {\n                stm.startTransaction();\n            }\n        }\n\n        return shouldResume;\n    }\n\n    // When applying changes while STM is in the recording state, first we need to discard local changes, then apply\n    // changes from remote, then try to apply local changes. This would emulate starting transaction as if data was\n    // already in the correct state\n    applyChangeset(changes, transformFn, phantomIdField, remote, logChanges) {\n        const\n            shouldResume = this.beforeApplyChangeset(),\n            log          = super.applyChangeset(changes, transformFn, phantomIdField, remote, logChanges);\n\n        this.afterApplyChangeset(shouldResume);\n\n        return log;\n    }\n\n    afterApplyChangeset(shouldResume) {\n        if (shouldResume) {\n            const { stm } = this;\n\n            if (this.ignoreRemoteChangesInSTM) {\n                stm.enable();\n            }\n            else {\n                stm.stopTransaction();\n            }\n\n            stm.applyStash();\n        }\n    }\n};\n","import Base from '../Base.js';\nimport Pluggable from '../mixin/Pluggable.js';\nimport Events from '../mixin/Events.js';\nimport State from '../mixin/State.js';\nimport Identifiable from '../mixin/Identifiable.js';\nimport Model from './Model.js';\nimport BrowserHelper from '../helper/BrowserHelper.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\nimport StringHelper from '../helper/StringHelper.js';\nimport StoreBag from './StoreBag.js';\nimport Collection from '../util/Collection.js';\n\nimport StoreCRUD from './mixin/StoreCRUD.js';\nimport StoreChanges from './mixin/StoreChanges.js';\nimport StoreFilter from './mixin/StoreFilter.js';\nimport StoreGroup from './mixin/StoreGroup.js';\nimport StoreProxy from './mixin/StoreProxy.js';\nimport StoreRelation from './mixin/StoreRelation.js';\nimport StoreSum from './mixin/StoreSum.js';\nimport StoreSearch from './mixin/StoreSearch.js';\nimport StoreSort from './mixin/StoreSort.js';\nimport StoreChained from './mixin/StoreChained.js';\nimport StoreState from './mixin/StoreState.js';\nimport StoreTree from './mixin/StoreTree.js';\nimport StoreSync from './mixin/StoreSync.js';\nimport StoreStm from './stm/mixin/StoreStm.js';\nimport Delayable from '../mixin/Delayable.js';\n\n/**\n * @module Core/data/Store\n */\nconst\n    dataAddRemoveActions   = {\n        splice : 1,\n        clear  : 1\n    },\n    defaultTraverseOptions = {\n        includeFilteredOutRecords    : false,\n        includeCollapsedGroupRecords : false\n    },\n    fixTraverseOptions     = (store, options) => {\n        // backward compatibility to support includeFilteredOutRecords parameter instead of options\n        options = options || false;\n\n        // TODO clean up and remove boolean option\n        if (typeof options === 'boolean') {\n            options = {\n                includeFilteredOutRecords    : options,\n                includeCollapsedGroupRecords : false\n            };\n        }\n\n        return options || defaultTraverseOptions;\n    };\n\n/**\n * The Store represents a data container which holds flat data or tree structures. An item in the Store is often called\n * a ´record´ and it is simply an instance of the {@link Core.data.Model} (or any subclass thereof).\n *\n * Typically you load data into a store to display it in a Grid or a ComboBox. The Store is the backing data component\n * for any component that is showing data in a list style UI.\n *\n * ## Data format\n * Data is store in a JSON array the Store offers an API to edit, filter, group and sort the records.\n *\n * ## Store with flat data\n * To create a flat store simply provide an array of objects that describe your records\n *\n * ```javascript\n * const store = new Store({\n *     data : [\n *         { id : 1, name : 'ABBA', country : 'Sweden' },\n *         { id : 2, name : 'Beatles', country : 'UK' }\n *     ]\n * });\n *\n * // retrieve record by id\n * const beatles = store.getById(2);\n * ```\n *\n * ## Store with tree data\n * To create a tree store use `children` property for descendant records\n *\n * ```javascript\n * const store = new Store({\n *     tree: true,\n *     data : [\n *         { id : 1, name : 'ABBA', country : 'Sweden', children: [\n *             { id: 2, name: 'Agnetha' },\n *             { id: 3, name: 'Bjorn' },\n *             { id: 4, name: 'Benny' },\n *             { id: 5, name: 'Anni-Frid' }\n *         ]},\n *     ]\n * });\n *\n * // retrieve record by id\n * let benny = store.getById(4);\n * ```\n *\n * Optionally a tree store can consume a flat dataset with nodes that have a `parentId` property. By configuring the\n * store with `tree : true` and `transformFlatData : true`, the flat data is transformed into tree data:\n *\n * ```javascript\n * const store = new Store({\n *     tree              : true,\n *     transformFlatData : true,\n *     data              : [\n *         { id : 1, name : 'ABBA', country : 'Sweden' },\n *         { id : 2, name : 'Agnetha', parentId : 1 },\n *         { id : 3, name : 'Bjorn', parentId : 1 },\n *         { id : 4, name : 'Benny', parentId : 1 },\n *         { id : 5, name : 'Anni-Frid', parentId : 1 }\n *     ]\n * });\n * ```\n *\n * ### Retrieving and consuming JSON\n * For both flat stores or tree stores it is possible to retrieve the data of all records in JSON format:\n *\n * ```javascript\n * const jsonString = store.json;\n *\n * // or\n *\n * const jsonArray = store.toJSON();\n * ```\n *\n * To plug the JSON data back in later:\n *\n * ```javascript\n * store.data = JSON.parse(jsonString);\n *\n * // or\n *\n * store.data = jsonArray;\n * ```\n *\n * ## Sharing stores\n * You cannot directly share a Store between widgets, but the data in a Store can be shared. There are two different\n * approaches depending on your needs, sharing data and chaining stores:\n *\n * ### Shared data\n * To create 2 widgets that share data, you can create 2 separate stores and pass records of the first store as the\n * dataset of the second store.\n *\n * ```javascript\n * let combo1 = new Combo({\n *     appendTo : document.body,\n *     store    : new Store({\n *         data : [\n *             { id : 1, name : 'ABBA', country : 'Sweden' },\n *             { id : 2, name : 'Beatles', country : 'UK' }\n *         ]\n *     }),\n *     valueField   : 'id',\n *     displayField : 'name'\n * });\n *\n * let combo2 = new Combo({\n *     appendTo : document.body,\n *     store    : new Store({\n *         data : combo1.store.records\n *     }),\n *     valueField   : 'id',\n *     displayField : 'name'\n * });\n *\n * combo1.store.first.name = 'foo';\n * combo2.store.first.name; // \"foo\"\n * ```\n *\n * ### Chained stores\n * Another more powerful option to share data between widgets is to create {@link Core.data.mixin.StoreChained chained}\n * stores. The easiest way to create a chained store is to call {@link #function-chain} function.\n *\n * ```javascript\n * let combo1 = new Combo({\n *     appendTo : document.body,\n *     store    : new Store({\n *         data : [\n *             { id : 1, name : 'ABBA', country : 'Sweden' },\n *             { id : 2, name : 'Beatles', country : 'UK' }\n *         ]\n *     }),\n *     valueField   : 'id',\n *     displayField : 'name'\n * });\n *\n * let combo2 = new Combo({\n *     appendTo     : document.body,\n *     store        : combo1.store.chain(),\n *     valueField   : 'id',\n *     displayField : 'name'\n * });\n *\n * combo1.store.first.name = 'foo';\n * combo2.store.first.name; // \"foo\"\n * ```\n *\n * A chained store can optionally be created with a filtering function, to only contain a subset of the records from\n * the main store. In addition, the chained store will reflect record removals/additions to the master store, something\n * the shared data approach will not.\n *\n * ## Non-homogeneous data structures\n *\n * You can use different Model classes to represent the records in the store by overriding the {@link #function-createRecord}\n * method:\n *\n * ```javascript\n * const store = new Store ({\n *     modelClass : Gate,\n *     readUrl    : 'data/the-airport.json',\n *     autoLoad   : true,\n *     // The default model is a Gate (see above) and in this createRecord method, we can decide at runtime based\n *     // on the data which model class to use. This is useful when your record types aren't homogenous.\n *     createRecord(data) {\n *         let modelClass = this.modelClass;\n *         if (data.type === 'terminal') {\n *             modelClass = Terminal;\n *         }\n *         return new modelClass(data, this);\n *     }\n * },\n * ```\n *\n * @mixes Core/mixin/Events\n * @mixes Core/data/mixin/StoreFilter\n * @mixes Core/data/mixin/StoreChanges\n * @mixes Core/data/mixin/StoreCRUD\n * @mixes Core/data/mixin/StoreSum\n * @mixes Core/data/mixin/StoreSearch\n * @mixes Core/data/mixin/StoreSort\n * @mixes Core/data/mixin/StoreGroup\n * @mixes Core/data/mixin/StoreChained\n * @mixes Core/data/mixin/StoreState\n * @mixes Core/data/mixin/StoreRelation\n * @mixes Core/data/mixin/StoreTree\n * @mixes Core/data/stm/mixin/StoreStm\n * @mixes Core/data/mixin/StoreSync\n *\n * @extends Core/Base\n */\nexport default class Store extends Base.mixin(\n    Delayable,\n    Identifiable,\n    Events,\n    Pluggable,\n    State,\n    StoreFilter,\n    StoreChanges,\n    StoreCRUD,\n    StoreRelation, // Private\n    StoreSum,\n    StoreSearch,\n    StoreSort,\n    StoreGroup,\n    StoreChained,\n    StoreState,\n    StoreTree,\n    StoreStm,\n    StoreSync,\n    StoreProxy // Private for now, thus not mentioned in @mixes block above\n) {\n    //region Config & properties\n\n    static get $name() {\n        return 'Store';\n    }\n\n    static get properties() {\n        return {\n            relationCache         : {},\n            dependentStoreConfigs : new Map()\n        };\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Store's unique identifier.\n             *\n             * @member {String|Number} id\n             * @readonly\n             * @category Common\n             */\n            /**\n             * Store's unique identifier. When set the store is added to a store map accessible through\n             * `Store.getStore(id)`.\n             *\n             * @config {String|Number}\n             * @category Common\n             */\n            id : true,\n\n            /**\n             * Class used to represent records in the store, should be a subclass of {@link Core.data.Model}. Only\n             * applies when supplying data to the store (load, add), any supplied record instances are kept as is.\n             *\n             * ```javascript\n             * class MyModel extends Model {\n             *     static get fields() {\n             *         return [\n             *             'name',\n             *             'city',\n             *             'company'\n             *         ]\n             *     }\n             * }\n             *\n             * const store = new Store({\n             *     modelClass : MyModel,\n             *     data : [\n             *         { id : 1, name : 'Mark', city : 'London', company : 'Cool inc' },\n             *         ...\n             *     ]\n             * });\n             * ```\n             *\n             * @config {Core.data.Model}\n             * @default\n             * @typings {typeof Model}\n             * @category Common\n             */\n            modelClass : Model,\n\n            /**\n             * Verify that loaded data does not contain any generated ids. If it does, a warning is logged on console.\n             *\n             * Set this to `false` to disable the check and give a very minor performance boost.\n             *\n             * @prp {Boolean}\n             * @default\n             */\n            verifyNoGeneratedIds : true\n        };\n    }\n\n    static get defaultConfig() {\n        return {\n            /**\n             * An array of field definitions used to create a {@link Core.data.Model} (modelClass) subclass. Optional.\n             * If the Model already has fields defined, these fields will extend those.\n             *\n             * ```javascript\n             * const store = new Store({\n             *     fields : ['name', 'city', 'company'],\n             *     data   : [\n             *         { id : 1, name : 'Mark', city : 'London', company : 'Cool inc' },\n             *         ...\n             *     ]\n             * });\n             * ```\n             *\n             * See {@link Core.data.Model} for more info on defining fields, changing data source and mapping fields to\n             * nested objects.\n             *\n             * Note that pre-created record instances supplied to the store are kept as is and thus these fields will\n             * not apply to them.\n             *\n             * @config {Array<String|ModelFieldConfig|Core.data.field.DataField>}\n             * @category Common\n             */\n            fields : null,\n\n            /**\n             * Automatically detect from set data if used as tree store or flat store\n             * @config {Boolean}\n             * @default\n             * @category Tree\n             */\n            autoTree : true,\n\n            /**\n             * Raw data to load initially.\n             *\n             * Expects an array of JavaScript objects, with properties matching store's fields (defined on its\n             * {@link #config-modelClass model} or in the {@link #config-fields} config).\n             *\n             * ```javascript\n             * const store = new Store({\n             *     data : [\n             *         { id : 1, name : 'Linda', city : 'NY' },\n             *         { id : 2, name : 'Olivia', city : 'Paris' },\n             *         ...\n             *     ]\n             * });\n             * ```\n             *\n             * @config {Object[]|Core.data.Model[]}\n             * @category Common\n             */\n            data : null,\n\n            /**\n             * `true` to act as a tree store.\n             * @config {Boolean}\n             * @category Tree\n             */\n            tree : false,\n\n            callOnFunctions : true,\n\n            /**\n             * A {@link Core/util/Collection}, or Collection config object\n             * to use to contain this Store's constituent records.\n             * @config {Core.util.Collection|CollectionConfig}\n             * @category Advanced\n             */\n            storage : null,\n\n            /**\n             * Retools the loaded data objects instead of making shallow copies of them. This increases performance but\n             * pollutes the incoming data and does not allow remapping of fields (dataSource).\n             *\n             * Also allows disabling certain steps in data loading, to further improve performance. Either accepts an\n             * object with the params described below or `true` which equals `disableDuplicateIdCheck` and\n             * `disableTypeConversion`.\n             *\n             * ```javascript\n             * // No duplicate id checking, no type conversions\n             * new Store({ useRawData : true });\n             *\n             * new Store({\n             *   // No type conversions only\n             *   useRawData : {\n             *     disableTypeConversion : true\n             *   }\n             * });\n             * ```\n             *\n             * @config {Boolean|Object}\n             * @param {Boolean} [disableDuplicateIdCheck] Data must not contain duplicate ids, check is bypassed.\n             * @param {Boolean} [disableDefaultValue] Default values will not be applied to record fields.\n             * @param {Boolean} [disableTypeConversion] No type conversions will be performed on record data.\n             * @category Advanced\n             */\n            useRawData : false,\n\n            /**\n             * Specify `false` to prevent loading records without ids, a good practise to enforce when syncing with a\n             * backend.\n             *\n             * By default Store allows loading records without ids, in which case a generated id will be assigned.\n             *\n             * @config {Boolean}\n             * @default true\n             * @category Advanced\n             */\n            allowNoId : true,\n\n            /**\n             * Prevent dynamically subclassing the modelClass. It does so by default to not pollute it when exposing\n             * properties. Should rarely need to be used.\n             * @config {Boolean}\n             * @default false\n             * @private\n             * @category Advanced\n             */\n            preventSubClassingModel : null\n        };\n    }\n\n    static get identifiable() {\n        return {\n            registerGeneratedId : false\n        };\n    }\n\n    /**\n     * Class used to represent records. Defaults to class Model.\n     * @member {Core.data.Model} modelClass\n     * @typings {typeof Model}\n     * @category Records\n     */\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Fired when the id of a record has changed\n     * @event idChange\n     * @param {Core.data.Store} source This Store\n     * @param {Core.data.Model} record Modified record\n     * @param {String|Number} oldValue Old id\n     * @param {String|Number} value New id\n     */\n\n    /**\n     * Fired before record is modified in this store.\n     * Modification may be vetoed by returning `false` from a handler.\n     * @event beforeUpdate\n     * @param {Core.data.Store} source This Store\n     * @param {Core.data.Model} record Modified record\n     * @param {Object} changes Modification data\n     */\n\n    /**\n     * Fired when a record is modified\n     * @event update\n     * @param {Core.data.Store} source This Store\n     * @param {Core.data.Model} record Modified record\n     * @param {Object} changes Modification data\n     */\n\n    /**\n     * Fired when one of this Store's constituent records is modified while in\n     * {@link Core.data.Model#function-beginBatch batched} state. This may be used to keep\n     * UIs up to date while \"tentative\" changes are made to a record which must not be synced with a server.\n     * @event batchedUpdate\n     * @private\n     */\n\n    /**\n     * Fired when the root node is set\n     * @event rootChange\n     * @param {Core.data.Store} source This Store\n     * @param {Core.data.Model} oldRoot The old root node.\n     * @param {Core.data.Model} rootNode The new root node.\n     */\n\n    /**\n     * Data in the store was changed. This is a catch-all event which is fired for all changes\n     * which take place to the store's data.\n     *\n     * This includes mutation of individual records, adding and removal of records, as well as\n     * setting a new data payload using the {@link #property-data} property, sorting, filtering,\n     * and calling {@link Core.data.mixin.StoreCRUD#function-removeAll}.\n     *\n     * Simple databound widgets may use to the `change` event to refresh their UI without having to add multiple\n     * listeners to the {@link #event-update}, {@link Core.data.mixin.StoreCRUD#event-add},\n     * {@link Core.data.mixin.StoreCRUD#event-remove}, {@link #event-refresh} and\n     * {@link Core.data.mixin.StoreCRUD#event-removeAll} events.\n     *\n     * A more complex databound widget such as a grid may use the more granular events to perform less\n     * destructive updates more appropriate to each type of change. The properties will depend upon the value of the\n     * `action` property.\n     *\n     * @event change\n     * @param {Core.data.Store} source This Store.\n     * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} action\n     * Name of action which triggered the change. May be one of the options listed above\n     * @param {Core.data.Model} record Changed record, for actions that affects exactly one record (`'update'`)\n     * @param {Core.data.Model[]} records Changed records, passed for all actions except `'removeAll'`\n     * @param {Object} changes Passed for the `'update'` action, info on which record fields changed\n     */\n    // NOTE: When updating params above, also update change event in ProjectModelMixin and dataChange in ProjectConsumer\n\n    /**\n     * Data in the store has completely changed, such as by a filter, or sort or load operation.\n     * @event refresh\n     * @param {Core.data.Store} source This Store.\n     * @param {Boolean} batch Flag set to `true` when the refresh is triggered by ending a batch\n     * @param {'dataset'|'sort'|'clearchanges'|'filter'|'create'|'update'|'delete'|'group'} action Name of\n     * action which triggered the change. May be one of the options listed above.\n     */\n\n    //endregion\n\n    /* break doc comment from next method */\n\n    //region Init\n\n    constructor(...args) {\n        super(...args);\n\n        // When using a Proxy, the Proxy is returned instead of the actual Store\n        if (this.objectify) {\n            return this.initProxy();\n        }\n    }\n\n    construct(config = {}) {\n        const me = this;\n\n        Object.assign(me, {\n            added              : new StoreBag(),\n            removed            : new StoreBag(),\n            modified           : new StoreBag(),\n            idRegister         : {},\n            internalIdRegister : {},\n            oldIdMap           : {}\n        });\n\n        if (config.storeId) {\n            // avoid changing id when setting storeId:\n            config = ObjectHelper.assign({ id : config.storeId }, config);\n\n            // We cannot remove storeId since it can also be inherited and if so, it will override the id above:\n            // delete config.storeId;\n        }\n\n        super.construct(config);\n\n        me.initRelations();\n    }\n\n    /**\n     * Retrieves/creates a store based on the passed config.\n     *\n     * | Type              | Result                                                                 |\n     * |-------------------|------------------------------------------------------------------------|\n     * | Core.data.Store   | Returns supplied store as is                                           |\n     * | String            | Retrieves an existing store by id                                      |\n     * | Object            | Creates a new store using supplied config object                       |\n     * | Object[]          | Creates a new store, populated with records created from supplied data |\n     * | Core.data.Model[] | Creates a new store, populated with supplied records                   |\n     *\n     *\n     * @param {Core.data.Store|StoreConfig|String|StoreConfig[]|Core.data.Model[]} config\n     * @param {Object} [defaults] Config object to apply when creating a new store for passed data\n     * @param {Function} [converterFn] Function called for each data object prior to creating a record from it. The\n     * return value is used to create a record.\n     * @private\n     */\n    static from(config, defaults = {}, converterFn = null) {\n        // null and store instances pass through\n        if (config && !config.isStore) {\n            // Passed a string, get store by id\n            if (typeof config === 'string') {\n                config = Store.getStore(config);\n            }\n            // Passed something else, create a store using the input as its data\n            else {\n                // Array of records or data, pass to converterFn if one is supplied\n                if (Array.isArray(config)) {\n                    if (converterFn) {\n                        config = config.map(data => data.isModel ? data : converterFn(data));\n                    }\n\n                    config = ObjectHelper.assign({}, defaults, { data : config });\n                }\n\n                config = new Store(config);\n            }\n        }\n\n        return config;\n    }\n\n    doDestroy() {\n        const\n            me         = this,\n            allRecords = me.registeredRecords;\n\n        for (let i = allRecords.length - 1, rec; i >= 0; i--) {\n            rec = allRecords[i];\n            if (!rec?.isDestroyed) {\n                rec.unjoinStore(me);\n            }\n        }\n\n        me._storage?.destroy();\n\n        // Remove from STM if added there (STM might also have gotten destroyed before us)\n        me.stm?.removeStore?.(me);\n\n        if (!me.isChained) {\n            me.rootNode?.destroy();\n        }\n\n        // Events superclass fires destroy event.\n        super.doDestroy();\n        //TODO abort any ongoing loads\n    }\n\n    /**\n     * Stops this store from firing events until {@link #function-endBatch} is called. Multiple calls to `beginBatch`\n     * stack up, and will require an equal number of `endBatch` calls to resume events.\n     *\n     * Upon call of {@link #function-endBatch}, a {@link #event-refresh} event is triggered to allow UIs to\n     * update themselves based upon the new state of the store.\n     *\n     * This is extremely useful when making a large number of changes to a store. It is important not to trigger\n     * too many UI updates for performance reasons. Batching the changes ensures that UIs attached to this\n     * store are only updated once at the end of the updates.\n     */\n    beginBatch() {\n        this.suspendEvents();\n    }\n\n    /**\n     * Ends event suspension started by {@link #function-beginBatch}. Multiple calls to {@link #function-beginBatch}\n     * stack up, and will require an equal number of `endBatch` calls to resume events.\n     *\n     * Upon call of `endBatch`, a {@link #event-refresh} event with `action: batch` is triggered to allow UIs to update\n     * themselves based upon the new state of the store.\n     *\n     * This is extremely useful when making a large number of changes to a store. It is important not to trigger\n     * too many UI updates for performance reasons. Batching the changes ensures that UIs attached to this\n     * store are only updated once at the end of the updates.\n     */\n    endBatch() {\n        if (this.resumeEvents()) {\n            this.trigger('refresh', {\n                action  : 'batch',\n                data    : this.storage.values,\n                records : this.storage.values\n            });\n        }\n    }\n\n    set storage(storage) {\n        const me = this;\n\n        if (storage?.isCollection) {\n            me._storage = storage;\n        }\n        else {\n            me._storage = new Collection(storage);\n        }\n        me._storage.autoFilter = me.reapplyFilterOnAdd;\n\n        me._storage.autoSort = me.reapplySortersOnAdd;\n\n        // Join all the constituent records to this Store\n        for (const r of me._storage) {\n            r.joinStore(me);\n        }\n        me._storage.ion({\n            change  : 'onDataChange',\n            thisObj : me\n        });\n    }\n\n    get storage() {\n        if (!this._storage) {\n            this.storage = {};\n        }\n        return this._storage;\n    }\n\n    /**\n     * Returns all records (ignoring any filters) from the store.\n     * @property {Core.data.Model[]}\n     * @readonly\n     * @category Records\n     */\n    get allRecords() {\n        const me = this;\n\n        if (me.isTree) {\n            const result = me.collectDescendants(me.rootNode, undefined, undefined, { unfiltered : true }).all;\n\n            if (me.rootVisible) {\n                result.unshift(me.rootNode);\n            }\n\n            return result;\n        }\n        else {\n            return me.isGrouped\n                ? me.collectGroupRecords()\n                : me.storage.allValues;\n        }\n    }\n\n    // All records except special rows such group headers etc\n    getAllDataRecords(searchAllRecords) {\n        return this.isGrouped ? this.collectGroupRecords(searchAllRecords, false) : (searchAllRecords ? this.storage.allValues : this.storage.values);\n    }\n\n    /**\n     * Called by owned record when the record has its {@link Core.data.Model#property-isCreating}\n     * property toggled.\n     * @param {Core.data.Model} record The record that is being changed.\n     * @param {Boolean} isCreating The new value of the {@link Core.data.Model#property-isCreating} property.\n     * @internal\n     */\n    onIsCreatingToggle(record, isCreating) {\n        const\n            me               = this,\n            newlyPersistable = record.isPersistable && !isCreating;\n\n        // If it's a transient \"isCreating\" record, waiting to be confirmed as a new entry\n        // into the store, then it should *not* be in the added Bag as a syncable record.\n        // If we are upgrading it to a permanent record, it *should* be in the added Bag.\n        me.added[newlyPersistable ? 'add' : 'remove'](record);\n\n        // If the record is newly persistable...\n        if (newlyPersistable) {\n            /**\n             * Fired when a temporary record with the {@link Core.data.Model#property-isCreating} property set\n             * has been confirmed as a part of this store by having its {@link Core.data.Model#property-isCreating}\n             * property cleared.\n             * @event addConfirmed\n             * @param {Core.data.Store} source This Store.\n             * @param {Core.data.Model} record The record confirmed as added.\n             */\n            me.trigger('addConfirmed', { record });\n\n            // AjaxStore to commit confirmed new record\n            if (me.autoCommit) {\n                me.doAutoCommit();\n            }\n        }\n    }\n\n    // Join added records to store, not called when loading\n    joinRecordsToStore(records) {\n        const { allCount } = this;\n\n        for (let i = 0; i < records.length; i++) {\n            const record = records[i];\n            // Set a parentIndex on newly added records, based on count prior to the add\n            record.setData('parentIndex', allCount + i - records.length);\n            record.joinStore(this);\n        }\n    }\n\n    /**\n     * Responds to mutations of the underlying storage Collection\n     * @param {Object} event\n     * @protected\n     */\n    onDataChange({ source : storage, action, added, removed, replaced, oldCount, items, from, to }) {\n        const\n            me           = this,\n            isAddRemove  = dataAddRemoveActions[action],\n            // The \"filter\" action's removed and added are not processed as adds and removes.\n            // In a filter operation the records are still members of the store.\n            addedCount   = isAddRemove && added?.length,\n            removedCount = isAddRemove && removed?.length;\n\n        let filtersWereReapplied,\n            sortersWereReapplied;\n\n        me._idMap = null;\n\n        if (addedCount) {\n            me.joinRecordsToStore(added);\n        }\n\n        replaced?.forEach(([oldRecord, newRecord]) => {\n            oldRecord.unjoinStore(me, true);\n            newRecord.joinStore(me);\n        });\n\n        // Allow mixins to mutate the storage before firing events.\n        // StoreGroup does this to introduce group records into the mix.\n        super.onDataChange(...arguments);\n\n        // Join/unjoin incoming/outgoing records unless its as a result of TreeNode operations.\n        // If we are a tree, joining is done when nodes are added/removed\n        // as child nodes of a joined parent.\n        if (!me.isTree) {\n            if (addedCount) {\n                for (const record of added) {\n                    // If was removed, remove from `removed` list\n                    if (me.removed.includes(record)) {\n                        me.removed.remove(record);\n                    }\n                    // Else add to `added` list\n                    else if (!record.isLinked) {\n                        me.added.add(record);\n                    }\n                }\n\n                // Re-evaluate the current *local* filter set silently so that the\n                // information we are broadcasting below is up to date.\n                filtersWereReapplied = !me.remoteFilter && me.filtered && me.reapplyFilterOnAdd;\n                if (filtersWereReapplied) {\n                    me.filter({\n                        silent : true\n                    });\n                }\n\n                // if sortParamName not defined, is not remote sort\n                sortersWereReapplied = !me.remoteSort && me.isSorted && me.reapplySortersOnAdd;\n                if (sortersWereReapplied) {\n                    me.sort(null, null, false, true);\n                }\n            }\n            if (removedCount) {\n                for (const record of removed) {\n                    // If app was in the middle of a batched update, cancel the update.\n                    record.cancelBatch();\n\n                    record.unjoinStore(me);\n\n                    // If was newly added, remove from `added` list\n                    if (me.added.includes(record)) {\n                        me.added.remove(record);\n                    }\n                    // Else add to `removed` list\n                    // Unless it's StateTrackingManager reverting the record insertion.\n                    // Also unless it's a record which was a transient record created by the UI\n                    // and then the create was canceled at the edit stage.\n                    else if (!record._undoingInsertion && !record.isCreating && !record.isLinked) {\n                        me.removed.add(record);\n                    }\n                }\n                me.modified.remove(removed);\n\n                // Re-evaluate the current *local* filter set silently so that the\n                // information we are broadcasting below is up to date.\n                filtersWereReapplied = !me.remoteFilter && me.filtered;\n                if (filtersWereReapplied) {\n                    me.filter({\n                        silent : true\n                    });\n                }\n            }\n        }\n\n        switch (action) {\n            case 'clear':\n                // Clear our own relationCache, since we will be empty\n                me.relationCache = {};\n\n                // Signal to stores that depend on us\n                me.updateDependentStores('removeall');\n\n                me.trigger('removeAll');\n                me.trigger('change', {\n                    action : 'removeall'\n                });\n                break;\n\n            case 'splice':\n                if (addedCount) {\n                    me.updateDependentStores('add', added);\n\n                    const\n                        // Collection does not handle moves, figure out if and where a record was moved from by checking\n                        // previous index value stored in meta\n                        oldIndex = added.reduce((lowest, record) => {\n                            const { previousIndex } = record.meta;\n                            if (previousIndex > -1 && previousIndex < lowest) lowest = previousIndex;\n                            return lowest;\n                        }, added[0].meta.previousIndex),\n\n                        index    = storage.indexOf(added[0], !storage.autoFilter),\n\n                        params   = {\n                            records : added,\n                            index\n                        };\n\n                    // Only include param oldIndex when used\n                    if (oldIndex > -1) {\n                        params.oldIndex = oldIndex;\n                    }\n\n                    me.trigger('add', params);\n\n                    me.trigger('change', Object.assign({ action : 'add' }, params));\n\n                    if (filtersWereReapplied) {\n                        me.triggerFilterEvent({\n                            action : 'filter', filters : me.filters, oldCount, records : me.storage.allValues\n                        });\n                    }\n\n                    if (sortersWereReapplied) {\n                        me.trigger('sort', { action : 'sort', sorters : me.sorters, records : me.storage.allValues });\n                    }\n                }\n\n                if (removed.length) {\n                    me.updateDependentStores('remove', removed);\n\n                    me.trigger('remove', {\n                        records : removed\n                    });\n                    me.trigger('change', {\n                        action  : 'remove',\n                        records : removed\n                    });\n                }\n\n                if (replaced.length) {\n                    me.trigger('replace', {\n                        records : replaced,\n                        all     : me.records.length === replaced.length\n                    });\n                    me.trigger('change', {\n                        action : 'replace',\n                        replaced,\n                        all    : me.records.length === replaced.length\n                    });\n                }\n                break;\n\n            case 'filter':\n                // Reapply grouping/sorting to make sure unfiltered records get sorted correctly\n                if (me.isGrouped || me.isSorted) {\n                    me.performSort(true);\n                }\n                break;\n\n            case 'move': {\n                // silently update parentIndex of records affected\n                const\n                    start = Math.min(from, to),\n                    // We need to constrain maximum index in case record gets removed due to moving to the\n                    // collapsed group\n                    end   = Math.min(me.storage.allValues.length - 1, Math.max(from, to));\n\n                for (let allRecords = me.storage.allValues, i = start; i <= end; i++) {\n                    allRecords[i].setData('parentIndex', i);\n                }\n\n                /**\n                 * Fired when a block of records has been moved within this Store\n                 * @event move\n                 * @param {Core.data.Store} source This Store\n                 * @param {Core.data.Model} record (DEPRECATED) The first record moved (The\n                 * {@link Core.data.mixin.StoreCRUD#function-move} API now accepts an array of records to move).\n                 * @param {Core.data.Model[]} records The records moved.\n                 * @param {Number} from The index from which the record was removed (applicable only for flat store).\n                 * @param {Number} to The index at which the record was inserted (applicable only for flat store).\n                 * @param {Core.data.Model} [newParent] The new parent record for the dragged records (applicable only for tree stores)\n                 * @param {Core.data.Model[]} [oldParents] The old parent records for the dragged records (applicable only for move operations in tree stores)\n                 */\n                me.trigger('move', {\n                    record  : items[0],\n                    records : items,\n                    from,\n                    to\n                });\n\n                // The move was in real data. If we are filtered, the\n                // filtered set has to be refreshed.\n                if (me.isFiltered) {\n                    me.performFilter();\n                }\n                me.trigger('change', {\n                    action,\n                    record  : items[0],\n                    records : items,\n                    from,\n                    to\n                });\n                break;\n            }\n        }\n    }\n\n    onDataReplaced(action, data) {\n        const\n            me          = this,\n            { storage } = me,\n            all         = storage.allValues,\n            sorted      = Boolean(me.sorters.length > 0);\n\n        for (let i = 0; i < all.length; i++) {\n            all[i].joinStore(me);\n        }\n\n        // Need to update group records info (headers and footers)\n        const groupRecords = me.prepareGroupRecords();\n\n        // The three operations below, filter, store and sort, all are passed\n        // the \"silent\" parameter meaning they do not fire their own events.\n        // The 'refresh' and 'change' events after are used to update UIs.\n        if (!me.remoteFilter && me.isFiltered) {\n            me.filter({\n                silent : true\n            });\n        }\n\n        if (me.remoteSort) {\n            if (me.isGrouped) {\n                storage.replaceValues({\n                    values : groupRecords,\n                    silent : true\n                });\n            }\n        }\n        else {\n            // TODO: groupers must just be promoted to be the primary sorters.\n            if (me.isGrouped) {\n                me.group(null, null, false, !sorted, true);\n            }\n\n            // Only request sorting of arriving data if sorting is not remote.\n            if (sorted) {\n                me.sort(null, null, false, true);\n            }\n        }\n\n        // Check for duplicate ids, unless user guarantees data validity\n        if (!me.useRawData.disableDuplicateIdCheck) {\n            const { idMap } = me;\n\n            if (Object.keys(idMap).length < storage.values.length) {\n                // idMap has fewer entries than expected, a duplicate id was used. pick idMap apart to find out which\n                const collisions = [];\n\n                storage.values.forEach(r => idMap[r.id] ? delete idMap[r.id] : collisions.push(r));\n\n                throw new Error(`Id collision on ${collisions.map(r => r.id)}`);\n            }\n        }\n\n        const event = { action, data, records : storage.values };\n\n        me.updateDependentStores(action, event.records);\n\n        // Allow subclasses to postprocess a new dataset\n        me.afterLoadData?.();\n\n        if (!me.isRemoteDataLoading) {\n            me.trigger('refresh', event);\n        }\n\n        me.trigger('change', event);\n    }\n\n    /**\n     * This is called from Model after mutating any fields so that Stores can take any actions necessary at that point,\n     * and distribute mutation event information through events.\n     * @param {Core.data.Model} record The record which has just changed\n     * @param {Object} toSet A map of the field names and values that were passed to be set\n     * @param {Object} wasSet A map of the fields that were set. Each property is a field name, and\n     * the property value is an object containing two properties: `oldValue` and `value` eg:\n     * ```javascript\n     *     {\n     *         name {\n     *             oldValue : 'Rigel',\n     *             value : 'Nigel'\n     *         }\n     *     }\n     *\n     * @param {Boolean} silent Do not trigger events\n     * @param {Boolean} fromRelationUpdate Update caused by a change in related model\n     * @private\n     */\n    onModelChange(record, toSet, wasSet, silent, fromRelationUpdate) {\n        const\n            me          = this,\n            event       = {\n                record,\n                records : [record],\n                changes : wasSet,\n                // Cannot use isBatching, since change is triggered when batching has reached 0\n                // (but before it is set to null)\n                batch   : record.batching != null,\n                fromRelationUpdate\n            },\n            committable = record.ignoreBag || record.isLinked ? false : me.updateModifiedBagForRecord(record);\n\n        // Inform underlying collection of the changes, allowing it to keep any indices up to date\n        me.storage.onItemMutation(record, wasSet);\n\n        // Always update indices, otherwise they will be left out of date (was previously skipped when silent)\n        if ('id' in wasSet) {\n            const { oldValue, value } = toSet.id;\n\n            me.updateDependentRecordIds(oldValue, value);\n\n            me.onRecordIdChange({ record, oldValue, value });\n        }\n\n        if (!silent) {\n            if ('id' in wasSet) {\n                const { oldValue, value } = toSet.id;\n\n                me.trigger('idChange', {\n                    store : me,\n                    record,\n                    oldValue,\n                    value\n                });\n            }\n\n            me.onUpdateRecord(record, wasSet);\n\n            me.trigger('update', event);\n            me.trigger('change', Object.assign({ action : 'update' }, event));\n        }\n\n        if (me.autoCommit && committable) {\n            me.doAutoCommit();\n        }\n    }\n\n    updateModifiedBagForRecord(record) {\n        const me       = this;\n        let addedToBag = false;\n\n        // Add or remove from our modified Bag\n        if (record.isModified) {\n            if (!me.modified.includes(record) && !me.added.includes(record) && record.isPartOfStore(me) && !record.isAutoRoot) {\n                // When we add a new model first time and the model is not persistable (for example when the model is not valid),\n                // it is not added to the \"added\" collection (StoreBag), but only joined to the store.\n                // So if the record is not added neither to \"modified\" nor \"added\",\n                // need to check if this record is phantom. If so, add it to the \"added\", otherwise to the \"modified\".\n                if (record.isPhantom) {\n                    me.added.add(record);\n                }\n                else {\n                    me.modified.add(record);\n                }\n\n                addedToBag = true;\n            }\n        }\n        else {\n            me.modified.remove(record);\n        }\n\n        return addedToBag;\n    }\n\n    get idMap() {\n        const\n            me           = this,\n            needsRebuild = !me._idMap,\n            idMap        = me._idMap || (me._idMap = {});\n\n        if (needsRebuild) {\n            const processedRecords = me.storage.values;\n            for (let record, index = 0, visibleIndex = 0; index < processedRecords.length; index++) {\n                record           = processedRecords[index];\n                idMap[record.id] = { index, visibleIndex, record };\n                if (!record.isSpecialRow) {\n                    visibleIndex++;\n                }\n            }\n        }\n\n        return idMap;\n    }\n\n    changeModelClass(ClassDef) {\n        const { fields } = this;\n\n        this.originalModelClass = ClassDef;\n\n        let ClassDefEx = ClassDef;\n\n        // Ensure our modelClass is exchanged for an extended of modelClass decorated with any configured fields.\n        if (fields?.length) {\n            ClassDefEx = class extends ClassDef {\n                static get fields() {\n                    return fields;\n                }\n            };\n        }\n        // If we expose properties on Model we will pollute all other models, use internal subclass instead\n        else if (!this.preventSubClassingModel) {\n            ClassDefEx = class extends ClassDef {};\n        }\n\n        // Need to properly expose relations on this new subclass\n        ClassDefEx.initClass();\n\n        return ClassDefEx;\n    }\n\n    //endregion\n\n    //region Store id & map\n\n    // Deprecated.\n    // TODO: Remove in 2.0 when all references have been removed from Scheduler and Gantt\n    set storeId(storeId) {\n        this.id = storeId;\n    }\n\n    get storeId() {\n        return this.id;\n    }\n\n    changeId(id, oldId) {\n        return super.changeId((id !== true) && id, oldId);\n    }\n\n    updateId(id, oldId) {\n        // Store code always did just evict any other instance by that ID.\n        // TODO: Should we tighten this up?\n        const duplicate = Store.getById(id);\n\n        duplicate && Store.unregisterInstance(duplicate);\n\n        super.updateId(id, oldId);\n    }\n\n    generateAutoId() {\n        return Store.generateId(`store-`);\n    }\n\n    get tree() {\n        return this._tree;\n    }\n\n    set tree(tree) {\n        this._tree = tree;\n\n        if (tree && !this.rootNode) {\n            this.rootNode            = this.buildRootNode();\n            this.rootNode.isAutoRoot = true;\n        }\n    }\n\n    // a hook to build a customized root node\n    buildRootNode() {\n        return {};\n    }\n\n    /**\n     * Get a store from the store map by id.\n     * @param {String|Number|Object[]} id The id of the store to retrieve, or an array of objects\n     * from which to create the contents of a new Store.\n     * @returns {Core.data.Store} The store with the specified id\n     */\n    static getStore(id, storeClass) {\n        if (id instanceof Store) {\n            return id;\n        }\n        if (this.getById(id)) {\n            return this.getById(id);\n        }\n        if (Array.isArray(id)) {\n            let storeModel;\n\n            const storeData = id.map(item => {\n                if (item instanceof Model) {\n                    storeModel = item.constructor;\n                }\n                else if (typeof item === 'string') {\n                    item = {\n                        text : item\n                    };\n                }\n                else {\n                    //<debug>\n                    if (item.constructor.name !== 'Object') {\n                        throw new Error('getStore must be passed an array of Objects');\n                    }\n                    //</debug>\n                }\n                return item;\n            });\n\n            id = {\n                autoCreated : true,\n                data        : storeData,\n                modelClass  : storeModel || class extends Model {},\n                allowNoId   : true // String items have no id and are not guaranteed to be unique\n            };\n            if (!storeClass) {\n                storeClass = Store;\n            }\n        }\n        if (storeClass) {\n            return new storeClass(id);\n        }\n    }\n\n    /**\n     * Get all registered stores\n     * @property {Core.data.Store[]}\n     */\n    static get stores() {\n        return Store.registeredInstances;\n    }\n\n    //endregion\n\n    //region Data\n\n    /**\n     * The invisible root node of this tree.\n     * @property {Core.data.Model}\n     * @readonly\n     * @category Tree\n     */\n    get rootNode() {\n        return this.masterStore ? this.masterStore.rootNode : this._rootNode;\n    }\n\n    set rootNode(rootNode) {\n        const me      = this,\n            oldRoot = me._rootNode;\n\n        // No change\n        if (rootNode === oldRoot) {\n            return;\n        }\n\n        if (oldRoot) {\n            me.clear(true);\n        }\n        if (rootNode instanceof Model) {\n            // We insist that the rootNode is expanded otherwise no children will be added\n            rootNode.instanceMeta(me).collapsed = false;\n\n            me._rootNode = rootNode;\n        }\n        else {\n            me._rootNode = rootNode = new me.modelClass(Object.assign({\n                expanded                : true,\n                [me.modelClass.idField] : `${me.id}-rootNode`\n            }, rootNode), me, null, true);\n        }\n        me._tree        = true;\n        rootNode.isRoot = true;\n        rootNode.joinStore(me);\n\n        // If there are nodes to be inserted into the flat storage\n        // then onNodeAddChild knows how to do that and what events\n        // to fire based upon rootNode.isLoading.\n        if (rootNode.children?.length || me.rootVisible) {\n            rootNode.isLoading = true;\n            me.onNodeAddChild(rootNode, rootNode.children || [], 0);\n            rootNode.isLoading = false;\n        }\n\n        me.trigger('rootChange', { oldRoot, rootNode });\n    }\n\n    /**\n     * Sets data in the store.\n     *\n     * Expects an array of JavaScript objects, with properties matching store's fields (defined on its\n     * {@link #config-modelClass model} or in the {@link #config-fields} config).\n     *\n     * Called on initialization if data is in config otherwise call it yourself after ajax call etc. Can also be used to\n     * get the raw original data.\n     *\n     * ```javascript\n     * store.data = [\n     *     { id : 1, name : 'Linda', city : 'NY' },\n     *     { id : 2, name : 'Olivia', city : 'Paris' },\n     *     ...\n     * ];\n     * ```\n     *\n     * @property {Object[]}\n     * @fires refresh\n     * @fires change\n     * @category Records\n     */\n    set data(data) {\n        this.setStoreData(data);\n    }\n\n    // For overridability in engine\n    setStoreData(data) {\n        const\n            me                         = this,\n            { idField, childrenField } = me.modelClass;\n\n        // Take a peek at first data row, and clone data if we are provided immutable objects\n        if (me.transformFlatData && data?.length > 0 && !Object.isExtensible(data[0])) {\n            // Avoid cloning object again in Model\n            me.useRawData = me.useRawData || {\n                disableDuplicateIdCheck : false,\n                disableDefaultValue     : false,\n                disableTypeConversion   : false\n            };\n            data          = ObjectHelper.clone(data);\n        }\n\n        // Make sure that if the plugins have not been processed yet, we call\n        // the temporary property getter which configuration injects to\n        // process plugins at this point. Some plugins are required to\n        // operate on incoming data.\n        me.getConfig('plugins');\n\n        // In case data is loaded during configuration before configuredListeners have been processed\n        me.processConfiguredListeners();\n\n        // Allow data as a \"named object\", using keys as ids\n        if (data && !Array.isArray(data)) {\n            data = ObjectHelper.transformNamedObjectToArray(data, idField);\n        }\n\n        // Convert to being a tree store if any of the new rows have a children property\n        me.tree = !me.isChained && (me.tree || Boolean(me.autoTree && data?.some(r => r[childrenField])));\n\n        // Store received data order to preserve on sort if remote data loading enabled\n        if (data && (me.remoteSort || me.remoteFilter)) {\n            for (let i = 0; i < data.length; i++) {\n                data[i]._remoteSortIndex = i;\n            }\n        }\n\n        // Always load a new dataset initially\n        if (!me.syncDataOnLoad || !me._data) {\n            me._data = data;\n            // This means load the root node\n            if (me.tree) {\n                if (me.transformFlatData) {\n                    data = me.treeifyFlatData(data);\n                }\n\n                const root = me.rootNode;\n\n                root.isLoading = true;\n\n                // Remove data parentId before clearing\n                me._data.forEach(record => delete record.parentId);\n                // clear silently without marking as removed\n                me.clear(true);\n                // Append child will detect that this is a dataset operation and trigger sort + events needed\n                root.appendChild(data);\n\n                me.updateDependentStores('dataset', [root]);\n\n                root.isLoading = false;\n\n                if (data.length === 0) {\n                    const event = { action : 'dataset', data : [], records : [] };\n                    me.trigger('refresh', event);\n                    me.trigger('change', event);\n                }\n                // we must re-apply filters for the filtered tree store\n                else if (me.isFiltered) {\n                    me.filter();\n                }\n            }\n            else {\n                me.loadData(data);\n            }\n\n            // loading the store discards all tracked changes\n            me.added.clear();\n            me.removed.clear();\n            me.modified.clear();\n        }\n        // Sync dataset if configured to do so\n        else {\n            me.syncDataset(data);\n        }\n    }\n\n    loadData(data, action = 'dataset') {\n        const\n            me                     = this,\n            { storage, allowNoId } = me,\n            idField                = me.modelClass.fieldMap.id.dataSource,\n            creatingRecord         = me.find(rec => rec.isCreating);\n\n        if (creatingRecord) {\n            storage.values.splice(me.records.indexOf(creatingRecord), 1);\n        }\n\n        let warnGenerated = me.verifyNoGeneratedIds;\n\n        // Need to unregister all groups\n        me.removeHeadersAndFooters(me.storage.values);\n\n        me._idMap   = null;\n        me.oldIdMap = {};\n\n        if (data) {\n            const isRaw = !(data[0] instanceof Model);\n\n            if (isRaw) {\n                me.modelClass.exposeProperties(data[0]);\n\n                const\n                    count   = data.length,\n                    records = new Array(count);\n\n                for (let i = 0; i < count; i++) {\n                    const recordData = data[i];\n\n                    if (!allowNoId && recordData[idField] == null) {\n                        throw new Error(`Id required but not found on row ${i}`);\n                    }\n\n                    if (warnGenerated && recordData[idField]?.startsWith?.('_generated')) {\n                        console.warn(`Generated id found in data: ${recordData[idField]}. Generated ids are temporary and should be replaced with real ids by the backend`);\n                        warnGenerated = false;\n                    }\n\n                    records[i] = me.processRecord(me.createRecord(recordData, true), true);\n                    records[i].setData('parentIndex', i);\n                }\n\n                // clear without marking as removed\n                me.clear(true);\n\n                // Allow Collection's own filters to work on the Collection by\n                // passing the isNewDataset param as true.\n                // The storage Collection may have been set up with its own filters\n                // while we are doing remote filtering. An example is ComboBox\n                // with filterSelected: true. Records which are in the selection are\n                // filtered out of visibility using a filter directly in the Combobox's\n                // Store's Collection.\n                storage.replaceValues({\n                    values       : records,\n                    isNewDataset : true,\n                    silent       : true\n                });\n            }\n            else {\n                // clear without marking as removed\n                me.clear(true);\n\n                storage.replaceValues({\n                    values       : data.slice(),\n                    isNewDataset : true,\n                    silent       : true\n                });\n            }\n\n            if (creatingRecord) {\n                storage.values.push(creatingRecord);\n            }\n            me._data = data;\n            me.onDataReplaced(action, data);\n        }\n        else {\n            // clear without marking as removed\n            me.clear(true);\n\n            me._data = null;\n        }\n\n        me.isSyncingDataOnLoad = false;\n    }\n\n    get data() {\n        return this._data;\n    }\n\n    /**\n     * Creates an array of records from this store from the `start` to the `end' - 1\n     * @param {Number} [start] The index of the first record to return\n     * @param {Number} [end] The index *after* the last record to return `(start + length)`\n     * @returns {Core.data.Model[]} The requested records.\n     * @category Records\n     */\n    getRange(start, end, all = true) {\n        return (all ? this.storage.allValues : this.storage.values).slice(start, end);\n    }\n\n    /**\n     * Creates a model instance, used internally when data is set/added. Override this in a subclass to do your own custom\n     * conversion from data to record.\n     * @param {Object} data Json data\n     * @param {Boolean} [skipExpose=false] Supply true when batch setting to not expose properties multiple times\n     * @category Records\n     */\n    createRecord(data, skipExpose = false, rawData = false) {\n        return new this.modelClass(data, this, null, skipExpose, false, rawData);\n    }\n\n    processRecord(record, isDataset = false) {\n        return record;\n    }\n\n    refreshData() {\n        this.filter();\n        this.sort();\n    }\n\n    onRecordIdChange({ record, oldValue, value }) {\n        const\n            me                       = this,\n            idMap                    = me._idMap,\n            { idRegister, oldIdMap } = me;\n\n        me.storage._indicesInvalid = true;\n\n        // Remember the record used to have this identifier\n        // this is used by STM to understand when a foreign key\n        // value update really means targeting other record or\n        // it's just a reaction to the target record id change\n        oldIdMap[oldValue] = record;\n\n        // Update idMap to reflect the changed id. Some code paths (auto syncing changes with CrudManager) will lead to\n        // idMap already being up-to-date when we get here\n        if (idMap && !idMap[value]) {\n            const entry = idMap[oldValue];\n            delete idMap[oldValue];\n            idMap[value] = entry;\n        }\n\n        me.added.changeId(oldValue, value);\n        me.removed.changeId(oldValue, value);\n        me.modified.changeId(oldValue, value);\n\n        delete idRegister[oldValue];\n        idRegister[value] = record;\n\n        record.index = me.storage.indexOf(record);\n    }\n\n    onUpdateRecord(record, changes) {\n        const\n            me                     = this,\n            { internalId }         = changes,\n            { internalIdRegister } = me;\n\n        if (internalId) {\n            this.storage._indicesInvalid = true;\n            delete internalIdRegister[internalId.oldValue];\n            internalIdRegister[internalId.value] = record;\n        }\n\n        // Reapply filters when records change?\n        if (me.reapplyFilterOnUpdate && me.isFiltered) {\n            me.filter();\n        }\n    }\n\n    get useRawData() {\n        return this._useRawData;\n    }\n\n    set useRawData(options) {\n        if (options === true) {\n            this._useRawData = {\n                enabled                 : true,\n                disableDuplicateIdCheck : true,\n                disableTypeConversion   : true,\n                disableDefaultValue     : false\n            };\n        }\n        else {\n            this._useRawData = options ? Object.assign(options, { enabled : true }) : { enabled : false };\n        }\n    }\n\n    //endregion\n\n    //region Count\n\n    /**\n     * Number of records in the store\n     * @param {Boolean} [countProcessed] Count processed (true) or real records (false)\n     * @returns {Number} Record count\n     * @category Records\n     */\n    getCount(countProcessed = true) {\n        return countProcessed ? this.count : this.originalCount;\n    }\n\n    /**\n     * Record count, for data records. Not including records added for group headers etc.\n     * @property {Number}\n     * @readonly\n     * @category Records\n     */\n    get originalCount() {\n        return this.storage.totalCount - (this.groupRecords?.length || 0);\n    }\n\n    /**\n     * Record count, including records added for group headers etc.\n     * @property {Number}\n     * @readonly\n     * @category Records\n     */\n    get count() {\n        return this.storage.count;\n    }\n\n    /**\n     * Returns the complete dataset size regardless of tree node collapsing or filtering\n     * @property {Number}\n     * @readonly\n     * @category Records\n     */\n    get allCount() {\n        return this.isTree ? this.rootNode.descendantCount : this.storage.totalCount;\n    }\n\n    //endregion\n\n    //region Get record(s)\n\n    /**\n     * Returns all \"visible\" records.\n     * **Note:** The returned value **may not** be mutated!\n     * @property {Core.data.Model[]}\n     * @readonly\n     * @immutable\n     * @category Records\n     */\n    get records() {\n        return this.storage.values;\n    }\n\n    /**\n     * Get the first record in the store.\n     * @property {Core.data.Model}\n     * @readonly\n     * @category Records\n     */\n    get first() {\n        return this.storage.values[0];\n    }\n\n    /**\n     * Get the last record in the store.\n     * @property {Core.data.Model}\n     * @readonly\n     * @category Records\n     */\n    get last() {\n        return this.storage.values[this.storage.values.length - 1];\n    }\n\n    /**\n     * Get the record at the specified index\n     * @param {Number} index Index for the record\n     * @returns {Core.data.Model} Record at the specified index\n     * @category Records\n     */\n    getAt(index, all = false) {\n        // all means include filtered out records\n        return this.storage.getAt(index, all);\n    }\n\n    // These are called by Model#join and Model#unjoin\n    // register a record as a findable member keyed by id and internalId\n    register(record) {\n        const me = this;\n\n        if (!me.useRawData.disableDuplicateIdCheck) {\n            // Test for duplicate IDs on register only when a tree store.\n            // loadData does it in the case of a non-tree\n            const existingRec = me.isTree && me.idRegister[record.id];\n\n            if (existingRec && existingRec !== record) {\n                throw new Error(`Id collision on ${record.id}`);\n            }\n        }\n\n        me.idRegister[record.id]                 = record;\n        me.internalIdRegister[record.internalId] = record;\n    }\n\n    unregister(record) {\n        delete this.idRegister[record.id];\n        delete this.internalIdRegister[record.internalId];\n    }\n\n    get registeredRecords() {\n        return Object.values(this.idRegister);\n    }\n\n    /**\n     * Get a record by id. Find the record even if filtered out, part of collapsed group or collapsed node\n     * @param {Core.data.Model|String|Number} id Id of record to return.\n     * @returns {Core.data.Model} A record with the specified id\n     * @category Records\n     */\n    getById(id) {\n        // In case `id` is a record, we use its ID to try to find the record in the store,\n        // because if the record is removed from the store it shouldn't be found.\n        // if (id instanceof Model) {\n        //     id = id.id;\n        // }\n\n        if (id?.isModel) {\n            const record = id;\n\n            // When asking for a record that has links, we resolve first link if original is not found.\n            // This allows `linkedStore.isAvailable(original)` to return true and `linkedStore.getById(original)` to\n            // return the linked record.\n            if (record.hasLinks && !this.storage.allValues.includes(record)) {\n                return record.$links.find(r => this.storage.allValues.includes(r));\n            }\n\n            return record;\n        }\n\n        //return this.tree ? this.idRegister[id] : this.storage.get(id);\n        return this.idRegister[id];\n    }\n\n    /**\n     * Checks if a record is available, in the sense that it is not filtered out,\n     * hidden in a collapsed group or in a collapsed node.\n     * @param {Core.data.Model|String|Number} recordOrId Record to check\n     * @returns {Boolean}\n     * @category Records\n     */\n    isAvailable(recordOrId) {\n        const record = this.getById(recordOrId);\n\n        return record && this.storage.includes(record) || false;\n    }\n\n    /**\n     * Get a record by internalId.\n     * @param {Number} internalId The internalId of the record to return\n     * @returns {Core.data.Model} A record with the specified internalId\n     * @category Records\n     */\n    getByInternalId(internalId) {\n        return this.internalIdRegister[internalId];\n    }\n\n    /**\n     * Checks if the specified record is contained in the store\n     * @param {Core.data.Model|String|Number} recordOrId Record, or `id` of record\n     * @returns {Boolean}\n     * @category Records\n     */\n    includes(recordOrId) {\n        if (this.isTree) {\n            return this.idRegister[Model.asId(recordOrId)] != null;\n        }\n\n        return this.indexOf(recordOrId) > -1;\n    }\n\n    //endregion\n\n    //region Get index\n\n    /**\n     * Returns the index of the specified record/id, or `-1` if not found.\n     * @param {Core.data.Model|String|Number} recordOrId Record, or `id` of record to return the index of.\n     * @param {Boolean} [visibleRecords] Pass `true` to find the visible index.\n     * as opposed to the dataset index. This omits group header records.\n     * @param {Boolean} [allExceptFilteredOutRecords] For trees, when true this searches all except filtered out records\n     * in the flattened tree, similar to a flat store.\n     * @returns {Number} Index for the record/id, or `-1` if not found.\n     * @category Records\n     */\n    indexOf(recordOrId, visibleRecords = false, allExceptFilteredOutRecords = false) {\n        // Only check records actually in the store ($store is for objectify scenario)\n        if (recordOrId?.isModel && !recordOrId.stores.includes(this.$store || this)) {\n            // When asking for a record that has links, we resolve first link if original is not found.\n            // This allows finding index for links using relations to original records (dep -> event for example)\n            const linkedRecord = recordOrId.$links.find(r => this.storage.allValues.includes(r));\n            if (linkedRecord) {\n                return this.indexOf(linkedRecord, visibleRecords);\n            }\n\n            return -1;\n        }\n\n        // When a tree, indexOf is always in the visible records - filtering is different in trees.\n        if (this.isTree) {\n            // Cheaper than this.storage.indexOf() which takes a detour to result in the same call\n            return (allExceptFilteredOutRecords ? this.rootNode.allChildren : this.storage.values).indexOf(this.getById(recordOrId));\n        }\n\n        const id = Model.asId(recordOrId);\n\n        if (id == null) {\n            return -1;\n        }\n\n        const found = this.idMap[id];\n\n        return found ? found[visibleRecords ? 'visibleIndex' : 'index'] : -1;\n    }\n\n    allIndexOf(recordOrId) {\n        if (this.isTree) {\n            const record = this.getById(recordOrId);\n            let result   = -1;\n\n            // Use the tree structure to get the index in tree walk order\n            if (record) {\n                record.bubble(n => {\n                    if (n.parent) {\n                        result += n.parentIndex + 1;\n                    }\n                    else if (n === this.rootNode && this.rootVisible) {\n                        result += 1;\n                    }\n                });\n            }\n            return result;\n        }\n        else {\n            return this.storage.indexOf(recordOrId, true);\n        }\n    }\n\n    //endregion\n\n    //region Get values\n\n    /**\n     * Returns an array of distinct values for the specified field.\n     *\n     * ```javascript\n     * store.getDistinctValues('age'); // Returns an array of the unique age values\n     * ```\n     *\n     * @param {String} field Field to extract values for\n     * @param {Boolean} [searchAllRecords] True to ignore any applied filters\n     * @returns {Array} Array of values\n     * @category Values\n     */\n    getDistinctValues(field, searchAllRecords = false) {\n        const\n            me     = this,\n            values = [],\n            keys   = {};\n        let value;\n\n        me.forEach(r => {\n            if (!r.isSpecialRow && !r.isRoot) {\n                value                = r.get(field);\n                const primitiveValue = value instanceof Date ? value.getTime() : value;\n\n                if (!keys[primitiveValue]) {\n                    values.push(value);\n                    keys[primitiveValue] = 1;\n                }\n            }\n        }, me, searchAllRecords);\n\n        return values;\n    }\n\n    /**\n     * Counts how many times the specified value appears in the store\n     * @param {String} field Field to look in\n     * @param {*} value Value to look for\n     * @returns {Number} Found count\n     * @category Values\n     */\n    getValueCount(field, value) {\n        let count = 0;\n\n        this.forEach(r => {\n            if (ObjectHelper.isEqual(r.get(field), value)) count++;\n        });\n\n        return count;\n    }\n\n    //endregion\n\n    //region JSON & console\n\n    /**\n     * Retrieve or set the data of all records as a JSON string\n     *\n     * ```javascript\n     * const store = new Store({\n     *     data : [\n     *         { id : 1, name : 'Superman' },\n     *         { id : 2, name : 'Batman' }\n     *     ]\n     * });\n     *\n     * const jsonString = store.json;\n     *\n     * //jsonString:\n     * '[{\"id\":1,\"name\":\"Superman\"},{\"id\":2,\"name\":\"Batman\"}]\n     * ```\n     *\n     * @property {String}\n     */\n    set json(json) {\n        if (typeof json === 'string') {\n            json = StringHelper.safeJsonParse(json);\n        }\n\n        this.data = json;\n    }\n\n    get json() {\n        return StringHelper.safeJsonStringify(this);\n    }\n\n    /**\n     * Pretty printed version of {@link #property-json}\n     * @readonly\n     * @property {String}\n     */\n    get formattedJSON() {\n        return StringHelper.safeJsonStringify(this, null, 4);\n    }\n\n    /**\n     * Retrieve the data of all (unfiltered) records as an array of JSON objects.\n     *\n     * ```javascript\n     * const store = new Store({\n     *     data : [\n     *         { id : 1, name : 'Superman' },\n     *         { id : 2, name : 'Batman' }\n     *     ]\n     * });\n     *\n     * const jsonArray = store.toJSON();\n     *\n     * //jsonArray:\n     * [{id:1,name:\"Superman\"},{id:2,name:\"Batman\"}]\n     * ```\n     *\n     * @returns {Object[]}\n     */\n    toJSON() {\n        // extract entire structure.\n        // If we're a tree, then that consists of the payload of the rootNode.\n        return (this.isTree ? this.rootNode.unfilteredChildren || this.rootNode.children || [] : this.allRecords).map(record => record.toJSON());\n    }\n\n    //<debug>\n\n    showJSON() {\n        globalThis.open().document.body.innerHTML = `<pre>${StringHelper.safeJsonStringify(this, null, 2)}</pre>`;\n    }\n\n    downloadJSON(filename) {\n        BrowserHelper.download(`${filename || this.id || 'store'}.json`, 'data:text/csv;charset=utf-8,' + escape(this.json));\n    }\n\n    toTable() {\n        console.table(this.records.map(r => r.data));\n    }\n\n    //</debug>\n\n    //endregion\n\n    //region Extract config\n\n    // These functions are not meant to be called by any code other than Base#getCurrentConfig()\n\n    preProcessCurrentConfigs(configs) {\n        super.preProcessCurrentConfigs(configs);\n\n        delete configs.project;\n    }\n\n    // Extract current data for all accessible records\n    getInlineData(options) {\n        const data = [];\n\n        if (this.tree) {\n            this.rootNode.children?.forEach(r => data.push(r.getCurrentConfig(options)));\n        }\n        else {\n            this.forEach(r => data.push(r.getCurrentConfig(options)));\n        }\n\n        return data;\n    }\n\n    // Extract current configs and data\n    getCurrentConfig(options) {\n        const\n            result    = super.getCurrentConfig(options),\n            { state } = this;\n\n        if (result) {\n\n            // Replace initial data with values from current records\n            if (result.data) {\n                result.data = this.getInlineData(options);\n            }\n\n            // Never include project or stm\n            delete result.project;\n            delete result.stm;\n            delete result.asyncEvents;\n\n            // Exclude default modelClass, gets added to config by engine, spam\n            if (result.modelClass?.$meta.hierarchy[result.modelClass.$meta.hierarchy.length - 2] === this.constructor.defaultConfig.modelClass) {\n                delete result.modelClass;\n            }\n\n            // Pollution from grid\n            if (!this.tree) {\n                delete result.tree;\n            }\n\n            // Include current state\n            if (state) {\n                Object.assign(result, state);\n            }\n        }\n\n        return result;\n    }\n\n    //endregion\n\n    //region Iteration & traversing\n\n    /**\n     * Iterates over all normal records in store. Omits group header and footer records if this store is grouped.\n     * @param {Function} fn A function that is called for each record. Returning `false` from that function cancels\n     * iteration. It is called with the following arguments:\n     * @param {Core.data.Model} fn.record Current record\n     * @param {Number} fn.index Current index\n     * @param {Object} [thisObj] `this` reference for the function\n     * @param {Object|Boolean} [options] A boolean for `includeFilteredOutRecords`, or detailed options for\n     * exclude/include records\n     * @param {Boolean} [options.includeFilteredOutRecords] `true` to also include filtered out records\n     * @param {Boolean} [options.includeCollapsedGroupRecords] `true` to also include records from collapsed groups of\n     * grouped store\n     * @category Iteration\n     */\n    forEach(fn, thisObj = this, options) {\n        const\n            me       = this,\n            callback = (r, i) => {\n                if (!r.isRoot && !r.isSpecialRow) {\n                    return fn.call(thisObj, r, i);\n                }\n            };\n\n        options = fixTraverseOptions(me, options);\n\n        if (me.isTree) {\n            // forEach uses traverse() but is not perceived as a tree walk, so we want to apply our sorter\n            if (me.isChained) {\n                options = {\n                    ...options,\n                    sorterFn : me.sorterFn\n                };\n            }\n\n            me.rootNode.traverseWhile(callback, false, options);\n        }\n        else {\n            // native forEach cannot be aborted by returning false, have to loop \"manually\"\n            const records = options.includeFilteredOutRecords ? me.storage.allValues : me.storage.values;\n\n            // grouped store has own tree-like structure, but cannot be handled like a regular tree\n            if (me.isGrouped && options.includeCollapsedGroupRecords) {\n                for (let i = 0; i < records.length; i++) {\n                    const record = records[i];\n\n                    if (record.groupChildren && record.meta.collapsed === true) {\n                        for (let j = 0; j < record.groupChildren.length; j++) {\n                            const rec = record.groupChildren[j];\n\n                            if (callback(rec, j) === false) {\n                                return;\n                            }\n                        }\n                    }\n                    else if (callback(record, i) === false) {\n                        return;\n                    }\n                }\n            }\n            else {\n                for (let i = 0; i < records.length; i++) {\n                    if (callback(records[i], i) === false) {\n                        return;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Equivalent to Array.map(). Creates a new array with the results of calling a provided function on every record\n     * @param {Function} fn\n     * @returns {Array}\n     * @category Iteration\n     */\n    map(fn, thisObj = this) {\n        return this.storage.values.map(fn, thisObj);\n    }\n\n    /**\n     * Equivalent to Array.every(). Returns `true` if every call of the provided function\n     * on each record yields a truthy value.\n     * @param {Function} fn\n     * @param {Function} fn.record The record to test.\n     * @param {Object} [thisObj] The `this` reference to call the function with. Defaults to this Store.\n     * @param {Boolean} [ignoreFilters] Pass `true` to iterate all records including filtered out ones.\n     * @returns {Array}\n     * @category Iteration\n     */\n    every(fn, thisObj = this, ignoreFilters) {\n        return this.storage[ignoreFilters ? 'allValues' : 'values'].every(fn, thisObj);\n    }\n\n    /**\n     * Equivalent to Array.reduce(). Applies a function against an accumulator and each record (from left to right) to\n     * reduce it to a single value.\n     * @param {Function} fn\n     * @param {*} initialValue\n     * @returns {*}\n     * @category Iteration\n     */\n    reduce(fn, initialValue = [], thisObj = this) {\n        if (thisObj !== this) {\n            fn = fn.bind(thisObj);\n        }\n\n        return this.storage.values.reduce(fn, initialValue, thisObj);\n    }\n\n    /**\n     * Iterator that allows you to do for (let record of store)\n     * @category Iteration\n     */\n    [Symbol.iterator]() {\n        return this.storage.values[Symbol.iterator]();\n    }\n\n    /**\n     * Traverse all tree nodes (only applicable for Tree Store)\n     * @param {Function} fn The function to call on visiting each node.\n     * @param {Core.data.Model} [topNode=this.rootNode] The top node to start the traverse at.\n     * @param {Boolean} [skipTopNode] Pass true to not call `fn` on the top node, but proceed directly to its children.\n     * @param {Object|Boolean} [options] A boolean for includeFilteredOutRecords, or detailed options for exclude/include records\n     * @param {Boolean} [options.includeFilteredOutRecords] True to also include filtered out records\n     * @param {Boolean} [options.includeCollapsedGroupRecords] True to also include records from collapsed groups of grouped store\n     * @param {Boolean} [options.useOrderedTree] True to traverse unsorted/unfiltered tree\n     * @category Traverse\n     */\n    traverse(fn, topNode = this.rootNode, skipTopNode = topNode === this.rootNode, options) {\n        const me = this;\n\n        options = fixTraverseOptions(me, options);\n\n        if (me.isTree) {\n            // Allow store.traverse(fn, true) to start from rootNode\n            if (typeof topNode === 'boolean') {\n                skipTopNode = topNode;\n                topNode     = me.rootNode;\n            }\n\n            if (me.isChained) {\n                const passedFn = fn;\n\n                fn = node => {\n                    if (me.chainedFilterFn(node)) {\n                        passedFn(node);\n                    }\n                };\n            }\n\n            topNode.traverse(fn, skipTopNode, options);\n        }\n        else {\n            me.forEach(rec => rec.traverse(fn, false, options), me, options);\n        }\n    }\n\n    /**\n     * Traverse all tree nodes while the passed `fn` returns true\n     * @param {Function} fn The function to call on visiting each node. Returning `false` from it stops the traverse.\n     * @param {Core.data.Model} [topNode=this.rootNode] The top node to start the traverse at.\n     * @param {Boolean} [skipTopNode] Pass true to not call `fn` on the top node, but proceed directly to its children.\n     * @param {Object} [options] An options object to exclude/include records\n     * @param {Boolean} [options.includeFilteredOutRecords] True to also include filtered out records\n     * @param {Boolean} [options.includeCollapsedGroupRecords] True to also include records from collapsed groups of grouped store\n     * @category Traverse\n     */\n    traverseWhile(fn, topNode = this.rootNode, skipTopNode = topNode === this.rootNode, options) {\n        const me = this;\n\n        options = fixTraverseOptions(me, options);\n\n        if (me.isTree) {\n            // Allow store.traverse(fn, true) to start from rootNode\n            if (typeof topNode === 'boolean') {\n                skipTopNode = topNode;\n                topNode     = me.rootNode;\n            }\n\n            if (me.isChained) {\n                const passedFn = fn;\n\n                fn = node => {\n                    if (me.chainedFilterFn(node)) {\n                        passedFn(node);\n                    }\n                };\n            }\n\n            topNode.traverseWhile(fn, skipTopNode, options);\n        }\n        else {\n            for (const record of me.storage) {\n                if (record.traverse(fn, false, options) === false) {\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * Finds the next record.\n     * @param {Core.data.Model|String|Number} recordOrId Current record or its id\n     * @param {Boolean} [wrap=false] Wrap at start/end or stop there\n     * @param {Boolean} [skipSpecialRows=false] True to not return specialRows like group headers\n     * @returns {Core.data.Model} Next record or null if current is the last one\n     * @category Traverse\n     */\n    getNext(recordOrId, wrap = false, skipSpecialRows = false) {\n        const\n            me      = this,\n            records = me.storage.values;\n        let idx     = me.indexOf(recordOrId);\n\n        if (idx >= records.length - 1) {\n            if (wrap) {\n                idx = -1;\n            }\n            else {\n                return null;\n            }\n        }\n\n        const record = records[idx + 1];\n\n        // Skip the result if it's a specialRow and we are told to skip them\n        if (skipSpecialRows && record && record.isSpecialRow) {\n            return me.getNext(records[idx + 1], wrap, true);\n        }\n\n        return record;\n    }\n\n    /**\n     * Finds the previous record.\n     * @param {Core.data.Model|String|Number} recordOrId Current record or its id\n     * @param {Boolean} [wrap=false] Wrap at start/end or stop there\n     * @param {Boolean} [skipSpecialRows=false] True to not return specialRows like group headers\n     * @returns {Core.data.Model} Previous record or null if current is the last one\n     * @category Traverse\n     */\n    getPrev(recordOrId, wrap = false, skipSpecialRows = false) {\n        const\n            me      = this,\n            records = me.storage.values;\n        let idx     = me.indexOf(recordOrId);\n\n        if (idx === 0) {\n            if (wrap) {\n                idx = records.length;\n            }\n            else {\n                return null;\n            }\n        }\n\n        const record = records[idx - 1];\n\n        // Skip the result if it's a specialRow and we are told to skip them\n        if (skipSpecialRows && record && record.isSpecialRow && idx > 0) {\n            return me.getPrev(records[idx - 1], wrap, true);\n        }\n\n        return record;\n    }\n\n    /**\n     * Gets the next or the previous record. Optionally wraps from first -> last and vice versa\n     * @param {String|Core.data.Model} recordOrId Record or records id\n     * @param {Boolean} next Next (true) or previous (false)\n     * @param {Boolean} wrap Wrap at start/end or stop there\n     * @param {Boolean} [skipSpecialRows=false] True to not return specialRows like group headers\n     * @returns {Core.data.Model}\n     * @category Traverse\n     * @internal\n     */\n    getAdjacent(recordOrId, next = true, wrap = false, skipSpecialRows = false) {\n        return next ? this.getNext(recordOrId, wrap, skipSpecialRows) : this.getPrev(recordOrId, wrap, skipSpecialRows);\n    }\n\n    /**\n     * Finds the next record among leaves (in a tree structure)\n     * @param {Core.data.Model|String|Number} recordOrId Current record or its id\n     * @param {Boolean} [wrap] Wrap at start/end or stop there\n     * @returns {Core.data.Model} Next record or null if current is the last one\n     * @category Traverse\n     * @internal\n     */\n    getNextLeaf(recordOrId, wrap = false) {\n        const\n            me      = this,\n            records = me.leaves,\n            record  = me.getById(recordOrId);\n        let idx     = records.indexOf(record);\n\n        if (idx >= records.length - 1) {\n            if (wrap) {\n                idx = -1;\n            }\n            else {\n                return null;\n            }\n        }\n\n        return records[idx + 1];\n    }\n\n    /**\n     * Finds the previous record among leaves (in a tree structure)\n     * @param {Core.data.Model|String|Number} recordOrId Current record or its id\n     * @param {Boolean} [wrap] Wrap at start/end or stop there\n     * @returns {Core.data.Model} Previous record or null if current is the last one\n     * @category Traverse\n     * @internal\n     */\n    getPrevLeaf(recordOrId, wrap = false) {\n        const\n            me      = this,\n            records = me.leaves,\n            record  = me.getById(recordOrId);\n        let idx     = records.indexOf(record);\n\n        if (idx === 0) {\n            if (wrap) {\n                idx = records.length;\n            }\n            else {\n                return null;\n            }\n        }\n\n        return records[idx - 1];\n    }\n\n    /**\n     * Gets the next or the previous record among leaves (in a tree structure). Optionally wraps from first -> last and\n     * vice versa\n     * @param {String|Core.data.Model} recordOrId Record or record id\n     * @param {Boolean} [next] Next (true) or previous (false)\n     * @param {Boolean} [wrap] Wrap at start/end or stop there\n     * @returns {Core.data.Model}\n     * @category Traverse\n     * @internal\n     */\n    getAdjacentLeaf(recordOrId, next = true, wrap = false) {\n        return next ? this.getNextLeaf(recordOrId, wrap) : this.getPrevLeaf(recordOrId, wrap);\n    }\n\n    //endregion\n}\n\nStore.initClass();\n","import Store from './Store.js';\nimport AjaxHelper from '../helper/AjaxHelper.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\n\n/**\n * @module Core/data/AjaxStore\n */\n\n/**\n * Http methods used by the AjaxStore in restful mode.\n * @typedef {Object} HttpMethods\n * @property {'POST'|'PUT'} create\n * @property {'GET'|'POST'} read\n * @property {'PATCH'|'POST'|'PUT'} update\n * @property {'DELETE'|'POST'} delete\n */\n\nconst\n    processParamEntry = (paramArray, entry) => {\n        if (Array.isArray(entry[1])) {\n            entry[1].forEach(value => paramArray.push(encodeURIComponent(entry[0]) + '=' + encodeURIComponent(value)));\n        }\n        else {\n            paramArray.push(encodeURIComponent(entry[0]) + '=' + encodeURIComponent(entry[1]));\n        }\n\n        return paramArray;\n    },\n    immediatePromise  = Promise.resolve(),\n    prependZeros = num => {\n        return String(num).padStart(2, '0');\n    },\n    dateToString = date => {\n        return `${ date.getFullYear() }-${ prependZeros(date.getMonth() + 1) }-${ prependZeros(date.getDate()) }T${ prependZeros(date.getHours()) }:${ prependZeros(date.getMinutes()) }:${ prependZeros(date.getSeconds()) }.${ date.getMilliseconds() }`;\n    };\n\n/**\n * Store that uses the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch) to read data\n * from a remote server, and optionally sends synchronization requests to the server containing information about\n * locally created, modified and deleted records.\n *\n * ## Create\n * Posts array of JSON data for newly added records to {@link #config-createUrl}, expects response containing an array\n * of JSON objects in same order with id set (uses Model#idField as id).\n *\n * ## Read\n * Reads array of JSON data from the data packet returned from the {@link #config-readUrl}. Unique id for each row is\n * required.\n *\n * By default looks in field 'id' but can be configured by setting {@link Core.data.Model#property-idField-static}.\n *\n * ## Update\n * Posts array of JSON data containing modified records to {@link #config-updateUrl}. By default, only changed fields\n * and any fields configured with {@link Core.data.field.DataField#config-alwaysWrite} are sent.\n * If you want all fields to always be sent, please see {@link #config-writeAllFields}\n *\n * ## Delete\n * Posts to {@link #config-deleteUrl} with removed records ids (for example id=1,4,7).\n *\n * ```javascript\n * new AjaxStore({\n *   createUrl  : 'php/create',\n *   readUrl    : 'php/read',\n *   updateUrl  : 'php/update',\n *   deleteUrl  : 'php/delete',\n *   modelClass : Customer\n * });\n * ```\n *\n * ## Pagination\n * Configuring an `AjaxStore` with {@link #config-pageParamName} or {@link #config-pageStartParamName} means that the\n * store requests **pages** of data from the remote source, sending the configured {@link #config-pageParamName} or\n * {@link #config-pageStartParamName} to request the page along with the {@link #config-pageSizeParamName}.\n *\n * If `pageParamName` is set, that is passed with the requested page number **(one based)**, along with the\n * {@link #config-pageSizeParamName}.\n *\n * If `pageStartParamName` is set, that is passed with the requested page starting record index **(zero based)**, along\n * with the {@link #config-pageSizeParamName}.\n *\n * ## Remote filtering\n * To specify that filtering is the responsibility of the server, configure the store with\n * `{@link #config-filterParamName}: 'nameOfFilterParameter'`\n *\n * When this is set, any {@link Core.data.mixin.StoreFilter#function-filter} operation causes the store to reload\n * itself, encoding the filters as JSON representations in the {@link #config-filterParamName} HTTP parameter.\n *\n * The filters will look like this:\n * ```javascript\n * {\n *     \"field\": \"country\",\n *     \"operator\": \"=\",\n *     \"value\": \"sweden\",\n *     \"caseSensitive\": false\n * }\n * ```\n *\n * If the value of the filter is a date - it is serialized as a local time, using the format: `YYYY-MM-DDThh:mm:ss.ms`\n *\n * The encoding may be overridden by configuring an implementation of {@link #function-encodeFilterParams}\n * into the store which returns the value for the {@link #config-filterParamName} when passed an _Iterable_ of filters.\n *\n * ## Remote sorting\n * To specify that sorting is the responsibility of the server, configure the store with\n * `{@link #config-sortParamName}: 'nameOfSortParameter'`\n *\n * When this is set, any {@link Core.data.mixin.StoreSort#function-sort} operation causes the store to\n * reload itself, encoding the sorters as JSON representations in the {@link #config-sortParamName} HTTP\n * parameter.\n *\n * The sorters will look like this:\n * ```javascript\n * {\n *     \"field\": \"name\",\n *     \"ascending\": true\n * }\n * ```\n *\n * The encoding may be overridden by configuring an implementation of {@link #function-encodeSorterParams}\n * into the store which returns the value for the {@link #config-sortParamName} when passed an _Iterable_ of sorters.\n *\n * ## Passing HTTP headers\n * As mentioned above `AjaxStore` uses the Fetch API under the hood. Specify {@link #config-fetchOptions} and/or\n * {@link #config-headers} to have control over the options passed with all fetch calls. For example to pass along an\n * authorization header:\n *\n * ```javascript\n * const store = new AjaxStore({\n *    headers : {\n *        Authorization : 'auth-contents-goes-here'\n *    }\n * });\n * ```\n *\n * Learn more about the Fetch API over at [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch).\n *\n * @extends Core/data/Store\n */\nexport default class AjaxStore extends Store {\n\n    static $name = 'AjaxStore';\n\n    // region Events\n\n    /**\n     * Fired when a remote request fails, either at the network level, or the server returns a failure, or an invalid\n     * response.\n     *\n     * Note that when a {@link #function-commit} fails, more than one exception event will be triggered. The individual\n     * operation, `create`, `update` or `delete` will trigger their own `exception` event, but the encapsulating commit\n     * operation will also trigger an `exception` event when all the operations have finished, so if exceptions are\n     * going to be handled gracefully, the event's `action` property must be examined, and the constituent operations of\n     * the event must be examined.\n     * @event exception\n     * @param {Core.data.Store} source This Store\n     * @param {Boolean} exception `true`\n     * @param {'create'|'read'|'update'|'delete'|'commit'} action Action that failed, `'create'`, `'read'`,\n     * `'update'` or `'delete'`. May also be fired with '`commit'` to indicate the failure of an aggregated `create`,\n     * `update` and `delete` operation. In this case, the event will contain a property for each operation of the commit\n     * named `'create'`, `'update'` and `'delete'`, each containing the individual `exception` events.\n     * @param {'network'|'failure'} exceptionType The type of failure, `'network'` or `'server'`\n     * @param {Response} response the `Response` object\n     * @param {Object} json The decoded response object *if the exceptionType is `'server'`*\n     */\n\n    /**\n     * Fired after committing added records\n     * @event commitAdded\n     * @param {Core.data.Store} source This Store\n     */\n\n    /**\n     * Fired after committing modified records\n     * @event commitModified\n     * @param {Core.data.Store} source This Store\n     */\n\n    /**\n     * Fired on successful load\n     * @event load\n     * @param {Core.data.Store} source This Store\n     * @param {Object[]} data Data loaded\n     * @param {Response} response the `Response` object\n     * @param {Object} json The decoded response object.\n     */\n\n    /**\n     * Fired on successful load of remote child nodes for a tree node.\n     * @event loadChildren\n     * @param {Core.data.Store} source This Store\n     * @param {Object[]} data Data loaded\n     * @param {Object} json The decoded response object.\n     */\n\n    /**\n     * Fired after committing removed records\n     * @event commitRemoved\n     * @param {Core.data.Store} source This Store\n     */\n\n    /**\n     * Fired before loading starts. Allows altering parameters and is cancelable\n     * @event beforeLoad\n     * @preventable\n     * @param {Core.data.Store} source This Store\n     * @param {Object} params An object containing property/name pairs which are the parameters.\n     * This may be mutated to affect the parameters used in the Ajax request.\n     */\n\n    /**\n     * Fired before loading of remote child nodes of a tree node starts. Allows altering parameters and is cancelable\n     * @event beforeLoadChildren\n     * @preventable\n     * @param {Core.data.Store} source This Store\n     * @param {Object} params An object containing property/name pairs which are the parameters.\n     * This may be mutated to affect the parameters used in the Ajax request.\n     */\n\n    /**\n     * When the store {@link #property-isPaged is paged}, this is fired before loading a page and is cancelable\n     * @event beforeLoadPage\n     * @preventable\n     * @param {Core.data.Store} source This Store\n     * @param {Object} params An object containing property/name pairs which are the parameters.\n     * This may be mutated to affect the parameters used in the Ajax request.\n     */\n\n    /**\n     * Fired when loading is beginning. This is not cancelable. Parameters in the event may still be\n     * mutated at this stage.\n     * @event loadStart\n     * @param {Core.data.Store} source This Store\n     * @param {Object} params An object containing property/name pairs which are the parameters.\n     * This may be mutated to affect the parameters used in the Ajax request.\n     */\n\n    /**\n     * Fired when loading of remote child nodes into a tree node is beginning. This is not cancelable. Parameters in the\n     * event may still be mutated at this stage.\n     * @event loadChildrenStart\n     * @param {Core.data.Store} source This Store\n     * @param {Object} params An object containing property/name pairs which are the parameters.\n     * This may be mutated to affect the parameters used in the Ajax request.\n     */\n\n    /**\n     * Fired before any remote request is initiated.\n     * @event beforeRequest\n     * @param {Core.data.Store} source This Store\n     * @param {Object} params An object containing key/value pairs that are passed on the request query string\n     * @param {Object} body The body of the request to be posted to the server.\n     * @param {'create'|'read'|'update'|'delete'} action Action that is making the request, `'create'`,\n     * `'read'`, `'update'` or `'delete'`\n     */\n\n    /**\n     * Fired after any remote request has finished whether successfully or unsuccessfully.\n     * @event afterRequest\n     * @param {Boolean} exception `true`. *Only present if the request triggered an exception.*\n     * @param {'create'|'read'|'update'|'delete'} action Action that has finished, `'create'`, `'read'`,\n     * `'update'` or `'delete'`\n     * @param {'network'|'failure'} exceptionType The type of failure, `'network'` or `'server'`. *Only present\n     * if the request triggered an exception.*\n     * @param {Response} response The `Response` object\n     * @param {Object} json The decoded response object if there was no `'network'` exception.\n     */\n\n    // endregion\n\n    //region Config\n\n    static get defaultConfig() {\n        return {\n            /**\n             * A string keyed object containing the HTTP headers to add to each server request issued by this store.\n             *\n             * `AjaxStore` uses the Fetch API under the hood, read more about headers on\n             * [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#headers)\n             *\n             * Example usage:\n             *\n             * ```javascript\n             * const store = new AjaxStore({\n             *    headers : {\n             *        Authorization : 'auth-contents-goes-here'\n             *    }\n             * });\n             * ```\n             *\n             * @config {Object<String,String>}\n             * @category Remote\n             */\n            headers : null,\n\n            /**\n             * An object containing the Fetch options to pass to each server request issued by this store. Use this to\n             * control if credentials are sent and other options, read more at\n             * [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_request_options).\n             *\n             * Example usage:\n             *\n             * ```javascript\n             * const store = new AjaxStore({\n             *    fetchOptions : {\n             *        credentials : 'omit',\n             *        redirect    : 'error'\n             *    }\n             * });\n             * ```\n             *\n             * @config {Object}\n             * @category Remote\n             */\n            fetchOptions : null,\n\n            /**\n             * Specify `true` to send payloads as form data, `false` to send as regular JSON.\n             * @config {Boolean}\n             * @default false\n             * @category Remote\n             */\n            sendAsFormData : null,\n\n            /**\n             * Specify `true` to send all model fields when committing modified records (as opposed to just the\n             * modified fields)\n             * @config {Boolean}\n             * @default false\n             * @category Remote\n             */\n            writeAllFields : null,\n\n            /**\n             * The name of the HTTP parameter passed to this Store's {@link #config-readUrl} to indicate the node `id`\n             * to load when loading child nodes on demand if the node being expanded was created with data containing\n             * `children: true`.\n             * @config {String}\n             * @default\n             * @category Remote\n             */\n            parentIdParamName : 'id',\n\n            /**\n             * The optional property name in JSON responses from the server that contains a boolean\n             * success/fail status.\n             * ```json\n             * {\n             *   \"responseMeta\" : {\n             *   {\n             *     \"success\" : true,\n             *     \"count\" : 100\n             *   },\n             *   // The property name used here should match that of 'responseDataProperty'\n             *   \"data\" : [\n             *     ...\n             *   ]\n             * }\n             * ```\n             *\n             * The store would be configured with:\n             * ```javascript\n             *  {\n             *      ...\n             *      successDataProperty : 'responseMeta.success',\n             *      responseTotalProperty : 'responseMeta.count'\n             *      ...\n             *  }\n             *\n             * ```\n             * @config {String}\n             * @default\n             * @category Remote\n             */\n            responseSuccessProperty : 'success',\n\n            /**\n             * The property name in JSON responses from the server that contains the data for the records\n             * ```json\n             * {\n             *   \"success\" : true,\n             *   // The property name used here should match that of 'responseDataProperty'\n             *   \"data\" : [\n             *     ...\n             *   ]\n             * }\n             * ```\n             * @config {String}\n             * @default\n             * @category Remote\n             */\n            responseDataProperty : 'data',\n\n            /**\n             * The property name in JSON responses from the server that contains the dataset total size\n             * **when this store {@link #property-isPaged is paged}**\n             * ```json\n             * {\n             *   \"success\" : true,\n             *   // The property name used here should match that of 'responseDataProperty'\n             *   \"data\" : [\n             *     ...\n             *   ],\n             *   // The property name used here should match that of 'responseTotalProperty'\n             *   \"total\" : 65535\n             * }\n             * ```\n             * @config {String}\n             * @default\n             * @category Remote\n             */\n            responseTotalProperty : 'total',\n\n            /**\n             * The name of the HTTP parameter to use to pass any encoded filters when loading data from the server and a\n             * filtered response is required.\n             *\n             * **Note:** When this is set, filters must be defined using a field name, an operator and a value\n             * to compare, **not** a comparison function.\n             * @config {String}\n             * @category Remote\n             */\n            filterParamName : null,\n\n            /**\n             * Set this flag to true if you are filtering remote using restful URLs (e.g.\n             * https://nominatim.openstreetmap.org/search/paris?format=json)\n             *\n             * **Note:** When this is set, the filter string is appended to the readUrl.\n             * @config {Boolean}\n             * @category Remote\n             */\n            restfulFilter : false,\n\n            /**\n             * The name of the HTTP parameter to use to pass any encoded sorters when loading data from the server and a\n             * sorted response is required.\n             *\n             * **Note:** When this is set, sorters must be defined using a field name and an ascending flag,\n             * **not** a sort function.\n             * @config {String}\n             * @category Remote\n             */\n            sortParamName : null,\n\n            /**\n             * The name of the HTTP parameter to use when requesting pages of data using the **one based** page number\n             * required.\n             * @config {String}\n             * @category Paging\n             */\n            pageParamName : null,\n\n            /**\n             * The name of the HTTP parameter to use when requesting pages of data using the **zero based** index of the\n             * required page's starting record.\n             * @config {String}\n             * @category Paging\n             */\n            pageStartParamName : null,\n\n            /**\n             * The name of the HTTP parameter to use when requesting pages of data using the **zero based** index of the\n             * required page's starting record.\n             * @config {String}\n             * @default\n             * @category Paging\n             */\n            pageSizeParamName : 'pageSize',\n\n            /**\n             * When paging of data is requested by setting _either_ the {@link #config-pageParamName} _or_ the\n             * {@link #config-pageStartParamName}, this is the value to send in the {@link #config-pageSizeParamName}.\n             * @config {Number}\n             * @default\n             * @category Paging\n             */\n            pageSize : 50,\n\n            /**\n             * Set to ´true´ to use restful {@link #config-httpMethods}\n             * @config {Boolean}\n             * @default false\n             * @category Remote\n             */\n            useRestfulMethods : null,\n\n            /**\n             * The HTTP methods to use for CRUD requests when {@link #config-useRestfulMethods} is enabled.\n             *\n             * ```javascript\n             * new AjaxStore({\n             *    useRestfulMethods : true,\n             *    httpMethods : {\n             *        create : 'POST',\n             *        read   : 'POST',\n             *        update : 'PATCH',\n             *        delete : 'DELETE'\n             *    }\n             * });\n             *\n             * ```\n             * @config {HttpMethods}\n             * @default\n             * @category Remote\n             */\n            httpMethods : {\n                create : 'POST',\n                read   : 'GET',\n                update : 'PUT',\n                delete : 'DELETE'\n            }\n        };\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * An object containing key/value pairs that are passed on the request query string.\n             * @member {Object} params\n             * @category Remote\n             */\n            /**\n             * An object containing key/value pairs that are passed on the request query string.\n             * @config {Object}\n             * @category Remote\n             */\n            params : null\n        };\n    }\n\n    /**\n     * Url to post newly created records to.\n     *\n     * The response must be in the form:\n     *\n     *     {\n     *         \"success\": true,\n     *         \"data\": [{\n     *             \"id\": 0, \"name\": \"General Motors\"\n     *         }, {\n     *             \"id\": 1, \"name\": \"Apple\"\n     *         }]\n     *     }\n     *\n     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the\n     * server.\n     *\n     * If the server encountered an error, the packet would look like this:\n     *\n     *     {\n     *         \"success\": false,\n     *         \"message\": \"Some kind of database error\"\n     *     }\n     *\n     * And that packet would be available in the {@link #event-exception} handler in the `response` property of the\n     * event.\n     *\n     * The `success` property may be omitted, it defaults to `true`.\n     *\n     * @prp {String} createUrl\n     * @category CRUD\n     */\n\n    /**\n     * Url to read data from.\n     *\n     * The response must be in the form:\n     *\n     *     {\n     *         \"success\": true,\n     *         \"data\": [{\n     *             \"id\": 0, \"name\": \"General Motors\"\n     *         }, {\n     *             \"id\": 1, \"name\": \"Apple\"\n     *         }]\n     *     }\n     *\n     * If the store {@link #property-isPaged is paged}, the total dataset size must be returned in the\n     * {@link #config-responseTotalProperty} property:\n     *\n     *     {\n     *         \"success\": true,\n     *         \"data\": [{\n     *             \"id\": 0, \"name\": \"General Motors\"\n     *         }, {\n     *             \"id\": 1, \"name\": \"Apple\"\n     *         }],\n     *         \"total\": 65535\n     *     }\n     *\n     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the\n     * server.\n     *\n     * If the server encountered an error, the packet would look like this:\n     *\n     *     {\n     *         \"success\": false,\n     *         \"message\": \"Some kind of database error\"\n     *     }\n     *\n     * And that packet would be available in the {@link #event-exception} handler in the `response` property of the\n     * event.\n     *\n     * The `success` property may be omitted, it defaults to `true`.\n     *\n     * @prp {String} readUrl\n     * @category CRUD\n     */\n\n    /**\n     * Url to post record modifications to.\n     *\n     * The response must be in the form:\n     *\n     *     {\n     *         \"success\": true,\n     *         \"data\": [{\n     *             \"id\": 0, \"name\": \"General Motors\"\n     *         }, {\n     *             \"id\": 1, \"name\": \"Apple\"\n     *         }]\n     *     }\n     *\n     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the\n     * server.\n     *\n     * If the server encountered an error, the packet would look like this:\n     *\n     *     {\n     *         \"success\": false,\n     *         \"message\": \"Some kind of database error\"\n     *     }\n     *\n     * And that packet would be available in the {@link #event-exception} handler in the `response` property of the\n     * event.\n     *\n     * The `success` property may be omitted, it defaults to `true`.\n     *\n     * @prp {String} updateUrl\n     * @category CRUD\n     */\n\n    /**\n     * Url for deleting records.\n     *\n     * The response must be in the form:\n     *\n     *     {\n     *         \"success\": true\n     *     }\n     *\n     * If the server encountered an error, the packet would look like this:\n     *\n     *     {\n     *         \"success\": false,\n     *         \"message\": \"Some kind of database error\"\n     *     }\n     *\n     * And that packet would be available in the {@link #event-exception} handler in the `response` property of the\n     * event.\n     *\n     * The `success` property may be omitted, it defaults to `true`.\n     *\n     * @prp {String} deleteUrl\n     * @category CRUD\n     */\n\n    /**\n     * True to initiate a load when the store is instantiated\n     * @config {Boolean} autoLoad\n     * @category Common\n     */\n\n    //endregion\n\n    afterConstruct(config) {\n        super.afterConstruct(config);\n\n        if (this.autoLoad) {\n            this.load().catch(() => {});\n        }\n    }\n\n    /**\n     * Returns a truthy value if the Store is currently loading.\n     *\n     * A load operation is initiated by a load call, but the network request is not sent until\n     * after a delay until the next event loop because of allowing all operations which may\n     * request a load to coalesce into one call.\n     *\n     * If the loading request is in this waiting state, the value will be `1`,\n     *\n     * If the network request is in flight, the value will be `2`\n     * @property {Boolean|Number}\n     * @readonly\n     * @category CRUD\n     */\n    get isLoading() {\n        return this._isLoading ? 2 : this.loadTriggerPromise ? 1 : false;\n    }\n\n    /**\n     * Returns true if the Store is currently committing\n     * @property {Boolean}\n     * @readonly\n     * @category CRUD\n     */\n    get isCommitting() {\n        return Boolean(this.commitPromise);\n    }\n\n    set pageParamName(pageParamName) {\n        if (this.tree) {\n            throw new Error('Paging cannot be supported for tree stores');\n        }\n        if (this.pageStartParamName) {\n            throw new Error('Configs pageStartParamName and pageParamName are mutually exclusive');\n        }\n        this._pageParamName = pageParamName;\n    }\n\n    get pageParamName() {\n        return this._pageParamName;\n    }\n\n    set pageStartParamName(pageStartParamName) {\n        if (this.tree) {\n            throw new Error('Paging cannot be supported for tree stores');\n        }\n        if (this.pageParamName) {\n            throw new Error('Configs pageParamName and pageStartParamName are mutually exclusive');\n        }\n        this._pageStartParamName = pageStartParamName;\n    }\n\n    get pageStartParamName() {\n        return this._pageStartParamName;\n    }\n\n    /**\n     * Yields true if this Store is loaded page by page. This yields `true` if either of the\n     * {@link #config-pageParamName} of {@link #config-pageStartParamName} configs are set.\n     * @property {Boolean}\n     * @readonly\n     * @category Paging\n     */\n    get isPaged() {\n        return this.pageParamName || this.pageStartParamName;\n    }\n\n    /**\n     * Yields the complete dataset size. If the store is {@link #property-isPaged is paged} this is the value\n     * returned in the last loaded data block in the {@link #config-responseTotalProperty} property. Otherwise it is\n     * the number of records in the store's underlying storage collection.\n     * @property {Number}\n     * @readonly\n     * @category Paging\n     */\n    get allCount() {\n        return ('remoteTotal' in this) ? this.remoteTotal : super.allCount;\n    }\n\n    /**\n     * **If the store {@link #property-isPaged is paged}**, yields the highest page number in the dataset as calculated\n     * from the {@link #config-responseTotalProperty}\n     * returned in the last page data block loaded.\n     * @property {Number}\n     * @readonly\n     * @category Paging\n     */\n    get lastPage() {\n        if (this.isPaged) {\n            return Math.floor((this.allCount + this.pageSize - 1) / this.pageSize);\n        }\n    }\n\n    buildQueryString(url, ...paramObjects) {\n        const\n            hasParamsInUrl = url.includes('?'),\n            queryString    = Object.entries(Object.assign({}, ...paramObjects)).reduce(processParamEntry, []).join('&');\n\n        return queryString ? (hasParamsInUrl ? '&' : '?') + queryString : '';\n    }\n\n    /**\n     * Internal sort method.\n     * Should not be used in application code directly.\n     * @param silent\n     * @returns {Promise|null} If {@link Core/data/AjaxStore#config-sortParamName} is set on store, this method returns `Promise`\n     * which is resolved after data is loaded from remote server, otherwise it returns `null`\n     * @async\n     * @internal\n     */\n    async performSort(silent) {\n        const me = this;\n        if (me.remoteSort && !me.isRemoteDataLoading) {\n            me.isRemoteDataLoading = true;\n            const result           = await me.internalLoad({}, '', event => {\n                me.data = event.data;\n                me.afterPerformSort(silent);\n            });\n            me.isRemoteDataLoading = false;\n            return result;\n        }\n        else {\n            super.performSort(silent);\n        }\n    }\n\n    /**\n     * Internal filter method.\n     * Should not be used in application code directly.\n     * @param silent\n     * @returns {Promise|null} If {@link Core/data/AjaxStore#config-filterParamName} is set on store, this method returns `Promise`\n     * which is resolved after data is loaded from remote server, otherwise it returns `null`\n     * @async\n     * @internal\n     */\n    async performFilter(silent) {\n        const\n            me = this;\n\n        // For remote filtering, the dataset cannot be preserved. The size may be completely different.\n        // This is a reload operation.\n        if (me.remoteFilter) {\n            me.loadingPromise?.abort();\n            // Flag store data loading state to not get into loop when data is sorted internally after request\n            me.isRemoteDataLoading = true;\n\n            const\n                oldCount    = me.count,\n                { filters } = me;\n\n            // load should default to page 1\n            me.currentPage         = 1;\n            const result           = await me.internalLoad({}, '', event => {\n                me.data = event.data;\n                event   = silent\n                    ? null\n                    : {\n                        action  : 'filter',\n                        filters,\n                        oldCount,\n                        records : me.storage.values\n                    };\n\n                me.afterPerformFilter(event);\n                me.trigger('refresh', event);\n            });\n            me.isRemoteDataLoading = false;\n            return result;\n        }\n        else {\n            super.performFilter(silent);\n        }\n    }\n\n    /**\n     * A provided function which creates an array of values for the {@link #config-filterParamName} to pass\n     * any filters to the server upon load.\n     *\n     * By default, this creates a JSON string containing the following properties:\n     *\n     * ```javascript\n     *    [{\n     *        field         : <theFieldName>\n     *        operator      : May be: `'='`, `'!='`, `'>'`, `'>='`, `'<'`, `'<='`, `'*'`, `'startsWith'`, `'endsWith'`\n     *        value         : The value to compare\n     *        caseSensitive : true for case sensitive comparisons\n     *    }]\n     * ```\n     * @param {Core.util.CollectionFilter[]} filters The filters to encode.\n     */\n    encodeFilterParams(filters) {\n        const\n            result = [];\n\n        for (const { property, operator, value, caseSensitive } of filters) {\n            result.push({\n                field : property,\n                operator,\n                value,\n                caseSensitive\n            });\n        }\n\n        return JSON.stringify(result, function(key, value) {\n            return key === ''\n                ? value\n                : this[key] instanceof Date ? dateToString(this[key]) : value;\n        });\n    }\n\n    /**\n     * A provided function which creates an array of values for the {#config-sortParamName} to pass\n     * any sorters to the server upon load.\n     *\n     * By default, this creates a JSON string containing the following properties:\n     *\n     * ```javascript\n     *    [{\n     *        field     : <theFieldName>\n     *        ascending : true/false\n     *    }]\n     * ```\n     *\n     * @param {Sorter[]} sorters The sorters to encode.\n     */\n    encodeSorterParams(sorters) {\n        return JSON.stringify(sorters.filter(sorter => !sorter.sortFn).map(sorter => sorter));\n    }\n\n    buildReadUrl() {\n        const { readUrl } = this;\n        if (this.restfulFilter && this.filters.count) {\n            const url = readUrl.endsWith('/') ? readUrl : (readUrl + '/');\n            return url + this.filters.first.value;\n        }\n        return readUrl;\n    }\n\n    /**\n     * Internal data loading method.\n     * @returns {Promise}\n     * @internal\n     */\n    internalLoad(params, eventName, successFn, delay = 0) {\n        // Accumulate all configured parameters\n        params = ObjectHelper.assign({}, this.params, params);\n\n        const\n            me    = this,\n            url   = me.buildReadUrl(),\n            event = { action : 'read' + eventName, params, url };\n\n        if (!url) {\n            throw new Error('No load url specified');\n        }\n\n        if (me.trigger('beforeLoad' + eventName, event) === false) {\n            throw false;  // eslint-disable-line no-throw-literal\n        }\n\n        me.loadArgs = [url, event, params, eventName, successFn];\n\n        if (delay === false) {\n            return new Promise((resolve, reject) => me.sendLoadRequest(resolve, reject));\n        }\n\n        return me.loadTriggerPromise || (me.loadTriggerPromise = new Promise((resolve, reject) => {\n            me.setTimeout({\n                delay,\n                fn                : 'sendLoadRequest',\n                args              : [resolve, reject],\n                cancelOutstanding : true\n            });\n        }));\n    }\n\n    // Send the request for the internalLoad.\n    // This is called on a timeout 1ms after the internalLoad call.\n    async sendLoadRequest(resolve, reject) {\n        const\n            me = this,\n            [\n                url,\n                event,\n                params,\n                eventName,\n                successFn\n            ]  = me.loadArgs;\n\n        // As soon as it kicks off, new load requests can be made which will result in another load\n        me.loadTriggerPromise = null;\n        if (url) {\n            me._isLoading = true;\n\n            // This may look redundant, but it allows for two levels of event listening.\n            // Granular, where the observer observes only the events of interest, and\n            // catch-all, where the observer is interested in all requests.\n            me.trigger(`load${eventName}Start`, event);\n            me.trigger('beforeRequest', event);\n\n            // Add filter information to the request parameters\n            if (me.filterParamName && me.isFiltered) {\n                params[me.filterParamName] = me.encodeFilterParams(me.filters.values);\n            }\n\n            // Add sorter information to the request parameters.\n            // isSorted includes grouping in its evaluation.\n            if (me.remoteSort && me.isSorted) {\n                params[me.sortParamName] = me.encodeSorterParams(me.groupers ? me.groupers.concat(me.sorters) : me.sorters);\n            }\n\n            // Ensure our next page is passed to the server in the params if not already set.\n            // Ensure our page size is always passed.\n            if (me.isPaged) {\n                if (!((me.pageParamName in params) || (me.pageStartParamName in params))) {\n                    const\n                        page = Math.min(me.currentPage || 1, me.allCount ? me.lastPage : Infinity);\n\n                    if (me.pageParamName) {\n                        params[me.pageParamName] = page;\n                    }\n                    else {\n                        params[me.pageStartParamName] = (page - 1) * me.pageSize;\n                    }\n                }\n                params[me.pageSizeParamName] = me.pageSize;\n            }\n\n            const options = { headers : me.headers, parseJson : true };\n\n            if (me.useRestfulMethods) {\n                options.method = me.httpMethods.read;\n                // user might define body in case of using custom restful method\n                if (event.body) {\n                    options.body = JSON.stringify(event.body);\n                }\n            }\n\n            try {\n                const\n                    promise     = me.loadingPromise = AjaxHelper.get(event.url + me.buildQueryString(event.url, params), ObjectHelper.assign(options, me.fetchOptions)),\n                    response    = await promise,\n                    data        = response.parsedJson,\n                    isArray     = Array.isArray(data),\n                    success     = isArray || (data && (ObjectHelper.getPath(data, me.responseSuccessProperty) !== false)),\n                    remoteTotal = isArray ? null : ObjectHelper.getPath(data, me.responseTotalProperty);\n\n                if (me.isDestroyed) {\n                    return;\n                }\n                me.loadingPromise = null;\n                me._isLoading  = false;\n                event.response = response;\n                event.json     = data;\n\n                if (success) {\n                    if (remoteTotal != null) {\n                        me.remoteTotal = parseInt(remoteTotal, 10);\n                    }\n\n                    // If we are issuing paged requests, work out what page we are on based\n                    // on the requested page and the size of the dataset declared.\n                    if (me.isPaged) {\n                        if (me.remoteTotal >= 0) {\n                            const requestedPage = me.pageParamName ? params[me.pageParamName] : params[me.pageStartParamName] / me.pageSize + 1;\n                            me.currentPage      = Math.min(requestedPage, me.lastPage);\n                        }\n                        else {\n                            throw new Error('A paged store must receive its responseTotalProperty in each data packet');\n                        }\n                    }\n                    event.data = isArray ? data : ObjectHelper.getPath(data, me.responseDataProperty);\n                    await successFn(event);\n                    !me.isDestroyed && me.trigger('load' + eventName, event);\n                    resolve(event);\n                }\n                else {\n                    Object.assign(event, {\n                        exception     : true,\n                        exceptionType : 'server',\n                        error         : data?.error\n                    });\n                    !me.isDestroyed && me.trigger('exception', event);\n                    reject(event);\n                }\n\n                // finally\n                !me.isDestroyed && me.trigger('afterRequest', event);\n            }\n            catch (responseOrError) {\n                me._isLoading = false;\n\n                event.exception = true;\n\n                if (responseOrError instanceof Response) {\n                    event.exceptionType = responseOrError.ok ? 'server' : 'network';\n                    event.response      = responseOrError;\n                    event.error         = responseOrError.error;\n                }\n                else {\n                    event.exceptionType = 'server';\n                    event.error         = responseOrError;\n                }\n\n                !me.isDestroyed && me.trigger('exception', event);\n                reject(event);\n\n                // finally\n                !me.isDestroyed && me.trigger('afterRequest', event);\n            }\n        }\n    }\n\n    /**\n     * Load data from the {@link #config-readUrl}.\n     * @param {Object} [params] A hash of parameters to append to querystring (will also append Store#params)\n     * @returns {Promise} A Promise which will be resolved if the load succeeds, and rejected if the load is\n     * vetoed by a {@link #event-beforeLoad} handler, or if an {@link #event-exception} is detected.\n     * The resolved function is passed the event object passed to any event handlers.\n     * The rejected function is passed the {@link #event-exception} event if an exception occurred,\n     * or `false` if the load was vetoed by a {@link #event-beforeLoad} handler.\n     * @fires beforeLoad\n     * @fires loadStart\n     * @fires beforeRequest\n     * @fires load\n     * @fires exception\n     * @fires afterRequest\n     * @category CRUD\n     */\n    async load(params) {\n        const\n            me = this;\n\n        if (me.isPaged) {\n            return me.loadPage(me.currentPage || 1, params);\n        }\n        else {\n            return me.internalLoad(params, '', (event) => {\n                // The set Data setter will trigger the refresh event with { action: 'dataset' }\n                me.data = event.data;\n            });\n        }\n    }\n\n    /**\n     * Loads children into specified parent record. Parent records id is sent as a param (param name configured with\n     * {@link #config-parentIdParamName}.\n     * @param {Core.data.Model} parentRecord Parent record\n     * @returns {Promise} A Promise which will be resolved if the load succeeds, and rejected if the load is\n     * vetoed by a {@link #event-beforeLoadChildren} handler, or if an {@link #event-exception} is detected.\n     * The resolved function is passed the event object passed to any event handlers.\n     * The rejected function is passed the {@link #event-exception} event if an exception occurred,\n     * or `false` if the load was vetoed by a {@link #event-beforeLoadChildren} handler.\n     * @fires beforeLoadChildren\n     * @fires loadChildrenStart\n     * @fires beforeRequest\n     * @fires loadChildren\n     * @fires exception\n     * @fires afterRequest\n     * @category CRUD\n     */\n    async loadChildren(parentRecord) {\n        // Immediate call to sendLoadRequest because we can make multiple, concurrent requests\n        // to load many tree nodes at once, so pass delay parameter as false.\n        return this.readUrl ? this.internalLoad({ [this.parentIdParamName] : parentRecord.id }, 'Children', event => {\n            event.parentRecord = parentRecord;\n\n            if (parentRecord.children.length) {\n                parentRecord.clearChildren(true);\n            }\n            // Append received children\n            parentRecord.data[parentRecord.constructor.childrenField] = event.data;\n            parentRecord.processChildren(parentRecord.stores);\n        }, false) : this.immediatePromise;\n    }\n\n    /**\n     * Loads a page of data from the {@link #config-readUrl}.\n     * @param {Number} page The *one based* page number to load.\n     * @param {Object} params A hash of parameters to append to querystring (will also append Store#params)\n     * @returns {Promise} A Promise which will be resolved if the load succeeds, and rejected if the load is\n     * vetoed by a {@link #event-beforeLoadPage} handler, or if an {@link #event-exception} is detected.\n     * The resolved function is passed the event object passed to any event handlers.\n     * The rejected function is passed the {@link #event-exception} event if an exception occurred,\n     * or `false` if the load was vetoed by a {@link #event-beforeLoadPage} handler.\n     * @fires beforeLoadPage\n     * @fires loadPageStart\n     * @fires beforeRequest\n     * @fires loadPage\n     * @fires exception\n     * @fires afterRequest\n     * @category CRUD\n     */\n    async loadPage(page, params) {\n        if (this.allCount) {\n            page = Math.min(page, this.lastPage);\n        }\n        const\n            me        = this,\n            pageParam = me.pageParamName\n                ? {\n                    [me.pageParamName] : page\n                }\n                : {\n                    [me.pageStartParamName] : (page - 1) * me.pageSize\n                };\n\n        pageParam[me.pageSizeParamName] = me.pageSize;\n        return me.internalLoad(ObjectHelper.assign(pageParam, params), 'Page', (event) => {\n            // We go directly to loadPage because paging a tree store is unsupportable.\n            // loadPage will trigger the refresh event with { action: 'pageLoad' }\n            me.loadData(event.data, 'pageLoad');\n        });\n    }\n\n    /**\n     * If this store {@link #property-isPaged is paged}, and is not already at the {@link #property-lastPage}\n     * then this will load the next page of data.\n     * @fires beforeLoadPage\n     * @fires loadPageStart\n     * @fires beforeRequest\n     * @fires loadPage\n     * @fires exception\n     * @fires afterRequest\n     * @category CRUD\n     * @returns {Promise} A promise which is resolved when the Ajax request completes and has been processed.\n     */\n    async nextPage(params) {\n        const me = this;\n        return me.isPaged && me.currentPage !== me.lastPage ? me.loadPage(me.currentPage + 1, params) : immediatePromise;\n    }\n\n    /**\n     * If this store {@link #property-isPaged is paged}, and is not already at the first page\n     * then this will load the previous page of data.\n     * @fires beforeLoadPage\n     * @fires loadPageStart\n     * @fires beforeRequest\n     * @fires loadPage\n     * @fires exception\n     * @fires afterRequest\n     * @category CRUD\n     * @returns {Promise} A promise which is resolved when the Ajax request completes and has been processed.\n     */\n    async previousPage(params) {\n        return this.isPaged && this.currentPage !== 1 ? this.loadPage(this.currentPage - 1, params) : immediatePromise;\n    }\n\n    /**\n     * Commits all changes (added, modified and removed) using corresponding urls ({@link #config-createUrl},\n     * {@link #config-updateUrl} and {@link #config-deleteUrl})\n     * @fires beforeCommit\n     * @returns {Promise} A Promise which is resolved only if all pending changes (Create, Update and Delete)\n     * successfully resolve. Both the resolve and reject functions are passed a `commitState` object which is stored the\n     * {@link #event-afterRequest} event for each request. Each event contains the `exception`, `request` and `response`\n     * properties eg:\n     *\n     * ```javascript\n     * {\n     *      // If *all* commits succeeded\n     *      success: true,\n     *      changes: {\n     *          added: [records...],\n     *          modified: [records...],\n     *          removed: [records...],\n     *      },\n     *      added: {\n     *          source: theStore,\n     *\n     *          // Only if the add request triggered an exception\n     *          exception: true,\n     *\n     *          // Only if the add request triggered an exception\n     *          exceptionType: 'server', // Or 'network'\n     *\n     *          response: Response,\n     *          json: parsedResponseObject\n     *      },\n     *      // Same format as added\n     *      modified: {},\n     *      removed: {}\n     * }\n     * ```\n     *\n     * If there were no pending changes, the resolve and reject functions are passed no parameters.\n     *\n     * Returns `false` if a commit operation is already in progress.\n     * The resolved function is passed the event object passed to any event handlers.\n     * The rejected function is passed the {@link #event-exception} event if an exception occurred,\n     * @category CRUD\n     */\n    async commit() {\n        const\n            me          = this,\n            { changes } = me,\n            allPromises = [];\n\n        // not allowing additional commits while in progress\n        // TODO: should queue\n        if (me.commitPromise) {\n            return false;\n        }\n\n        // No outstanding changes, return a Promise that resolves immediately.\n        if (!changes) {\n            // Special handling of modified. If only non-persistable fields have been modified, it wont count among\n            // `changes`, but still needs to be cleared\n            if (me.modified.count) {\n                me.modified.forEach(record => record.clearChanges(true, false));\n                me.modified.clear();\n            }\n\n            return immediatePromise;\n        }\n\n        if (me.trigger('beforeCommit', { changes }) !== false) {\n            // Flag all affected records as being committed\n            [...changes.added, ...changes.modified, ...changes.removed].forEach(record => record.meta.committing = true);\n\n            // Commit was not prevented in beforeCommit listener, so we begin the commit\n            me.trigger('commitStart', { changes });\n\n            const\n                commitState = {\n                    action    : 'commit',\n                    exception : false,\n                    changes\n                };\n\n            let p = me.commitRemoved(commitState);\n\n            if (p) {\n                allPromises.push(p);\n            }\n            p = me.commitAdded(commitState);\n            if (p) {\n                allPromises.push(p);\n            }\n            p = me.commitModified(commitState);\n            if (p) {\n                allPromises.push(p);\n            }\n\n            // If there were no urls configured, behave as a local store\n            if (!allPromises.length) {\n                me.modified.forEach(r => r.clearChanges(true, false));\n                me.modified.clear();\n\n                me.added.forEach(r => r.clearChanges(true, false));\n                me.added.clear();\n\n                me.removed.clear();\n                me.trigger('commit', { changes });\n                return immediatePromise;\n            }\n\n            // The Promises from the commit methods all resolve whether the request\n            // succeeded or not. They each contribute their afterrequest event to the\n            // commitState which can be used to detect overall success or failure\n            // and granular inspection of which operations succeeded or failed.\n            // If there's only one operation, wait for it.\n            // If there's more than one operation, we have to wait for allPromises to resolve.\n            p = allPromises.length === 1 ? allPromises[0] : Promise.all(allPromises);\n\n            return me.commitPromise = new Promise((resolve, reject) => {\n                p.then(() => {\n\n                    me.commitPromise = null;\n                    if (commitState.exception) {\n                        me.trigger('exception', commitState);\n                        reject(commitState);\n                    }\n                    else {\n                        me.trigger('commit', { changes });\n                        resolve(commitState);\n                    }\n                }).catch(() => {\n                    me.commitPromise = null;\n                    reject(commitState);\n                });\n            });\n        }\n    }\n\n    // Performs background autocommit with reject checking\n    doAutoCommit() {\n        if (this.suspendCount <= 0) {\n            this.commit().catch(commitState => {\n                const { response } = commitState;\n                // Skip throw if response is `ok` or `status` is 500 or 404 and request is successfully parsed\n                // These errors are notified by API events\n                if (!(response && (response.ok && response.parsedJson || [500, 404].includes(response.status)))) {\n                    throw commitState;\n                }\n            });\n        }\n    }\n\n    // TODO: need a way to abort commits\n\n    /**\n     * Commits added records by posting to {@link #config-createUrl}.\n     * Server should return a JSON object with a 'success' property indicating whether the operation was successful.\n     * @param {Object} commitState An object into which is added a `delete` property being the\n     * {@link #event-afterRequest} event.\n     * @returns {Promise|null} If there are added records, a Promise which will be resolved whether the commit\n     * succeeds or fails. The resulting event is placed into the `add` property of the passed `commitState`\n     * parameter. If there are no added records, `null` is returned.\n     * The resolved function is passed the event object passed to any event handlers.\n     * @async\n     * @private\n     * @fires beforeRequest\n     * @fires commitAdded\n     * @fires refresh\n     * @fires exception\n     * @fires afterRequest\n     */\n    commitAdded(commitState) {\n        const\n            me    = this,\n            added = me.added,\n            event = { action : 'create', params : me.params };\n\n        return added.count && me.createUrl ? new Promise((resolve) => {\n            const toAdd        = added.values.map(r => r.persistableData);\n            commitState.create = event;\n\n            event.body = { data : toAdd };\n\n            me.trigger('beforeRequest', event);\n\n            let dataToSend = event.body;\n\n            if (me.sendAsFormData) {\n                const\n                    formData = new FormData();\n\n                formData.append('data', JSON.stringify(toAdd));\n                dataToSend = formData;\n            }\n\n            const\n                options = { headers : me.headers, parseJson : true },\n                url     = me.createUrl + me.buildQueryString(me.createUrl, me.params);\n\n            if (me.useRestfulMethods) {\n                options.method = me.httpMethods.create;\n            }\n\n            AjaxHelper.post(url, dataToSend, ObjectHelper.assign(options, me.fetchOptions)).then(response => {\n                const\n                    data    = response.parsedJson,\n                    isArray = Array.isArray(data),\n                    success = isArray || (data && (data.success !== false));\n\n                commitState.response = response;\n                event.json           = data;\n                event.response       = response;\n\n                if (success) {\n                    // Copy updated fields and updated ID back into records.\n                    // This also calls clearChanges on each record.\n                    me.processReturnedData(added.values, isArray ? data : ObjectHelper.getPath(data, me.responseDataProperty));\n\n                    // Clear down added records cache\n                    added.clear();\n\n                    me.trigger('commitAdded');\n\n                    // We must signal a full refresh because any number of records could have received any number of field updates\n                    // back from the server, so a refresh is more efficient than picking through the received updates.\n                    me.trigger('refresh', event);\n\n                    resolve(commitState);\n                }\n                else {\n                    // Clear committing flag\n                    added.forEach(r => r.meta.committing = false);\n\n                    commitState.exception = event.exception = true;\n\n                    commitState.exceptionType = event.exceptionType = 'server';\n\n                    me.trigger('exception', event);\n                    resolve(commitState);\n                }\n\n                // finally\n                me.trigger('afterRequest', event);\n            }).catch(responseOrError => {\n                // Clear committing flag\n                added.forEach(r => r.meta.committing = false);\n\n                commitState.exception = event.exception = true;\n\n                if (responseOrError instanceof Response) {\n                    commitState.response = responseOrError;\n                    event.exceptionType  = responseOrError.ok ? 'server' : 'network';\n                    event.response       = responseOrError;\n                    event.error          = responseOrError.error;\n                }\n                else {\n                    event.exceptionType = 'server';\n                    event.error         = responseOrError;\n                }\n\n                me.trigger('exception', event);\n                resolve(commitState);\n\n                // finally\n                me.trigger('afterRequest', event);\n            });\n        }) : null;\n    }\n\n    /**\n     * Commits modified records by posting to {@link #config-updateUrl}.\n     * Server should return a JSON object with a 'success' property indicating whether the operation was successful.\n     * @param {Object} commitState An object into which is added a `delete` property being the\n     * {@link #event-afterRequest} event.\n     * @returns {Promise|null} If there are added records, a Promise which will be resolved whether the commit\n     * succeeds or fails. The resulting event is placed into the `update` property of the passed `commitState`\n     * parameter. If there are no added records, `null` is returned.\n     * The resolved function is passed the event object passed to any event handlers.\n     * @async\n     * @private\n     * @fires beforeRequest\n     * @fires commitModified\n     * @fires refresh\n     * @fires exception\n     * @fires afterRequest\n     */\n    commitModified(commitState) {\n        const\n            me           = this,\n            // Only include persistable changes\n            { modified } = me.changes,\n            event        = { action : 'update', params : me.params },\n            result       = modified.length && me.updateUrl ? new Promise(resolve => {\n                // Use the record's modificationData, not modifications.\n                // modifications returns a map using *field names*\n                // The server will expect a map using the original dataSource properties.\n                const\n                    modifications = modified.map(record => {\n                        if (me.writeAllFields) {\n                            return record.persistableData;\n                        }\n                        else {\n                            return record.modificationDataToWrite;\n                        }\n                    }).filter(el => !ObjectHelper.isEmpty(el));\n\n                // Check if modifications are empty and don't make request\n                if (modifications.length === 0) {\n                    me.modified.clear();\n                    modified.forEach(r => r.meta.committing = false);\n                    resolve();\n                    return;\n                }\n\n                commitState.update = event;\n\n                event.body = { data : modifications };\n\n                me.trigger('beforeRequest', event);\n\n                let dataToSend = event.body;\n\n                if (me.sendAsFormData) {\n                    const\n                        formData = new FormData();\n\n                    formData.append('data', JSON.stringify(modifications));\n                    dataToSend = formData;\n                }\n\n                const\n                    options = { headers : me.headers, parseJson : true };\n\n                if (me.useRestfulMethods) {\n                    options.method = me.httpMethods.update;\n                }\n\n                AjaxHelper.post(\n                    me.updateUrl + me.buildQueryString(me.updateUrl, me.params),\n                    dataToSend,\n                    ObjectHelper.assign(options, me.fetchOptions)\n                ).then(response => {\n                    const\n                        data    = response.parsedJson,\n                        isArray = Array.isArray(data),\n                        success = isArray || (data && (data.success !== false));\n\n                    commitState.response = response;\n                    event.json           = data;\n                    event.response       = response;\n\n                    if (success) {\n                        // Copy updated fields and updated ID back into records.\n                        // This also calls clearChanges on each record.\n                        me.processReturnedData(modified, isArray ? data : ObjectHelper.getPath(data, me.responseDataProperty), true);\n\n                        // Clear down modified records cache\n                        me.modified.clear();\n\n                        me.trigger('commitModified');\n\n                        // We must signal a full refresh because any number of records could have received any number of\n                        // field updates back from the server, so a refresh is more efficient than picking through the\n                        // received updates.\n                        me.trigger('refresh', event);\n\n                        resolve(commitState);\n                    }\n                    else {\n                        // Clear committing flag\n                        modified.forEach(r => r.meta.committing = false);\n\n                        commitState.exception = event.exception = true;\n                        event.exceptionType   = 'server';\n                        me.trigger('exception', event);\n                        resolve(commitState);\n                    }\n\n                    // finally\n                    me.trigger('afterRequest', event);\n                }).catch(responseOrError => {\n                    // Clear committing flag\n                    modified.forEach(r => r.meta.committing = false);\n\n                    commitState.exception = event.exception = true;\n\n                    if (responseOrError instanceof Response) {\n                        commitState.response = responseOrError;\n                        event.exceptionType  = responseOrError.ok ? 'server' : 'network';\n                        event.response       = responseOrError;\n                        event.error          = responseOrError.error;\n                    }\n                    else {\n                        event.exceptionType = 'server';\n                        event.error         = responseOrError;\n                    }\n\n                    me.trigger('exception', event);\n                    resolve(commitState);\n\n                    // finally\n                    me.trigger('afterRequest', event);\n                });\n            }) : null;\n\n        // Also clear non-persistable changes\n        if (!modified.length && me.modified.count) {\n            me.modified.clear();\n        }\n\n        return result;\n    }\n\n    processReturnedData(localRecords, returnedData, isUpdating = false) {\n        const\n            me           = this,\n            Model        = me.modelClass,\n            idDataSource = Model.fieldMap.id.dataSource;\n\n        returnedData.forEach((recData, i) => {\n            const\n                record = localRecords[i];\n\n            // Must clear changed state before syncId goes through store.onModelChange\n            record.clearChanges(true, false);\n\n            // Using syncId to update record's id with no flagging the property as modified.\n            record.syncId(recData[idDataSource]);\n\n            // When updating, only want to apply the actual changes and not reapply defaults. When adding, also\n            // apply the defaults\n            Object.assign(localRecords[i].data, Model.processData(recData, isUpdating, me, record));\n        });\n    }\n\n    /**\n     * Commits removed records by posting to {@link #config-deleteUrl}.\n     * Server should return a JSON object with a 'success' property indicating whether the operation was successful.\n     * @param {Object} commitState An object into which is added a `delete` property being the\n     * {@link #event-afterRequest} event.\n     * @returns {Promise|null} If there are added records, a Promise which will be resolved whether the commit\n     * succeeds or fails. The resulting event is placed into the `delete` property of the passed `commitState`\n     * parameter. If there are no added records, `null` is returned.\n     * The resolved function is passed the event object passed to any event handlers.\n     * @async\n     * @private\n     * @fires beforerequest\n     * @fires commitremoved\n     * @fires refresh\n     * @fires exception\n     * @fires afterrequest\n     */\n    commitRemoved(commitState) {\n        const\n            me      = this,\n            removed = me.removed,\n            event   = { action : 'delete', params : me.params };\n\n        return removed.count && me.deleteUrl ? new Promise((resolve) => {\n            commitState.delete = event;\n\n            event.body = { ids : removed.map(r => r.id) };\n\n            me.trigger('beforeRequest', event);\n\n            let dataToSend = event.body;\n\n            if (me.sendAsFormData) {\n                const\n                    formData = new FormData();\n\n                formData.append('id', JSON.stringify(dataToSend.ids));\n                dataToSend = formData;\n            }\n\n            const\n                options = { headers : me.headers, parseJson : true };\n\n            if (me.useRestfulMethods) {\n                options.method = me.httpMethods.delete;\n            }\n\n            AjaxHelper.post(\n                me.deleteUrl + me.buildQueryString(me.deleteUrl, me.params),\n                dataToSend,\n                ObjectHelper.assign(options, me.fetchOptions)\n            ).then(response => {\n                const\n                    data    = response.parsedJson,\n                    isArray = Array.isArray(data),\n                    success = isArray || (data && (data.success !== false));\n\n                commitState.response = response;\n                event.json           = data;\n                event.response       = response;\n\n                if (success) {\n                    removed.forEach(record => record.meta.committing = false); // In case used by other store etc.\n                    removed.clear();\n\n                    me.trigger('commitRemoved');\n                    me.trigger('refresh', event);\n\n                    resolve(commitState);\n                }\n                else {\n                    // Clear committing flag\n                    removed.forEach(r => r.meta.committing = false);\n\n                    commitState.exception = event.exception = true;\n\n                    event.exceptionType = 'server';\n                    me.trigger('exception', event);\n                    resolve(commitState);\n                }\n\n                // finally\n                me.trigger('afterRequest', event);\n            }).catch(responseOrError => {\n                // Clear committing flag\n                removed.forEach(r => r.meta.committing = false);\n\n                commitState.exception = event.exception = true;\n\n                if (responseOrError instanceof Response) {\n                    commitState.response = responseOrError;\n                    event.exceptionType  = responseOrError.ok ? 'server' : 'network';\n                    event.response       = responseOrError;\n                    event.error          = responseOrError.error;\n                }\n                else {\n                    event.exceptionType = 'server';\n                    event.error         = responseOrError;\n                }\n\n                me.trigger('exception', event);\n                resolve(commitState);\n\n                // finally\n                me.trigger('afterRequest', event);\n            });\n        }) : null;\n    }\n\n    get remoteFilter() {\n        return Boolean(this.filterParamName || this.restfulFilter);\n    }\n\n    get remoteSort() {\n        return Boolean(this.sortParamName);\n    }\n\n}\n","/**\n * @module Core/data/DomDataStore\n */\n\n/**\n * Stores data on a dom element (by setting element._domData).\n * Instead of using HTML5:s element.dataset, which turned out to be slow.\n * @internal\n */\nexport default class DomDataStore {\n    /**\n     * Get data that is connected to specified element.\n     * @param {HTMLElement} element DOM element\n     * @param {String} [key] The name of the property in the element data to return\n     * @returns {Object} Data\n     */\n    static get(element, key) {\n        const result = (element._domData || (element._domData = {}));\n\n        return (key != null) ? result[key] :  result;\n    }\n\n    /**\n     * Remove data connected to specified element.\n     * @param {HTMLElement} element DOM element\n     * @param {String} key The name of the property in the element data to remove.\n     */\n    static remove(element, key) {\n        const\n            { _domData } = element,\n            was = _domData?.[key];\n\n        delete _domData?.[key];\n\n        return was;\n    }\n\n    /**\n     * Set data connected to specified element (completely replacing any existing).\n     * To update data, use DomDataStore#assign instead.\n     * @param {HTMLElement} element DOM element\n     * @param {Object|String} data Data object to set, or property name to set\n     * @param {*} [value] If the previous parameter was a property name, this is the value to set.\n     */\n    static set(element, data, value) {\n        if (arguments.length === 3) {\n            (element._domData || (element._domData = {}))[data] = value;\n        }\n        else {\n            element._domData = data;\n        }\n    }\n\n    /**\n     * Updates data connected to specified element.\n     * @param {HTMLElement} element DOM element\n     * @param {Object} data Data to assign\n     */\n    static assign(element, data) {\n        Object.assign((element._domData || (element._domData = {})), data);\n    }\n}\n","import ArrayHelper from './ArrayHelper.js';\nimport DomHelper from './DomHelper.js';\nimport DomClassList from './util/DomClassList.js';\nimport ObjectHelper from './ObjectHelper.js';\nimport StringHelper from './StringHelper.js';\n\n/**\n * @module Core/helper/DomSync\n */\n\nconst\n    arraySlice            = Array.prototype.slice,\n    emptyArray            = Object.freeze([]),\n    emptyObject           = Object.freeze({}),\n    htmlRe                = /[&<]/,  // tests if setInnerText is equivalent to innerHTML\n    { getPrototypeOf }    = Object,\n    { toString }          = Object.prototype,\n    { isEqual, isObject } = ObjectHelper,\n\n    // Attributes used during creation that should not be compared\n    checkEqualityIgnore = {\n        parent      : 1,\n        elementData : 1,\n        ns          : 1,\n        syncOptions : 1\n    },\n\n    makeCheckEqualityOptions = () => ({\n        ignore    : checkEqualityIgnore,\n        refsFound : new Set()\n    }),\n\n    isClass = {\n        class     : 1,\n        className : 1,\n        classname : 1\n    },\n\n    simpleTypes = {\n        bigint   : 1,\n        boolean  : 1,\n        function : 1,\n        number   : 1,\n        // object\n        string   : 1,\n        symbol   : 1\n        // undefined\n    },\n\n    // Attributes to ignore on sync\n    syncIgnoreAttributes = {\n        tag           : 1,\n        html          : 1,\n        text          : 1,\n        children      : 1,\n        tooltip       : 1,\n        parent        : 1,\n        nextSibling   : 1,\n        ns            : 1,\n        reference     : 1,\n        elementData   : 1,\n        retainElement : 1,\n        compareHtml   : 1,\n        syncOptions   : 1,\n        listeners     : 1,\n        isReleased    : 1,\n        null          : 1,\n        ''            : 1,\n        keepChildren  : 1\n    };\n\nconst addAndCacheCls = (cls, lastDomConfig) => {\n    const\n        propertyName  = 'className' in lastDomConfig ? 'className' : 'class',\n        propertyValue = lastDomConfig[propertyName];\n\n    if (propertyValue) {\n        if (typeof propertyValue === 'string') {\n            const value = propertyValue.split(' ');\n\n            if (!value.includes(cls)) {\n                value.push(cls);\n\n                lastDomConfig[propertyName] = value.join(' ');\n            }\n        }\n        else if (Array.isArray(propertyValue)) {\n            if (!propertyValue.includes(cls)) {\n                propertyValue.push(cls);\n            }\n        }\n        else if (propertyValue.isDomClassList) {\n            propertyValue.add(cls);\n        }\n        else if (ObjectHelper.isObject(propertyValue)) {\n            propertyValue[cls] = 1;\n        }\n    }\n};\n\nconst removeAndUncacheCls = (cls, lastDomConfig) => {\n    const\n        propertyName  = 'className' in lastDomConfig ? 'className' : 'class',\n        propertyValue = lastDomConfig[propertyName];\n\n    if (propertyValue) {\n        if (typeof propertyValue === 'string') {\n            const value = propertyValue.split(' ');\n\n            if (value.includes(cls)) {\n                value.splice(value.indexOf(cls), 1);\n\n                lastDomConfig[propertyName] = value.join(' ');\n            }\n        }\n        else if (Array.isArray(propertyValue)) {\n            if (propertyValue.includes(cls)) {\n                propertyValue.splice(propertyValue.indexOf(cls), 1);\n            }\n        }\n        else if (propertyValue.isDomClassList) {\n            propertyValue.remove(cls);\n        }\n        else if (ObjectHelper.isObject(propertyValue)) {\n            delete propertyValue[cls];\n        }\n    }\n};\n\n/**\n * A utility class for syncing DOM config objects to DOM elements. Syncing compares the new config with the previously\n * used for that element, only applying the difference. Very much like a virtual DOM approach on a per element basis\n * (element + its children).\n *\n * Usage example:\n *\n * ```javascript\n * DomSync.sync({\n *     domConfig: {\n *         className : 'b-outer',\n *         children : [\n *             {\n *                 className : 'b-child',\n *                 html      : 'Child 1',\n *                 dataset   : {\n *                     custom : true\n *                 }\n *             },\n *             {\n *                 className : 'b-child',\n *                 html      : 'Child 2',\n *                 style     : {\n *                     fontWeight : 'bold',\n *                     color      : 'blue'\n *                 }\n *             }\n *         ]\n *     },\n *     targetElement : target\n * });\n * ```\n */\nexport default class DomSync {\n    /**\n     * Compares two DOM configs or properties of such objects for equality.\n     * @param {Object} is The new value.\n     * @param {Object} was The old value.\n     * @param {Object} options An object with various options to control the comparison.\n     * @param {Object} options.ignore An object containing names of attributes to ignore having `true` value.\n     * @param {Map} options.equalityCache A map that can be used to record equality results for objects to avoid\n     * recomputing the result for the same objects.\n     * @param {Set} options.refsFound A Set that must be populated with the values of any `reference` properties found.\n     * @param {Boolean|String} [ignoreRefs] Pass `true` to ignore `reference` properties on domConfigs. Pass `'children'`\n     * to ignore `reference` properties only on child element configs.\n     * @returns {Boolean}\n     * @private\n     */\n    static checkEquality(is, was, options, ignoreRefs) {\n        if (is === was) {\n            return true;\n        }\n\n        // For purposes of DomSync, null and undefined are equivalent\n        if (is == null) {\n            return was == null;\n        }\n\n        if (!is || !was) {\n            return false;  // false since is !== was and is != null (we get here if was == null)\n        }\n\n        const\n            typeA = typeof is,\n            typeB = typeof was;\n\n        if (typeA !== typeB || simpleTypes[typeA]) {  // only test simpleTypes[typeA] since typeA === typeB\n            return false;\n        }\n\n        // a and b are distinct objects or maybe arrays\n        let cache = options.equalityCache || (options.equalityCache = new Map()),\n            ignoreChildRefs = Boolean(ignoreRefs),\n            equal, i, ignore, ignoreRefOpt, key, syncOptions, val;\n\n        // We must cache results based on both sides of the comparison. If we only cache the result of \"is\" vs\n        // any other value, we get failures in SchedulerWithAutoCommitStore.t.js\n        cache = cache.get(is) || cache.set(is, new Map()).get(is);\n        equal = cache.get(was);\n\n        if (equal === undefined) {\n            equal = true;\n\n            if (getPrototypeOf(is) !== getPrototypeOf(was) || is instanceof Node) {\n                // Two Nodes are not equal since they are !==\n                equal = false;\n            }\n            else if (Array.isArray(is)) {\n                // Since we have === prototypes, we know that \"was\" is also an array\n                i = is.length;\n\n                if (i !== was.length) {\n                    equal = false;\n                }\n                else {\n                    while (i-- > 0) {\n                        if (!DomSync.checkEquality(is[i], was[i], options, ignoreChildRefs)) {\n                            equal = false;\n                            break;\n                        }\n                    }\n                }\n            }\n            else {\n                syncOptions = is.syncOptions;\n                ignoreRefOpt = syncOptions?.ignoreRefs;\n\n                if (ignoreRefOpt) {\n                    ignoreChildRefs = true;\n                    ignoreRefs = ignoreRefOpt !== 'children';\n                }\n\n                ignore = options.ignore || emptyObject;\n\n                // We have 2 objects w/same prototype and that are not HTML nodes\n                // https://jsbench.me/n2kgfre1r5/1 - profiles for-in-object loops vs for loop over keys array\n                // fwiw, the smaller the object, the greater the benefit of for-in loop\n                for (key in was) {\n                    if (!ignore[key] && !(key in is) && !(ignoreRefs && key === 'reference')) {\n                        equal = false;\n                        break;\n                    }\n                }\n\n                if (equal) {\n                    if (toString.call(was) === '[object Date]') {\n                        // Since we have === prototypes, we know that \"was\" is also a Date\n                        equal = is.getTime() === was.getTime();\n                    }\n                    else {\n                        for (key in is) {\n                            if (!ignore[key] && !(ignoreRefs && key === 'reference')) {\n                                if (!(key in was)) {\n                                    equal = false;\n                                    break;\n                                }\n\n                                val = is[key];\n\n                                // Per Johan:\n                                //  Not sure we still use DocumentFragment. Used to be part of event rendering earlier,\n                                //  but I think I have refactored it away. Worth checking\n                                //  ...\n                                //  Not finding any usages\n                                //\n                                // DocumentFragment, compare separately supplied html\n                                // if (key === 'html' && typeof val !== 'string' && `compareHtml` in is) {\n                                //     if (is.compareHtml === was.compareHtml) {\n                                //         continue;\n                                //     }\n                                // }\n\n                                if (!DomSync.checkEquality(val, was[key], options, ignoreChildRefs)) {\n                                    equal = false;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (!ignoreRefs && isObject(is) && is.reference) {\n                // We need to track object w/reference properties to know what reference elements may have\n                // been removed since we may skip synchronizing them.\n                options.refsFound?.add(is.reference);\n            }\n\n            cache.set(was, equal);\n        }\n\n        return equal;\n    }\n\n    /**\n     * Sync a DOM config to a target element\n     * @param {Object} options Options object\n     * @param {DomConfig} options.domConfig A DOM config object\n     * @param {HTMLElement} options.targetElement Target element to apply to\n     * @param {Boolean} [options.strict=false] Specify `true` to limit synchronization to only the values set by\n     * previous calls. Styles and classes placed directly on the DOM elements by other means will not be affected.\n     * @param {String} [options.syncIdField] Field in dataset to use to match elements for re-usage\n     * @param {String|String[]} [options.affected] The references affected by a partial sync.\n     * @param {Function} [options.callback] A function that will be called on element re-usage, creation and similar\n     * @param {Boolean} [options.configEquality] A function that will be called to compare an incoming config to\n     * the last config applied to the `targetElement`. This function returns `true` if the passed values are equal and\n     * `false` otherwise.\n     * @returns {HTMLElement} Returns the updated target element (which is also updated in place)\n     */\n    static sync(options) {\n        const\n            optionsIn            = options,\n            { refOwner }         = options,\n            refsWas              = refOwner?.byRef,\n            checkEqualityOptions = makeCheckEqualityOptions();\n\n        let affected = options.affected,\n            i, ref, targetNode, lastDomConfig;\n\n        if (typeof affected === 'string') {\n            affected = [affected];\n        }\n\n        // NOTE: it is possible to reenter this method in at least the following way:\n        //   - sync() causes a focus change by manipulating the activeElement.\n        //   - a focus/blur/focusin/out event causes a widget config to initiate a recompose.\n        //   - the event also triggers code that forces the recompose to flush (e.g., by using a reference el).\n        options = {\n            ...options,\n            checkEqualityOptions\n        };\n\n        //<debug>\n        if (options.actionLog) {\n            const { actionLog, callback } = options;\n\n            options.callback = (ev) => {\n                actionLog.push(ev);\n                callback?.(ev);\n            };\n        }\n        //</debug>\n\n        if (refOwner) {\n            // We always rebuild the byRef map on each call\n            refOwner.byRef = {};\n\n            if (affected) {\n                // We need to preserve all previously rendered refs that are not going to be affected by this partial\n                // update...\n                for (ref in refsWas) {\n                    if (!affected.includes(ref)) {\n                        refOwner.byRef[ref] = refsWas[ref];\n                    }\n                }\n            }\n\n            options.refsWas = refsWas;\n        }\n\n        // performSync() returns false if nothing was done because the configs were equal... we bend the rules on\n        // modifying input objects so we can return this potentially important detail to our caller:\n        optionsIn.changed = DomSync.performSync(options, options.targetElement);\n\n        if (refOwner) {\n            if (!affected) {\n                affected = Object.keys(refsWas);\n            }\n\n            for (i = 0; i < affected.length; ++i) {\n                ref = affected[i];\n                targetNode = refsWas[ref];\n\n                if (checkEqualityOptions.refsFound.has(ref) || targetNode.retainElement) {\n                    refOwner.byRef[ref] = targetNode;\n                }\n                else {\n                    lastDomConfig = targetNode.lastDomConfig;\n\n                    targetNode.remove();\n\n                    refOwner.detachRef(ref, targetNode, lastDomConfig);\n                }\n            }\n        }\n\n        return options.targetElement;\n    }\n\n    static performSync(options, targetElement) {\n        const\n            { domConfig, callback } = options,\n            { lastDomConfig }       = targetElement,\n            configIsEqual           = options.configEquality || DomSync.checkEquality;\n\n        if (!configIsEqual(domConfig, lastDomConfig, options.checkEqualityOptions, options.ignoreRefs)) {\n            if (domConfig) {\n                // Sync without affecting the containing element?\n                if (!domConfig.onlyChildren) {\n                    DomSync.syncAttributes(domConfig, targetElement, options);\n                    DomSync.syncContent(domConfig, targetElement);\n                }\n\n                if (!domConfig.keepChildren) {\n                    DomSync.syncChildren(options, targetElement);\n                }\n            }\n            // Allow null to clear html\n            else {\n                targetElement.innerHTML = null;\n                targetElement.syncIdMap = null;\n            }\n\n            // Cache the config on the target for future comparison\n            targetElement.lastDomConfig = !(domConfig?.onlyChildren && lastDomConfig) ? domConfig : {\n                ...lastDomConfig,\n                children : domConfig.children\n            };\n\n            return true;\n        }\n        else {\n            // Sync took no action, notify the world\n            callback?.({\n                action : 'none',\n                domConfig,\n                targetElement\n            });\n        }\n\n        return false;\n    }\n\n    //region Attributes\n\n    static syncDataset(domConfig, targetElement) {\n        const\n            { lastDomConfig } = targetElement,\n            sameConfig        = domConfig === lastDomConfig,\n            source            = Object.keys(domConfig.dataset),\n            target            = lastDomConfig && lastDomConfig.dataset && Object.keys(lastDomConfig.dataset),\n            delta             = ArrayHelper.delta(source, target);\n\n        let attr, i, name, value;\n\n        // New attributes in dataset\n        for (i = 0; i < delta.onlyInA.length; i++) {\n            attr = delta.onlyInA[i];\n            value = domConfig.dataset[attr];\n\n            // Prevent data-property=\"null\" or data-property=\"undefined\"\n            if (value != null) {\n                targetElement.setAttribute(`data-${StringHelper.hyphenate(attr)}`, value);\n            }\n        }\n\n        // Might have changed\n        for (i = 0; i < delta.inBoth.length; i++) {\n            attr = delta.inBoth[i];\n            value = domConfig.dataset[attr];\n\n            // Intentional != since dataset is always string but want numbers to match\n            // noinspection EqualityComparisonWithCoercionJS\n            if (sameConfig || value != lastDomConfig.dataset[attr]) {\n                name = `data-${StringHelper.hyphenate(attr)}`;\n\n                if (value == null) {\n                    targetElement.removeAttribute(name);\n                }\n                else {\n                    targetElement.setAttribute(name, value);\n                }\n            }\n        }\n\n        // Removed\n        for (i = 0; i < delta.onlyInB.length; i++) {\n            targetElement.removeAttribute(`data-${StringHelper.hyphenate(delta.onlyInB[i])}`);\n        }\n    }\n\n    /**\n     * Adds CSS classes to the element and to the cache.\n     * @param {Core.helper.util.DomClassList|String|String[]|Object} cls\n     * @param {HTMLElement} targetElement A previously DomSynced element\n     * @internal\n     */\n    static addCls(cls, targetElement) {\n        const { lastDomConfig } = targetElement;\n\n        cls = DomClassList.normalize(cls, 'array');\n\n        cls.forEach(cls => {\n            targetElement.classList.add(cls);\n\n            addAndCacheCls(cls, lastDomConfig);\n        });\n    }\n\n    /**\n     * Adds CSS classes from the element and from the cache.\n     * @param {Core.helper.util.DomClassList|String|String[]|Object} cls\n     * @param {HTMLElement} targetElement A previously DomSynced element\n     * @internal\n     */\n    static removeCls(cls, targetElement) {\n        const { lastDomConfig } = targetElement;\n\n        cls = DomClassList.normalize(cls, 'array');\n\n        cls.forEach(cls => {\n            targetElement.classList.remove(cls);\n\n            removeAndUncacheCls(cls, lastDomConfig);\n        });\n    }\n\n    static syncClassList(domConfig, targetElement, lastDomConfig) {\n        let cls     = domConfig.className || domConfig.class,\n            changed = false,\n            c, currentClasses, i, k, keep, last;\n\n        if (lastDomConfig) {\n            // NOTE: The following reads the DOM to determine classes that may have been added by other means. This\n            //  diff is only enabled when \"strict\" is used (see our callers)\n            currentClasses = DomClassList.normalize(targetElement, 'array');\n            cls = DomClassList.normalize(cls, 'object');\n            last = DomClassList.normalize(lastDomConfig.className || lastDomConfig.class, 'object');\n            keep = [];\n\n            for (i = 0, k = currentClasses.length; i < k; ++i) {\n                c = currentClasses[i];\n\n                // We want to keep classes not in cls if we didn't add them last time\n                if (cls[c] || !(c in last)) {\n                    last[c] = 1;\n                    keep.push(c);\n                }\n                else {\n                    changed = true;\n                }\n            }\n\n            for (c in cls) {\n                if (!last[c]) {\n                    keep.push(c);\n                    changed = true;\n                }\n            }\n\n            if (!changed) {\n                return;\n            }\n\n            cls = keep.join(' ');\n        }\n        else {\n            cls = DomClassList.normalize(cls);  // to string\n        }\n\n        targetElement.setAttribute('class', cls);\n    }\n\n    // Attributes as map { attr : value, ... }\n    static getSyncAttributes(domConfig) {\n        const\n            attributes = {},\n            // Attribute names, simplifies comparisons and calls to set/removeAttribute\n            names      = [];\n\n        // On a first sync, there are no domConfig on the target element yet\n        if (domConfig) {\n            Object.keys(domConfig).forEach(attr => {\n                if (!syncIgnoreAttributes[attr]) {\n                    const name = attr.toLowerCase();\n                    attributes[name] = domConfig[attr];\n                    names.push(name);\n                }\n            });\n        }\n\n        return { attributes, names };\n    }\n\n    static syncAttributes(domConfig, targetElement, options) {\n        const\n            { lastDomConfig } = targetElement,\n            // If the same config has come through, due to configEquality, we must update all attrs.\n            sameConfig        = domConfig === lastDomConfig,\n            sourceSyncAttrs   = DomSync.getSyncAttributes(domConfig),\n            // Extract attributes from elements (sourceElement might be a config)\n            {\n                attributes : sourceAttributes,\n                names      : sourceNames\n            }                 = sourceSyncAttrs,\n            {\n                attributes : targetAttributes,\n                names      : targetNames\n            }                 = sameConfig ? sourceSyncAttrs : DomSync.getSyncAttributes(lastDomConfig),\n            // Intersect arrays to determine what needs adding, removing and syncing\n            {\n                onlyInA : toAdd,\n                onlyInB : toRemove,\n                inBoth  : toSync\n            }                 = sameConfig ? {\n                onlyInA : emptyArray,\n                onlyInB : emptyArray,\n                inBoth  : sourceNames\n            } : ArrayHelper.delta(sourceNames, targetNames);\n\n        let attr, i;\n\n        // Add new attributes\n        for (i = 0; i < toAdd.length; i++) {\n            attr = toAdd[i];\n\n            const sourceAttr = sourceAttributes[attr];\n\n            // Style requires special handling\n            if (attr === 'style' && sourceAttr != null) {\n                // TODO: Do diff style apply also instead of this replace\n                DomHelper.applyStyle(targetElement, sourceAttr, true);\n            }\n            // So does dataset\n            else if (attr === 'dataset') {\n                DomSync.syncDataset(domConfig, targetElement);\n            }\n            // And class, which might be an object\n            else if (isClass[attr]) {\n                DomSync.syncClassList(domConfig, targetElement);\n            }\n            // Other attributes are set using setAttribute (since it calls toString() DomClassList works fine),\n            // unless they are undefined in which case they are ignored to not get `href=\"undefined\"` etc\n            else if (sourceAttr != null) {\n                targetElement.setAttribute(attr, sourceAttr);\n            }\n        }\n\n        // Removed no longer used attributes\n        for (i = 0; i < toRemove.length; i++) {\n            targetElement.removeAttribute(toRemove[i]);\n        }\n\n        // TODO: toAdd and toSync are growing very alike, consider merging\n        // Sync values for all other attributes\n        for (i = 0; i < toSync.length; i++) {\n            attr = toSync[i];\n\n            const\n                sourceAttr = sourceAttributes[attr],\n                targetAttr = targetAttributes[attr];\n\n            // Attribute value null means remove attribute\n            if (sourceAttr == null) {\n                targetElement.removeAttribute(attr);\n            }\n            // Set all attributes that has changed, with special handling for style.\n            else if (attr === 'style') {\n                if (options.strict) {\n                    if (sameConfig) {\n                        DomSync.syncStyles(targetElement, sourceAttr);\n                    }\n                    else if (!isEqual(sourceAttr, targetAttr, true)) {\n                        DomSync.syncStyles(targetElement, sourceAttr, targetAttr);\n                    }\n                }\n                else if (sameConfig || !isEqual(sourceAttr, targetAttr, true)) {\n                    DomHelper.applyStyle(targetElement, sourceAttr, true);\n                }\n            }\n            // And dataset\n            else if (attr === 'dataset') {\n                DomSync.syncDataset(domConfig, targetElement);\n            }\n            // And class, which might be an object\n            else if (isClass[attr]) {\n                DomSync.syncClassList(domConfig, targetElement, options.strict && targetElement.lastDomConfig);\n            }\n            else if (sameConfig || sourceAttr !== targetAttr) {\n                targetElement.setAttribute(attr, sourceAttr);\n            }\n        }\n    }\n\n    static syncStyles(targetElement, sourceAttr, targetAttr) {\n        let styles, key, value;\n\n        if (!targetAttr) {\n            styles = sourceAttr;\n        }\n        else {\n            styles = {};\n            // Style could be a string so we parse it to object to iterate over it's properties correctly\n            sourceAttr = DomHelper.parseStyle(sourceAttr);\n            targetAttr = DomHelper.parseStyle(targetAttr);\n\n            if (sourceAttr) {\n                for (key in sourceAttr) {\n                    value = sourceAttr[key];\n\n                    if (targetAttr[key] !== value) {\n                        styles[key] = value;\n                    }\n                }\n            }\n\n            for (key in targetAttr) {\n                if (!(key in sourceAttr)) {\n                    styles[key] = '';\n                }\n            }\n        }\n\n        DomHelper.applyStyle(targetElement, styles);\n    }\n\n    //endregion\n\n    //region Content\n\n    static syncContent(domConfig, targetElement) {\n        const\n            { html, text } = domConfig,\n            content = text ?? html;\n\n        targetElement.didSetTextContent = false;\n\n        // elementData holds custom data that we want to attach to the element (not visible in dom)\n        if (domConfig.elementData) {\n            targetElement.elementData = domConfig.elementData;\n        }\n\n        // Apply html from config\n        if (content instanceof DocumentFragment) {\n            // If given a DocumentFragment, replace content with it\n            if (\n                targetElement.childNodes.length === 1 &&\n                DomHelper.getChildElementCount(targetElement) === 0 &&\n                content.childNodes.length === 1 &&\n                DomHelper.getChildElementCount(content) === 0\n            ) {\n                // Syncing a textNode to a textNode? Use shortcut\n                DomHelper.setInnerText(targetElement, content.firstChild.data);\n            }\n            else {\n                targetElement.innerHTML = '';\n                targetElement.appendChild(content);\n            }\n        }\n        // If content is likely html we set innerHTML\n        else if (html != null && htmlRe.test(html)) {\n            targetElement.innerHTML = String(html);  // convert numbers to strings\n        }\n        else if (content != null) {\n            const { lastDomConfig } = targetElement;\n            // If element had children or actual html content in last sync we force innerHTML to get rid of them\n            if (lastDomConfig?.children?.length || (lastDomConfig?.html && htmlRe.test(targetElement.lastDomConfig.html))) {\n                targetElement.innerHTML = content;\n            }\n            // Otherwise we try to update the text as cheaply as possible (node data if possible)\n            else {\n                DomHelper.setInnerText(targetElement, String(content));\n                // syncChildren won't sync the text node, since we set it here. Instead, it will attempt to release it,\n                // which we prevent using this flag\n                targetElement.didSetTextContent = true;\n            }\n        }\n    }\n\n    static insertTextNode(text, targetElement, callback, refOwner, beforeElement = null) {\n        const newNode = document.createTextNode(text);\n\n        targetElement.insertBefore(newNode, beforeElement);\n\n        if (refOwner) {\n            newNode.$refOwnerId = refOwner.id;\n        }\n\n        callback?.({\n            action        : 'newNode',\n            domConfig     : text,\n            targetElement : newNode\n        });\n    }\n\n    static insertElement(domConfig, targetElement, targetNode, refOwner, syncIdMap, syncId, options) {\n        // Create a new element\n        const newElement = options.ns\n            ? document.createElementNS(options.ns, domConfig.tag || 'svg')\n            : document.createElement(domConfig.tag || 'div');\n\n        // Insert (or append if no targetNode)\n        targetElement.insertBefore(newElement, targetNode);\n\n        // Sync to it\n        DomSync.performSync(options, newElement);\n\n        if (syncId != null) {\n            syncIdMap[syncId] = newElement;\n        }\n\n        // ARIA. In the absence of a defined role or the element being hidden from ARIA,\n        // omit unfocusable elements from the accessibility tree.\n        if (!domConfig.role && !domConfig.tabIndex && !domConfig['aria-hidden'] && !DomHelper.isFocusable(newElement, true) && !newElement.htmlFor) {\n            newElement.setAttribute('role', 'presentation');\n        }\n        if (refOwner) {\n            newElement.$refOwnerId = refOwner.id;\n\n            if (syncId) {\n                newElement.$reference = syncId;\n\n                refOwner.attachRef(syncId, newElement, domConfig);\n            }\n        }\n\n        options.callback?.({\n            action        : 'newElement',\n            domConfig,\n            targetElement : newElement,\n            syncId\n        });\n    }\n\n    //endregion\n\n    //region Children\n\n    static syncChildren(options, targetElement) {\n        let {\n                // eslint-disable-next-line prefer-const\n                domConfig, syncIdField, callback, releaseThreshold, configEquality, ns, refOwner, refsWas, strict,\n                checkEqualityOptions, ignoreRefs\n            }            = options,\n            syncOptions  = domConfig.syncOptions || {}, // eslint-disable-line prefer-const\n            cleanupNodes = null,\n            index, nextNode, syncId;\n\n        // Having specified html or text replaces all inner content, no point in syncing\n        if (domConfig.html ?? domConfig.text) {\n            return;\n        }\n\n        // This will affect the whole subtree since this goes into syncChildOptions (we convert 'children' to true\n        // here because we are only processing the children):\n        ignoreRefs = Boolean(syncOptions.ignoreRefs ?? ignoreRefs);\n\n        if (ignoreRefs) {\n            refOwner = refsWas = null;\n        }\n\n        if ('strict' in syncOptions) {\n            strict = syncOptions.strict;\n        }\n\n        const\n            // Always repopulate the map, since elements might get used by other syncId below\n            newSyncIdMap  = refOwner ? refOwner.byRef : {},\n            sourceConfigs = arraySlice.call(domConfig.children || []),\n            targetNodes   = arraySlice.call(targetElement.childNodes),\n            syncIdMap     = refsWas || targetElement.syncIdMap || {},\n            releasedIdMap = targetElement.releasedIdMap || {},\n            nextTarget    = remove => {\n                // Recursive calls to performSync can teleport elements around the DOM tree (when we are given\n                // the DOM nodes in the domConfig), so be sure to skip over any elements that are no longer children\n                // of our targetElement\n                while (targetNodes.length && targetNodes[0].parentNode !== targetElement) {\n                    targetNodes.shift();\n                }\n\n                return (remove ? targetNodes.shift() : targetNodes[0]) || null;\n            };\n\n        // Each level can optionally specify its own syncIdField, strict and callback, if left out parent levels will be used\n        syncIdField = syncOptions.syncIdField || syncIdField;\n        strict = syncOptions.strict || strict;\n        callback = syncOptions.callback || callback;\n        configEquality = syncOptions.configEquality || configEquality;\n        // Make sure releaseThreshold 0 is respected...\n        releaseThreshold = 'releaseThreshold' in syncOptions ? syncOptions.releaseThreshold : releaseThreshold;\n\n        if (syncIdField) {\n            targetElement.syncIdMap = newSyncIdMap;\n        }\n\n        // Settings to use in all syncs below\n        const syncChildOptions = {\n            checkEqualityOptions : checkEqualityOptions || makeCheckEqualityOptions(),\n            ignoreRefs,\n            refOwner,\n            refsWas,\n            strict,\n            syncIdField,\n            releaseThreshold,\n            callback,\n            configEquality\n        };\n\n        while (sourceConfigs.length) {\n            const sourceConfig = sourceConfigs.shift();\n\n            syncId = null;\n\n            // Allowing null, convenient when using Array.map() to generate children\n            if (!sourceConfig) {\n                continue;\n            }\n\n            // React JSX, pass directly to callback\n            if (DomHelper.isReactElement(sourceConfig)) {\n                callback({ jsx : sourceConfig, targetElement });\n                continue;\n            }\n\n            if (sourceConfig instanceof Node) {\n                nextNode = nextTarget();\n\n                // Widgets may supply the element of another widget in their rendering... just insert it and move on\n                if (sourceConfig !== nextNode) {\n                    targetElement.insertBefore(sourceConfig, nextNode);\n                }\n\n                index = targetNodes.indexOf(sourceConfig);\n\n                if (index > -1) {\n                    targetNodes.splice(index, 1);\n                }\n\n                continue;\n            }\n\n            const isTextNode = typeof sourceConfig === 'string';\n\n            // Used in all syncs\n            syncChildOptions.domConfig = sourceConfig;\n            syncChildOptions.ns = sourceConfig.ns || ns;\n\n            if (!isTextNode) {\n                // If syncIdField was supplied, we should first try to reuse element with\n                // matching \"id\"\n                if (refOwner) {\n                    syncId = sourceConfig.reference;\n                }\n                else if (syncIdField && sourceConfig.dataset) {\n                    syncId = sourceConfig.dataset[syncIdField];\n                }\n\n                // We have an id to look for\n                if (syncId != null && !sourceConfig.unmatched) {\n                    // Find any matching element, either in use or previously released\n                    const syncTargetElement = syncIdMap[syncId] || releasedIdMap[syncId];\n\n                    if (syncTargetElement) {\n                        const { lastDomConfig } = syncTargetElement;\n\n                        // Just relink if flagged with `retainElement` (for example during dragging)\n                        if (syncTargetElement.retainElement) {\n                            // DomSync.relinkElements(syncChildOptions.domConfig, syncTargetElement);\n                        }\n                        // Otherwise sync with the matched element\n                        else if (\n                            DomSync.performSync(syncChildOptions, syncTargetElement)\n                        ) {\n                            // Sync took some action, notify the world\n                            callback?.({\n                                action        : 'reuseOwnElement',\n                                domConfig     : sourceConfig,\n                                targetElement : syncTargetElement,\n                                lastDomConfig,\n                                syncId\n                            });\n                        }\n\n                        // Since it wont sync above when flagged to be retained, we need to apply the flag here\n                        if (sourceConfig.retainElement) {\n                            syncTargetElement.retainElement = true;\n                        }\n\n                        // Cache the element on the syncIdMap for faster retrieval later\n                        newSyncIdMap[syncId] = syncTargetElement;\n\n                        // Remove target from targetElements & release tracking, no-one else is allowed to sync with it\n                        ArrayHelper.remove(targetNodes, syncTargetElement);\n                        delete releasedIdMap[syncId];\n\n                        syncTargetElement.isReleased = false;\n                        nextNode = nextTarget();\n\n                        if (syncTargetElement.parentNode !== targetElement ||\n                            (strict && syncTargetElement.nextSibling !== nextNode)) {\n                            targetElement.insertBefore(syncTargetElement, nextNode);\n                        }\n                    }\n                    else if (strict) {\n                        DomSync.insertElement(sourceConfig, targetElement, nextTarget(), refOwner,\n                            newSyncIdMap, syncId, syncChildOptions);\n                    }\n                    else {\n                        // No match, move to end of queue to not steal some one else's element\n                        sourceConfigs.push(sourceConfig);\n                        // Also flag as unmatched to know that when we reach this element again\n                        sourceConfig.unmatched = true;\n                    }\n\n                    // Node handled, carry on with next one\n                    continue;\n                }\n\n                // Avoid polluting the config object when done\n                if (sourceConfig.unmatched) {\n                    delete sourceConfig.unmatched;\n                }\n            }\n\n            // Skip over any retained elements\n            let beforeNode = null,\n                targetNode = null,\n                cleanupNode;\n\n            while (!targetNode && (cleanupNode = nextTarget(true))) {\n                if (refOwner) {\n                    // When syncing for a refOwner, foreign elements are skipped.\n                    if (cleanupNode.$refOwnerId !== refOwner.id) {\n                        continue;\n                    }\n\n                    if (cleanupNode.$reference) {\n                        // In refOwner mode we always pass strict:true, so this won't happen... but if it did, the\n                        // idea is that ref els do not get cleaned up until the end of the sync process.\n                        if (!strict) {\n                            continue;\n                        }\n\n                        // Since we want to maintain DOM order, this ref el marks the spot where to insert. We also\n                        // don't want to put it into cleanupNodes (see above). We cannot reuse ref els.\n                        beforeNode = cleanupNode;\n                        break;\n                    }\n\n                    // The element is owned by this refOwner and not assigned a reference...\n                    // We can reuse it\n                    targetNode = cleanupNode;\n                }\n                else if (!cleanupNode.retainElement) {\n                    targetNode = cleanupNode;\n                }\n\n                if (!targetNode) {\n                    (cleanupNodes || (cleanupNodes = [])).push(cleanupNode);\n                }\n            }\n\n            if (beforeNode || !targetNode) {\n                if (isTextNode) {\n                    DomSync.insertTextNode(sourceConfig, targetElement, callback, refOwner, beforeNode);\n                }\n                else {\n                    // Will append if beforeNode === null\n                    DomSync.insertElement(sourceConfig, targetElement, beforeNode, refOwner,\n                        newSyncIdMap, syncId, syncChildOptions);\n                }\n            }\n            // We have targets left\n            else {\n                // Matching element tag, sync it\n                if (\n                    !isTextNode &&\n                    targetNode.nodeType === Node.ELEMENT_NODE &&\n                    (sourceConfig.tag || 'div').toLowerCase() === targetNode.tagName.toLowerCase()\n                ) {\n                    const\n                        { lastDomConfig } = targetNode,\n                        result            = DomSync.performSync(syncChildOptions, targetNode);\n\n                    // Remove reused element from release tracking\n                    if (syncIdField && lastDomConfig?.dataset?.[syncIdField] != null) {\n                        const lastSyncId = lastDomConfig.dataset[syncIdField];\n                        delete releasedIdMap[lastSyncId];\n                        // Also remove from syncIdMap to not reuse again in the same sync\n                        delete syncIdMap[lastSyncId];\n                    }\n\n                    if (syncId != null) {\n                        newSyncIdMap[syncId] = targetNode;\n                    }\n\n                    targetNode.isReleased = false;\n\n                    // Only use callback if sync succeeded (anything changed)\n                    result && callback?.({\n                        action        : 'reuseElement',\n                        domConfig     : sourceConfig,\n                        targetElement : targetNode,\n                        lastDomConfig,\n                        syncId\n                    });\n                }\n                // Text node to text node, change text :)\n                else if (isTextNode && targetNode.nodeType === Node.TEXT_NODE) {\n                    targetNode.data = sourceConfig;\n                    // Not using callback for updating text of node, have no usecase for it currently\n                }\n                // Not matching, replace it\n                else {\n                    if (isTextNode) {\n                        DomSync.insertTextNode(sourceConfig, targetElement, callback, refOwner, targetNode);\n                    }\n                    else {\n                        // Will insert\n                        DomSync.insertElement(sourceConfig, targetElement, targetNode, refOwner,\n                            newSyncIdMap, syncId, syncChildOptions);\n                    }\n\n                    targetNode.remove();\n                }\n            }\n        } // while (sourceConfigs.length)\n\n        // If we have a single text node remaining, and we did set node data or textContent, we should not clean it up\n        if (targetElement.didSetTextContent && targetNodes.length === 1 && targetNodes[0].nodeType === Node.TEXT_NODE) {\n            return;\n        }\n\n        // Out of source nodes, remove remaining target nodes\n        while ((nextNode = nextTarget(true))) {\n            // Any remaining nodes that belong to this refOwner need to be cleaned up. If\n            // they have an assigned reference, however, they will be handled at the very\n            // end of the sync process since those elements can move in the node hierarchy.\n            if (!refOwner || (nextNode.$refOwnerId === refOwner.id && !nextNode.$reference)) {\n                (cleanupNodes || (cleanupNodes = [])).push(nextNode);\n            }\n        }\n\n        if (cleanupNodes) {\n            DomSync.syncChildrenCleanup(targetElement, cleanupNodes, newSyncIdMap, callback, refOwner,\n                releaseThreshold, syncIdField);\n        }\n    }\n\n    static syncChildrenCleanup(targetElement, cleanupNodes, newSyncIdMap, callback, refOwner, releaseThreshold, syncIdField) {\n        let releaseCount = 0,\n            ref;\n\n        for (const targetNode of cleanupNodes) {\n            const { lastDomConfig } = targetNode;\n\n            // Text nodes are always just wiped out as they are not recycled\n            if (targetNode.nodeType === Element.TEXT_NODE) {\n                targetNode.remove();\n                continue;\n            }\n\n            // Element might be retained, hands off (for example while dragging)\n            if (!targetNode.retainElement) {\n                // When using syncId to reuse elements, \"release\" left over elements instead of removing them, up to a\n                // limit specified as releaseThreshold, above which elements are removed instead\n                if (!refOwner && syncIdField && (releaseThreshold == null || releaseCount < releaseThreshold)) {\n                    // Prevent releasing already released element\n                    if (!targetNode.isReleased) {\n                        targetNode.className = 'b-released';\n                        targetNode.isReleased = true;\n\n                        // Store released element in syncIdMap, to facilitate reusing it for self later\n                        if (lastDomConfig?.dataset) {\n                            if (!targetElement.releasedIdMap) {\n                                targetElement.releasedIdMap = {};\n                            }\n                            targetElement.releasedIdMap[lastDomConfig.dataset[syncIdField]] = targetNode;\n                        }\n\n                        callback?.({\n                            action        : 'releaseElement',\n                            domConfig     : lastDomConfig,\n                            lastDomConfig,\n                            targetElement : targetNode\n                        });\n\n                        // Done after callback on purpose, to allow checking old className\n                        if (lastDomConfig) {\n                            // Make sure lastDomConfig differs even from the same domConfig applied again\n                            // Do not want to discard it completely since it is needed for diff when reused later\n                            lastDomConfig.isReleased = true;\n\n                            // To force reapply of classes on reuse\n                            if (lastDomConfig.className) {\n                                lastDomConfig.className = 'b-released';\n                            }\n                            if (lastDomConfig.class) {\n                                lastDomConfig.class = 'b-released';\n                            }\n\n                            // Same for style\n                            // (for elements positioned using style, when moved in a non DomSync way, aka EventDrag)\n                            if (lastDomConfig.style) {\n                                lastDomConfig.style = null;\n                            }\n                        }\n                    }\n\n                    releaseCount++;\n                }\n                // In normal sync mode, remove left overs\n                else {\n                    targetNode.remove();\n\n                    if (refOwner) {\n                        ref = targetNode.$reference;\n\n                        if (ref) {\n                            refOwner.detachRef(ref, targetNode, lastDomConfig);\n                        }\n                    }\n\n                    // Remove from \"release tracking\"\n                    if (targetElement.releasedIdMap && syncIdField && lastDomConfig?.dataset) {\n                        delete targetElement.releasedIdMap[lastDomConfig.dataset[syncIdField]];\n                    }\n\n                    callback?.({\n                        action        : 'removeElement',\n                        domConfig     : targetNode.lastDomConfig,\n                        lastDomConfig : targetNode.lastDomConfig,\n                        targetElement : targetNode\n                    });\n                }\n            }\n            else if (syncIdField) {\n                // Keep retained element in map\n                if (lastDomConfig) {\n                    newSyncIdMap[targetNode.dataset[syncIdField]] = targetNode;\n                }\n            }\n        }\n    }\n\n    /**\n     * Remove a child element without syncing, for example when dragging an element to some other parent.\n     * Removes it both from DOM and the parent elements syncMap\n     * @param {HTMLElement} parentElement\n     * @param {HTMLElement} childElement\n     */\n    static removeChild(parentElement, childElement) {\n        if (parentElement.contains(childElement)) {\n            const syncIdMap = parentElement.syncIdMap;\n            if (syncIdMap) {\n                const index = Object.values(syncIdMap).indexOf(childElement);\n                if (index > -1) {\n                    delete syncIdMap[Object.keys(syncIdMap)[index]];\n                }\n            }\n            parentElement.removeChild(childElement);\n        }\n    }\n\n    /**\n     * Adds a child element without syncing, making it properly available for later syncs. Useful for example\n     * when dragging and dropping an element from some other parent.\n     * @param {HTMLElement} parentElement\n     * @param {HTMLElement} childElement\n     * @param {String|Number} syncId\n     */\n    static addChild(parentElement, childElement, syncId) {\n        parentElement.appendChild(childElement);\n\n        if (!parentElement.syncIdMap) {\n            parentElement.syncIdMap = {};\n        }\n\n        parentElement.syncIdMap[syncId] = childElement;\n    }\n\n    /**\n     * Get a child element using a dot separated syncIdMap path.\n     *\n     * ```javascript\n     * DomSync.getChild(eventWrap, 'event.percentBar');\n     * ```\n     *\n     * @param {HTMLElement} element \"root\" element, under which the path starts\n     * @param {String} path Dot '.' separated path of syncIdMap entries\n     * @returns {HTMLElement} Child element or `null` if path did not match any element\n     */\n    static getChild(element, path) {\n        const syncIds = String(path).split('.');\n\n        for (const id of syncIds) {\n            element = element?.syncIdMap?.[id];\n\n            if (!element) {\n                return null;\n            }\n        }\n\n        return element;\n    }\n\n    //endregion\n}\n","import StringHelper from '../StringHelper.js';\n\n/**\n * @module Core/helper/util/Fullscreen\n */\n\n/**\n * Encapsulates the functionality related to switching cross-browser to full screen view and back.\n */\nexport default class Fullscreen {\n    static init() {\n        const fnNames  = ['fullscreenEnabled', 'requestFullscreen', 'exitFullscreen', 'fullscreenElement'],\n            // turns fnNames into function calls to prefixed functions, fullscreenEnabled -> document.mozFullscreenEnabled\n            prefixFn = prefix => fnNames.map(fn => {\n                let result = prefix + StringHelper.capitalize(fn);\n\n                // fullscreenEnabled in Firefox is called fullScreenEnabled\n                if (prefix === 'moz') {\n                    result = result.replace('screen', 'Screen');\n\n                    // #6555 - Crash when clicking full screen button twice\n                    // firefox doesn't support exitFullScreen method\n                    if ('mozCancelFullScreen' in document && fn === 'exitFullscreen') {\n                        result = 'mozCancelFullScreen';\n                    }\n                }\n\n                return result;\n            });\n\n        this.functions = (\n            ('fullscreenEnabled' in document && fnNames) ||\n            ('webkitFullscreenEnabled' in document && prefixFn('webkit')) ||\n            ('mozFullScreenEnabled' in document && prefixFn('moz')) ||\n            ('msFullscreenEnabled' in document && prefixFn('ms')) ||\n            []\n        );\n\n        const eventNames   = [\n                'fullscreenchange',\n                'fullscreenerror'\n            ],\n            msEventNames = [\n                'MSFullscreenChange',\n                'MSFullscreenError'\n            ],\n            prefixEvt    = prefix => eventNames.map(eventName => prefix + StringHelper.capitalize(eventName));\n\n        this.events = (\n            ('fullscreenEnabled' in document && eventNames) ||\n            ('webkitFullscreenEnabled' in document && prefixEvt('webkit')) ||\n            ('mozFullscreenEnabled' in document && prefixEvt('moz')) ||\n            ('msFullscreenEnabled' in document && msEventNames) ||\n            []\n        );\n    }\n\n    /**\n     * True if the fullscreen mode is supported and enabled, false otherwise\n     * @property {Boolean}\n     */\n    static get enabled() {\n        return Boolean(this.functions[0] && document[this.functions[0]]);\n    }\n\n    /**\n     * Request entering the fullscreen mode.\n     * @param {HTMLElement} element Element to be displayed fullscreen\n     * @returns {Promise} A promise which is resolved with a value of undefined when the transition to full screen is complete.\n     */\n    static async request(element) {\n        return this.functions[1] && element?.[this.functions[1]]();\n    }\n\n    /**\n     * Exit the previously entered fullscreen mode.\n     * @returns {Promise} A promise which is resolved once the user agent has finished exiting full-screen mode\n     */\n    static async exit() {\n        return this.functions[2] && document[this.functions[2]]();\n    }\n\n    /**\n     * True if fullscreen mode is currently active, false otherwise\n     * @property {Boolean}\n     */\n    static get isFullscreen() {\n        return !!this.element;\n    }\n\n    static get element() {\n        return this.functions[3] && document[this.functions[3]];\n    }\n\n    /**\n     * Installs the passed listener to fullscreenchange event\n     * @param {Function} fn The listener to install\n     */\n    static onFullscreenChange(fn) {\n        if (this.events[0]) {\n            document.addEventListener(this.events[0], fn);\n        }\n    }\n\n    /**\n     * Uninstalls the passed listener from fullscreenchange event\n     * @param {Function} fn\n     */\n    static unFullscreenChange(fn) {\n        if (this.events[0]) {\n            document.removeEventListener(this.events[0], fn);\n        }\n    }\n}\n\nFullscreen.init();\n","/* globals ResizeObserver: true */\nimport DomHelper, { hasLayout } from './DomHelper.js';\nimport ArrayHelper from './ArrayHelper.js';\n\nlet resizeFireTimer = null;\n\nconst resizedQueue = [],\n    isAbsolutelyPositioned = n => n.nodeType === n.ELEMENT_NODE && n.ownerDocument.defaultView?.getComputedStyle(n).getPropertyValue('position') === 'absolute';\n\n/**\n * @module Core/helper/ResizeMonitor\n */\n\n/**\n * Allows size monitoring of elements (or optionally a Window instance).\n *\n * ```\n * ResizeMonitor.addResizeListener(\n *   myElement,\n *   element => {\n *      console.log(element, ' changed size');\n *   }\n * );\n * ```\n *\n * @internal\n */\nexport default class ResizeMonitor {\n    /**\n     * Adds a resize listener to the passed element which is called when the element\n     * is resized by layout.\n     * @param {HTMLElement} element The element to listen for resizing.\n     * @param {Function} handler The handling function. Will be passed the element.\n     */\n    static addResizeListener(element, handler) {\n        const me = this;\n\n        if (element === document || element === globalThis) {\n            element = document.body;\n        }\n\n        if (element.nodeType === element.DOCUMENT_FRAGMENT_NODE) {\n            element = element.host;\n        }\n\n        if (!element.classList.contains('b-resize-monitored')) {\n            element.classList.add('b-resize-monitored');\n            element._bResizemonitor = {\n                handlers : []\n            };\n        }\n\n        // If we're looking at the document body, use a window resize listener.\n        if (element === document.body) {\n            if (!me.hasWindowResizeListener) {\n                globalThis.addEventListener('resize', me.onWindowResize);\n                me.hasWindowResizeListener = true;\n            }\n        }\n        // Regular element - use ResizeObserver by preference\n        else if (globalThis.ResizeObserver) {\n            if (!me.resizeObserver) {\n                me.resizeObserver = new ResizeObserver(me.onElementResize);\n            }\n            me.resizeObserver.observe(element);\n        }\n        // Polyfill ResizeObserver\n        else {\n            element.classList.add('b-no-resizeobserver');\n\n            const [monitors, expand, shrink] = DomHelper.createElement({\n                parent    : element,\n                className : 'b-resize-monitors',\n                children  : [{\n                    className : 'b-resize-monitor-expand'\n                }, {\n                    className : 'b-resize-monitor-shrink'\n                }]\n            }, { returnAll : true });\n            expand.scrollLeft = expand.scrollTop = shrink.scrollLeft = shrink.scrollTop = 1000000;\n            expand.addEventListener('scroll', me.onSizeMonitorScroll, true);\n            shrink.addEventListener('scroll', me.onSizeMonitorScroll, true);\n\n            // Also need to fake a resize-scroll on DOM mutation\n            (handler.targetMutationMonitor = new MutationObserver((m) => {\n                const\n                    addedNodes   = [],\n                    removedNodes = [];\n\n                // MutationObserver may report a mutation which consists of removing a node and adding it back again.\n                // We need to filter such nodes\n                for (const mr of m) {\n                    if (mr.type === 'childList') {\n                        addedNodes.push.apply(addedNodes, mr.addedNodes);\n                        removedNodes.push.apply(removedNodes, mr.removedNodes);\n                    }\n                }\n\n                const changedNodes = [\n                    ...addedNodes.filter(r => !removedNodes.includes(r)),\n                    ...removedNodes.filter(r => !addedNodes.includes(r))\n                ];\n\n                if (changedNodes.length === 0) {\n                    return;\n                }\n\n                // If the changed nodes were absolutely positioned, then they won't\n                // cause a resize, so return\n                if (changedNodes.length > 0 && changedNodes.every(isAbsolutelyPositioned)) {\n                    return;\n                }\n\n                // We only want the size monitor listener to trigger, so this event must NOT bubble\n                // to any application or other framework listeners.\n                expand.dispatchEvent(new CustomEvent('scroll', { bubbles : false }));\n            })).observe(element, {\n                childList : true,\n                subtree   : true\n            });\n\n            // store reference for easier cleanup later\n            handler.monitorElement = monitors;\n        }\n        element._bResizemonitor.handlers.push(handler);\n    }\n\n    /**\n     * Removes a resize listener from the passed element.\n     * @param {HTMLElement} element The element to listen for resizing.\n     * @param {Function} handler The handling function to remove.\n     */\n    static removeResizeListener(element, handler) {\n        if (element) {\n            if (element === document || element === globalThis) {\n                element = document.body;\n            }\n            const resizeMonitor = element._bResizemonitor;\n\n            let listenerCount = 0;\n\n            if (resizeMonitor && resizeMonitor.handlers) {\n                ArrayHelper.remove(resizeMonitor.handlers, handler);\n\n                // See if we should unobserve the element\n                listenerCount = resizeMonitor.handlers.length;\n            }\n\n            // Down to no listeners.\n            if (!listenerCount) {\n                element.classList.remove('b-resize-monitored');\n\n                if (this.resizeObserver) {\n                    this.resizeObserver.unobserve(element);\n                }\n                // Remove the polyfill resize listeners\n                else {\n                    // remove any added elements\n                    if (handler.monitorElement) {\n                        handler.monitorElement.remove();\n                        handler.monitorElement = null;\n                    }\n                    // remove the DOM mutation observer\n                    if (handler.targetMutationMonitor) {\n                        handler.targetMutationMonitor.disconnect();\n                    }\n                }\n            }\n        }\n    }\n\n    static onElementResize(entries) {\n        for (const resizeObserverEntry of entries) {\n            const\n                resizedElement = resizeObserverEntry.target,\n                resizeMonitor  = resizedElement._bResizemonitor,\n                newRect        = resizeObserverEntry.contentRect || resizedElement.getBoundingClientRect();\n\n            if (hasLayout(resizedElement)) {\n                if (!resizeMonitor.rectangle || newRect.width !== resizeMonitor.rectangle.width || newRect.height !== resizeMonitor.rectangle.height) {\n                    const oldRect = resizeMonitor.rectangle;\n                    resizeMonitor.rectangle = newRect;\n                    for (const resizeHandler of resizeMonitor.handlers) {\n                        resizeHandler(resizedElement, oldRect, newRect);\n                    }\n                }\n            }\n        }\n    }\n\n    static onSizeMonitorScroll(e) {\n        // If no body exists or the element has gone, ignore the event; the listener will be removed automatically.\n        if (document.body?.contains(e.target)) {\n            e.stopImmediatePropagation();\n\n            const monitorNode    = e.target.parentNode,\n                resizedElement = monitorNode.parentNode,\n                resizeMonitor  = resizedElement._bResizemonitor,\n                newRect        = resizedElement.getBoundingClientRect();\n\n            if (!resizeMonitor.rectangle || newRect.width !== resizeMonitor.rectangle.width || newRect.height !== resizeMonitor.rectangle.height) {\n                resizedQueue.push([resizedElement, resizeMonitor.rectangle, newRect]);\n                resizeMonitor.rectangle = newRect;\n                if (!resizeFireTimer) {\n                    resizeFireTimer = requestAnimationFrame(ResizeMonitor.fireResizeEvents);\n                }\n            }\n            monitorNode.firstChild.scrollLeft = monitorNode.firstChild.scrollTop = monitorNode.childNodes[1].scrollTop = monitorNode.childNodes[1].scrollLeft = 1000000;\n        }\n    }\n\n    static onWindowResize(e) {\n        const\n            resizedElement = document.body,\n            resizeMonitor  = resizedElement._bResizemonitor,\n            oldRect        = resizeMonitor.rectangle;\n\n        resizeMonitor.rectangle = document.documentElement.getBoundingClientRect();\n\n        for (const resizeHandler of resizeMonitor.handlers) {\n            resizeHandler(resizedElement, oldRect, resizeMonitor.rectangle);\n        }\n    }\n\n    static fireResizeEvents() {\n        for (const resizedEntry of resizedQueue) {\n            for (const resizeHandler of resizedEntry[0]._bResizemonitor.handlers) {\n                // Checking offsetParent to avoid resizing of elements which are not visible or exist in DOM\n                if (resizedEntry[0].offsetParent) {\n                    resizeHandler.apply(this, resizedEntry);\n                }\n            }\n        }\n        resizeFireTimer = null;\n        resizedQueue.length = 0;\n    }\n\n    static removeGlobalListeners() {\n        globalThis.removeEventListener('resize', this.onWindowResize);\n    }\n}\n","import Base from '../../Base.js';\nimport Rectangle from './Rectangle.js';\nimport Delayable from '../../mixin/Delayable.js';\nimport Events from '../../mixin/Events.js';\nimport DomHelper from '../DomHelper.js';\nimport FunctionHelper from '../FunctionHelper.js';\nimport IdHelper from '../IdHelper.js';\nimport BrowserHelper from '../BrowserHelper.js';\nimport EventHelper from '../EventHelper.js';\nimport ResizeMonitor from '../ResizeMonitor.js';\nimport './Point.js';\nimport DomClassList from './DomClassList.js';\n\n/**\n * @module Core/helper/util/Scroller\n */\n\nconst\n    scrollLiterals       = {\n        auto            : 'auto',\n        true            : 'auto',\n        false           : 'hidden',\n        'hidden-scroll' : 'auto',\n        clip            : BrowserHelper.supportsOverflowClip ? 'clip' : 'hidden'\n    },\n    scrollerCls          = 'b-widget-scroller',\n    defaultScrollOptions = {\n        block : 'nearest'\n    },\n    immediatePromise     = Promise.resolve(),\n    scrollPromise        = element => new Promise(resolve => EventHelper.on({\n        element : element === document.documentElement ? window : element,\n        scroll  : resolve,\n        once    : true\n    })),\n    xAxis                = {\n        x : 1\n    },\n    isScrollable = {\n        auto   : 1,\n        scroll : 1\n    },\n    isScrollableConfig = {\n        true : 1,\n        auto : 1\n    },\n    allScroll = {\n        overflowX : 'auto',\n        overflowY : 'auto'\n    },\n    normalizeEdgeOffset  = edgeOffset => {\n        let top, bottom, start, end;\n\n        if (!edgeOffset) {\n            top = bottom = start = end = 0;\n        }\n        else if (typeof edgeOffset === 'number') {\n            top = bottom = start = end = edgeOffset;\n        }\n        else {\n            top = edgeOffset.top ?? 0;\n            bottom = edgeOffset.bottom ?? 0;\n            start = edgeOffset.start ?? 0;\n            end = edgeOffset.end ?? 0;\n        }\n\n        return { top, bottom, start, end };\n    };\n\n/**\n * Animation options for scrolling.\n *\n * @typedef {Object} AnimateScrollOptions\n * @property {Number} [duration] The number of milliseconds to animate over.\n * @property {String} [easing] The name of an easing function.\n * */\n\n/**\n * Options accepted by some scroll functions. Note that not all options are valid for all functions.\n *\n * @typedef {Object} ScrollOptions\n * @property {'start'|'end'|'center'|'nearest'} [block] How far to scroll the element.\n * @property {Number} [edgeOffset] edgeOffset A margin around the element or rectangle to bring into view.\n * @property {AnimateScrollOptions|Boolean|Number} [animate] Set to `true` to animate the scroll by 300ms,\n * or the number of milliseconds to animate over, or an animation config object.\n * @property {Boolean|Function} [highlight] Set to `true` to highlight the element when it is in view.\n * May be a function which is called passing the element, to provide customized highlighting.\n * @property {Boolean} [focus] Set to `true` to focus the element when it is in view.\n * @property {Boolean} [x] Pass as `false` to disable scrolling in the `X` axis.\n * @property {Boolean} [y] Pass as `false` to disable scrolling in the `Y` axis.\n * @property {String} [column] **Only applies for certain scroll functions in Grid-based products**. Field name or ID of\n * the column, or the Column instance to scroll to.\n * @property {Boolean} [extendTimeAxis=true] **Only applies when scrolling an event into view in Scheduler**. By\n * default, if the requested event is outside the time axis, the time axis is extended.\n */\n\n/**\n * Encapsulates scroll functionality for a Widget. All requests for scrolling and scrolling information\n * must go through a Widget's {@link Core.widget.Widget#config-scrollable} property.\n * @mixes Core/mixin/Events\n * @mixes Core/mixin/Delayable\n * @extends Core/Base\n */\nexport default class Scroller extends Delayable(Events(Base)) {\n    static get configurable() {\n        return {\n            /**\n             * The widget which is to scroll.\n             * @config {Core.widget.Widget}\n             */\n            widget : null,\n\n            /**\n             * The element which is to scroll. Defaults to the {@link Core.widget.Widget#property-overflowElement} of\n             * the configured {@link #config-widget}\n             * @config {HTMLElement}\n             */\n            element : {\n                $config : {\n                    nullify : true\n                },\n                value : null\n            },\n\n            /**\n             * The element, or a selector which identifies a descendant element whose size\n             * will affect the scroll range.\n             * @config {HTMLElement|String}\n             */\n            contentElement : {\n                $config : {\n                    nullify : true\n                },\n                value : null\n            },\n\n            /**\n             * How to handle overflowing in the `X` axis.\n             * May be:\n             * * `'auto'`\n             * * `'visible'`\n             * * `'hidden'`\n             * * `'scroll'`\n             * * `'hidden-scroll'` Meaning scrollable from the UI but with no scrollbar,\n             * for example a grid header. Only on platforms which support this feature.\n             * * `true` - meaning `'auto'`\n             * * `false` - meaning `'hidden'`\n             * * `clip` - Uses `clip` where supported. Where not supported it uses\n             * `hidden` and rolls back any detected scrolls in this dimension.\n             * @config {String|Boolean}\n             */\n            overflowX : null,\n\n            /**\n             * How to handle overflowing in the `Y` axis.\n             * May be:\n             * * `'auto'`\n             * * `'visible'`\n             * * `'hidden'`\n             * * `'scroll'`\n             * * `'hidden-scroll'` Meaning scrollable from the UI but with no scrollbar.\n             * Only on platforms which support this feature.\n             * * `true` - meaning `'auto'`\n             * * `false` - meaning `'hidden'`\n             * * `clip` - Uses `clip` where supported. Where not supported it uses\n             * `hidden` and rolls back any detected scrolls in this dimension.\n             * @config {String|Boolean}\n             */\n            overflowY : null,\n\n            /**\n             * If configured as `true`, the {@link #config-element} is not scrolled but is translated using CSS\n             * transform when controlled by this class's API. Scroll events are fired when the element is translated.\n             * @default\n             * @config {Boolean}\n             */\n            translate : null,\n\n            x : 0,\n            y : 0,\n\n            rtlSource : null\n        };\n    }\n\n    static get delayable() {\n        return {\n            onScrollEnd : {\n                type  : 'buffer',\n                delay : 100\n            }\n        };\n    }\n\n    /**\n     * Fired when scrolling happens on this Scroller's element. The event object is a native `scroll` event\n     * with the described extra properties injected.\n     * @event scroll\n     * @param {Core.widget.Widget} widget The owning Widget which has been scrolled.\n     * @param {Core.helper.util.Scroller} source This Scroller\n     */\n\n    /**\n     * Fired when scrolling finished on this Scroller's element. The event object is the last native `scroll` event\n     * fires by the element with the described extra properties injected.\n     * @event scrollend\n     * @param {Core.widget.Widget} widget The owning Widget which has been scrolled.\n     * @param {Core.helper.util.Scroller} source This Scroller\n     */\n\n    /**\n     * The `overflow-x` setting for the widget. `true` means `'auto'`.\n     * @member {Boolean|String} overflowX\n     */\n\n    /**\n     * The `overflow-y` setting for the widget. `true` means `'auto'`.\n     * @member {Boolean|String} overflowY\n     */\n\n    get isRTL() {\n        return Boolean(this.rtlSource?.rtl);\n    }\n\n    syncOverflowState() {\n        const\n            me          = this,\n            { element } = me,\n            classList   = new DomClassList(element.classList),\n            x           = me.hasOverflowX = element.scrollWidth > element.clientWidth,\n            y           = me.hasOverflowY = element.scrollHeight > element.clientHeight;\n\n        classList.value = element.classList;\n\n        // We use classes to indicate presence of overflow. This carries no rules by default.\n        // Widget SASS may or may not attach rules or use these to select elements.\n        const changed = classList.toggle('b-horizontal-overflow', x) || classList.toggle('b-vertical-overflow', y);\n\n        if (changed) {\n            DomHelper.syncClassList(element, classList);\n\n            if (!me.isConfiguring) {\n                /**\n                 * Fired when either the X or the Y axis changes from not showing a space-consuming scrollbar\n                 * to showing a space-consuming scrollbar or vice-versa.\n                 *\n                 * *_Does not fire on platforms which show overlayed scrollbars_*\n                 * @event overflowChange\n                 * @param {Boolean} x `true` if the X axis overflow, `false` otherwise.\n                 * @param {Boolean} y `true` if the Y axis overflow, `false` otherwise.\n                 * @internal\n                 */\n                me.trigger('overflowChange', { x, y });\n            }\n        }\n    }\n\n    /**\n     * Returns `true` if there is overflow in the specified axis.\n     * @param {'x'|'y'} [axis='y'] The axis to check scrollbar for. Note that this is subtly different to asking\n     * whether an axis is showing a space-consuming scrollbar, see {@link #function-hasScrollbar}.\n     * @internal\n     */\n    hasOverflow(axis = 'y') {\n        const\n            overflowSetting = this[`overflow${axis.toUpperCase()}`],\n            otherAxis       = this[`overflow${axis === 'y' ? 'x' : 'y'}`];\n\n        // If there are no space-consuming scrollbars, we will not be recording overflow\n        // state on change of scrollbars (There will be no resize event when overflow state changes).\n        // If we're not overflow:auto in that axis there will be no resize events from overflow state change.\n        // If the other axis won't be changing size on scroll change we can't track this.\n        // Also, work around Firefox ResizeObserver bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1733042\n        // We don't get to update our scroll status when content size causes scrollbar change\n        // so FF has to measure each time we're asked about overflow.\n        if (!DomHelper.scrollBarWidth || !isScrollableConfig[overflowSetting] || otherAxis === 'hidden-scroll' || BrowserHelper.isFirefox) {\n            const dimension = axis === 'y' ? 'Height' : 'Width';\n\n            return this[`scroll${dimension}`] > this[`client${dimension}`];\n        }\n        else {\n            return this[`hasOverflow${axis.toUpperCase()}`];\n        }\n    }\n\n    /**\n     * Returns `true` if there is a *space-consuming* scrollbar controlling scroll in the specified axis.\n     * @param {'x'|'y'} [axis='y'] The axis to check scrollbar for. Note that this is subtly different to asking\n     * whether an axis *has any* overflow, see {@link #function-hasOverflow}.\n     * @internal\n     */\n    hasScrollbar(axis = 'y') {\n        const { element } = this;\n\n        if (element && DomHelper.scrollBarWidth) {\n            const\n                vertical   = axis === 'y',\n                dimension  = vertical ? 'Width' : 'Height',\n                clientSize = element[`client${dimension}`],\n                borderSize = parseInt(DomHelper.getStyleValue(element, `border${vertical ? 'Left' : 'Top'}Width`)) +\n                    parseInt(DomHelper.getStyleValue(element, `border${vertical ? 'Right' : 'Bottom'}Width`)),\n                difference = (element[`offset${dimension}`] - borderSize) - clientSize;\n\n            // If the difference between the content width and the client width is\n            // scrollBarWidth, then we have a scrollbar\n            return Math.abs(difference - DomHelper.scrollBarWidth) < 2;\n        }\n    }\n\n    /**\n     * Partners this Scroller with the passed scroller in order to sync the scrolling position in the passed axes\n     * @param {Core.helper.util.Scroller} otherScroller\n     * @param {String|Object} [axes='x'] `'x'` or `'y'` or `{x: true/false, y: true/false}` axes to sync\n     * @param {Boolean} [axes.x] Sync horizontal scroll\n     * @param {Boolean} [axes.y] Sync vertical scroll\n     */\n    addPartner(otherScroller, axes = xAxis) {\n        const me = this;\n\n        //<debug>\n        if (!(otherScroller instanceof Scroller)) {\n            throw new Error('Scroller partner must be another Scroller');\n        }\n        //</debug>\n        if (typeof axes === 'string') {\n            axes = {\n                [axes] : 1\n            };\n        }\n\n        if (!me.partners) {\n            me.partners = {};\n        }\n\n        me.partners[otherScroller.id] = {\n            scroller : otherScroller,\n            axes\n        };\n\n        // Initial sync of the other axis to match our current state\n        if (axes.x) {\n            otherScroller.x = me.x;\n        }\n        if (axes.y) {\n            otherScroller.y = me.y;\n        }\n\n        // It's a mutual relationship - the other scroller partners with us.\n        if (!otherScroller.isPartneredWith(me)) {\n            otherScroller.addPartner(me, axes);\n        }\n    }\n\n    eachPartner(fn) {\n        const { partners } = this;\n\n        if (partners) {\n            Object.values(partners).forEach(fn);\n        }\n    }\n\n    /**\n     * Breaks the link between this Scroller and the passed Scroller set up by the\n     * {@link #function-addPartner} method.\n     * @param {Core.helper.util.Scroller} otherScroller The Scroller to unlink from.\n     */\n    removePartner(otherScroller) {\n        if (this.isPartneredWith(otherScroller)) {\n            delete this.partners[otherScroller.id];\n            otherScroller.removePartner(this);\n        }\n    }\n\n    isPartneredWith(otherScroller) {\n        return Boolean(this.partners?.[otherScroller.id]);\n    }\n\n    /**\n     * Breaks the link between this Scroller and all other Scrollers set up by the\n     * {@link #function-addPartner} method.\n     * @internal\n     */\n    clearPartners() {\n        if (this.partners) {\n            Object.values(this.partners).forEach(otherScroller => otherScroller.scroller.removePartner(this));\n        }\n    }\n\n    /**\n     * Scrolls the passed element or {@link Core.helper.util.Rectangle} into view according to the passed options.\n     * @param {HTMLElement|Core.helper.util.Rectangle} element The element or a Rectangle in document space to scroll\n     * into view.\n     * @param {ScrollOptions} [options] How to scroll.\n     * @returns {Promise} A promise which is resolved when the element has been scrolled into view.\n     */\n    async scrollIntoView(element, options = defaultScrollOptions) {\n        const\n            me                 = this,\n            { isRectangle }    = element,\n            originalRect       = isRectangle ? element : Rectangle.from(element),\n            { xDelta, yDelta } = me.getDeltaTo(element, options),\n            result             = me.scrollBy(xDelta, yDelta, options);\n\n        if (options.highlight || options.focus) {\n            result.then(() => {\n                if (isRectangle) {\n                    element = originalRect.translate(-xDelta, -yDelta);\n                }\n                if (options.highlight) {\n                    // Not coercible to a number means its a function or name of a function\n                    if (isNaN(options.highlight)) {\n                        (me.widget || me).callback(options.highlight, null, [element]);\n                    }\n                    // Otherwise, it's truthy or falsy\n                    else {\n                        DomHelper.highlight(element, me);\n                    }\n                }\n                if (options.focus) {\n                    DomHelper.focusWithoutScrolling(element);\n                }\n            });\n        }\n        return result;\n    }\n\n    /**\n     * Scrolls the passed element into view according to the passed options.\n     * @param {HTMLElement} element The element in document space to scroll into view.\n     * @param {ScrollOptions} [options] How to scroll.\n     * @returns {Promise} A promise which is resolved when the element has been scrolled into view.\n     */\n    static async scrollIntoView(element, options = defaultScrollOptions, rtl = false) {\n        const\n            target     = Rectangle.from(element),\n            animate    = (typeof options === 'object') ? options.animate : options,\n            scrollable = Scroller._globalScroller || (Scroller._globalScroller = new Scroller()),\n            deltas     = [];\n\n        scrollable.rtlSource = { rtl };\n\n        let totalX = 0, totalY = 0, result;\n\n        // Build up all the scroll deltas necessary to bring the requested element into view\n        for (let ancestor = element.parentNode; ancestor.nodeType === Node.ELEMENT_NODE; ancestor = ancestor.parentNode) {\n            if (ancestor === document.body && ancestor !== document.scrollingElement) {\n                continue;\n            }\n            // The <html> element, although it scrolls is overflow:visible by default.\n            const style = ancestor === document.scrollingElement ? allScroll : ancestor.ownerDocument.defaultView.getComputedStyle(ancestor);\n\n            // If the ancestor overflows and scrolls in a dimension we are being asked to scroll in\n            // Accumulate a scroll command for the ancestor.\n            if (\n                (options.y !== false && isScrollable[style.overflowY] && ancestor.scrollHeight > ancestor.clientHeight) ||\n                (options.x !== false && isScrollable[style.overflowX] && ancestor.scrollWidth > ancestor.clientWidth)\n            ) {\n                // Global Scrollable\n                scrollable.element = ancestor;\n\n                // In case same element used as last time and didn't make it to the updater.\n                scrollable.positionDirty = true;\n\n                // See if the target is outside of this ancestor\n                const { xDelta, yDelta } = scrollable.getDeltaTo(target, options);\n\n                if (xDelta || yDelta) {\n                    deltas.push({\n                        element : ancestor,\n                        x       : ancestor.scrollLeft,\n                        y       : ancestor.scrollTop,\n                        xDelta,\n                        yDelta\n                    });\n                    target.translate(-xDelta, -yDelta);\n                    totalX += xDelta;\n                    totalY += yDelta;\n                }\n            }\n        }\n\n        // If scrolling was found to be necessary\n        if (deltas.length) {\n            const\n                absX = Math.abs(totalX),\n                absY = Math.abs(totalY);\n\n            let duration = animate && (typeof animate === 'number' ? animate : (typeof animate.duration === 'number' ? animate.duration : 300));\n\n            // Only go through animation if there is significant scrolling to do.\n            if (duration && (absX > 10 || absY > 10)) {\n                // For small distances, constrain duration\n                if (Math.max(absX, absY) < 50) {\n                    duration = Math.min(duration, 500);\n                }\n\n                result = scrollable.scrollAnimation = FunctionHelper.animate(duration, progress => {\n                    const isEnd = progress === 1;\n\n                    for (const { element, x, y, xDelta, yDelta } of deltas) {\n                        scrollable.element = element;\n\n                        if (xDelta) {\n                            scrollable.x = Math[rtl ? 'min' : 'max'](x + (isEnd ? xDelta : Math.round(xDelta * progress)), 0);\n                        }\n                        if (yDelta) {\n                            scrollable.y = Math.max(y + (isEnd ? yDelta : Math.round(yDelta * progress)), 0);\n                        }\n                    }\n                }, null, animate.easing);\n                result.then(() => {\n                    scrollable.scrollAnimation = null;\n                });\n            }\n            // No animation\n            else {\n                for (const { element, xDelta, yDelta } of deltas) {\n                    element.scrollTop += yDelta;\n                    element.scrollLeft += xDelta;\n                }\n                result = scrollPromise(deltas[deltas.length - 1].element);\n            }\n        }\n        else {\n            result = immediatePromise;\n        }\n\n        // Postprocess element after scroll.\n        if (options.highlight || options.focus) {\n            result.then(() => {\n                if (options.highlight) {\n                    // Not coercible to a number means it's a function or name of a function\n                    if (isNaN(options.highlight)) {\n                        scrollable.callback(options.highlight, null, [element]);\n                    }\n                    // Otherwise, it's truthy or falsy\n                    else {\n                        DomHelper.highlight(element, scrollable);\n                    }\n                }\n                if (options.focus) {\n                    element.focus();\n                }\n            });\n        }\n\n        return result;\n    }\n\n    /**\n     * Scrolls by the passed deltas according to the passed options.\n     * @param {Number} [xDelta=0] How far to scroll in the X axis.\n     * @param {Number} [yDelta=0] How far to scroll in the Y axis.\n     * @param {Object|Boolean} [options] How to scroll. May be passed as `true` to animate.\n     * @param {Boolean} [options.silent] Set to `true` to suspend `scroll` events during scrolling.\n     * @param {AnimateScrollOptions|Boolean|Number} [options.animate] Set to `true` to animate the scroll by 300ms,\n     * or the number of milliseconds to animate over, or an animation config object.\n     * @returns {Promise} A promise which is resolved when the scrolling has finished.\n     */\n    async scrollBy(xDelta = 0, yDelta = 0, options = defaultScrollOptions) {\n        const\n            me      = this,\n            animate = (typeof options === 'object') ? options.animate : options,\n            absX    = Math.abs(xDelta),\n            absY    = Math.abs(yDelta);\n\n        if (me.scrollAnimation) {\n            me.scrollAnimation.cancel();\n            me.scrollAnimation = null;\n        }\n\n        // Only set the flag if there is going to be scrolling done.\n        // It is cleared by the scrollEnd handler, so there must be scrolling.\n        if (xDelta || yDelta) {\n            me.silent = options.silent;\n        }\n\n        let duration = animate && (typeof animate === 'number' ? animate : (typeof animate.duration === 'number' ? animate.duration : 300));\n\n        // Only go through animation if there is significant scrolling to do.\n        if (duration && (absX > 10 || absY > 10)) {\n            const { x, y } = me;\n            let lastX = x,\n                lastY = y;\n\n            // For small distances, constrain duration\n            if (Math.max(absX, absY) < 50) {\n                duration = Math.min(duration, 500);\n            }\n\n            me.scrollAnimation = FunctionHelper.animate(duration, progress => {\n                const isEnd = progress === 1;\n                if (xDelta) {\n                    // If the user, or another process has changed the position since last time, abort.\n                    // Unless called with the force option to proceed regardless.\n                    if (me.x !== lastX && !options.force) {\n                        return me.scrollAnimation?.cancel();\n                    }\n                    me.x = Math.max(x + (isEnd ? xDelta : Math.round(xDelta * progress)), 0);\n                }\n                if (yDelta) {\n                    // If the user, or another process has changed the position since last time, abort.\n                    // Unless called with the force option to proceed regardless.\n                    if (me.y !== lastY && !options.force) {\n                        return me.scrollAnimation?.cancel();\n                    }\n                    me.y = Math.max(y + (isEnd ? yDelta : Math.round(yDelta * progress)), 0);\n                }\n                // Store actual position from DOM\n                lastX = me.x;\n                lastY = me.y;\n            }, me, animate.easing);\n\n            me.element.classList.add('b-scrolling');\n\n            me.scrollAnimation.then(() => {\n                if (!me.isDestroyed) {\n                    me.element.classList.remove('b-scrolling');\n                    me.scrollAnimation = null;\n                }\n            });\n            return me.scrollAnimation;\n        }\n        else {\n            if (xDelta | yDelta) {\n                const\n                    xBefore = me.x,\n                    yBefore = me.y;\n\n                me.x += xDelta;\n                me.y += yDelta;\n\n                // Another change check for the possibility that setting me.x doesn't really scroll any significant\n                // amount of pixels.\n                if (me.x !== xBefore || me.y !== yBefore) {\n                    return scrollPromise(me.element);\n                }\n            }\n            return immediatePromise;\n        }\n    }\n\n    /**\n     * Scrolls to the passed position according to the passed options.\n     * @param {Number} [toX=0] Where to scroll to in the X axis.\n     * @param {Number} [toY=0] Where to scroll to in the Y axis.\n     * @param {Object|Boolean} [options] How to scroll. May be passed as `true` to animate.\n     * @param {AnimateScrollOptions|Boolean|Number} [options.animate] Set to `true` to animate the scroll by 300ms,\n     * or the number of milliseconds to animate over, or an animation config object.\n     * @returns {Promise} A promise which is resolved when the scrolling has finished.\n     */\n    async scrollTo(toX, toY, options) {\n        const\n            { x, y } = this,\n            xDelta   = toX == null ? 0 : toX - x,\n            yDelta   = toY == null ? 0 : toY - y;\n\n        return this.scrollBy(xDelta, yDelta, options);\n    }\n\n    doDestroy() {\n        const me = this;\n\n        if (me._element) {\n            me._element.removeEventListener('scroll', me.scrollHandler);\n            me.wheelListenerRemover?.();\n        }\n\n        me.scrollAnimation?.cancel();\n\n        Object.values(me.partners || {}).forEach(({ scroller }) => scroller.removePartner(me));\n\n        super.doDestroy();\n    }\n\n    /**\n     * Respond to style changes to monitor scroll *when this Scroller is in `translate: true` mode.*\n     * @param {Object[]} mutations The ElementMutation records.\n     * @private\n     */\n    onElMutation(mutations) {\n        const\n            me     = this,\n            [x, y] = DomHelper.getTranslateXY(me.element);\n\n        // If the mutation was due to a change in the translateX/Y styles, this is\n        // a scroll event, so inform observers and partners\n        if (me._x !== -x || me.y !== -y) {\n            const scrollEvent = new CustomEvent('scroll', { bubbles : true });\n\n            Object.defineProperty(scrollEvent, 'target', {\n                get : () => me.element\n            });\n\n            me.onScroll(scrollEvent);\n        }\n    }\n\n    onElResize() {\n        const\n            me         = this,\n            { widget } = me;\n\n        // If it's not animating its size, sync immediately\n        if (!widget?.isAnimating) {\n            me.syncOverflowState();\n        }\n        // If it's animating, sync chen it's finished\n        else if (widget.findListener('animationend', 'onElResize', me) === -1) {\n            widget.ion({\n                animationEnd : 'onElResize',\n                thisObj      : me,\n                once         : true\n            });\n        }\n    }\n\n    onScroll(e) {\n        const\n            me = this,\n            { _x, _y, element } = me;\n\n        let vetoed = 0;\n\n        // Until overflow:clip is 100% supported just veto (and rollback) scrolls in clipped axes\n        if (me.overflowX === 'clip' && element.scrollLeft !== _x) {\n            element.scrollLeft = _x;\n            ++vetoed;\n        }\n        if (me.overflowY === 'clip' && element.scrollTop !== _y) {\n            element.scrollTop = _y;\n            ++vetoed;\n        }\n        if (vetoed === 2) {\n            return;\n        }\n\n        if (!me.widget || !me.widget.isDestroyed) {\n            // Don't read the value until we have to. The x & y getters will check this flag\n            me.positionDirty = true;\n\n            if (!element.classList.contains('b-scrolling')) {\n                element.classList.add('b-scrolling');\n            }\n\n            e.widget = me.widget;\n\n            // If we have the scroll silent flag, do not fire the event.\n            if (!me.silent) {\n                me.trigger('scroll', e);\n            }\n\n            // Keep partners in sync\n            me.syncPartners();\n\n            // If this scroll impulse was from a controlling partner, clear that now\n            me.controllingPartner = null;\n\n            // Buffered method will fire in 100ms, unless another scroll event comes round.\n            // In which case execution will be pushed out by another 100ms.\n            me.onScrollEnd(e);\n        }\n    }\n\n    /**\n     * Syncs all attached scrolling partners with the scroll state of this Scroller.\n     * @param {Boolean} force Allow this to sync a partner which is controlling this via a sync.\n     * @param {Boolean} propagate Propagate any change immediately onwards through further linked\n     * partners immediately rather than relying on the partner to react to its own scroll event.\n     * @internal\n     */\n    syncPartners(force, propagate) {\n        const me = this;\n\n        // Keep partners in sync\n        if (me.partners) {\n            Object.values(me.partners).forEach(({ axes, scroller }) => {\n                // Don't feed back to the one who's just told us to scroll here.\n                // Unless we have assumed command. For example Scheduler timeline infinite scrolling\n                // has reset the scroll position and the partner who thinks it's controlling\n                // must stay in sync with that reset.\n                if (scroller !== me.controllingPartner || force) {\n\n                    // Propagate means update all linked partners immediately rather than scroller reacting\n                    // to its scroll events to sync its partners. Only bother if the scroller actually changed.\n                    if (scroller.sync(me, axes) && propagate) {\n                        scroller.syncPartners(force, propagate);\n                    }\n                }\n            });\n        }\n    }\n\n    onScrollEnd(e) {\n        const me = this;\n\n        if (me.silent) {\n            me.silent = false;\n        }\n\n        me.trigger('scrollEnd', e);\n\n        // Controlling partner is required for scrollable not to change its partners on scroll. This method is buffered\n        // and landing here essentially means that no scrolling has occurred during the onScrollEnd buffer\n        // time. We can safely cleanup controlling partner here.\n        // https://github.com/bryntum/support/issues/1095\n        me.controllingPartner = null;\n\n        me.element.classList.remove('b-scrolling');\n    }\n\n    /**\n     * Returns the xDelta and yDelta values in an object from the current scroll position to the\n     * passed element or Rectangle.\n     * @param {HTMLElement|Core.helper.util.Rectangle} element The element or a Rectangle to calculate deltas for.\n     * @param {Object} [options] How to scroll.\n     * @param {'start'|'end'|'center'|'nearest'} [options.block] How far to scroll the element.\n     * @param {Number} [options.edgeOffset] A margin around the element or rectangle to bring into view.\n     * @param {Boolean} [options.x] Pass as `false` to disable scrolling in the `X` axis.\n     * @param {Boolean} [options.y] Pass as `false` to disable scrolling in the `Y` axis.\n     * @returns {Object} `{ xDelta, yDelta }`\n     * @internal\n     */\n    getDeltaTo(element, options) {\n        const me = this;\n\n        // scroller may belong to a collapsed subgrid widget\n        if (!me.viewport) {\n            return {\n                xDelta : 0,\n                yDelta : 0\n            };\n        }\n\n        const\n            {\n                x,\n                y,\n                scrollWidth,\n                scrollHeight,\n                isRTL\n            }            = me,\n            elementRect  = (element instanceof Rectangle ? element : Rectangle.from(element)),\n            block        = options.block || 'nearest',\n            scrollerRect = me.viewport,\n            edgeOffset   = normalizeEdgeOffset(options.edgeOffset),\n            // Only include the offset round the target if the viewport is big enough to accommodate it.\n            xOffset      = scrollerRect.width >= elementRect.width + (edgeOffset.start + edgeOffset.end) ? edgeOffset : { start : 0, end : 0 },\n            yOffset      = scrollerRect.height >= elementRect.height + (edgeOffset.top + edgeOffset.bottom) ? edgeOffset : { top : 0, bottom : 0 },\n            constrainTo  = new Rectangle(\n                isRTL ? (scrollerRect.right - -x - scrollWidth) : (scrollerRect.x - x),\n                scrollerRect.y - y,\n                scrollWidth,\n                scrollHeight\n            ),\n            elRect       = elementRect.clone().adjust(-xOffset.start, -yOffset.top, xOffset.end, yOffset.bottom).constrainTo(constrainTo),\n            targetRect   = elRect.clone(),\n            // X scrolling is always +ve along the X scroll axis\n            xFactor      = me.isRTL ? -1 : 1;\n\n        let xDelta = 0,\n            yDelta = 0;\n\n        if (block === 'start') {\n            targetRect.moveTo(scrollerRect.x + (me.isRTL ? scrollerRect.width : 0), scrollerRect.y);\n            xDelta = elRect.x - targetRect.x;\n            yDelta = elRect.y - targetRect.y;\n        }\n        else if (block === 'end') {\n            if (me.isRTL) {\n                targetRect.moveTo(scrollerRect.left + (me.isRTL ? targetRect.width : 0), scrollerRect.y);\n            }\n            else {\n                targetRect.translate(scrollerRect.right - targetRect.right, scrollerRect.bottom - targetRect.bottom);\n            }\n            xDelta = elRect.x - targetRect.x;\n            yDelta = elRect.y - targetRect.y;\n        }\n        else {\n            // Calculate deltas unless the above has done that for non-fitting target\n            if (block === 'center') {\n                const center = scrollerRect.center;\n\n                targetRect.moveTo(center.x - targetRect.width / 2, center.y - targetRect.height / 2);\n                xDelta = xDelta || elRect.x - targetRect.x;\n                yDelta = yDelta || elRect.y - targetRect.y;\n            }\n            // Use \"nearest\"\n            else {\n                // Can't fit width in, scroll what is possible into view so that start is visible.\n                if (targetRect.width > scrollerRect.width) {\n                    xDelta = targetRect.x - scrollerRect.x;\n                }\n                // If it's *possible* to scroll to nearest x, calculate the delta\n                else {\n                    if (targetRect.right > scrollerRect.right) {\n                        xDelta = targetRect.right - scrollerRect.right;\n                    }\n                    else if (targetRect.x < scrollerRect.x) {\n                        xDelta = targetRect.x - scrollerRect.x;\n                    }\n                }\n\n                // Can't fit height in, scroll what is possible into view so that start is visible.\n                if (targetRect.height > scrollerRect.height) {\n                    yDelta = targetRect.y - scrollerRect.y;\n                }\n                // If it's *possible* to scroll to nearest y, calculate the delta\n                else {\n                    if (targetRect.bottom > scrollerRect.bottom) {\n                        yDelta = targetRect.bottom - scrollerRect.bottom;\n                    }\n                    else if (targetRect.y < scrollerRect.y) {\n                        yDelta = targetRect.y - scrollerRect.y;\n                    }\n                }\n            }\n        }\n\n        // Ensure x scrolling proceeds in +ve direction in RTL mode\n        xDelta = xFactor * Math.round(xDelta);\n        yDelta = Math.round(yDelta);\n\n        // Do not allow deltas which would produce -ve scrolling or scrolling past the maxX/Y\n        return {\n            // When calculating how much delta is necessary to scroll the targetRect to the center\n            // constrain that to what is *possible*. If what you are trying to scroll into the\n            // center is hard against the right edge of the scroll range, then it cannot scroll\n            // to the center, and the result must reflect that even though scroll is self limiting.\n            // This is because highlighting the requested \"element\", if that element is in fact\n            // a Rectangle, uses a temporary element placed at the requested region which\n            // MUST match where the actual scroll has moved the requested region.\n            xDelta : options.x === false ? 0 : Math.max(Math.min(xDelta, me.maxX - x), -x),\n            yDelta : options.y === false ? 0 : Math.max(Math.min(yDelta, me.maxY - y), -y)\n        };\n    }\n\n    /**\n     * A {@link Core/helper/util/Rectangle} describing the bounds of the scrolling viewport.\n     * @property {Core.helper.util.Rectangle}\n     */\n    get viewport() {\n        return Rectangle.client(this.element);\n    }\n\n    updateWidget(widget) {\n        this.rtlSource = this.owner = widget;\n    }\n\n    updateElement(element, oldElement) {\n        const me = this;\n\n        // The global Scroller doesn't monitor its element.\n        // It's only used for *commanding* scrolls.\n        if (me === Scroller._globalScroller) {\n            me._element = element;\n            me.positionDirty = true;\n            return;\n        }\n\n        const\n            scrollHandler = me.scrollHandler || (me.scrollHandler = me.onScroll.bind(me)),\n            resizeHandler = me.resizeHandler || (me.resizeHandler = me.onElResize.bind(me));\n\n        if (oldElement) {\n            if (me.translate) {\n                me.mutationObserver?.disconnect(oldElement);\n            }\n            else {\n                oldElement.removeEventListener('scroll', scrollHandler);\n                oldElement.classList.remove(scrollerCls);\n                oldElement.style.overflowX = oldElement.style.overflowY = '';\n            }\n            ResizeMonitor.removeResizeListener(oldElement, resizeHandler);\n        }\n\n        if (element) {\n            if (me.translate) {\n                if (!me.mutationObserver) {\n                    me.mutationObserver = new MutationObserver(me.mutationHandler || (me.mutationHandler = me.onElMutation.bind(me)));\n                }\n                me._x = me._y = 0;\n                if (document.contains(element)) {\n                    const [x, y] = DomHelper.getTranslateXY(element);\n                    me._x = -x;\n                    me._y = -y;\n                }\n                me.mutationObserver.observe(element, { attributes : true });\n            }\n            else {\n                element.addEventListener('scroll', scrollHandler);\n                element.classList.add(scrollerCls);\n            }\n            ResizeMonitor.addResizeListener(element, resizeHandler);\n\n            if (!me.widget) {\n                me.rtlSource = {\n                    get rtl() {\n                        return DomHelper.getStyleValue(element, 'direction') === 'rtl';\n                    }\n                };\n            }\n\n            if (me.isRTL) {\n                element.classList.add('b-rtl');\n            }\n\n            // Ensure the overflow configs, which are unable to process themselves\n            // in the absence of the element get applied to the newly arrived element.\n            if (me.positionDirty) {\n                me.updateOverflowX(me.overflowX);\n                me.updateOverflowY(me.overflowY);\n            }\n\n            // Keep flags synced from the start\n            me.syncOverflowState();\n\n            // Apply initially configured scroll position if we have non-zero positions\n            if (me.isConfiguring) {\n                me._x && me.updateX(me._x);\n                me._y && me.updateY(me._y);\n            }\n        }\n\n        me.positionDirty = true;\n    }\n\n    /**\n     * The horizontal scroll position of the widget.\n     *\n     * Note that this is always +ve. Horizontal scrolling using the `X` property akways proceeds\n     * in the +ve direction.\n     *\n     * @property {Number}\n     */\n    get x() {\n        const\n            me          = this,\n            { element } = me;\n\n        if (element && me.positionDirty) {\n            if (me.translate) {\n                const [x, y] = DomHelper.getTranslateXY(element);\n                me._x = -x;\n                me._y = -y;\n            }\n            else {\n                // A Scroller's conception is that X is an offset from the origin in whatever the direction is.\n                me._x = Math.abs(element.scrollLeft);\n                me._y = element.scrollTop;\n            }\n            me.positionDirty = false;\n        }\n        return me._x;\n    }\n\n    /**\n     * The natural DOM horizontal scroll position of the widget.\n     *\n     * Note that this proceeds from 0 into negative space in RTL mode.\n     *\n     * @property {Number}\n     */\n    get scrollLeft() {\n        return this.element.scrollLeft;\n    }\n\n    changeX(x) {\n        // We do not accept the concept of -ve X values.\n        // Although scrolling in an RTL element sets scrollLeft to -ve, a Scroller's conception\n        // is that X is an offset from the origin in whatever the direction is. So all code should\n        // use this concept.\n        x = Math.max(x, 0);\n\n        // Only process initial X if we were configured to start at non-zero\n        if (!this.isConfiguring || x) {\n            return x;\n        }\n        this._x = x;\n    }\n\n    updateContentElement(contentElement) {\n        if (contentElement) {\n            contentElement = typeof contentElement === 'string' ? this.element.querySelector(contentElement) : contentElement;\n\n            ResizeMonitor.addResizeListener(contentElement, this.resizeHandler);\n        }\n    }\n\n    updateX(x) {\n        const { element } = this;\n\n        // When element is outside of DOM, this can have no effect\n        if (element && !this.widget?.isConfiguring) {\n            // https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeft\n            // On systems using display scaling, scrollLeft may give you a decimal value.\n            // Round possible decimal value to integer\n            x = Math.round(x);\n\n            this.trigger('scrollStart', { x });\n\n            if (this.translate) {\n                DomHelper.setTranslateX(element, -x);\n            }\n            else {\n                element.scrollLeft = this.isRTL ? -x : x;\n            }\n        }\n\n        // The scroll position will need to be read before we can return it.\n        // Do not read it back now, we may not have our element, or if we do,\n        // that would cause a forced synchronous layout.\n        this.positionDirty = true;\n    }\n\n    /**\n     * Syncs this Scroller with the passed Scroller in the passed axes.\n     * @param {Core.helper.util.Scroller} controllingPartner The Scroller which is dictating our new scroll position.\n     * @param {Object} axes `{x : <boolean>, y : <boolean> }` which axes to sync.\n     * @param {Boolean} axes.x Sync horizontal scroll.\n     * @param {Boolean} axes.y Sync vertical scroll.\n     * @returns {Boolean} `true` if this Scroller needed the passed axes syncing, `false`\n     * if no changes were made.\n     * @internal\n     */\n    sync(controllingPartner, axes) {\n        const\n            me       = this,\n            { x, y } = axes;\n\n        let result = false;\n\n        if (x != null) {\n            if (me.x !== controllingPartner.x) {\n                // Only set controlling partner when scroll will actually change. This helps to increase stability of\n                // state restoring API.\n                me.controllingPartner = controllingPartner;\n\n                me.x = controllingPartner.x;\n                result = true;\n            }\n        }\n        if (y != null) {\n            if (me.y !== controllingPartner.y) {\n                me.controllingPartner = controllingPartner;\n\n                me.y = controllingPartner.y;\n                result = true;\n            }\n        }\n\n        // Returns true if the sync was needed\n        return result;\n    }\n\n    /**\n     * The vertical scroll position of the widget.\n     * @property {Number}\n     */\n    get y() {\n        const\n            me          = this,\n            { element } = me;\n\n        if (element && me.positionDirty) {\n            if (me.translate) {\n                const [x, y] = DomHelper.getTranslateXY(element);\n                me._x = -x;\n                me._y = -y;\n            }\n            else {\n                me._x = element.scrollLeft;\n                me._y = element.scrollTop;\n            }\n            me.positionDirty = false;\n        }\n        return me._y;\n    }\n\n    changeY(y) {\n        // Only process initial Y if we were configured to start at non-zero\n        if (!this.isConfiguring || y) {\n            return y;\n        }\n        this._y = y;\n    }\n\n    updateY(y) {\n        const { element, widget } = this;\n\n        // When element is outside of DOM, this can have no effect\n        if (element && !widget?.isConfiguring) {\n            this.trigger('scrollStart', { y });\n\n            if (this.translate) {\n                DomHelper.setTranslateY(element, -y);\n            }\n            else {\n                element.scrollTop = y;\n            }\n        }\n\n        // The scroll position will need to be read before we can return it.\n        // Do not read it back now, we may not have our element, or if we do,\n        // that would cause a forced synchronous layout.\n        this.positionDirty = true;\n    }\n\n    /**\n     * The maximum `X` scrollable position of the widget.\n     * @property {Number}\n     * @readonly\n     */\n    get maxX() {\n        return this.scrollWidth - this.clientWidth;\n    }\n\n    /**\n     * The maximum `Y` scrollable position of the widget.\n     * @property {Number}\n     * @readonly\n     */\n    get maxY() {\n        return this.scrollHeight - this.clientHeight;\n    }\n\n    /**\n     * The furthest possible `scrollLeft` position of the widget. Will be -ve\n     * if in writing direction is RTL.\n     * @property {Number}\n     * @readonly\n     */\n    get lastScrollLeft() {\n        return (this.scrollWidth - this.clientWidth) * (this.isRTL ? -1 : 1);\n    }\n\n    updateOverflowX(overflowX, oldOverflowX) {\n        const\n            me                     = this,\n            { element, translate } = me,\n            { style, classList }   = element;\n\n        if (oldOverflowX === 'hidden-scroll') {\n            classList.remove('b-hide-scroll');\n        }\n\n        // Scroll, but without showing scrollbars.\n        // For example a grid header. Only works on platforms which\n        // support suppression of scrollbars through CSS.\n        if (overflowX === 'hidden-scroll' && !translate) {\n            const otherAxisScrollable = isScrollable[style.overflowY];\n\n            // Can't do one axis hidden-scroll, and the other scrollable because the b-hide-scroll\n            // class hides \"all\" scrollbars, so we have to make this axis hidden and use a wheel\n            // listener to scroll the content.\n            if (otherAxisScrollable) {\n                overflowX = 'hidden';\n\n                // Adds a wheel listener if we don't already have one.\n                me.enableWheel();\n            }\n            else {\n                classList.add('b-hide-scroll');\n            }\n        }\n        if (!translate) {\n            style.overflowX = scrollLiterals[overflowX] || overflowX;\n        }\n        if (!me.isConfiguring) {\n            me.positionDirty = true;\n            me.syncOverflowState();\n        }\n    }\n\n    updateOverflowY(overflowY, oldOverflowY) {\n        const\n            me                     = this,\n            { element, translate } = me,\n            { style, classList }   = element;\n\n        if (oldOverflowY === 'hidden-scroll') {\n            classList.remove('b-hide-scroll');\n        }\n\n        // Scroll, but without showing scrollbars.\n        // For example a grid header.\n        // On platforms which show space-consuming scrollbars we hide scrollbars\n        // and add a 'wheel' listener.\n        if (overflowY === 'hidden-scroll' && !translate) {\n            const otherAxisScrollable = isScrollable[style.overflowX];\n\n            // Can't do one axis hidden-scroll, and the other scrollable because the b-hide-scroll\n            // class hides \"all\" scrollbars, so we have to make this axis hidden and use a wheel\n            // listener to scroll the content.\n            if (otherAxisScrollable) {\n                overflowY = 'hidden';\n\n                // Adds a wheel listener if we don't already have one.\n                me.enableWheel();\n            }\n            else {\n                classList.add('b-hide-scroll');\n            }\n        }\n        if (!translate) {\n            style.overflowY = scrollLiterals[overflowY] || overflowY;\n        }\n        if (!me.isConfiguring) {\n            me.positionDirty = true;\n            me.syncOverflowState();\n        }\n    }\n\n    enableWheel() {\n        if (!this.wheelListenerRemover) {\n            this.wheelListenerRemover = EventHelper.on({\n                element : this.element,\n                wheel   : 'onWheel',\n                thisObj : this\n            });\n        }\n    }\n\n    onWheel(e) {\n        if (Math.abs(e.deltaX) > Math.abs(e.deltaY) && this.overflowX === 'hidden-scroll') {\n            this.x += e.deltaX;\n        }\n        else if (this.overflowY === 'hidden-scroll') {\n            this.y += e.deltaY;\n        }\n    }\n\n    /**\n     * The horizontal scroll range of the widget.\n     * @property {Number}\n     * @readonly\n     */\n    get scrollWidth() {\n        return this.element?.scrollWidth ?? 0;\n    }\n\n    set scrollWidth(scrollWidth) {\n        const\n            me                 = this,\n            { element, isRTL } = me;\n\n        let stretcher = me.widthStretcher;\n\n        // \"Unsetting\" scrollWidth removes the stretcher\n        if (stretcher && scrollWidth == null) {\n            stretcher.remove();\n            me.widthStretcher = null;\n        }\n        else if (scrollWidth) {\n            // Although DOM has crazy negative scrollLeft values in RTL, we treat the scrollWidth\n            // as a pure magnitude. It is then applied correctly negated if RTL. In this way\n            // app code can just use element widths and not consider RTL.\n            scrollWidth = Math.abs(scrollWidth);\n\n            if (!stretcher) {\n                stretcher = me.widthStretcher = DomHelper.createElement({\n                    className     : 'b-scroller-stretcher b-horizontal-stretcher',\n                    // Should survive its surroundings being DomSynced\n                    retainElement : true\n                });\n            }\n\n            stretcher.style.transform = `translateX(${(scrollWidth - 1) * (isRTL ? -1 : 1)}px)`;\n\n            if (element && !element.contains(stretcher)) {\n                element.insertBefore(stretcher, element.firstElementChild);\n            }\n        }\n\n        // Propagate call to partners so they will establish own scroller stretcher\n        if (me.propagate !== false) {\n            me.eachPartner(({ scroller }) => {\n                // Raise a flag on partner to not propagate changes from it further\n                scroller.propagate = false;\n                scroller.scrollWidth = scrollWidth;\n                delete scroller.propagate;\n            });\n        }\n\n        me.positionDirty = true;\n\n        me.syncOverflowState();\n    }\n\n    get scrollHeight() {\n        return this.element?.scrollHeight ?? 0;\n    }\n\n    /**\n     * The vertical scroll range of the widget. May be set to larger than the actual data\n     * height to enable virtual scrolling. This is how the grid extends its scroll range\n     * while only rendering a small subset of the dataset.\n     * @property {Number}\n     */\n    set scrollHeight(scrollHeight) {\n        const\n            me        = this,\n            stretcher = me.stretcher || (me.stretcher = DomHelper.createElement({\n                className : 'b-scroller-stretcher'\n            }));\n\n        stretcher.style.transform = `translateY(${scrollHeight - 1}px)`;\n        if (me.element && me.element.lastChild !== stretcher) {\n            me.element.appendChild(stretcher);\n        }\n\n        me.positionDirty = true;\n\n        me.syncOverflowState();\n    }\n\n    /**\n     * The client width of the widget.\n     * @property {Number}\n     * @readonly\n     */\n    get clientWidth() {\n        return this.element?.clientWidth || 0;\n    }\n\n    /**\n     * The client height of the widget.\n     * @property {Number}\n     * @readonly\n     */\n    get clientHeight() {\n        return this.element?.clientHeight || 0;\n    }\n\n    /**\n     * The unique ID of this Scroller\n     * @property {String}\n     * @readonly\n     */\n    get id() {\n        if (!this._id) {\n            if (this.widget) {\n                this._id = `${this.widget.id}-scroller`;\n            }\n            else {\n                this._id = IdHelper.generateId('scroller-');\n            }\n        }\n        return this._id;\n    }\n\n    //region Extract configs\n\n    // This function is not meant to be called by any code other than Base#getCurrentConfig().\n    preProcessCurrentConfigs(configs) {\n        super.preProcessCurrentConfigs();\n\n        delete configs.widget;\n        delete configs.element;\n    }\n\n    //endregion\n}\n","/**\n * @module Core/helper/util/Promissory\n */\n\n/**\n * Encapsulates a Promise and provides `resolve()` and `reject()` methods.\n *\n * For example:\n * ```\n *  load() {\n *      this.loading = new Promissory();\n *      this.store.load();\n *\n *      return this.loading.promise;\n *  }\n *\n *  onStoreLoad(store, err) {\n *      if (err) {\n *          this.loading.resolve(this);\n *      }\n *      else {\n *          this.loading.reject(err);\n *      }\n *  }\n *\n * ```\n * @internal\n */\nexport default class Promissory {\n    constructor(fn) {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n\n        if (fn) {\n            fn(this);\n        }\n    }\n}\n","import Delayable from '../mixin/Delayable.js';\nimport DomHelper from '../helper/DomHelper.js';\nimport DomSync from '../helper/DomSync.js';\nimport EventHelper from '../helper/EventHelper.js';\nimport Events from '../mixin/Events.js';\nimport Localizable from '../localization/Localizable.js';\nimport Identifiable from '../mixin/Identifiable.js';\nimport Base from '../Base.js';\n\nconst { defineProperty } = Reflect;\n\n/**\n * @module Core/widget/Renderable\n */\n\n/**\n * This class provides element rendering and automatic synchronization based on config property changes.\n *```\n *  class Label extends Renderable {\n *      static get configurable() {\n *          return {\n *              text : {\n *                  value: null,\n *\n *                  $config : 'render'\n *              }\n *          };\n *      }\n *\n *      renderDom() {\n *          return {\n *              tag: 'label',\n *              children: [\n *                  this.text\n *              ]\n *          };\n *      }\n *  }\n *```\n * A class can opt to not specify its render configs. In this case, these will be determined automatically, but with\n * some additional cost. This may not be worth considering if only a few instances are ever likely.\n *\n * @private\n */\nexport default class Renderable extends Base.mixin(Localizable, Events, Delayable, Identifiable) {\n    static get configurable() {\n        return {\n            /**\n             * The top-level DOM element for this object. This element is produced from the {@link #function-renderDom}\n             * method of the derived class. As configs used by `renderDom` change, a synchronization of the DOM is\n             * scheduled by calling {@link #function-refreshDom}. This call is made automatically by this class, making\n             * it rarely necessary to call `refreshDom` directly.\n             * @config {HTMLElement}\n             * @category DOM\n             */\n            element : null\n        };\n    }\n\n    static get delayable() {\n        return {\n            refreshDom : 'raf'\n        };\n    }\n\n    static get identifiable() {\n        return { };\n    }\n\n    /**\n     * Returns the Set of configs defined as `render: true`, that is, the configs that determine the rendering (via\n     * `renderDom`). If no such configs are defined, this method returns `null`.\n     *\n     * @returns {Set}\n     * @private\n     */\n    static get renderConfigs() {\n        const\n            me = this,\n            meta = me.$meta;\n\n        let renderConfigs = meta.renderConfigs,\n            configs, name;\n\n        if (renderConfigs === undefined) {  // if (first time for this class)\n            renderConfigs = null;\n            configs = meta.configs;\n\n            for (name in configs) {\n                if (configs[name].render) {\n                    (renderConfigs || (renderConfigs = new Set())).add(name);\n                }\n            }\n\n            // Put $renderConfigs on the prototype so that onConfigChange is as simple as possible:\n            meta.renderConfigs = me.prototype.$renderConfigs = renderConfigs;\n        }\n\n        return renderConfigs;\n    }\n\n    //region Init\n\n    construct(...args) {\n        this.$iid = ++Renderable.$idSeed;\n        this.byRef = {};\n\n        super.construct(...args);\n\n        if (this.onDraw !== Renderable.prototype.onDraw) {\n            this.initDrawable();\n        }\n    }\n\n    startConfigure(config) {\n        this.element = this.renderContext.renderDom(); // calls changeElement()\n\n        super.startConfigure(config);\n    }\n\n    //endregion\n\n    //region Configs\n\n    get element() {\n        // NOTE: We can replace the getter of a config property\n\n        // Asking for the primary el is a good sign that we need to sync the DOM:\n        this.refreshDom.flush();\n\n        return this._element;\n    }\n\n    /**\n     * This is called when the `element` config is assigned (via the setter).\n     * @param {HTMLElement} element The new element being assigned.\n     * @param {HTMLElement|null} oldElement The old element (previously assigned) or `null`.\n     * @returns {HTMLElement}\n     * @private\n     */\n    changeElement(element, oldElement) {\n        const me = this;\n\n        if (oldElement) {\n            oldElement.remove();\n        }\n\n        if (element) {\n            element.id = me.id;\n            element = DomHelper.createElement(element, {\n                refOwner : me\n            });\n        }\n\n        return element;\n    }\n\n    updateId(id, oldId) {\n        const me = this;\n\n        if (oldId) {\n            const element = me.element;\n\n            element.id = id;\n\n            me.fixRefOwnerId(element, id, oldId);\n        }\n    }\n\n    //endregion\n\n    //region Misc\n\n    /**\n     * Returns the `classList` of this instance's `element`.\n     * @property {DOMTokenList}\n     */\n    get classes() {\n        return this.element.classList;\n    }\n\n    /**\n     * This method fixes the element's `$refOwnerId` when this instance's `id` is changing.\n     * @param {HTMLElement} el The element to fix.\n     * @param {String} id The new id being assigned.\n     * @param {String} oldId The old id (previously assigned).\n     * @private\n     */\n    fixRefOwnerId(el, id, oldId) {\n        if (el.$refOwnerId === oldId) {\n            el.$refOwnerId = id;\n\n            const ref = el.$reference;\n\n            if (ref) {\n                el.id = `${id}-${ref}`;\n            }\n\n            for (const c of el.childNodes) {\n                this.fixRefOwnerId(c, id, oldId);\n            }\n        }\n    }\n\n    onConfigChange({ name }) {\n        // The $renderConfigs Set is either on our prototype (due to renderConfigs getter) or on our instance (due to\n        // renderContext getter):\n        if (!this.isConfiguring && this.$renderConfigs.has(name)) {\n            this.refreshDom();\n        }\n    }\n\n    //endregion\n\n    //region Rendering\n\n    /**\n     * This method is called by `DomHelper.createElement` and `DomSync.sync` as new reference elements are created.\n     * @param {String} name The name of the element, i.e., the value of its `reference` attribute.\n     * @param {HTMLElement} el The element instance\n     * @param {Object} domConfig The DOM config object.\n     * @private\n     */\n    attachRef(name, el, domConfig) {\n        const\n            me = this,\n            key = '_' + name,\n            { listeners } = domConfig;\n\n        if (!(key in me)) {\n            defineProperty(me, name, {\n                get() {\n                    // Asking for a ref el is a good sign that we need to sync the DOM:\n                    me.refreshDom.flush();\n\n                    return me[key];\n                },\n                set(el) {\n                    me[key] = el;\n\n                    // Key elements contain owner pointer (Not supported on IE SVG).\n                    // if (el && el.dataset) {\n                    //     el.dataset.ownerCmp = me.id;\n                    // }\n                }\n            });\n        }\n\n        el.id = `${me.id}-${name}`;\n\n        me.byRef[name] = el;\n        me[name] = el;\n\n        if (listeners) {\n            domConfig.listeners = {\n                on : listeners,\n                un : EventHelper.on(Object.assign({\n                    element : el,\n                    thisObj : me\n                }, listeners))\n            };\n        }\n    }\n\n    /**\n     * This method is called by `DomSync.sync` as reference elements are removed from the DOM.\n     * @param {String} name The name of the element, i.e., the value of its `reference` attribute.\n     * @param {HTMLElement} el The element instance\n     * @param {Object} domConfig The DOM config object.\n     * @private\n     */\n    detachRef(name, el, domConfig) {\n        if (domConfig.listeners) {\n            domConfig.listeners.un();\n            domConfig.listeners = null;\n        }\n\n        this[name] = null;\n\n        delete this.byRef[name];\n    }\n\n    /**\n     * This method returns a {@link Core.helper.DomHelper#function-createElement-static} config object that describes\n     * the desired elements for this instance.\n     *\n     * This method is called to produce the initial DOM structure and again as necessary to generate the DOM for the\n     * current state. The DOM produced by these subsequent calls is then passed through\n     * {@link Core.helper.DomSync#function-sync-static DomSync.sync()} to update the DOM.\n     * @returns {Object}\n     */\n    renderDom() {\n        // abstract method provided by derived class\n        return {};\n    }\n\n    /**\n     * This property is the object to use when calling the `renderDom` method. It may evaluate to this instance (if\n     * the class declares its render configs) or a helper object to track config usage during the `renderDom` call.\n     * @property {Object}\n     * @private\n     */\n    get renderContext() {\n        const\n            me = this,\n            meta = me.$meta,\n            C = me.constructor;\n\n        let renderConfigs = meta.renderConfigs || C.renderConfigs,\n            context = me;\n\n        // If the class author did not declare any configs as render:true, then we make a proxy-like object that can\n        // detect getter calls to build that Set. Since the getters may not all trigger on any given rendering, we\n        // cannot share this work across instances since they may take different control paths.\n        if (!renderConfigs) {\n            context = Object.create(me);\n            renderConfigs = new Set();\n\n            for (const name in meta.configs) {\n                defineProperty(context, name, {\n                    get() {\n                        renderConfigs.add(name);\n                        return me[name];\n                    }\n                });\n            }\n\n            // In order to be substitutable for the Renderable, we need the same method name... we just need to run\n            // renderDom w/ our context as \"this\":\n            context.renderDom = () => {\n                return me.renderDom.call(context);\n            };\n\n            me.$renderConfigs = renderConfigs;\n\n            //<debug>\n            Object.freeze(context);\n            //</debug>\n        }\n\n        // Replace this getter with the actual context so we don't get called again:\n        defineProperty(me, 'renderContext', {\n            value : context\n        });\n\n        return context;\n    }\n\n    /**\n     * This method synchronized the DOM produced by {@link #function-renderDom} with what was previously produced and\n     * updates the elements accordingly.\n     *\n     * This method is buffered such that calls to it do not immediately execute. To perform the refresh immediately,\n     * do this:\n     *```\n     *  instance.refreshDom.now();\n     *```\n     * To flush any potential updates to the DOM (and do nothing if there are none), do this:\n     *```\n     *  instance.refreshDom.flush();\n     *```\n     * To determine if there are updates to the DOM pending, do this:\n     *```\n     *  if (instance.refreshDom.isPending) {\n     *      ...\n     *  }\n     *```\n     */\n    refreshDom() {\n        DomSync.sync({\n            targetElement : this.element,\n            domConfig     : this.renderContext.renderDom(),\n            refOwner      : this,\n\n            // This limits the sync() to only removing the classes and styles added by previous renderings. This\n            // allows dynamically added styles and classes to be preserved:\n            strict : true\n        });\n    }\n\n    //endregion\n\n    onListen(eventName) {\n        // Only add the b-drawable-el when someone first listens for the draw event since it may never happen...\n        if (eventName === 'draw') {\n            this.initDrawable();\n        }\n    }\n\n    initDrawable() {\n        const me = this;\n\n        if (!me.intersector) {\n            let el = Object.values(me.byRef).find(el => el.classList.contains('b-drawable'));\n\n            if (!el) {\n                el = me.element;\n                el.classList.add('b-drawable');\n            }\n\n            me.intersector = new IntersectionObserver(entries => {\n                if (!me.isDestroyed) {\n                    entries.forEach(ent => {\n                        if (ent.isIntersecting) {\n                            me.onDraw({\n                                count : ++me.drawCounter\n                            });\n                        }\n                    });\n                }\n            });\n\n            me.intersector.observe(el);\n        }\n    }\n\n    onDraw(ev) {\n        this.trigger('draw', ev);\n    }\n}\n\nRenderable.$idSeed = 0;\n\nObject.assign(Renderable.prototype, {\n    drawCounter    : 0,\n    hasGeneratedId : false,\n    intersector    : null\n});\n","import ArrayHelper from '../helper/ArrayHelper.js';\nimport DomHelper from '../helper/DomHelper.js';\nimport Promissory from '../helper/util/Promissory.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\nimport VersionHelper from '../helper/VersionHelper.js';\nimport Renderable from './Renderable.js';\n\n//TODO: add loader\n/**\n * @module Core/widget/Mask\n */\n\n/**\n * Masks a target element (document.body if none is specified). Call static methods for ease of use or make instance\n * for reusability.\n *\n * ```javascript\n * Mask.mask('hello');\n * Mask.unmask();\n * ````\n *\n * {@inlineexample Core/widget/Mask.js}\n *\n * Can show progress:\n *\n * ```javascript\n * // Using progress by calling static method\n * const mask = Mask.mask({\n *   text        :'The task is in progress',\n *   progress    : 0,\n *   maxProgress : 100\n * });\n *\n * let timer = setInterval(()=>{\n *   mask.progress += 5;\n *   if(mask.progress >= mask.maxProgress) {\n *     Mask.unmask();\n *     clearInterval(timer)\n *   }\n * }, 100);\n * ```\n *\n * Shortcut to masking Bryntum components:\n *\n * ```javascript\n * // Using progress to mask a Bryntum component\n * scheduler.mask({\n *  text:'Loading in progress',\n *   progress: 0,\n *   maxProgress: 100\n * })\n * let timer = setInterval(()=>{\n *   scheduler.masked.progress += 5;\n *   if(scheduler.masked.progress >= scheduler.masked.maxProgress) {\n *     scheduler.unmask();\n *     clearInterval(timer)\n *   }\n * },100)\n * ```\n */\nexport default class Mask extends Renderable {\n    //region Config\n    static $name = 'Mask';\n\n    // Factoryable type name\n    static type = 'mask';\n\n    static configurable = {\n        /**\n         * Set this config to trigger an automatic close after the desired delay:\n         * ```javascript\n         *  mask.autoClose = 2000;\n         * ```\n         * If the mask has an `owner`, its `onMaskAutoClosing` method is called when the close starts and its\n         * `onMaskAutoClose` method is called when the close finishes.\n         * @config {Number}\n         * @private\n         */\n        autoClose : null,\n\n        /**\n         * The portion of the {@link #config-target} element to be covered by this mask. By default, the mask fully\n         * covers the `target`. In some cases, however, it may be desired to only cover the `'body'` (for example,\n         * in a grid).\n         *\n         * This config is set in conjunction with `owner` which implements the method `syncMaskCover`.\n         *\n         * @config {String}\n         * @private\n         */\n        cover : null,\n\n        /**\n         * The icon to show next to the text. Defaults to showing a spinner\n         * @config {String}\n         * @default\n         */\n        icon : 'b-icon b-icon-spinner',\n\n        errorDefaults : {\n            icon      : 'b-icon b-icon-warning',\n            autoClose : 3000,\n            showDelay : 0\n        },\n\n        /**\n         * The maximum value of the progress indicator\n         * @property {Number}\n         */\n        maxProgress : null,\n\n        /**\n         * Mode: bright, bright-blur, dark or dark-blur\n         * @config {'bright'|'bright-blur'|'dark'|'dark-blur'}\n         * @default\n         */\n        mode : 'dark',\n\n        /**\n         * Number expressing the progress\n         * @property {Number}\n         */\n        progress : null,\n\n        // The owner is involved in the following features:\n        //\n        // - The `autoClose` timer calls `onMaskAutoClose`.\n        // - The `cover` config calls `syncMaskCover`.\n        // - If the `target` is a string, that string names the property of the `owner` that holds the\n        //   `HTMLElement` reference.\n        /**\n         * The owning widget of this mask. This is required if `target` is a string.\n         *\n         * @config {Core.widget.Widget}\n         */\n        owner : {\n            $config : 'nullify',\n            value   : null\n        },\n\n        /**\n         * The element to be masked. If this config is a string, that string is the name of the property of the\n         * `owner` that holds the `HTMLElement` that is the actual target of the mask.\n         *\n         * NOTE: In prior releases, this used to be specified as the `element` config, but that is now, as with\n         * `Widget`, the primary element of the mask.\n         *\n         * @config {String|HTMLElement}\n         */\n        target : null,\n\n        /**\n         * The text (or HTML) to show in mask\n         * @config {String}\n         */\n        text : null,\n\n        // TODO - perhaps a better way to deal w/multiple reasons to mask something would be a mask FIFO behind\n        //  the scenes so that only one mask is visible at a time. That would take a bit of tinkering in the\n        //  hide/show mechanism but feels like a more natural way to go. In which case, this config would go away\n        //  and multiple masks would simply cooperate. https://github.com/bryntum/support/issues/190\n        // This property is used to block trial mask removal\n        // https://github.com/bryntum/support/issues/2604\n        type : null,\n\n        /**\n         * The number of milliseconds to delay before making the mask visible. If set, the mask will have an\n         * initial `opacity` of 0 but will function in all other ways as a normal mask. Setting this delay can\n         * reduce flicker in cases where load operations are typically short (for example, a second or less).\n         *\n         * @config {Number}\n         */\n        showDelay : null,\n\n        useTransition : false\n    }\n\n    static delayable = {\n        deferredClose : 0,\n        delayedShow   : 0,\n        syncCover     : {\n            type  : 'throttle',\n            delay : 100\n        }\n    };\n\n    //endregion\n\n    //region Init\n\n    // Used to give masks unique names\n    static counter = 0;\n    // Tracks open masks\n    static masks = [];\n\n    construct(config) {\n        if (config) {\n            let el = config.element,\n                cfg;\n\n            // Upgrade config -> cfg\n            // Treat config as readonly, cfg is lazily copied and writable\n            if (el) {\n                VersionHelper.deprecate('Core', '4.0.0', 'Mask \"element\" config has been renamed to \"target\"');\n\n                config = cfg = Object.assign({}, config);\n\n                delete cfg.element;\n                cfg.target = el;\n            }\n\n            el = config.target;\n\n            if (typeof el === 'string') {\n                config = cfg = cfg || Object.assign({}, config);\n\n                cfg.target = config.owner[el];  // must supply \"owner\" in this case\n            }\n        }\n\n        super.construct(config);\n\n        const\n            me       = this,\n            { type } = me;\n\n        if (!me.target) {\n            me.target = document.body;\n        }\n\n        me.maskName = `mask${typeof type === 'string' ? type.trim() : ''}-${Mask.counter++}`;\n\n        me.show();\n    }\n\n    doDestroy() {\n        const\n            me          = this,\n            { element } = me;\n\n        // Do not destroy a trial mask\n        if (me.type === 'trial') {\n            return false;\n        }\n\n        if (element) {\n            me.element = null;\n\n            if (me.mode.endsWith('blur')) {\n                DomHelper.forEachChild(element, child => {\n                    child.classList.remove(`b-masked-${me.mode}`);\n                });\n            }\n\n            me.target.classList.remove('b-masked');\n            me.target[me.maskName] = null;\n            ArrayHelper.remove(Mask.masks, me);\n        }\n\n        super.doDestroy();\n    }\n\n    get maskElement() {\n        // TODO log on use of deprecated property?\n        return this.element;\n    }\n\n    set error(value) {\n        this.setConfig(this.errorDefaults);\n        this.text = value;\n    }\n\n    renderDom() {\n        const\n            me              = this,\n            { maxProgress } = me;\n\n        return {\n            class : {\n                'b-mask'                : 1,\n                'b-delayed-show'        : me.showDelay,\n                'b-widget'              : 1,\n                [`b-mask-${me.mode}`]   : 1,\n                'b-progress'            : maxProgress,\n                'b-prevent-transitions' : !me.useTransition\n            },\n            children : [{\n                reference : 'maskContent',\n                class     : 'b-mask-content b-drawable',\n                children  : [\n                    maxProgress ? {\n                        reference : 'progressElement',\n                        class     : 'b-mask-progress-bar',\n                        style     : {\n                            width : `${Math.max(0, Math.min(100, Math.round(me.progress / maxProgress * 100)))}%`\n                        }\n                    } : null,\n                    {\n                        reference : 'maskText',\n                        class     : 'b-mask-text',\n                        html      : (me.icon ? `<i class=\"b-mask-icon ${me.icon}\"></i>` : '') + me.text\n                    }\n                ]\n            }]\n        };\n    }\n\n    //endregion\n\n    //region Static\n\n    static mergeConfigs(...sources) {\n        const ret = {};\n\n        for (const src of sources) {\n            if (typeof src === 'string') {\n                ret.text = src;\n            }\n            else {\n                ObjectHelper.assign(ret, src); // not Object.assign!\n            }\n        }\n\n        return ret;\n    }\n\n    /**\n     * Shows a mask with the specified message.\n     *\n     * Masks stack, call {@link #function-unmask-static} to remove the topmost mask. Or call {@link #function-close}\n     * on the returned mask to close it specifically.\n     *\n     * @param {String|MaskConfig} text Message\n     * @param {HTMLElement} target The element to mask\n     * @returns {Core.widget.Mask}\n     */\n    static mask(text, target = document.body) {\n        return Mask.new({ target }, typeof text !== 'string' ? { ...text } : { text });\n    }\n\n    /**\n     * Close the topmost mask for the specified element\n     * @param {HTMLElement} element Element to unmask\n     * @returns {Promise|null} A promise which is resolved when the mask is gone, or null if element is not masked\n     */\n    static unmask(element = document.body) {\n        const masks = this.getElementMasks(element);\n        if (masks.length > 0) {\n            return masks[masks.length - 1].close();\n        }\n        return null;\n    }\n\n    /**\n     * Close all masks for the specified element\n     * @internal\n     */\n    static unmaskAll(element = document.body) {\n        return this.getElementMasks(element).forEach(mask => mask.close());\n    }\n\n    static getElementMasks(element) {\n        return this.masks.filter(mask => mask.target === element);\n    }\n\n    //endregion\n\n    //region Config\n\n    updateAutoClose(delay) {\n        this.deferredClose.cancel();\n\n        if (delay) {\n            this.deferredClose.delay = delay;\n            this.deferredClose();\n        }\n    }\n\n    updateCover() {\n        this.syncCover();\n    }\n\n    syncCover() {\n        this.owner?.syncMaskCover?.(this);  // pass \"this\" since owner may not yet have assigned us to \"masked\"\n    }\n\n    onOwnerResize() {\n        this.syncCover();\n    }\n\n    updateOwner(owner) {\n        this.detachListeners('cover');\n\n        owner?.ion({\n            name      : 'cover',\n            recompose : 'onOwnerResize',\n            resize    : 'onOwnerResize',\n            thisObj   : this\n        });\n    }\n\n    updateShowDelay(delay) {\n        const { delayedShow } = this;\n\n        delayedShow.delay = delay;\n\n        if (!delay) {\n            delayedShow.flush();\n        }\n    }\n\n    //endregion\n\n    //region Show & hide\n\n    deferredClose() {\n        const { owner } = this;\n\n        this.close().then(() => {\n            owner?.onMaskAutoClose?.(this);\n        });\n\n        owner?.onMaskAutoClosing?.(this);\n    }\n\n    delayedShow() {\n        this.classes.remove('b-delayed-show');\n    }\n\n    /**\n     * Show mask\n     */\n    show() {\n        const\n            me = this,\n            { element, target, hiding, maskName } = me;\n\n        // We don't do this because we may want to show but automatically close after a\n        // brief delay. The order of applying those configs should not be an issue. In\n        // other words, to stop the deferredClose, you must set autoClose to falsy.\n        // me.deferredClose.cancel();\n\n        if (hiding) {\n            // Resolving seems much better than the only other options:\n            //  1. Never settling\n            //  2. Rejecting\n            hiding.resolve();\n\n            // This will be nulled out as the promise resolves but that is a race condition\n            // compared to the next hide() call.\n            me.hiding = null;\n\n            me.clearTimeout('hide');\n        }\n\n        if (me.showDelay) {\n            element.classList.add('b-delayed-show');\n\n            me.delayedShow();\n        }\n\n        element.classList.add('b-visible');\n        element.classList.remove('b-hidden');\n        target.classList.add('b-masked');\n\n        if (!target[maskName]) {\n            target[maskName] = me;\n            target.appendChild(element);\n        }\n\n        ArrayHelper.include(Mask.masks, me);\n\n        me.shown = true;\n        me.trigger('show');\n\n        // blur has to blur child elements\n        if (me.mode.endsWith('blur')) {\n            DomHelper.forEachChild(target, child => {\n                if (child !== element) {\n                    child.classList.add(`b-masked-${me.mode}`);\n                }\n            });\n        }\n    }\n\n    /**\n     * Hide mask\n     * @returns {Promise} A promise which is resolved when the mask is hidden, or immediately if already hidden\n     */\n    hide() {\n        const\n            me = this,\n            { target, element } = me;\n\n        let { hiding } = me;\n\n        if (!hiding) {\n            if (!me.shown) {\n                return Promise.resolve();\n            }\n\n            me.hiding = hiding = new Promissory();\n            me.shown = false;\n\n            element.classList.remove('b-visible');\n            element.classList.add('b-hidden');\n            target.classList.remove('b-masked');\n\n            if (me.mode.endsWith('blur')) {\n                DomHelper.forEachChild(target, child => {\n                    if (child !== element) {\n                        child.classList.remove(`b-masked-${me.mode}`);\n                    }\n                });\n            }\n\n            hiding.promise = hiding.promise.then(() => {\n                if (me.hiding === hiding) {\n                    me.hiding = null;\n                }\n            });\n\n            // TODO: use AnimationHelper when available\n            me.setTimeout(() => hiding.resolve(), 500, 'hide');\n        }\n\n        return hiding.promise;\n    }\n\n    /**\n     * Close mask (removes it)\n     * @returns {Promise} A promise which is resolved when the mask is closed\n     */\n    async close() {\n        await this.hide();\n        this.destroy();\n    }\n\n    //endregion\n}\n","import Base from '../../Base.js';\nimport ArrayHelper from '../../helper/ArrayHelper.js';\nimport EventHelper from '../../helper/EventHelper.js';\nimport ObjectHelper from '../../helper/ObjectHelper.js';\n\n/**\n * @module Core/widget/mixin/KeyMap\n */\n\n/**\n * Mixin for widgets that allows for standardized and customizable keyboard shortcuts functionality. Can be configured\n * on any widget or compatible feature.\n *\n * ```javascript\n * const grid = new Grid({\n *     keyMap: {\n *         // Changing keyboard navigation to respond to WASD keys.\n *         w : 'navigateUp',\n *         a : 'navigateLeft',\n *         s : 'navigateDown',\n *         d : 'navigateRight',\n *\n *         // Removes mappings for arrow keys.\n *         ArrowUp    : null,\n *         ArrowLeft  : null,\n *         ArrowDown  : null,\n *         ArrowRight : null\n *     }\n * });\n * ```\n *\n * For more information on how to customize keyboard shortcuts, please see our guide (Guides/Customization/Keyboard\n * shortcuts)\n * @mixin\n */\nexport default Target => class KeyMap extends (Target || Base) {\n    static $name = 'KeyMap';\n\n    get widgetClass() {}\n\n    /**\n     * Override to attach the keyMap keydown event listener to something else than this.element\n     * @private\n     */\n    get keyMapElement() {\n        return this.element;\n    }\n\n    /**\n     * Override to make keyMap resolve subcomponent actions to something else than this.features.\n     * @private\n     */\n    get keyMapSubComponents() {\n        return this.features;\n    }\n\n    static configurable = {\n        keyMap : {\n            value : null,\n\n            $config : {\n                merge   : 'objects',\n                nullify : true\n            }\n        }\n    }\n\n    /**\n     * Called on keyMapElement keyDown\n     * @private\n     */\n    performKeyMapAction(keyEvent) {\n        const { keyMap } = this;\n        let actionHandled = false;\n\n        // We ignore if event is marked as handled\n        if (keyMap && !keyEvent.handled && keyEvent.key !== undefined) {\n            // Match a defined key combination, such as `Ctrl + Enter`\n            const keyCombination = ObjectHelper.keys(keyMap).find(keyString => {\n                const\n                    keys         = keyString.split('+'),\n                    requireAlt   = keys.includes('Alt'),\n                    requireShift = keys.includes('Shift'),\n                    requireCtrl  = keys.includes('Ctrl');\n                // Last key should be the actual key,\n                let actualKey    = keys[keys.length - 1].toLowerCase();\n\n                if (actualKey === 'space') {\n                    actualKey = ' ';\n                }\n\n                // Modifiers in any order before the actual key\n                return actualKey === keyEvent.key.toLowerCase() &&\n                        ((!keyEvent.altKey && !requireAlt) || (keyEvent.altKey && requireAlt)) &&\n                        ((!keyEvent.ctrlKey && !requireCtrl) || (keyEvent.ctrlKey && requireCtrl)) &&\n                        ((!keyEvent.shiftKey && !requireShift) || (keyEvent.shiftKey && requireShift));\n            });\n\n            // Is there an action (fn to call) for that key combination\n            if (keyMap[keyCombination]) {\n                // Internally, action can be an array of actions in case of key conflicts\n                const actions = ArrayHelper.asArray(keyMap[keyCombination]);\n                // Flag to let actions know that's its keyMap that's calling\n                keyEvent.fromKeyMap = true;\n                let preventDefault;\n                // The actions will be called in the order they were added to the array.\n                for (let action of actions) {\n                    preventDefault = true;\n                    // Support for providing a config object as handler function to prevent keyEvent.preventDefault\n                    if (ObjectHelper.isObject(action)) {\n                        if (!action.handler) {\n                            continue;\n                        }\n                        if (action.preventDefault === false) {\n                            preventDefault = false;\n                        }\n                        action = action.handler;\n                    }\n\n                    if (typeof action === 'string') {\n                        const {\n                            thisObj,\n                            handler\n                        } = this.resolveKeyMapAction(action);\n\n                        // Check if action is available, for example widget is enabled\n                        if (thisObj.isActionAvailable?.(keyCombination, action, keyEvent) !== false) {\n\n                            // If action function returns false, that means that it did not handle the action\n                            if (handler.call(thisObj, keyEvent) !== false) {\n                                actionHandled = true;\n                                break;\n                            }\n                        }\n                    }\n                    else if (action.call(this) !== false) {\n                        actionHandled = true;\n                        break;\n                    }\n                }\n\n                // Remove flag when completed\n                delete keyEvent.fromKeyMap;\n\n                if (actionHandled) {\n                    if (preventDefault) {\n                        keyEvent.preventDefault();\n                    }\n                    keyEvent.handled = true;\n                }\n            }\n        }\n\n        return actionHandled;\n    }\n\n    /**\n     * Resolves correct `this` and handler function.\n     * If subComponent (action includes a dot) it will resolve in keyMapSubComponents (defaults to this.features).\n     *\n     * For example, in feature configurable:\n     * `keyMap: {\n     *     ArrowUp: 'navigateUp'\n     * }`\n     *\n     * Will be translated (by InstancePlugin) to:\n     * `keyMap: {\n     *     ArrowUp: 'featureName.navigateUp'\n     * }\n     *\n     * And resolved to correct function path here.\n     *\n     * Override to change action function mapping.\n     * @private\n     */\n    resolveKeyMapAction(action) {\n        const { keyMapSubComponents } = this;\n\n        if (keyMapSubComponents && action.includes('.')) {\n            const [component, actionName] = action.split('.');\n            if (component && actionName) {\n                return {\n                    thisObj : keyMapSubComponents[component],\n                    handler : keyMapSubComponents[component][actionName]\n                };\n            }\n        }\n        return {\n            thisObj : this,\n            handler : this[action]\n        };\n    }\n\n    updateKeyMap(keyMap) {\n        this.keyMapDetacher?.();\n        if (!ObjectHelper.isEmpty(keyMap)) {\n            this.keyMapDetacher = EventHelper.on({\n                element : this.keyMapElement,\n                keydown : 'keyMapOnKeyDown',\n                thisObj : this\n            });\n        }\n    }\n\n    // Hook on to this to catch keydowns before keymap does\n    keyMapOnKeyDown(event) {\n        this.performKeyMapAction(event);\n    }\n\n    /**\n     * This function is used for merging two keyMaps with each other. It can be used for example by a Grid's feature to\n     * merge the fetature's keyMap into the Grid's with the use of a subPrefix.\n     * @param {Object} target - The existing keyMap.\n     * @param {Object} source - The keyMap we want to merge into target.\n     * @param {Object} subPrefix - If keyMap actions in source should be prefixed, the prefix should be provided here.\n     * As example, the prefix * `rowCopyPaste` will give the action 'rowCopyPaste.action'.\n     * @private\n     */\n    mergeKeyMaps(target, source, subPrefix = null) {\n        const mergedKeyMap = {};\n\n        if (target) {\n            ObjectHelper.assign(mergedKeyMap, target);\n        }\n\n        for (const key in source) {\n            if (!source[key]) {\n                continue;\n            }\n\n            const\n                existingActions = ArrayHelper.asArray(target?.[key]),\n                actions         = [];\n\n            if (existingActions?.length) {\n                actions.push(...existingActions);\n            }\n\n            for (const action of ArrayHelper.asArray(source[key])) {\n                // Mapping keymap actions to their corresponding feature's name, like group.toggleGroup\n                if (ObjectHelper.isObject(action) && action.handler) {\n                    actions.push(ObjectHelper.assignIf({\n                        handler : (subPrefix ? subPrefix + '.' : '') + action.handler\n                    }, action));\n                }\n                else {\n                    actions.push((subPrefix ? subPrefix + '.' : '') + action);\n                }\n            }\n\n            actions.sort((a, b) => {\n                // Sort on weight\n                const weight = (a.weight || 0) - (b.weight || 0);\n                // Then put new actions before old\n                if (weight === 0 && existingActions?.length) {\n                    return existingActions.indexOf(a) - existingActions.indexOf(b);\n                }\n                return weight;\n            });\n            mergedKeyMap[key] = actions;\n        }\n        return mergedKeyMap;\n    }\n\n};\n","import Base from '../../Base.js';\nimport BrowserHelper from '../../helper/BrowserHelper.js';\n\n/**\n * @module Core/widget/mixin/RTL\n */\n\n/**\n * Mixin for RTL operation\n * @mixin\n * @private\n */\nexport default Target => class RTL extends (Target || Base) {\n    static $name = 'RTL';\n\n    get widgetClass() {}\n\n    static configurable = {\n        /**\n         * If a widget is rendered into an element which has computed style `direction:rtl`, this property will be\n         * set to `true`\n         *\n         * Rendering a widget into an element which, either by a CSS rule, or by its inline `style` has an\n         * explicit direction will cause the widget to use that direction regardless of the owning document's\n         * direction.\n         *\n         * In this way, an RTL widget may operate normally inside an LTR page and vice versa.\n         *\n         * If you are using Bryntum widgets in a different direction to that of the owning document, you\n         * must use the following CSS rule to have Popups such as tooltips and event editors use\n         * the desired direction instead of the direction of the document:\n         *\n         * ```CSS\n         * .b-float-root {\n         *     direction : xxx; // Floatings widgets to differ from the document\n         * }\n         * ```\n         * @member {Boolean} rtl\n         * @readonly\n         * @private\n         */\n        /**\n         * This may be configured as `true` to make the widget's element use the `direction:rtl` style.\n         * @config {Boolean}\n         * @default false\n         * @private\n         */\n        rtl : null\n    };\n\n    updateRtl(rtl) {\n        const { element } = this;\n\n        if (element) {\n            element.classList.toggle('b-rtl', rtl === true);\n            element.classList.toggle('b-ltr', rtl === false);\n        }\n    }\n\n    startConfigure(config) {\n        super.startConfigure?.(arguments);\n\n        // If we are not configured with an rtl setting, acquire our rtl setting from our owner,\n        // or our encapsulating (renderTo or adopt etc) element.\n        // Floating widgets will do this at render time.\n        if (!config.floating && config.rtl == null) {\n            const\n                me    = this,\n                el    = config.rootElement || config.forElement || me.parent?.contentElement || (me.floating ? me.floatRoot : me.changeElementRef(me.getRenderContext(config)[0] || config.adopt || document.body)),\n                owner = config.owner || config.parent || me.constructor.fromElement(el);\n\n            if (owner) {\n                config.rtl = owner[owner.isConfiguring ? 'peekConfig' : 'getConfig']('rtl');\n            }\n            else {\n                config.rtl = el?.nodeType === 1 && getComputedStyle(el).getPropertyValue('direction') === 'rtl';\n            }\n            // Ensure it is read in the ingestion phase.\n            if (config.rtl) {\n                me.configDone.rtl = false;\n            }\n        }\n    }\n\n    // Render is only called on outer widgets, children read their setting from their owner unless explicitly set\n    render(...args) {\n        super.render && super.render(...args);\n\n        // TODO: Remove in 6.0\n        if (\n            (BrowserHelper.isChrome && BrowserHelper.chromeVersion < 87) ||\n            (BrowserHelper.isFirefox && BrowserHelper.firefoxVersion < 66) ||\n            (BrowserHelper.isSafari && BrowserHelper.safariVersion < 14.1)\n        ) {\n            this.element.classList.add('b-legacy-inset');\n        }\n        // Detect if rtl (catches both attribute `dir=\"rtl\"` and CSS `direction: rtl`, as well as if owner uses rtl)\n        if (getComputedStyle(this.element).direction === 'rtl' || this.owner?.rtl) {\n            this.rtl = true;\n            this.childItems?.forEach(i => i.rtl = true);\n        }\n    }\n};\n","import Base from '../Base.js';\nimport Config from '../Config.js';\nimport BrowserHelper from '../helper/BrowserHelper.js';\nimport DomClassList from '../helper/util/DomClassList.js';\nimport DomHelper, { isVisible, hasLayout, isInDocument } from '../helper/DomHelper.js';\nimport DomSync from '../helper/DomSync.js';\nimport FunctionHelper from '../helper/FunctionHelper.js';\nimport Fullscreen from '../helper/util/Fullscreen.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\nimport ResizeMonitor from '../helper/ResizeMonitor.js';\nimport EventHelper from '../helper/EventHelper.js';\nimport StringHelper from '../helper/StringHelper.js';\nimport VersionHelper from '../helper/VersionHelper.js';\nimport Rectangle from '../helper/util/Rectangle.js';\nimport Point from '../helper/util/Point.js';\nimport Scroller from '../helper/util/Scroller.js';\nimport '../localization/En.js';\nimport Localizable from '../localization/Localizable.js';\nimport Events from '../mixin/Events.js';\nimport Delayable from '../mixin/Delayable.js';\nimport Factoryable from '../mixin/Factoryable.js';\nimport Identifiable from '../mixin/Identifiable.js';\nimport GlobalEvents from '../GlobalEvents.js';\nimport Mask from './Mask.js';\nimport KeyMap from './mixin/KeyMap.js';\nimport RTL from './mixin/RTL.js';\n\n// TODO: Needs more docs\n\n/**\n * @module Core/widget/Widget\n */\n\nconst\n    assignValueDefaults     = Object.freeze({\n        highlight : false,\n        onlyName  : false\n    }),\n    floatRoots              = [],\n    highlightExternalChange = 'highlightExternalChange',\n    isTransparent           = /transparent|rgba\\(0,\\s*0,\\s*0,\\s*0\\)/,\n    textInputTypes          = {\n        INPUT    : 1,\n        TEXTAREA : 1\n    },\n    addElementListeners     = (me, element, domConfig, refName) => {\n        let listeners = domConfig?.listeners || domConfig?.internalListeners;\n\n        listeners = listeners?.ion || listeners;\n\n        if (listeners) {\n            const un = EventHelper.on(ObjectHelper.assign({\n                element,\n                thisObj : me\n            }, listeners));\n\n            if (refName) {\n                // The domConfig for refs gets regenerated on each compose() so we cannot use them to store the un\n                // functions.\n                (me._refListeners || (me._refListeners = Object.create(null)))[refName] = un;\n            }\n            else {\n                domConfig.listeners = {\n                    on : listeners,\n                    un\n                };\n            }\n        }\n    },\n    mergeAnim               = (value, was) => {\n        // The show/hideAnimation objects can only have one animation property, but it is fine to merge if they have\n        // the same property.\n        return (value && was && was[ObjectHelper.keys(value)[0]]) ? Config.merge(value, was) : value;\n    },\n    // Need braces here. MUST NOT return false\n    widgetTriggerPaint      = w => {\n        w.isVisible && w.triggerPaint();\n    },\n    negationPseudo          = /^:not\\((.+)\\)$/,\n    nonFlowedPositions      = /absolute|fixed/i,\n    isScaled                = w => w.scale != null,\n    { hasOwnProperty }      = Object.prototype,\n    { defineProperty }      = Reflect,\n    parseDuration           = d => parseFloat(d) * (d.endsWith('ms') ? 1 : 1000),\n    alignedClass            = [\n        'b-aligned-above',\n        'b-aligned-right',\n        'b-aligned-below',\n        'b-aligned-left'\n    ],\n    returnFalseProp         = {\n        configurable : true,\n        get() {\n            return false;\n        }\n    },\n    localizeRE              = /(?:L\\{([^}.]+)\\})/,\n    localizeTooltip         = (string, part) => 'L{Tooltip.' + part + '}',\n    alignSpecRe             = /^([trblc])(\\d*)-([trblc])(\\d*)$/i,\n    mergeAlign              = (oldValue, newValue) => {\n        // Promote eg 'l-r' to { align : 'l-r' } so that align configs can merge.\n        // But only if they are rectangle align strings. align:'left', align:'start' etc must not change.\n        if (alignSpecRe.test(oldValue)) {\n            oldValue = { align : oldValue };\n        }\n        if (alignSpecRe.test(newValue)) {\n            newValue = { align : newValue };\n        }\n        return Config.merge(oldValue, newValue);\n    },\n    callbackRe = /^[\\w.]+$/;\n\n/**\n * Specification for how to align a Widget to another Widget, Element or Rectangle.\n *\n * @typedef {Object} AlignSpec\n * @property {HTMLElement|Core.widget.Widget|Core.helper.util.Rectangle} target The Widget or Element or Rectangle to\n * align to.\n * @property {Boolean} [anchor] True to show a pointer arrow connecting to the target. Defaults to false.\n * @property {Boolean} [overlap] True to allow this to overlap the target.\n * @property {String} [align] The edge alignment specification string, `[trblc]n-[trblc]n`.\n *\n * Defaults to this instance's `align` config.\n *\n * The edge alignment specification string describes two points to bring together. Each point is described by an edge\n * initial (`t` for top edge, `b` for bottom edge etc.) followed by a percentage along that edge.\n *\n * So the form would be `[trblc][n]-[trblc][n].` The `n` is the percentage offset along that edge which defines the\n * alignment point. This is not valid for alignment point `c` which means the center point.\n *\n * For example `t0-b0` would align this Widget's top left corner with the bottom left corner of the `target`.\n *\n * Also supports direction independent edges horizontally, `s` for start and `e` for end (maps to `l` and `r` for\n * LTR, `r` and `l` for RTL).\n * @property {HTMLElement|Core.widget.Widget|Core.helper.util.Rectangle} [constrainTo] The Widget or Element or\n * Rectangle to constrain to. If the requested alignment cannot be constrained (it will first shrink the resulting\n * Rectangle according to the `minWidth` and `minHeight` properties of this spec, or the Widget), then it will try\n * aligning at other edges (honouring the `axisLock` option), and pick the fallback alignment which results in the\n * shortest translation.\n * @property {Number|Number[]} [constrainPadding] The amount of pixels to pad from the `constrainTo` target, either a\n * single value, or an array of values in CSS edge order.\n * @property {Number} [minHeight] The minimum height this widget may be compressed to when constraining within the\n * `constrainTo` option.\n * @property {Number} [minWidth] The minimum width this widget may be compressed to when constraining within the\n * `constrainTo` option.\n * @property {Boolean|'flexible'} [axisLock] Specify as `true` to fall back to aligning against the opposite edge if the\n * requested alignment cannot be constrained into the `constrainTo` option. Specify as `'flexible'` to allow\n * continuation to try the other edges if a solution cannot be found on the originally requested axis.\n * @property {Boolean} [matchSize] When aligning edge-to-edge, match the length of the aligned-to edge of the target.\n * This is only honored when `axisLock` is enabled and alignment succeeds on the requested axis.\n * If __not__ aligning edge-to-edge, `matchSize` matches both dimensions of the target.\n * Specify as `true` to have this widget's size along the aligned edge match the size of the target's edge.\n * For example, a combobox's dropdown should match the width of the combobox.\n * @property {Number|Number[]} [offset] The offset to create an extra margin round the target to offset the aligned\n * widget further from the target. May be configured as -ve to move the aligned widget towards the target - for example\n * producing the effect of the anchor pointer piercing the target.\n * @property {Boolean} [monitorResize] Configure as `true` to monitor the element being aligned to for resizing while\n * visible to correct alignment.\n */\n\n/**\n * Base class for other widgets. The Widget base class simply encapsulates an element, and may optionally contain some\n * specified {@link #config-html}.\n *\n * ## Rendering\n *\n * Subclasses should override the {@link #function-compose} method to return their encapsulating element and internal\n * DOM structure. The `compose()` method returns a {@link Core.helper.DomHelper#function-createElement-static} config\n * object that is* used to create the DOM structure, based on its {@link Core.Base#property-configurable-static}\n * properties:\n *\n * ```javascript\n *  class Button extends Widget {\n *      static get configurable() {\n *          return {\n *              cls  : null,\n *              text : null\n *          };\n *      }\n *\n *      compose() {\n *          const { cls, text } = this;  // collect all relevant configs properties (for auto-detection)\n *\n *          return {\n *              tag   : 'button',\n *              class : cls,\n *              text\n *          };\n *      }\n *  }\n * ```\n *\n * The config properties used by the `compose()` method are auto-detected when the method is first called for a class.\n * All relevant properties must be read, even if they end up not being used so that future changes to these properties\n * will mark the rendering as dirty.\n *\n * When a config property used by `compose()` is modified, the {@link #function-recompose} method is called. Since\n * `recompose()` is a {@link Core.mixin.Delayable#property-delayable-static delayable} method, calling it schedules a\n * delayed call to `compose()` and a DOM update. Accessing the Widget's primary `element` or any reference element\n * property will force the DOM update to occur immediately.\n *\n * ### Child Elements\n *\n * Unlike typical {@link Core.helper.DomHelper#function-createElement-static DOM config} objects, the object returned\n * by `compose()` can use an object to simplify naming:\n *\n * ```javascript\n *  class Button extends Widget {\n *      ...\n *\n *      compose() {\n *          const { cls, iconCls, text } = this;  // collect all relevant configs properties (for auto-detection)\n *\n *          return {\n *              tag   : 'button',\n *              class : cls,\n *\n *              children : {\n *                  iconElement : iconCls && {\n *                      class : {\n *                          'button-icon' : 1,\n *                          [iconCls]     : 1\n *                      }\n *                  },\n *\n *                  textElement : {\n *                      text\n *                  }\n *              }\n *          };\n *      }\n *  }\n * ```\n *\n * The keys of the `children` are [iterated](https://2ality.com/2015/10/property-traversal-order-es6.html) to convert\n * the values into the array required by {@link Core.helper.DomHelper#function-createElement-static}. The names of the\n * properties becomes the `reference` of the element.\n *\n * For example, the above is equivalent to the following:\n *\n * ```javascript\n *  class Button extends Widget {\n *      ...\n *\n *      compose() {\n *          const { cls, iconCls, text } = this;  // collect all relevant configs properties (for auto-detection)\n *\n *          return {\n *              tag   : 'button',\n *              class : cls,\n *\n *              children : [iconCls && {\n *                  reference : 'iconElement',\n *                  class : {\n *                      'button-icon' : 1,\n *                      [iconCls]     : 1\n *                  }\n *              }, {\n *                  reference : 'textElement',\n *                  text\n *              }]\n *          };\n *      }\n *  }\n * ```\n *\n * The object form of `children` is preferred for clarity but also because it facilitates inheritance.\n *\n * ### Inheritance\n *\n * When a derived class implements `compose()`, the object it returns is automatically merged with the object returned\n * by the base class.\n *\n * For example, the following class adds a new child element:\n *\n * ```javascript\n *  class MenuButton extends Button {\n *      ...\n *\n *      compose() {\n *          const { menuCls } = this;  // collect all relevant configs properties (for auto-detection)\n *\n *          return {\n *              children : {\n *                  menuElement : {\n *                      class : {\n *                          'button-menu' : 1,\n *                          [menuCls]     : 1\n *                      }\n *                  }\n *              }\n *          };\n *      }\n *  }\n * ```\n *\n * ### Listeners\n *\n * Reference elements may also define event `listeners` in the `compose()` method:\n *\n * ```javascript\n *  class Button extends Widget {\n *      compose() {\n *          const { cls, text } = this;\n *\n *          return {\n *              tag   : 'button',\n *              class : cls,\n *              text,\n *\n *              listeners : {\n *                  click : 'onClick'\n *              }\n *          };\n *      }\n *\n *      onClick(event) {\n *          // handle click event\n *      }\n *  }\n * ```\n *\n * ## Resolving properties\n *\n * Values for a Widgets properties can be resolved from the ownership hierarchy. For example a text field in a toolbar\n * can get its initial value from a property on the container owning the toolbar. This is achieved by prefixing the\n * desired property name with 'up.':\n *\n * ```javascript\n *  const grid = new Grid((\n *      tbar : [{\n *          type  : 'numberfield',\n *          // Fields value will be retrieved from the grids rowHeight property\n *          value : 'up.rowHeight'\n *      }]\n *  });\n * ```\n *\n * NOTE: this is for now a one way one time binding, the value will only be read initially and not kept up to date on\n * later changes.\n *\n * @mixes Core/mixin/Events\n * @mixes Core/localization/Localizable\n * @mixes Core/widget/mixin/KeyMap\n * @extends Core/Base\n * @classType widget\n */\nexport default class Widget extends Base.mixin(Localizable, Events, Delayable, Identifiable, Factoryable, KeyMap, RTL) {\n    // Do not remove. Assertion strings for Localization sanity check.\n    // 'L{Object.Cancel}'\n    // 'L{Object.Ok}'\n    //region Config\n\n    // Used when a config is a class and internally stored as a DomClassList\n    // So that subclasses can add class names.\n    static mergeCls(newValue, oldValue) {\n        if (oldValue && newValue) {\n            newValue = new DomClassList(oldValue).assign(typeof newValue === 'string' ? new DomClassList(newValue) : newValue);\n        }\n        else if (newValue && !newValue.isDomClassList) {\n            newValue = new DomClassList(newValue);\n        }\n\n        return newValue;\n    }\n\n    /**\n     * Class name getter.\n     * Used when original ES6 class name is minified or mangled during production build.\n     * Should be overriden in each class which extends Widget or it descendants.\n     *\n     * ```javascript\n     * class MyNewClass extends Widget {\n     *     static get $name() {\n     *        return 'MyNewClass';\n     *     }\n     * }\n     * ```\n     *\n     * @static\n     * @member {String} $name\n     */\n    static get $name() {\n        return 'Widget';\n    }\n\n    /**\n     * Widget name alias which you can use in the `items` of a Container widget.\n     *\n     * ```javascript\n     * class MyWidget extends Widget {\n     *     static get type() {\n     *        return 'mywidget';\n     *     }\n     * }\n     * ```\n     *\n     * ```javascript\n     * const panel = new Panel({\n     *    title : 'Cool widgets',\n     *    items : [\n     *       { type : 'mywidget', html : 'Lorem ipsum dolor sit amet...' }\n     *    ]\n     * });\n     * ```\n     *\n     * @static\n     * @member {String} type\n     */\n    static get type() {\n        return 'widget';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Get this widget's encapsulating HTMLElement, which is created along with the widget but added to DOM at\n             * render time.\n             * @member {HTMLElement} element\n             * @readonly\n             * @category DOM\n             */\n            /**\n             * A {@link Core.helper.DomHelper#function-createElement-static} config object or HTML string from which to\n             * create the Widget's element.\n             * @private\n             * @config {DomConfig|String}\n             * @category DOM\n             */\n            element : true,\n\n            /**\n             * Set to false to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.\n             *\n             * ```javascript\n             * const container = new Container({\n             *     callOnFunctions : true\n             *\n             *     onHide() {\n             *          // Do something when the 'hide' event is fired\n             *     }\n             * });\n             * ```\n             * @config {Boolean}\n             * @default\n             */\n            callOnFunctions : true,\n\n            /**\n             * Get/set widgets id\n             * @member {String} id\n             * @category DOM\n             */\n            /**\n             * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById\n             * @config {String}\n             * @category DOM\n             */\n            id : '',\n\n            /**\n             * The HTML to display initially or a function returning the markup (called at widget construction time)\n             *\n             * This may be specified as the name of a function which can be resolved in the component ownership\n             * hierarchy, such as 'up.getHTML' which will be found on an ancestor Widget.\n             * @config {String|Function}\n             * @param {Core.widget.Widget} me The calling Widget\n             * @category DOM\n             */\n            html : null,\n\n            /**\n             * Set HTML content safely, without disturbing sibling elements which may have been\n             * added to the {@link #property-contentElement} by plugins and features.\n             * When specifying html, this widget's element will also have the {@link #config-htmlCls}\n             * added to its classList, to allow targeted styling.\n             * @member {String} content\n             * @category DOM\n             */\n            /**\n             * The HTML content that coexists with sibling elements which may have been added to the\n             * {@link #property-contentElement} by plugins and features.\n             * When specifying html, this widget's element will also have the {@link #config-htmlCls}\n             * class added to its classList, to allow targeted styling.\n             * @config {String} content\n             * @category DOM\n             */\n            content : null,\n\n            /**\n             * Custom CSS classes to add to element.\n             * May be specified as a space separated string, or as an object in which property names\n             * with truthy values are used as the class names:\n             * ```javascript\n             *  cls : {\n             *      'b-my-class'     : 1,\n             *      [this.extraCls]  : 1,\n             *      [this.activeCls] : this.isActive\n             *  }\n             *  ```\n             *\n             * @prp {String|Object}\n             * @category CSS\n             */\n            cls : {\n                $config : {\n                    merge : 'classList'\n                },\n\n                value : null\n            },\n\n            /**\n             * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified\n             * as a space separated string, an array of strings, or as an object in which property names with truthy\n             * values are used as the class names.\n             *\n             * For example, consider a `Panel` with a `ui` config like so:\n             *\n             * ```javascript\n             *  new Panel({\n             *      text : 'OK',\n             *      ui   : 'light'\n             *  });\n             * ```\n             * This will apply the CSS class `'b-panel-ui-light'` to the main element of the panel as well as its many\n             * child elements. This allows simpler CSS selectors to match the child elements of this particular panel\n             * UI:\n             *\n             * ```css\n             *  .b-panel-content.b-panel-ui-light {\n             *      background-color : #eee;\n             *  }\n             * ```\n             * Using the {@link #config-cls cls config} would make matching the content element more complex, and in\n             * the presence of {@link Core.widget.Panel#config-strips docked items} and nested panels, impossible to\n             * target accurately.\n             *\n             * @config {String|Object}\n             * @category CSS\n             */\n            ui : {\n                $config : {\n                    merge : 'classList'\n                },\n\n                value : null\n            },\n\n            /**\n             * Determines how a {@link Core.widget.Panel#config-collapsed} panel will treat this widget if it resides\n             * within the panel's header (for example, as one of its {@link Core.widget.Panel#config-strips} or\n             * {@link Core.widget.Panel#config-tools}).\n             *\n             * Valid options are:\n             *  - `null` : The widget will be moved to the overlay when collapsed (the default).\n             *  - `false` : The widget will be unaffected when the panel is collapsed.\n             *  - `'hide'` : The widget will be hidden when the panel is collapsed.\n             *  - `'overlay'` : The widget will only appear in the collapsed panel's overlay header.\n             *\n             * @config {Boolean|String}\n             * @private\n             */\n            collapsify : null,\n\n            /**\n             * Custom CSS classes to add to the {@link #property-contentElement}.\n             * May be specified as a space separated string, or as an object in which property names\n             * with truthy values are used as the class names:\n             * ```javascript\n             *  cls : {\n             *      'b-my-class'     : 1,\n             *      [this.extraCls]  : 1,\n             *      [this.activeCls] : this.isActive\n             *  }\n             *  ```\n             *\n             * @config {String|Object}\n             * @category CSS\n             */\n            contentElementCls : {\n                $config : {\n                    merge : 'classList'\n                },\n\n                value : null\n            },\n\n            /**\n             * Custom CSS classes to add to this widget's `element`. This property is typically used internally to\n             * assign default CSS classes while allowing `cls` to alter these defaults. It is not recommended that\n             * client code set this config but instead should set `cls`.\n             *\n             * For example, to remove a class defined by `defaultCls` using `cls`, declare the class name as a key with\n             * a falsy value:\n             *\n             * ```javascript\n             *  cls : {\n             *      'default-class' : false\n             *  }\n             * ```\n             * @config {String|Object|String[]}\n             * @internal\n             */\n            defaultCls : {\n                $config : {\n                    merge : 'classList'\n                },\n\n                value : null\n            },\n\n            /**\n             * Controls the placement of this widget when it is added to a {@link Core.widget.Panel panel's }\n             * {@link Core.widget.Panel#config-strips strips collection}. Typical values for this config are `'top'`,\n             * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's\n             * body. Such widgets are called \"edge strips\".\n             *\n             * Also accepts direction neutral horizontal values `'start'` and `'end'`.\n             *\n             * If this config is set to `'header'`, the widget is placed in the panel's header, following the title. If\n             * this config is set to `'pre-header'`, the widget is placed before the title. Such widgets are called\n             * \"header strips\".\n             *\n             * @config {'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|Object} dock\n             * @category Layout\n             */\n            dock : null,\n\n            /**\n             * The events to forward from an overflow twin to its origin widget.\n             *\n             * May be specified as a space separated string, or as an object in which property names\n             * with truthy values are used as the class names:\n             * ```javascript\n             *  cls : {\n             *      'b-my-class'     : 1,\n             *      [this.extraCls]  : 1,\n             *      [this.activeCls] : this.isActive\n             *  }\n             *  ```\n             * NOTE: This config cannot be dynamically changed after the `overflowTwin` has been created (see\n             * {@link #function-ensureOverflowTwin}.\n             * @config {String|String[]|Object}\n             * @internal\n             */\n            forwardTwinEvents : {\n                $config : {\n                    merge : 'classList'\n                },\n\n                value : null\n            },\n\n            parent : null,\n\n            /**\n             * The {@link Core.widget.Tab tab} created for this widget when it is placed in a\n             * {@link Core.widget.TabPanel}.\n             * @member {Core.widget.Tab} tab\n             * @readonly\n             * @category Misc\n             */\n            /**\n             * A configuration for the {@link Core.widget.Tab tab} created for this widget when it is placed in a\n             * {@link Core.widget.TabPanel}. For example, this config can be used to control the icon of the `tab` for\n             * this widget:\n             *\n             * ```javascript\n             *  items : [{\n             *      type : 'panel',\n             *      // other configs...\n             *\n             *      tab : {\n             *          icon : 'b-fa-wrench'\n             *      }\n             *  }, ... ]\n             * ```\n             *\n             * Another use for this config is to set the tab's {@link Core.widget.mixin.Rotatable#config-rotate} value\n             * differently than the default managed by the `TabPanel`:\n             *\n             * ```javascript\n             *  items : [{\n             *      type : 'panel',\n             *      // other configs...\n             *\n             *      tab : {\n             *          rotate : false   // don't rotate even if tabBar is docked left or right\n             *      }\n             *  }, ... ]\n             * ```\n             *\n             * Set this to `false` to prevent the creation of a `tab` for this widget. In this case, this widget must\n             * be {@link #function-show shown} explicitly. The {@link Core.widget.TabPanel#config-activeTab} for the\n             * tab panel will be -1 in this situation.\n             *\n             * ```javascript\n             *  items : [{\n             *      type : 'panel',\n             *      tab  : false,    // no tab for this item\n             *\n             *      // other configs...\n             *  }, ... ]\n             * ```\n             *\n             * @config {Boolean|TabConfig} tab\n             * @category Misc\n             */\n            tab : null,\n\n            /**\n             * An object specifying attributes to assign to the root element of this widget\n             * @internal\n             * @config {Object}\n             * @category Misc\n             */\n            elementAttributes : null,\n\n            /**\n             * The CSS class(es) to add when HTML content is being applied to this widget.\n             * @config {String|Object}\n             * @category CSS\n             */\n            htmlCls : {\n                $config : {\n                    merge : 'classList'\n                },\n\n                value : {\n                    'b-html' : 1\n                }\n            },\n\n            /**\n             * Custom style spec to add to element\n             * @config {String}\n             * @category CSS\n             */\n            style : null,\n\n            /**\n             * Get/set element's disabled state\n             * @member {Boolean} disabled\n             * @category Misc\n             */\n            /**\n             * Disable or enable the widget. It is similar to {@link #config-readOnly} except a disabled widget\n             * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.\n             * @default false\n             * @config {Boolean}\n             * @category Misc\n             */\n            disabled : null,\n\n            /**\n             * Get/set element's readOnly state. This is only valid if the widget is an input\n             * field, __or contains input fields at any depth__. Updating this property will trigger\n             * a {@link #event-readOnly} event.\n             *\n             * All descendant input fields follow the widget's setting. If a descendant\n             * widget has a readOnly config, that is set.\n             * @member {Boolean} readOnly\n             * @category Misc\n             */\n            /**\n             * Whether this widget is read-only.  This is only valid if the widget is an input\n             * field, __or contains input fields at any depth__.\n             *\n             * All descendant input fields follow the widget's setting. If a descendant\n             * widget has a readOnly config, that is set.\n             * @default false\n             * @config {Boolean}\n             * @category Misc\n             */\n            readOnly : {\n                value   : null,\n                default : false,\n                $config : null\n            },\n\n            /**\n             * Determines if the widgets read-only state should be controlled by its parent.\n             *\n             * When set to `false`, setting a parent container to read-only will not affect the widget. When set to\n             * `true`, it will.\n             *\n             * @category Misc\n             * @config {Boolean}\n             * @default false\n             */\n            ignoreParentReadOnly : null,\n\n            /**\n             * Element (or element id) to adopt as this Widget's encapsulating element. The widget's\n             * content will be placed inside this element.\n             *\n             * If this widget has not been configured with an id, it will adopt the id of the element\n             * in order to preserve CSS rules which may apply to the id.\n             * @config {HTMLElement|String}\n             * @default\n             * @category DOM\n             */\n            adopt : null,\n\n            /**\n             * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at\n             * runtime. To access the element of a rendered widget, see {@link #property-element}.\n             * @prp {HTMLElement}\n             * @accepts {HTMLElement|String}\n             * @category DOM\n             */\n            appendTo : null,\n\n            /**\n             * Element (or element id) to insert this widget before. If provided, {@link #config-appendTo} config is ignored.\n             * @prp {HTMLElement|String}\n             * @category DOM\n             */\n            insertBefore : null,\n\n            /**\n             * Element (or element id) to append this widget element to, as a first child. If provided, {@link #config-appendTo} config is ignored.\n             * @prp {HTMLElement|String}\n             * @category DOM\n             */\n            insertFirst : null,\n\n            /**\n             * Object to apply to elements dataset (each key will be used as a data-attribute on the element)\n             * @config {Object}\n             * @category DOM\n             */\n            dataset : null,\n\n            /**\n             * Tooltip for the widget, either as a string or as a Tooltip config object.\n             *\n             * By default, the Widget will use a single, shared instance to display its tooltip as configured,\n             * reconfiguring it to the specification before showing it. Therefore, it may not be permanently\n             * mutated by doing things such as adding fixed event listeners.\n             *\n             * To have this Widget *own* its own `Tooltip` instance, add the property `newInstance : true`\n             * to the configuration. In this case, the tooltip's {@link #property-owner} will be this Widget.\n             *\n             * __Note that in the absence of a configured {@link #config-ariaDescription}, the tooltip's value\n             * will be used to populate an `aria-describedBy` element within this Widget.__\n             * @config {String|TooltipConfig}\n             * @category Misc\n             */\n            tooltip : {\n                $config : ['lazy', 'nullify'],\n                value   : null\n            },\n\n            /**\n             * Set to false to not show the tooltip when this widget is {@link #property-disabled}\n             * @config {Boolean}\n             * @default\n             * @category Misc\n             */\n            showTooltipWhenDisabled : true,\n\n            /**\n             * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a\n             * menu on click etc, since the tooltip would be displayed at the same time.\n             * @config {Boolean}\n             * @default false\n             * @category Misc\n             */\n            preventTooltipOnTouch : null,\n\n            /**\n             * Specify true to have widget monitoring its own resize.\n             * @config {Boolean}\n             * @default false\n             * @category Misc\n             */\n            monitorResize : {\n                $config : ['lazy', 'nullify'],\n                value   : null\n            },\n\n            /**\n             * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a\n             * {@link Core.widget.Mask} config object.\n             * @config {Boolean|String|MaskConfig}\n             * @category Misc\n             */\n            masked : {\n                $config : 'nullify',\n                value   : null\n            },\n\n            /**\n             * This config object contains the defaults for the {@link Core.widget.Mask} created for the\n             * {@link #config-masked} config. Any properties specified in the `masked` config will override these\n             * values.\n             * @config {MaskConfig}\n             * @category Misc\n             */\n            maskDefaults : {\n                target : 'element'\n            },\n\n            cache : {},\n\n            /**\n             * Set to `true` to move the widget out of the document flow and position it\n             * absolutely in browser viewport space.\n             * @config {Boolean}\n             * @default\n             * @category Float & align\n             */\n            floating : null,\n\n            /**\n             * Set to `true` when a widget is rendered into another widget's  {@link #property-contentElement}, but must not\n             * participate in the standard layout of that widget, and must be positioned relatively to that\n             * widget's {@link #property-contentElement}.\n             *\n             * {@link Core.widget.Editor Editor}s are positioned widgets.\n             * @config {Boolean}\n             * @default\n             * @category Float & align\n             */\n            positioned : null,\n\n            /**\n             * Only valid if this Widget is {@link #config-floating}\n             * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´\n             * property which controls when a drag should start.\n             *\n             * ```javascript\n             *\n             * draggable : {\n             *     handleSelector : ':not(button)'\n             * }\n             *\n             * ```\n             *\n             * @config {Boolean|Object}\n             * @property {String} handleSelector CSS selector used to determine if drag can be started from a\n             * mouse-downed element inside the widget\n             * @default false\n             * @category Float & align\n             */\n            draggable : null,\n\n            /**\n             * _Only valid if this Widget is {@link #config-floating}._\n             *\n             * How to align this element with its target when {@link #function-showBy} is called\n             * passing a simple element as an align target.\n             *\n             * Either a full alignment config object, or for simple cases, the edge alignment string to use.\n             *\n             * When using a simple string, the format is `'[trblc]n-[trblc]n'` and it specifies our edge and\n             * the target edge plus optional offsets from 0 to 100 along the edges to align to. Also supports direction\n             * independent edges horizontally, `s` for start and `e` for end (maps to `l` and `r` for LTR, `r` and `l`\n             * for RTL).\n             *\n             * See the {@link #function-showBy} function for more details about using the object form.\n             *\n             * Once set, this is stored internally in object form.\n             * @config {AlignSpec|String}\n             * @category Float & align\n             */\n            align : {\n                $config : {\n                    merge : mergeAlign\n                },\n                value : 't-b'\n            },\n\n            /**\n             * Only valid if this Widget is {@link #config-floating}\n             * Set to `true` to centre the Widget in browser viewport space.\n             * @config {Boolean}\n             * @default\n             * @category Float & align\n             */\n            centered : null,\n\n            /**\n             * Only valid if this Widget is {@link #config-floating} or {@link #config-positioned}.\n             * Element, Widget or Rectangle to which this Widget is constrained.\n             * @config {HTMLElement|Core.widget.Widget|Core.helper.util.Rectangle}\n             * @default document.body\n             * @category Float & align\n             */\n            constrainTo : undefined,\n\n            /**\n             * Only valid if this Widget is {@link #config-floating} and being shown through {@link #function-showBy}.\n             * `true` to show a connector arrow pointing to the align target.\n             * @config {Boolean}\n             * @default false\n             * @category Float & align\n             */\n            anchor : null,\n\n            /**\n             * The owning Widget of this Widget. If this Widget is directly contained, this will be the containing Widget.\n             * If there is a `forElement`, this config will be that element's encapsulating Widget.\n             *\n             * If this Widget is floating, this config must be specified by the developer.\n             * @config {Core.widget.Widget}\n             * @category Float & align\n             */\n            owner : null,\n\n            /**\n             * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).\n             * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.\n             * @config {'hide'|'realign'|null}\n             * @default\n             * @category Float & align\n             */\n            scrollAction : null,\n\n            /**\n             * Only valid if this Widget is {@link #config-floating}. An object which defined which CSS style\n             * property should be animated upon hide, and how it should be animated eg:\n             *\n             * ```javascript\n             * {\n             *    opacity: {\n             *        to : 0,\n             *        duration: '10s',\n             *        delay: '0s'\n             *    }\n             * }\n             * ```\n             *\n             * Set to `'false'` to disable animation.\n             *\n             * @config {Boolean|Object}\n             * @category Float & align\n             */\n            hideAnimation : {\n                $config : {\n                    merge : mergeAnim\n                },\n\n                value : null\n            },\n\n            /**\n             * Only valid if this Widget is {@link #config-floating}. An object which defined which CSS style\n             * property should be animated upon show, and how it should be animated eg:\n             *\n             * ```javascript\n             * {\n             *    opacity: {\n             *        to : 1,\n             *        duration: '10s',\n             *        delay: '0s'\n             *    }\n             * }\n             * ```\n             *\n             * Set to `'false'` to disable animation.\n             *\n             * @config {Boolean|Object}\n             * @category Float & align\n             */\n            showAnimation : {\n                $config : {\n                    merge : mergeAnim\n                },\n\n                value : null\n            },\n\n            /**\n             * The x position for the widget.\n             *\n             * Only valid if this Widget is {@link #config-floating} and not aligned or anchored to an element.\n             *\n             * @config {Number}\n             * @default\n             * @category Float & align\n             */\n            x : null,\n\n            /**\n             * The y position for the widget.\n             *\n             * Only valid if this Widget is {@link #config-floating} and not aligned or anchored to an element.\n             *\n             * @config {Number}\n             * @default\n             * @category Float & align\n             */\n            y : null,\n\n            /**\n             * Accessor to the {@link Core.helper.util.Scroller} which can be used\n             * to both set and read scroll information.\n             * @member {Core.helper.util.Scroller} scrollable\n             * @category Layout\n             */\n            /**\n             * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll\n             * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are\n             * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to\n             * CSS overflow properties thus:\n             *\n             * *`true` -> `'auto'`\n             * *`false` -> `'hidden'`\n             *\n             * After initialization, this property yields a {@link Core.helper.util.Scroller} which may be used to both\n             * set and read scroll information.\n             *\n             * A Widget uses its `get overflowElement` property to select which element is to be scrollable. By default,\n             * in the base `Widget` class, this is the Widget's encapsulating element. Subclasses may implement `get\n             * overflowElement` to scroll inner elements.\n             * @config {Boolean|ScrollerConfig|Core.helper.util.Scroller}\n             * @default false\n             * @category Scrolling\n             */\n            scrollable : {\n                $config : ['lazy', 'nullify'],\n                value   : null\n            },\n\n            /**\n             * The class to instantiate to use as the {@link #config-scrollable}. Defaults to\n             * {@link Core.helper.util.Scroller}.\n             * @internal\n             * @config {Core.helper.util.Scroller}\n             * @typings {typeof Scroller}\n             * @category Scrolling\n             */\n            scrollerClass : Scroller,\n\n            /**\n             * The name of the property to set when a single value is to be applied to this Widget. Such as when used\n             * in a grid WidgetColumn, this is the property to which the column's `field` is applied.\n             * @config {String}\n             * @default 'html'\n             * @category Misc\n             */\n            defaultBindProperty : 'html',\n\n            /**\n             * Event that should be considered the default action of the widget. When that event is triggered the\n             * widget is also expected to trigger an `action` event. Purpose is to allow reacting to most widgets in\n             * a coherent way.\n             * @private\n             * @config {String}\n             * @category Misc\n             */\n            defaultAction : null,\n\n            /**\n             * When set to `true`, this widget is considered as a whole when processing {@link Core.widget.Toolbar}\n             * overflow. When `false`, this widget's child items are considered instead.\n             *\n             * When set to the string `'none'`, this widget is ignored by overflow processing. This option should be\n             * used with caution as it prevents the overflow algorithm from moving such widgets into the overflow\n             * popup which may result in not clearing enough space to avoid overflowing the toolbar.\n             * @config {Boolean|String}\n             * @default true\n             * @category Layout\n             * @internal\n             */\n            overflowable : {\n                value   : null,\n                default : true,\n                $config : null\n            },\n\n            /**\n             * Widget's width, used to set element style.width. Either specify a valid width string or a number, which\n             * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases\n             * this config is convenient.\n             * @config {String|Number}\n             * @category Layout\n             */\n            width : null,\n\n            /**\n             * Widget's height, used to set element style.height. Either specify a valid height string or a number, which\n             * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases\n             * this config is convenient.\n             * @config {String|Number}\n             * @category Layout\n             */\n            height : null,\n\n            /**\n             * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that\n             * like {@link #config-height}, _reading_ the value will return the numeric value in pixels.\n             * @config {String|Number}\n             * @category Layout\n             */\n            maxHeight : null,\n\n            /**\n             * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that\n             * like {@link #config-width}, _reading_ the value will return the numeric value in pixels.\n             * @config {String|Number}\n             * @category Layout\n             */\n            maxWidth : null,\n\n            /**\n             * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that\n             * like {@link #config-width}, _reading_ the value will return the numeric value in pixels.\n             * @config {String|Number}\n             * @category Layout\n             */\n            minWidth : null,\n\n            /**\n             * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that\n             * like {@link #config-height}, _reading_ the value will return the numeric value in pixels.\n             * @config {String|Number}\n             * @category Layout\n             */\n            minHeight : null,\n\n            // not public, only used by us in docs\n            scaleToFitWidth : null,\n            allowGrowWidth  : true, // only used if scaleToFitWidth is true\n\n            /**\n             * Get element's margin property. This may be configured as a single number or a `TRBL` format string.\n             * numeric-only values are interpreted as pixels.\n             * @member {Number|String} margin\n             * @category Layout\n             */\n            /**\n             * Widget's margin. This may be configured as a single number or a `TRBL` format string.\n             * numeric-only values are interpreted as pixels.\n             * @config {Number|String}\n             * @category Layout\n             */\n            margin : null,\n\n            /**\n             * Get element's flex property. This may be configured as a single number or a format string:\n             *\n             *      <flex-grow> <flex-shrink> <flex-basis>\n             *\n             * Numeric-only values are interpreted as the `flex-grow` value.\n             * @member {Number|String} flex\n             * @category Layout\n             */\n            /**\n             * When this widget is a child of a {@link Core.widget.Container}, it will by default be participating in a\n             * flexbox layout. This config allows you to set this widget's\n             * <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/flex\">flex</a> style.\n             * This may be configured as a single number or a `<flex-grow> <flex-shrink> <flex-basis>` format string.\n             * numeric-only values are interpreted as the `flex-grow` value.\n             * @config {Number|String}\n             * @category Layout\n             */\n            flex : null,\n\n            /**\n             * A widgets weight determines its position among siblings when added to a {@link Core.widget.Container}.\n             * Higher weights go further down.\n             * @config {Number}\n             * @category Layout\n             */\n            weight : null,\n\n            /**\n             * Get/set this widget's `align-self` flexbox setting. This may be set to modify how this widget is aligned\n             * within the cross axis of a flexbox layout container.\n             * @member {String} alignSelf\n             * @category Layout\n             */\n            /**\n             * When this widget is a child of a {@link Core.widget.Container}, it will by default be participating in a\n             * flexbox layout. This config allows you to set this widget's\n             * <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/align-self\">align-self</a> style.\n             * @config {String}\n             * @category Layout\n             */\n            alignSelf : null,\n\n            /**\n             * Configure as `true` to have the component display a translucent ripple when its\n             * {@link #property-focusElement}, or {@link #property-element} is tapped *if the\n             * current theme supports ripples*. Out of the box, only the Material theme supports ripples.\n             *\n             * This may also be a config object containing the properties listed below.\n             *\n             * eg:\n             *```\n             *    columns  : [{}...],\n             *    ripple   : {\n             *        color : 'red',\n             *        clip  : '.b-grid-row'\n             *    },\n             *    ...\n             *```\n             * @config {Boolean|Object}\n             * @property {String} [delegate] A CSS selector to filter which child elements trigger ripples. By default,\n             * the ripple is clipped to the triggering element.\n             * @property {String} [color='#000'] A CSS color name or specification.\n             * @property {Number} [radius=100] The ending radius of the ripple. Note that it will be clipped by the\n             * target element by default.\n             * @property {String} [clip] A string which describes how to clip the ripple if it is not to be clipped to\n             * the default element. Either the property of the widget to use as the clipping element, or a selector to\n             * allow clipping to the closest matching ancestor to the target element.\n             * @category Misc\n             */\n            ripple : null,\n\n            /**\n             * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)\n             * @default\n             * @config {String}\n             * @category DOM\n             */\n            title : null,\n\n            localizableProperties : ['title', 'ariaLabel', 'ariaDescription'],\n\n            // Set this flag to require element to have a size to be considered visible\n            requireSize : false,\n\n            /**\n             * An identifier by which this widget will be registered in the {@link Core.widget.Container#property-widgetMap}\n             * of all ancestor containers.\n             *\n             * If omitted, this widget will be registered using its {@link #config-id}. In most cases `ref` is\n             * preferable over `id` since `id` is required to be globally unique while `ref` is not.\n             *\n             * The `ref` value is also added to the elements dataset, to allow targeting it using CSS etc.\n             * @prp {String}\n             * @readonly\n             * @category Misc\n             */\n            ref : null,\n\n            /**\n             * Get/set the widget hidden state.\n             *\n             * Note: `hidden : false` does *not* mean that this widget is definitely visible.\n             * To ascertain visibility, use the {@link #property-isVisible} property.\n             * @member {Boolean} hidden\n             * @category Visibility\n             */\n            /**\n             * Configure with true to make widget initially hidden.\n             * @default false\n             * @config {Boolean}\n             * @category Layout\n             */\n            hidden : null,\n\n            /**\n             * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.\n             *\n             * Applied by adding a `b-text-align-xx` class to the widgets element. Blank by default, which does not add\n             * any alignment class.\n             *\n             * To be compliant with RTL, 'left' yields same result as 'start' and 'right' as 'end'.\n             *\n             * @config {'left'|'center'|'right'|'start'|'end'}\n             * @category Layout\n             */\n            textAlign : null,\n\n            // When adding our scroll listeners to hide/realign, we ignore events\n            // happening too quickly as a result of the show/align action\n            ignoreScrollDuration : 500,\n\n            /**\n             * The tag name of this Widget's root element\n             * @config {String}\n             * @default\n             * @category DOM\n             */\n            tag : 'div',\n\n            /**\n             * Set this config to `false` to disable batching DOM updates on animation frames for this widget. This\n             * has the effect of synchronously updating the DOM when configs affecting the rendered DOM are modified.\n             * Depending on the situation, this could simplify code while increasing time spent updating the DOM.\n             * @config {Boolean}\n             * @default true\n             * @internal\n             */\n            recomposeAsync : null,\n\n            /**\n             * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot\n             * @config {ShadowRoot}\n             * @default\n             * @category Misc\n             */\n            rootElement : null,\n\n            htmlMutationObserver : {\n                $config : ['lazy', 'nullify'],\n                value   : {\n                    childList : true,\n                    subtree   : true\n                }\n            },\n\n            role : {\n                $config : 'lazy',\n                value   : 'presentation'\n            },\n\n            /**\n             * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as\n             * the `aria-label` attribute.\n             *\n             * This widget is passed as the `templateData` so that functions in the locale file can\n             * interrogate the widget's state.\n             * @config {String}\n             * @category Accessibility\n             */\n            ariaLabel : {\n                $config : 'lazy',\n                value   : null\n            },\n\n            /**\n             * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject\n             * into an element which will be linked using the `aria-describedby` attribute.\n             *\n             * This widget is passed as the `templateData` so that functions in the locale file can\n             * interrogate the widget's state.\n             * @config {String}\n             * @category Accessibility\n             */\n            ariaDescription : {\n                $config : 'lazy',\n                value   : null\n            },\n\n            ariaElement : 'element',\n\n            ariaHasPopup : null,\n\n            realignTimeout : 300,\n\n            testConfig : {\n                ignoreScrollDuration : 100,\n                realignTimeout       : 50\n            }\n        };\n    }\n\n    static get prototypeProperties() {\n        return {\n            /**\n             * true if no id was set, will use generated id instead (widget1, ...). Toggle automatically on creation\n             * @member {Boolean} hasGeneratedId\n             * @private\n             * @category Misc\n             */\n            hasGeneratedId : false,\n\n            /**\n             * This readonly property is `true` for normal widgets in the {@link Core.widget.Container#config-items} of\n             * a container. It is `false` for special widgets such as a {@link Core.widget.Panel#config-tbar}.\n             * @member {Boolean} innerItem\n             * @internal\n             * @category Misc\n             */\n            innerItem : true\n        };\n    }\n\n    static get declarable() {\n        return [\n            /**\n             * This property declares the set of config properties that affect a Widget's rendering, i.e., the configs\n             * used by the {@link #function-compose} method.\n             *\n             * For example:\n             * ```javascript\n             *  class Button extends Widget {\n             *      static get renderConfigs() {\n             *          return [ 'cls', 'iconCls', 'text' ];\n             *      }\n             *  }\n             * ```\n             *\n             * Alternatively this can be an object:\n             *\n             * ```javascript\n             *  class Button extends Widget {\n             *      static get renderConfigs() {\n             *          return {\n             *              cls     : true,\n             *              iconCls : true,\n             *              text    : true\n             *          };\n             *      }\n             *  }\n             * ```\n             * @member {Object|String[]} renderConfigs\n             * @static\n             * @category Configuration\n             * @internal\n             */\n            'renderConfigs'\n        ];\n    }\n\n    /**\n     * An object providing the `record` and `column` for a widget embedded inside a {@link Grid.column.WidgetColumn}\n     *\n     * ```javascript\n     * columns : [\n     *    {\n     *        type   : 'widget',\n     *        widgets: [{\n     *            type     : 'button',\n     *            icon     : 'b-fa b-fa-trash',\n     *            onAction : ({ source : btn }) => btn.cellInfo.record.remove()\n     *        }]\n     *    }\n     * ]\n     * ```\n     * @readonly\n     * @member {Object} cellInfo\n     * @property {Core.data.Model} cellInfo.record Record for the widgets row\n     * @property {Object} cellInfo.column Column the widget is displayed in\n     * @category Misc\n     */\n\n    static get delayable() {\n        return {\n            recompose       : 'raf',\n            doHideOrRealign : 'raf',\n\n            // Screen size and orientation changes must be buffered in line with.\n            // ResponsiveMixin whose responsiveUpdate method is on a RAF.\n            onAlignConstraintChange : 'raf'\n        };\n    }\n\n    static get factoryable() {\n        return {\n            defaultType : 'widget'\n        };\n    }\n\n    static get identifiable() {\n        return {};\n    }\n\n    /**\n     * Returns an array containing all existing Widgets. The returned array is generated by this call and is not an\n     * internal structure.\n     * @property {Core.widget.Widget[]}\n     * @readonly\n     * @internal\n     */\n    static get all() {\n        return super.all;\n    }\n\n    /**\n     * Get/set the {@link #config-recomposeAsync} config for all widgets. Setting this value will set the config for\n     * all existing widgets and will be the default value for newly created widgets. Set this value to `null` to disable\n     * the default setting for new widgets while leaving existing widgets unaffected.\n     * @property {Boolean}\n     * @internal\n     */\n    static get recomposeAsync() {\n        return Widget._recomposeAsync;\n    }\n\n    static set recomposeAsync(value) {\n        Widget._recomposeAsync = value;\n\n        if (value != null) {\n            const { all } = Widget;\n\n            for (let i = 0; i < all.length; ++i) {\n                if (all[i].isComposable) {\n                    all[i].recomposeAsync = value;\n                }\n            }\n        }\n    }\n\n    isType(type, deep) {\n        return Widget.isType(this, type, deep);\n    }\n\n    static setupRenderConfigs(cls, meta) {\n        let { renderConfigs } = cls,\n            i;\n\n        if (renderConfigs) {\n            const obj =\n                      // Once a class declares renderConfigs, those are inherited and augmented:\n                      meta.getInherited('renderConfigs', /* create = */false) ||\n                      // Otherwise, since renderConfigs are declared on this class, we need to create them:\n                      Object.create(null);\n\n            if (Array.isArray(renderConfigs)) {\n                // Ex: renderConfigs: ['cls', 'text']\n                for (i = 0; i < renderConfigs.length; ++i) {\n                    obj[renderConfigs[i]] = true;\n                }\n\n                renderConfigs = obj;\n            }\n            else {\n                // Ex: renderConfigs: { cls : true, text : true }\n                renderConfigs = Object.assign(obj, renderConfigs);\n            }\n        }\n        // else a class may declare renderConfigs=null to re-enable auto detection\n\n        meta.renderConfigs = renderConfigs;\n    }\n\n    /**\n     * Call once per class for custom widgets to have them register with the `Widget` class, allowing them to be created\n     * by type.\n     *\n     * For example:\n     * ```javascript\n     * class MyWidget extends Widget {\n     *   static get type() {\n     *     return 'mywidget';\n     *   }\n     * }\n     * MyWidget.initClass();\n     * ```\n     * @method initClass\n     * @static\n     * @category Lifecycle\n     */\n\n    //endregion\n\n    //region Init & destroy\n\n    construct(config = {}, ...args) {\n        const\n            me                  = this,\n            { domSyncCallback } = me;\n\n        me.configureAriaDescription = config.ariaDescription;\n        me._isAnimatingCounter = 0;\n\n        // Flag so we know when our dimensions have been constrained during alignment\n        me.alignConstrained = 0;\n        me.byRef = Object.create(null);\n\n        me.onTargetResize     = me.onTargetResize.bind(me);\n        me.onFullscreenChange = me.onFullscreenChange.bind(me);\n        me.domSyncCallback    = domSyncCallback.$nullFn ? null : domSyncCallback.bind(me);\n\n        me._isUserAction = false;\n\n        // Base class applies configs.\n        super.construct(config, ...args);\n\n        const { recomposeAsync } = Widget;\n\n        if (recomposeAsync != null && me.recomposeAsync == null) {\n            me.recomposeAsync = recomposeAsync;\n        }\n\n        me.finalizeInit();\n    }\n\n    startConfigure(config) {\n        super.startConfigure(config);\n\n        const\n            me                 = this,\n            // This will run the element change/update process if it was not kicked off by a derived class impl of\n            // this method:\n            { adopt, element } = me;\n\n        if (adopt) {\n            // Adopt the preexisting element as our element before configuration proceeds.\n            me.adoptElement(element, adopt, config.id);\n            me.updateElement(me._element, element);\n        }\n    }\n\n    /**\n     * Called by the Base constructor after all configs have been applied.\n     * @internal\n     * @category Lifecycle\n     */\n    finalizeInit() {\n        const me = this;\n\n        if (me.insertBefore || me.appendTo || me.insertFirst || me.adopt) {\n            me.render();\n        }\n    }\n\n    doDestroy() {\n        const\n            me                                              = this,\n            { preExistingElements, element, _refListeners } = me;\n\n        if (_refListeners) {\n            Object.values(_refListeners, un => un());\n            me._refListeners = null;\n        }\n\n        if (element) {\n            const sharedTooltip = !me._tooltip && me._rootElement && Widget.Tooltip?.getSharedTooltip(me._rootElement, true);\n\n            // If we are current user of the shared tooltip, hide it\n            if (sharedTooltip?.owner === me) {\n                sharedTooltip.owner = null;\n                sharedTooltip.hide();\n            }\n\n            me.onExitFullscreen();\n\n            // If we get destroyed very quickly after a call to show,\n            // we must kill the timers which add the realign listeners.\n            me.clearTimeout(me.scrollListenerTimeout);\n            me.clearTimeout(me.resizeListenerTimeout);\n\n            // Remove listeners which are only added during the visible phase.\n            // In its own method because it's called on hide and destroy.\n            me.removeTransientListeners();\n\n            if (me.floating || me.positioned) {\n                // Hide without animation, destruction is sync\n                me.hide(false);\n            }\n            else {\n                me.revertFocus();\n            }\n\n            ResizeMonitor.removeResizeListener(element.parentElement, me.onParentElementResize);\n            ResizeMonitor.removeResizeListener(element, me.onElementResize);\n\n            // Remove elements *which we own* on destroy,\n            if (me.adopt) {\n                for (let nodes = Array.from(element.childNodes), i = 0, { length } = nodes; i < length; i++) {\n                    const el = nodes[i];\n\n                    // If it's not preexisting, and not the floatRoot, remove it\n                    if (!preExistingElements.includes(el) && el !== me.floatRoot) {\n                        el.remove();\n                    }\n                }\n                element.className = me.adoptedElementClassName;\n                element.style.cssText = me.adoptedElementCssText;\n            }\n            else {\n                element.remove();\n            }\n\n            me.dragEventDetacher?.();\n            me.dragOverEventDetacher?.();\n            me.dragGhost.remove();\n        }\n\n        super.doDestroy();\n    }\n\n    //endregion\n\n    //region Values\n\n    get assignValueDefaults() {\n        return assignValueDefaults;\n    }\n\n    get valueName() {\n        return this.name || this.ref || this.id;\n    }\n\n    getValueName(onlyName) {\n        onlyName = (onlyName && typeof onlyName === 'object') ? onlyName.onlyName : onlyName;\n\n        return onlyName ? this.name : this.valueName;\n    }\n\n    assignFieldValue(values, key, value) {\n        const\n            me                = this,\n            valueBindProperty = me.defaultBindProperty;\n\n        if (valueBindProperty in me) {\n            me[valueBindProperty] = value;\n        }\n    }\n\n    assignValue(values, options) {\n        options = options || assignValueDefaults;\n\n        const\n            me  = this,\n            hec = me[highlightExternalChange],\n            key = me.getValueName(options);\n\n        if (key && (!values || key in values)) {\n            if (options.highlight === false) {\n                // Don't want a field highlight on mass change\n                me[highlightExternalChange] = false;\n            }\n\n            // Setting to null when value not matched clears field\n            me.assignFieldValue(values, key, values ? values[key] : null);\n\n            me[highlightExternalChange] = hec;\n        }\n    }\n\n    gatherValue(values) {\n        const\n            me                = this,\n            valueBindProperty = me.defaultBindProperty;\n\n        // TODO find better way to only gather values from **input** fields\n        if (me.constructor !== Widget && valueBindProperty in me) {\n            values[me.name || me.ref || me.id] = me[valueBindProperty];\n        }\n    }\n\n    gatherValues(values) {\n        this.eachWidget(widget => widget.gatherValue(values), false);\n    }\n\n    //endregion\n\n    get forwardTwinEvents() {\n        const value = this._forwardTwinEvents;\n\n        return value && ObjectHelper.getTruthyKeys(value);\n    }\n\n    /**\n     * This widget's twin that is placed in an overflow menu when this widget has been hidden by its owner, typically\n     * a {@link Core.widget.Toolbar} due to {@link Core.widget.Toolbar#config-overflow}. The `overflowTwin` is created\n     * lazily by {@link #function-ensureOverflowTwin}.\n     *\n     * @member {Core.widget.Widget} overflowTwin\n     * @readonly\n     * @internal\n     */\n\n    /**\n     * This method returns the config object to use for creating this widget's {@link #property-overflowTwin}.\n     *\n     * @param {Function|Object} [overrides] If an object is passed, it is a set of config properties to override the\n     * config object returned by {@link #function-configureOverflowTwin}. If a function is passed, it is called with\n     * the config object. The function may either alter the object it is given or return a replacement.\n     * @returns {Object} The `overflowTwin` config object\n     * @internal\n     */\n    configureOverflowTwin(overrides) {\n        const me = this;\n\n        let config = ObjectHelper.clone(me.initialConfig);\n\n        // Must not duplicate IDs\n        delete config.id;\n\n        // If the initialConfig was hidden, we must override that\n        config.hidden = false;\n\n        config.type = me.type;\n        config._overflowTwinOrigin = me;\n\n        // These properties are things that may be changed frequently from the initialConfig state.\n        config.disabled = me.disabled;\n\n        if ('value' in me) {\n            config.value = me.value;\n        }\n\n        // Ensure we don't have any onFoo for a forwarded 'foo' event:\n        me.forwardTwinEvents?.forEach(ev => {\n            delete config[`on${StringHelper.capitalize(ev)}`];\n        });\n\n        if (overrides) {\n            config = (typeof overrides === 'function')\n                ? overrides(config) || config : ObjectHelper.assign(config, overrides);\n        }\n\n        return config;\n    }\n\n    /**\n     * This method creates the {@link #property-overflowTwin} for this widget. It is called by\n     * {@link #function-ensureOverflowTwin} if the `overflowTwin` does not yet exist.\n     *\n     * The config for the {@link #property-overflowTwin} is produced by {@link #function-configureOverflowTwin}.\n     *\n     * @param {Function|Object} [overrides] If an object is passed, it is a set of config properties to override the\n     * config object returned by {@link #function-configureOverflowTwin}. If a function is passed, it is called with\n     * the config object. The function may either alter the object it is given or return a replacement.\n     * @returns {Core.widget.Widget} The `overflowTwin`\n     * @internal\n     */\n    createOverflowTwin(overrides) {\n        const\n            me           = this,\n            config       = me.configureOverflowTwin(overrides),\n            overflowTwin = Widget.create(config);\n\n        me.forwardTwinEvents?.forEach(ev => {\n            overflowTwin.ion({\n                [ev] : info => {\n                    // Only forward events if the twin is still connected to its owner\n                    if (me.overflowTwin === info.source) {\n                        info = ObjectHelper.assign({}, info);\n\n                        // The twin is not the source:\n                        delete info.source;\n\n                        me.trigger(info.type, info);\n                    }\n                }\n            });\n        });\n\n        return overflowTwin;\n    }\n\n    /**\n     * This method returns the existing {@link #property-overflowTwin} or creates it, if it has not yet been created\n     * (see {@link #function-createOverflowTwin}).\n     *\n     * @param {Function|Object} [overrides] If an object is passed, it is a set of config properties to override the\n     * config object returned by {@link #function-configureOverflowTwin}. If a function is passed, it is called with\n     * the config object. The function may either alter the object it is given or return a replacement.\n     * @param {Function} [onCreate] A function to call when the `overflowTwin` is initially created.\n     * @returns {Core.widget.Widget} The `overflowTwin`\n     * @internal\n     */\n    ensureOverflowTwin(overrides, onCreate) {\n        let { overflowTwin } = this;\n\n        if (!overflowTwin) {\n            this.overflowTwin = overflowTwin = this.createOverflowTwin(overrides);\n\n            onCreate?.(overflowTwin);\n        }\n\n        return overflowTwin;\n    }\n\n    //---------------------------------------------------------------------------------------------------------\n    //region Render\n\n    /**\n     * Returns `true` if this class uses `compose()` to render itself.\n     * @returns {Boolean}\n     * @internal\n     */\n    get isComposable() {\n        return !this.compose.$nullFn;\n    }\n\n    adoptElement(element, adopt, id) {\n        const\n            me             = this,\n            adoptElement   = typeof adopt === 'string' ? document.getElementById(adopt) : adopt,\n            previousHolder = Widget.fromElement(adoptElement);\n\n        // If we are taking it over from a previous iteration, destroy the previous holder. This is not officially\n        // supported, but CodeEditor relies on it working\n        if (previousHolder && previousHolder.adopt && previousHolder !== me) {\n            const previousHolderAdopt = typeof previousHolder.adopt === 'string'\n                ? document.getElementById(previousHolder.adopt)\n                : previousHolder.adopt;\n\n            if (previousHolderAdopt === adoptElement) {\n                previousHolder.destroy();\n            }\n        }\n\n        // On destroy, leave these\n        me.preExistingElements = Array.from(adoptElement.childNodes);\n        me.adoptedElementClassName = adoptElement.className;\n        me.adoptedElementCssText = adoptElement.style.cssText;\n\n        // Adopt the host element's id if we don't have one so that we do not override\n        // it and invalidate any ad-based CSS rules.\n        if (adoptElement.id && !id) {\n            me.id = element.id = adoptElement.id;\n        }\n\n        DomHelper.syncAttributes(element, adoptElement);\n\n        for (let i = 0, { length } = element.childNodes; i < length; i++) {\n            adoptElement.appendChild(element.childNodes[0]);\n        }\n\n        delete me._contentRange;\n\n        // Silently update our element config (do not re-run change/update cycle):\n        me._element = adoptElement;\n\n        const\n            domConfig = element.lastDomConfig,\n            listeners = domConfig?.listeners;\n\n        if (listeners && me.isComposable) {\n            listeners.un?.();\n            addElementListeners(me, adoptElement, domConfig);\n        }\n\n        // Maintain DomSync internal state from our original element:\n        adoptElement.lastDomConfig = domConfig || adoptElement.lastDomConfig;\n        adoptElement.$refOwnerId = me.id;\n\n        if (!me.scaleToFitWidth) {\n            me.getConfig('monitorResize');\n        }\n    }\n\n    /**\n     * Defines an element reference accessor on the class prototype. This accessor is used to flush any pending DOM\n     * changes prior to accessing such elements.\n     * @param {String} name\n     * @param {String} key\n     * @private\n     */\n    addRefAccessor(name, key) {\n        const { prototype } = this.constructor;\n\n        defineProperty(prototype, key, {\n            writable : true,\n            value    : null\n        });\n\n        defineProperty(prototype, name, {\n            get() {\n                // Asking for a ref el is a good sign that we need to sync the DOM:\n                this.recompose.flush();\n                return this[key];\n            },\n            set(el) {\n                this[key] = el;\n            }\n        });\n    }\n\n    /**\n     * This method is called by `DomHelper.createElement` and `DomSync.sync` as new reference elements are created.\n     * @param {String} name The name of the element, i.e., the value of its `reference` attribute.\n     * @param {HTMLElement} el The element instance\n     * @param {DomConfig} [domConfig] The DOM config object.\n     * @internal\n     */\n    attachRef(name, el, domConfig) {\n        const\n            me  = this,\n            key = '_' + name;\n\n        //<debug>\n        if (me.$meta.configs[name]) {\n            throw new Error(`Config \"${name}\" collides with reference element`);\n        }\n        //</debug>\n\n        // Key elements contain owner pointer if data is supported (Not on IE SVG).\n        el.dataset && (el.dataset.ownerCmp = me.id);\n\n        if (me.isComposable) {\n            if (!(key in me)) {\n                me.addRefAccessor(name, key);\n            }\n\n            addElementListeners(me, el, domConfig, name);\n        }\n\n        me.byRef[name] = el;\n        me[name] = el;\n    }\n\n    /**\n     * This method is called by `DomSync.sync` as reference elements are removed from the DOM.\n     * @param {String} name The name of the element, i.e., the value of its `reference` attribute.\n     * @param {HTMLElement} el The element instance\n     * @param {DomConfig} domConfig The DOM config object.\n     * @internal\n     */\n    detachRef(name, el, domConfig) {\n        const\n            me        = this,\n            listeners = me._refListeners;\n\n        if (listeners?.[name]) {\n            listeners[name]();\n            delete listeners[name];\n        }\n\n        me[name] = null;\n\n        delete me.byRef[name];\n    }\n\n    /**\n     * This method is called following an update to the widget's rendered DOM.\n     * @internal\n     */\n    afterRecompose() {\n        // empty\n    }\n\n    /**\n     * Returns a {@link Core.helper.DomHelper#function-createElement-static} config object that defines this widget's\n     * DOM structure. This object should be determined using {@link Core.Base#property-configurable-static} properties\n     * to ensure this method is called again if these properties are modified.\n     *\n     * For more information see {@link Core.widget.Widget class documentation}.\n     * @returns {DomConfig}\n     */\n    compose() {\n        return {\n            class : DomClassList.normalize(this.widgetClassList, 'object')\n        };\n    }\n\n    /**\n     * This method iterates the class hierarchy from Widget down to the class of this instance and calls any `compose`\n     * methods implemented by derived classes.\n     * @returns {Object}\n     * @private\n     */\n    doCompose() {\n        const\n            me               = this,\n            { $meta : meta } = me,\n            classes          = meta.hierarchy;\n\n        let { composers } = meta,\n            domConfig     = null,\n            c, key, firstTime, i, proto, renderConfigs;\n\n        me.recompose.suspend();\n\n        if (!composers) {\n            firstTime = true;\n            meta.composers = composers = [];\n\n            // Widget starts the process w/the widgetClassList\n            for (i = classes.indexOf(Widget); i < classes.length; ++i) {\n                proto = classes[i].prototype;\n\n                if (hasOwnProperty.call(proto, 'compose')) {\n                    composers.push(proto);\n                }\n            }\n\n            // See if the class (or a super class) has declared its `renderConfigs`. If so, we use them.\n            if (!(renderConfigs = meta.getInherited('renderConfigs', /* create = */false))) {\n                // If not, we create a Proxy or proxy-like object that can detect getter calls to determine them. While\n                // technically the getters may not all trigger on any given rendering, we ignore this due to the high\n                // cost of supporting such arbitrary compose() methods. By convention, compose() must read configs\n                // consistently.\n                renderConfigs = Object.create(null);\n\n                // On the first composition for this class, watch the config properties that are read to auto populate\n                // the renderConfigs:\n                me.configObserver = {\n                    get(name) {\n                        renderConfigs[name] = true;\n                    }\n                };\n            }\n\n            meta.$renderConfigs = renderConfigs;\n        }\n\n        // This loop always runs at least once due to Widget base class, so ret will be assigned here:\n        for (i = 0; i < composers.length; ++i) {\n            c = composers[i].compose.call(me, domConfig);\n            domConfig = domConfig ? DomHelper.merge(domConfig, c) : c;\n        }\n\n        if (hasOwnProperty.call(me, 'compose') && (c = me.compose)) {\n            c = c.call(me, domConfig);\n            DomHelper.merge(domConfig, c);\n        }\n\n        firstTime && delete me.configObserver;\n\n        // When converting a children:{} into an array, we take a moment to ensure we have an accessor defined for\n        // the element. This is needed if the element is initially unrendered since we need the accessor to flush a\n        // pending recompose through just in time via the reference element getter.\n        return DomHelper.normalizeChildren(domConfig, (childName, hoist) => {\n            // Only care about refs that should be hoisted up to us\n            if (hoist) {\n                key = '_' + childName;\n\n                if (!(key in me)) {\n                    me.addRefAccessor(childName, key);\n                }\n            }\n        });\n    }\n\n    get element() {\n        // NOTE: We can replace the getter of a config property\n\n        if (this.isComposable && !this.isDestroying) {\n            // Asking for the primary el is a good sign that we need to sync the DOM:\n            this.recompose.flush();\n        }\n\n        return this._element;\n    }\n\n    /**\n     * Template method called during DOM updates. See {@link Core.helper.DomSync#function-sync-static DomSync.sync()}.\n     * @param {Object} info Properties describing the sync action taken.\n     * @internal\n     */\n    domSyncCallback(info) {\n        // bound in construct. Override in subclass\n    }\n\n    changeElement(element) {\n        const\n            me      = this,\n            compose = me.isComposable;\n\n        if (compose) {\n            //<debug>\n            if (element !== true) {\n                throw new Error(`${this.$$name} cannot use compose() method with an element config`);\n            }\n            //</debug>\n\n            element = me.doCompose();\n\n            //<debug>\n            if (!ObjectHelper.isObject(element)) {\n                throw new Error(`${this.$$name} compose() method must return an object`);\n            }\n            //</debug>\n        }\n\n        if (typeof element === 'string') {\n            element = DomHelper.createElementFromTemplate(element);\n        }\n        else if (ObjectHelper.isObject(element)) {\n            element = DomHelper.createElement(element, {\n                refOwner : me,\n                callback : me.domSyncCallback  // mimic DomSync callbacks (needed by TaskBoard)\n            });\n\n            me.recompose.resume();\n\n            compose && addElementListeners(me, element, element.lastDomConfig);\n        }\n        else if (DomHelper.isReactElement(me.peekConfig('html'))) {\n            // Will portal the React element into the element later\n            element = document.createElement('div');\n        }\n        else if (element.nodeType !== 1) {\n            element = DomHelper.createElementFromTemplate(me.template(me));\n        }\n\n        element.id = me.id;\n\n        if (me.elementAttributes) {\n            DomHelper.setAttributes(element, me.elementAttributes);\n        }\n\n        return element;\n    }\n\n    updateElement(element) {\n        const\n            me                                                  = this,\n            { className }                                       = element,\n            { contentElement, contentElementCls, isComposable } = me,\n            hasChildContent                                     = contentElement !== element,\n            namedElements                                       = !isComposable && element.querySelectorAll('[data-reference]'),\n            // Start with the hierarchy classes, eg ['b-combo b-pickerfield b-textfield b-widget']\n            classes                                             = isComposable ? [] : me.widgetClassList;  // a dynamic array that we can safely modify\n\n        // The ui classes need to put on the content element even if isComposable, but widgetClassList contains the\n        // ui classes, so we don't need to do that if the main element is the contentElement\n        let uiClasses = (hasChildContent || !isComposable) && me.uiClasses;\n\n        className && classes.unshift(className);\n        me._hidden && classes.push('b-hidden');\n        me._readOnly && classes.push('b-readonly');\n\n        // Calling element.remove() when we have the focus can result in a DOMException (notably when a blur/focusout\n        // handler reentrancy results in a remove):\n        //  DOMException: Failed to execute 'remove' on 'Element': The node to be removed is no longer a child\n        //  of this node. Perhaps it was moved in a 'blur' event handler?\n        FunctionHelper.noThrow(element, 'remove' /*, () => { debugger; } /**/); // delete \"/*\" to break on exception\n\n        if (uiClasses) {\n            if (contentElementCls?.value) {\n                uiClasses = uiClasses.slice();  // clone cached array\n                uiClasses.push(contentElementCls.value);\n            }\n\n            uiClasses = uiClasses.join(' ');\n        }\n        else {\n            uiClasses = contentElementCls?.value;\n        }\n\n        if (uiClasses) {\n            if (hasChildContent) {\n                contentElement.className += ' ' + uiClasses;\n            }\n            else {\n                classes.push(uiClasses);\n            }\n        }\n\n        // The environmental classes only need to be added to outermost Widgets.\n        // If we have a parent container, that will have them.\n        if (!me.parent) {\n            const\n                { defaultCls } = me,\n                { outerCls }   = Widget;\n\n            classes.push(...(defaultCls ? outerCls.filter(c => !(c in defaultCls) || defaultCls[c]) : outerCls));\n        }\n\n        element.className = classes.join(' ');\n\n        if (namedElements) {\n            for (let el, i = 0; i < namedElements.length; ++i) {\n                el = namedElements[i];\n                me.attachRef(el.getAttribute('data-reference'), el);\n\n                el.removeAttribute('data-reference');\n            }\n        }\n\n        // Mutually exclusive with scaleToFitWidth.\n        // Observe container element before the cascade down to descendants.\n        // Outer elements are expected to fire resize first.\n        // It's a lazy config, so this is the time to flush it through to begin monitoring.\n        if (!me.adopt && !me.scaleToFitWidth) {\n            me.getConfig('monitorResize');\n        }\n\n        // Pull in lazy configs now we have the element.\n        me.getConfig('role');\n        me.getConfig('ariaLabel');\n        me.getConfig('ariaDescription');\n\n        // Ensure our content mutation observer keeps us informed of changes by third parties\n        // so that our config system can keep up to date.\n        if (me._html) {\n            me.getConfig('htmlMutationObserver');\n        }\n\n        /**\n         * Triggered when a widget's {@link #property-element} is available.\n         * @event elementCreated\n         * @param {HTMLElement} element The Widget's element.\n         * @internal\n         */\n        me.trigger('elementCreated', { element });\n    }\n\n    updateAriaDescription(ariaDescription) {\n        const\n            { ariaElement } = this,\n            descElId        = `${this.id}-aria-desc-el`;\n\n        if (ariaDescription) {\n            const ariaDescEl = this._ariaDescEl || (this._ariaDescEl = DomHelper.createElement({\n                className : 'b-aria-desc-element',\n                id        : descElId,\n                parent    : ariaElement\n            }));\n\n            ariaDescEl.innerText = ariaDescription.match(localizeRE) ? this.L(ariaDescription, this) : ariaDescription;\n            ariaElement.setAttribute('aria-describedBy', ariaDescEl.id);\n        }\n        else if (ariaElement.getAttribute('aria-describedby') === descElId) {\n            ariaElement.removeAttribute('aria-describedBy');\n        }\n    }\n\n    updateAriaLabel(ariaLabel) {\n        DomHelper.setAttributes(this.ariaElement, {\n            'aria-label' : ariaLabel?.match(localizeRE) ? this.L(ariaLabel, this) : ariaLabel\n        });\n    }\n\n    updateAriaHasPopup(ariaHasPopup) {\n        DomHelper.setAttributes(this.ariaElement, {\n            'aria-haspopup' : ariaHasPopup\n        });\n    }\n\n    updateRole(role) {\n        if (role) {\n            this.ariaElement?.setAttribute('role', role);\n        }\n        else {\n            this.ariaElement?.removeAttribute('role');\n        }\n    }\n\n    get ariaElement() {\n        // Ensure element has been created.\n        this.getConfig('element');\n\n        const { _ariaElement } = this;\n\n        // Note that we use ObjectHelper.getPath enabling expressions containing dots.\n        // So that widget classes may use `ownedWidget.input` to reference elements inside owned widgets.\n        return _ariaElement.nodeType === Node.ELEMENT_NODE ? _ariaElement : ObjectHelper.getPath(this, _ariaElement);\n    }\n\n    isCollapsified(collapsed, overlay) {\n        const { collapsify } = this;\n\n        // false => widget is unaffected when the panel is collapsed (always in main header)\n        // 'hide' => widget is hidden when the panel is collapsed (but still in main header)\n        let ret = !overlay;\n\n        if (collapsify == null) {               // widget is moved to the overlay when collapsed\n            ret = overlay ? collapsed : !collapsed;\n        }\n        else if (collapsify === 'overlay') {    // widget always appears in the overlay\n            ret = overlay;\n        }\n\n        return Boolean(ret);\n    }\n\n    /**\n     * Calling this {@link Core.mixin.Delayable#property-delayable-static} method marks this widget as dirty. The DOM\n     * will be updated on the next animation frame:\n     *\n     * ```javascript\n     *  widget.recompose();\n     *\n     *  console.log(widget.recompose.isPending);\n     *  > true\n     * ```\n     *\n     * A pending update can be flushed by calling `flush()` (this does nothing if no update is pending):\n     *\n     * ```javascript\n     *  widget.recompose.flush();\n     * ```\n     *\n     * This can be combined in one call to force a DOM update without first scheduling one:\n     *\n     * ```javascript\n     *  widget.recompose.now();\n     * ```\n     */\n    async recompose() {\n        const\n            me      = this,\n            options = {\n                targetElement : me.element,\n                domConfig     : me.doCompose(),\n                refOwner      : me,\n                callback      : me.domSyncCallback,\n\n                // This limits the sync() to only removing the classes and styles added by previous renderings. This\n                // allows dynamically added styles and classes to be preserved:\n                strict : true\n            };\n\n        if (me.transitionRecompose) {\n            me.isTransitioningDom = true;\n\n            await DomHelper.transition(ObjectHelper.assign({\n                element : me.element,\n                action() {\n                    DomSync.sync(options);\n                }\n            }, me.transitionRecompose));\n\n            if (me.isDestroyed) {\n                return;\n            }\n\n            me.isTransitioningDom = false;\n\n            me.trigger('transitionedRecompose');\n        }\n        else {\n            DomSync.sync(options);\n        }\n\n        if (options.changed) {\n            me.afterRecompose();\n\n            /**\n             * This event is fired after a widget's elements have been synchronized due to a direct or indirect call\n             * to {@link #function-recompose}, if this results in some change to the widget's rendered DOM elements.\n             *\n             * @event recompose\n             */\n            me.trigger('recompose');\n        }\n\n        me.recompose.resume();\n    }\n\n    changeElementRef(el) {\n        if (typeof el === 'string') {\n            const id = el;\n\n            if (!(el = document.getElementById(id))) {\n                throw new Error(`No element found with id '${id}'`);\n            }\n        }\n        return el;\n    }\n\n    changeAppendTo(appendTo) {\n        return this.changeElementRef(appendTo);\n    }\n\n    updateAppendTo(appendTo) {\n        if (!this.isConfiguring && appendTo) {\n            this.render();\n        }\n    }\n\n    changeInsertBefore(insertBefore) {\n        return this.changeElementRef(insertBefore);\n    }\n\n    updateInsertBefore(insertBefore) {\n        if (!this.isConfiguring && insertBefore) {\n            this.render();\n        }\n    }\n\n    changeInsertFirst(insertFirst) {\n        return this.changeElementRef(insertFirst);\n    }\n\n    updateInsertFirst(insertFirst) {\n        if (!this.isConfiguring && insertFirst) {\n            this.render();\n        }\n    }\n\n    /**\n     * Interprets the {@link #config-appendTo}, {@link #config-insertBefore} and {@link #config-insertFirst}\n     * configs to return an array containing `[parentElement, insertBefore]`\n     * @internal\n     * @param {Core.widget.Widget} source The widget for which to ascertain its render context.\n     * @returns {HTMLElement[]} The `[parentElement, insertBefore]` elements.\n     */\n    getRenderContext(config = this, renderTo) {\n        let parentElement = renderTo || config.appendTo, { insertFirst, insertBefore } = config;\n\n        if (insertFirst) {\n            parentElement = insertFirst;\n            insertBefore = parentElement.firstChild;\n        }\n\n        if (insertBefore) {\n            if (!parentElement) {\n                parentElement = insertBefore.parentElement;\n            }\n        }\n\n        // Must use undefined as insertBefore if not configured; DOM insertBefore won't accept null\n        return [parentElement, insertBefore || undefined];\n    }\n\n    render(renderTo, triggerPaint = true) {\n        const\n            me          = this,\n            { element } = me,\n            [\n                parentElement,\n                insertBefore\n            ]           = me.getRenderContext(me, renderTo);\n\n        me.emptyCache();\n\n        if (me.syncElement && me.currentElement) {\n            DomHelper.sync(element, me.currentElement);\n        }\n        else {\n            parentElement?.insertBefore(element, insertBefore);\n            me.currentElement = element;\n        }\n\n        // The environmental classes only need to be added to a naked Widget.\n        // If we are inside a Widget's element, that will have them.\n        if (Widget.fromElement(element.parentElement)) {\n            element.classList.remove(...Widget.outerCls);\n        }\n\n        super.render(parentElement, triggerPaint);\n\n        me.rendered = true;\n\n        // Now that we have our complete DOM, update our role if we have one.\n        me.getConfig('role');\n\n        if (triggerPaint) {\n            me.getConfig('contentRange');\n            me.triggerPaint();\n        }\n\n        me.setupFocusListeners();\n    }\n\n    /**\n     * A function which, when passed an instance of this Widget, produces a valid HTML string which is compiled\n     * to create the encapsulating element for this Widget, and its own internal DOM structure.\n     *\n     * Note that this just creates the DOM structure that *this* Widget owns. If it contains child widgets\n     * (Such as for example a grid), this is not included. The template creates own structure.\n     *\n     * Certain elements within the generated element can be identified as special elements with a `reference=\"name\"`\n     * property. These will be extracted from the element upon creation and injected as the named property into\n     * the Widget. For example, a {@link Core.widget.TextField} will have an `input` property which is its\n     * `<input>` element.\n     * @param {Core.widget.Widget} me The widget for which to produce the initial HTML structure.\n     * @internal\n     */\n    template({ tag, html, htmlCls, name }) {\n        const me = this;\n\n        // Allow a string callback such as 'up.getHTML' to be used\n        if (typeof html === 'string' && callbackRe.test(html) && me.resolveCallback(html, me, false)) {\n            html = me.callback(html, me, [me]);\n        }\n        const content = html?.call ? html.call(me, me) : html;\n\n        return `<${tag} class=\"${content ? htmlCls : ''}\" ${name ? `data-name=\"${name}\"` : ''}>${content || ''}</${tag}>`;\n    }\n\n    updateRecomposeAsync(async) {\n        this.recompose.immediate = !async;\n    }\n\n    //endregion\n    //---------------------------------------------------------------------------------------------------------\n\n    onConfigChange({ name }) {\n        // The $renderConfigs object is either on our prototype (due to renderConfigs getter) or on our instance (due\n        // to \"get composer\") unless we are not using compose(), in which case it will be null:\n        if (this._element && !this.isDestroying && this.$meta.$renderConfigs?.[name]) {\n            this.recompose();\n        }\n    }\n\n    //region Extract config\n\n    // These functions are not meant to be called by any code other than Base#getCurrentConfig()\n\n    // Clean up configs\n    preProcessCurrentConfigs(configs) {\n        super.preProcessCurrentConfigs(configs);\n\n        // Remove link to parent, is set when added\n        delete configs.parent;\n    }\n\n    // Extract config's current value, special handling for style\n    getConfigValue(name, options) {\n        // Dont want the full CSSStyleDeclaration object\n        if (name === 'style') {\n            return this._style;\n        }\n\n        return super.getConfigValue(name, options);\n    }\n\n    // Extract current value of all initially used configs, special handling for widget type\n    getCurrentConfig(options) {\n        const result = super.getCurrentConfig(options);\n\n        // Always include type, except for on outermost level\n        if (options?.depth > 0) {\n            result.type = this.type;\n        }\n\n        return result;\n    }\n\n    //endregion\n\n    /**\n     * Get widgets elements dataset or assign to it\n     * @property {Object}\n     * @category DOM\n     */\n    get dataset() {\n        return this.element.dataset;\n    }\n\n    changeDataset(dataset) {\n        Object.assign(this.dataset, dataset);\n    }\n\n    get dragGhost() {\n        return this.constructor._dragGhost || (this.constructor._dragGhost = DomHelper.createElement({\n            // Safari won't allow dragging an empty node\n            html  : '\\xa0',\n            style : 'position:absolute;top:-10000em;left:-10000em'\n        }));\n    }\n\n    updateParent(parent) {\n        const { _element : element } = this;\n\n        if (element) {\n            element.classList[parent ? 'remove' : 'add'](...Widget.outerCls);\n        }\n    }\n\n    get constrainTo() {\n        let result = this._constrainTo;\n\n        result = (result === undefined) ? globalThis : (result?.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? (result.host || result.ownerDocument) : result);\n\n        // If we're positioned, any constrainTo must be a Rectangle in our offsetParent's coordinate space\n        if (this.positioned) {\n            const { offsetParent } = this.element;\n\n            // We can't be seen outside our offsetParent, so that's the de-facto constrainTo\n            // regardless of what is passed.\n            if (offsetParent && DomHelper.getStyleValue(offsetParent, 'overflow') === 'hidden') {\n                result = Rectangle.from(offsetParent).moveTo(0, 0);\n            }\n            else if (result && !result.isRectangle) {\n                const isViewport = result === document || result === globalThis;\n\n                result = Rectangle.from(result, offsetParent);\n                if (isViewport) {\n                    result.translate(globalThis.pageXOffset, globalThis.pageYOffset);\n                }\n            }\n        }\n        return result;\n    }\n\n    updateCentered(value) {\n        const\n            {\n                element,\n                _anchorElement\n            } = this;\n\n        if (value && !this.floating && !this.positioned) {\n            throw new Error('`centered` is only relevant when a Widget is `floating` or `positioned`');\n        }\n\n        if (value) {\n            element.classList.add('b-centered');\n            element.style.transform = element.style.left = element.style.top = '';\n            _anchorElement?.classList.add('b-hide-display');\n            element.classList.remove('b-anchored');\n        }\n        else {\n            element.classList.remove('b-centered');\n        }\n    }\n\n    /**\n     * The child element into which content should be placed. This means where {@link #config-html} should be put,\n     * or, for {@link Core.widget.Container Container}s, where child items should be rendered.\n     * @property {HTMLElement}\n     * @readonly\n     * @category DOM\n     */\n    get contentElement() {\n        return this.element;\n    }\n\n    get contentRange() {\n        const\n            me                 = this,\n            { contentElement } = me,\n            contentRange       = me._contentRange || (me._contentRange = new Range());\n\n        // Initialize the contentRange if it's collapsed.\n        // It gets collapsed if the widget's element is removed from the DOM.\n        if (contentRange.collapsed) {\n            contentRange.setStart(contentElement, me.contentRangeStartOffset || 0);\n            contentRange.setEnd(contentElement, me.contentRangeEndOffset || contentElement.childNodes.length);\n        }\n\n        return contentRange;\n    }\n\n    /**\n     * This method fixes the element's `$refOwnerId` when this instance's `id` is changing.\n     * @param {Node} el The element or DOM node to fix.\n     * @param {String} id The new id being assigned.\n     * @param {String} oldId The old id (previously assigned).\n     * @private\n     */\n    fixRefOwnerId(el, id, oldId) {\n        if (el.$refOwnerId === oldId) {\n            el.$refOwnerId = id;\n\n            for (let { childNodes } = el, i = childNodes.length; i-- > 0; /* empty */) {\n                this.fixRefOwnerId(childNodes[i], id, oldId);\n            }\n        }\n    }\n\n    get placement() {\n        const\n            me          = this,\n            { element } = me;\n\n        let adjRect, placement, rect;\n\n        if (element?.offsetParent && !nonFlowedPositions.test(DomHelper.getStyleValue(element, 'position'))) {\n            const\n                next     = element.nextElementSibling,\n                previous = element.previousElementSibling,\n                last     = !next && previous;\n\n            placement = DomHelper.getStyleValue(element.parentElement, 'flex-direction');\n\n            // If used in a flex layout, determine orientation from flex-direction\n            if (placement) {\n                placement = placement.startsWith('row') ? 'h' : 'v';\n            }\n            else {\n                adjRect = (next || previous)?.getBoundingClientRect();\n                rect = adjRect && element.getBoundingClientRect();\n                placement = (adjRect && Math.abs(adjRect.top - rect.top) < Math.abs(adjRect.left - rect.left)) ? 'h' : 'v';\n                // if there is another item, check for more horz delta than vert and if so, call it a horz container\n            }\n\n            placement += (placement === 'h') ? (last ? 'r' : 'l') : (last ? 'b' : 't');\n        }\n\n        return placement;\n    }\n\n    updateId(id, oldId) {\n        super.updateId(id, oldId);\n\n        if (oldId) {\n            // NOTE this happens when we adopt an element w/an assigned id...\n\n            const { byRef, element } = this;\n\n            for (const ref in byRef) {\n                byRef[ref].dataset && (byRef[ref].dataset.ownerCmp = id);  // SVG elements have no dataset\n            }\n\n            element.id = id;\n\n            this.fixRefOwnerId(element, id, oldId);\n        }\n    }\n\n    /**\n     * Get/set widgets elements style. The setter accepts a cssText string or a style config object, the getter always\n     * returns a CSSStyleDeclaration\n     * @property {CSSStyleDeclaration}\n     * @accepts {String|Object|CSSStyleDeclaration}\n     * @category DOM\n     */\n    get style() {\n        const { element } = this;\n\n        return element?.ownerDocument.defaultView.getComputedStyle(element) || this._style;\n    }\n\n    updateStyle(style) {\n        this.element && DomHelper.applyStyle(this.element, style);\n    }\n\n    updateTitle(title) {\n        if (this.titleElement) {\n            this.titleElement.innerHTML = title;\n        }\n    }\n\n    //region floating\n\n    // Hook used by Tooltip to handle RTL\n    beforeAlignTo(spec) {}\n\n    /**\n     * If this Widget is {@link #config-floating} or {@link #config-positioned}, and visible, aligns the widget\n     * according to the passed specification. To stop aligning, call this method without arguments.\n     * @param {AlignSpec|HTMLElement} [spec] Alignment options. May be an alignment specification object, or an\n     * `HTMLElement` to align to using this Widget's {@link #config-align} configuration.\n     * @category Float & align\n     */\n    alignTo(spec) {\n        const\n            me = this,\n            {\n                lastAlignSpec,\n                element\n            }  = me,\n            {\n                offsetParent,\n                style,\n                classList\n            }  = element;\n\n        if (lastAlignSpec) {\n            // Remove intersection observation from our previous align target element.\n            lastAlignSpec.monitorIntersection && me.intersectionObserver.unobserve(lastAlignSpec.target);\n\n            // Ensure marker class of previous alignment side is removed.\n            if (isFinite(lastAlignSpec.zone)) {\n                element.classList.remove(alignedClass[lastAlignSpec.zone]);\n            }\n        }\n\n        // Change the widget state to non-aligned if called with no align spec.\n        if (!spec) {\n            me.removeTransientListeners();\n            me.anchor = me.lastAlignSpec = null;\n            return;\n        }\n\n        // Hook used by Tooltip to handle RTL\n        me.beforeAlignTo(spec);\n\n        //<debug>\n        if (!(me.floating || me.positioned)) {\n            throw new Error('Only floating or positioned Widgets can use alignTo');\n        }\n        if (!(spec.nodeType || spec.target || spec.position || (spec.$$name === 'Point'))) {\n            throw new Error('Widget.alignTo must be either passed a target to position by, or a position Point to position at');\n        }\n        //</debug>\n\n        // You can \"alignTo\" an element or a Widget or a Point, and allow our align config.\n        // property to specify how.\n        if (spec.nodeType === Element.ELEMENT_NODE || spec.isWidget || (spec.$$name === 'Point')) {\n            spec = {\n                target : spec\n            };\n        }\n\n        // Release size constraints so we can align from scratch each time.\n        me.releaseSizeConstraints();\n\n        const\n            {\n                scrollable,\n                constrainTo\n            }                 = me,\n            positioned        = me.positioned && DomHelper.getStyleValue(element, 'position') !== 'fixed',\n            scale             = me.scale || 1,\n            passedTarget      = spec.target,\n            target            = passedTarget && (passedTarget.isRectangle ? passedTarget : (passedTarget.element || passedTarget)),\n            myPosition        = Rectangle.from(element, positioned ? offsetParent : null, true),\n            {\n                width  : startWidth,\n                height : startHeight\n            }                 = myPosition,\n            aligningToElement = target && target.nodeType === Element.ELEMENT_NODE;\n\n        spec = spec.realignTarget ? spec : ObjectHelper.assign({\n            aligningToElement,\n            constrainTo,\n            align    : 'b-t', // we can end up w/o a value for this if an object replaces a string\n            axisLock : me.axisLock,\n            anchor   : me.anchor\n        }, me.align, spec);\n\n        // As part of fallback process when fitting within constraints, this may shrink to minima specified\n        // either on the align spec or the widget itself.\n        const\n            minWidth  = spec.minWidth || me.minWidth,\n            minHeight = spec.minHeight || me.minHeight;\n\n        // Minima have a different meaning in an alignRectangle.\n        // It means that the rectangle is willing to shrink down\n        // to that size during constraint, *not* that it can never\n        // be smaller than that size.\n        myPosition.isAlignRectangle = true;\n        minWidth && (myPosition.minWidth = minWidth * scale);\n        minHeight && (myPosition.minHeight = minHeight * scale);\n\n        // This is used by the realign call which may be called either when a global scroll is detected\n        // or the constraining element is resized.\n        me.lastAlignSpec = spec;\n\n        if (aligningToElement) {\n            // Cache element, not the widget\n            me.lastAlignSpec.target = target;\n        }\n\n        // If we're aligning to an alement which has layout\n        if (aligningToElement && hasLayout(target instanceof SVGElement ? target.closest('svg') : target)) {\n            // Don't destroy the spec which was cached above with the element in it.\n            spec = Object.setPrototypeOf({}, spec);\n\n            // If we are being called from realign, there will be a realignTarget present which is\n            // a viewport-based *visible* rectangle. Otherwise translate the element into a browser\n            // viewport based Rectangle. Rectangle doesn't have the knowledge that we do to make this\n            // decision. Floating alignment all takes place within browser viewport space, not document\n            // space.\n            spec.target = me.lastAlignSpec.targetRect = spec.realignTarget || (spec.allowTargetOut ? Rectangle.from(target, positioned ? offsetParent : null, !positioned) : DomHelper.isInView(target, false, me));\n\n            // This is the case where the target is scrolled or positioned out of view.\n            if (!spec.target) {\n                const result = me.hide();\n\n                // The hide method clears this flag.\n                // Only this hide invocation must complete with the\n                // targetOutOfView flag as true\n                // Hiding *might* destroy if autoClose is set.\n                if (!me.isDestroyed) {\n                    me.lastAlignSpec.targetOutOfView = true;\n                }\n                return result;\n            }\n\n            // Force the target to have an area so that intersect works.\n            spec.target.height = Math.max(spec.target.height, 1);\n            spec.target.width = Math.max(spec.target.width, 1);\n\n            // This is the element which determines our position.\n            // This is used in doHideOrRealign to see if a scroll event\n            // will have affected our position.\n            me.lastAlignSpec.anchoredTo = target;\n        }\n\n        if (spec.anchor) {\n            spec.anchorSize = me.anchorSize;\n            if (!element.contains(me.anchorPathElement)) {\n                element.appendChild(me.anchorElement);\n            }\n        }\n\n        // Flag to prevent infinite loop when setting html from a beforeAlign listener\n        me.isAligning = true;\n\n        // Allow outside world to modify the suggested position\n        me.trigger('beforeAlign', spec);\n\n        me.isAligning = false;\n\n        // This changes the 0% - 100% orientation along horizontal edges\n        spec.rtl = me.rtl;\n\n        // Handle direction neutral edges (s & e, asserted in PopupRTL.t.js)\n        if (spec.align.includes('s') || spec.align.includes('e')) {\n            if (me.rtl) {\n                spec.align = spec.align.replace(/s/g, 'r').replace(/e/g, 'l');\n            }\n            else {\n                spec.align = spec.align.replace(/s/g, 'l').replace(/e/g, 'r');\n            }\n        }\n\n        // Calculate the best position WRT target rectangle, our rectangle, a constrainTo rectangle\n        // and the rectangle of an anchor pointer.\n        const result = myPosition.alignTo(spec);\n\n        // May change if constraint changes our shape, and we have to go round again\n        let { align, anchor, x, y, width, height, overlap } = result;\n\n        // Which zone, T=0, R=1, B=2, L=3 the result is in\n        me.lastAlignSpec.zone = result.zone;\n\n        // If the alignment specified that we must constrain a dimension in order to\n        // fit within our constrainTo, then obey that. If we own a Scroller, then\n        // inform it that we do now need to scroll that dimension.\n        // These conditions are released upon each alignment call because conditions may change.\n        if (height != startHeight) {\n            if (!('configuredHeight' in me)) {\n                me.configuredHeight = style.height;\n            }\n            me.height = height / scale;\n            me.alignConstrained = me.alignConstrained | 1;\n            if (scrollable) {\n                scrollable.overflowY = true;\n            }\n        }\n        if (width != startWidth) {\n            if (!('configuredWidth' in me)) {\n                me.configuredWidth = style.width;\n            }\n            me.width = width / scale;\n            me.alignConstrained = me.alignConstrained | 2;\n            if (scrollable) {\n                scrollable.overflowX = scrollable.clientWidth > scrollable.scrollWidth;\n            }\n        }\n\n        // If either dimension has been constrained, we may have changed shape\n        // due to text wrapping/overflowing, so we have to realign at the\n        // successful align setting.\n        if (align && me.alignConstrained) {\n            spec.align = align;\n            const newResult = Rectangle.from(element, positioned ? offsetParent : null, true).alignTo(spec);\n\n            anchor = newResult.anchor;\n            x = newResult.x;\n            y = newResult.y;\n            width = newResult.width;\n            height = newResult.height;\n        }\n\n        // Aligning while centered just processes the constrainTo, and adds the transient listeers\n        if (!me.centered) {\n            me.setXY(x, y);\n        }\n\n        // Class indicates which edge of the target this is aligned to: 0, 1, 2, or 3 (TRBL)\n        if (!result.overlap && isFinite(result.zone)) {\n            classList.add(alignedClass[result.zone]);\n        }\n\n        // If we asked it to also calculate our anchor position, position our anchor.\n        // If we're not edge-to-edge aligned with our target, we cannot anchor.\n        if (anchor?.edge) {\n            const\n                { edge }          = anchor,\n                { anchorElement } = me,\n                elRect            = Rectangle.from(element),\n                colorMatchPoint   = [];\n\n            // Make the anchor color match the color of the closest adjacent element\n            if (edge === 'top' || edge === 'bottom') {\n                colorMatchPoint[0] = anchor.x;\n                colorMatchPoint[1] = edge === 'top' ? 1 : elRect.height - 1;\n            }\n            else {\n                // No RTL handling needed here as long as `s` and `e` alignment is used\n                colorMatchPoint[0] = edge === 'left' ? 1 : elRect.width - 1;\n                colorMatchPoint[1] = anchor.y;\n            }\n            let colourSource = DomHelper.childFromPoint(element, ...colorMatchPoint);\n\n            // Jump up past inner elements which have hover or focus because that may cause us to read\n            // a transient background-color.\n            if (colourSource?.matches(':hover,:focus') &&\n                (element.compareDocumentPosition(colourSource) & Node.DOCUMENT_POSITION_CONTAINED_BY)) {\n                colourSource = colourSource.parentNode;\n            }\n\n            // 2nd check is relevant when stylesheet fails to load\n            if (colourSource && colourSource !== document) {\n                let fillColour = DomHelper.getStyleValue(colourSource, 'background-color');\n\n                while (fillColour.match(isTransparent) && DomHelper.getStyleValue(colourSource, 'position') !== 'absolute') {\n                    colourSource = colourSource.parentNode;\n\n                    // Ensure stylesheet is loaded\n                    if (colourSource === document) {\n                        break;\n                    }\n                    fillColour = DomHelper.getStyleValue(colourSource, 'background-color');\n                }\n                if (fillColour.match(isTransparent)) {\n                    me.anchorPathElement.setAttribute('fill', me.defaultAnchorBackgroundColor);\n                }\n                else {\n                    me.anchorPathElement.setAttribute('fill', fillColour);\n                }\n            }\n\n            anchorElement.classList.remove('b-hide-display');\n            anchorElement.style.transform = '';\n            anchorElement.className = `b-anchor b-anchor-${edge}`;\n\n            // Anchor's position needs boosting if we are scaled down\n            anchor.x && (anchor.x /= scale);\n            anchor.y && (anchor.y /= scale);\n\n            DomHelper.setTranslateXY(anchorElement, anchor.x, anchor.y);\n            classList.add('b-anchored');\n        }\n        else if (me._anchorElement) {\n            me.anchorElement.classList.add('b-hide-display');\n            classList.remove('b-anchored');\n        }\n\n        // If we are to hide on scroll, we still need to know if the element we are\n        // aligned to moves. If we have not been *explicitly* aligned to an element,\n        // Use the element at our display position. For example, when a context menu\n        // is shown on a grid header, then is the grid header is moved by a scroll\n        // event, then we must hide.\n        if (!aligningToElement) {\n            // Our element is over the X, Y point now,\n            // elementFromPoint must \"see through\" it.\n            style.pointerEvents = 'none';\n            const el = DomHelper.elementFromPoint(x, y);\n\n            // If we own the element at the point, it means we are already visible\n            // and have visible descendants, so we must not update the anchoredTo\n            if (!me.owns(el)) {\n                me.lastAlignSpec.anchoredTo = el;\n            }\n            style.pointerEvents = '';\n        }\n\n        // If we're aligning to an element, then listen for scrolls so that we can remain aligned.\n        // Scrolls can be instigated with no mousedown, so transient floating Widgets can be put\n        // out of alignment by scrolls.\n        if ((me.scrollAction === 'realign' && aligningToElement || me.scrollAction === 'hide') && !me.documentScrollListener) {\n            // Firefox requires a longer timeout to not autohide as the result of a scroll event firing during Menu show\n            me.clearTimeout(me.scrollListenerTimeout);\n\n            // If the align spec demands, request to be notified if the target element\n            // we're aligning to exits the document or an element which contains it gets\n            // mutated - for example realigned - so that we can follow it.\n            if (spec.monitorTargetMutation && !me.targetObserver) {\n                const targetObserver = me.targetObserver || (me.targetObserver = new MutationObserver(me.onTargetParentMutation.bind(me)));\n                targetObserver.observe(DomHelper.getRootElement(target), { childList : true, attributes : true, subtree : true });\n            }\n\n            me.scrollListenerTimeout = me.setTimeout(() => {\n                const targetRoot = target.getRootNode?.();\n\n                // Realign if the main document detects a scroll.\n                // On raf to avoid scroll syncing other elements causing multiple realigns (grids body and header etc)\n                me.documentScrollListener = EventHelper.addListener(document, 'scroll', 'doHideOrRealign', { capture : true, thisObj : me });\n\n                // In case the align target is in a WC, also capture scrolls scoped with in its shadow root\n                if (targetRoot?.mode) {\n                    me.targetRootScrollListener = EventHelper.addListener(targetRoot, 'scroll', 'doHideOrRealign', { capture : true, thisObj : me });\n                }\n            }, me.scrollAction === 'hide' ? me.ignoreScrollDuration : 0);\n        }\n\n        // If alignment specified monitorResize add a resize listener to the target so we can stay aligned.\n        if (aligningToElement) {\n            if (spec.monitorResize && !me.targetResizeListener) {\n                ResizeMonitor.addResizeListener(target, me.onTargetResize);\n                me.targetResizeListener = true;\n            }\n            // If configured to monitor intersection, and we are not potentially obscuring\n            // it ourselves, and it's not an SVG element, observe its intersection changes.\n            // Bug with IntersectionObserver and SVG elements, so omit them:\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=1159196\n            if (spec.monitorIntersection && !(overlap || target.contains(element) || target.ownerSVGElement)) {\n                me.intersectionObserver.observe(target);\n            }\n        }\n\n        // Don't try to listen for window resizes to try realigning on Android.\n        // That just means the keyboard has been shown.\n        if (!BrowserHelper.isAndroid) {\n            if (!me.constrainListeners) {\n                const el = constrainTo?.isRectangle ? globalThis : constrainTo;\n                // Always observe for changes to window size since aligned things\n                // will possibly be out of place after a window resize\n                me.clearTimeout(me.resizeListenerTimeout);\n                me.resizeListenerTimeout = me.setTimeout(() => {\n                    me.constrainListeners = true;\n                    ResizeMonitor.addResizeListener(el || globalThis, me.onAlignConstraintChange);\n                }, me.ignoreScrollDuration);\n            }\n        }\n    }\n\n    onTargetParentMutation(mutationRecords) {\n        const { element, lastAlignSpec } = this;\n\n        if (lastAlignSpec?.aligningToElement) {\n            // If the target we are aligning to has exited the document, we must hide.\n            if (!isInDocument(lastAlignSpec.target)) {\n                this.hide();\n            }\n            // Any mutation of an element which owns the target but not this must cause realign.\n            else if (mutationRecords.some(({ target }) => target.contains(lastAlignSpec.target) && !element.contains(target))) {\n                this.realign();\n            }\n        }\n    }\n\n    get intersectionObserver() {\n        return this._intersectionObserver || (this._intersectionObserver = new IntersectionObserver(this.onTargetIntersectionchange.bind(this), {\n            root : BrowserHelper.isSafari ? this.rootElement : this.rootElement.ownerDocument\n        }));\n    }\n\n    onTargetIntersectionchange(entries) {\n        if (!this.isDestroyed) {\n            // It may go through several states. Only interrogate the latest.\n            const e = entries[entries.length - 1];\n\n            if (!e.isIntersecting) {\n                this.onAlignTargetOutOfView(e.target);\n            }\n        }\n    }\n\n    onTargetResize() {\n        const { lastAlignSpec } = this;\n\n        if (lastAlignSpec) {\n            const {\n                    width  : lastWidth,\n                    height : lastHeight\n                } = lastAlignSpec.targetRect,\n                {\n                    width,\n                    height\n                } = lastAlignSpec.target.getBoundingClientRect();\n\n            // If the target's outer size has changed size since alignTo measured it, realign\n            if (width !== lastWidth || height !== lastHeight) {\n                this.onAlignConstraintChange(...arguments);\n            }\n        }\n    }\n\n    /**\n     * This method is called when the {@link #function-alignTo} target element loses intersection with the\n     * visible viewport. That means it has been scrolled out of view, or becomes zero size, or hidden or\n     * is removed from the DOM.\n     *\n     * The base class implementation hides by default.\n     * @param {HTMLElement} target The alignTo target that is no longer in view.\n     * @internal\n     */\n    onAlignTargetOutOfView(target) {\n        this.hide();\n        this.lastAlignSpec && (this.lastAlignSpec.targetOutOfView = true);\n    }\n\n    onAlignConstraintChange(el, oldRect, { height }) {\n        const\n            { style }     = this.contentElement,\n            { overflowY } = style;\n\n        // We must jump over any Responsive mixin changes which happen in this animation frame.\n        this.setTimeout(this.realign, 50);\n\n        // Blink doesn't remove vertical scrollbar upon release of size constraint without this.\n        if (oldRect && height > oldRect.height) {\n            style.overflowY = 'hidden';\n            this.requestAnimationFrame(() => style.overflowY = overflowY);\n        }\n    }\n\n    /**\n     * Called when an element which affects the position of this Widget's\n     * {@link #function-alignTo align target} scrolls so that this can realign.\n     *\n     * If the target has scrolled out of view, then this Widget is hidden.\n     * @internal\n     */\n    realign() {\n        const\n            me                = this,\n            { lastAlignSpec } = me;\n\n        if ((me.floating || me.positioned) && lastAlignSpec && me.isVisible) {\n            if (lastAlignSpec.aligningToElement) {\n                const\n                    insideTarget  = lastAlignSpec.target.contains(this.element),\n                    realignTarget = DomHelper.isInView(lastAlignSpec.target, false, me);\n\n                // If the target that we are realigning to is not in view, we hide, and set the\n                // flag in the lastAlignSpec to explain why\n                if (!lastAlignSpec.allowTargetOut && (!hasLayout(lastAlignSpec.target) || !realignTarget)) {\n                    me.hide();\n                    // Hiding *might* destroy if autoClose is set.\n                    if (!me.isDestroyed) {\n                        me.lastAlignSpec.targetOutOfView = true;\n                    }\n                    return;\n                }\n\n                // We use a different align target when *re*aligning. It's the *visible* rectangle.\n                // Unless we re inside the target, in which case the target itself is used.\n                lastAlignSpec.realignTarget = insideTarget ? null : realignTarget;\n            }\n            DomHelper.addTemporaryClass(me.element, 'b-realigning', me.realignTimout, me);\n            me.alignTo(lastAlignSpec);\n        }\n    }\n\n    /**\n     * Returns the specified bounding rectangle of this widget.\n     * @param {'border'|'client'|'content'|'inner'|'outer'} [which='border'] By default, the rectangle returned is the\n     * bounding rectangle that contains the `element` border. Pass any of these values to retrieve various rectangle:\n     *  - `'border'` to get the {@link Core.helper.util.Rectangle#function-from-static border rectangle} (the default).\n     *  - `'client'` to get the {@link Core.helper.util.Rectangle#function-client-static client rectangle}.\n     *  - `'content'` to get the {@link Core.helper.util.Rectangle#function-content-static content rectangle}.\n     *  - `'inner'` to get the {@link Core.helper.util.Rectangle#function-inner-static inner rectangle}.\n     *  - `'outer'` to get the {@link Core.helper.util.Rectangle#function-outer-static outer rectangle}.\n     * @param {HTMLElement|Core.widget.Widget} [relativeTo] Optionally, a parent element or widget in whose space to\n     * calculate the Rectangle.\n     * @param {Boolean} [ignorePageScroll=false] Use browser viewport based coordinates.\n     * @returns {Core.helper.util.Rectangle}\n     * @internal\n     */\n    rectangle(which, relativeTo, ignorePageScroll) {\n        return this.rectangleOf('element', which, relativeTo, ignorePageScroll);\n    }\n\n    /**\n     * Returns the specified bounding rectangle of the specified child `element` of this widget.\n     * @param {String} [element] The child element name.\n     * @param {'border'|'client'|'content'|'inner'|'outer'} [which='border'] By default, the rectangle returned\n     * is the bounding rectangle that contains the `element` border. Pass any of these values to retrieve various\n     * rectangle:\n     *  - `'border'` to get the {@link Core.helper.util.Rectangle#function-from-static border rectangle} (the default).\n     *  - `'client'` to get the {@link Core.helper.util.Rectangle#function-client-static client rectangle}.\n     *  - `'content'` to get the {@link Core.helper.util.Rectangle#function-content-static content rectangle}.\n     *  - `'inner'` to get the {@link Core.helper.util.Rectangle#function-inner-static inner rectangle}.\n     *  - `'outer'` to get the {@link Core.helper.util.Rectangle#function-outer-static outer rectangle}.\n     * @param {HTMLElement|Core.widget.Widget} [relativeTo] Optionally, a parent element or widget in whose space to\n     * calculate the Rectangle. If `element` is not `'element'`, then this defaults to the widget's primary element.\n     * @param {Boolean} [ignorePageScroll=false] Use browser viewport based coordinates.\n     * @returns {Core.helper.util.Rectangle}\n     * @internal\n     */\n    rectangleOf(element, which, relativeTo, ignorePageScroll) {\n        if (typeof which !== 'string') {\n            ignorePageScroll = relativeTo;\n            relativeTo = which;\n            which = '';\n        }\n        else if (which === 'border') {\n            which = '';\n        }\n        // which is locked in\n\n        if (typeof relativeTo === 'boolean') {\n            ignorePageScroll = relativeTo;\n            relativeTo = undefined;\n        }\n\n        if (element !== 'element' && relativeTo === undefined) {\n            relativeTo = this.element;\n        }\n\n        relativeTo = relativeTo?.isWidget ? relativeTo.element : relativeTo;\n\n        return Rectangle[which || 'from'](this[element], relativeTo, ignorePageScroll);\n    }\n\n    releaseSizeConstraints() {\n        const me       = this,\n            scroller = me.scrollable;\n\n        // Release constraints so we can align from scratch each time.\n        if (me.alignConstrained & 1) {\n            me.height = me.configuredHeight;\n            if (scroller) {\n                scroller.overflowY = scroller.config.overflowY;\n            }\n        }\n        if (me.alignConstrained & 2) {\n            me.width = me.configuredWidth;\n            if (scroller) {\n                scroller.overflowX = scroller.config.overflowX;\n            }\n        }\n        me.alignConstrained = 0;\n    }\n\n    /**\n     * Only valid for {@link #config-floating} Widgets. Moves to the front of the visual stacking order.\n     * @category Float & align\n     */\n    toFront() {\n        const\n            { element } = this,\n            parent      = this.floating ? this.floatRoot : this.positioned ? element?.parentNode : null;\n\n        //<debug>\n        if (!parent) {\n            throw new Error('Only floating or positioned Widgets can use toFront');\n        }\n        //</debug>\n        if (element?.nextSibling) {\n            const r = this._toFrontRange || (this._toFrontRange = document.createRange());\n\n            // Instead of moving this element (which may contain focus and therefore should not be moved),\n            // Lasso all following nodes using a range and insert them before this.\n            // If it contained focus, appending it triggers a focusOut event which will not be expected.\n            r.setStartBefore(element.nextSibling);\n            r.setEndAfter(parent.lastElementChild);\n            parent.insertBefore(r.extractContents(), element);\n        }\n    }\n\n    //endregion\n\n    //region Getters/setters\n\n    updateRef(ref) {\n        this.element.dataset.ref = ref;\n    }\n\n    /**\n     * The child element which scrolls if any. This means the element used by the {@link #config-scrollable}.\n     * @property {HTMLElement}\n     * @readonly\n     * @category DOM\n     */\n    get overflowElement() {\n        return this.contentElement;\n    }\n\n    get maxHeightElement() {\n        return this.element;\n    }\n\n    changeAlign(align) {\n        return (typeof align === 'string') ? { align } : align;\n    }\n\n    changeScrollable(scrollable, oldScrollable) {\n        if (typeof scrollable === 'boolean') {\n            scrollable = {\n                overflowX : scrollable,\n                overflowY : scrollable\n            };\n        }\n\n        if (scrollable) {\n            //<debug>\n            if (scrollable.constructor.name !== 'Object') {\n                throw new Error('scrollable config must be an {overflowX: <boolean>, overflowY: <boolean>} object, or a boolean');\n            }\n            //</debug>\n\n            scrollable.element = this.overflowElement;\n            scrollable.widget = this;\n\n            if (!scrollable.isScroller) {\n                scrollable = oldScrollable ? oldScrollable.setConfig(scrollable) : new this.scrollerClass(scrollable);\n            }\n\n            // Keep overflow indicator classes in sync\n            scrollable.syncOverflowState();\n        }\n        // Destroy the old scroller if the scroller is being nulled.\n        else {\n            oldScrollable?.destroy();\n        }\n\n        return scrollable;\n    }\n\n    handleReactElement(html) {\n        const parent = this.closest(cmp => cmp.reactComponent);\n        if (parent?.reactComponent) {\n            parent.reactComponent.processWidgetContent({\n                reactElement   : html,\n                widget         : this,\n                reactComponent : parent.reactComponent\n            });\n        }\n    }\n\n    /**\n     * Get/set HTML to display. When specifying HTML, this widget's element will also have the\n     * {@link #config-htmlCls} added to its classList, to allow targeted styling.\n     * @property {String}\n     * @category DOM\n     */\n    get html() {\n        // Maintainer, we cannot use a ternary here, we need the this.initializingElement test to shortcut\n        // to the true case to return the _html property to avoid infinite loops.\n        if (this.initializingElement || !this.element) {\n            return this.content || this._html;\n        }\n\n        return this.contentElement.innerHTML;\n    }\n\n    updateHtml(html) {\n        const\n            me         = this,\n            isClearing = (html == null),\n            {\n                element,\n                contentElement,\n                htmlCls\n            }          = me;\n\n        // An existing element is needed for React support to work\n        if (!element && DomHelper.isReactElement(html)) {\n            me.whenVisible(() => me.handleReactElement(html));\n            return;\n        }\n\n        if (element) {\n            // So that our contentElement MutationObserver doesn't react\n            me.updatingHtml = true;\n\n            const anchorEl = (contentElement === element) && me._anchorElement;\n\n            // Flag class that we are an HTML carrying element\n            if (htmlCls) {\n                // Salesforce doesn't support passing array\n                htmlCls.values.forEach(value => element.classList[isClearing ? 'remove' : 'add'](value));\n            }\n\n            // Setting innerHTML destroys the anchorElement in some browsers, we must temporarily remove it to preserve\n            // it. Only if the contentElement is the main element.\n            if (anchorEl) {\n                element.removeChild(anchorEl);\n            }\n\n            if (html && typeof html === 'object') {\n                if (DomHelper.isReactElement(html)) {\n                    me.handleReactElement(html);\n                }\n                else {\n                    DomSync.sync({\n                        domConfig : {\n                            ...html,\n                            onlyChildren : true\n                        },\n                        targetElement : me.contentElement\n                    });\n                }\n            }\n            else {\n                me.contentElement.innerHTML = isClearing ? '' : html;\n            }\n\n            // Ensure our content mutation observer keeps us informed of changes by third parties\n            // so that our config system can keep up to date.\n            me.getConfig('htmlMutationObserver');\n\n            if (anchorEl) {\n                element.appendChild(anchorEl);\n            }\n\n            if (me.isComposable) {\n                me.recompose();\n            }\n            else if (me.floating || me.positioned) {\n                // Must realign because content change might change dimensions\n                if (!me.isAligning) {\n                    me.realign();\n                }\n            }\n        }\n    }\n\n    changeHtmlMutationObserver(htmlMutationObserver, was) {\n        const\n            me                 = this,\n            { contentElement } = me;\n\n        // Clean up old one\n        was?.disconnect(contentElement);\n\n        // Create MutationObserver\n        if (htmlMutationObserver) {\n            const result = new MutationObserver(() => {\n                if (me.updatingHtml) {\n                    me.updatingHtml = false;\n                }\n                else {\n                    me._html = contentElement.innerHTML;\n                }\n            });\n\n            result.observe(contentElement, htmlMutationObserver);\n            return result;\n        }\n    }\n\n    updateContent(html) {\n        const\n            me                   = this,\n            isClearing           = (html == null),\n            { element, htmlCls } = me;\n\n        if (element) {\n            const { contentRange } = me;\n\n            // Flag class that we are an HTML carrying element\n            if (htmlCls) {\n                // Salesforce doesn't support passing array\n                htmlCls.values.forEach(value => element.classList[isClearing ? 'remove' : 'add'](value));\n            }\n\n            // Only works if we are in the DOM\n            if (isInDocument(element)) {\n                // Replace the contents of our content range with the new content\n                contentRange.deleteContents();\n                if (!isClearing) {\n                    contentRange.insertNode(DomHelper.createElementFromTemplate(html, {\n                        fragment : true\n                    }));\n                }\n            }\n            else {\n                me.contentElement.innerHTML = html;\n            }\n\n            // Cache in case it gets collapsed\n            me.contentRangeStartOffset = contentRange.startOffset;\n            me.contentRangeEndOffset = contentRange.endOffset;\n\n            // Must realign because content change might change dimensions\n            if ((me.floating || me.positioned) && !me.isAligning) {\n                me.realign();\n            }\n        }\n    }\n\n    onThemeChange() {\n        // If we have a *visible* anchor element, then a theme change may\n        // invalidate it's size or this.defaultAnchorBackgroundColor, so a\n        // run through realign (and get anchorSize) will fix that.\n        if (this.anchorElement?.offsetParent) {\n            this._anchorSize = null;\n            this.realign();\n        }\n    }\n\n    /**\n     * Returns an `[x, y]` array containing the width and height of the anchor arrow used when\n     * aligning this Widget to another Widget or element.\n     *\n     * The height is the height of the arrow when pointing upwards, the width is the width\n     * of the baseline.\n     * @property {Number[]}\n     * @category Float & align\n     */\n    get anchorSize() {\n        const me = this;\n\n        let result = this._anchorSize;\n\n        if (!result) {\n            // TODO: Move the anchoring scheme to the Panel class when we have it.\n            // These values will be in the SASS and styled into the SVG through the Panel's theme.\n            const\n                borderWidth   = parseFloat(DomHelper.getStyleValue(me.element, 'border-top-width')),\n                borderColour  = DomHelper.getStyleValue(me.element, 'border-top-color'),\n                anchorElement = me.anchorElement,\n                { className } = anchorElement,\n                svgEl         = anchorElement.firstElementChild,\n                pathElement   = me.anchorPathElement = svgEl.lastElementChild,\n                hidden        = me._hidden;\n\n            // In case we are measuring after the size has been invalidated (such as via theme change)\n            // and the widget is shown and aligned left or right. We must measure it in top alignment\n            // so as to get the dimensions the right way round.\n            anchorElement.className = 'b-anchor b-anchor-top';\n\n            let backgroundColour = DomHelper.getStyleValue(me.contentElement, 'background-color');\n\n            // If the background colour comes through from the outer element, use that.\n            if (backgroundColour.match(isTransparent)) {\n                backgroundColour = DomHelper.getStyleValue(me.element, 'background-color');\n            }\n            me.defaultAnchorBackgroundColor = backgroundColour;\n\n            result = anchorElement.getBoundingClientRect();\n            const [width, height] = result = me._anchorSize = [result.width, result.height];\n\n            // Restore orientation\n            anchorElement.className = className;\n\n            svgEl.setAttribute('height', height + borderWidth);\n            svgEl.setAttribute('width', width);\n            pathElement.setAttribute('d', `M0,${height}L${width / 2},0.5L${width},${height}`);\n            if (borderWidth) {\n                pathElement.setAttribute('stroke-width', borderWidth);\n                pathElement.setAttribute('stroke', borderColour);\n            }\n            result[1] -= borderWidth;\n\n            if (hidden) {\n                me.element.classList.add('b-hidden');\n            }\n\n            if (!me.themeChangeListener) {\n                me.themeChangeListener = GlobalEvents.ion({\n                    theme   : 'onThemeChange',\n                    thisObj : me\n                });\n            }\n\n            // Reset to default in case it has been positioned by a coloured header\n            me.anchorPathElement.setAttribute('fill', me.defaultAnchorBackgroundColor);\n        }\n\n        return result;\n    }\n\n    get anchorElement() {\n        const me = this;\n\n        if (!me._anchorElement) {\n            const\n                useFilter = me.floating,\n                filterId  = `${me.id}-shadow-filter`;\n\n            me._anchorElement = DomHelper.createElement({\n                parent    : me.element,\n                className : 'b-anchor b-anchor-top',\n                children  : [{\n                    tag      : 'svg',\n                    ns       : 'http://www.w3.org/2000/svg',\n                    version  : '1.1',\n                    class    : 'b-pointer-el',\n                    children : [useFilter\n                        ? {\n                            tag      : 'defs',\n                            children : [{\n                                tag      : 'filter',\n                                id       : filterId,\n                                children : [{\n                                    tag             : 'feDropShadow',\n                                    dx              : 0,\n                                    dy              : -1,\n                                    stdDeviation    : 1,\n                                    'flood-opacity' : 0.2\n                                }]\n                            }]\n                        }\n                        : null, {\n                        tag                         : 'path',\n                        [useFilter ? 'filter' : ''] : `url(#${filterId})`\n                    }]\n                }]\n            });\n        }\n\n        return me._anchorElement;\n    }\n\n    updateAnchor(anchor) {\n        if (this._anchorElement) {\n            this._anchorElement.classList[anchor ? 'remove' : 'add']('b-hide-display');\n        }\n    }\n\n    updateDraggable(draggable) {\n        const\n            me          = this,\n            { element } = me;\n\n        if (draggable) {\n            me.dragEventDetacher = EventHelper.addListener({\n                element,\n                dragstart : 'onWidgetDragStart',\n                dragend   : 'onWidgetDragEnd',\n                thisObj   : me\n            });\n\n            me.dragDetacher = EventHelper.on({\n                element,\n                mousedown(event) {\n                    const\n                        { target }    = event,\n                        closestWidget = Widget.fromElement(target);\n\n                    // Fix for FF draggable bug https://bugzilla.mozilla.org/show_bug.cgi?id=1189486\n                    if (!event.target.closest('.b-field-inner') &&\n                        // Only allow drag to start when the action originates from the widget element itself,\n                        // or one of its toolbars. https://github.com/bryntum/support/issues/3214\n                        closestWidget === this || (this.strips && Object.values(this.strips).includes(closestWidget))) {\n                        element.setAttribute('draggable', 'true');\n                    }\n                },\n                // Only needed for automatic listener removal on destruction of the thisObj\n                thisObj : me\n            });\n        }\n        else {\n            me.dragEventDetacher?.();\n            me.dragOverEventDetacher?.();\n            me.dragDetacher?.();\n        }\n    }\n\n    onWidgetDragStart(e) {\n        const me = this;\n\n        if (!me.validateDragStartEvent(e)) {\n            return;\n        }\n\n        const\n            {\n                element,\n                align,\n                constrainTo\n            }                    = me,\n            positioned           = me.positioned && DomHelper.getStyleValue(element, 'position') !== 'fixed',\n            parentElement        = positioned ? element.parentElement : me.rootElement,\n            myRect               = Rectangle.from(element, positioned ? parentElement : null),\n            dragStartX           = e.clientX,\n            dragStartY           = e.clientY,\n            scrollingPageElement = (document.scrollingElement || document.body),\n            [widgetX, widgetY]   = positioned ? DomHelper.getOffsetXY(element, parentElement) : me.getXY(),\n            constrainRect        = (positioned ? Rectangle.content(parentElement).moveTo(0, 0) : constrainTo && (constrainTo?.isRectangle ? constrainTo : Rectangle.from(constrainTo)))?.deflate(align.constrainPadding || 0),\n            dragListeners        = {\n                element : parentElement,\n\n                dragover : event => {\n                    // Centered adds positioning rules, it can't be centered during drag.\n                    element.classList.remove('b-centered');\n\n                    // Shift our rectangle to the desired point.\n                    myRect.moveTo(\n                        widgetX + event.clientX - dragStartX - (positioned ? 0 : scrollingPageElement.scrollLeft),\n                        widgetY + event.clientY - dragStartY - (positioned ? 0 : scrollingPageElement.scrollTop)\n                    );\n                    // Constrain it if we are configured to be constrained\n                    if (constrainRect) {\n                        myRect.constrainTo(constrainRect);\n                    }\n\n                    // Position using direct DOM access, do not go though the setXY method which clears\n                    // any centered config. User dragging only moves this show of the widget. Upon next\n                    // neutral show (with no extra positioning info), a centered widget will show centered again.\n                    DomHelper.setTranslateXY(element, myRect.x, myRect.y);\n                }\n            };\n\n        // Stop viewport panning on drag on touch devices\n        if (BrowserHelper.isTouchDevice) {\n            dragListeners.touchmove = e => e.preventDefault();\n        }\n\n        me.floatRoot.appendChild(me.dragGhost);\n\n        me.setDragImage(e);\n\n        // Prevent special cursor from being shown\n        e.dataTransfer.effectAllowed = 'none';\n\n        me.dragOverEventDetacher = EventHelper.addListener(dragListeners);\n\n        // Various app events (Such as resize or visible child count change) can\n        // cause a request to realign, so opt out of anchoring and alignedness\n        // until we are next hidden.\n        me.alignTo();\n    }\n\n    /**\n     * Validates a `dragstart` event with respect to the target element. Dragging is not normally\n     * initiated when the target is interactive such as an input field or its label, or a button.\n     * This may be overridden to provide custom drag start validation.\n     * @param {DragEvent} e The `dragstart` event to validate.\n     * @returns {Boolean} Return `true` if the drag is to be allowed.\n     * @internal\n     */\n    validateDragStartEvent(e) {\n        const\n            me                 = this,\n            { element }        = me,\n            actualTarget       = DomHelper.elementFromPoint(e.clientX, e.clientY), // Can't be resolved from the event :/\n            { handleSelector } = me.draggable;\n\n        if (handleSelector) {\n            const blacklist = negationPseudo.exec(handleSelector)?.[1]; // Extract the content of :not()\n\n            // If the selector was :not(), then if we are a descendant of a matching element, it's a no-drag\n            if (blacklist) {\n                if (actualTarget.closest(`#${element.id} ${blacklist}`)) {\n                    e.preventDefault();\n                    return false;\n                }\n            }\n            // If we are not the descendant of a matching element, it's a no-drag\n            else if (!actualTarget.closest(`#${element.id} ${handleSelector}`)) {\n                e.preventDefault();\n                return false;\n            }\n        }\n        return true;\n    }\n\n    setDragImage(e) {\n        if (e.dataTransfer.setDragImage) {\n            // Firefox requires this to be called before setDragImage\n            e.dataTransfer.setData('application/node type', '');\n\n            // Override the default HTML5 drag ghost and just drag an empty node.\n            // The large offset will cause it to be displayed offscreen on platforms\n            // which will not hide drag images (iOS)\n            e.dataTransfer.setDragImage(this.dragGhost, -9999, -9999);\n        }\n    }\n\n    setStyle(name, value) {\n        DomHelper.applyStyle(this.element, ObjectHelper.isObject(name) ? name : { [name] : value });\n        return this;\n    }\n\n    onWidgetDragEnd() {\n        this.dragGhost.remove();\n        this.dragOverEventDetacher();\n\n        this.element.removeAttribute('draggable');\n    }\n\n    changeFloating(value) {\n        // Coerce all to boolean so that we have a true/false value\n        return Boolean(value);\n    }\n\n    //<debug>\n    updateFloating(floating, was) {\n        if (!this.isConfiguring) {\n            throw new Error('Cannot set floating dynamically until the render pathway is fixed');\n        }\n        if (was) {\n            // Unfloating SHOULD move a Widget back into its owner Container's contentEl.\n            throw new Error('Cannot unfloat a Widget until we have the concept of Widget ownership and containment');\n        }\n        if (!floating && this.draggable && !this.positioned) {\n            // Draggability does not make sense when reconfiguring a component to be static\n            this.draggable = false;\n        }\n    }\n\n    //</debug>\n\n    changePositioned(value) {\n        // Coerce all to boolean so that we have a true/false value\n        return Boolean(value);\n    }\n\n    updatePositioned(positioned) {\n        this.element.classList[positioned ? 'add' : 'remove']('b-positioned');\n    }\n\n    getXY() {\n        return [\n            DomHelper.getPageX(this.element),\n            DomHelper.getPageY(this.element)\n        ];\n    }\n\n    /**\n     * Moves this Widget to the x,y position. Both arguments can be omitted to just set one value.\n     *\n     * *For {@link #config-floating} Widgets, this is a position in the browser viewport.*\n     * *For {@link #config-positioned} Widgets, this is a position in the element it was rendered into.*\n     *\n     * @param {Number} [x]\n     * @param {Number} [y]\n     * @category Float & align\n     */\n    setXY(x, y) {\n        const\n            me          = this,\n            { element } = me;\n\n        if (me.floating || me.positioned) {\n            if (x != null) {\n                me._x = x;\n            }\n            if (y != null) {\n                me._y = y;\n            }\n\n            // If we're position:fixed then it is positioned relative to either the viewport\n            // or an ancestor which has a transform, perspective of filter property.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/position.\n            // So translate it *relative* to its actual position/\n            if (DomHelper.getStyleValue(element, 'position') === 'fixed') {\n                const\n                    r        = element.getBoundingClientRect(),\n                    [cx, cy] = DomHelper.getTranslateXY(element),\n                    xDelta   = x - r.x,\n                    yDelta   = y - r.y;\n\n                DomHelper.setTranslateXY(element, cx + xDelta, cy + yDelta);\n            }\n            else {\n                DomHelper.setTranslateXY(element, me._x || 0, me._y || 0);\n            }\n            if (me.isConstructing) {\n                me.centered = false;\n            }\n            else {\n                element.classList.remove('b-centered');\n            }\n        }\n        //<debug>\n        else {\n            throw new Error('Inline widgets cannot set position');\n        }\n        //</debug>\n    }\n\n    /**\n     * Moves this Widget to the desired x position.\n     *\n     * Only valid if this Widget is {@link #config-floating} and not aligned or anchored to an element.\n     * @property {Number}\n     * @category Float & align\n     */\n    get x() {\n        return this.getXY()[0];\n    }\n\n    changeX(x) {\n        this.setXY(x);\n    }\n\n    /**\n     * Moves this Widget to the desired y position.\n     *\n     * Only valid if this Widget is {@link #config-floating} and not aligned or anchored to an element.\n     * @property {Number}\n     * @category Float & align\n     */\n    get y() {\n        return this.getXY()[1];\n    }\n\n    changeY(y) {\n        this.setXY(null, y);\n    }\n\n    /**\n     * Get elements offsetWidth or sets its style.width, or specified width if element not created yet.\n     * @property {Number}\n     * @accepts {Number|String}\n     * @category Layout\n     */\n    get width() {\n        const\n            me      = this,\n            element = me.element;\n\n        if (me.monitorResize) {\n            // If the width is invalid, read it now.\n            if (me._width == null) {\n                me._width = element.offsetWidth;\n            }\n\n            // Usually this will be set in onInternalResize\n            return me._width;\n        }\n        // No monitoring, we have to measure;\n        return element.offsetWidth;\n    }\n\n    changeWidth(width) {\n        const me = this;\n\n        DomHelper.setLength(me.element, 'width', width);\n\n        me._lastWidth = width;\n\n        // Invalidate the width, so it will be read from the DOM if a read is requested before the resize event\n        me._width = null;\n\n        // Setting width explicitly should reset flex, since it's not flexed anymore\n        me._flex = null;\n        me.element.style.flex = '';\n    }\n\n    // This method is used by State API to drop cached width early to not rely on ResizeMonitor\n    clearWidthCache() {\n        this._width = null;\n    }\n\n    /**\n     * Get/set elements maxWidth. Getter returns max-width from elements style, which is always a string. Setter accepts\n     * either a String or a Number (which will have 'px' appended). Note that like {@link #config-width},\n     * _reading_ the value will return the numeric value in pixels.\n     * @property {String}\n     * @accepts {String|Number}\n     * @category Layout\n     */\n    get maxWidth() {\n        return DomHelper.measureSize(this.element.style.maxWidth, this.element);\n    }\n\n    updateMaxWidth(maxWidth) {\n        DomHelper.setLength(this.element, 'maxWidth', maxWidth);\n    }\n\n    /**\n     * Get/set elements minWidth. Getter returns min-width from elements style, which is always a string. Setter accepts\n     * either a String or a Number (which will have 'px' appended). Note that like {@link #config-width},\n     * _reading_ the value will return the numeric value in pixels.\n     * @property {String}\n     * @accepts {String|Number}\n     * @category Layout\n     */\n    get minWidth() {\n        return DomHelper.measureSize(this.element.style.minWidth, this.element);\n    }\n\n    updateMinWidth(minWidth) {\n        DomHelper.setLength(this.element, 'minWidth', minWidth);\n    }\n\n    updateFlex(flex) {\n        // Width must be processed first, because its changer clears flex because flex wins over width;\n        // The assumption that the containing element's flex-direction is 'row'\n        // seems dodgy.\n        this.getConfig('width');\n\n        // Default grow to the same as flex and basis to 0.\n        if (typeof flex === 'number' || !isNaN(flex)) {\n            flex = `${flex} ${flex}`;\n        }\n\n        this.element.style.flex = flex;\n        this.element.style.width = '';\n    }\n\n    updateAlignSelf(alignSelf) {\n        this.element.style.alignSelf = alignSelf;\n    }\n\n    updateMargin(margin) {\n        // Convert eg 1 to \"1px 1px 1px 1px\" or \"0 8px\" to \"0px 8px 0px 8px\"\n        this.element.style.margin = this.parseTRBL(margin).join(' ');\n    }\n\n    updateTextAlign(align, oldAlign) {\n        oldAlign && this.element.classList.remove(`b-text-align-${oldAlign}`);\n        this.element.classList.add(`b-text-align-${align}`);\n    }\n\n    updatePlaceholder(placeholder) {\n        if (this.input) {\n            if (placeholder == null) {\n                this.input.removeAttribute('placeholder');\n            }\n            else {\n                this.input.placeholder = placeholder;\n            }\n        }\n    }\n\n    /**\n     * Get element's offsetHeight or sets its style.height, or specified height if element no created yet.\n     * @property {Number}\n     * @accepts {Number|String}\n     * @category Layout\n     */\n    get height() {\n        const me      = this,\n            element = me.element;\n\n        if (me.monitorResize) {\n            // If the height is invalid, read it now.\n            if (me._height == null) {\n                me._height = element.offsetHeight;\n            }\n\n            // Usually this will be set in onInternalResize\n            return me._height;\n        }\n        // No monitoring, we have to measure;\n        return element.offsetHeight;\n    }\n\n    changeHeight(height) {\n        DomHelper.setLength(this.element, 'height', height);\n\n        this._lastHeight = height;\n\n        // Invalidate the height, so it will be read from the DOM if a read is requested before the resize event\n        this._height = null;\n    }\n\n    /**\n     * Get/set element's maxHeight. Getter returns max-height from elements style, which is always a string. Setter\n     * accepts either a String or a Number (which will have 'px' appended). Note that like {@link #config-height},\n     * _reading_ the value will return the numeric value in pixels.\n     * @property {String}\n     * @accepts {String|Number}\n     * @category Layout\n     */\n    get maxHeight() {\n        return DomHelper.measureSize(this.maxHeightElement.style.maxHeight, this.element);\n    }\n\n    updateMaxHeight(maxHeight) {\n        DomHelper.setLength(this.maxHeightElement, 'maxHeight', maxHeight);\n    }\n\n    /**\n     * Get/set element's minHeight. Getter returns min-height from elements style, which is always a string. Setter\n     * accepts either a String or a Number (which will have 'px' appended). Note that like {@link #config-height},\n     * _reading_ the value will return the numeric value in pixels.\n     * @property {String}\n     * @accepts {String|Number}\n     * @category Layout\n     */\n    get minHeight() {\n        return DomHelper.measureSize(this.element.style.minHeight, this.element);\n    }\n\n    updateMinHeight(minHeight) {\n        DomHelper.setLength(this.element, 'minHeight', minHeight);\n    }\n\n    updateDisabled(disabled = false) {\n        const\n            {\n                element,\n                focusElement,\n                ariaElement\n            } = this;\n\n        this.trigger('beforeUpdateDisabled', { disabled });\n\n        if (disabled) {\n            this.revertFocus();\n\n            // If some focus listener changed our state, we must not continue\n            if (this._disabled !== disabled) {\n                return;\n            }\n        }\n\n        if (element) {\n            element.classList[disabled ? 'add' : 'remove']('b-disabled');\n\n            if (focusElement) {\n                focusElement.disabled = disabled;\n            }\n            if (ariaElement) {\n                ariaElement.setAttribute('aria-disabled', disabled);\n            }\n        }\n\n        this.onDisabled(disabled);\n    }\n\n    /**\n     * Called when disabled state is changed.\n     * Override in subclass that needs special handling when being disabled.\n     * @param {Boolean} disabled current state\n     * @private\n     */\n    onDisabled(disabled) {\n    }\n\n    /**\n     * Disable the widget\n     */\n    disable() {\n        this.disabled = true;\n    }\n\n    /**\n     * Enable the widget\n     */\n    enable() {\n        this.disabled = false;\n    }\n\n    /**\n     * Requests fullscreen display for this widget\n     * @returns {Promise} A Promise which is resolved with a value of undefined when the transition to full screen is complete.\n     */\n    requestFullscreen() {\n        const\n            me     = this,\n            // If we are floating, target the float root as the fullscreen element\n            result = Fullscreen.request(me.floating ? me.floatRoot : me.element);\n\n        Fullscreen.onFullscreenChange(me.onFullscreenChange);\n\n        if (!me.floating) {\n            me.floatRoot._oldParent = me.floatRoot.parentElement;\n            me.element.appendChild(me.floatRoot);\n        }\n\n        me.element.classList.add('b-fullscreen');\n\n        return result;\n    }\n\n    /**\n     * Exits fullscreen mode\n     * @returns {Promise} A Promise which is resolved once the user agent has finished exiting full-screen mode\n     */\n    exitFullscreen() {\n        return Fullscreen.exit();\n    }\n\n    onFullscreenChange() {\n        if (!Fullscreen.isFullscreen) {\n            this.onExitFullscreen();\n        }\n    }\n\n    onExitFullscreen() {\n        const\n            me        = this,\n            floatRoot = me._rootElement?.floatRoot;\n\n        Fullscreen.unFullscreenChange(me.onFullscreenChange);\n\n        me.element.classList.remove('b-fullscreen');\n\n        // When exiting fullscreen mode or when this widget is destroyed, move floatRoot back to its old parent\n        if (me.element.contains(floatRoot) && floatRoot?._oldParent) {\n            floatRoot._oldParent.appendChild(floatRoot);\n            floatRoot._oldParent = null;\n        }\n    }\n\n    /**\n     * Get/set a tooltip on the widget. Accepts a string or tooltip config (specify true (or 'true') to use placeholder\n     * as tooltip). When using a string it will configure the tooltip with `textContent: true` which enforces a default\n     * max width.\n     *\n     * By default, this uses a singleton Tooltip instance which may be accessed from the `{@link Core.widget.Widget}`\n     * class under the name `Widget.tooltip`. This is configured according to the config object on pointer over.\n     *\n     * To request a separate instance be created just for this widget, add `newInstance : true` to the configuration.\n     *\n     * @property {String|TooltipConfig}\n     * @category Misc\n     */\n    get tooltip() {\n        if (this._tooltip) {\n            return this._tooltip;\n        }\n        else {\n            const tooltip = Widget.Tooltip?.getSharedTooltip(this.rootElement);\n\n            // If the shared tooltip is currently in use by us, return it.\n            // If it's not in use by us, we don't have a tooltip.\n            if (tooltip && tooltip.activeTarget === this._element && tooltip.isVisible) {\n                return tooltip;\n            }\n        }\n    }\n\n    //noinspection JSAnnotator\n    changeTooltip(tooltip, oldTooltip) {\n        const\n            me          = this,\n            { element } = me;\n\n        if (tooltip) {\n            if (!(me.preventTooltipOnTouch && BrowserHelper.isTouchDevice)) {\n                if (!tooltip.isTooltip && tooltip.constructor.name !== 'Object') {\n                    tooltip = {\n                        html        : (typeof tooltip === 'string') ? tooltip : me.placeholder,\n                        textContent : true\n                    };\n                }\n\n                // Tooltip text becomes ariaDescription unless we already have ariaDescription configured.\n                // If it is localized using Ⳑ{key}, it will need to be converted to Ⳑ{Tooltip.key}\n                // so that when we come to resolve it, localization looks in the right place.\n                if (!me.configureAriaDescription) {\n                    me.ariaDescription = tooltip.html?.match(localizeRE) ? tooltip.html.replace(localizeRE, localizeTooltip) : tooltip.html;\n                }\n\n                // We have to explicitly request a new instance to avoid spam Tooltip instances.\n                // If there is an incoming oldTooltip, then we own a newInstance.\n                // TODO verify .isTooltip check is needed\n                if (oldTooltip?.isTooltip || tooltip.newInstance) {\n                    tooltip.type = 'tooltip';\n\n                    if (!tooltip.forElement) tooltip.forElement = element;\n                    if (!('showOnHover' in tooltip) && !tooltip.forSelector) tooltip.showOnHover = true;\n                    if (!('autoClose' in tooltip)) tooltip.autoClose = true;\n\n                    tooltip = Widget.reconfigure(oldTooltip, tooltip, me);\n\n                    // We need to update our ariaDescription when the tooltip changes\n                    me.detachListeners('tooltipValueListener');\n                    if (!me.configureAriaDescription) {\n                        tooltip.ion({\n                            name            : 'tooltipValueListener',\n                            innerHtmlUpdate : 'onTooltipValueChange',\n                            thisObj         : me\n                        });\n                    }\n                }\n                // The default is that tooltip content and configs from tipConfig\n                else {\n                    element.dataset.btip = true;\n                    me.tipConfig = tooltip;\n\n                    // We do not set our property if we are sharing the singleton\n                    return;\n                }\n            }\n        }\n        else {\n            // If there is an incoming oldTooltip, then we own a newInstance.\n            // Only destroy it if it's being set to null. Empty string\n            // just means clear its content.\n            if (oldTooltip) {\n                if (tooltip == null && oldTooltip.isTooltip) {\n                    oldTooltip.destroy();\n                }\n                else {\n                    // We do not update the property if we are just clearing its content\n                    oldTooltip.html = null;\n                    return;\n                }\n            }\n            // We are sharing, so just clear the btip\n            else {\n                delete element.dataset.btip;\n            }\n        }\n\n        return tooltip;\n    }\n\n    /**\n     * The shared {@link Core.widget.Tooltip} instance which handles\n     * {@link Core.widget.Widget#config-tooltip tooltips} which are __not__ configured\n     * with `newInstance : true`.\n     * @member {Core.widget.Tooltip} tooltip\n     * @readonly\n     * @static\n     */\n    // This property is defined in the Tooltip module but must be documented here.\n\n    // If our tooltip is dynamic, then we must update our aria-describedBy whenever it changes.\n    onTooltipValueChange({ value, source }) {\n        this.ariaDescription = (typeof value == 'string') ? value : source.contentElement.innerText;\n    }\n\n    get tooltipText() {\n        const tooltip = this._tooltip;\n\n        if (tooltip) {\n            return tooltip.isTooltip ? tooltip.contentElement.innerText : typeof tooltip === 'string' ? tooltip : tooltip.html;\n        }\n        else if (this.tipConfig) {\n            return this.tipConfig.html;\n        }\n    }\n\n    /**\n     * Determines visibility by checking if the Widget is hidden, or any ancestor is hidden and that it has an\n     * element which is visible in the DOM\n     * @property {Boolean}\n     * @category Visibility\n     * @readonly\n     */\n    get isVisible() {\n        const\n            me          = this,\n            { element } = me;\n\n        // Added so that we only acquire owner once. `get owner()` *may* have to search DOM\n        let owner;\n\n        // If we are hidden, or destroying, or any ancestors are hidden, we're not visible\n        return Boolean(element && !me._hidden && !me.isDestroying && isInDocument(element) &&\n            (!me.requireSize || hasLayout(element)) &&\n            (!(owner = me.containingWidget) || owner.isVisible)\n        );\n    }\n\n    whenVisible(callback, thisObj = this, args, id = callback) {\n        const me = this;\n\n        // Might be visible before being painted, queued calls are processed on paint, matching for direct calls\n        if (me.isVisible && me.isPainted) {\n            me.callback(callback, thisObj, args);\n        }\n        else {\n            // Multiple calls should replace previous requests so latest requested args are used.\n            (me.toCallWhenVisible || (me.toCallWhenVisible = new Map())).set(id, { callback, thisObj, args });\n        }\n    }\n\n    /**\n     * Focuses this widget if it has a focusable element.\n     */\n    focus() {\n        if (this.isFocusable) {\n            DomHelper.focusWithoutScrolling(this.focusElement);\n        }\n    }\n\n    /**\n     * Get this widget's primary focus holding element if this widget is itself focusable, or contains focusable widgets.\n     * @property {HTMLElement}\n     * @readonly\n     * @category DOM\n     */\n    get focusElement() {\n        // Override in widgets which are focusable.\n    }\n\n    get isFocusable() {\n        // Not focusable if we are in a destroy sequence or are disabled or not visible.\n        const focusElement = (!this.isDestroying && this.isVisible && !this.disabled) && this.focusElement;\n\n        // We are only focusable if the focusEl is deeply visible, that means\n        // it must have layout - an offsetParent. Body does not have offsetParent.\n        return focusElement && (focusElement === document.body || focusElement.offsetParent);\n    }\n\n    /**\n     * Shows this widget\n     * @param {Object} [options] modifications to the show operation\n     * @param {AlignSpec} [options.align] An alignment specification as passed to {@link #function-alignTo}\n     * @param {Boolean} [options.animate=true] Specify as `false` to omit the {@link #config-showAnimation}\n     * @category Visibility\n     * @returns {Promise} A promise which is resolved when the widget is shown\n     */\n    async show({ align, animate = true } = {}) {\n        const\n            me            = this,\n            {\n                element,\n                floating\n            }             = me,\n            { style }     = element,\n            showAnimation = animate && me.showAnimation;\n\n        let styleProp, animProps, trigger = !me.isVisible;\n\n        if (trigger) {\n            /**\n             * Triggered before a widget is shown. Return `false` to prevent the action.\n             * @preventable\n             * @async\n             * @event beforeShow\n             * @param {Core.widget.Widget} source The widget being shown.\n             */\n            trigger = me.trigger('beforeShow');\n\n            if (ObjectHelper.isPromise(trigger)) {\n                trigger = await trigger;\n            }\n        }\n\n        if (trigger !== false && (!me.internalBeforeShow || me.internalBeforeShow() !== false)) {\n            return new Promise(resolve => {\n                // Cancel any current hide/show animation\n                me.cancelHideShowAnimation();\n\n                // Centered config value takes precedence over x and y configs.\n                // This also ensures that widgets configured with centered: true\n                // and draggable : true will show in the center on next show after\n                // being dragged by the user which is the intuitive UX.\n                me.updateCentered(me._centered);\n\n                if (floating) {\n                    const floatRoot = me.floatRoot;\n\n                    if (!floatRoot.contains(element)) {\n                        // Replace this Widget's DOM into the container if it's already rendered\n                        if (me.rendered) {\n                            floatRoot.appendChild(me.element);\n                        }\n                        else {\n                            // Pass triggerPaint as false. The calls will not propagate\n                            // anyway since we are still hidden.\n                            me.render(floatRoot, false);\n                        }\n                    }\n\n                    // Because we are outside of any owner's element, we need to see if they're scaled so\n                    // that we match. See scaled examples with tooltips in API docs guides section.\n                    if (style.transform.includes('scale')) {\n                        me.scale = null;\n                        style.transform = style.transformOrigin = '';\n                    }\n\n                    const scaledAncestor = me.closest(isScaled);\n                    if (scaledAncestor) {\n                        const { scale } = scaledAncestor;\n\n                        // Our scale is the same while we are visible and owned by that scaled ancestor.\n                        // Now floating descendants will follow suit.\n                        me.scale = scale;\n                        style.transform = `scale(${scale})`;\n                        style.transformOrigin = `0 0`;\n                    }\n                }\n\n                me._hidden = false;\n\n                element.classList.remove('b-hidden');\n\n                // We may have been hidden by application CSS outside our knowledge\n                // so explicitly hide. If we are already in the hidden state, this is a no-op.\n                if (floating && !isVisible(element)) {\n                    me.hide(false);\n                    resolve();\n                }\n\n                // The changer vetoes the config change and routes here, so we must call this.\n                me.onConfigChange({\n                    name   : 'hidden',\n                    value  : false,\n                    was    : true,\n                    config : me.$meta.configs.hidden\n                });\n\n                if (showAnimation) {\n                    styleProp = Object.keys(showAnimation)[0];\n                    animProps = showAnimation[styleProp];\n\n                    const currentAnimation = me.currentAnimation = {\n                        showing : true,\n                        styleProp,\n                        resolve\n                    };\n\n                    me.isAnimating = true;\n\n                    // afterHideShowAnimate will always be called even if the transition aborts\n                    me.currentAnimation.detacher = EventHelper.onTransitionEnd({\n                        element,\n                        property : styleProp,\n                        duration : parseDuration(animProps.duration) + 20,\n                        handler  : () => me.afterHideShowAnimate(currentAnimation),\n                        thisObj  : me\n                    });\n\n                    // Setting transition style initial value before showing,\n                    // then reading the style to ensure transition will animate\n                    style[styleProp] = animProps.from;\n                    DomHelper.getStyleValue(element, styleProp);\n\n                    style.transition = `${styleProp} ${animProps.duration} ease ${animProps.delay}`;\n                    style[styleProp] = animProps.to;\n                }\n                me.afterShow(align, !showAnimation ? resolve : null);\n            });\n        }\n        else {\n            return Promise.resolve();\n        }\n    }\n\n    /**\n     * Show aligned to another target element or {@link Core.widget.Widget} or {@link Core.helper.util.Rectangle}\n     * @param {AlignSpec|HTMLElement|Number[]} align Alignment specification, or the element to align to using the\n     * configured {@link #config-align}.\n     * @category Float & align\n     * @returns {Promise} A promise which is resolved when the widget is shown\n     */\n    async showBy(align, yCoord, options) {\n        const\n            me      = this,\n            isArray = Array.isArray(align);\n\n        // We are being asked to align to a point\n        if (isArray || typeof align === 'number') {\n            const xy = isArray ? align : [align, yCoord];\n\n            align = Object.assign({\n                target    : new Point(xy[0] + 1, xy[1] + 1),\n                // Override any matchSize that we might have in our align config.\n                // Otherwise we are going to be 1px wide/high\n                matchSize : false,\n                align     : 't0-b0'\n            }, isArray ? yCoord : options);\n        }\n\n        //<debug>\n        if (!(me.floating || me.positioned)) {\n            throw new Error('Only floating or positioned Widgets can use showBy');\n        }\n        //</debug>\n\n        // Needs to have a layout to be aligned.\n        me.requireSize = true;\n\n        if (me.isVisible) {\n            DomHelper.addTemporaryClass(me.element, 'b-realigning', 300, me);\n            // Pass on possible [x, y, options] signature for showing at coordinates.\n            me.alignTo(align);\n        }\n        else {\n            return me.show({ align });\n        }\n    }\n\n    /**\n     * Show this widget anchored to a coordinate\n     * @param {Number|Number[]} x The x position (or an array with [x,y] values) to show by\n     * @param {Number} [y] The y position to show by\n     * @param {AlignSpec} [options] See {@link #function-showBy} for reference\n     * @category Float & align\n     * @deprecated Since 5.0.2. Use {@link #function-showBy} method with the same signature.\n     * @returns {Promise} A promise which is resolved when the widget is shown\n     */\n    async showByPoint() {\n        VersionHelper.deprecate('Core', '6.0.0', 'Widget.showByPoint() replaced by Widget.showBy() with the same signature');\n        return this.showBy(...arguments);\n    }\n\n    afterShow(align, resolveFn) {\n        const me = this;\n\n        /**\n         * Triggered after a widget is shown.\n         * @event show\n         * @param {Core.widget.Widget} source The widget\n         */\n        me.trigger('show');\n\n        // Cache our preferred anchoredness in case it's overridden by a drag.\n        me._configuredAnchorState = me.anchor;\n\n        // Keep any owning container informed about visibility state.\n        // It may not be a Container. SubGrid class is still a Widget\n        // which contains grid headers.\n        me.owner?.onChildShow?.(me);\n\n        me.triggerPaint();\n\n        // Align either as explicitly requested, or according to configuration\n        if (me.floating || me.positioned) {\n            if (align) {\n                me.alignTo(align);\n            }\n            // Go through alignTo to apply constrainTo and the transient listeners if centered\n            else if (me.centered) {\n                me.alignTo({\n                    target : me.constrainTo,\n                    align  : 'c-c'\n                });\n            }\n            else if (me.forElement) {\n                me.alignTo(me.forElement);\n            }\n        }\n\n        resolveFn?.();\n    }\n\n    onChildHide(hidden) {\n        if (hidden.floating) {\n            this.ariaElement.removeAttribute('aria-owns');\n        }\n    }\n\n    onChildShow(shown) {\n        if (shown.floating) {\n            this.ariaHasPopup = shown.role;\n            this.ariaElement.setAttribute('aria-owns', shown.id);\n        }\n    }\n\n    triggerPaint() {\n        const\n            me                             = this,\n            { element, toCallWhenVisible } = me,\n            firstPaint                     = !me.isPainted;\n\n        if (me.isVisible) {\n            if (firstPaint) {\n                me.getConfig('scrollable');\n\n                // Not for public use, only used in docs\n                if (me.scaleToFitWidth && !me.monitorResize) {\n                    me.onParentElementResize = me.onParentElementResize.bind(me);\n                    ResizeMonitor.addResizeListener(element.parentElement, me.onParentElementResize);\n                    me.updateScale();\n                }\n\n                // Add a comment to state this is made by Bryntum\n                if (!me.hideBryntumDomMessage && (me.isTaskBoardBase || me.isGridBase || me.isCalendar)) {\n                    element.insertBefore(new Comment('POWERED BY BRYNTUM (https://bryntum.com)'), element.firstChild);\n                }\n            }\n\n            // Trigger paint only on immediate children.\n            // Each one will call this recursively.\n            // paint is triggered in a bottom up manner.\n            me.eachWidget(widgetTriggerPaint, false);\n\n            if (firstPaint) {\n                me.rootElement = DomHelper.getRootElement(element);\n                // Make sure the shared tooltip is initialized\n                me.getConfig('tooltip');\n\n                // Late setup of Ripple\n                if (!Widget.Ripple && Widget.RippleClass) {\n                    Widget.Ripple = new Widget.RippleClass({\n                        rootElement : me.rootElement\n                    });\n                }\n            }\n\n            /**\n             * Triggered when a widget which had been in a non-visible state for any reason\n             * achieves visibility.\n             *\n             * A non-visible state *might* mean the widget is hidden and has just been shown.\n             *\n             * But this event will also fire on widgets when a non-visible (unrendered, or hidden)\n             * ancestor achieves visibility, for example a {@link Core.widget.Popup Popup} being shown.\n             *\n             * TLDR: __This event can fire multiple times__\n             * @event paint\n             * @param {Core.widget.Widget} source The widget being painted.\n             * @param {Boolean} firstPaint `true` if this is the first paint.\n             */\n            me.isPainted = true;\n\n            // Initialize any paint configs now. This comes after setting isPainted in case update logic finds itself\n            // off in code that checks. This timing being equivalent to the paint event should result in no widget\n            // state issues for moving logic out of a onetime paint listener into a paint config.\n            firstPaint && me.triggerConfigs('paint');\n\n            me.trigger('paint', { firstPaint });\n\n            if (toCallWhenVisible?.size) {\n                for (const { callback, thisObj, args } of toCallWhenVisible.values()) {\n                    me.callback(callback, thisObj, args);\n                }\n                toCallWhenVisible.clear();\n            }\n\n            if (firstPaint) {\n                // On first paint, we should announce our size immediately.\n                // When the real event comes along, onElementResize will reject it because the size will be the same.\n                if (me.monitorResize && !me.scaleToFitWidth) {\n                    ResizeMonitor.onElementResize([{ target : element }]);\n                }\n            }\n        }\n    }\n\n    cancelHideShowAnimation() {\n        const\n            me                            = this,\n            { currentAnimation, element } = me;\n\n        if (currentAnimation) {\n            me.isAnimating = false;\n\n            // If it is an animated hide that we are aborting, reverse the set of the hidden flag\n            // If hide is animated, we only get genuinely hidden at animation end.\n            if (element.classList.contains('b-hiding')) {\n                element.classList.remove('b-hiding');\n                me._hidden = false;\n            }\n\n            currentAnimation.detacher();\n            currentAnimation.resolve();\n\n            element.style.transition = element.style[currentAnimation.styleProp] = '';\n            me.currentAnimation = null;\n\n            me.trigger(`${currentAnimation.showing ? 'show' : 'hide'}AnimationEnd`);\n        }\n    }\n\n    afterHideShowAnimate(currentAnimation) {\n        // We receive the currentAnimation as understood by the party starting the animation... if that is not the\n        // current value of \"this.currentAnimation\" we can ignore this call.\n        const me = this;\n\n        // If menu is destroyed too soon in Edge, this method will be invoked for destroyed element. Since all of our\n        // properties are cleared on destroy, this check will prevent undesired reactions:\n        if (currentAnimation === me.currentAnimation) {\n            // Ensure cancelHideShowAnimation doesn't think we're aborting before the end.\n            me.element.classList.remove('b-hiding');\n            me.cancelHideShowAnimation();\n\n            // Element must be fully hidden after the animation effect finishes\n            if (me._hidden) {\n                me.afterHideAnimation();\n            }\n        }\n    }\n\n    /**\n     * Temporarily changes the {@link #property-isVisible} to yield `false` regardless of this\n     * Widget's true visibility state. This can be useful for suspending operations which rely on\n     * the {@link #property-isVisible} property.\n     *\n     * This increments a counter which {@link #function-resumeVisibility} decrements.\n     * @internal\n     */\n    suspendVisibility() {\n        this._visibilitySuspended = (this._visibilitySuspended || 0) + 1;\n        Object.defineProperty(this, 'isVisible', returnFalseProp);\n    }\n\n    /**\n     * Resumes visibility. If the suspension counter is returned to zero by this, then the\n     * {@link #event-paint} event is triggered, causing a cascade of `paint` events on all\n     * descendants. This can be prevented by passing `false` as the only parameter.\n     * @param {Boolean} [triggerPaint=true] Trigger the {@link #event-paint} event.\n     * @internal\n     */\n    resumeVisibility(triggerPaint = true) {\n        if (!--this._visibilitySuspended) {\n            delete this.isVisible;\n            if (triggerPaint) {\n                this.triggerPaint();\n            }\n        }\n    }\n\n    /**\n     * Hide widget\n     * @param {Boolean} animate Pass `true` (default) to animate the hide action\n     * @category Visibility\n     * @returns {Promise} A promise which is resolved when the widget has been hidden\n     */\n    hide(animate = true) {\n        return new Promise(resolve => {\n            const\n                me            = this,\n                {\n                    element,\n                    lastAlignSpec\n                }             = me,\n                { style }     = element,\n                hideAnimation = animate && me.hideAnimation;\n\n            // If we get hidden very quickly after a call to show,\n            // we must kill the timers which add the realign listeners.\n            me.clearTimeout(me.scrollListenerTimeout);\n            me.clearTimeout(me.resizeListenerTimeout);\n\n            /**\n             * Triggered before a widget is hidden. Return `false` to prevent the action.\n             * @preventable\n             * @event beforeHide\n             * @param {Core.widget.Widget} source The widget being hidden.\n             */\n            // replaced check for isVisible with _hidden, need to hide a component not yet in view in EventEditor\n            if (!me._hidden && me.trigger('beforeHide', { animate }) !== false) {\n                me._hidden = true;\n\n                // The flag must be cleared on a normal hide.\n                // It's set if we hide due to the target being scrolled out of view.\n                if (lastAlignSpec) {\n                    lastAlignSpec.targetOutOfView = null;\n                    if (lastAlignSpec.monitorIntersection) {\n                        me.intersectionObserver.takeRecords();\n                        me.intersectionObserver.unobserve(lastAlignSpec.target);\n                    }\n                }\n\n                // The changer vetoes the config change and routes here, so we must call this.\n                me.onConfigChange({\n                    name   : 'hidden',\n                    value  : true,\n                    was    : false,\n                    config : me.$meta.configs.hidden\n                });\n\n                if (!element) {\n                    resolve();\n                    return;\n                }\n\n                if (element.contains(DomHelper.getActiveElement(element))) {\n                    me.revertFocus(true);\n                }\n\n                // Focus exit causes close if autoClose: true, and if closeAction: 'hide'\n                // that might destroy us, so exit now if that happens.\n                if (me.isDestroyed) {\n                    resolve();\n                    return;\n                }\n\n                // Cancel any current hide/show animation\n                me.cancelHideShowAnimation();\n\n                if (hideAnimation) {\n                    const\n                        styleProp = Object.keys(hideAnimation)[0],\n                        animProps = hideAnimation[styleProp];\n\n                    // Make sure we are not already at the final value of the hide animation (i.e. calling hide() directly after show())\n                    if (Number(getComputedStyle(me.element)[styleProp]) !== animProps.to) {\n                        const currentAnimation = me.currentAnimation = {\n                            hiding : true,\n                            styleProp,\n                            resolve\n                        };\n\n                        // Element must behave as though it were not there during\n                        // the animated hide. This means pointer-events:none\n                        element.classList.add('b-hiding');\n                        me.isAnimating = true;\n\n                        // afterHideShowAnimate will always be called even if the transition aborts\n                        me.currentAnimation.detacher = EventHelper.onTransitionEnd({\n                            element,\n                            property : styleProp,\n                            duration : parseDuration(animProps.duration) + 20,\n                            handler  : () => me.afterHideShowAnimate(currentAnimation),\n                            thisObj  : me\n                        });\n\n                        // Setting transition style initial value before showing,\n                        // then reading the style to ensure transition will animate\n                        style[styleProp] = animProps.from;\n                        DomHelper.getStyleValue(element, styleProp);\n\n                        style.transition = `${styleProp} ${animProps.duration} ease ${animProps.delay}`;\n                        style[styleProp] = animProps.to;\n                    }\n                    else {\n                        element.classList.add('b-hidden');\n                    }\n                }\n                else {\n                    element.classList.add('b-hidden');\n                }\n\n                // only supply resolve function if not using animation\n                me.afterHide(!hideAnimation && resolve, hideAnimation);\n            }\n        });\n    }\n\n    doHideOrRealign({ target, isTrusted }) {\n        const\n            me         = this,\n            {\n                lastAlignSpec,\n                element\n            }          = me,\n            anchoredTo = lastAlignSpec?.anchoredTo,\n            lastTarget = lastAlignSpec?.target,\n            position   = lastAlignSpec?.position,\n            activeEl   = DomHelper.getActiveElement(me);\n\n        if (\n            // If it's a synthesized scroll event (such as from our ResizeMonitor polyfill), ignore it.\n            !isTrusted ||\n            // Realign happens on frame, might have been removed from DOM so check whether it has layout\n            !hasLayout(element) ||\n            // event.target might be missing with LockerService enabled. we still need to call the logic as it does not\n            // depend much on the scroll target\n            target && (\n                // If the scroll is inside our element, ignore it.\n                element.contains(target) ||\n                // If we're scrolling because a focused textual input field which we contain is being shifted into view,\n                // we must not reposition - we'll just move with the document content.\n                (\n                    target.nodeType === Element.DOCUMENT_NODE &&\n                    element.contains(activeEl) && textInputTypes[activeEl] &&\n                    globalThis.innerHeight < document.body.offsetHeight\n                )\n            )\n        ) {\n            return;\n        }\n\n        // If we were aligned to an element and the new visible rectangle is the same as the old one\n        // then ignore the scroll. It had no effect on our aligment status.\n        if (lastAlignSpec.aligningToElement) {\n            const newTarget = DomHelper.isInView(lastTarget, false, me);\n\n            // newTarget?.equals doesn't work if value is `false`\n            if (newTarget && newTarget.equals(lastAlignSpec.targetRect)) {\n                return;\n            }\n        }\n\n        // Store current position if we are to hide on scroll below,\n        // used to determine if realigning did actually move us and thus should hide\n        const xy = me.scrollAction === 'hide' && me.getXY();\n\n        // Perform the realignment\n        me.realign();\n\n        // Might destroy on hide in realign, so check for isDestroyed.\n        if (!me.isDestroyed && isVisible(element) && me.scrollAction === 'hide') {\n            const\n                [newX, newY] = me.getXY(),\n                moved        = newX !== xy[0] || newY !== xy[1];\n\n            // If the scroll caused our position to become invalid, and we either don't know what element\n            // we're anchored to (or not anchored to one at all), or the element we're anchored to has been\n            // removed, or affected by the scroll, we must hide.\n            // target might be missing with LockerService enabled\n            if ((moved || lastTarget?.$$name === 'Point' || position) && (!anchoredTo || !hasLayout(anchoredTo) || target && DomHelper.isDescendant(target, anchoredTo))) {\n                me.hide();\n            }\n        }\n    }\n\n    afterHide(resolveFn = null, hideAnimation = this.hideAnimation) {\n        const me = this;\n\n        // If a drag caused us to lose our anchor, restore it upon hide.\n        me._anchor = me._configuredAnchorState;\n\n        // Remove listeners which are only added during the visible phase.\n        // In its own method because it's called on hide and destroy.\n        me.removeTransientListeners();\n\n        // Postprocessing to be done after the hideAnimation finishes.\n        // If there's no animation, we call it immediately.\n        // We set the element to be hidden here, after any animation completes.\n        // We also remove floating Widgets from the DOM when they are hidden.\n        if (!hideAnimation) {\n            me.afterHideAnimation();\n        }\n\n        /**\n         * Triggered after a widget was hidden\n         * @event hide\n         * @param {Core.widget.Widget} source The widget\n         */\n        me.trigger('hide');\n\n        // Keep any owning container informed about visibility state.\n        // It may not be a Container. SubGrid class is still a Widget\n        // which contains grid headers.\n        me.owner?.onChildHide?.(me);\n\n        resolveFn && resolveFn();  // cannot do resolveFn?.() since resolveFn can be false\n    }\n\n    removeTransientListeners() {\n        const\n            me = this,\n            {\n                targetObserver,\n                lastAlignSpec\n            }  = me;\n\n        me.clearTimeout(me.resizeListenerTimeout);\n        me.clearTimeout(me.scrollListenerTimeout);\n\n        // Stop observing whether our alignTo target is there.\n        if (targetObserver) {\n            targetObserver.disconnect();\n            delete me.targetObserver;\n        }\n        me.documentScrollListener = me.documentScrollListener?.();\n        me.targetRootScrollListener = me.targetRootScrollListener?.();\n\n        if (me.targetResizeListener) {\n            ResizeMonitor.removeResizeListener(lastAlignSpec.target, me.onTargetResize);\n            me.targetResizeListener = false;\n        }\n\n        if (me.constrainListeners) {\n            const el = lastAlignSpec.constrainTo?.isRectangle ? globalThis : lastAlignSpec.constrainTo;\n            ResizeMonitor.removeResizeListener(el || globalThis, me.onAlignConstraintChange);\n            me.constrainListeners = false;\n        }\n    }\n\n    afterHideAnimation() {\n        const\n            me          = this,\n            { element } = me;\n\n        if (me.floating && me.floatRoot.contains(element)) {\n            element.remove();\n        }\n        else {\n            element.classList.add('b-hidden');\n        }\n\n        // Reset anchor to its default colour after hide\n        if (me.defaultAnchorBackgroundColor) {\n            // Reset to default in case it has been positioned by a coloured header\n            me.anchorPathElement.setAttribute('fill', me.defaultAnchorBackgroundColor);\n        }\n    }\n\n    changeHidden(value) {\n        const me = this;\n\n        let ret;\n\n        if (me.isConfiguring) {\n            ret = Boolean(value);\n            me.element.classList[value ? 'add' : 'remove']('b-hidden');\n        }\n        else {\n            // These methods are async but set _hidden when they get past the before event, so don't set ret and\n            // the setter won't set _hidden automatically.\n\n            me.trigger('beforeChangeHidden', { hidden : value });\n\n            if (value) {\n                me.hide();\n            }\n            else {\n                me.show();\n            }\n        }\n\n        return ret;\n    }\n\n    /**\n     * Get id assigned by user (not generated id)\n     * @returns {String}\n     * @readonly\n     * @private\n     * @category Misc\n     */\n    get assignedId() {\n        return this.hasGeneratedId ? null : this.id;\n    }\n\n    /**\n     * Get the owning Widget of this Widget. If this Widget is directly contained, then the containing\n     * Widget is returned. If this Widget is floating, the configured `owner` property is returned.\n     * If there is a `forElement`, that element's encapsulating Widget is returned.\n     * @property {Core.widget.Widget}\n     * @readonly\n     * @category Widget hierarchy\n     */\n    get owner() {\n        return this.parent || this._owner || this.containingWidget;\n    }\n\n    get containingWidget() {\n        let result = this.parent;\n\n        if (!result) {\n            const owningEl = this.forElement?.nodeType === Element.ELEMENT_NODE ? this.forElement : this.element?.parentNode;\n\n            result = (owningEl?.closest('.b-widget') && Widget.fromElement(owningEl));\n        }\n        return result;\n    }\n\n    /**\n     * Get this Widget's previous sibling in the parent {@link Core.widget.Container Container}, or, if not\n     * in a Container, the previous sibling widget in the same _parentElement_.\n     * @property {Core.widget.Widget}\n     * @readonly\n     * @category Widget hierarchy\n     */\n    get previousSibling() {\n        return this.getSibling(-1);\n    }\n\n    /**\n     * Get this Widget's next sibling in the parent {@link Core.widget.Container Container}, or, if not\n     * in a Container, the next sibling widget in the same _parentElement_.\n     * @property {Core.widget.Widget}\n     * @readonly\n     * @category Widget hierarchy\n     */\n    get nextSibling() {\n        return this.getSibling(1);\n    }\n\n    getSibling(increment) {\n        const\n            me         = this,\n            { parent } = me,\n            siblings   = parent ? parent.childItems : Array.from(me.element.parentElement.querySelectorAll('.b-widget'));\n\n        return parent ? siblings[siblings.indexOf(me) + increment] : Widget.fromElement(siblings[siblings.indexOf(me.element) + increment]);\n    }\n\n    /**\n     * Looks up the {@link #property-owner} axis to find an ancestor which matches the passed selector.\n     * The selector may be a widget type identifier, such as `'grid'`, or a function which will return\n     * `true` when passed the desired ancestor.\n     * @param {String|Function} [selector] A Type identifier or selection function. If not provided, this method returns\n     * the {@link #property-owner} of this widget\n     * @param {Boolean} [deep] When using a string identifier, pass `true` if all superclasses should be included, i.e.,\n     * if a `Grid` should match `'widget'`.\n     * @param {Number|String|Core.widget.Widget} [limit] how many steps to step up before aborting the search, or a\n     * selector to stop at or the topmost ancestor to consider.\n     * @category Widget hierarchy\n     */\n    up(selector, deep, limit) {\n        const { owner } = this;\n\n        return selector ? owner?.closest?.(selector, deep, limit) : owner;\n    }\n\n    /**\n     * Starts with this Widget, then Looks up the {@link #property-owner} axis to find an ancestor which matches the\n     * passed selector. The selector may be a widget type identifier, such as `'grid'`, or a function which will return\n     * `true` when passed the desired ancestor.\n     * @param {String|Function} selector A Type identifier or selection function.\n     * @param {Boolean} [deep] When using a string identifier, pass `true` if all superclasses should be included, i.e.,\n     * if a `Grid` should match `'widget'`.\n     * @param {Number|String|Core.widget.Widget} [limit] how many steps to step up before aborting the search, or a\n     * selector to stop at or the topmost ancestor to consider.\n     * @category Widget hierarchy\n     */\n    closest(selector, deep, limit) {\n        const\n            limitType     = typeof limit,\n            numericLimit  = limitType === 'number',\n            selectorLimit = limitType === 'string';\n\n        for (let result = this, steps = 1; result; result = result.owner, steps++) {\n            if (Widget.widgetMatches(result, selector, deep)) {\n                return result;\n            }\n            if (numericLimit && steps >= limit) {\n                return;\n            }\n            else if (selectorLimit && (Widget.widgetMatches(result, limit, deep))) {\n                return;\n            }\n            else if (result === limit) {\n                return;\n            }\n        }\n    }\n\n    /**\n     * Returns `true` if this Widget owns the passed Element, Event or Widget. This is based on the widget hierarchy,\n     * not DOM containment. So an element in a `Combo`'s dropdown list will be owned by the `Combo`.\n     * @param {HTMLElement|Event|Core.widget.Widget} target The element event or Widget to test for being\n     * within the ownership tree of this Widget.\n     * @category Widget hierarchy\n     */\n    owns(target) {\n        if (target) {\n            // Passed an event, grab its target\n            if ('eventPhase' in target) {\n                target = target.target;\n            }\n\n            // We were passed an HTMLElement\n            if (target.nodeType === Element.ELEMENT_NODE) {\n                if (this.element.contains(target)) {\n                    return true;\n                }\n                target = Widget.fromElement(target);\n            }\n\n            //<debug>\n            if (target && !(target.isWidget)) {\n                throw new Error('owns() must be passed an HTMLElement or a Widget');\n            }\n            //</debug>\n\n            while (target) {\n                if (target === this) {\n                    return true;\n                }\n                target = target.owner;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Iterate over all ancestors of this widget.\n     *\n     * *Note*: Due to this method aborting when the function returns `false`, beware of using short form arrow\n     * functions. If the expression executed evaluates to `false`, iteration will terminate.\n     * @param {Function} fn Function to execute for all ancestors. Terminate iteration by returning `false`.\n     * @returns {Boolean} Returns `true` if iteration was not aborted by a step returning `false`\n     * @category Widget hierarchy\n     */\n    eachAncestor(fn) {\n        let ancestor = this.owner;\n\n        while (ancestor) {\n            if (fn(ancestor) === false) {\n                return false;\n            }\n            ancestor = ancestor.owner;\n        }\n\n        return true;\n    }\n\n    changeMonitorResize(monitorResize, oldMonitorResize) {\n        // They are mutually exclusive. scaleToFitWidth disables monitorResize\n        const result = this.scaleToFitWidth ? false : Boolean(monitorResize);\n\n        // null and undefined both mean false. Avoid going through the updater if no change.\n        if (result !== Boolean(oldMonitorResize)) {\n            return result;\n        }\n    }\n\n    updateMonitorResize(monitorResize) {\n        const me = this;\n\n        if (!hasOwnProperty.call(me, 'onElementResize')) {\n            me.onElementResize = me.onElementResize.bind(me);\n        }\n\n        ResizeMonitor[monitorResize ? 'addResizeListener' : 'removeResizeListener'](me.element, me.onElementResize);\n    }\n\n    changeReadOnly(readOnly) {\n        readOnly = Boolean(readOnly);\n\n        // It starts as undefined, so if false is passed, that's a no-change.\n        if (Boolean(this._readOnly) !== readOnly) {\n            return readOnly;\n        }\n    }\n\n    updateReadOnly(readOnly) {\n        // Can be called from the element initialization because of the way Panel is set up.\n        // tbar and bbar are instantiated, and their elements added to the gathered element\n        // config object, but that can have consequences which can lead here.\n        this.element?.classList[readOnly ? 'add' : 'remove']('b-readonly');\n\n        // Do not update children at configure time.\n        // Container will sync its items.\n        if (!this.isConfiguring) {\n            // Implemented at this level because Widgets can own a descendant tree without being\n            // a Container. For example Combos own a ChipView and a List. Buttons own a Menu etc.\n            this.eachWidget(widget => {\n                // Some fields may not want to automatically be readOnly (such as a nested filter field not affecting data)\n                if (widget.ignoreParentReadOnly) {\n                    return;\n                }\n                if (!('_originalReadOnly' in widget)) {\n                    // Store initial readOnly/disabled value.\n                    // the config getter copies the properties in a loop\n                    // so execute once and cache the value.\n                    widget._originalReadOnly = widget.config.readOnly || false;\n                }\n\n                // Set if truthy, otherwise reset to initial value\n                widget.readOnly = readOnly || widget._originalReadOnly;\n            }, false);\n\n            /**\n             * Fired when a Widget's read only state is toggled\n             * @event readOnly\n             * @param {Boolean} readOnly Read only or not\n             */\n            this.trigger('readOnly', { readOnly });\n        }\n    }\n\n    /**\n     * Iterate over all widgets owned by this widget and any descendants.\n     *\n     * *Note*: Due to this method aborting when the function returns `false`, beware of using short form arrow\n     * functions. If the expression executed evaluates to `false`, iteration will terminate.\n     * @param {Function} fn A function to execute upon each descendant widget.\n     * Iteration terminates if this function returns `false`.\n     * @param {Core.widget.Widget} fn.widget The current descendant widget.\n     * @param {Object} fn.control An object containing recursion control options.\n     * @param {Boolean} fn.control.down A copy of the `deep` parameter. This can be adjusted by `fn` to decide which\n     * widgets should be recursed. This value will always be the value of `deep` on entry and the value of `control.down`\n     * upon return determines the recursion into the current widget.\n     * @param {Boolean} [deep=true] Pass as `false` to only consider immediate child widgets.\n     * @returns {Boolean} Returns `true` if iteration was not aborted by a step returning `false`\n     * @category Widget hierarchy\n     */\n    eachWidget(fn, deep = true) {\n        const\n            widgets = this.childItems,\n            length  = widgets?.length || 0,\n            control = {};\n\n        for (let i = 0; i < length; i++) {\n            const widget = widgets[i];\n\n            control.down = deep;\n\n            // Abort if a call returns false\n            if (fn(widget, control) === false) {\n                return false;\n            }\n\n            if (control.down && widget.eachWidget) {\n                // Abort if a deep call returns false\n                if (widget.eachWidget(fn, deep) === false) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Returns an array of all descendant widgets which the passed\n     * filter function returns `true` for.\n     * @param {Function} filter A function which, when passed a widget,\n     * returns `true` to include the widget in the results.\n     * @returns {Core.widget.Widget[]} All matching descendant widgets.\n     * @category Widget hierarchy\n     */\n    queryAll(filter) {\n        const result = [];\n\n        this.eachWidget(w => {\n            if (filter(w)) {\n                result.push(w);\n            }\n        });\n\n        return result;\n    }\n\n    /**\n     * Returns the first descendant widgets which the passed\n     * filter function returns `true` for.\n     * @param {Function} filter A function which, when passed a widget,\n     * returns `true` to return the widget as the sole result.\n     * @returns {Core.widget.Widget} The first matching descendant widget.\n     * @category Widget hierarchy\n     */\n    query(filter) {\n        let result = null;\n\n        this.eachWidget(w => {\n            if (filter(w)) {\n                result = w;\n                return false;\n            }\n        });\n\n        return result;\n    }\n\n    /**\n     * Get a widget by ref, starts on self and traverses up the owner hierarchy checking `widgetMap` at each level.\n     * Not checking the top level widgetMap right away to have some acceptance for duplicate refs.\n     * @param {String} ref ref to find\n     * @returns {Core.widget.Widget}\n     * @internal\n     * @category Widget hierarchy\n     */\n    getWidgetByRef(ref) {\n        if (ref instanceof Widget) {\n            return ref;\n        }\n\n        return this?.widgetMap?.[ref] || this?.owner?.getWidgetByRef(ref);\n    }\n\n    onFocusIn(e) {\n        const\n            me          = this,\n            { element } = me;\n\n        me.containsFocus = true;\n        me.focusInEvent = e;\n\n        element.classList.add('b-contains-focus');\n        me.updateAriaLabel(me.localizeProperty('ariaLabel'));\n        me.updateAriaDescription(me.localizeProperty('ariaDescription'));\n\n        if (element.contains(e._target) && me.onInternalKeyDown && !me.keyDownListenerRemover) {\n            me.keyDownListenerRemover = EventHelper.on({\n                element,\n                keydown : 'onInternalKeyDown',\n                thisObj : me\n            });\n        }\n\n        /**\n         * Fired when focus enters this Widget.\n         * @event focusIn\n         * @param {Core.widget.Widget} source - This Widget\n         * @param {HTMLElement} fromElement The element which lost focus.\n         * @param {HTMLElement} toElement The element which gained focus.\n         * @param {Core.widget.Widget} fromWidget The widget which lost focus.\n         * @param {Core.widget.Widget} toWidget The widget which gained focus.\n         * @param {Boolean} backwards `true` if the `toElement` is before the `fromElement` in document order.\n         */\n        me.trigger('focusin', e);\n    }\n\n    onFocusOut(e) {\n        const me = this;\n\n        if (me.keyDownListenerRemover) {\n            me.keyDownListenerRemover();\n            me.keyDownListenerRemover = null;\n        }\n\n        if (!me.isDestroyed) {\n            // Focus to nowhere, focus a close relation\n            if (!e.relatedTarget) {\n                me.revertFocus(!me.isVisible);\n            }\n\n            me.containsFocus = false;\n            me.element.classList.remove('b-contains-focus');\n            me.updateAriaLabel(me.localizeProperty('ariaLabel'));\n            me.updateAriaDescription(me.localizeProperty('ariaDescription'));\n\n            /**\n             * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.\n             * focus moving from within this Widget's ownership tree, even if there are floating widgets\n             * will not trigger this event. This is when focus exits this widget completely.\n             * @event focusOut\n             * @param {Core.widget.Widget} source - This Widget\n             * @param {HTMLElement} fromElement The element which lost focus.\n             * @param {HTMLElement} toElement The element which gained focus.\n             * @param {Core.widget.Widget} fromWidget The widget which lost focus.\n             * @param {Core.widget.Widget} toWidget The widget which gained focus.\n             * @param {Boolean} backwards `true` if the `toElement` is before the `fromElement` in document order.\n             */\n            me.trigger('focusout', e);\n        }\n    }\n\n    /**\n     * Returns a function that will set the focus (`document.activeElement`) to the most consistent element possible\n     * based on the focus state at the time this method was called. Derived classes can implement `captureFocusItem()`\n     * to refine this process to include logical items (e.g., a grid cell) that would be more stable than DOM element\n     * references.\n     *\n     * If this widget does not contain the focus, the returned function will do nothing.\n     * @returns {Function}\n     * @internal\n     */\n    captureFocus() {\n        const\n            me               = this,\n            activeElementWas = DomHelper.getActiveElement(me),\n            restore          = me.contains(activeElementWas) && me.captureFocusItem(activeElementWas);\n\n        return (scrollIntoView, force) => {\n            if (restore && !me.isDestroying) {\n                const activeElementNow = DomHelper.getActiveElement(me);\n\n                if ((activeElementNow !== activeElementWas) || force) {\n                    restore(scrollIntoView);\n                }\n            }\n        };\n    }\n\n    /**\n     * This method is called by `captureFocus()` when this widget contains the focus and it returns a function that\n     * restores the focus to the correct internal element. The returned function is only called if the current\n     * `document.activeElement` is different from the passed `activeElement`.\n     *\n     * This method can be replaced by derived classes to capture stable identifiers for the currently focused, logical\n     * item (for example, a cell of a grid).\n     *\n     * @param {HTMLElement} activeElement The current `document.activeElement`.\n     * @returns {Function} Returns a function that accepts a boolean argument. Defaults to `true`, `false` attempts to\n     * focus without scrolling.\n     * @internal\n     */\n    captureFocusItem(activeElement) {\n        return (scrollIntoView = true) => {\n            if (this.contains(activeElement)) {\n                scrollIntoView ? activeElement.focus() : DomHelper.focusWithoutScrolling(activeElement);\n            }\n        };\n    }\n\n    /**\n     * Returns `true` if this widget is or contains the specified element or widget.\n     * @param {HTMLElement|Core.widget.Widget} elementOrWidget The element or widget\n     * @param {Boolean} [strict] Pass `true` to test for strict containment (if `elementOrWidget` is this widget, the\n     * return value will be `false`).\n     * @returns {Boolean}\n     */\n    contains(elementOrWidget, strict) {\n        const { element } = this;\n\n        if (elementOrWidget && element) {\n            if (elementOrWidget.isWidget) {\n                elementOrWidget = elementOrWidget.element;\n            }\n\n            // el.contains(el) === true\n            return element.contains(elementOrWidget) && (!strict || element !== elementOrWidget);\n        }\n    }\n\n    /**\n     * If this Widget contains focus, focus is reverted to the source from which it entered if possible,\n     * or to a close relative if not.\n     * @param {Boolean} [force] Pass as `true` to move focus to the previously focused item, or the\n     * closest possible relative even if this widget does not contain focus.\n     */\n    revertFocus(force) {\n        const\n            me            = this,\n            activeElement = DomHelper.getActiveElement(me);\n\n        let target = me.focusInEvent?.relatedTarget;\n\n        if (force || (me.containsFocus && target?.nodeType === Element.ELEMENT_NODE && me.element.contains(activeElement))) {\n            if (!target || !DomHelper.isFocusable(target)) {\n                target = me.getFocusRevertTarget();\n            }\n\n            me._isRevertingFocus = true;\n\n            if (target && DomHelper.isFocusable(target)) {\n                target._isRevertingFocus = true;\n                DomHelper.focusWithoutScrolling(target);\n                target._isRevertingFocus = false;\n            }\n            else {\n                // If we could not find a suitable target to receive focus, we still need to not be focused. Oddly,\n                // one cannot do \"document.body.focus()\" but explicitly calling blur() has that effect. If we do not\n                // do this, and we retain the focus, we can have issue w/closeAction=destroy which can cause the blur\n                // in afterHideAnimation which then causes that element.remove() to throw DOM exceptions.\n                activeElement?.blur();\n            }\n\n            me._isRevertingFocus = false;\n        }\n    }\n\n    /**\n     * This method finds a close sibling (or parent, or parent's sibling etc recursively) to which focus\n     * can be directed in the case of revertFocus not having a focusable element from our focusInEvent.\n     *\n     * This can happen when the \"from\" component is destroyed or hidden. We should endeavour to prevent\n     * focus escaping to `document.body` for accessibility and ease of use, and keep focus close.\n     * @internal\n     */\n    getFocusRevertTarget() {\n        const\n            me              = this,\n            {\n                owner,\n                focusInEvent\n            }               = me,\n            searchDirection = focusInEvent ? (focusInEvent.backwards ? 1 : -1) : -1;\n\n        let target = focusInEvent && focusInEvent.relatedTarget;\n        const toComponent = target && Widget.fromElement(target);\n\n        // If the from element is now not focusable, for example an Editor which hid\n        // itself on focus leave, then we have to find a sibling/parent/parent's sibling\n        // to take focus. Anything is better than flipping to document.body.\n        if (owner && !owner.isDestroyed && (!target || !DomHelper.isFocusable(target) || (toComponent && !toComponent.isFocusable))) {\n            target = null;\n\n            // If this widget can have siblings, then find the closest\n            // (in the direction focus arrived from) focusable sibling.\n            if (owner.eachWidget) {\n                const siblings = [];\n\n                // Collect focusable siblings.\n                // With this included so we can find ourselves.\n                owner.eachWidget(w => {\n                    if (w === me || w.isFocusable) {\n                        siblings.push(w);\n                    }\n                }, false);\n\n                if (siblings.length > 1) {\n                    const myIndex = siblings.indexOf(me);\n\n                    target = siblings[myIndex + searchDirection] ||\n                        siblings[myIndex - searchDirection];\n                }\n            }\n\n            // No focusable siblings found to take focus, try the owner\n            if (!target && owner.isFocusable) {\n                target = owner;\n            }\n\n            // If non of the above found any related focusable widget,\n            // Go through these steps for the owner.\n            target = target ? target.focusElement : owner.getFocusRevertTarget?.();\n        }\n\n        return target;\n    }\n\n    /**\n     * Returns a `DomClassList` computed from the `topMostBase` (e.g., `Widget` or `Panel`) with the given `suffix`\n     * appended to each `widgetClass`.\n     * @param {Function} topMostBase The top-most base class constructor at which to start gathering classes.\n     * @param {String} [suffix] An optional suffix to apply to all widget classes.\n     * @returns {Core.helper.util.DomClassList}\n     * @internal\n     * @category DOM\n     */\n    getStaticWidgetClasses(topMostBase, suffix) {\n        const\n            classList = new DomClassList(),\n            hierarchy = this.$meta.hierarchy;\n\n        let cls, i, name, widgetClass, widgetClassProperty;\n\n        for (i = hierarchy.indexOf(topMostBase); i < hierarchy.length; ++i) {\n            cls = hierarchy[i];\n            widgetClassProperty = Reflect.getOwnPropertyDescriptor(cls.prototype, 'widgetClass');\n\n            // If the Class has its own get widgetClass, call it upon this instance.\n            if (widgetClassProperty?.get) {\n                widgetClass = widgetClassProperty.get.call(this);\n            }\n            else {\n                // All built in widgets should define $name to be safer from minification/obfuscation, but user\n                // created might not so fall back to actual name. UMD files use a _$name property\n                // which the Base $$name getter uses as a fallback.\n                name = (\n                    hasOwnProperty.call(cls, '$$name') ||\n                    hasOwnProperty.call(cls, '$name') ||\n                    hasOwnProperty.call(cls, '_$name')\n                )\n                    ? cls.$$name\n                    : cls.name;\n\n                // Throw error in case of an obfuscated name or an autogenerated name.\n                // These should never be released without a meaningful $name getter.\n                if (name.length < 3 || name.includes('$')) {\n                    // class.$name comes from parent API class which has it\n                    console.warn(\n                        `Class \"${name}\" extending \"${cls.$name}\" should have \"$name\" static getter with no less than 3 chars.`);\n                }\n\n                widgetClass = `b-${name.toLowerCase()}`;\n            }\n\n            if (widgetClass) {\n                classList.add(suffix ? widgetClass + suffix : widgetClass);\n            }\n        }\n\n        return classList;\n    }\n\n    get rootUiClass() {\n        return Widget;\n    }\n\n    /**\n     * Returns the `DomClassList` for this widget's class. This object should not be mutated.\n     * @returns {Core.helper.util.DomClassList}\n     * @internal\n     * @category DOM\n     */\n    get staticClassList() {\n        const { $meta : meta } = this;\n\n        let classList = meta.staticClassList;\n\n        if (!classList) {\n            // Compute the class part of the widgetList just once per class (cache it on the $meta object):\n            meta.staticClassList = classList = this.getStaticWidgetClasses(Widget);\n\n            // TODO this should probably be only for outer-most widgets\n            BrowserHelper.isTouchDevice && classList.add('b-touch');\n        }\n\n        return classList;\n    }\n\n    /**\n     * Returns the cross-product of the classes `staticClassList` with each `ui` as an array of strings.\n     *\n     * For example, a Combo with a `ui: 'foo bar'` would produce:\n     *\n     *      [\n     *          'b-widget-foo', 'b-field-foo', 'b-textfield-foo', 'b-pickerfield-foo', 'b-combo-foo',\n     *          'b-widget-bar', 'b-field-bar', 'b-textfield-bar', 'b-pickerfield-bar', 'b-combo-bar'\n     *      ]\n     *\n     * @returns {String[]}\n     * @internal\n     * @category DOM\n     */\n    get uiClasses() {\n        // our result is maintained by updateUi so ensure the ui config has been evaluated:\n        this.getConfig('ui');\n\n        return this._uiClasses;\n    }\n\n    /**\n     * Returns the cross-product of the classes `staticClassList` with each `ui` as a `DomClassList` instance.\n     *\n     * For example, a Combo with a `ui: 'foo bar'` would produce:\n     *\n     * ```javascript\n     *      new DomClassList({\n     *          'b-field-ui-foo'       : 1,\n     *          'b-textfield-ui-foo'   : 1,\n     *          'b-pickerfield-ui-foo' : 1,\n     *          'b-combo-ui-foo'       : 1,\n     *\n     *          'b-field-ui-bar'       : 1,\n     *          'b-textfield-ui-bar'   : 1,\n     *          'b-pickerfield-ui-bar' : 1,\n     *          'b-combo-ui-bar'       : 1\n     *      });\n     * ```\n     *\n     * A Panel with a `ui: 'foo bar'` would produce:\n     *\n     * ```javascript\n     *      new DomClassList({\n     *          'b-panel-ui-foo' : 1,\n     *          'b-panel-ui-bar' : 1\n     *      });\n     * ```\n     * @returns {Core.helper.util.DomClassList}\n     * @internal\n     * @category DOM\n     */\n    get uiClassList() {\n        // our result is maintained by updateUi so ensure the ui config has been evaluated:\n        this.getConfig('ui');\n\n        return this._uiClassList;\n    }\n\n    /**\n     * Used by the Widget class internally to create CSS classes based on this Widget's\n     * inheritance chain to allow styling from each level to apply.\n     *\n     * For example Combo would yield `\"[\"b-widget\", \"b-field\", \"b-textfield\", \"b-pickerfield\", \"b-combo\"]\"`\n     *\n     * May be implemented in subclasses to add or remove classes from the super.widgetClassList\n     * @returns {String[]} The css class list named using the class name.\n     * @internal\n     * @category DOM\n     */\n    get widgetClassList() {\n        const\n            me                             = this,\n            { cls, defaultCls, uiClasses } = me;\n\n        let { staticClassList } = me;\n\n        if (defaultCls || cls) {\n            // clone the class-level classList before instance stuff goes on...\n            staticClassList = staticClassList.clone();\n\n            defaultCls && staticClassList.assign(defaultCls);  // note: these can be falsy keys\n            cls && staticClassList.assign(cls);\n        }\n\n        const classList = staticClassList.values;  // a new array of truthy keys...\n\n        uiClasses && classList.push(...uiClasses);\n        me.floating && classList.push('b-floating');\n\n        if (me.collapsify === 'hide') {\n            classList.push('b-collapsify-hide');\n        }\n\n        return classList;\n    }\n\n    changeCls(cls) {\n        return DomClassList.from(cls);\n    }\n\n    changeContentElementCls(cls) {\n        return DomClassList.from(cls);\n    }\n\n    changeHtmlCls(cls) {\n        return DomClassList.from(cls);\n    }\n\n    changeDefaultCls(cls) {\n        return DomClassList.from(cls, /* returnEmpty */true);\n    }\n\n    changeUi(ui) {\n        return DomClassList.from(ui);\n    }\n\n    updateUi(ui) {\n        let uiClassList = null,\n            cls, suffix;\n\n        if (ui) {\n            const staticClassList = this.getStaticWidgetClasses(this.rootUiClass);\n\n            for (suffix in ui) {\n                if (ui[suffix]) {\n                    for (cls in staticClassList) {\n                        if (staticClassList[cls]) {\n                            (uiClassList || (uiClassList = new DomClassList()))[`${cls}-ui-${suffix}`] = 1;\n                        }\n                    }\n                }\n            }\n        }\n\n        this._uiClasses = uiClassList?.values;  // an array of each value\n        this._uiClassList = uiClassList;\n    }\n\n    //endregion\n\n    //region Cache\n\n    /**\n     * Gets dom elements in the view. Caches the results for faster future calls.\n     * @param {String} query CSS selector\n     * @param {Boolean} children true to fetch multiple elements\n     * @param {HTMLElement} element Element to use as root for the query, defaults to the views outermost element\n     * @returns {HTMLElement|HTMLElement[]|null} A single element or an array of elements (if parameter children is set to true)\n     * @internal\n     * @category DOM\n     */\n    fromCache(query, children = false, element = this.element) {\n        if (!element) return null;\n\n        const me = this;\n\n        if (!me.cache[query]) {\n            me.cache[query] = children ? DomHelper.children(element, query) : DomHelper.down(element, query);\n        }\n        return me.cache[query];\n    }\n\n    /**\n     * Clear caches, forces all calls to fromCache to requery dom. Called on render/rerender.\n     * @internal\n     * @category DOM\n     */\n    emptyCache() {\n        this.cache = {};\n    }\n\n    //endregion\n\n    //region Mask\n\n    changeMasked(mask, maskInstance) {\n        if (this.masked?.type === 'trial') {\n            return;\n        }\n\n        if (mask === true || mask === '') {\n            mask = '\\xA0';  // empty string don't render well, so promote to &nbsp;\n        }\n\n        if (maskInstance && !maskInstance.isDestroyed) {\n            if (typeof mask === 'string') {\n                maskInstance.text = mask;\n                mask = maskInstance;\n            }\n            else if (mask) {\n                maskInstance.setConfig(mask);\n                mask = maskInstance;\n            }\n            else {\n                maskInstance.destroy();\n            }\n        }\n        else if (mask) {\n            const Mask = Widget.resolveType('mask');\n\n            mask = Mask.mergeConfigs(this.maskDefaults, mask);\n            mask.owner = this;\n            mask = Mask.mask(mask);\n        }\n\n        return mask || null;\n    }\n\n    onMaskAutoClose(mask) {\n        if (mask.isDestroyed && mask === this.masked) {\n            this.masked = null;\n        }\n    }\n\n    /**\n     * Mask the widget, showing the specified message\n     * @param {String|MaskConfig} msg Mask message (or a {@link Core.widget.Mask} config object\n     * @returns {Core.widget.Mask}\n     */\n    mask(msg) {\n        this.masked = msg;\n\n        return this.masked;\n    }\n\n    /**\n     * Unmask the widget\n     */\n    unmask() {\n        this.masked = null;\n    }\n\n    //endregion\n\n    //region Monitor resize\n\n    onInternalResize(element, width, height, oldWidth, oldHeight) {\n        this._width = element.offsetWidth;\n        this._height = element.offsetHeight;\n    }\n\n    onElementResize(resizedElement, lastRect) {\n        const\n            me          = this,\n            { element } = me,\n            oldWidth    = me._width,\n            oldHeight   = me._height,\n            newWidth    = element.offsetWidth,\n            newHeight   = element.offsetHeight;\n\n        // Don't do this on initial paint.\n        // The show method now applies aligning as part of the show process.\n        if (me.floating && lastRect) {\n            me.onFloatingWidgetResize(...arguments);\n        }\n\n        if (!me.suspendResizeMonitor && (oldWidth !== newWidth || oldHeight !== newHeight)) {\n            me.onInternalResize(element, newWidth, newHeight, oldWidth, oldHeight);\n            /**\n             * Fired when the encapsulating element of a Widget resizes *only when {@link #config-monitorResize} is `true`*.\n             * @event resize\n             * @param {Core.widget.Widget} source - This Widget\n             * @param {Number} width The new width\n             * @param {Number} height The new height\n             * @param {Number} oldWidth The old width\n             * @param {Number} oldHeight The old height\n             */\n            me.trigger('resize', { width : newWidth, height : newHeight, oldWidth, oldHeight });\n        }\n    }\n\n    onFloatingWidgetResize(resizedElement, lastRect, myRect) {\n        const\n            me = this,\n            {\n                lastAlignSpec,\n                constrainTo\n            }  = me;\n        // If this Popup changes size while we are aligned and we are aligned to\n        // a target (not a position), then we might need to realign.\n        if (me.isVisible && lastAlignSpec && lastAlignSpec.target) {\n            const\n                heightChange    = !lastRect || myRect.height !== lastRect.height,\n                widthChange     = !lastRect || myRect.width !== lastRect.width,\n                failsConstraint = constrainTo && !Rectangle.from(constrainTo).contains(Rectangle.from(me.element, null, true));\n\n            // Only realign if:\n            // the height has changed and we are not aligned below, or\n            // the width has changed and we are not aligned to the right.\n            if ((heightChange && lastAlignSpec.zone !== 2) || (widthChange && lastAlignSpec.zone !== 1) || failsConstraint) {\n                // Must move to next AF because in Chrome, the resize monitor might fire\n                // before the element is painted and the anchor color matching\n                // scheme cannot work in that case.\n                me.requestAnimationFrame(() => me.realign());\n            }\n        }\n    }\n\n    updateScale() {\n        const me            = this,\n            element       = me.element,\n            parentElement = element.parentElement;\n\n        // this could be placed elsewhere but want to keep it contained to not spam other code,\n        // since this is a very specific use case in our docs\n        if (!me.configuredWidth) {\n            me.configuredWidth = me.width;\n        }\n\n        // TODO: handle autoHeight, but seems it assigns height to late with current setup\n\n        // We are scaling to fit inside the width, so ensure that we are not the cause of a scrollbar\n        // in our current, unscaled state by hiding while we measure the parent's offsetWidth which\n        // we are going to scale to.\n        element.style.display = 'none';\n\n        const\n            rect          = Rectangle.client(parentElement),\n            scale         = rect.width / me.configuredWidth,\n            adjustedScale = me.scale = me.allowGrowWidth ? Math.min(scale, 1) : scale;\n\n        element.style.transform = `scale(${adjustedScale})`;\n        element.style.transformOrigin = 'top left';\n        element.style.display = '';\n\n        if (me.allowGrowWidth && scale > 1) {\n            // increase width\n            me.width = me.configuredWidth * scale;\n        }\n    }\n\n    onParentElementResize(event) {\n        this.updateScale();\n    }\n\n    //endregion\n\n    /**\n     * Returns a `TRBL` array of values parse from the passed specification. This can be used to parse`\n     * a value list for `margin` or `padding` or `border-width` etc - any CSS value which takes a `TRBL` value.\n     * @param {Number|String|String[]} values The `TRBL` value\n     * @param {String} [units=px] The units to add to values which are specified as numeric.\n     * @internal\n     */\n    parseTRBL(values, units = 'px') {\n        values = values || 0;\n\n        if (typeof values === 'number') {\n            return [`${values}${units}`, `${values}${units}`, `${values}${units}`, `${values}${units}`];\n        }\n        //<debug>\n        else if (typeof values !== 'string') {\n            throw new Error('parseTRBL must be passed a single numeric value, or a \"T R B L\"/\"TB RL\"/\"TRBL\"/\"TRB\" string');\n        }\n        //</debug>\n\n        const\n            parts = values.split(' '),\n            len   = parts.length;\n\n        if (len === 1) {\n            parts[1] = parts[2] = parts[3] = parts[0];\n        }\n        else if (len === 2) {\n            parts[2] = parts[0];\n            parts[3] = parts[1];\n        }\n        else if (len === 3) {\n            parts[3] = parts[1];\n        }\n\n        return [\n            isFinite(parts[0]) ? `${parts[0]}${units}` : parts[0],\n            isFinite(parts[1]) ? `${parts[1]}${units}` : parts[2],\n            isFinite(parts[2]) ? `${parts[2]}${units}` : parts[3],\n            isFinite(parts[3]) ? `${parts[3]}${units}` : parts[4]\n        ];\n    }\n\n    // Returns root node for this widget, either a document or a shadowRoot\n    get documentRoot() {\n        return this.owner?.documentRoot || this.element.getRootNode();\n    }\n\n    // Returns top most DOM element of the visible DOM tree for this widget element, either document.body or a shadowRoot\n    get rootElement() {\n        const me = this;\n\n        if (!me._rootElement) {\n            // Find the root either from our forElement, or, if we are in the document from our element, or\n            // the element we are to be rendered to.\n            let root = me.owner?.rootElement || DomHelper.getRootElement(me.forElement || (isInDocument(me.element) ? me.element : me.getRenderContext()[0] || me.element));\n\n            if (!root) {\n                // <debug>\n                console.warn(`${me.constructor.name}: Floating Widgets must have \"rootElement\" to be assigned to a float root (to support web components)`);\n                // </debug>\n                root = document.body;\n            }\n\n            me._rootElement = root;\n        }\n\n        return me._rootElement;\n    }\n\n    get floatRoot() {\n        const\n            me          = this,\n            rootElement = me.rootElement || me.owner?.rootElement;\n\n        let { floatRoot } = rootElement;\n\n        if (!floatRoot) {\n            const\n                { outerCls } = Widget,\n                themeName    = DomHelper.getThemeInfo(null, rootElement)?.name;\n\n            if (!DomHelper.isValidFloatRootParent(rootElement)) {\n                throw new Error('Attaching float root to wrong root');\n            }\n\n            // When outside of our examples, the body element doesn't get the theme class.\n            // The floatRoot must carry it for floating items to be themed.\n            if (themeName) {\n                outerCls.push(`b-theme-${themeName.toLowerCase()}`);\n            }\n\n            floatRoot = rootElement.floatRoot = DomHelper.createElement({\n                className : `b-float-root ${outerCls.join(' ')}`,\n                parent    : rootElement\n            });\n\n            floatRoots.push(floatRoot);\n\n            // Make float root immune to keyboard-caused size changes\n            if (BrowserHelper.isAndroid) {\n                floatRoot.style.height = `${screen.height}px`;\n                EventHelper.on({\n                    element           : globalThis,\n                    orientationchange : () => floatRoot.style.height = `${screen.height}px`,\n                    thisObj           : this\n                });\n            }\n\n            // Resize float root upon keyboard-caused visual viewport size change\n            // https://developer.mozilla.org/en-US/docs/Web/API/Visual_Viewport_API\n            if (!BrowserHelper.isHoverableDevice && globalThis.visualViewport) {\n                EventHelper.on({\n                    element : globalThis.visualViewport,\n                    resize  : ({ target : viewport }) => floatRoot.style.height = `${viewport.height}px`,\n                    thisObj : this\n                });\n            }\n\n            // Keep floatRoot up to date with the theme\n            GlobalEvents.ion({\n                theme : ({ theme, prev }) => {\n                    // TODO handle for all roots\n                    floatRoot.classList.add(`b-theme-${theme.toLowerCase()}`);\n                    floatRoot.classList.remove(`b-theme-${prev.toLowerCase()}`);\n                }\n            });\n        }\n        // Angular might shuffle elements around so we have to ensure floatRoot is a child of the right parent\n        else if (!rootElement.contains(floatRoot)) {\n            // Reattach floatRoot if it was detached\n            rootElement.appendChild(floatRoot);\n        }\n\n        return floatRoot;\n    }\n\n    get floatRootMaxZIndex() {\n        let max = 1;\n\n        Array.from(this.floatRoot.children).forEach(child => {\n            const zIndex = parseInt(getComputedStyle(child).zIndex || 0, 10);\n\n            if (zIndex > max) {\n                max = zIndex;\n            }\n        });\n\n        return max;\n    }\n\n    static resetFloatRootScroll() {\n        floatRoots.forEach(floatRoot => floatRoot.scrollTop = floatRoot.scrollLeft = 0);\n    }\n\n    static get floatRoots() {\n        return floatRoots;\n    }\n\n    static removeFloatRoot(floatRoot) {\n        floatRoots.splice(floatRoots.indexOf(floatRoot), 1);\n    }\n\n    // CSS classes describing outer-most Widgets to provide styling / behavioral CSS style rules\n    static get outerCls() {\n        const\n            result = ['b-outer'],\n            { platform } = BrowserHelper;\n\n        if (platform) {\n            result.push(`b-${platform}`);\n        }\n\n        if (BrowserHelper.isTouchDevice) {\n            result.push('b-touch-events');\n        }\n\n        if (DomHelper.scrollBarWidth) {\n            result.push('b-visible-scrollbar');\n        }\n        else {\n            result.push('b-overlay-scrollbar');\n        }\n\n        if (BrowserHelper.isChrome) {\n            result.push('b-chrome');\n        }\n        else if (BrowserHelper.isSafari) {\n            result.push('b-safari');\n        }\n        else if (BrowserHelper.isFirefox) {\n            result.push('b-firefox');\n        }\n\n        // So that we don't get the polyfill styles applied if we have ResizeMonitor available.\n        // The polyfill styles can break certain elements styling.\n        if (!globalThis.ResizeObserver) {\n            result.push('b-no-resizeobserver');\n        }\n\n        return result;\n    }\n\n    get isAnimating() {\n        return this._isAnimatingCounter > 0;\n    }\n\n    set isAnimating(value) {\n        const\n            me                      = this,\n            { _isAnimatingCounter } = me;\n\n        // Ensure flag is correct when code called by listeners interrogates it\n        me._isAnimatingCounter = Math.max(0, _isAnimatingCounter + (value ? 1 : -1));\n\n        if (_isAnimatingCounter === 0 && value) {\n            me.element.classList.add('b-animating');\n            me.trigger('animationStart');\n        }\n        else if (_isAnimatingCounter === 1 && !value) {\n            me.element.classList.remove('b-animating');\n            me.trigger('animationEnd');\n        }\n    }\n\n    // Waits until all transitions are completed\n    async waitForAnimations() {\n        if (this.isAnimating) {\n            await this.await('animationend', { checkLog : false });\n        }\n    }\n\n    /**\n     * Analogous to document.querySelector, finds the first Bryntum widget matching the passed\n     * selector. Right now, only class name (lowercased) selector strings, or\n     * a filter function which returns `true` for required object are allowed:\n     * ```\n     * bryntum.query('grid').destroy();\n     * ```\n     * @param {String|Function} selector A lowercased class name, or a filter function.\n     * @param {Boolean} [deep] Specify `true` to search the prototype chain (requires supplying a string `selector`). For\n     *   example 'widget' would then find a Grid\n     * @returns {Core.widget.Widget} The first matched widget if any.\n     * @category Widget hierarchy\n     */\n    static query(selector, deep = false) {\n        const { idMap } = Widget.identifiable;\n\n        for (const id in idMap) {\n            if (Widget.widgetMatches(idMap[id], selector, deep)) {\n                return idMap[id];\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Analogous to document.querySelectorAll, finds all Bryntum widgets matching the passed\n     * selector. Right now, only registered widget `type` strings, or a filter function which\n     * returns `true` for required object are allowed:\n     * ```\n     * let allFields = bryntum.queryAll('field', true);\n     * ```\n     * @param {String|Function} selector A lowercased class name, or a filter function.\n     * @param {Boolean} [deep] Specify `true` to search the prototype chain (requires supplying a string `selector`). For\n     *   example 'widget' would then find a Grid\n     * @returns {Core.widget.Widget[]} The first matched widgets if any - an empty array will be returned\n     * if no matches are found.\n     * @category Widget hierarchy\n     */\n    static queryAll(selector, deep = false) {\n        const\n            { idMap } = Widget.identifiable,\n            result    = [];\n\n        for (const id in idMap) {\n            if (Widget.widgetMatches(idMap[id], selector, deep)) {\n                result.push(idMap[id]);\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Returns the Widget which owns the passed element (or event).\n     * @param {HTMLElement|Event} element The element or event to start from\n     * @param {String|Function} [type] The type of Widget to scan upwards for. The lowercase\n     * class name. Or a filter function which returns `true` for the required Widget.\n     * @param {HTMLElement|Number} [limit] The number of components to traverse upwards to find a\n     * match of the type parameter, or the element to stop at.\n     * @returns {Core.widget.Widget} The found Widget or null.\n     * @category Misc\n     */\n    static fromElement(element, type, limit) {\n        const typeOfType = typeof type;\n\n        // Check if an event was passed\n        if (element && !element.nodeType) {\n            element = element.target;\n        }\n\n        if (typeOfType === 'number' || type && type.nodeType === Element.ELEMENT_NODE) {\n            limit = type;\n            type = null;\n        }\n\n        let target = element,\n            depth  = 0,\n            topmost, cmpId, cmp;\n\n        if (typeof limit !== 'number') {\n            topmost = limit;\n            limit = Number.MAX_VALUE;\n        }\n        if (typeOfType === 'string') {\n            type = type.toLowerCase();\n        }\n\n        while (target && target.nodeType === Element.ELEMENT_NODE && depth < limit && target !== topmost) {\n            cmpId = (target.dataset && target.dataset.ownerCmp) || target.id;\n\n            if (cmpId) {\n                cmp = Widget.getById(cmpId);\n\n                if (cmp) {\n                    if (type) {\n                        if (typeOfType === 'function') {\n                            if (type(cmp)) {\n                                return cmp;\n                            }\n                        }\n                        else if (Widget.widgetMatches(cmp, type, true)) {\n                            return cmp;\n                        }\n                    }\n                    else {\n                        return cmp;\n                    }\n                }\n\n                // Increment depth on every *Widget* found\n                depth++;\n            }\n\n            target = target.parentNode;\n        }\n\n        return null;\n    }\n\n    // NOTE: Not named `triggerChange` to not conflict with existing fn on Field\n    /**\n     * Triggers a 'change' event with the supplied params. After triggering it also calls `onFieldChange()` on each\n     * ancestor the implements that function, supplying the same set of params.\n     * @param {Object} params Event params, used both for triggering and notifying ancestors\n     * @param {Boolean} [trigger] `false` to not trigger, only notifying ancestors\n     * @internal\n     */\n    triggerFieldChange(params, trigger = true) {\n        if (trigger) {\n            this.trigger('change', params);\n        }\n\n        this.eachAncestor(ancestor => {\n            ancestor.onFieldChange?.(params);\n\n            // Stop going up when reaching an ancestor that isolates its fields\n            if (ancestor.isolateFieldChange?.(this)) {\n                return false;\n            }\n        });\n    }\n\n    /**\n     * Returns `true` if the given `field`'s value change should be isolated (kept hidden by this widget). By default,\n     * this method returns the value of {@link Core.widget.Container#config-isolateFields} for all fields.\n     * @param {Core.widget.Field} field The field in question.\n     * @internal\n     */\n    isolateFieldChange(field) {\n        return this.isolateFields;\n    }\n\n    // Sets up the focus listeners, one set for every document root (shadow root or document)\n    setupFocusListeners() {\n        // Listen to focus events on shadow root to handle focus inside the shadow dom\n        GlobalEvents.setupFocusListenersOnce(this._rootElement, EventHelper);\n    }\n\n    static widgetMatches(candidate, selector, deep) {\n        if (selector === '*') {\n            return true;\n        }\n        if (typeof selector === 'function') {\n            return selector(candidate);\n        }\n        return Widget.isType(candidate, selector, deep);\n    }\n\n    /**\n     * Attached a tooltip to the specified element.\n     * @example\n     * Widget.attachTooltip(element, {\n     *   text: 'Useful information goes here'\n     * });\n     * @param {HTMLElement} element Element to attach tooltip for\n     * @param {TooltipConfig|String} configOrText Tooltip config or tooltip string, see example and source\n     * @returns {HTMLElement} The passed element\n     * @category Misc\n     */\n    static attachTooltip(element, configOrText) {\n        if (typeof configOrText === 'string') configOrText = { html : configOrText };\n\n        // TODO: refactor this\n        Widget.create(Object.assign({\n            forElement : element\n        }, configOrText), 'tooltip');\n\n        return element;\n    }\n\n    //region RTL\n\n    // Since we use flexbox docking flips correctly out of the box. start and end values can be mapped straight to\n    // left and right, for both LTR and RTL\n    changeDock(dock) {\n        if (dock === 'start') {\n            return 'left';\n        }\n\n        if (dock === 'end') {\n            return 'right';\n        }\n\n        return dock;\n    }\n\n    updateRtl(rtl) {\n        super.updateRtl(rtl);\n\n        // Cascade the rtl setting to owned widgets which are not configured with an rtl value\n        this.eachWidget(item => {\n            if (!('rtl' in item.initialConfig)) {\n                item.rtl = rtl;\n            }\n        });\n    }\n\n    //endregion\n}\n\nconst proto = Widget.prototype;\n\n['compose', 'domSyncCallback'].forEach(fn => proto[fn].$nullFn = true);\n\n// Register this widget type with its Factory\nWidget.initClass();\nWidget.register('mask', Mask);\n\n// These low level classes must not import Widget because that would cause circularity.\n// Instead Widget injects a reference to itself into them.\nDomHelper.Widget = Widget;\nGlobalEvents.Widget = Widget;\n\n// We use the same map to track instances by ID\nMask.identifiable.idMap = Widget.identifiable.idMap;\n\n// Simplify querying widgets by exposing fns in bryntum ns\nObject.assign((globalThis.bryntum || (globalThis.bryntum = {})), {\n    get         : Widget.getById.bind(Widget),\n    query       : Widget.query,\n    queryAll    : Widget.queryAll,\n    fromElement : Widget.fromElement\n});\n","import Base from '../../Base.js';\nimport Events from '../../mixin/Events.js';\nimport Factoryable from '../../mixin/Factoryable.js';\nimport Widget from '../../widget/Widget.js';\nimport DomHelper from '../../helper/DomHelper.js';\n\n/**\n * @module Core/widget/layout/Layout\n */\n\n/**\n  * A helper class used by {@link Core.widget.Container}s which renders child widgets to their\n  * {@link Core.widget.Widget#property-contentElement}. It also adds the Container's\n  * {@link Core.widget.Container#config-itemCls} class to child items.\n  *\n  * Subclasses may modify the way child widgets are rendered, or may offer APIs for manipulating the child widgets.\n  *\n  * The {@link Core.widget.layout.Card} layout class offers slide-in, slide-out animation of multiple\n  * child widgets. {@link Core.widget.TabPanel} uses Card layout.\n  * @layout\n  * @classtype default\n  */\nexport default class Layout extends Base.mixin(Events, Factoryable) {\n    static type = 'default';\n\n    static configurable = {\n        /**\n         * The owning Widget.\n         * @member {Core.widget.Widget} owner\n         * @readonly\n         */\n        /**\n         * @config {Core.widget.Widget} owner\n         * @private\n         */\n        owner : null,\n\n        /**\n         * The CSS class which should be added to the owning {@link Core.widget.Container}'s.\n         * {@link Core.widget.Widget#property-contentElement}.\n         * @config {String}\n         */\n        containerCls : 'b-auto-container',\n\n        /**\n         * The CSS class which should be added to the encapsulating element of child items.\n         * @config {String}\n         */\n        itemCls : null\n    };\n\n    // establish this class as the Factoryable base\n    static factoryable = {\n        defaultType : 'default'\n    };\n\n    get contentElement() {\n        return this.owner?.contentElement;\n    }\n\n    onChildAdd(item) {}\n\n    onChildRemove(item) {}\n\n    renderChildren() {\n        const\n            me                        = this,\n            { owner, itemCls }        = me,\n            { contentElement, items } = owner,\n            ownerItemCls              = owner.itemCls,\n            itemCount                 = items?.length;\n\n        // Need to check that container has widgets, for example TabPanel can have no tabs\n        if (itemCount) {\n            owner.textContent = false;\n\n            for (let i = 0; i < itemCount; i++) {\n                const\n                    item = items[i],\n                    { element } = item,\n                    { classList } = element;\n\n                element.dataset.itemIndex = i;\n\n                // If instantiated by the app developer, external to Container#createWidget\n                // a widget will have the b-outer class. Remove that if it's contained.\n                if (classList.contains('b-outer')) {\n                    classList.remove(...Widget.outerCls);\n                }\n\n                if (itemCls) {\n                    classList.add(itemCls);\n                }\n\n                if (ownerItemCls) {\n                    classList.add(ownerItemCls);\n                }\n\n                // Only trigger paint if the owner is itself painted, otherwise\n                // the outermost Container will cascade the paint signal down.\n                item.render(contentElement, Boolean(owner.isPainted));\n            }\n        }\n\n        me.syncPendingConfigs();\n        me.syncChildCount();\n    }\n\n    removeChild(child) {\n        const\n            me                 = this,\n            { element }        = child,\n            { owner, itemCls } = me,\n            { contentElement } = owner,\n            ownerItemCls       = owner.itemCls;\n\n        // Chrome has turned very fussy recently.\n        // If the parent does not contain the child to be removed, it throws.\n        if (contentElement.contains(element)) {\n            element.remove();\n        }\n\n        delete element.dataset.itemIndex;\n\n        if (itemCls) {\n            element.classList.remove(itemCls);\n        }\n\n        if (ownerItemCls) {\n            element.classList.remove(ownerItemCls);\n        }\n\n        me.fixChildIndices();\n        me.syncChildCount();\n    }\n\n    appendChild(child) {\n        const\n            { element }        = child,\n            { owner, itemCls } = this,\n            { contentElement } = owner,\n            ownerItemCls       = owner.itemCls;\n\n        element.dataset.itemIndex = owner.indexOfChild(child);\n\n        owner.textContent = false;\n\n        if (itemCls) {\n            element.classList.add(itemCls);\n        }\n\n        if (ownerItemCls) {\n            element.classList.add(ownerItemCls);\n        }\n\n        child.render(contentElement, Boolean(owner.isPainted));\n\n        this.syncChildCount();\n    }\n\n    insertChild(toAdd, childIndex) {\n        const\n            me                 = this,\n            { element }        = toAdd,\n            { owner, itemCls } = me,\n            { contentElement } = owner,\n            nextSibling        = DomHelper.getChild(contentElement, `[data-item-index=\"${childIndex}\"]`),\n            ownerItemCls       = owner.itemCls;\n\n        owner.textContent = false;\n\n        if (itemCls) {\n            element.classList.add(itemCls);\n        }\n\n        if (ownerItemCls) {\n            element.classList.add(ownerItemCls);\n        }\n\n        contentElement.insertBefore(element, nextSibling);\n\n        toAdd.render(null, Boolean(owner.isPainted));\n\n        me.fixChildIndices();\n        me.syncChildCount();\n    }\n\n    fixChildIndices() {\n        this.owner.items.forEach((child, index) => {\n            child.element.dataset.itemIndex = index;\n        });\n    }\n\n    syncChildCount() {\n        const\n            { owner }  = this,\n            { length } = owner.items;\n\n        // Special CSS conditions may apply if there's only a single child.\n        owner.contentElement?.classList[length === 1 ? 'add' : 'remove']('b-single-child');\n    }\n\n    /**\n     * Registers a layout `config` property that cannot be acted upon at this time but must wait for the `owner` to\n     * fully render its elements (in particular the `contentElement`).\n     * @param {String} config The name of the config to sync later.\n     * @internal\n     */\n    syncConfigLater(config) {\n        const pendingConfigs = this.pendingConfigs || (this.pendingConfigs = []);\n\n        if (!pendingConfigs.includes(config)) {\n            pendingConfigs.push(config);\n        }\n    }\n\n    /**\n     * Sets the specified `style` to the value of the config given its `name`.\n     * @param {Object} options The name of the config with the value to apply to the given `style`.\n     * @param {String} options.name The name of the config with the value to apply to the given `style`.\n     * @param {String} options.style The style property to set on the `contentElement`.\n     * @param {String[]} [options.classes] A list of config values that should be added as CSS classes.\n     * @param {Object} [options.map] An mapping object to convert the config's value to the `style` value.\n     * @internal\n     */\n    syncConfigStyle({ name, style, classes, map }) {\n        const\n            me = this,\n            baseCls = `b-box-${name}-`,  // ex: 'b-box-justify-'\n            { contentElement } = me,\n            raw = me[name];\n\n        let value = map?.[raw] || raw;\n\n        if (contentElement) {\n            if (classes) {\n                const { classList } = contentElement;\n\n                classes.forEach(c => {\n                    if (c !== value) {\n                        classList.remove(baseCls + c);\n                    }\n                });\n\n                if (classes.includes(value)) {\n                    classList.add(baseCls + value);\n                    value = '';  // to remove the inline style\n                }\n            }\n\n            contentElement.style[style] = value;\n        }\n        else {\n            me.syncConfigLater(name);\n        }\n    }\n\n    syncPendingConfigs() {\n        const\n            me = this,\n            { pendingConfigs } = me;\n\n        let name;\n\n        if (pendingConfigs) {\n            me.pendingConfigs = null;\n\n            while ((name /* assignment */ = pendingConfigs.pop())) {\n                me[me.$meta.configs[name].updater](me[name]);\n            }\n        }\n    }\n}\n\nLayout.initClass();\n","import Widget from './Widget.js';\nimport Rectangle from '../helper/util/Rectangle.js';\nimport EventHelper from '../helper/EventHelper.js';\nimport DomHelper from '../helper/DomHelper.js';\nimport GlobalEvents from '../GlobalEvents.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\n\nlet lastTouchTime = 0;\n\nconst hasRipple = w => w.ripple;\n\nexport default class Ripple extends Widget {\n    static get defaultConfig() {\n        return {\n            old_element : {\n                children : [{\n                    className : 'b-ripple-inner',\n                    reference : 'rippleElement'\n                }]\n            },\n\n            element : {\n                children : [{\n                    tag       : 'svg',\n                    class     : 'b-ripple-inner',\n                    reference : 'rippleElement',\n                    ns        : 'http://www.w3.org/2000/svg',\n                    version   : '1.1',\n                    viewBox   : '0 0 100 100',\n                    children  : [{\n                        reference : 'circleElement',\n                        tag       : 'circle',\n                        cx        : '0',\n                        cy        : '0',\n                        r         : 10\n                    }]\n                }]\n            },\n\n            floating      : true,\n            hideAnimation : false,\n            showAnimation : false,\n            scrollAction  : 'realign',\n            color         : 'rgba(0,0,0,.3)',\n            startRadius   : 10,\n            radius        : 100\n        };\n    }\n\n    static get $name() {\n        return 'Ripple';\n    }\n\n    afterConstruct() {\n        super.afterConstruct();\n\n        EventHelper.on({\n            element   : this.rootElement,\n            mousedown : 'onRippleControllingEvent',\n            thisObj   : this,\n            capture   : true,\n            once      : true\n        });\n    }\n\n    onRippleControllingEvent(event) {\n        const me = this;\n\n        me.show();\n\n        const rippleAnimation = DomHelper.getStyleValue(me.circleElement, 'animationName');\n\n        me.hide();\n\n        me.listenerDetacher?.();\n\n        // If our theme supports ripples, add our listeners\n        if (rippleAnimation && rippleAnimation !== 'none') {\n            me.listenerDetacher = EventHelper.on({\n                // Trap all mousedowns and see if the encapsulating Component is configured to ripple\n                mousedown : {\n                    element : me.rootElement,\n                    capture : true,\n                    handler : 'onMousedown'\n                },\n                touchstart : {\n                    element : me.rootElement,\n                    capture : true,\n                    handler : 'onTouchStart'\n                },\n                // Hide at the end of the ripple\n                animationend : {\n                    element : me.circleElement,\n                    handler : 'onAnimationEnd'\n                },\n                thisObj : me\n            });\n\n            // If this is the first mousedown, start listening to theme changes and trigger ripple manually\n            if (event.type === 'mousedown') {\n                me.onMousedown(event);\n\n                GlobalEvents.ion({\n                    theme   : 'onRippleControllingEvent',\n                    thisObj : this\n                });\n            }\n        }\n    }\n\n    onTouchStart(event) {\n        lastTouchTime = performance.now();\n        this.handleTriggerEvent(event);\n    }\n\n    onMousedown(event) {\n        // We need to prevent a touchend->mousedown simulated mousedown from triggering a ripple.\n        // https://developer.mozilla.org/en-US/docs/Web/API/Touch_events/Supporting_both_TouchEvent_and_MouseEvent\n        if (performance.now() - lastTouchTime > 200) {\n            this.handleTriggerEvent(event);\n        }\n    }\n\n    handleTriggerEvent(event) {\n        const targetWidget = Widget.fromElement(event.target, hasRipple);\n\n        if (targetWidget) {\n            const\n                rippleCfg = targetWidget.ripple,\n                target    = rippleCfg.delegate\n                    ? event.target.closest(rippleCfg.delegate)\n                    : (targetWidget.focusElement || targetWidget.element);\n\n            if (target) {\n                const ripple = ObjectHelper.assign({\n                    event,\n                    target,\n                    radius : this.radius\n                }, rippleCfg);\n\n                // The clip option is specified as a string property name or delegate\n                if (typeof ripple.clip === 'string') {\n                    ripple.clip = targetWidget[ripple.clip] || event.target.closest(ripple.clip);\n\n                    // Not inside an instance of the clip delegate, then no ripple\n                    if (!ripple.clip) {\n                        return;\n                    }\n                }\n                this.ripple(ripple);\n            }\n        }\n    }\n\n    ripple({\n        event,\n        point = EventHelper.getClientPoint(event),\n        target = event.target,\n        clip = target,\n        radius = this.radius,\n        color = this.color\n    }) {\n        this.clip = clip;\n\n        //<debug>\n        if (this.clip.nodeType !== 1) {\n            throw new Error('Ripple\\'s clip option must be a constraining HTMLElement');\n        }\n        //</debug>\n        clip = Rectangle.from(clip, null, true);\n\n        const\n            me            = this,\n            centreDelta   = clip.getDelta(point),\n            rippleStyle   = me.rippleElement.style,\n            circleElement = me.circleElement,\n            borderRadius  = DomHelper.getStyleValue(target, 'border-radius');\n\n        me.hide();\n        rippleStyle.transform    = `translateX(${centreDelta[0]}px) translateY(${centreDelta[1]}px)`;\n        rippleStyle.height       = rippleStyle.width = `${radius}px`;\n        me.element.style.borderRadius = borderRadius;\n        circleElement.setAttribute('r', radius);\n        circleElement.setAttribute('fill', color);\n\n        // Show aligned center to center with our clipping region.\n        me.showBy({\n            target    : clip,\n            align     : 'c-c',\n            matchSize : true\n        });\n    }\n\n    // When fully expanded, it's all over.\n    onAnimationEnd(event) {\n        if (event.animationName === 'b-ripple-expand') {\n            this.hide();\n        }\n    }\n}\n\nWidget.RippleClass = Ripple;\n","import Widget from './Widget.js';\nimport ArrayHelper from '../helper/ArrayHelper.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\nimport Layout from './layout/Layout.js';\nimport DomHelper from '../helper/DomHelper.js';\nimport DomClassList from '../helper/util/DomClassList.js';\nimport './Ripple.js';\nimport Bag from '../util/Bag.js';\n\n/**\n * @module Core/widget/Container\n */\n\nconst\n    emptyObject  = Object.freeze({}),\n    { isArray }  = Array,\n    returnWeight = i => i.weight,\n    // Allowing string weights (used by subgrids for backwards compatibility)\n    sortByWeight = ({ weight : a }, { weight : b }) => {\n        if (typeof a === 'string' || typeof b === 'string') {\n            return String(a).localeCompare(String(b));\n        }\n\n        // Items without weight sort last\n        return (a ?? Number.MAX_SAFE_INTEGER) - (b ?? Number.MAX_SAFE_INTEGER);\n    },\n    isNotHidden   = w => w && !w.hidden,\n    stylesToCheck = ['display', 'flex-direction'],\n    boxLayouts    = {\n        default : 1,\n        box     : 1\n    };\n\n/**\n * Widget that can contain other widgets. Layout is flexbox by default, see the {@link #config-layout} config.\n *\n * ```javascript\n * // create a container with two widgets\n * let container = new Container({\n *     items : {\n *         name  : { type : 'textfield', label : 'Name' },\n *         score : { type : 'numberfield', label : 'Score' }\n *     }\n * });\n * ```\n *\n * Containers can have child widgets added, or removed during their lifecycle to accommodate business needs.\n *\n * For example:\n *\n *  ```javascript\n *  myTaskPopup.on({\n *      beforeShow() {\n *          if (task.type === task.MASTER) {\n *              // Insert the childTask multiselect before the masterTask field\n *              myPopup.insert(childTaskMultiselect, masterTaskField)\n *\n *              // We don't need this for master tasks\n *              myPopup.remove(masterTaskField);\n *          }\n *          else {\n *              // Insert the masterTask combo before the childTask multiselect\n *              myPopup.insert(masterTaskField, childTaskMultiselect)\n *\n *              // We don't need this for child tasks\n *              myPopup.remove(childTaskMultiselect);\n *          }\n *      }\n *  });\n * ```\n *\n * @extends Core/widget/Widget\n * @classType container\n * @inlineexample Core/widget/Container.js\n * @widget\n */\nexport default class Container extends Widget {\n\n    static get $name() {\n        return 'Container';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'container';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * An object containing typed child widget config objects or Widgets. May also be specified\n             * as an array.\n             *\n             * If configured as an Object, the property names are used as the child component's\n             * {@link Core.widget.Widget#config-ref} name, and the value is the child component's config object.\n             *\n             * ```javascript\n             *\n             *  class MyContainer extends Container {\n             *      static get configurable() {\n             *          return {\n             *              items : {\n             *                  details : {\n             *                      type : 'panel',\n             *                      ....\n             *                  },\n             *                  button : {\n             *                      type : 'button',\n             *                      text : 'Save'\n             *                  }\n             *              }\n             *          }\n             *      }\n             *  }\n             *\n             *  new MyContainer({\n             *      title    : 'Test Container',\n             *      floating : true,\n             *      centered : true,\n             *      width    : 600,\n             *      height   : 400,\n             *      layout   : 'fit',\n             *      items    : {\n             *          button : {\n             *              disabled : true\n             *          },\n             *          details : {\n             *              title : 'More coolness',\n             *              html  : 'Details content'\n             *          }\n             *      }\n             *  }).show();\n             * ```\n             *\n             * The order of the child widgets is determined by the order they are defined in `items`, but can also be\n             * affected by configuring a {@link Core.widget.Widget#config-weight} on one or more widgets.\n             *\n             * To remove existing items, set corresponding keys to `null`.\n             *\n             * If you want to customize child items of an existing class, you can do this using the child widget\n             * 'ref' identifier (useful for reconfiguring Event Editor in Scheduler / Gantt):\n             *\n             * ```javascript\n             *  new MyCustomTabPanel({\n             *      items    : {\n             *          // Reconfigure tabs\n             *          firstTab : {\n             *              title : 'My custom title'\n             *          },\n             *          secretTab : null // hide this tab\n             *      }\n             *  }).show();\n             * ```\n             *\n             * @config {Object<String,ContainerItemConfig|Boolean|null>|ContainerItemConfig[]|Core.widget.Widget[]}\n             * @category Content\n             */\n            items : null,\n\n            /**\n             * An array of {@link #config-items child item} _config objects_ which is to be converted into\n             * instances only when this Container is rendered, rather than eagerly at construct time.\n             *\n             * _This is mutually exclusive with the {@link #config-items} config._\n             *\n             * @config {Object<String,ContainerItemConfig>|ContainerItemConfig[]|Core.widget.Widget[]}\n             * @category Content\n             */\n            lazyItems : {\n                $config : ['lazy'],\n                value   : null\n            },\n\n            /**\n             * A config object containing default settings to apply to all child widgets.\n             * @config {Object}\n             * @category Content\n             */\n            defaults : null,\n\n            defaultType : 'widget',\n\n            /**\n             * The CSS style properties to apply to the {@link Core.widget.Widget#property-contentElement}.\n             *\n             * By default, a Container's {@link Core.widget.Widget#property-contentElement} uses flexbox layout, so this\n             * config may contain the following properties:\n             *\n             * - <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction\">flexDirection</a> default '`row`'\n             * - <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap\">flexWrap</a>\n             * - <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/flex-flow\">flexFlow</a>\n             * - <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content\">justifyContent</a>\n             * - <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/align-items\">alignItems</a>\n             * - <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/align-content\">alignContent</a>\n             * - <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/place-content\">placeContent</a>\n             * @prp {Object}\n             * @category Layout\n             */\n            layoutStyle : null,\n\n            /**\n             * An optional CSS class to add to child items of this container.\n             * @config {String}\n             * @category CSS\n             */\n            itemCls : null,\n\n            /**\n             * The {@link #config-layout} as an instance of {@link Core.widget.layout.Layout}.\n             * This is a helper class which adds and removes child widgets to this Container's\n             * DOM and applies CSS classes based upon its requirements.\n             *\n             * The {@link Core.widget.layout.Card card} layout provides for showing one child\n             * widget at a time, and provides a switching API to change which child widget is\n             * currently active.\n             * @member {Core.widget.layout.Layout} layout\n             * @category Layout\n             */\n            /**\n             * The short name of a helper class which manages rendering and styling of child items.\n             *\n             * Or a config object which includes a `type` property which specifies which type\n             * of layout to use, and how to configure that layout.\n             *\n             * By default, the only special processing that is applied is that the Container class's\n             * {@link #config-itemCls} is added to child items.\n             *\n             * Containers use CSS flexbox in its default configuration to arrange child items. You may either use the\n             * {@link #config-layoutStyle} configuration to tune how child items are layed out, or use one of the built\n             * in helper classes which include:\n             *\n             *  - `fit` A single child item is displayed fitting exactly into the\n             *  {@link Core.widget.Widget#property-contentElement}.\n             *  - `card` Child items are displayed one at a time, size to fit the\n             *  {@link Core.widget.Widget#property-contentElement} and are slid in from the side when activated.\n             *  - `box` Child items are layed out using flexbox.\n             *\n             * For example:\n             * ```javascript\n             * {\n             *     id     : 'myContainer',\n             *     // Our child items flow downwards and are stretched to fill our width\n             *     layout : {\n             *         type       : 'box',\n             *         direction  : 'column'\n             *         align      : 'stretch'\n             *     }\n             * }\n             * @config {String|ContainerLayoutConfig}\n             * @category Layout\n             */\n            layout : {\n                type : 'default'\n            },\n\n            // TODO: deprecate namedItems, use items instead\n            /**\n             * An object containing named config objects which may be referenced by name in any {@link #config-items}\n             * object. For example, a specialized {@link Core.widget.Menu Menu} subclass may have a `namedItems` default\n             * value defined like this:\n             *\n             * ```javascript\n             *  namedItems : {\n             *      removeRow : {\n             *          text : 'Remove row',\n             *          onItem() {\n             *              this.ownerGrid.remove(this.ownerGrid.selectedRecord);\n             *          }\n             *      }\n             *  }\n             * ```\n             *\n             * Then whenever that subclass is instantiated and configured with an {@link #config-items} object, the\n             * items may be configured like this:\n             *\n             * ```javascript\n             *  items : {\n             *      removeRow : true,   // The referenced namedItem will be applied to this\n             *      otherItemRef : {\n             *          text : 'Option 2',\n             *          onItem() {\n             *          }\n             *      }\n             * }\n             * ```\n             * @config {Object<string,ContainerItemConfig>}\n             * @category Content\n             */\n            namedItems : null,\n\n            /**\n             * When set to `true`, this widget is considered as a whole when processing {@link Core.widget.Toolbar}\n             * overflow. When `false`, this widget's child items are considered instead.\n             *\n             * When set to the string `'none'`, this widget is ignored by overflow processing. This option should be\n             * used with caution as it prevents the overflow algorithm from moving such widgets into the overflow\n             * popup which may result in not clearing enough space to avoid overflowing the toolbar.\n             * @config {Boolean|String}\n             * @default false\n             * @category Layout\n             * @internal\n             */\n            overflowable : {\n                value   : null,\n                default : false,\n                $config : null\n            },\n\n            /**\n             * Specify `true` for a container used to show text markup. It will apply the CSS class `b-text-content`\n             * which specifies a default max-width that makes long text more readable.\n             *\n             * This CSS class is automatically removed if the container adds/defines child Widgets.\n             * @config {Boolean}\n             * @default\n             * @category Content\n             */\n            textContent : true,\n\n            /**\n             * Record whose values will be used to populate fields in the container.\n             * @config {Core.data.Model}\n             * @internal\n             */\n            record : null,\n\n            /**\n             * Update assigned {@link #config-record} automatically on field changes\n             * @config {Boolean}\n             */\n            autoUpdateRecord : null,\n\n            /**\n             * Update fields if the {@link #config-record} changes\n             * @config {Boolean}\n             * @internal\n             */\n            autoUpdateFields : null,\n\n            /**\n             * Specify `true` to make this container hide when it has no visible children (Either empty\n             * or all children hidden).\n             *\n             * Container will show itself when there are visible children, ie: hidden children are\n             * shown, or new visible children are added.\n             * @config {Boolean}\n             * @default\n             * @category Layout\n             */\n            hideWhenEmpty : null,\n\n            contentElMutationObserver : {\n                $config : ['lazy', 'nullify'],\n                value   : true\n            },\n\n            /**\n             * Specify `true` to isolate record changes to this container and its ancestors. Prevents record\n             * updates from propagating up from here and also prevents record updates from parent from\n             * propagating down to us.\n             *\n             * @config {Boolean}\n             * @default false\n             * @internal\n             */\n            isolateFields : false,\n\n            /**\n             * Can be set to `true` to make a focus of a focusable encapsulating element rely\n             * focus down into a focusable child. This is normally `false` to allow mousedown\n             * to begin text selection in Popups.\n             * @internal\n             */\n            focusDescendant : false,\n\n            // Our own setValues/getValues system should not set/get HTML content\n            defaultBindProperty : null,\n\n            /**\n             * A {@link #function-query} selector function which can identify the descendant widget to which\n             * focus should be directed by default.\n             *\n             * By default, the first focusable descendant widget is chosen. This may direct focus to a different\n             * widget:\n             *\n             * ```javascript\n             *     new Popup({\n             *         title        : 'Details',\n             *         width        : '25em',\n             *         centered     : true,\n             *         modal        : true,\n             *\n             *         // Focus goes straight to OK button in the bottom toolbar on show\n             *         defaultFocus : w => w.ref ==='okButton',\n             *         items        : {\n             *             nameField : {\n             *                 type  : 'textfield',\n             *                 label : 'Name'\n             *             },\n             *             ageField  : {\n             *                 type  : 'numberfield',\n             *                 label : 'Name'\n             *             }\n             *         },\n             *         bbar     : {\n             *             items : {\n             *                 okButton : {\n             *                     text    : 'OK',\n             *                     handler : okFunction\n             *                 },\n             *                 cncelButton : {\n             *                     text    : 'Cancel',\n             *                     handler : cancelFunction\n             *                 }\n             *             }\n             *         }\n             *     }).show();\n             * ```\n             * @config {Function}\n             */\n            defaultFocus : null\n        };\n    }\n\n    static get prototypeProperties() {\n        return {\n            // These classes have opinions about how fields should fill the space, so allow them to be replaced by the\n            // less opinionated b-hbox/b-vbox classes when that is not desired. Using \":not(.b-toolbar-content)\" in\n            // the CSS does not scale now that FieldSet wants similar treatment... adding more \":not()\"s is not only a\n            // messy approach, it increases the selector specificity and causes interference with other selectors (e.g.\n            // TimePicker's number field rules).\n            flexRowCls : 'b-flex-row',\n            flexColCls : 'b-flex-column',\n\n            /**\n             * @member {Boolean} initialItems\n             * This property is `true` until the container's initial `items` config has been processed. This property\n             * is set to `false` by the `updateItems` method.\n             * @readonly\n             * @internal\n             */\n            initialItems : true\n        };\n    }\n\n    /**\n     * The {@link Core.data.Model record} to be applied to the fields contained in this Container. Any descendant\n     * widgets of this Container with a `name` property will have its value set to the value of that named property of\n     * the record. If no record is passed, the widget has its value set to `null`.\n     * @member {Core.data.Model} record\n     */\n\n    startConfigure(config) {\n        // Set a flag so that code can test for presence of items.\n        // Widgets which render child widgets outside of the Container scheme\n        // can set this flag (eg Panels with tools and tbar).\n        const items = config.items || config.lazyItems;\n\n        if (!(this.hasItems = Boolean(items && (isArray(items) ? items : Object.keys(items)).length))) {\n            this.initialItems = false;   // we won't be running updateItems, so clear this flag now\n        }\n\n        super.startConfigure(config);\n    }\n\n    /**\n     * Returns the first widget in this Container.\n     * @property {Core.widget.Widget}\n     * @readonly\n     */\n    get firstItem() {\n        return this.getAt(0);\n    }\n\n    /**\n     * Returns the last widget in this Container.\n     * @property {Core.widget.Widget}\n     * @readonly\n     */\n    get lastItem() {\n        return this.getAt(-1);\n    }\n\n    /**\n     * Returns the widget at the specified `index` in this Container.\n     * @param {Number} index The index of the widget to return. Negative numbers index for the last item. For example,\n     * `index = -1` returns the last matching item, -2 the 2nd to last matching item etc..\n     * @returns {Core.widget.Widget} The requested widget.\n     */\n    getAt(index) {\n        return this.ensureItems().at(index);\n    }\n\n    /**\n     * Removes the passed child/children from this Container.\n     * @param  {...Core.widget.Widget} toRemove The child or children to remove.\n     * @returns {Core.widget.Widget|Core.widget.Widget[]} All the removed items. An array if multiple items\n     * were removed, otherwise, just the item removed.\n     */\n    remove(...toRemove) {\n        let returnArray = true;\n\n        if (toRemove.length === 1) {\n            if (isArray(toRemove[0])) {\n                toRemove = toRemove[0];\n            }\n            else {\n                returnArray = false;\n            }\n        }\n\n        const\n            me         = this,\n            { _items } = me,\n            result     = [];\n\n        for (let i = 0; i < toRemove.length; i++) {\n            const childToRemove = toRemove[i];\n\n            if (_items.includes(childToRemove)) {\n                _items.remove(childToRemove);\n                me.layout.removeChild(childToRemove);\n                result.push(childToRemove);\n                me.onChildRemove(childToRemove);\n            }\n        }\n\n        return returnArray ? result : result[0];\n    }\n\n    /**\n     * Removes all children from this Container.\n     * @returns {Core.widget.Widget[]} All the removed items.\n     */\n    removeAll() {\n        return this.remove(this.items);\n    }\n\n    /**\n     * Appends the passed widget / widgets or config(s) describing widgets to this Container.\n     *\n     * If the widgets specify a `weight`, they are inserted at the correct index compared to the existing items weights.\n     *\n     * @param {ContainerItemConfig|ContainerItemConfig[]|Core.widget.Widget|Core.widget.Widget[]} toAdd The child or children instances (or config objects) to add.\n     * @returns {Core.widget.Widget|Core.widget.Widget[]} All the added widgets. An array if multiple items\n     * were added, otherwise just the item added.\n     */\n    add(...toAdd) {\n        const\n            me     = this,\n            items = me.ensureItems(),\n            result = [];\n\n        let returnArray = true,\n            childToAdd, i, index;\n\n        if (toAdd.length === 1) {\n            if (isArray(toAdd[0])) {\n                toAdd = toAdd[0];\n            }\n            else {\n                returnArray = false;\n            }\n        }\n\n        for (i = 0; i < toAdd.length; i++) {\n            childToAdd = toAdd[i];\n\n            if (childToAdd.isWidget) {\n                childToAdd.parent = me;\n            }\n            else {\n                childToAdd = me.createWidget(childToAdd);\n            }\n\n            // Items with weight are inserted at correct index\n            if (childToAdd?.weight != null) {\n                // Cannot use cached items, weights might be unordered in set being added\n                index = ArrayHelper.findInsertionIndex(childToAdd, items.values, sortByWeight);\n                result.push(me.insert(childToAdd, index));\n            }\n            // Those without are appended\n            else if (childToAdd) {\n                if (!items.includes(childToAdd)) {\n                    items.add(childToAdd);\n                    me.onChildAdd(childToAdd);\n                    me.layout.appendChild(childToAdd);\n                    result.push(childToAdd);\n                }\n            }\n        }\n\n        return returnArray ? result : result[0];\n    }\n\n    ensureItems() {\n        const me = this;\n\n        me.getConfig('items');\n        me.getConfig('lazyItems');\n\n        // Force creation of our items Bag\n        if (!me._items) {\n            me.items = [];\n        }\n\n        return me._items;\n    }\n\n    /**\n     * Inserts the passed widget into this Container at the specified position.\n     * @param  {Core.widget.Widget} toAdd The child to insert.\n     * @param {Number|Core.widget.Widget} index The index to insert at or the existing child to insert before.\n     * @returns {Core.widget.Widget} The added widget.\n     */\n    insert(toAdd, index) {\n        const\n            me    = this,\n            items = me.ensureItems();\n\n        if (toAdd instanceof Widget) {\n            toAdd.parent = me;\n        }\n        else {\n            toAdd = me.createWidget(toAdd);\n        }\n\n        if (items.includes(index)) {\n            index = me.indexOfChild(index);\n        }\n\n        index = Math.min(index, items.count);\n\n        const newValues = items.values;\n        newValues.splice(index, 0, toAdd);\n        items.values = newValues;\n\n        // Register inserted item\n        me.onChildAdd(toAdd);\n\n        me.layout.insertChild(toAdd, index);\n\n        return toAdd;\n    }\n\n    indexOfChild(child) {\n        return this.items.indexOf(child);\n    }\n\n    changeLazyItems(lazyItems) {\n        this.items = lazyItems;\n        this.layout.renderChildren();\n    }\n\n    changeItems(items, oldItems) {\n        const\n            me       = this,\n            newItems = [],\n            result   = new Bag();\n\n        if (isArray(items)) {\n            me.processItemsArray(items, newItems);\n        }\n        else if (items) {\n            me.processItemsObject(items, me.namedItems, newItems);\n        }\n\n        // Allow child items to have a weight to establish their order\n        if (newItems.some(returnWeight)) {\n            newItems.sort(sortByWeight);\n        }\n\n        result.add(newItems);\n\n        // Remove previous child payload if any\n        if (oldItems) {\n            oldItems.forEach(w => {\n                me.remove(w);\n\n                // Destroy outgoing-only widgets which we created.\n                if (!result.includes(w) && w._createdBy === me) {\n                    w.destroy();\n                }\n            });\n        }\n\n        return result;\n    }\n\n    afterConstruct() {\n        const\n            { rtl }       = this,\n            { classList } = this.contentElement;\n\n        // Content element must get class.\n        // Panels and Toolbars use an inner element to arrange child items.\n        classList.toggle('b-rtl', rtl === true);\n        classList.toggle('b-ltr', rtl === false);\n    }\n\n    updateRtl(rtl) {\n        super.updateRtl(rtl);\n\n        const { contentElement } = this;\n\n        // contentElement may not exist at config time. The afterConstruct handles it in those cases.\n        if (contentElement) {\n            // Content element must get class.\n            // Panels and Toolbars use an inner element to arrange child items.\n            contentElement.classList.toggle('b-rtl', rtl === true);\n            contentElement.classList.toggle('b-ltr', rtl === false);\n        }\n    }\n\n    updateItems(items, oldItems) {\n        let index = 0;\n\n        items.forEach(item => {  // no \"index\" argument from Bag\n            this.onChildAdd(item);\n\n            // If this is *change* to items from actual old items, when the old items is not a placeholder inserted\n            // from very early items access\n            if (oldItems && !oldItems.temporary) {\n                this.layout.insertChild(item, index);\n            }\n\n            ++index;\n        });\n\n        this.initialItems = false;\n    }\n\n    updateHideWhenEmpty() {\n        this.syncChildCount(this.rendered);\n    }\n\n    /**\n     * A property, which, when *read*, returns an array of the child items of this container in rendered order.\n     *\n     * This property may also be *set* to change the child items of the container. Just as in the\n     * {@link #config-items initial items configuration}, the new value may either be an array of\n     * Widgets/Widget configs or an object.\n     *\n     * If specified as an Object, the property names are used as the child Widget's\n     * {@link Core.widget.Widget#config-ref ref} name, and the value is the child Widget/Widget config.\n     *\n     * When setting this, any items which are *only* in the outgoing child items which were created\n     * by this container from raw config objects are destroyed.\n     *\n     * Usage patterns:\n     *\n     * ```javascript\n     * myContainer.items = {\n     *     name : {\n     *         type  : 'textfield',\n     *         label : 'User name'\n     *     },\n     *     age : {\n     *         type  : 'numberfield',\n     *         label : 'User age'\n     *     }\n     * };\n     * ```\n     *\n     * or\n     *\n     * ```javascript\n     * myContainer.items = [{\n     *     ref   : 'name',\n     *     type  : 'textfield',\n     *     label : 'User name'\n     * },\n     *     ref   : 'age',\n     *     type  : 'numberfield',\n     *     label : 'User age'\n     * }];\n     * ```\n     * @property {Core.widget.Widget[]}\n     * @accepts {Core.widget.Widget[]|ContainerItemConfig[]|Object<String,ContainerItemConfig>}\n     */\n    get items() {\n        const me = this;\n\n        // If we are being asked for items, ingest lazyItems.\n        me.getConfig('lazyItems');\n\n        // The documented API for items is an Array.\n        // Internal code should access _items\n        if (!me._items) {\n            // Currently initializing items, flag set by the config system\n            if (me.initializingItems) {\n                // This is a created array. User may mutate it.\n                return [];\n            }\n            // Accessing items very early, not set up yet. Need a placeholder\n            me._items = new Bag();\n            me._items.temporary = true;\n        }\n\n        // This is the Collection's array. User may not mutate it.\n        return me._items.values;\n    }\n\n    processItemsArray(items, result) {\n        const len = items.length;\n\n        let i, item;\n\n        for (i = 0; i < len; i++) {\n            item = items[i];\n\n            if (item instanceof Widget) {\n                item.parent = this;\n                item.element.classList.remove(...Widget.outerCls);\n            }\n            else {\n                item = this.createWidget(item);\n            }\n\n            // If the widget creation function returns null, nothing to add\n            if (item) {\n                if (item.ref || item.id) {\n                    // Add early to widgetMap, to allow using 'up.widgetMap.ref' in later siblings configs\n                    this.addDescendant(item);\n                }\n\n                result.push(item);\n            }\n        }\n    }\n\n    processItemsObject(items, namedItems, result) {\n        let item, ref;\n\n        for (ref in items) {\n            item = items[ref];\n\n            // It might come in as itemRef : false\n            if (item) {\n                // If this class or instance has a \"namedItems\" object\n                // named by this ref, then use it as the basis for the item\n                if (namedItems && ref in namedItems) {\n                    item = typeof item === 'object' ? ObjectHelper.merge(ObjectHelper.clone(namedItems[ref]), item) : namedItems[ref];\n                }\n\n                // Allow namedItems to be overridden with itemKey : false to indicate unavailability of an item\n                if (item) {\n                    if (item instanceof Widget) {\n                        item.parent = this;\n                    }\n                    else {\n                        //<debug>\n                        if (item.ref && item.ref !== ref) {\n                            throw new Error(`Named child item ref property ${item.ref} doesn't match the property name it was from ${ref}`);\n                        }\n                        //</debug>\n                        if (item instanceof Object) {\n                            item.ref = ref;\n                        }\n                        item = this.createWidget(item);\n                    }\n\n                    // If the widget creation function returns null, nothing to add\n                    if (item) {\n                        item.ref = ref;\n\n                        // Add early to widgetMap, to allow later siblings to use 'up.'\n                        this.addDescendant(item);\n\n                        result.push(item);\n                    }\n                }\n            }\n        }\n    }\n\n    onChildAdd(item) {\n        // Don't just assign the property across since the default value is undefined\n        // which means false. Only set to true if we are readOnly\n        if (item.innerItem && this.readOnly && !item.ignoreParentReadOnly) {\n            item.readOnly = true;\n        }\n\n        this.onChildAddLayout(item);\n\n        if (item.ref || item.id) {\n            for (let current = this; current; current = current.parent) {\n                // Silently add the descendant to the ancestor's widgetMap without kicking off\n                // the ancestor's items processing by directly accessing the widgetMap property.\n                current.addDescendant(item);\n            }\n        }\n\n        this.syncChildCount(true);\n    }\n\n    onChildAddLayout(item) {\n        // Set innerItem=false on an item that should not be managed by the layout...\n        if (item.innerItem) {\n            // Keep layout informed of child item state\n            this.layout.onChildAdd(item);\n        }\n    }\n\n    onChildHide(hidden) {\n        super.onChildHide(hidden);\n\n        // Only sync when it's a direct child, not just the \"owner\" link of a floater\n        if (this._items?.includes(hidden)) {\n            this.syncChildCount(true);\n        }\n    }\n\n    onChildShow(shown) {\n        super.onChildShow(shown);\n\n        // Only sync when it's a direct child, not just the \"owner\" link of a floater\n        if (this._items?.includes(shown)) {\n            this.syncChildCount(true);\n        }\n    }\n\n    syncChildCount(enforceHideWhenEmpty) {\n        // If called during configuration, the element may not be available because\n        // some non-item widgets (eg, Tools) instantiate and declare themselves through\n        // onChildAdd before the element is set.\n        // But also there may be no items because of     lazyItems.\n        // So do the initial sync at render time.\n        if (!this.isConfiguring) {\n            const\n                me                         = this,\n                {\n                    // This must be our direct child item payload, not all items owned by this Container.\n                    // It's used to sync the b-first-visible-child/b-last-visible-child class presence.\n                    items,\n                    hasItems\n                }                          = me,\n                visibleItems               = items.filter(isNotHidden),\n                { length : visibleLength } = visibleItems;\n\n            /**\n             * @member {Number} visibleChildCount The number of *visible* child items shown in this Container.\n             * @readonly\n             * @category Widget hierarchy\n             */\n            me.visibleChildCount = visibleLength;\n\n            // Do not toggle visibility on render - we're just here to sync class names.\n            // hiding and showing must only depend upon children being dynamically\n            // hidden or shown.\n            if (me.hideWhenEmpty && enforceHideWhenEmpty) {\n                const shouldHide = Boolean(!visibleLength);\n\n                if (Boolean(me._hidden) !== shouldHide) {\n                    me.hidden = shouldHide;\n                }\n            }\n\n            items.forEach(childItem => childItem.element.classList.remove('b-last-visible-child', 'b-first-visible-child'));\n\n            if (visibleLength) {\n                visibleItems[0].element.classList.add('b-first-visible-child');\n                visibleItems[visibleLength - 1].element.classList.add('b-last-visible-child');\n            }\n\n            // Keep hasItems property up to date. It's used by the isFocusable getter.\n            // Note that because this is to do with focusability, this includes all\n            // possible items, not just contained items.\n            me.hasItems = Boolean(me.childItems.length);\n\n            me.contentElement.classList[visibleLength ? 'remove' : 'add']('b-no-visible-children');\n\n            // Reevaluate whether we should have the b-text-content class\n            if (!me.isComposable) {\n                me.updateTextContent(me._textContent);\n            }\n            else if (hasItems !== me.hasItems) {\n                me.recompose();\n            }\n        }\n    }\n\n    syncFlexDirection() {\n        const\n            me        = this,\n            { contentElement, flexColCls, flexRowCls } = me,\n            classList = new DomClassList(contentElement.className),\n            styles    = DomHelper.getStyleValue(contentElement, stylesToCheck);\n\n        // We might not be flexing at all anymore.\n        classList[flexRowCls] = classList[flexColCls] = 0;\n\n        // If we are, add a flag class to indicate direction\n        if (styles.display === 'flex') {\n            classList[styles['flex-direction'] === 'row' ? flexRowCls : flexColCls] = 1;\n        }\n\n        // Will only mutate the DOM if there are changes to apply.\n        // We don't want to cause an infinite loop through our MutationObserver.\n        DomHelper.syncClassList(contentElement, classList);\n    }\n\n    addDescendant(item) {\n        const\n            ref       = item.ref || item.id,\n            widgetMap = this._widgetMap || (this._widgetMap = {});\n\n        if (!widgetMap[ref]) {\n            widgetMap[ref] = item;\n        }\n    }\n\n    onChildRemove(item) {\n        const\n            me  = this,\n            ref = item.ref || item.id;\n\n        if (ref) {\n            for (let current = me; current; current = current.parent) {\n                if (current.widgetMap[ref] === item) {\n                    delete current.widgetMap[ref];\n                }\n            }\n        }\n\n        // Keep layout informed of child item state\n        me.layout.onChildRemove(item);\n\n        me.syncChildCount(true);\n    }\n\n    /**\n     * An object which contains a map of descendant widgets keyed by their {@link Core.widget.Widget#config-ref}.\n     * All descendant widgets will be available in the `widgetMap`.\n     * @property {Object<String,Core.widget.Widget>}\n     * @readonly\n     * @category Widget hierarchy\n     */\n    get widgetMap() {\n        if (!this._widgetMap) {\n            this._widgetMap = {};\n        }\n\n        // Force evaluation of the configured items by the getter\n        // so that configs are promoted to widgets and the widgetMap\n        // is created, and if there are widgets, populated.\n        if (!this.initializingItems) {\n            this.getConfig('items');\n        }\n\n        return this._widgetMap;\n    }\n\n    changeRecord(record) {\n        // The config system's non-change vetoing must be bypassed.\n        // The record might have changed, or the destination fields may be out of sync.\n        this._record = record == null ? emptyObject : null;\n\n        return record;\n    }\n\n    updateRecord(record) {\n        const me = this;\n\n        me.recordUpdateDetacher?.();\n\n        /**\n         * Fired before this container will load record values into its child fields. This is useful if you\n         * want to modify the UI before data is loaded (e.g. set some input field to be readonly)\n         * @event beforeSetRecord\n         * @param {Core.widget.Container} source The container\n         * @param {Core.data.Model} record The record\n         */\n        me.trigger('beforeSetRecord', { record });\n\n        me.setValues(record, {\n            onlyName  : true,\n            highlight : Boolean(me.$highlight)\n        });\n\n        if (me.autoUpdateFields && record?.firstStore) {\n            me.recordUpdateDetacher = record.firstStore.ion({\n                update  : me.onRecordUpdated,\n                thisObj : me\n            });\n        }\n    }\n\n    setRecord(record, highlightChanges) {\n        this.$highlight = highlightChanges;\n        this.record     = record;\n        this.$highlight = false;\n    }\n\n    onRecordUpdated({ record }) {\n        if (record === this.record) {\n            this.setValues(this.record, true, true);\n        }\n    }\n\n    /**\n     * A function called by descendant widgets after they trigger their 'change' event, in reaction to field changes.\n     * By default implements the functionality for the `autoUpdateRecord` config.\n     *\n     * @param {Object} params Normally the event params used when triggering the 'change' event\n     * @internal\n     */\n    onFieldChange({ source, userAction }) {\n        // When configured with `autoUpdateRecord`, changes from descendant fields/widgets are applied to the loaded\n        // record using the fields `name`. Only changes from valid fields will be applied\n        if (this.autoUpdateRecord && userAction) {\n            const\n                { record }                      = this,\n                { name, isValid = true, value } = source;\n\n            if (record && name && isValid) {\n                record[name] = value;\n            }\n        }\n    }\n\n    getValues(filterFn) {\n        const values = {};\n\n        this.eachWidget((widget, control) => {\n            // Do not drill down when reaching a container that isolates its fields\n            if (widget.isolateFields) {\n                control.down = false;\n            }\n            else if (('name' in widget) && (!filterFn || filterFn(widget))) {\n                values[widget.name] = widget.value;\n            }\n        }, true);\n\n        return values;\n    }\n\n    get hasNoChildren() {\n        // If we have *uningested* lazyItems, use them to find our items length.\n        // In that case we must not cause ingestion of the lazyItems by referencing this.items.\n        // If we have items, then only those that are visible have any bearing.\n        // Popup also has to consult this property to decide on its CSS classes.\n        const\n            me                   = this,\n            { items, lazyItems } = me.initialConfig,\n            itemsArray           = items && (isArray(items) ? items : ObjectHelper.values(items)),\n            lazyItemsArray       = lazyItems && (isArray(lazyItems) ? lazyItems : ObjectHelper.values(lazyItems)),\n            // avoid triggering items initialization\n            whichItems           = me.isConfiguring ? lazyItemsArray || itemsArray : me.items;\n\n        return !whichItems?.filter(isNotHidden).length;\n    }\n\n    afterRecompose() {\n        super.afterRecompose();\n        this.realign();\n    }\n\n    updateTextContent(textContent) {\n        const me = this;\n\n        // Add the text content class if we have no visible immediate item children.\n        if (!me.isComposable) {\n            const\n                needsClass    = Boolean(textContent && me.hasNoChildren),\n                { classList } = me.contentElement,\n                changed       = needsClass !== classList.contains('b-text-content');\n\n            // Depending on CSS settings around how this widget handles text content and widthing\n            // we *may* have to realign. Realign only goes ahead if we're visible and floating.\n            if (changed) {\n                classList[needsClass ? 'add' : 'remove']('b-text-content');\n                if (me.rendered) {\n                    me.realign();\n                }\n            }\n        }\n    }\n\n    updateLayoutStyle(layoutStyle) {\n        DomHelper.applyStyle(this.contentElement, layoutStyle);\n    }\n\n    updateElement(element) {\n        super.updateElement(...arguments);\n\n        if (element) {\n            const\n                { classList }    = this.contentElement,\n                { containerCls } = this.layout;\n\n            // Ensure contentElement gets its full complement of class names upon element creation\n            classList.add('b-content-element');\n\n            if (containerCls) {\n                classList.add(containerCls);\n            }\n        }\n    }\n\n    onPaint() {\n        super.onPaint?.(...arguments);\n\n        // Bring the lazy config into existence now that we have a layout.\n        this.getConfig('contentElMutationObserver');\n    }\n\n    changeContentElMutationObserver(contentElMutationObserver, oldContentElMutationObserver) {\n        if (oldContentElMutationObserver) {\n            // Clear the queue. Any remaining notifications will be undeliverable.\n            oldContentElMutationObserver.takeRecords();\n            oldContentElMutationObserver.disconnect();\n        }\n\n        // We need to monitor our contentElement for attribute changes.\n        // Changes to the inline style, or the classList/className will trigger this.\n        // At that point we can sync our layout flag classes.\n        if (contentElMutationObserver) {\n            // NOTE: Do not hoist the vars, that will pull things in during destruction\n            const\n                me = this,\n                {\n                    element,\n                    contentElement\n                }  = me;\n\n            contentElMutationObserver = new MutationObserver(mutations => me.onContentElMutation(mutations));\n            contentElMutationObserver.observe(contentElement, { attributes : true });\n\n            // If our contentElement is an inner element (eg Panel, Toolbar)\n            // then styling might apply from classes on the outer element\n            // so monitor that too.\n            if (contentElement !== element) {\n                contentElMutationObserver.observe(element, { attributes : true });\n            }\n            me.syncFlexDirection();\n        }\n\n        return contentElMutationObserver;\n    }\n\n    onContentElMutation() {\n        // We can only do it if we are visible, otherwise the computed style won't work\n        // and the classes will be removed. Doesn't need doing for card and fit layouts.\n        if (boxLayouts[this.layout.type] && this.isVisible) {\n            this.syncFlexDirection();\n        }\n    }\n\n    changeLayout(config, existingLayout) {\n        return Layout.reconfigure(existingLayout, config, {\n            owner    : this,\n            defaults : {\n                owner : this\n            }\n        });\n    }\n\n    // Items to iterate over\n    get childItems() {\n        return this.items;\n    }\n\n    /**\n     * Returns a directly contained widget by id\n     * @param {String} id The widget id\n     * @returns {Core.widget.Widget}\n     */\n    getWidgetById(id) {\n        return this.widgetMap[id];\n    }\n\n    /**\n     * This function is called prior to creating widgets, override it in subclasses to allow containers to modify the\n     * configuration of each widget. When adding a widget to a container hierarchy each parent containers\n     * `processWidgetConfig` will be called. Returning false from the function prevents the widget from being added at\n     * all.\n     */\n    processWidgetConfig(widget) {\n\n    }\n\n    /**\n     * This method combines container {@link #config-defaults}\n     * @param {String|ContainerItemConfig} widgetConfig\n     * @param {String|Function} [type] The type of widget described by `widgetConfig`.\n     * @returns {ContainerItemConfig}\n     * @internal\n     */\n    setupWidgetConfig(widgetConfig, type) {\n        const me = this;\n\n        // A string becomes the defaultType (see below) with the html set to the string.\n        if (typeof widgetConfig === 'string') {\n            widgetConfig = {\n                html : widgetConfig\n            };\n        }\n        // An element is encapsulated by a Widget\n        else if (widgetConfig.nodeType === Element.ELEMENT_NODE) {\n            widgetConfig = {\n                element : widgetConfig,\n                id      : widgetConfig.id\n            };\n        }\n\n        if (typeof type === 'string' || !type && (type /* assignment */= widgetConfig.type)) {\n            type = Widget.resolveType(type, true);\n        }\n\n        // widgetConfig = ObjectHelper.assign({}, me.defaults, widgetConfig, { parent : me });\n        widgetConfig = (type || Widget).mergeConfigs(me.defaults, widgetConfig, { parent : me });\n\n        for (let ancestor = widgetConfig.parent; ancestor; ancestor = ancestor.parent) {\n            if (ancestor.processWidgetConfig(widgetConfig) === false) {\n                return null;\n            }\n        }\n\n        if (me.trigger('beforeWidgetCreate', { widgetConfig }) === false) {\n            return null;\n        }\n\n        return widgetConfig;\n    }\n\n    /**\n     * This function converts a Widget config object into a Widget.\n     * @param {ContainerItemConfig} widget A Widget config object.\n     * @internal\n     */\n    createWidget(widget) {\n        const result = Widget.create(this.setupWidgetConfig(widget), this.defaultType);\n\n        // If we created a widget from a config object, then upon items replacement\n        // we must destroy outgoing widgets.\n        result && (result._createdBy = this);\n        return result;\n    }\n\n    // Reapply defaults, not used during config\n    updateDefaults(defaults, oldDefaults) {\n        if (!this.isConfiguring && defaults) {\n            const entries = Object.entries(defaults);\n\n            this.eachWidget(widget => {\n                entries.forEach(([prop, value]) => {\n                    // Apply defaults only if current value matches the old default\n                    if (!oldDefaults || widget[prop] === oldDefaults[prop]) {\n                        widget[prop] = value;\n                    }\n                });\n            }, false);\n        }\n    }\n\n    render() {\n        // Pull in lazyItems at last second\n        this.getConfig('lazyItems');\n\n        this.layout.renderChildren();\n\n        // If called during configuration, the element may not have been available because\n        // some non-item widgets (eg, Tools) instantiate and declare themselves through\n        // onChildAdd before the element is set.\n        // But also there may have been no items because of lazyItems.\n        // So do the initial sync at render time.\n        this.syncChildCount();\n\n        super.render(...arguments);\n    }\n\n    get focusElement() {\n        // Find first focusable descendant widget that is not our close or collapse tool.\n        const firstFocusable = this.query(this.defaultFocus || (w => w.isFocusable && w.ref !== 'close' && !w.ref?.endsWith('collapse')));\n\n        if (firstFocusable) {\n            return firstFocusable.focusElement;\n        }\n        return super.focusElement;\n    }\n\n    doDestroy() {\n        this._items?.forEach(widget => widget.destroy?.());\n        this.layout.destroy();\n        super.doDestroy();\n    }\n\n    /**\n     * Returns `true` if all contained fields are valid, otherwise `false`\n     * @property {Boolean}\n     */\n    get isValid() {\n        let valid = true;\n\n        this.eachWidget(widget => {\n            // Touch each widget so that they all update their invalid state. This is important for required fields\n            // since they don't initially complain if they start as empty.\n            if (widget.isVisible && 'isValid' in widget && !widget.isValid) {\n                valid = false;\n            }\n        }, true);\n\n        return valid;\n    }\n\n    /**\n     * Retrieves or sets all values from/to contained widgets.\n     *\n     * The property set or read from a contained widget is its {@link Core.widget.Widget#config-defaultBindProperty}.\n     *\n     * This defaults to the `value` for fields.\n     *\n     * You may add child widgets which may accept and yield a value to/from another property,\n     * such as a `Button` having its {@link Core.widget.Button#config-href} set.\n     *\n     * Accepts and returns a map, using {@link Core.widget.Field#config-name},\n     * {@link Core.widget.Widget#config-ref} or {@link Core.widget.Widget#config-id} (in that order) as keys.\n     *\n     * ```javascript\n     * const container = new Container({\n     *     appendTo : document.body,\n     *     items    : {\n     *         firstName : {\n     *             type : 'textfield\n     *         },\n     *         surName : {\n     *             type : 'textfield\n     *         }\n     *         saveButton : {\n     *             type                : 'button',\n     *             text                : 'Save',\n     *             defaultBindProperty : 'href'\n     *             href                : '#'\n     *         }\n     *     }\n     * });\n     *\n     * container.values = {\n     *     firstName  : 'Clark',\n     *     surname    : 'Kent',\n     *     saveButton : '#save-route'\n     * };\n     * ```\n     *\n     * @property {Object<String,Object>}\n     */\n    get values() {\n        const values = {};\n\n        this.gatherValue(values);\n\n        return values;\n    }\n\n    set values(values) {\n        // if the container itself has a value allow it to be grabbed as well\n        this.assignValue(values);\n    }\n\n    /**\n     * Returns `true` if currently setting values. Allows fields change highlighting to distinguishing between initially\n     * setting values and later on changing values.\n     * @property {Boolean}\n     */\n    get isSettingValues() {\n        return Boolean(this.assigningValues);\n    }\n\n    get assigningValues() {\n        // Fields query their parent, pass the question up in case containers are nested\n        return this._assigningValues || this.parent?.assigningValues;\n    }\n\n    set assigningValues(v) {\n        this._assigningValues = v;\n    }\n\n    assignValue(values, options) {\n        // use default check for a value config from super...\n        super.assignValue(values, options);\n\n        if (!this.isolateFields) {\n            this.setValues(values, options);\n        }\n    }\n\n    gatherValue(values) {\n        super.gatherValue(values);\n\n        if (!this.isolateFields) {\n            this.gatherValues(values);\n        }\n    }\n\n    setValues(values, options) {\n        options = options || this.assignValueDefaults;\n\n        // Flag checked by Field to determine if it should highlight change or not\n        this.assigningValues = options;\n\n        this.eachWidget(widget => widget.assignValue(values, options), false);\n\n        this.assigningValues = false;\n\n    }\n}\n\n// Register this widget type with its Factory\nContainer.initClass();\n","import Base from '../Base.js';\nimport DomHelper from '../helper/DomHelper.js';\nimport EventHelper from '../helper/EventHelper.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\nimport Promissory from '../helper/util/Promissory.js';\n\n/**\n * @module Core/util/Animator\n */\n\nconst\n    { assign } = ObjectHelper,\n    now = () => performance.now(),\n    nostart = { start : false },\n    unitRe = /^[.\\d]+([^\\d].*)?$/,\n    getTransitions = element => {\n        const $bryntum = element.$bryntum || (element.$bryntum = {});\n\n        return $bryntum.transitions || ($bryntum.transitions = Object.create(null));\n    },\n    milliseconds = (duration, unit) => {\n        if (typeof duration === 'string') {\n            unit = unitRe.exec(duration)?.[1];\n            duration = parseFloat(duration);\n        }\n\n        // a number could be sec or ms so guess sec if duration is small\n        return duration && (duration * ((unit === 's' || !unit && duration < 10) ? 1000 : 1));\n    },\n    syncTransitions = element => {\n        const all = ObjectHelper.values(getTransitions(element)).filter(a => a.completed == null).map(a => a.toString());\n\n        element.style.transition = all.join(', ');\n    },\n    Anim = Target => class Anim extends Target {\n        static get prototypeProperties() {\n            return {\n                _delay    : null,\n                _duration : null,\n                _retain   : null,\n                _timing   : null,\n                _unit     : null,\n                owner     : null,\n                reverting : null\n            };\n        }\n\n        constructor(...args) {\n            super(...args);\n\n            this.id = ++idSeed;\n        }\n\n        start() {\n            this.startTime = now();\n        }\n\n        get delay() {\n            return milliseconds(this._delay ?? this.owner?.delay ?? 0, this.unit);\n        }\n\n        set delay(v) {\n            this._delay = v;\n        }\n\n        get duration() {\n            const { owner, unit } = this;\n\n            return milliseconds(this._duration ?? (owner ? owner.duration : Animator.defaultDuration), unit);\n        }\n\n        set duration(v) {\n            this._duration = v;\n        }\n\n        get elapsed() {\n            return now() - this.startTime;\n        }\n\n        get remaining() {\n            return this.duration - this.elapsed;\n        }\n\n        get retain() {\n            return this._retain ?? this.owner?.retain;\n        }\n\n        set retain(v) {\n            this._retain = v;\n        }\n\n        get timing() {\n            return this._timing ?? this.owner?.timing;\n        }\n\n        set timing(v) {\n            this._timing = v;\n        }\n\n        get unit() {\n            return this._unit ?? this.owner?.unit;\n        }\n\n        set unit(v) {\n            this._unit = v;\n        }\n    };\n\nlet idSeed = 0;\n\n/**\n * These objects are passed as values in the config object of an `Animator`. The `property` name is the key in the\n * config object.\n *\n * For example:\n * ```javascript\n *  const anim = Animator.run({\n *      element,\n *      opacity : {\n *          // AnimatorTransition properties\n *      }\n *  });\n * ```\n * The {@link Core.util.Animator#config-items anim.items} array will contain a single `AnimatorTransition` instance.\n *\n * @typedef {Object} AnimatorTransition\n * @property {Number|String} property The name of the style property from the key in the `Animator` config object (in\n * the above example, this will be `'opacity'`).\n * @property {Boolean} completed This readonly property is set to `true` when the transition completes.\n * @property {Number|String} [delay=0] The delay before starting the transition. Numbers less than 10 are assumed to be\n * seconds (instead of milliseconds) unless the `unit` property is specified.\n * @property {Number|String} [duration=200] The duration of the transition. Numbers less than 10 are assumed to be\n * seconds (instead of milliseconds) unless the `unit` property is specified.\n * @property {Number|String} [from] The value from which to start the transition.\n * @property {Boolean} [retain] Set to `true` to retain the style property value after the transition. This defaults to\n * `true` if a {@link Core.util.Animator#config-finalize} function is not specified.\n * @property {String} [timing='ease-in-out'] The transition\n * [timing function](https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function).\n * @property {Number|String} to The final value to which the transition will animate.\n * @property {'s'|'ms'} [unit] The duration/delay unit (either `'s'` or `'ms'`).\n * @internal\n */\n\nclass AnimatorTransition extends Base.mixin(Anim) {\n    static get $name() {\n        return 'AnimatorTransition';\n    }\n\n    static get prototypeProperties() {\n        return {\n            element  : null,\n            property : null,\n            from     : null,\n            to       : null,\n\n            completed  : null,\n            promissory : null,\n            reverting  : null\n        };\n    }\n\n    afterConstruct() {\n        super.afterConstruct();\n\n        const\n            me = this,\n            { element, transitions } = me;\n\n        let { property } = me;\n\n        [property, me.to] = DomHelper.unitize(property, me.to);\n        me.from = DomHelper.unitize(property, me.from)[1];\n        me.promissory = new Promissory();\n        me.property = property;\n\n        const was = transitions[property];\n        transitions[property] = me;\n\n        let { from } = me;\n\n        if (was) {\n            // Remember where we come from. If there was an animation running, its \"to\" value is where we would have\n            // been had it completed.\n            me.from = was.to;\n            from = null;\n            was.destroy();\n        }\n\n        if (from === null) {\n            from = me.getCurrentStyleValue();\n\n            if (!was) {\n                me.from = from;\n            }\n        }\n\n        // Set transitioning style's initial value\n        element.style[property] = from;\n        // then read the style to ensure transition will animate\n        me.getCurrentStyleValue();\n    }\n\n    doDestroy() {\n        const me = this;\n\n        me.finish(false);\n\n        if (me.completed && !me.retain) {\n            me.clearStyle();\n        }\n\n        super.doDestroy();\n    }\n\n    get promise() {\n        return this.promissory?.promise;\n    }\n\n    get transitions() {\n        return getTransitions(this.element);\n    }\n\n    clearStyle() {\n        this.setStyle('');\n    }\n\n    finish(complete) {\n        const\n            me = this,\n            { transitions, promissory, property } = me;\n\n        if (promissory) {\n            me.completed = complete;\n            me.promissory = null;\n\n            promissory.resolve(complete);\n\n            if (transitions[property] === me) {\n                delete transitions[property];\n\n                if (!complete) {\n                    // if we are the current transition, this destroy is a cancellation of the animation (not a\n                    // revert), so remove our transition and clear the style to reset the element.\n                    syncTransitions(me.element);\n                    me.clearStyle();\n                }\n            }\n            else {\n                me.completed = false;  // this can most likely never happen, but better to be safe\n            }\n        }\n    }\n\n    getCurrentStyleValue() {\n        return DomHelper.getStyleValue(this.element, this.property);\n    }\n\n    revert() {\n        const { duration, elapsed, element, from, property, _retain : retain, _timing : timing } = this;\n\n        return new AnimatorTransition({\n            element,\n            property,\n            retain,\n            timing,\n            duration  : Math.round(Math.min(duration, elapsed)),\n            reverting : this,\n            to        : from,\n            unit      : 'ms'\n        });\n    }\n\n    setStyle(value) {\n        this.element.style[this.property] = value;\n    }\n\n    start() {\n        const\n            me = this,\n            { delay, duration, element, property } = me;\n\n        EventHelper.onTransitionEnd({\n            element,\n            property,\n            duration : delay + duration + 20,\n            thisObj  : me.owner,\n            handler  : () => me.finish?.(true)  // finish() is gone if destroyed\n        });\n\n        super.start();\n\n        me.setStyle(me.to);\n    }\n\n    toString() {\n        const { delay, duration, property, timing } = this;\n\n        return `${property} ${duration}ms ${timing || 'ease-in-out'}${delay ? ` ${delay}ms` : ''}`;\n    }\n}\n\nAnimatorTransition.initClass();\n\n/**\n * Manages one or more {@link AnimatorTransition style transitions} or other `Animator` instances. Unlike typical\n * config objects, the config object for this class is a mixture of config properties and style names that define\n * {@link AnimatorTransition style transitions}.\n *\n * For example:\n * ```javascript\n *  const anim = Animator.run({\n *      element,\n *      duration : 500,\n *\n *      // style transitions:\n *      opacity : 0\n *  });\n *\n *  await anim.done();\n * ```\n *\n * The static {@link #function-run-static} method is typically used (as above) instead of the `new Animator()` style for\n * brevity (since a manually created `Animator` must also be manually {@link #function-start started}).\n *\n * An `Animator` can be {@link #function-done awaited} and will resolve once all of its transitions and/or child\n * animations complete or are aborted (via `destroy()`).\n *\n * ## Compound Transitions\n * The following custom transitions can present in the `Animator` config object as if they were normal style transitions:\n *\n * - {@link #function-puff-static}\n *\n * For example:\n * ```javascript\n *  const anim = Animator.run({\n *      element,\n *      marginLeft : -200,\n *      puff       : true   // true for default scale, a number, or config object\n *  });\n * ```\n * @extends Core/Base\n * @internal\n */\nexport default class Animator extends Base.mixin(Anim) {\n    static get $name() {\n        return 'Animator';\n    }\n\n    static get prototypeProperties() {\n        return {\n            /**\n             * The optional delay before starting the animation. Numbers less than 10 are assumed to be seconds\n             * (instead of milliseconds) unless the `unit` property is specified.\n             * @config {Number|String} delay\n             */\n\n            /**\n             * The duration of the animation. Numbers less than 10 are assumed to be seconds (instead of milliseconds)\n             * unless the `unit` property is specified.\n             * @config {Number|String} duration\n             * @default\n             */\n\n            /**\n             * The element to animate.\n             * @config {HTMLElement} element\n             */\n            element : null,\n\n            /**\n             * A callback function called when the animation completes. This is called after restoring styles to the\n             * original values (based on {@link #config-retain}). When this function is provided, `retain` defaults to\n             * `false`. By implementing this function, a CSS class can be applied to the {@link #config-element} to\n             * give the proper style, while the inline styles are removed (e.g., a hide animation based on opacity).\n             *\n             * For example:\n             * ```javascript\n             *  const anim = Animator.run({\n             *      element,\n             *      duration : 500,\n             *      opacity  : 0,\n             *\n             *      finalize() {\n             *          element.classList.add('hidden');\n             *      }\n             *  });\n             *\n             *  await anim.done();\n             * ```\n             * @config {Function} finalize\n             */\n            finalize : null,\n\n            /**\n             * A callback function called when the animation completes. This is called prior to restoring styles to the\n             * original values (based on {@link #config-retain}).\n             * @config {Function} prefinalize\n             * @internal\n             */\n            prefinalize : null,\n\n            /**\n             * Set to `true` to retain the style property values after the animation. This defaults to `true` if a\n             * {@link #config-finalize} function is not specified, and `false` otherwise. When a `finalize` function\n             * is provided, it is typically to apply a CSS class to achieve the desired styling so that inline styles\n             * can be removed.\n             * @config {Boolean} retain\n             */\n\n            /**\n             * The [timing function](https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function) for\n             * the animation.\n             * @config {String} timing\n             * @default 'ease-in-out'\n             */\n\n            /**\n             * The duration/delay unit (either `'s'` or `'ms'`).\n             * @config {'s'|'ms'} unit\n             */\n\n            /**\n             * This readonly property is set to `true` when the animation completes or `false` if the animation is\n             * aborted (by calling the `destroy()` method).\n             * @member {Boolean} completed\n             * @readonly\n             */\n            completed : null,\n\n            /**\n             * An array containing a mixture of `Animator` and/or `AnimatorTransition` objects, depending on what was\n             * specified at construction time.\n             * @member {Core.util.Animator[]|AnimatorTransition[]} items\n             * @readonly\n             */\n            /**\n             * When passed at construction time, `items` can be an array of other `Animator` config objects. This can be\n             * used to animate multiple elements and wait for this instance to be {@link #function-done done}.\n             * @config {Core.util.Animator[]} items\n             */\n            items : null\n        };\n    }\n\n    static register(name, fn) {\n        if (ObjectHelper.isObject(name)) {\n            ObjectHelper.entries(name).forEach(entry => Animator.register(...entry));\n            return;\n        }\n\n        Animator.fx[name] = fn;\n\n        Animator[name] = options => {\n            if (DomHelper.isElement(options)) {\n                options = {\n                    element : options,\n                    [name]  : {}\n                };\n            }\n            else {\n                options = {\n                    element : options.element,\n                    [name]  : options\n                };\n\n                delete options[name].element;\n            }\n\n            return Animator.run(options);\n        };\n    }\n\n    /**\n     * A short-hand way to create an `Animator` instance and call its {@link #function-start} method.\n     *\n     * ```javascript\n     *  const anim = Animator.run({\n     *      element,\n     *      duration : 500,\n     *\n     *      // style transitions:\n     *      opacity : 0\n     *  });\n     *\n     *  await anim.done();\n     * ```\n     * @param {Core.util.Animator|AnimatorConfig} options A config object for an `Animator` instance.\n     * @returns {Core.util.Animator}\n     */\n    static run(options) {\n        return (new Animator(options)).start();\n    }\n\n    constructor(options) {\n        super(null);  // our options is not like a normal config object since is has styles mixed in w/configs\n\n        const\n            me = this,\n            items = [],\n            properties = {};\n\n        let anim, fx, key, t;\n\n        if (Array.isArray(options)) {\n            me.items = options;\n        }\n        else {\n            for (key in options) {\n                (Animator.specialPropsRe.test(key) ? me : properties)[key] = options[key];\n            }\n        }\n\n        ObjectHelper.keys(properties).forEach(property => {\n            t = properties[property];\n\n            // ignore values of null, undefined, false and NaN (NaN !== NaN)\n            if (t != null && t !== false && t === t) {  // eslint-disable-line no-self-compare\n                if (!(fx = Animator.fx[property])) {\n                    t = assign(me.defaults, (typeof t === 'object') ? t : { to : t });\n                    t.owner = me;\n                    t.property = property;\n\n                    anim = new AnimatorTransition(t);\n                }\n                else {\n                    t = assign(me.defaults, fx(t, me, property));\n                    t.owner = me;\n\n                    anim = new Animator(t);\n                }\n\n                items.push(anim);\n            }\n        });\n\n        // me.items can be set if options was an array or if options.items was passed.\n        me.items?.forEach(item => {\n            if (ObjectHelper.isInstantiated(item)) {\n                item.owner = me;\n            }\n            else {\n                item = assign(me.defaults, item);\n                item.owner = me;\n\n                item = new Animator(item);\n            }\n\n            items.push(item);\n        });\n\n        me.items = items;\n        me.promise = ((items.length === 1) ? items[0].promise : Promise.all(items.map(it => it.promise))).then(res => {\n            me.finish?.(res);\n\n            return me.completed || false;\n        });\n    }\n\n    doDestroy() {\n        this.items.forEach(a => a.destroy());\n\n        super.doDestroy();\n    }\n\n    get defaults() {\n        return {\n            element : this.element\n        };\n    }\n\n    get retain() {\n        const { _retain, finalize, owner } = this;\n\n        return _retain ?? (finalize ? false : (owner ? owner.retain : true));\n    }\n\n    set retain(v) {\n        super.retain = v;\n    }\n\n    /**\n     * Returns a `Promise` that resolves to a `Boolean` when this animation completes. The resolved value is that of\n     * this instance's {@link #property-completed} property.\n     * @async\n     */\n    done() {\n        return this.promise;\n    }\n\n    finish(complete) {\n        const\n            me = this,\n            { items } = me;\n\n        syncTransitions(me.element);\n\n        me.completed = (typeof complete === 'boolean') ? complete : !complete.some(a => !a);\n\n        me.prefinalize?.(me.completed, me);\n\n        while (items.length) {\n            items.pop().destroy();\n        }\n\n        me.finalize?.(me.completed, me);\n    }\n\n    revert(options) {\n        const\n            me = this,\n            { reverting } = me,\n            start = !options || (options.start ?? true);\n\n        let anim = me.defaults;\n\n        if (reverting) {\n            // If this anim is a revert of some previous anim and that anim had a finalizer, then reverting us should\n            // (by default) carry forward the original finalizer:\n            if (reverting.finalize) {\n                anim.finalize = reverting.finalize;\n            }\n\n            if (reverting.prefinalize) {\n                anim.prefinalize = reverting.prefinalize;\n            }\n\n            anim.retain = reverting._retain;\n        }\n\n        anim = assign(anim, options, {\n            items     : me.items.map(it => it.revert(nostart)),\n            reverting : me\n        });\n\n        anim = new Animator(anim);\n\n        start && anim.start();\n\n        return anim;\n    }\n\n    /**\n     * Starts this animation and returns a reference to itself. This method is called automatically by the\n     * {@link #function-run-static} method.\n     * @returns {Core.util.Animator}\n     */\n    start() {\n        const { element, items } = this;\n\n        super.start();\n\n        if (items.length) {\n            syncTransitions(element);\n\n            items.forEach(a => a.start());\n        }\n\n        return this;\n    }\n}\n\nAnimator.initClass().Transition = AnimatorTransition;\n\nAnimator.specialPropsRe = new RegExp(`^(?:${\n    Object.keys(Animator.prototypeProperties).concat(\n        Object.keys(Animator.superclass.prototypeProperties)\n    ).map(s => (s[0] === '_') ? s.substr(1) : s).join('|')\n})$`);\n\nAnimator.defaultDuration = 200;\nAnimator.fx = {};\nAnimator.register({\n    /**\n     * A compound animation to achieve `transform: scale()` and `opacity: 0`. The `scale` defaults to 8 but can be set\n     * in the `anim` config object.\n     *\n     * For example\n     * ```javascript\n     *  const puff = Animator.puff(element);\n     *\n     *  const puff = Animator.puff({\n     *      element,\n     *      scale : 12\n     *  });\n     * ```\n     *\n     * This compound animation can also be specified in an `Animator` config object along with other style transitions:\n     * ```javascript\n     *  const anim = Animator.run({\n     *      element,\n     *      marginLeft : -200,\n     *      puff       : true   // true for default scale, a number, or config object\n     *  });\n     * ```\n     * @param {Element|AnimatorConfig|Core.util.Animator} anim The element to animate or the config object containing at least\n     * the `element` property. This config object can contain an optional `scale` property to adjust the animation's\n     * `transform: scale()` value.\n     * @param {Number} [anim.scale=8] The scale value for the `transform:scale()` transition.\n     * @returns {Core.util.Animator}\n     * @static\n     */\n    puff(anim) {\n        if (anim === true) {\n            anim = {};\n        }\n        else if (typeof anim !== 'object') {  // string || number\n            anim = {\n                transform : `scale(${anim})`\n            };\n        }\n        else if (anim.scale) {\n            anim = ObjectHelper.clone(anim);\n            anim.transform = `scale(${anim.scale})`;\n            delete anim.scale;\n        }\n\n        return assign({\n            opacity   : 0,\n            transform : 'scale(8)'\n        }, anim);\n    }\n});\n","import Base from '../Base.js';\nimport Delayable from '../mixin/Delayable.js';\nimport FunctionHelper from '../helper/FunctionHelper.js';\nimport EventHelper from '../helper/EventHelper.js';\n\n/**\n * @module Core/util/ClickRepeater\n */\n\n/**\n * A helper class, which, when applied to an {@link #config-element} means that a mousedown and hold on that element\n * will, after a configured {@link #config-delay}, begin autorepeating `click` events on that element, starting at a\n * rate of {@link #config-startRate} clicks per second, and over {@link #config-accelerateDuration} milliseconds,\n * accelerate to firing clicks at {@link #config-endRate} times per second.\n *\n * An example of this is used by the {@link Core.widget.NumberField}'s spinner triggers.\n */\nexport default class ClickRepeater extends Base.mixin(Delayable) {\n    static get configurable() {\n        return {\n            /**\n             * The element on which to fire autorepeating `click` events when the mouse is held down.\n             * @config {HTMLElement}\n             */\n            element : null,\n\n            /**\n             * A query selector which specifies subtargets of this ClickRepeater's {@link #config-element}\n             * which act as the click auto repeat event targets.\n             * @config {String}\n             * @default\n             */\n            delegate : null,\n\n            /**\n             * How long in milliSeconds to pause before starting the click repeats.\n             * @config {Number}\n             * @default\n             */\n            delay : 500,\n\n            /**\n             * Clicks per second to start firing after the initial {@link #config-delay}\n             * @config {Number}\n             * @default\n             */\n            startRate : 2,\n\n            /**\n             * Clicks per second to fire at top speed, after accelerating over the {@link #config-accelerateDuration}\n             * @config {Number}\n             * @default\n             */\n            endRate : 20,\n\n            /**\n             * How long in milliseconds to accelerate from the\n             * {@link #config-startRate} to the {@link #config-startRate}.\n             * @config {Number}\n             * @default\n             */\n            accelerateDuration : 4000,\n\n            pressedCls : 'b-pressed'\n        };\n    }\n\n    doDestroy() {\n        this.mousedownRemover?.();\n        this.cancel();\n        super.doDestroy();\n    }\n\n    cancel() {\n        const me = this;\n\n        me.activeElement?.classList.remove(me.pressedCls);\n        me.activeElement = null;\n\n        me.acceleration?.cancel();\n\n        me.activeListenerRemover = me.activeListenerRemover?.();\n\n        me.clearTimeout(me.autoRepeatTimer);\n        me.clearTimeout(me.repeatTimer);\n    }\n\n    updateElement(element) {\n        this.mousedownRemover?.();\n\n        this.mousedownRemover = EventHelper.on({\n            element,\n            mousedown : 'onMouseDown',\n            thisObj   : this\n        });\n    }\n\n    onMouseDown(e) {\n        const\n            me     = this,\n            target = me.delegate ? e.target.closest(me.delegate) : me.element;\n\n        me.cancel();\n\n        if (target) {\n            me.activeElement = target;\n            me.triggerEvent = e;\n\n            target.classList.add(me.pressedCls);\n\n            me.activeListenerRemover = EventHelper.on({\n                mouseup : {\n                    element : document,\n                    capture : true,\n                    handler : 'onMouseUp'\n                },\n                mousemove : {\n                    element : target,\n                    handler : 'onTargetMouseMove'\n                },\n                mouseleave : {\n                    element : target,\n                    handler : 'onTargetMouseLeave'\n                },\n                mouseenter : {\n                    element : target,\n                    handler : 'onTargetMouseEnter'\n                },\n                thisObj : me\n            });\n\n            me.autoRepeatTimer = me.setTimeout('startAutoRepeat', me.delay);\n        }\n    }\n\n    onMouseUp() {\n        this.cancel();\n    }\n\n    onTargetMouseLeave() {\n        this.activeElement.classList.remove(this.pressedCls);\n        this.clearTimeout(this.repeatTimer);\n    }\n\n    onTargetMouseEnter(e) {\n        const me = this;\n\n        if (!e.buttons) {\n            // mostly seen due to breakpoints in click handling, but easy to detect if mouse was released...\n            me.cancel();\n        }\n        else {\n            me.activeElement.classList.add(me.pressedCls);\n            me.triggerEvent = e;\n            me.fireClick();\n        }\n    }\n\n    onTargetMouseMove(e) {\n        this.triggerEvent = e;\n    }\n\n    startAutoRepeat() {\n        const me = this;\n\n        me.interval = me.startInterval = 1000 / me.startRate;\n        me.accelerationDelta = me.startInterval - 1000 / me.endRate;\n\n        // Begin animating the interval from 1000/me.startRate to 1000/me.endRate\n        me.fireClick();\n        me.acceleration = FunctionHelper.animate(me.accelerateDuration, me.nextTick, me, 'easeOutQuad');\n    }\n\n    nextTick(progress) {\n        this.interval = this.startInterval - (this.accelerationDelta * progress);\n    }\n\n    fireClick() {\n        const\n            me         = this,\n            clickEvent = new MouseEvent('click', me.triggerEvent);\n\n        me.triggerEvent.target.dispatchEvent(clickEvent);\n        me.repeatTimer = me.setTimeout(me.fireClick, me.interval);\n    }\n}\n","import Base from '../../Base.js';\n\n/**\n * @module Core/widget/mixin/Rotatable\n */\n\n// we set rotate to 'LEFT' or 'RIGHT' when we auto rotate so we can tell it was (most likely) us:\nconst\n    autoRotateRe  = /^(?:undefined|null|LEFT|RIGHT)$/,\n    inverted = {\n        TOP    : 'BOTTOM',\n        RIGHT  : 'LEFT',\n        BOTTOM : 'TOP',\n        LEFT   : 'RIGHT'\n    };\n\nexport const canonicalDock = dock => {\n    const DOCK = dock?.toUpperCase();\n    return [DOCK, DOCK === 'LEFT' || DOCK === 'RIGHT'];\n};\n\n/**\n * A mixin that provides support for rotating a widget's primary element.\n * @mixin\n * @internal\n */\nexport default Target => class Rotatable extends (Target || Base) {\n    static get $name() {\n        return 'Rotatable';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Set to `'left'` to rotate the button content 90 degrees counter-clockwise or `'right'` for clockwise.\n             * @member {'left'|'right'} rotate\n             */\n            /**\n             * Specify `'left'` to rotate the button content 90 degrees counter-clockwise or `'right'` for clockwise.\n             * @config {'left'|'right'}\n             */\n            rotate : null,\n\n            invertRotate : null\n        };\n    }\n\n    compose() {\n        const { rotate } = this;\n\n        return {\n            class : {\n                [`b-rotate-${(rotate || '').toLowerCase()}`] : rotate,\n                'b-rotate-vertical'                          : rotate\n            }\n        };\n    }\n\n    syncRotationToDock(dock) {\n        if (autoRotateRe.test(String(this.rotate))) {\n            const [DOCK, vertical] = canonicalDock(dock);\n\n            this.rotate = vertical ? (this.invertRotate ? inverted[DOCK] : DOCK) : null;\n        }\n    }\n\n    get widgetClass() {\n        return null;\n    }\n};\n","import Widget from './Widget.js';\nimport ClickRepeater from '../util/ClickRepeater.js';\nimport Rotatable from './mixin/Rotatable.js';\n\n/**\n * @module Core/widget/Tool\n */\n\n/**\n * Base class for tools.\n *\n * May be configured with a `cls` and a `handler` which is a function (or name of a function)\n * in the owning Panel.\n * @extends Core/widget/Widget\n *\n * @classType tool\n */\nexport default class Tool extends Widget.mixin(Rotatable) {\n    static $name = 'Tool';\n\n    static type = 'tool';\n\n    static configurable = {\n        /**\n         * Specify `'start'` to place the tool before the owner's central element (e.g., the `title` of the panel).\n         * @config {'start'|'end'}\n         * @default 'end'\n         * @category Float & align\n         */\n        align : {\n            value   : null,\n            $config : {\n                merge : 'replace'\n            }\n        },\n\n        /**\n         * If provided, turns the tool into a link\n         * @config {String}\n         */\n        href : null,\n\n        /**\n         * The function to call when this tool is clicked. May be a function or function name\n         * prepended by `\"up.\"` that is resolvable in an ancestor component (such as an owning\n         * Grid, Scheduler, Calendar, Gantt or TaskBoard)\n         * @param {Event} handler.event The DOM event which activated the tool.\n         * @param {Core.widget.Panel} handler.panel The owning Panel of the tool.\n         * @param {Core.widget.Tool} handler.tool The clicked Tool.\n         * @config {Function|String} handler\n         */\n\n        /**\n         * A {@link Core.util.ClickRepeater } config object to specify how click-and-hold gestures repeat the click\n         * action.\n         * @config {ClickRepeaterConfig}\n         */\n        repeat : null,\n\n        defaultBindProperty : null\n    };\n\n    compose() {\n        const { align, href } = this;\n\n        return {\n            tag   : href != null ? 'a' : 'button',\n            class : {\n                [`b-align-${align || 'end'}`] : 1,\n                'b-icon'                      : 1\n            },\n            listeners : {\n                click : 'onInternalClick'\n            }\n        };\n    }\n\n    get focusElement() {\n        return this.element;\n    }\n\n    get panel() {\n        // Only fire toolClick if we are in a Panel's header.\n        // If a Tool is used in any other context than a Panel tool config, it\n        // should be used via its click and action events.\n        if (this.parent?.isPanel && this.element?.parentNode.matches('.b-panel-header')) {\n            return this.parent;\n        }\n    }\n\n    changeAlign(align) {\n        return align;  // replace Widget.changeAlign\n    }\n\n    onInternalClick(domEvent) {\n        const\n            me                 = this,\n            { handler, panel } = me,\n            bryntumEvent       = { domEvent, tool : me };\n\n        // Safari && FF trigger click on disabled button, Chrome does not. Handling it here\n        if (me.disabled) {\n            return;\n        }\n\n        /**\n         * Fires when the tool is clicked\n         * @event click\n         * @param {Core.widget.Tool} source The Tool\n         * @param {Event} domEvent DOM event\n         */\n        me.trigger('click', bryntumEvent);\n\n        // A handler may have resulted in destruction.\n        if (!me.isDestroyed) {\n            /**\n             * Fires when the default action is performed (the button is clicked)\n             * @event action\n             * @param {Core.widget.Tool} source The Tool\n             * @param {Event} domEvent DOM event\n             */\n            me.trigger('action', bryntumEvent);\n\n            if (!me.isDestroyed && panel?.trigger('toolClick', bryntumEvent) !== false) {\n                handler && me.callback(handler, panel, [domEvent, panel, me]);\n            }\n        }\n    }\n\n    onInternalKeyDown(keyEvent) {\n        const keyName = keyEvent.key.trim() || keyEvent.code;\n\n        // Don't allow key invocations to bubble and trigger owning\n        // widget's key handlers.\n        if (keyName === 'Enter') {\n            keyEvent.cancelBubble = true;\n            keyEvent.stopPropagation();\n        }\n    }\n\n    updateDisabled(disabled, was) {\n        super.updateDisabled(disabled, was);\n\n        disabled && this.repeat?.cancel();\n    }\n\n    changeRepeat(repeat, oldRepeat) {\n        oldRepeat?.destroy();\n\n        return repeat && ClickRepeater.new({\n            element : this.element\n        }, repeat);\n    }\n}\n\n// Register this widget type with its Factory\nTool.initClass();\n","import Tool from '../Tool.js';\n\n/**\n * @module Core/widget/panel/CollapseTool\n */\n\nconst\n    rightRe = /right/i,\n    autoAlign = tool => (\n        (tool.collapsed || tool.collapsing) &&\n        // special case to align the expand tool with the collapse tool\n        tool.owner.expandedHeaderDock === 'top' &&\n        tool.owner.collapsible.direction.match(rightRe)\n    ) ? 'start' : 'end';\n\n/**\n * This ensures the correct icon is used to represent the {@link Core.widget.Panel panel's}\n * {@link Core.widget.Panel#config-collapsed} state.\n * @extends Core/widget/Tool\n *\n * @classType collapsetool\n * @internal\n */\nexport default class CollapseTool extends Tool {\n    static get $name() {\n        return 'CollapseTool';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'collapsetool';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Set to `false` to disable automatic adjustment of the {@link #config-align} config based on the state\n             * of the panel's {@link Core.widget.Panel#config-collapsed} config and the\n             * {@link Core.widget.panel.PanelCollapser#config-direction}.\n             *\n             * If this is set to a function, that function is called passing the owning `Panel` instance and its\n             * return value is assigned to the {@link #config-align} config.\n             * @config {Boolean|Function}\n             * @default\n             */\n            autoAlign : true,\n\n            collapsed : null,\n\n            collapsing : null,\n\n            collapsify : false,  // ...unaffected when the panel is collapsed\n\n            direction : 'up',\n\n            // Our own setValues/getValues system should not set/get HTML content\n            defaultBindProperty : null\n        };\n    }\n\n    compose() {\n        const { collapsed, direction } = this;\n\n        return {\n            class : {\n                [`b-icon-collapse-${direction}`] : 1,\n                'b-collapsed'                    : collapsed\n            }\n        };\n    }\n\n    changeAutoAlign(v) {\n        return (v === true) ? autoAlign : v;\n    }\n\n    syncAutoAlign() {\n        const { autoAlign } = this;\n\n        if (autoAlign) {\n            this.align = autoAlign(this);\n        }\n    }\n\n    updateAutoAlign() {\n        this.syncAutoAlign();\n    }\n\n    updateCollapsed() {\n        this.syncAutoAlign();\n    }\n\n    updateCollapsing() {\n        this.syncAutoAlign();\n    }\n\n    updateDirection() {\n        this.syncAutoAlign();\n    }\n}\n\n// Register this widget type with its Factory\nCollapseTool.initClass();\n","import Base from '../../Base.js';\nimport Animator from '../../util/Animator.js';\nimport Factoryable from '../../mixin/Factoryable.js';\nimport DomClassList from '../../helper/util/DomClassList.js';\nimport DomHelper from '../../helper/DomHelper.js';\nimport FunctionHelper from '../../helper/FunctionHelper.js';\nimport ObjectHelper from '../../helper/ObjectHelper.js';\nimport Rectangle from '../../helper/util/Rectangle.js';\n\nimport './CollapseTool.js';\n\n/**\n * @module Core/widget/panel/PanelCollapser\n */\n\nconst\n    defaultedDirectionRe = /^(?:UP|DOWN|LEFT|RIGHT)$/,\n    dockBeforeRe         = /^(left|top)$/i,\n    emptyArray           = [],\n    emptySplit           = [emptyArray, emptyArray],\n    headerDockRe         = /^b-dock-(top|left|right|bottom)$/,\n    revealerCls          = 'b-panel-collapse-revealer',\n    sideDockRe           = /^(?:left|right)$/i,\n    unflexCls            = 'b-collapse-unflex',\n    { round }            = Math,\n    canonicalDirection   = ['up', 'down', 'left', 'right'].reduce((o, v) => {\n        o[v.toUpperCase()] = o[v] = v;\n        return o;\n    }, {}),\n    clipByDock = {\n        top    : ['top', 'bottom'],\n        right  : ['right', 'left'],\n        bottom : ['bottom', 'top'],\n        left   : ['left', 'right']\n    },\n    collapseDirectionByPlacement = {\n        hl : 'LEFT',\n        hr : 'RIGHT',\n        vb : 'DOWN',\n        vt : 'UP'\n    },\n    crossAxis = {\n        h : 'w',\n        w : 'h'\n    },\n    dockByDirection = {\n        up    : 'top',\n        right : 'right',\n        down  : 'bottom',\n        left  : 'left'\n    },\n    dockIsHorz = {\n        top    : false,\n        right  : true,\n        bottom : false,\n        left   : true\n    },\n    directionByDock = {\n        top    : 'UP',\n        right  : 'RIGHT',\n        bottom : 'DOWN',\n        left   : 'LEFT'\n    },\n    transverseTransform = {\n        top    : rect => `translate(0, -${round(rect.height || 0)}px)`,\n        bottom : rect => `translate(0, ${round(rect.height || 0)}px)`,\n        right  : rect => `translate(${round(rect.width || 0)}px, 0)`,\n        left   : rect => `translate(-${round(rect.width || 0)}px, 0)`\n    };\n\nlet idSeed = 0;\n\n/**\n * Instances of this class are used to implement the {@link Core.widget.Panel#config-collapsible} config.\n *\n * For example, the following creates an instance of this class:\n *\n * ```javascript\n *      {\n *          type        : 'panel',\n *          collapsible : true\n *      }\n * ```\n * In this mode, a panel will collapse inline, within its container.\n * @classtype inline\n */\nexport default class PanelCollapser extends Base.mixin(Factoryable) {\n    static get $name() {\n        return 'PanelCollapser';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'inline';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * An animation config object.\n             * @config {Object} animation\n             * @property {Number} [animation.duration=200] The duration of the animation (in milliseconds).\n             */\n            animation : {\n                duration : 200\n            },\n\n            /**\n             * Tracks whether or not the panel is collapsed.\n             * @config {Boolean}\n             * @private\n             */\n            collapsed : {\n                value   : null,\n                $config : null,\n                default : false\n            },\n\n            /**\n             * Specifies the direction of panel collapse. The default value for this config is determined dynamically\n             * based on the {@link Core.widget.Panel#config-header header's} `dock` property and the containing layout's\n             * flex direction and, therefore, often does not need to be explicitly specified.\n             *\n             * This config can be any of the following:\n             * - `'up'`\n             * - `'down'`\n             * - `'left'`\n             * - `'right'`\n             *\n             * @config {'up'|'down'|'left'|'right'}\n             */\n            direction : null,\n\n            /**\n             * The tooltip to use for the collapse tool when the panel is expanded.\n             * @config {String}\n             */\n            collapseTooltip : 'L{Collapse}',\n\n            /**\n             * The tooltip to use for the expand tool when the panel is collapsed.\n             * @config {String}\n             */\n            expandTooltip : 'L{Expand}',\n\n            panel : {\n                value : null,\n\n                $config : 'nullify'\n            },\n\n            /**\n             * To support the panel's collapsed size, a minimum width and height may be assigned to the panel's header,\n             * based on this config and the panel's positioning style.\n             *\n             * When a panel is collapsed it may need to retain the pre-collapse dimension perpendicular to the collapse\n             * {@link #config-direction}. For example, the height of a panel that collapses to the left. The dimension\n             * parallel to the collapse (the width in this example) may also need to be supported using the pre-collapse\n             * size of the panel's header.\n             *\n             * When this config is set to `true`, or by default when the owning panel is `position: absolute`, both\n             * axes are given a minimum size based on the panel's pre-collapse size. When this config is `false`, no\n             * minimum sizes will be assigned.\n             *\n             * This config can also be a string containing the single letters 'w' and/or 'h' indicating which axis/axes\n             * of the panel header should be assigned a minimum size. That is, 'w' to assign only a minimum width, 'h'\n             * for only a minimum height, or 'wh' to assign both.\n             *\n             * @config {String|Boolean}\n             * @internal\n             */\n            supportAxis : null,\n\n            /**\n             * The collapse/expand tool. The `type` of this instance should not be changed but the tool instance can be\n             * configured in other ways via this config property.\n             * @config {ToolConfig|Core.widget.Tool}\n             */\n            tool : {\n                type : 'collapsetool',\n\n                handler(ev) {\n                    // NOTE: As a tool, our this pointer is the Panel so we use it to access the current collapser\n                    this.collapsible?.onCollapseClick(ev);\n                }\n            }\n        };\n    }\n\n    static get factoryable() {\n        return {\n            defaultType : 'inline'\n        };\n    }\n\n    get collapsing() {\n        return this.collapsingExpanding === 'collapsing';\n    }\n\n    get collapsingExpanding() {\n        const state = this.currentOperation?.collapsing;\n\n        return (state == null) ? null : (state ? 'collapsing' : 'expanding');\n    }\n\n    get currentDock() {\n        return this.panel?.header?.dock?.toLowerCase() ?? 'top';\n    }\n\n    get expanding() {\n        return this.collapsingExpanding === 'expanding';\n    }\n\n    get collapseTool() {\n        return this.panel?.tools?.collapse;\n    }\n\n    get collapseDim() {\n        return sideDockRe.test(this.collapseDir) ? 'width' : 'height';\n    }\n\n    getCollapseDir(canonical) {\n        let { direction, panel } = this;\n\n        if (!direction || defaultedDirectionRe.test(direction)) {\n            const placement = panel?.placement;\n\n            if (placement) {\n                direction = collapseDirectionByPlacement[placement];\n            }\n            else {\n                direction = directionByDock[panel?.header?.dock || 'top'];\n            }\n\n            // direction in this case will be uppercase so that we can tell later that it was a default value vs a\n            // user-defined one\n        }\n\n        return canonical ? canonicalDirection[direction] : direction;\n    }\n\n    get collapseDir() {\n        return this.getCollapseDir(true);\n    }\n\n    get collapseDock() {\n        return this.collapseInfo[0];\n    }\n\n    get collapseInfo() {\n        const\n            { panel } = this,\n            headerDock = panel.hasHeader && panel.expandedHeaderDock;\n\n        let dock = dockByDirection[this.collapseDir],\n            transverse = false;\n\n        if (headerDock) {\n            if (!(transverse = dockIsHorz[dock] !== dockIsHorz[headerDock])) {\n                dock = headerDock;\n            }\n        }\n\n        return [dock, transverse];\n    }\n\n    get toolsConfig() {\n        const { direction, tool } = this;\n\n        return tool && {\n            collapse : ObjectHelper.assign({\n                direction : direction.toLowerCase()\n            }, tool)\n        };\n    }\n\n    beforeCollapse(operation) {\n        const\n            { panel }   = this,\n            { element } = panel;\n\n        // This is essentially a hide, so move focus back to whence it came\n        if (element.contains(DomHelper.getActiveElement(element))) {\n            panel.revertFocus(true);\n        }\n    }\n\n    changeTool(tool) {\n        const\n            me = this,\n            { panel } = me;\n\n        if (me.isConfiguring || me.isDestroying || !panel || panel.isDestroying) {\n            return tool;\n        }\n\n        panel.tools = {\n            collapse : tool\n        };\n    }\n\n    collapse(collapsed) {\n        const\n            me = this,\n            { panel } = me,\n            operation = {\n                id        : ++idSeed,\n                completed : false,\n                panel\n            };\n\n        let { currentOperation } = me;\n\n        collapsed = collapsed ?? true;\n\n        if (ObjectHelper.isObject(collapsed)) {\n            operation.collapsed = true;\n            ObjectHelper.assign(operation, collapsed);\n            collapsed = operation.collapsed;\n            delete operation.collapsed;\n        }\n\n        operation.collapsing = collapsed;\n        operation.previous = currentOperation ?? null;\n\n        if (collapsed !== me.collapsed) {\n            // We aren't in the desired state (yet)\n\n            if (currentOperation) {\n                if (currentOperation.collapsing !== collapsed) {\n                    // we are not heading to the desired state, so revert it:\n                    operation.animation = currentOperation.animation.revert({\n                        finalize() {\n                            me.collapseFinalize?.(operation, true);  // ?. in case we are destroyed\n                        }\n                    });\n                    operation.collapsing = collapsed;\n                    currentOperation = operation;\n                }\n            }\n            else {\n                // No currentOperation, so this is the first request to change state.\n\n                // don't mutate our parameter or config object\n                operation.animation = ObjectHelper.clone((('animation' in operation) ? operation : me).animation);\n\n                if (me.beforeCollapse(operation) !== false) {\n                    if (operation.animation) {\n                        operation.animation.finalize = complete => me.collapseFinalize?.(operation, complete);\n                    }\n\n                    panel.changingCollapse = true;\n\n                    me[collapsed ? 'collapseBegin' : 'expandBegin'](operation);\n\n                    if (operation.animation) {\n                        currentOperation = operation;\n                    }\n                    else {\n                        operation.completed = true;\n                        me[collapsed ? 'collapseEnd' : 'expandEnd'](operation);\n                    }\n\n                    panel.changingCollapse = false;\n\n                    if (!operation.animation) {\n                        me.onComplete(collapsed ? 'collapse' : 'expand');\n                    }\n                }\n            }\n        }\n        else if (currentOperation && currentOperation.collapsing !== collapsed) {\n            // We are still in the desired state but we are animating to the now undesired state...\n            me[collapsed ? 'expandRevert' : 'collapseRevert'](operation);\n\n            // revert the animation and clear it when done\n            operation.animation = currentOperation.animation.revert({\n                finalize() {\n                    me.collapseFinalize?.(operation, false);  // ?. in case we are destroyed\n                }\n            });\n\n            currentOperation = operation;\n        }\n        // else if (currentOperation) we are already reverting\n\n        me.currentOperation = currentOperation;\n\n        return currentOperation?.animation?.done() ?? Promise.resolve(collapsed === me.collapsed);\n    }\n\n    collapseFinalize(operation, complete) {\n        const\n            me = this,\n            { currentOperation, panel } = me,\n            action = panel.collapsed ? 'expand' : 'collapse';\n\n        if (currentOperation === operation) {\n            me.currentOperation = null;\n            operation.completed = complete;\n\n            panel.changingCollapse = true;\n            me[action + 'End'](operation);\n            panel.changingCollapse = false;\n\n            complete && me.onComplete(action);\n        }\n    }\n\n    applyHeaderDock(collapsed, flush = true) {\n        const\n            me = this,\n            { currentDock, panel } = me,\n            dock = collapsed ? me.collapseDock : panel.expandedHeaderDock;\n\n        if (dock !== currentDock && panel.hasHeader) {\n            panel.header = {\n                dock\n            };\n\n            flush && panel.recompose.flush();\n        }\n    }\n\n    composeHeader(header) {\n        const\n            { panel } = this,\n            { class : cls } = header,\n            dock = panel.expandedHeaderDock ||\n                Object.keys(cls).filter(k => cls[k] && headerDockRe.test(k)).map(k => headerDockRe.exec(k)[1][0]);\n\n        cls[revealerCls] = 1;\n        cls[`b-collapsible-${dock[0]}${this.collapseDir[0]}`] = 1;\n\n        return header;\n    }\n\n    composeTitle(title) {\n        title.class[revealerCls] = 1;\n\n        return title;\n    }\n\n    collapseBegin(operation) {\n        const\n            me = this,\n            { animation } = operation,\n            { collapseDim, collapseTool, panel } = me,\n            { element, placement } = panel,\n            [collapseDock, transverse] = me.collapseInfo,\n            collapseToolClasses = collapseTool?.element.classList,\n            unflex = !placement ||\n                ((placement[0] === 'h') && (collapseDim === 'width')) ||\n                ((placement[0] === 'v') && (collapseDim === 'height'));\n\n        me.configuredWidth = panel._lastWidth;\n        me.configuredHeight = panel._lastHeight;\n        me.transverseCollapse = transverse;\n\n        me.applyHeaderDock(true);\n\n        // Lock the bodyWrap to its current size while we animate the height of the outer element and clip it. We\n        // also leave the bodyWrap locked to its expanded size to avoid crushing the content while collapsed since\n        // that could cause virtual rendering widgets to have 0 height to work with and explode or at least waste\n        // time adjusting back and forth.\n        const\n            panelRect = panel.rectangle(),\n            bodyWrapRect = me.lockInnerSize().moveTo(0, 0),  // we must lockInnerSize even if !animation\n            bodyWrapClipRect = bodyWrapRect.clone(),\n            clipDir = clipByDock[collapseDock],\n            headerRect = panel.headerElement?.getBoundingClientRect(),\n            collapsedSize = round(headerRect?.[collapseDim] || 0);\n\n        element.classList.toggle(unflexCls, unflex);\n\n        if (animation) {\n            bodyWrapClipRect[clipDir[0]] = bodyWrapClipRect[clipDir[1]];\n\n            element.classList.add('b-collapsing');\n\n            // Flip to collapsed while skipping the animation (via b-collapsing)\n            collapseToolClasses?.add('b-collapsed', 'b-collapsing');\n\n            if (collapseTool) {\n                collapseTool.collapsing = true;\n            }\n\n            if (collapseToolClasses) {\n                collapseToolClasses.remove('b-collapsed');  // put the tool back to pre-collapse state\n                panel.rectangle();                          // force a layout to allow us to enable transitions\n                collapseToolClasses.remove('b-collapsing'); // enable transitions\n                collapseToolClasses.add('b-collapsed');     // start the tool's transition\n            }\n\n            animation.element = element;\n            animation.retain = true;\n            animation[collapseDim] = {\n                from : round(panelRect[collapseDim]),\n                to   : collapsedSize\n            };\n\n            // While we animate the panel, we also need to clip the bodyWrap or it would be exposed on cases where\n            // overflow=visible (like a tooltip w/anchor element)... doubtful we'd collapse such a panel but perhaps\n            // there are  (or will be) other reasons to set overflow=visible on the panel.\n            animation.items = [{\n                element : me.innerElement,\n                retain  : false,\n                clip    : {\n                    from : `rect(${bodyWrapRect})`,\n                    to   : `rect(${bodyWrapClipRect})`\n                }\n            }];\n\n            if (transverse) {\n                animation.items.push({\n                    element   : panel.headerElement,\n                    duration  : animation.duration,\n                    retain    : false,\n                    transform : {\n                        from : transverseTransform[collapseDock](headerRect),\n                        to   : `translate(0, 0)`\n                    }\n                });\n            }\n\n            operation.animation = Animator.run(animation);\n        }\n        else {\n            // When animating we retain this style, so we need to just jam it on the element now since we aren't doing\n            // the animation:\n            element.style[collapseDim] = `${collapsedSize}px`;\n\n            if (collapseTool) {\n                collapseToolClasses.add('b-collapsing', 'b-collapsed'); // disable transition & snap to correct state\n                collapseTool.rectangle();                   // force a layout\n                collapseToolClasses.remove('b-collapsing'); // now we can remove this cls w/o triggering a transition\n            }\n        }\n    }\n\n    collapseEnd(operation) {\n        const\n            me = this,\n            { collapseTool } = me;\n\n        me.panel.element.classList.remove('b-collapsing');\n\n        if (collapseTool) {\n            collapseTool.collapsing = false;\n        }\n\n        if (operation.completed) {\n            me.collapsed = true;\n        }\n        else {\n            me.applyHeaderDock(false);\n            me.restoreConfiguredSize();\n            me.lockInnerSize(false);\n        }\n    }\n\n    collapseRevert(operation) {\n        this.collapseTool?.element.classList.remove('b-collapsed');\n    }\n\n    expandBegin(operation) {\n        const\n            me = this,\n            { animation } = operation,\n            { collapseDim, collapseTool, panel } = me,\n            [collapseDock, transverse] = me.collapseInfo,\n            { element } = panel,\n            elementClassList = element.classList,\n            unflex = elementClassList.contains(unflexCls),\n            fromRect = panel.rectangle();\n\n        elementClassList.remove('b-collapsed', 'b-collapsing');\n\n        // This style is retained by the collapse animation and must be cleared to get a right measurement of the\n        // expanded panel\n        panel.element.style[collapseDim] = '';\n\n        me.restoreConfiguredSize();\n        me.lockInnerSize(false);  // unlock the bodyWrap size\n\n        const\n            toRect = panel.rectangle(),\n            // Lock the bodyWrap to its current size while we animate the height of the outer element and unclip it:\n            bodyWrapRect = me.lockInnerSize().moveTo(0, 0),\n            bodyWrapClipRect = bodyWrapRect.clone(),\n            clipDir = clipByDock[me.collapseDock];\n\n        collapseTool?.element.classList.remove('b-collapsed');\n\n        if (animation) {\n            bodyWrapClipRect[clipDir[0]] = bodyWrapClipRect[clipDir[1]];\n            elementClassList.add('b-collapsed', 'b-expanding');\n            unflex && elementClassList.add(unflexCls);\n\n            animation.element = element;\n            animation[collapseDim] = {\n                from : round(fromRect[collapseDim]),\n                to   : round(toRect[collapseDim])\n            };\n\n            animation.items = [{\n                element : me.innerElement,\n                retain  : false,\n                clip    : {\n                    from : `rect(${bodyWrapClipRect})`,\n                    to   : `rect(${bodyWrapRect})`\n                }\n            }];\n\n            if (transverse) {\n                animation.items.push({\n                    element   : panel.headerElement,\n                    duration  : animation.duration,\n                    retain    : false,\n                    transform : {\n                        from : `translate(0, 0)`,\n                        to   : transverseTransform[collapseDock](fromRect)\n                    }\n                });\n            }\n\n            operation.animation = Animator.run(animation);\n        }\n    }\n\n    expandEnd(operation) {\n        const me = this;\n\n        me.panel.element.classList.remove('b-expanding');\n\n        if (operation.completed) {\n            me.collapsed = false;\n            me.applyHeaderDock(false);\n            me.restoreConfiguredSize();\n            me.lockInnerSize(false);\n        }\n    }\n\n    expandRevert(operation) {\n        this.collapseTool?.element.classList.add('b-collapsed');\n    }\n\n    get innerElement() {\n        return this.panel.collapseWrapElement || this.panel.bodyWrapElement;\n    }\n\n    get innerSizeElement() {\n        return this.transverseCollapse ? this.panel.element : this.innerElement;\n    }\n\n    get supportAxis() {\n        let { _supportAxis } = this;\n\n        const fullSupport = _supportAxis === true;\n\n        if (fullSupport || _supportAxis == null) {\n            _supportAxis = this.collapseDim[0];  // 'w' or 'h'\n\n            if (fullSupport || DomHelper.getStyleValue(this.panel.element, 'position') === 'absolute') {\n                _supportAxis += crossAxis[_supportAxis];\n            }\n        }\n\n        return _supportAxis || '';\n    }\n\n    lockInnerSize(lock = true) {\n        const\n            me = this,\n            { innerElement, panel } = me,\n            supportAxis = lock ? me.supportAxis : '',\n            panelEl = panel.element,\n            headerEl = panel.headerElement,\n            headerRect = lock && headerEl && Rectangle.from(headerEl, panelEl),\n            innerRect = lock && Rectangle.from(me.innerSizeElement, panelEl),\n            innerStyle = innerElement.style;\n\n        // We have to prop up the cross-axis of the panel header in cases where the panel is not receiving a size from\n        // its container (an auto layout). Otherwise, the header may shrink in width (when docked top) once the bodyWrap\n        // flips to position:absolute... it will no longer be providing a natural size to prop up the panel, so we\n        // shift that responsibility to the header element while we are collapsed.\n        if (headerEl) {\n            headerEl.style.minWidth = supportAxis.includes('w') ? `${headerRect.width}px` : '';\n            headerEl.style.minHeight = supportAxis.includes('h') ? `${headerRect.height}px` : '';\n        }\n\n        // We must set w/h on the inner element before we flip it to position:absolute to avoid layout changes on items\n        // in the panel (like grids)\n        innerStyle.width  = lock ? `${innerRect.width}px`   : '';\n        innerStyle.height = lock ? `${innerRect.height}px`  : '';\n\n        innerElement.classList[lock ? 'add' : 'remove']('b-panel-collapse-size-locker');\n\n        return innerRect;\n    }\n\n    onCollapseClick(e) {\n        let collapsed = this.collapsing ? false : this.expanding ? true : !this.collapsed;\n\n        if (e.altKey) {\n            collapsed = {\n                animation : null,\n                collapsed\n            };\n        }\n\n        this.collapse(collapsed);\n    }\n\n    onComplete(action) {\n        this.panel?.trigger(action);\n    }\n\n    onHeaderClick({ event }) {\n        if (event.button === 0 && this.panel.collapsed && event.target.classList.contains(revealerCls)) {\n            this.onRevealerClick();\n        }\n    }\n\n    onPanelConfigChange({ name, value }) {\n        const\n            me        = this,\n            { panel } = me;\n\n        if (name === 'collapsed') {\n            if (panel.isPainted) {\n                me.collapsed = value;\n            }\n        }\n        else if (name === 'header' && !panel.changingCollapse) {\n            me.syncDirection();\n        }\n    }\n\n    onPanelPaint() {\n        this.syncDirection();\n\n        if (this.panel.collapsed && !this.collapsed) {\n            this.collapse({\n                animation : null,\n                collapsed : true\n            });\n        }\n    }\n\n    onRevealerClick() {\n        this.panel._collapse({ collapsed : false });\n    }\n\n    restoreConfiguredSize(which) {\n        const { configuredHeight, configuredWidth, panel } = this;\n\n        which = which ?? 'wh';\n\n        panel.element.classList.remove(unflexCls);\n\n        if (configuredWidth != null && which.includes('w')) {\n            panel.width = configuredWidth;\n        }\n\n        if (configuredHeight != null && which.includes('h')) {\n            panel.height = configuredHeight;\n        }\n    }\n\n    splitHeaderItems() {\n        return emptySplit;\n    }\n\n    syncDirection() {\n        const\n            me = this,\n            { direction } = me;\n\n        if (!direction || defaultedDirectionRe.test(direction)) {\n            // getCollapseDir() returns uppercase values when they are being defaulted, so we can tell if the value\n            // is from the user (which must be lowercase)\n            me.direction = me.getCollapseDir();\n        }\n    }\n\n    updateCollapsed(collapsed) {\n        const { collapseTool, panel } = this;\n\n        if (panel) {\n            panel.collapsed = collapsed;\n            panel.element.classList[collapsed ? 'add' : 'remove']('b-collapsed');\n        }\n\n        if (collapseTool) {\n            collapseTool.collapsed = collapsed;\n        }\n    }\n\n    updateDirection(direction) {\n        const { collapseTool, panel } = this;\n\n        if (collapseTool) {\n            collapseTool.direction = canonicalDirection[direction];\n        }\n\n        if (panel?.rendered) {\n            panel.recompose();\n        }\n    }\n\n    updatePanel(panel) {\n        const me = this;\n\n        me.syncDirection();\n\n        me.panelChangeDetacher?.();\n        me.panelChangeDetacher = panel && FunctionHelper.after(panel, 'onConfigChange', 'onPanelConfigChange', me, {\n            return : false\n        });\n    }\n\n    wrapCollapser(key, body) {\n        const\n            me = this,\n            [collapseDock, transverse] = me.collapseInfo;\n\n        if (!transverse) {\n            return [key, body];\n        }\n\n        const\n            { collapseDir, panel } = me,\n            { expandedHeaderDock, header: panelHeader, uiClassList } = panel,\n            recollapse = panel.tools?.recollapse,\n            [before, after] = me.splitHeaderItems({ dock : collapseDock, as : 'element' }),\n            title = panel.hasHeader ? (panel.title || panelHeader?.title || '\\xA0') : null,\n            headerElement = title && {\n                tag   : 'header',\n                class : new DomClassList({\n                    ...uiClassList,\n                    [`b-dock-${expandedHeaderDock}`] : 1,\n                    'b-panel-header'                 : 1,\n                    'b-panel-collapser-header'       : 1\n                }, panelHeader?.cls),\n\n                children : [\n                    ...before,\n                    {\n                        reference : 'collapserTitleElement',\n                        html      : title,\n                        class     : {\n                            ...uiClassList,\n                            [`b-align-${panelHeader?.titleAlign || 'start'}`] : 1,\n                            'b-header-title'                                  : 1\n                        }\n                    },\n                    ...after\n                ]\n            };\n\n        if (recollapse) {\n            recollapse.direction = collapseDir;\n        }\n\n        return [\n            'collapseWrapElement',\n            {\n                class : {\n                    ...uiClassList,\n                    [`b-panel-collapser-header-${expandedHeaderDock}`]     : 1,\n                    [`b-panel-collapser-${collapseDir}`]                   : 1,\n                    [`b-${dockIsHorz[expandedHeaderDock] ? 'h' : 'v'}box`] : 1,\n                    'b-panel-collapser'                                    : 1,\n                    'b-box-center'                                         : 1\n                },\n\n                children : dockBeforeRe.test(expandedHeaderDock) ? {\n                    collapserHeaderElement : headerElement,\n                    [key]                  : body\n                } : {\n                    [key]                  : body,\n                    collapserHeaderElement : headerElement\n                }\n            }\n        ];\n    }\n}\n\nPanelCollapser.maps = {\n    clipByDock,\n    dockByDirection,\n    dockIsHorz\n};\n\n// Register this widget type with its Factory\nPanelCollapser.initClass();\n","import Base from '../Base.js';\nimport FunctionHelper from '../helper/FunctionHelper.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\n\n/**\n * @module Core/util/DynamicObject\n */\n\nconst PENDING = Symbol('pendingCreate');\n\n/**\n * This class is used to manage dynamic creation and configuration of individual properties of an object. This pattern\n * is used to allow the names of an object to each represent a dynamically instantiated object. For example, the\n * `features` config of Calendar is defined like so:\n *\n * ```javascript\n *  class Calendar extends ... {\n *      static get configurable() {\n *          return {\n *              features : {\n *                  drag : {\n *                      // configs for Drag feature\n *                  }\n *              }\n *          }\n *      }\n *  }\n * ```\n * This class is used to manage the `features` objects in the above case. The `drag` property value is promoted from\n * the config object defined by the class and user instance on first request. Like config properties themselves, these\n * features may access other features during their initialization. These accesses are trapped by this class to ensure\n * the config object is promoted to an instantiated instance.\n *\n * A {@link #config-factory} is provided to this object to allow it to create instances from names like `'drag'`.\n * @internal\n */\nexport default class DynamicObject extends Base {\n    static get prototypeProperties() {\n        return {\n            /**\n             * Optional function that will be passed an instance prior to destroying it.\n             * @param {String} name The property name in the Dynamic object by which the new instance may be referenced.\n             * @param {Object} instance The value of the property.\n             * @config {Function}\n             */\n            cleanup : null,\n\n            /**\n             * Optional name of the config property managed by this instance. If changes are made directly, this\n             * property is used to run the `onConfigChange` method of the `owner`.\n             * @config {String}\n             */\n            configName : null,\n\n            /**\n             * Optional function to call as instances are created. Each new instance is passed to this function.\n             * @param {Object} instance The newly created instance.\n             * @param {String} key The property name in the dynamic object by which the new instance may be referenced.\n             * @config {Function}\n             */\n            created : null,\n\n            /**\n             * The {@link Core.mixin.Factoryable factory} to use to create instances.\n             * @config {Object}\n             */\n            factory : null,\n\n            /**\n             * By default, the name of the member is used for the type. Set this config to `true` to also allow the\n             * config object for a property to contain a `type` property. Set this to `false` to ignore the name of the\n             * member and rely on the {@link #config-factory} to process the config object.\n             * @config {Boolean|String}\n             * @default\n             */\n            inferType : 'name',\n\n            /**\n             * The owning object to pass along to the instances as the `ownerName` property.\n             * @config {Object}\n             */\n            owner : null,\n\n            /**\n             * The property name by which to store the `owner` on each instance.\n             * @config {String}\n             */\n            ownerName : null,\n\n            /**\n             * Set to `false` to prevent using a `Proxy` even if that JavaScript platform feature is available. Using\n             * a `Proxy` is ideal because it allows for all forms of access to the dynamic properties to be handled\n             * instead of only those that have predefined configuration values.\n             * @config {Boolean}\n             * @private\n             */\n            proxyable : typeof Proxy !== 'undefined',\n\n            /**\n             * Optional function that will be passed a config object prior to instantiating an object. This function\n             * can either modify the passed object or return a new object.\n             * @param {Object} config The config object used to create the object\n             * @param {String} name The property name in the Dynamic object by which the new instance may be referenced.\n             * @config {Function}\n             */\n            setup : null,\n\n            /**\n             * Optional function that will be passed a raw config object prior to processing and the value it returns\n             * replaces the raw value. This function is used to transform strings or arrays (for example) into proper\n             * config objects.\n             * @param {*} config The original value of the config object parameter\n             * @config {Function}\n             */\n            transform : null\n        };\n    }\n\n    static get properties() {\n        return {\n            /**\n             * Holds config objects for each defined object. These are used to hold class and instance config values\n             * and use them to create instances on first request, or when `flush()` is called. Further, if the instance\n             * is initially assigned instead of retrieved, these values act as the defaults for the instance and are\n             * combined with those provided in the assignment.\n             * @member {Object} defaults\n             * @private\n             */\n            defaults : {},\n\n            /**\n             * This object holds the actual instances that are retrieved by the dynamic accessor or `Proxy`.\n             * @member {Object} instances\n             * @private\n             */\n            instances : {},\n\n            /**\n             * The object that contains the dynamic accessors for each instance. This object is not used when using a\n             * `Proxy`.\n             * @member {Object} object\n             * @private\n             */\n            object : Object.create({})\n        };\n    }\n\n    /**\n     * Returns the `Proxy` instance used to manage dynamic assignments. If the JavaScript platform does not support the\n     * `Proxy` class, this will be `null`.\n     * @property {Proxy}\n     * @private\n     */\n    get proxy() {\n        const me = this;\n\n        let proxy = null;\n\n        if (me.proxyable) {\n            proxy = new Proxy(me.instances, {\n                get(o, name) {\n                    return me.get(name);\n                },\n                set(o, name, value) {\n                    me.set(name, value);\n                    return true;\n                },\n                deleteProperty(o, name) {\n                    me.set(name, null);\n                    return true;\n                }\n            });\n        }\n\n        // Replace our getter with the result for quicker future use.\n        Reflect.defineProperty(me, 'proxy', {\n            configurable : true,  // allow destroy() to delete it\n            value        : proxy\n        });\n\n        return proxy;\n    }\n\n    /**\n     * Returns the object that contains the dynamic properties. This may be a `Proxy` instance or an object with getter\n     * and setter accessors.\n     * @property {Object}\n     * @internal\n     */\n    get target() {\n        return this.proxy || this.object;\n    }\n\n    /**\n     * This method establishes the initial definition of a dynamic property. When using a `Proxy`, this method simply\n     * needs to cache away the initial config for use by the getter. When `Proxy` is unavailable, this method will\n     * also defined a getter/setter to intercept access to the dynamic property.\n     * @param {String} name The name of the dynamic property.\n     * @param {Object} config The initial config object for the dynamic property.\n     * @private\n     */\n    define(name, config) {\n        const\n            me            = this,\n            { transform } = me,\n            transformed   = transform ? transform(config, name) : config,\n            instantiated  = ObjectHelper.isInstantiated(transformed);\n\n        me.instances[name] = PENDING;\n\n        if (!instantiated) {\n            me.setDefaults(name, transformed);\n        }\n\n        // We provide get/set accessors on our `object` so that we can create the instance on first use and provide\n        // the correct defaults. The setter also handles reassignment and reconfiguration. These accessors are\n        // placed on the prototype of `object` so that we can add/remove the same accessors from `object` itself.\n        // This allows users of the object to see the correct number of \"own\" keys for enumeration.\n        me.defineProp(name, true);\n\n        if (instantiated) {\n            me.set(name, transformed);\n        }\n    }\n\n    /**\n     * Define the get/set accessors for `name` on our `object` or its prototype.\n     * @param {String} name\n     * @param {Boolean} [base] Pass `true` to indicate the property should be defined on the prototype.\n     * @private\n     */\n    defineProp(name, base) {\n        const\n            me = this,\n            { object } = me;\n\n        if (!me.proxy) {\n            Reflect.defineProperty(base ? Object.getPrototypeOf(object) : object, name, {\n                configurable : !base,\n                enumerable   : true,\n\n                get() {\n                    return me.get(name);\n                },\n\n                set(value) {\n                    return me.set(name, value);\n                }\n            });\n        }\n    }\n\n    /**\n     * Ensures that all defined members are touched to trigger their creation.\n     * @internal\n     */\n    flush() {\n        const me = this;\n\n        // Iterate the defaults object to loop over all the defined items:\n        try {\n            me.updating = true;\n\n            for (const name in me.defaults) {\n                me.get(name);\n            }\n\n            me.afterConfigureOwner = me.afterConfigureOwner?.();\n        }\n        finally {\n            me.updating = false;\n        }\n    }\n\n    /**\n     * Returns (lazily creating as necessary) the value of a dynamic property given its name.\n     * @param {String} name\n     * @returns {Object}\n     * @private\n     */\n    get(name) {\n        const { defaults, instances } = this;\n\n        if (instances[name] === PENDING) {\n            this.set(name, PENDING);\n        }\n\n        // Return null for defined instances that have been nulled out and undefined otherwise:\n        return instances[name] || (defaults[name] && null);\n    }\n\n    /**\n     * Sets the value of a dynamic property given its name and value.\n     * @param {String} name\n     * @param {Object} value\n     * @private\n     */\n    set(name, value) {\n        const\n            me = this,\n            { cleanup, configName, defaults, factory, instances, owner, setup, transform, updating } = me,\n            inform = owner && configName && !updating,\n            was = (instances[name] === PENDING) ? null : instances[name],\n            instance = factory.reconfigure(was, (value === PENDING) ? {} : (value || null), {\n                cleanup   : cleanup && (instance => cleanup(instance, name)),\n                defaults  : defaults[name] || me.setDefaults(name, {}),\n                owner     : me.owner,\n                setup     : setup && ((config, type, defaults) => setup(config, name, type, defaults)),\n                transform : transform && (config => transform(config, name))\n            });\n\n        if (instance !== was) {\n            const before = inform && { ...instances };\n\n            instances[name] = instance;\n\n            if (instance) {\n                me.defineProp(name);\n                me.created?.(instance, name);\n            }\n            else {\n                delete me.object[name];\n                delete instances[name];\n            }\n\n            if (inform) {\n                owner.onConfigChange({\n                    name   : configName,\n                    config : owner.$meta.configs[configName],\n                    value  : me.target,\n                    was    : before\n                });\n            }\n        }\n    }\n\n    /**\n     * Stores the default config values for use in the factory reconfiguration process.\n     * @param {String} name The name and default type of the dynamic property. Depending on {@link #config-inferType},\n     * this may not be overridden by a type property in the config object.\n     * @param {Object} config The config object.\n     * @returns {Object}\n     * @private\n     */\n    setDefaults(name, config) {\n        const\n            { defaults, factory, inferType, instances, owner, ownerName } = this,\n            { typeKey } = factory.factoryable;\n\n        config = (config === true) ? {} : ObjectHelper.assign({}, config);  // copy props even from prototype\n\n        if (inferType === 'name' || (inferType === true && !config[typeKey])) {\n            config[typeKey] = name;\n        }\n\n        // Store this object as the \"owner\" on the config object so instances can access their creating object:\n        if (ownerName) {\n            config[ownerName] = owner;\n        }\n\n        config.beforeConfigure = instance => {\n            // Ensure the feature is injected into the features object before initialization so that it is\n            // available to call chains from its initialization.\n            instances[name] = instance;\n        };\n\n        return defaults[name] = config;\n    }\n\n    /**\n     * Updates the members of `object` based on the provided configuration.\n     * @param {Object} members The configuration for the instances of `object`.\n     * @internal\n     */\n    update(members) {\n        const\n            me = this,\n            { owner } = me;\n\n        let name, config;\n\n        try {\n            me.updating = true;\n\n            if (members) {\n                // We prime the features so that if any configuration code accesses a feature, it will self initialize,\n                // but if not, they will remain in a primed state until afterConfigure.\n                for (name in members) {\n                    config = members[name];\n\n                    if (me.defaults[name]) {  // if (already defined)\n                        me.set(name, config);\n                    }\n                    else if (config) {\n                        me.define(name, config);\n                    }\n                }\n\n                // NOTE: we leave alone any existing features that were not present in the given object. To remove a\n                // feature, you must set it to null or set all features to null.\n            }\n            else {\n                for (name in me.instances) {\n                    me.set(name, null);\n                }\n            }\n        }\n        finally {\n            me.updating = false;\n        }\n\n        if (owner) {\n            // Normally we wait for afterConfigure to create all the objects, but if we are being called after that\n            // point in the life cycle, we need to flush them out now. We still use the same delay technique in case\n            // the user adds multiple properties dynamically.\n            if (!owner.isConfiguring) {\n                me.flush();\n            }\n            else if (!me.afterConfigureOwner) {\n                // Since we are being called while the owner isConfiguring, set a hook on owner.afterConfigure() so\n                // that we can make good on creating the child objects.\n                me.afterConfigureOwner = FunctionHelper.before(owner, 'afterConfigure', 'flush', me);\n            }\n        }\n    }\n}\n\nDynamicObject.initClass();\n","import Widget from '../Widget.js';\nimport ObjectHelper from '../../helper/ObjectHelper.js';\nimport FunctionHelper from '../../helper/FunctionHelper.js';\nimport DynamicObject from '../../util/DynamicObject.js';\n\nimport '../Tool.js';\n\n/**\n * @module Core/widget/mixin/Toolable\n */\n\nconst\n    emptyArray = [],\n    emptyObject = {},\n    toolConfigs = {\n        align  : 1,\n        // hidden : 1,\n        weight : 1\n    };\n\n/**\n * A mixin that manages {@link #config-tools}.\n *\n * @mixin\n * @mixinbase Widget\n */\nexport default Target => class Toolable extends (Target || Widget) {\n    static get $name() {\n        return 'Toolable';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * The {@link Core.widget.Tool tools} as specified by the {@link #config-tools} configuration. Each is a\n             * {@link Core.widget.Tool} instance which may be hidden, shown and observed and styled just like any other\n             * widget.\n             * @member {Object<String,Core.widget.Tool>} tools\n             * @category Content\n             */\n            /**\n             * The {@link Core.widget.Tool tools} to add either before or after the `title` in the Panel header. Each\n             * property name is the reference by which an instantiated tool may be retrieved from the live\n             * `{@link #property-tools}` property.\n             * @config {Object<String,ToolConfig>}\n             * @category Content\n             */\n            tools : {\n                value   : null,\n                $config : {\n                    nullify : true\n                }\n            },\n\n            /**\n             * An object containing config defaults for corresponding {@link #config-tools} objects with a matching name.\n             *\n             * This object contains a key named `'*'` with default config properties to apply to all tools. This\n             * object provides the default `type` (`'tool').\n             * @config {Object} toolDefaults\n             * @private\n             */\n            toolDefaults : {\n                '*' : {\n                    type  : 'tool',\n                    align : 'end'\n                }\n            }\n        };\n    }\n\n    byWeightSortFn(a, b) {\n        return (a.weight || 0) - (b.weight || 0);\n    }\n\n    byWeightReverseSortFn(a, b) {\n        return (b.weight || 0) - (a.weight || 0);\n    }\n\n    gatherTools({ align, overlay, refs } = emptyObject) {\n        const\n            { collapsed, tools } = this;\n\n        let ret = [],\n            alignment, key, i, item, tool;\n\n        for (key in tools) {\n            tool = tools[key];\n\n            // Tools redefine \"align\" config to be a simple string, but other widgets promote align config to an align\n            // spec object\n            alignment = tool?.align?.align ?? tool?.align ?? 'end';\n\n            if (alignment === align && tool.isCollapsified(collapsed, overlay)) {\n                ret.push(tool);\n            }\n        }\n\n        ret.sort(this[(align === 'end') ? 'byWeightReverseSortFn' : 'byWeightSortFn']);\n\n        if (refs) {\n            const\n                asWidget = refs === 'widget',\n                asRefs = {};\n\n            for (i = 0; i < ret.length; ++i) {\n                item = ret[i];\n\n                asRefs[item.ref] = asWidget ? item : item.element;\n            }\n\n            ret = asRefs;\n        }\n\n        return ret;\n    }\n\n    getEndTools({ overlay, refs } = emptyObject) {\n        return this.gatherTools({ align : 'end', overlay, refs });\n    }\n\n    getStartTools({ overlay, refs } = emptyObject) {\n        return this.gatherTools({ align : 'start', overlay, refs });\n    }\n\n    get childItems() {\n        return [\n            ...this.getStartTools(),\n            ...(this._items || emptyArray),\n            ...this.getEndTools()\n        ];\n    }\n\n    changeTools(tools, oldTools) {\n        const\n            me      = this,\n            manager = me.$tools || (me.$tools = new DynamicObject({\n                configName : 'tools',\n                factory    : Widget,\n                inferType  : false,  // the name of a tool in the tools object is not its type\n                owner      : me,\n\n                created(instance) {\n                    instance.innerItem = false;\n                    instance.syncRotationToDock?.(me.header?.dock);\n\n                    FunctionHelper.after(instance, 'onConfigChange', (ret, { name }) => {\n                        if (toolConfigs[name]) {\n                            me.onConfigChange({\n                                name  : 'tools',\n                                value : manager.target\n                            });\n                        }\n                    });\n\n                    me.onChildAdd(instance);\n                },\n\n                setup(config, name) {\n                    config = ObjectHelper.merge({}, me.toolDefaults['*'], me.toolDefaults[name], config);\n\n                    config.parent = me;  // so parent can be accessed during construction\n                    config.ref    = name;\n\n                    return config;\n                }\n            }));\n\n        manager.update(tools);\n\n        if (!oldTools) {\n            // Only return the target once. Further calls are processed above so we need to return undefined to ensure\n            // onConfigChange is called. By returning the same target on 2nd+ call, it passes the === test and won't\n            // trigger onConfigChange.\n            return manager.target;\n        }\n    }\n\n    get widgetClass() {}\n};\n","import Layout from './Layout.js';\n\n/**\n * @module Core/widget/layout/Box\n */\n\nconst\n    directionCls = [\n        'b-hbox',\n        'b-vbox'\n    ],\n    syncAlign = {\n        name  : 'align',\n        style : 'alignItems'\n    },\n    syncContentAlign = {\n        name  : 'contentAlign',\n        style : 'alignContent'\n    },\n    syncDirection = {\n        name  : 'direction',\n        style : 'flexDirection'\n    },\n    syncJustify = {\n        name    : 'justify',\n        style   : 'justifyContent',\n        classes : ['stretch']\n    },\n    syncWrap = {\n        name  : 'wrap',\n        style : 'flexWrap',\n        map   : {\n            false   : 'nowrap',\n            true    : 'wrap',\n            reverse : 'wrap-reverse'\n        }\n    };\n\n/**\n * A layout that applies `display: flex` to the {@link Core.widget.Widget#property-contentElement contentElement} of\n * its container to layout child items. This defaults to a horizontal layout of items, also known as an `'hbox'`.\n * ```javascript\n *  layout : {\n *      type : 'box'   // or equivalently, 'hbox'\n *  }\n * ```\n * @extends Core/widget/layout/Layout\n * @layout\n * @classtype box\n */\nexport default class Box extends Layout {\n    static $name = 'Box';\n\n    static type = 'box';\n\n    static alias = 'hbox';\n\n    static configurable = {\n        itemCls : 'b-box-item',\n\n        /**\n         * Sets the [align-items](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items) style of the\n         * {@link #property-owner owner's} {@link Core.widget.Widget#property-contentElement}.\n         * @config {String} align\n         * @default 'stretch'\n         */\n        align : null,\n\n        /**\n         * Sets the [align-content](https://developer.mozilla.org/en-US/docs/Web/CSS/align-content) style of the\n         * {@link #property-owner owner's} {@link Core.widget.Widget#property-contentElement}.\n         * @config {String} contentAlign\n         * @default 'normal'\n         */\n        contentAlign : null,\n\n        /**\n         * Sets the [direction](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction) style of the\n         * {@link #property-owner owner's} {@link Core.widget.Widget#property-contentElement}.\n         * This config is not set directly. Set {@link #config-horizontal}, {@link #config-vertical}, and/or\n         * {@link #config-reverse} instead.\n         * @config {String} direction\n         * @private\n         */\n        direction : null,\n\n        /**\n         * Set this value to `false` to set the [flex-direction](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction)\n         * style of the {@link #property-owner owner's} {@link Core.widget.Widget#property-contentElement}\n         * to `column`. Or alternatively, set {@link #config-vertical} to `true`.\n         * @config {Boolean} horizontal\n         * @default\n         */\n        horizontal : true,\n\n        /**\n         * Sets the [justify-content](https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content) style of the\n         * {@link #property-owner owner's} {@link Core.widget.Widget#property-contentElement}.\n         * @config {String} justify\n         * @default 'flex-start'\n         */\n        justify : null,\n\n        /**\n         * Set this value to `true` to add `'-reverse'` to the [flex-direction](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction)\n         * style of the {@link #property-owner owner's} {@link Core.widget.Widget#property-contentElement}.\n         * This config combines with {@link #config-horizontal} or {@link #config-vertical} to set the `flex-direction`\n         * style.\n         * @config {Boolean} reverse\n         * @default false\n         */\n        reverse : null,\n\n        /**\n         * Sets the [flex-wrap](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap) style of the\n         * {@link #property-owner owner's} {@link Core.widget.Widget#property-contentElement}.\n         *\n         * The value of `true` is equivalent to `'wrap'`, `false` is equivalent to `'nowrap'`, and `'reverse'` is\n         * equivalent to `'wrap-reverse'`.\n         *\n         * ```javascript\n         *  layout : {\n         *      type : 'box',\n         *      wrap : false        // equivalent to 'nowrap'\n         *      wrap : true         // equivalent to 'wrap'\n         *      wrap : 'reverse'    // equivalent to 'wrap-reverse'\n         *  }\n         * ```\n         * @config {String|Boolean} wrap\n         * @default false\n         */\n        wrap : null\n    };\n\n    /**\n     * Set this value to `true` to set the [flex-direction](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction)\n     * style of the {@link #property-owner owner's} {@link Core.widget.Widget#property-contentElement}\n     * to `column`. Or alternatively, set {@link #config-horizontal} to `false`.\n     * @config {Boolean} vertical\n     * @default false\n     */\n    get vertical() {\n        return this.horizontal === false;\n    }\n\n    set vertical(v) {\n        return this.horizontal = !v;\n    }\n\n    updateAlign() {\n        this.syncConfigStyle(syncAlign);\n    }\n\n    updateContentAlign() {\n        this.syncConfigStyle(syncContentAlign);\n    }\n\n    updateDirection() {\n        this.syncConfigStyle(syncDirection);\n    }\n\n    updateHorizontal() {\n        const\n            me = this,\n            classList = me.contentElement?.classList,\n            vertical = Number(me.vertical);\n\n        if (classList) {\n            classList.remove(directionCls[1 - vertical]);\n            classList.add(directionCls[vertical]);\n        }\n        else {\n            me.syncConfigLater('horizontal');\n        }\n\n        me.syncDirection();\n    }\n\n    updateJustify() {\n        this.syncConfigStyle(syncJustify);\n    }\n\n    updateReverse() {\n        this.syncDirection();\n    }\n\n    updateWrap() {\n        this.syncConfigStyle(syncWrap);\n    }\n\n    syncDirection() {\n        const\n            me = this,\n            { reverse } = me;\n\n        me.direction = reverse ? `${me.vertical ? 'column' : 'row'}${reverse ? '-reverse' : ''}` : null;\n    }\n}\n\n// Layouts must register themselves so that the static layout instantiation\n// in Layout knows what to do with layout type names\nBox.initClass();\n","import Box from './Box.js';\n\n/**\n * @module Core/widget/layout/VBox\n */\n\n/**\n * A {@link Core.widget.layout.Box} layout that defaults to `horizontal : false`.\n *\n * The following:\n * ```javascript\n *  layout : {\n *      type : 'vbox'\n *  }\n * ```\n * Is equivalent to:\n * ```javascript\n *  layout : {\n *      type       : 'box',\n *      horizontal : false\n *  }\n * ```\n * @extends Core/widget/layout/Box\n * @layout\n * @classtype vbox\n */\nexport default class VBox extends Box {\n    static $name = 'VBox';\n\n    static type = 'vbox';\n\n    static configurable = {\n        horizontal : false\n    };\n}\n\n// Layouts must register themselves so that the static layout instantiation\n// in Layout knows what to do with layout type names\nVBox.initClass();\n","import Base from '../../Base.js';\n\n/**\n * @module Core/widget/mixin/Badge\n */\n\n/**\n * Mixin that allows a widget to display a badge (mostly done as css)\n *\n * ```javascript\n * // show badge\n * button.badge = 5;\n *\n * // hide badge\n * button.badge = null;\n * ```\n *\n * @inlineexample Core/widget/Badge.js\n *\n * @mixin\n */\nexport default Target => class Badge extends (Target || Base) {\n    static get $name() {\n        return 'Badge';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Get/sets and display badge, set to null or empty string to hide.\n             * @member {String} badge\n             * @category Misc\n             */\n            /**\n             * Initial text to show in badge.\n             * @config {String} badge\n             * @category Misc\n             */\n            badge : null\n        };\n    };\n\n    compose() {\n        const { badge } = this;\n\n        return {\n            dataset : {\n                badge\n            },\n            class : {\n                'b-badge' : badge != null && badge !== ''\n            }\n        };\n    }\n};\n","import Widget from './Widget.js';\nimport Badge from './mixin/Badge.js';\nimport Rotatable from './mixin/Rotatable.js';\nimport DomClassList from '../helper/util/DomClassList.js';\nimport DomHelper from '../helper/DomHelper.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\n\n//TODO: should togglebutton be own class implemented as input type=checkbox?\n//TODO: A toggling widget's focusElement should be an opacity:0 input type=checkbox which covers the clickable area.\n\n/**\n * @module Core/widget/Button\n */\n\nconst\n    bIcon             = /(?:^|\\s)b-icon-/,\n    bFa               = /(?:^|\\s)b-fa-/,\n    defaultToggleable = Symbol('defaultToggleable'),\n    fullConfigKeys    = ['items', 'type', 'widgets', 'html', 'listeners'],\n    menuListenersName = Symbol('defaultListener');\n\n/**\n * Button widget, wraps and styles a regular <code>&lt;button&gt;</code> element. Can display text and icon and also\n * allows specifying button {@link #config-color}. Supports different appearances, by setting {@link #config-cls} to one\n * of:\n *\n * * 'b-raised' - Raised buttons\n * * 'b-rounded' - Round buttons\n * * 'b-transparent' - Buttons without border or background\n *\n * ## Default appearance\n *\n * By default, buttons uses a flat look in all themes:\n *\n * {@inlineexample Core/widget/ButtonDefault.js}\n *\n * ```javascript\n * // Green button with text and icon\n * const button = new Button({\n *     appendTo : document.body,\n *     icon    : 'b-fa-plus-circle',\n *     text    : 'Add',\n *     color   : 'b-green',\n *     onClick : () => {}\n * });\n * ```\n *\n * ## Raised appearance\n *\n * By configuring a button with `cls : 'b-raised'` its appearance change. In Material the button appears raised, in the\n * other themes it is instead filled:\n *\n * {@inlineexample Core/widget/ButtonRaised.js}\n *\n * ```javascript\n * // Raised green button with text and icon\n * const button = new Button({\n *     appendTo : document.body,\n *     cls     : 'b-raised',\n *     icon    : 'b-fa-plus-circle',\n *     text    : 'Add',\n *     color   : 'b-green',\n *     onClick : () => {}\n * });\n * ```\n *\n * ## Rounded appearance\n *\n * Configure a button with `cls : 'b-rounded'` to make it round. Works best for icon only buttons or buttons with very\n * short texts:\n *\n * {@inlineexample Core/widget/ButtonRounded.js}\n *\n * ```javascript\n * // Rounded button with icon\n * const button = new Button({\n *     appendTo : document.body,\n *     cls     : 'b-raised b-rounded',\n *     icon    : 'b-fa-plus-circle',\n *     color   : 'b-green',\n *     onClick : () => {}\n * });\n * ```\n *\n * ## Transparent appearance\n *\n * Configure a button with `cls : 'b-transparent'` to display it without border or background:\n *\n * {@inlineexample Core/widget/ButtonTransparent.js}\n\n * ```javascript\n * // Transparent green button with text and icon\n * const button = new Button({\n *     appendTo : document.body,\n *     cls     : 'b-transparent',\n *     icon    : 'b-fa-plus-circle',\n *     text    : 'Add',\n *     color   : 'b-green',\n *     onClick : () => {}\n * });\n * ```\n *\n * ## Button with menu\n *\n * Buttons can also have a menu that is shown on click:\n *\n * {@inlineexample Core/widget/ButtonWithMenu.js}\n *\n * ```javascript\n * // Transparent green button with text and icon\n * const button = new Button({\n *     appendTo : document.body,\n *     icon    : 'b-fa-chart',\n *     menu    : {\n *         items : [\n *             {\n *                 text : 'Click me',\n *                 onItem : () => console.log('I was clicked')\n *             }\n *         ]\n *     }\n * });\n * ```\n *\n * ## Click handling in a complex widget\n *\n * In the case of a button which is part of a complex UI within a larger Bryntum widget, use\n * of the string form for handlers is advised. A handler which starts with `'up.'` will\n * be resolved by looking in owning widgets of the Button. For example a Calendar may\n * have handlers for its buttons configured in:\n *\n * ```javascript\n * new Calendar({\n *     appendTo : document.body,\n *     project  : myProjectConfig,\n *     sidebar  : {\n *         items : {\n *             addNew : {\n *                 weight  : 0,\n *                 text    : 'New',\n *\n *                 // The Button's ownership will be traversed to find this function name.\n *                 // It will be called on the outermost Calendar widget.\n *                 onClick : 'up.onAddNewClick'\n *             }\n *         }\n *     },\n *\n *     // Button handler found here\n *     addNewClick() {\n *         // Use Calendar API which creates event in the currently active date\n *         this.createEvent();\n *     }\n * });\n * ```\n *\n * This class may be operated by the keyboard. `Space` presses the button and invokes any\n * click handler, and `ArrowDown` activates any configured {@link #config-menu}.\n * @classType button\n * @extends Core/widget/Widget\n * @mixes Core/widget/mixin/Badge\n * @widget\n */\nexport default class Button extends Widget.mixin(Badge, Rotatable) {\n    //region Config\n    static get $name() {\n        return 'Button';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'button';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Button icon class.\n             *\n             * All [Font Awesome](https://fontawesome.com/cheatsheet) icons may also be specified as `'b-fa-' + iconName`.\n             *\n             * Otherwise this is a developer-defined CSS class string which results in the desired icon.\n             * @prp {String}\n             */\n            icon : null,\n\n            /**\n             * The menu icon class to show when the button has a menu. Set to `null` to not show a menu icon.\n             *\n             * All [Font Awesome](https://fontawesome.com/cheatsheet) icons may also be specified as `'b-fa-' + iconName`.\n             *\n             * @prp {String}\n             * @default\n             */\n            menuIcon : 'b-icon-picker',\n\n            /**\n             * Icon class for the buttons pressed state. Only applies to toggle buttons\n             *\n             * All [Font Awesome](https://fontawesome.com/cheatsheet) icons may also be specified as `'b-fa-' + iconName`.\n             *\n             * Otherwise this is a developer-defined CSS class string which results in the desired icon.\n             *\n             * ```\n             * new Button({\n             *    // Icon for unpressed button\n             *    icon        : 'b-fa-wine-glass',\n             *\n             *    // Icon for pressed button\n             *    pressedIcon : 'b-fa-wine-glass-alt',\n             *\n             *    // Only applies to toggle buttons\n             *    toggleable  : true\n             * });\n             * ```\n             *\n             * @prp {String}\n             */\n            pressedIcon : null,\n\n            /**\n             * Button icon alignment. May be `'start'` or `'end'`. Defaults to `'start'`\n             * @prp {'start'|'end'}\n             * @default\n             */\n            iconAlign : 'start',\n\n            /**\n             * The button's text.\n             * @prp {String}\n             */\n            text : {\n                value   : null,\n                $config : null,\n                default : ''\n            },\n\n            /**\n             * Button color (should have match in button.scss or your custom styling). Valid values in Bryntum themes\n             * are:\n             * * b-amber\n             * * b-blue\n             * * b-dark-gray\n             * * b-deep-orange\n             * * b-gray\n             * * b-green\n             * * b-indigo\n             * * b-lime\n             * * b-light-gray\n             * * b-light-green\n             * * b-orange\n             * * b-purple\n             * * b-red\n             * * b-teal\n             * * b-white\n             * * b-yellow\n             * Combine with specifying `b-raised` for raised/filled style (theme dependent).\n             *\n             * ```\n             * new Button({\n             *    color : 'b-teal b-raised'\n             * });\n             * ```\n             *\n             * @prp {String}\n             */\n            color : null,\n\n            /**\n             * Enabled toggling of the button (stays pressed when pressed).\n             * @prp {Boolean}\n             * @default false\n             */\n            toggleable : defaultToggleable,\n\n            /**\n             * Initially pressed or not. Only applies with `toggleable = true`.\n             * ```\n             * const toggleButton = new Button({\n             *    toggleable : true,\n             *    text : 'Enable cool action'\n             * });\n             * ```\n             * @prp {Boolean}\n             * @default\n             */\n            pressed : false,\n\n            /**\n             * Indicates that this button is part of a group where only one button can be pressed. Assigning a value\n             * also sets `toggleable` to `true`.\n             *\n             * When part of a {@link Core.widget.ButtonGroup}, you can set {@link Core.widget.ButtonGroup#config-toggleGroup}\n             * on it as an alternative to on each button. This config can then be used to override that value if needed.\n             *\n             * ```javascript\n             * const yesButton = new Button({\n             *    toggleGroup : 'yesno',\n             *    text        : 'Yes'\n             * });\n             *\n             * const noButton = new Button({\n             *    toggleGroup : 'yesno',\n             *    text        : 'No'\n             * });\n             * ```\n             * @prp {String}\n             */\n            toggleGroup : null,\n\n            ripple : {\n                radius : 75\n            },\n\n            forwardTwinEvents : ['action', 'toggle'],\n\n            localizableProperties : ['text'],\n\n            /**\n             * Returns the instantiated menu widget as configured by {@link #config-menu}.\n             * @member {Core.widget.Widget} menu\n             */\n            /**\n             * A submenu configuration object, or an array of MenuItem configuration objects from which to create a\n             * submenu which is shown when this button is pressed.\n             *\n             * Note that this does not have to be a Menu. The `type` config can be used to specify any widget as the\n             * submenu.\n             *\n             * May also be specified as a fully instantiated {@link Core.widget.Widget#config-floating floating Widget}\n             * such as a {@link Core/widget/Popup}.\n             * @config {ContainerItemConfig|MenuConfig|MenuItemConfig[]|Core.widget.Widget}\n             */\n            menu : {\n                $config : ['lazy', 'nullify'],\n                value   : null\n            },\n\n            menuDefaults : {\n                type         : 'menu',\n                autoShow     : false,\n                autoClose    : true,\n                floating     : true,\n                scrollAction : 'realign',\n                align        : 't0-b0'\n            },\n\n            /**\n             * If provided, turns the button into a link.\n             * <div class=\"note\">Not compatible with the {@link Core.widget.Widget#config-adopt} config.</div>\n             * @prp {String}\n             */\n            href : null,\n\n            /**\n             * The `target` attribute for the {@link #config-href} config\n             * @prp {String}\n             */\n            target : null,\n\n            // Our own setValues/getValues system should not set/get HTML content\n            defaultBindProperty : null\n        };\n    }\n\n    updateElement(element, oldElement) {\n        const\n            me                = this,\n            { constructor }   = me,\n            result            = super.updateElement(element, oldElement),\n            menu              = me.peekConfig('menu'),\n            role              = menu ? (menu.isWidget\n                ? menu.role\n                : (constructor.resolveType(menu.type)?.configurable?.role ||\n                   constructor.configurable.menuDefaults?.type || 'menu')\n            ) : false;\n\n        me.ariaHasPopup = role;\n\n        return result;\n    }\n\n    compose() {\n        const\n            { color, href, icon, iconAlign, pressed, pressedIcon, target, text, toggleable, toggleGroup, menuIcon } = this,\n            hasMenu = this.hasConfig('menu'),\n            iconCls = (pressed && pressedIcon) ? pressedIcon : icon;\n\n        return {\n            tag : href ? 'a' : 'button',\n            href,\n            target,\n\n            class : {\n                [`b-icon-align-${iconAlign}`] : icon,\n                [color]                       : Boolean(color),\n                'b-pressed'                   : pressed && toggleable,\n                'b-text'                      : Boolean(text),\n                'b-has-menu'                  : hasMenu\n            },\n\n            'aria-pressed' : pressed,\n\n            dataset : {\n                group : toggleGroup\n            },\n\n            listeners : {\n                click     : 'onInternalClick',\n                mousedown : 'onInternalMousedown'\n            },\n\n            children : {\n                iconElement : (icon || pressedIcon) && {\n                    // This element is a purely visual cue with no meaning to the A11Y tree\n                    'aria-hidden' : true,\n\n                    tag   : 'i',\n                    class : {\n                        ...DomClassList.normalize(iconCls, 'object'),\n                        'b-icon' : bIcon.test(iconCls),\n                        'b-fa'   : bFa.test(iconCls)\n                    }\n                },\n                label : text && {\n                    tag : 'label',\n                    text\n                },\n                menuIconElement : (hasMenu && menuIcon) && {\n                    tag   : 'i',\n                    class : {\n                        'b-icon'             : bIcon.test(menuIcon),\n                        'b-fa'               : bFa.test(menuIcon),\n                        'b-button-menu-icon' : 1,\n                        [menuIcon]           : 1\n                    }\n                }\n            }\n        };\n    }\n\n    //endregion\n\n    configureOverflowTwin(overrides) {\n        const\n            me     = this,\n            config = super.configureOverflowTwin(overrides);\n\n        // TODO - will look better but need be clever - https://github.com/bryntum/support/issues/2298\n        // config.type = type = type.resolveType('menuitem');\n\n        // Icon-only buttons are not useful in a menu.\n        // Use any tooltip text as the button text.\n        if (!config.text) {\n            config.text = me.tooltipText;\n        }\n\n        return config;\n    }\n\n    onHide() {\n        // Stop a menu from being visually orphaned if this button is hidden while its menu is visible\n        this._menu?.hide();\n    }\n\n    /**\n     * Iterate over all widgets owned by this widget and any descendants.\n     *\n     * *Note*: Due to this method aborting when the function returns `false`, beware of using short form arrow\n     * functions. If the expression executed evaluates to `false`, iteration will terminate.\n     *\n     * _Due to the {@link #config-menu} config being a lazy config and only being converted to be a\n     * `Menu` instance just before it's shown, the menu will not be part of the iteration before\n     * it has been shown once_.\n     * @function eachWidget\n     * @param {Function} fn A function to execute upon all descendant widgets.\n     * Iteration terminates if this function returns `false`.\n     * @param {Boolean} [deep=true] Pass as `false` to only consider immediate child widgets.\n     * @returns {Boolean} Returns `true` if iteration was not aborted by a step returning `false`\n     */\n\n    get childItems() {\n        return this._menu && [this.menu];\n    }\n\n    onFocusOut(e) {\n        super.onFocusOut(e);\n\n        this.menu?.hide();\n    }\n\n    //region Getters/Setters\n\n    get focusElement() {\n        return this.element;\n    }\n\n    changeText(text) {\n        return (text == null) ? '' : text;\n    }\n\n    changeToggleable(toggleable) {\n        if (toggleable === defaultToggleable) {\n            return this.toggleGroup || this.config.menu;\n        }\n\n        return toggleable;\n    }\n\n    changeMenu(menu, oldMenu) {\n        const\n            me = this,\n            { element : forElement } = me;\n\n        if (menu) {\n            if (menu.isWidget) {\n                menu.forElement = forElement;\n                menu.owner = me;\n                menu.constrainTo = me.rootElement;\n            }\n            else {\n                // This covers both Array and Object which are valid items config formats.\n                // menu could be { itemRef : { text : 'sub item 1 } }. But if it has\n                // child items or html property in it, it's the main config\n                if (typeof menu === 'object' && !fullConfigKeys.some(key => key in menu)) {\n                    menu = {\n                        lazyItems : menu\n                    };\n                }\n\n                menu = Widget.reconfigure(oldMenu, menu ? ObjectHelper.merge({\n                    owner       : me,\n                    constrainTo : me.rootElement,\n                    forElement\n                }, me.menuDefaults, menu) : null, me);\n            }\n\n            // Menu will shrink and fit inside a 10px inset of viewport.\n            // Rectangle.alignTo prioritizes alignment if the target edge is closer to\n            // the constrainTo edge than this in order to produce visually correct results.\n            menu.align.constrainPadding = 10;\n\n            me.detachListeners(menuListenersName);\n\n            // https://github.com/bryntum/support/issues/6014\n            // Before assigning new portions of listeners, make sure they don't exist already. Menu can be replaced by\n            // another instance or a configuration object.\n            menu.ion({\n                name       : menuListenersName,\n                beforeShow : 'onMenuBeforeShow',\n                hide       : 'onMenuHide',\n                show       : 'onMenuShow',\n                thisObj    : this\n            });\n        }\n        else {\n            oldMenu?.destroy();\n        }\n\n        return menu;\n    }\n\n    onMenuBeforeShow({ source }) {\n        /**\n         * This event is triggered when the button's menu is about to be shown.\n         * @event beforeShowMenu\n         * @param {Core.widget.Button} source This Button instance.\n         * @param {Core.widget.Menu} menu This button's menu instance.\n         */\n        return this.trigger('beforeShowMenu', {\n            menu : source\n        });\n    }\n\n    onMenuShow() {\n        this.ariaElement.setAttribute('aria-expanded', true);\n    }\n\n    onMenuHide() {\n        this.ariaElement.setAttribute('aria-expanded', false);\n        // We must react to its state change to hidden by becoming unpressed.\n        // If we just hid it in the toggle method, this will be a no-op.\n        this.toggle(false);\n    }\n\n    updateMenu(menu) {\n        // We are toggleable if there's a menu.\n        // Pressed means menu visible, not pressed means menu hidden.\n        this.toggleable = Boolean(menu);\n    }\n\n    updatePressed(pressed) {\n        const me = this;\n\n        if (!me.toggleable || me.isConfiguring) {\n            return;\n        }\n\n        const { menu } = me;\n\n        if (pressed) {\n            DomHelper.forEachSelector(me.rootElement, `button[data-group=${me.toggleGroup}]`, btnEl => {\n                if (btnEl !== me.element) {\n                    Widget.getById(btnEl.id).pressed = false;\n                }\n            });\n        }\n\n        if (menu) {\n            if (!menu.initialConfig.minWidth) {\n                menu.minWidth = me.width;\n            }\n\n            // The presence of a number indicates to the align constraining algorithm\n            // that it is *willing* to shrink in that dimension. It will never end up this small.\n            // Use the properties because the getter will return 0 if not set.\n            menu.align.minHeight = menu._minHeight ?? 100;\n            menu.align.minWidth  = menu._minWidth ?? 100;\n\n            menu[pressed ? 'show' : 'hide']();\n        }\n\n        /**\n         * Fires when the button is toggled via a UI interaction (the {@link #property-pressed} state is changed). If the button is part of a\n         * {@link #config-toggleGroup} and you need to process the pressed button only, consider using\n         * {@link #event-click} event or {@link #event-action} event.\n         * @event toggle\n         * @param {Core.widget.Button} source Toggled button\n         * @param {Boolean} pressed New pressed state\n         */\n        me.trigger('toggle', { pressed });\n    }\n\n    //endregion\n\n    //region Events\n\n    onInternalMousedown(event) {\n        // Do not allow focus to hide the menu if it's focused - the impending click must do that.\n        // Use the _property name because menu is lazy and we do not want to call it into existence.\n        if (this._menu?.containsFocus && this.pressed) {\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * Triggers events when user clicks button\n     * @fires click\n     * @fires action\n     * @internal\n     */\n    onInternalClick(event) {\n        const\n            me           = this,\n            bryntumEvent = { event };\n\n        // Safari && FF trigger click on disabled button, Chrome does not. Handling it here\n        if (me.disabled) {\n            return;\n        }\n\n        if (me.toggleable) {\n            // Clicking the pressed button in a toggle group should do nothing\n            if (me.toggleGroup && me.pressed) {\n                return;\n            }\n\n            me.toggle(!me.pressed);\n\n            // Edge case in dragfromgrid demo, where toggling mode destroys the Scheduler and thus destroys the toolbar\n            // and the button in it\n            if (me.isDestroyed) {\n                return;\n            }\n        }\n\n        /**\n         * Fires when the button is clicked\n         * @event click\n         * @param {Core.widget.Button} source The button\n         * @param {Event} event DOM event\n         */\n        me.trigger('click', bryntumEvent);\n\n        /**\n         * Fires when the default action is performed (the button is clicked)\n         * @event action\n         * @param {Core.widget.Button} source The button\n         * @param {Event} event DOM event\n         */\n        // A handler may have resulted in destruction.\n        if (!me.isDestroyed) {\n            me.trigger('action', bryntumEvent);\n        }\n\n        // since Widget has Events mixed in configured with 'callOnFunctions' this will also call onClick and onAction\n\n        if (!me.href) {\n            // stop the event since it has been handled\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    //endregion\n\n    //region Misc\n\n    /**\n     * Toggle button state (only use with toggleable = true)\n     * @param {Boolean} pressed Specify to force a certain toggle state\n     * @fires toggle\n     */\n    toggle(pressed = !this.pressed) {\n        /**\n         * Fires before the button is toggled (the {@link #property-pressed} state is changed). If the button is part of a\n         * {@link #config-toggleGroup} and you need to process the pressed button only, consider using\n         * {@link #event-click} event or {@link #event-action} event.\n         * Return `false` to prevent the toggle to the new pressed state.\n         * @event beforeToggle\n         * @param {Core.widget.Button} source Toggled button\n         * @param {Boolean} pressed New pressed state\n         * @preventable\n         */\n        if (this.trigger('beforeToggle', { pressed }) !== false) {\n            this.pressed = pressed;\n        }\n    }\n\n    //endregion\n}\n\n// Register this widget type with its Factory\nButton.initClass();\n","import Container from './Container.js';\nimport Toolable from './mixin/Toolable.js';\nimport FunctionHelper from '../helper/FunctionHelper.js';\nimport ArrayHelper from '../helper/ArrayHelper.js';\nimport DomHelper from '../helper/DomHelper.js';\n\nimport { canonicalDock } from './mixin/Rotatable.js';\n\nimport './layout/VBox.js';\nimport './Button.js';\n\n/**\n * @module Core/widget/Toolbar\n */\n\nconst\n    asElementRefs = { refs : 'element' },\n    onCreateTwin  = overflowTwin => overflowTwin.element.style.margin = '',\n    isToolbar     = w => w.isToolbar,\n    itemScoreFn   = ent => ent[0] + (ent[1].minifiable ? 0 : 9e9),\n    twinOverrides = {\n        // If the initialConfig was hidden, we must override that\n        hidden : false,\n\n        // Item must obey menu's align-items : stretch style.\n        width : ''\n    },\n    twinOverridesHorz = {\n        ...twinOverrides,\n\n        // Don't allow horizontal flex styles to apply in the vertical layout of the Menu.\n        flex : ''\n    },\n    _axisProps = [{\n        box            : 'hbox',\n        clientSizeProp : 'clientWidth',\n        edgeProp       : 'right',\n        flexDir        : 'row',\n        horizontal     : true,\n        max            : 'maxX',\n        overflow       : 'overflowX',\n        pos            : 'x',\n        scrollSize     : 'scrollWidth',\n        sizeProp       : 'width'\n    }, {\n        box            : 'vbox',\n        clientSizeProp : 'clientHeight',\n        edgeProp       : 'bottom',\n        flexDir        : 'column',\n        horizontal     : false,\n        max            : 'maxY',\n        overflow       : 'overflowY',\n        pos            : 'y',\n        scrollSize     : 'scrollHeight',\n        sizeProp       : 'height'\n    }],\n    defaultRepeat = {\n        delay              : 0,\n        startRate          : 40,\n        endRate            : 200,\n        accelerateDuration : 500\n    },\n    nonSyncedConfigs = {\n        menu    : 1,\n        pressed : 1\n    };\n\n/**\n * A container widget that can contain Buttons or other widgets, and is docked to the bottom or top of\n * a {@link Core.widget.Panel Panel}.\n *\n * {@inlineexample Core/widget/Toolbar.js}\n *\n * ## Arranging widgets\n *\n * You can use the special `->` item to push widgets to the right side:\n *\n * ```javascript\n * items    : [\n *     { text : 'Left button 1', icon : 'b-fa b-fa-plus' },\n *     { text : 'Left button 2', icon : 'b-fa b-fa-minus' },\n *     '->',\n *     { text : 'Right button 1', icon : 'b-fa b-fa-gear'}\n * ]\n * ```\n * {@inlineexample Core/widget/ToolbarPositioning.js}\n *\n *\n * @extends Core/widget/Container\n * @mixes Core/widget/mixin/Toolable\n * @classType toolbar\n * @widget\n */\nexport default class Toolbar extends Container.mixin(Toolable) {\n    static get $name() {\n        return 'Toolbar';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'toolbar';\n    }\n\n    static get delayable() {\n        return {\n            syncOverflowVisibility : {\n                type              : 'raf',\n                cancelOutstanding : true\n            } // && 50   // restore the \"&& 50\" here to help when debugging syncOverflowVisibility\n        };\n    }\n\n    static get configurable() {\n        return {\n            defaultType : 'button',\n\n            dock : 'top',\n\n            layout : {\n                type : 'box'\n            },\n\n            /**\n             * How this Toolbar should deal with items that overflow its main axis.\n             *\n             * Values may be:\n             * - `'menu'` A button with a menu is shown and the menu contains the overflowing items.\n             * - `'scroll'` The items overflow and mey be scrolled into view using the mouse or scroll buttons.\n             * - `null` Disable overflow handling\n             *\n             * When mode is `'menu'`, clones of overflowing toolbar item are created and added to a Menu. Any config\n             * changes to the original toolbar item are propagated to the menu's clone, so disabling a toolbar\n             * item will make the clone in the menu disabled.\n             *\n             * The clone of an input field will propagate its `value` changes back to the original. The\n             * overflow button, its menu, and the clones should not be accessed or manipulated by application code.\n             *\n             * Note that cloned items will be allocated a unique, generated ID because all IDs must be unique,\n             * so CSS targeting an element ID will not apply to a clone in the overflow menu.\n             *\n             * Values may also be specified in object form containing the following properties:\n             * @config {String|Object|null} overflow\n             * @property {'scroll'|'menu'} overflow.type `'scroll'` or `'menu'`\n             * @property {ClickRepeaterConfig} overflow.repeat A config object to reconfigure the\n             * {@link Core.util.ClickRepeater} which controls auto repeat speed when holding down the scroll buttons\n             * when `type` is `'scroll'`\n             * @property {Function} overflow.filter A filter function which may return a falsy value to prevent toolbar\n             * items from being cloned into the overflow menu.\n             * @default 'menu'\n             */\n            overflow : {\n                // Wait until first paint to evaluate so that we can read our CSS style.\n                // Set to null on destroy which destroys the overflow Tools and Scroller.\n                $config : ['lazy', 'nullify'],\n                value   : {\n                    type : 'menu'\n                }\n            },\n\n            toolDefaults : {\n                overflowMenuButton : {\n                    type     : 'button',\n                    hidden   : true,\n                    icon     : 'b-icon-menu',\n                    menuIcon : null,\n\n                    defaultCls : {\n                        'b-overflow-button' : 1\n                    }\n                },\n\n                overflowScrollEnd : {\n                    handler : 'up.onEndScrollClick',\n                    hidden  : true,\n\n                    defaultCls : {\n                        'b-icon-angle-right' : 1,\n                        'b-overflow-button'  : 1,\n                        'b-icon'             : 1\n                    }\n                },\n\n                overflowScrollStart : {\n                    align   : 'start',\n                    handler : 'up.onStartScrollClick',\n                    hidden  : true,\n\n                    defaultCls : {\n                        'b-icon-angle-left' : 1,\n                        'b-overflow-button' : 1,\n                        'b-icon'            : 1\n                    }\n                }\n            },\n\n            /**\n             * Custom CSS class to add to toolbar widgets\n             * @config {String}\n             * @category CSS\n             */\n            widgetCls : null,\n\n            /**\n             * Determines if the toolbars read-only state should be controlled by its parent.\n             *\n             * When set to `false`, setting a parent container to read-only will not affect the widget. When set to\n             * `true`, it will.\n             *\n             * @category Misc\n             * @config {Boolean}\n             * @default\n             */\n            ignoreParentReadOnly : true\n        };\n    }\n\n    static get prototypeProperties() {\n        return {\n            flexRowCls : 'b-hbox',\n            flexColCls : 'b-vbox'\n        };\n    }\n\n    /**\n     * Returns the Core.widget.Widget[] of items to hide to clear an overflow. The `visibleItems` array should be in\n     * order of the `items` in the container.\n     * @param {Core.widget.Widget[]} visibleItems\n     * @returns {Array}\n     * @private\n     */\n    static getEvictionList(visibleItems) {\n        // this is a static method to allow unit testing\n        const ret = visibleItems.filter(it => it.overflowable !== 'none');\n\n        ret.forEach((it, n) => ret[n] = [n, it]);\n        ret.sort((a, b) => itemScoreFn(b) - itemScoreFn(a));  // b - a => reverse order\n\n        return ret;\n    }\n\n    compose() {\n        const\n            me = this,\n            { axisProps, dock } = me,\n            endToolElementRefs = me.getEndTools(asElementRefs),\n            startToolElementRefs = me.getStartTools(asElementRefs);\n\n        return {\n            class : {\n                [`b-dock-${dock}`]     : 1,\n                [`b-${dock}-toolbar`]  : 1,\n                [`b-${axisProps.box}`] : 1\n            },\n\n            children : {\n                ...startToolElementRefs,\n                toolbarContent : {\n                    class : {\n                        'b-box-center'      : 1,\n                        'b-toolbar-content' : 1\n                    }\n                },\n                ...endToolElementRefs\n            }\n        };\n    }\n\n    get axisProps() {\n        return _axisProps[this.layout.horizontal ? 0 : 1];\n    }\n\n    get contentElement() {\n        return this.toolbarContent;\n    }\n\n    get overflowMenuButton() {\n        return this.tools?.overflowMenuButton;\n    }\n\n    get overflowType() {\n        const { overflow } = this;\n\n        return (typeof overflow === 'string') ? overflow : overflow?.type;\n    }\n\n    onChildAdd(item) {\n        super.onChildAdd(item);\n\n        this.processAddedLeafItem(item);\n\n        item.syncRotationToDock?.(this.dock);\n    }\n\n    onChildRemove(item) {\n        super.onChildRemove(item);\n        this.syncOverflowVisibility();\n    }\n\n    processAddedLeafItem(item) {\n        // Any configurable config changes in the original are propagated to a possible clone.\n        // Also a reevaluation of scroll state may be necessary. Any part of the UI may have changed,\n        FunctionHelper.after(item, 'onConfigChange', this.onLeafItemConfigChange, item);\n\n        // And all the way down. Eg, hiding a ButtonGroup must schedule a syncOverflowVisibility\n        // but also hiding any of its children must also schedule a syncOverflowVisibility\n        if (item.isContainer) {\n            item.eachWidget(w => this.processAddedLeafItem(w));\n        }\n    }\n\n    onPaint({ firstPaint }) {\n        super.onPaint?.(...arguments);\n\n        // Evaluate the overflow late so that we have access to styles and measurements.\n        if (firstPaint) {\n            this.getConfig('overflow');\n        }\n    }\n\n    updateDock(dock) {\n        const\n            me = this,\n            { layout } = me,\n            { vertical } = layout;\n\n        layout.vertical = canonicalDock(dock)[1];\n\n        if (!me.initialItems) {\n            if (vertical !== layout.vertical) {\n                me.updateOverflow(me.overflow);\n            }\n\n            for (const item of me.childItems) {\n                item.syncRotationToDock?.(dock);\n            }\n        }\n    }\n\n    updateOverflow(overflow, oldOverflow) {\n        const\n            me                                          = this,\n            { axisProps, contentElement, overflowType } = me,\n            { flexDir }                                 = axisProps,\n            overflowMenu                                = me.overflowMenuButton?._menu,\n            overflowTools                               = {};\n\n        if (overflowMenu) {\n            if (overflow) {\n                // Save the overflowTwins from destruction\n                overflowMenu?.removeAll();\n            }\n            else {\n                // Break link between original and clone\n                overflowMenu.eachWidget(overflowTwin => {\n                    overflowTwin._overflowTwinOrigin.overflowTwin = null;\n                });\n            }\n        }\n\n        if (oldOverflow === 'menu') {\n            overflowTools.overflowMenuButton = null;\n        }\n        else if (oldOverflow === 'scroll') {\n            overflowTools.overflowScrollStart = overflowTools.overflowScrollEnd = null;\n        }\n\n        if (overflowType === 'menu') {\n            // Not needed for menu type overflowing\n            me.scrollable?.destroy();\n\n            // Must allow things like Badges to escape the bounds.\n            contentElement.style.overflow =\n                contentElement.style.overflowX =\n                    contentElement.style.overflowY = '';\n\n            overflowTools.overflowMenuButton = {\n                cls : {\n                    [`b-${flexDir}-menu`] : 1\n                }\n            };\n        }\n        else if (overflowType === 'scroll') {\n            const repeat = ((typeof overflow === 'object') && overflow?.repeat) || defaultRepeat;\n\n            // We need a scroller.\n            me.scrollable = {\n                [axisProps.overflow] : 'hidden-scroll',\n                element              : contentElement,\n                internalListeners    : {\n                    scroll  : 'onContentScroll',\n                    thisObj : me\n                }\n            };\n\n            overflowTools.overflowScrollStart = {\n                repeat,\n                invertRotate : true,\n                cls          : {\n                    [`b-${flexDir}-start-scroller`] : 1\n                }\n            };\n\n            overflowTools.overflowScrollEnd = {\n                repeat,\n                invertRotate : true,\n                cls          : {\n                    [`b-${flexDir}-end-scroller`] : 1\n                }\n            };\n        }\n\n        me.tools = overflowTools;\n\n        if (overflowType) {\n            // Stops items from flex-shrinking down now that we have a way of showing them in full.\n            contentElement.classList.add('b-overflow');\n\n            // Need to hide/show overflow buttons when necessary\n            me.monitorResize = true;\n            me.syncOverflowVisibility();\n        }\n        else {\n            contentElement.classList.remove('b-overflow');\n            me.monitorResize = false;\n        }\n    }\n\n    onContentScroll() {\n        this.syncScrollerState();\n    }\n\n    onStartScrollClick() {\n        this.scrollable[this.axisProps.pos] -= 2;\n    }\n\n    onEndScrollClick() {\n        this.scrollable[this.axisProps.pos] += 2;\n    }\n\n    // Only called when monitorResize is true, which is only set when we have an overflow mode\n    onInternalResize() {\n        super.onInternalResize(...arguments);\n\n        // If it's not the initial undefined->first size from the initial paint, reevaluate overflow\n        if (this.isPainted) {\n            this.syncOverflowVisibility();\n        }\n    }\n\n    syncOverflowVisibility() {\n        const\n            me = this,\n            { overflowType, contentElement, isVisible } = me,\n            { clientSizeProp, edgeProp, sizeProp } = me.axisProps,\n            { overflowMenuButton, overflowScrollStart, overflowScrollEnd } = me.tools,\n            rtl = me.rtl && me.layout.horizontal,\n            menuOverflow  = overflowType === 'menu',\n            getAvailSpace = () => Math.ceil(\n                contentElement[clientSizeProp] +\n                // Since we cannot simply hide these to remove their influence, we need to add their width/height:\n                ((!overflowScrollStart || overflowScrollStart.hidden) ? 0 : overflowScrollStart.rectangle('outer')[sizeProp]) +\n                ((!overflowScrollEnd || overflowScrollEnd.hidden) ? 0 : overflowScrollEnd.rectangle('outer')[sizeProp])\n            ),\n            getContentSize = () => {\n                if (visibleItems.length === 0) {\n                    return 0;\n                }\n                // Firefox doesn't calculate scrollWidth correctly if overflow is hidden which it has to be. To get\n                // around this, we use the edge of the most \"extreme\" widget (the one laid out last in the flow)\n                const rect = visibleItems[visibleItems.length - 1].rectangle(contentElement);\n\n                // Elements in an RTL ct are basically at right:0 and then have increasing right coordinates. To see\n                // how much space is occupied we subtract the left edge of the last widget (which may be negative) from\n                // the rightmost side of the contentElement container (i.e., the width).\n                return Math.floor(rtl ? contentElement[clientSizeProp] - rect.left : rect[edgeProp]);  // right or bottom\n                // we use Math.floor() to discard fractional px sizes of content (it is ok to just clip that)\n            };\n\n        let availableSpace, contentSize, eviction, evictionList, it, itemSize, minifiable, minifiables, minified,\n            overflowable, overflowItems, visibleItems;\n\n        // Method can be called for hidden toolbar (e.g. after event editor is hidden), bail out early in such case\n        if (!isVisible || !overflowType || me.items.length === 0) {\n            return;\n        }\n\n        // Prevent recursion\n        me.inSyncOverflowVisibility = true;\n\n        // Give the contents a chance to lay out with no scroll tools taking space.\n        overflowMenuButton?.hide();\n        // NOTE: if we hide the scroller buttons that will affect the scroll range and can trigger a scroll. The scroll\n        // does not fire synchronously (at least in Chrome) so it cannot be swallowed here.\n\n        // Iterate all leaf widgets.\n        // Restore only the ones that we hid to visibility so that we can accurately ascertain overflow.\n        // Collect all visible leaf widgets. These are what we are interested in hiding and showing.\n        // Anything may have changed. Text inside buttons, label of fields, visibility or\n        // disabled status. The only way to ascertain overflow is to show them all, and\n        // force a synchronous layout by measuring the resulting scrollWidth/Height\n        me.eachWidget((item, control) => {\n            minifiable = item.minifiable;\n            // We want to descend into containers (esp ButtonGroup) but don't want to descend into normal widgets (like\n            // button's which may have menus).\n            overflowable = item.overflowable;\n            // falsy overflowable normally means to descend into its items, but if item is minifiable, we do not\n            // descend into the widget. It becomes all or nothing just like overflowable:true. Since overflowable can\n            // also be set to 'none', we need to keep whatever it has for a value if truthy.\n            overflowable = minifiable ? overflowable || minifiable : overflowable;\n\n            if (item.floating) {\n                // not in the flow of the container (i.e., no space occupied in the way we handle it), so skip\n                control.down = false;\n            }\n            else {\n                control.down = !overflowable;\n\n                if (item.innerItem) {\n                    // Undo whatever we may have done to the items on a previous cycle:\n                    if (item._toolbarOverflow) {\n                        // Order is important here. _toolbarOverflow must be set first\n                        // so that onLeafItemConfigChange doesn't recurse infinitely.\n                        item.hidden = item._toolbarOverflow = false;\n                    }\n\n                    if (item._toolbarMinified) {\n                        // Order is important here. _toolbarMinified must be set first\n                        // so that onLeafItemConfigChange doesn't recurse infinitely.\n                        item.minified = item._toolbarMinified = false;\n                    }\n\n                    if (item.isVisible) {\n                        minifiable && (minifiables || (minifiables = [])).push(item);\n                        overflowable && (visibleItems || (visibleItems = [])).push(item);\n                    }\n                }\n            }\n        });\n\n        if (visibleItems) {\n            availableSpace = getAvailSpace(); // get the size of the content area\n            contentSize = getContentSize();\n        }\n\n        if (visibleItems && contentSize > availableSpace) {\n            if (menuOverflow) {\n                /*\n                      |◄──────────────────────────────── contentSize ──────────────────────────────────►|\n                    ┌──────────────────────────────────────────────────────────────────────────────┐\n                    │┌────────────┐┌────────────┐┌────────────┐┌────────────┐┌────────────┐┌────────────┐\n                    ││ visItem[0] ││ visItem[1] ││ visItem[2] ││ visItem[3] ││ visItem[4] ││ visItem[5] │\n                    │└────────────┘└────────────┘└────────────┘└────────────┘└────────────┘└────────────┘\n                    └──────────────────────────────────────────────────────────────────────────────┘\n                                                            │\n                                                            ▼\n                    ┌──────────────────────────────────────────────────────────────────────────────┐\n                    │                                                                         ┌───┐│\n                    │                                                                         │ = ││\n                    │                                                                         └─▲─┘│\n                    └───────────────────────────────────────────────────────────────────────────│──┘\n                    |◄──────────────────────────── availableSpace ──────────────────────────►|  │\n                                                                                                │\n                                                                                          overflowMenuButton\n\n                    If any of the visibleItems is marked as \"overflow = 'none'\" then we skip it, and its size must\n                    be accommodated by hiding other items. This means we cannot use item edges to determine when we\n                    have cleared enough space, so we just use sizes (and mind the gap).\n\n                    For example, visibleItem[5] has overflowable='none', so [4] gets hidden:\n\n                    ┌──────────────────────────────────────────────────────────────────────────────┐\n                    │┌────────────┐┌────────────┐┌────────────┐┌────────────┐┌────────────┐   ┌───┐│\n                    ││ visItem[0] ││ visItem[1] ││ visItem[2] ││ visItem[3] ││ visItem[5] │   │ = ││\n                    │└────────────┘└────────────┘└────────────┘└────────────┘└────────────┘   └───┘│\n                    └──────────────────────────────────────────────────────────────────────────────┘\n                */\n\n                // Minify the minifiables (starting at the end) and see if that frees up enough space\n                while (contentSize > availableSpace && (it = minifiables?.pop())) {\n                    itemSize = contentSize;\n\n                    // Order is important here. _toolbarMinified must be set first\n                    // so that onLeafItemConfigChange doesn't recurse infinitely.\n                    it._toolbarMinified = true;\n                    it.minified = true;\n\n                    contentSize = getContentSize();\n                    itemSize -= contentSize;  // number of px saved by minification\n\n                    // Remember these fellows since we may be able to revert their minification\n                    (minified || (minified = [])).push([it, itemSize]);\n                }\n\n                if (contentSize > availableSpace) {\n                    // Not enough space, so we'll need that overflow button (most likely)\n                    overflowMenuButton.show();\n                    availableSpace = getAvailSpace(); // get the new size of the content area\n\n                    // Process the visibleItems (starting from the end) and see if any are willing to be moved to the\n                    // overflow menu. We prefer to keep the minifiables\n                    evictionList = Toolbar.getEvictionList(visibleItems);\n\n                    for (eviction of evictionList) {\n                        if (contentSize > availableSpace) {\n                            it = eviction[1];\n                            it._toolbarOverflowWidth = it.width;\n\n                            // Order is important here. _toolbarOverflow must be set first\n                            // so that onLeafItemConfigChange doesn't recurse infinitely.\n                            it._toolbarOverflow = true;\n                            it.hidden = true;   // hide things as we go to make getContentSize() work\n\n                            visibleItems.splice(visibleItems.indexOf(it), 1);  // also important for getContentSize()\n\n                            // Remember these pairs of [itemIndex, item] as we hide them so that we can add them to the\n                            // menu in the correct order (the itemIndex is used make the menu item order match the\n                            // toolbar order since this won't match the eviction order)\n                            (overflowItems || (overflowItems = [])).push(eviction);\n\n                            contentSize = getContentSize();\n                        }\n                    }\n\n                    if (overflowItems) {\n                        // Restore the items to the order in the toolbar and unwrap the entries to be just widgets\n                        overflowItems.sort((a, b) => a[0] - b[0]).forEach((ent, n) => overflowItems[n] = ent[1]);\n\n                        // Space was created by moving items out... see if we can unminify any minified items. This\n                        // is a FIFO so we revert from the start, but we'll revert any items we can. We just give\n                        // priority to items as we go from start to end.\n                        while (minified?.length) {\n                            [it, itemSize] = minified.pop();\n\n                            // In dire cases we'll hide minified items, so check to see if the item is in the\n                            // overflowItems bucket and ignore it if so:\n                            if (contentSize + itemSize <= availableSpace && !it._toolbarOverflow) {\n                                contentSize += itemSize;\n                                it.minified = it._toolbarMinified = false;\n                            }\n                        }\n\n                        me.syncOverflowMenuButton(overflowItems);\n                    }\n                    else {\n                        overflowMenuButton.hide();  // no items were willing to move into the overflow menu...\n                    }\n                }\n            }\n            else {\n                overflowScrollEnd.show();\n                overflowScrollStart.show();\n                me.syncScrollerState();\n            }\n        }\n        else if (!menuOverflow) {\n            overflowScrollEnd?.hide();\n            overflowScrollStart?.hide();\n        }\n\n        me.inSyncOverflowVisibility = false;\n    }\n\n    syncOverflowMenuButton(overflowItems) {\n        const\n            me = this,\n            { axisProps, overflowMenuButton } = me,\n            menu = {\n                cls      : 'b-toolbar-overflow-menu',\n                minWidth : 280,\n                items    : [],\n                align    : {\n                    align    : axisProps.horizontal ? 't100-b100' : 'r100-l100',\n                    axisLock : 'flexible'\n                }\n            };\n\n        // Add clones, or surrogates of the overflowing things to the menu.\n        // Input fields will be cloned, buttons will result in a MenuItem.\n        // Any Containers\n        me.addToMenu(menu, overflowItems.filter(item => me.overflowItemFilter(item)));\n\n        if (overflowMenuButton._menu?.isMenu) {\n            const\n                existingMenu = overflowMenuButton.menu,\n                {\n                    toAdd,\n                    toRemove\n                } = ArrayHelper.delta(menu.items, existingMenu.items, 1);\n\n            existingMenu.remove(toRemove);\n\n            if (existingMenu.items.length) {\n                // Insert the ones which we just got too narrow to show at the top of the menu\n                for (let i = toAdd.length - 1; i >= 0; i--) {\n                    existingMenu.insert(toAdd[i], 0);\n                }\n            }\n            else {\n                existingMenu.add(toAdd);\n            }\n        }\n        else {\n            overflowMenuButton.menu = menu;\n        }\n    }\n\n    syncScrollerState() {\n        const\n            me            = this,\n            { axisProps, scrollable } = me,\n            { overflowScrollStart, overflowScrollEnd } = me.tools,\n            scrollPos    = scrollable[axisProps.pos],\n            maxScrollPos = scrollable[axisProps.max];\n\n        overflowScrollStart.disabled = !scrollPos;\n        // abs for rtl, which uses negative values\n        overflowScrollEnd.disabled = Math.abs(Math.ceil(scrollPos)) >= Math.abs(maxScrollPos);\n    }\n\n    overflowItemFilter(item) {\n        const { filter } = this.overflow;\n\n        return Boolean(filter\n            // Allow user-defined filter\n            ? filter.call(this, item)\n            // If no Elements, for example displaying text which will have a Node type 3\n            // or a toolbar spacer or separator, then omit it from the menu\n            : DomHelper.getChildElementCount(item.element));\n    }\n\n    addToMenu(menu, overflowingItems) {\n        const overrides = this.horizontal ? twinOverridesHorz : twinOverrides;\n\n        for (const item of overflowingItems) {\n            const overflowTwin = item.ensureOverflowTwin(overrides, onCreateTwin);\n\n            menu.items.push(overflowTwin);\n        }\n    }\n\n    // Note that this is called with the thisObj of the tbar item being reconfigured.\n    // It propagates the new setting into its toolbar overflow clone.\n    onLeafItemConfigChange(origResult, { name, value }) {\n        const\n            item              = this,\n            toolbar           = item.up(isToolbar),\n            overflow          = toolbar.hasConfig('overflow'),\n            { overflowTwin } = item;\n\n        // If it's a hide/show, and its in sync with its _toolbarOverflow state, do nothing\n        if (!overflow || toolbar?.inSyncOverflowVisibility || (name === 'hidden' && value === item._toolbarOverflow)) {\n            return;\n        }\n\n        // If the changed item has a clone in the overflow menu and the config is not one\n        // of the unshared ones, sync the clone\n        if (overflowTwin && !nonSyncedConfigs[name]) {\n            overflowTwin[name] = value;\n        }\n\n        // Any part of the UI might have changed shape, so we must reevaluate scroll state.\n        if (toolbar?.isPainted && item.ref !== 'overflowMenuButton') {\n            if (!(item.isTextField && name === 'value' && (item.containsFocus || overflowTwin?.containsFocus))) {\n                toolbar.syncOverflowVisibility();\n            }\n        }\n    }\n\n    createWidget(widget) {\n        if (widget === '->') {\n            widget = {\n                type : 'widget',\n                cls  : 'b-toolbar-fill'\n            };\n        }\n        else if (widget === '|') {\n            widget = {\n                type : 'widget',\n                cls  : 'b-toolbar-separator'\n            };\n        }\n        else if (typeof widget === 'string') {\n            widget = {\n                type : 'widget',\n                cls  : 'b-toolbar-text',\n                html : widget\n            };\n        }\n\n        const result = super.createWidget(widget);\n\n        if (this.widgetCls) {\n            result.element.classList.add(this.widgetCls);\n        }\n\n        return result;\n    }\n}\n\n// Register this widget type with its Factory\nToolbar.initClass();\n","import Container from './Container.js';\nimport Widget from './Widget.js';\nimport PanelCollapser from './panel/PanelCollapser.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\nimport EventHelper from '../helper/EventHelper.js';\nimport DomClassList from '../helper/util/DomClassList.js';\nimport DomHelper from '../helper/DomHelper.js';\nimport FunctionHelper from '../helper/FunctionHelper.js';\nimport DynamicObject from '../util/DynamicObject.js';\nimport State from '../mixin/State.js';\nimport Toolable from './mixin/Toolable.js';\n\nimport './Toolbar.js';\n\n/**\n * @module Core/widget/Panel\n */\n\n/**\n * An object that describes a Panel's header.\n *\n * @typedef {Object} PanelHeader\n * @property {String|Object} [cls] Additional CSS class or classes to add to the header element.\n * @property {'top'|'right'|'bottom'|'left'} [dock=\"top\"] Specify \"left\", \"bottom\", or \"right\" to control panel edge to which the header docks.\n * @property {String} title\n * @property {'start'|'center'|'end'} [titleAlign=\"start\"] Specify \"center\" or \"end\" to align the panel's title differently.\n */\n\nconst\n    acceptNode      = e => !e.classList.contains('b-focus-trap') && DomHelper.isFocusable(e) ? DomHelper.NodeFilter.FILTER_ACCEPT : DomHelper.NodeFilter.FILTER_SKIP,\n    emptyArray      = [],\n    emptyObject     = {},\n    emptySplit      = [emptyArray, emptyArray],\n\n    finishBodyWrap = (config, classes, final) => {\n        const { vertical } = config;\n\n        delete config.vertical;\n\n        return {\n            ...config,\n            class : {\n                ...classes,\n                [`b-${vertical ? 'v' : 'h'}box`] : 1,\n                'b-box-center'                   : 1,\n                'b-panel-bar-wrap'               : !final\n            }\n        };\n    },\n\n    wrapBody = (inner, bodyWrapTag, vertical = false) => {\n        const wrap = {\n            vertical,\n            children : inner ? [inner] : []\n        };\n\n        if (bodyWrapTag) {\n            wrap.tag = bodyWrapTag;\n        }\n\n        return wrap;\n    },\n\n    barConfigs = {\n        dock   : 1,\n        hidden : 1,\n        weight : 1\n    },\n\n    dockDirection = {\n        //       [vertical, before]\n        top    : [true, true],\n        bottom : [true, false],\n        left   : [false, true],\n        right  : [false, false]\n    },\n\n    headerDock = {\n        header       : 1,\n        'pre-header' : 1\n    };\n\n/**\n * Panel widget. A general purpose container which may be used to contain child {@link Core.widget.Container#config-items}\n * or {@link Core.widget.Widget#config-html}.\n *\n * Also may dock a {@link #config-header} and {@link #config-footer} either at top/bottom or left/right\n *\n * @example\n * let panel = new Panel({\n *   title : 'A Test Panel',\n *   items : {\n *     customerName : { type : 'text', placeholder: 'Text' },\n *   },\n *   bbar : {\n *     items : {\n *       proceedButton : {\n *         text : 'Proceed',\n *         onClick : () => {\n *           alert('Proceeding!');\n *         }\n *       }\n *     }\n * });\n *\n * @classType panel\n *\n * @mixes Core/mixin/State\n * @mixes Core/widget/mixin/Toolable\n * @extends Core/widget/Container\n * @inlineexample Core/widget/Panel.js\n * @widget\n */\nexport default class Panel extends Container.mixin(State, Toolable) {\n    //region Config\n    static get $name() {\n        return 'Panel';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'panel';\n    }\n\n    static get configurable() {\n        return {\n            localizableProperties : ['title'],\n\n            /**\n             * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is\n             * visible). Only valid if the panel is {@link #config-collapsible}.\n             * @config {Boolean}\n             * @category Layout\n             */\n            collapsed : {\n                value   : null,\n                $config : null,\n                default : false\n            },\n\n            /**\n             * This config enables collapsibility for the panel. See {@link #config-collapsed}.\n             *\n             * For example:\n             * ```javascript\n             *      {\n             *          type        : 'panel',\n             *          collapsible : true\n             *      }\n             * ```\n             * This is managed by an instance of {@link Core.widget.panel.PanelCollapser} which can be configured if an\n             * object is passed for this config property:\n             * ```javascript\n             *      {\n             *          type        : 'panel',\n             *          collapsible : {\n             *              direction : 'left'\n             *          }\n             *      }\n             * ```\n             * @config {Boolean|Core.widget.panel.PanelCollapser}\n             * @category Layout\n             */\n            collapsible : {\n                value   : null,\n                $config : 'nullify'\n            },\n\n            /**\n             * Custom CSS classes to add to the panel's body element.\n             *\n             * May be specified as a space separated string, or as an object in which property names\n             * with truthy values are used as the class names:\n             *\n             * ```javascript\n             *  bodyCls : {\n             *      'b-my-class'     : 1,\n             *      [this.extraCls]  : 1,\n             *      [this.activeCls] : this.isActive\n             *  }\n             *  ```\n             *\n             * @config {String|Object}\n             * @category CSS\n             */\n            bodyCls : {\n                $config : {\n                    merge : 'classList'\n                },\n\n                value : null\n            },\n\n            bodyTag     : null,\n            bodyWrapTag : null,\n\n            /**\n             * By default, tabbing within a Panel is not contained, ie you can TAB out of the Panel\n             * forwards or backwards.\n             * Configure this as `true` to disallow tabbing out of the Panel, and make tabbing circular within this Panel.\n             * @config {Boolean}\n             * @default false\n             * @category Content\n             */\n            trapFocus : null,\n\n            /**\n             * Get/set this Panel's title. This may only be set when a header exists. If a header\n             * has been disabled by configuring the {@link #config-header} as `false`, setting it\n             * will have no effect.\n             * @member {String} title\n             */\n            /**\n             * A title to display in the header. Causes creation and docking of a header\n             * to the top if no header is configured.\n             *\n             * If specified, overrides any title configured within the {@link #config-header} configuration.\n             * @default\n             * @config {String}\n             * @category Content\n             */\n            title : null,\n\n            /**\n             * A config {@link PanelHeader object} for the panel's header or a string in place of a `title`.\n             *\n             * Configuring this as `false` explicitly removes the header bar, overriding any\n             * {@link #config-tools} or {@link #config-title} configs.\n             * @default\n             * @config {String|Boolean|PanelHeader}\n             * @category Content\n             */\n            header : null,\n\n            stateful : ['collapsed'],\n\n            /**\n             * An object containing config defaults for corresponding {@link #config-strips} objects with a matching name.\n             *\n             * By default, this object contains the keys `'bbar'` and `'tbar'` to provide default config values for the\n             * {@link #config-bbar} and {@link #config-tbar} configs.\n             *\n             * This object also contains a key named `'*'` with default config properties to apply to all strips. This\n             * object provides the default `type` (`'toolbar') and {@link Core.widget.Widget#config-dock} (`'top'`)\n             * property for strips.\n             * @config {Object} stripDefaults\n             * @internal\n             * @category Content\n             */\n            stripDefaults : {\n                '*' : {\n                    type : 'toolbar',\n                    dock : 'top'\n                },\n\n                bbar : {\n                    dock   : 'bottom',\n                    weight : -1000\n                },\n\n                tbar : {\n                    weight : -1000\n                }\n            },\n\n            /**\n             * An object containing widgets keyed by name. By default (when no `type` is given), strips are\n             * {@link Core.widget.Toolbar toolbars}. If the value assigned to a strip is an array, it is converted to\n             * the toolbar's {@link Core.widget.Container#config-items}.\n             *\n             * The {@link #config-bbar} and {@link #config-tbar} configs are shortcuts for adding toolbars to the\n             * panel's `strips`.\n             *\n             * Strips are arranged based on their {@link Core.widget.Widget#config-dock} and\n             * {@link Core.widget.Widget#config-weight} configs.\n             *\n             * For widgets using a `dock` of `'top'`, `'bottom'`, `'left'`, `'right'`, `'start'` or `'end'`(an \"edge\n             * strip\"), the higher the `weight` assigned to a widget, the closer that widget will be to the panel body.\n             *\n             * For widgets with `'header'` or `'pre-header'` for `dock` (a \"header strip\"), higher `weight` values\n             * cause the widget to be placed closer to the panel's title.\n             *\n             * ```javascript\n             *  new Panel({\n             *      title : 'Test',\n             *      html  : 'Panel strip test',\n             *      strips : {\n             *          left : [{\n             *              text : 'Go'\n             *          }]\n             *      }\n             *  });\n             * ```\n             * @config {Object<String,ContainerItemConfig>} strips\n             * @category Content\n             */\n            strips : {\n                value   : null,\n                $config : 'nullify'\n            },\n\n            toolDefaults : {\n                close : {\n                    weight : -1000\n                },\n\n                collapse : {\n                    weight : -990\n                }\n            },\n\n            /**\n             * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,\n             * but rather plain HTML that follows the last element of the panel's body and {@link #config-strips}.\n             *\n             * The `dock` property may be `top`, `right`, `bottom`, `left`, `start` or `end`\n             *\n             * @config {Object|String}\n             * @property {'top'|'right'|'bottom'|'left'|'start'|'end'} dock Where to dock\n             * @property {String} html Html to populate the footer with\n             * @property {String} cls CSS class to add to the footer\n             * @default\n             * @category Content\n             */\n            footer : null,\n\n            /**\n             * This config is used with {@link Core.widget.panel.PanelCollapserOverlay} to programmatically control the\n             * visibility of the panel's body. In this mode of collapse, the body of a collapsed panel is a floating\n             * overlay. Setting this config to `true` will show this element, while `false` will hide it.\n             * @config {Boolean}\n             * @private\n             */\n            revealed : null,\n\n            /**\n             * The tool Widgets as specified by the {@link #config-tools} configuration\n             * (and the {@link Core.widget.Popup#config-closable} configuration in the Popup subclass).\n             * Each is a {@link Core.widget.Widget} instance which may be hidden, shown and observed and styled\n             * just like any other widget.\n             *\n             * ```javascript\n             * panel.tools.add = {\n             *     cls : 'b-fa b-fa-plus',\n             *     handler() {\n             *         // Clicked the tool\n             *     }\n             * }\n             * ```\n             * @member {Object<String,Core.widget.Tool>} tools\n             * @accepts {Object<String,Core.widget.Tool|ToolConfig>}\n             */\n            /**\n             * The {@link Core.widget.Tool tools} to add either before or after the `title` in the Panel header. Each\n             * property name is the reference by which an instantiated tool may be retrieved from the live\n             * `{@link Core.widget.mixin.Toolable#property-tools}` property.\n             * ```javascript\n             * new Panel({\n             *     ...\n             *     tools : {\n             *         add : {\n             *             cls : 'b-fa b-fa-plus',\n             *             handler() {\n             *                 // Clicked the tool\n             *             }\n             *         }\n             *     }\n             * });\n             * ```\n             * @config {Object<string,ToolConfig>} tools\n             * @category Content\n             */\n\n            /**\n             * Get toolbar {@link Core.widget.Toolbar} docked to the top of the panel\n             * @member {Core.widget.Toolbar} tbar\n             * @readonly\n             * @category Content\n             */\n            /**\n             * A Config object representing the configuration of a {@link Core.widget.Toolbar},\n             * or array of config objects representing the child items of a Toolbar.\n             *\n             * This creates a toolbar docked to the top of the panel immediately below the header.\n             * @config {Array<ContainerItemConfig|String>|ToolbarConfig}\n             * @category Content\n             */\n            tbar : null,\n\n            /**\n             * Get toolbar {@link Core.widget.Toolbar} docked to the bottom of the panel\n             * @member {Core.widget.Toolbar} bbar\n             * @readonly\n             * @category Content\n             */\n            /**\n             * A Config object representing the configuration of a {@link Core.widget.Toolbar},\n             * or array of config objects representing the child items of a Toolbar.\n             *\n             * This creates a toolbar docked to the bottom of the panel immediately above the footer.\n             * @config {Array<ContainerItemConfig|String>|ToolbarConfig}\n             * @category Content\n             */\n            bbar : null,\n\n            role : 'region'\n        };\n    }\n\n    //endregion\n\n    /**\n     * A header {@link #config-tools tool} has been clicked.\n     * @event toolClick\n     * @param {Core.widget.Tool} source - This Panel.\n     * @param {Core.widget.Tool} tool - The tool which is being clicked.\n     */\n\n    //region Composition\n\n    updateElement(element, oldElement) {\n        const result = super.updateElement(element, oldElement);\n\n        if (this.titleElement) {\n            DomHelper.setAttributes(this.ariaElement, {\n                'aria-describedby' : this.titleElement.id\n            });\n        }\n\n        return result;\n    }\n\n    compose() {\n        const\n            me = this,\n            { collapsible, focusable, hasItems, revealed, tools } = me,\n            header = me.composeHeader(),\n            horz = header?.class['b-dock-left'] || header?.class['b-dock-right'];\n\n        let body = me.composeBody(),\n            key  = 'bodyWrapElement';\n\n        if (collapsible) {\n            [key, body] = collapsible.wrapCollapser(key, body);\n        }\n\n        return {\n            tabIndex : ((hasItems && focusable !== false) || focusable) ? 0 : null,\n\n            class : {\n                [`b-panel-collapsible-${collapsible?.type}`]     : collapsible,\n                [`b-panel-collapse-${collapsible?.collapseDir}`] : collapsible,\n                [`b-${horz ? 'h' : 'v'}box`]                     : 1,\n                'b-panel-collapsible'                            : collapsible,\n                'b-panel-has-header'                             : header,\n                'b-panel-has-tools'                              : tools ? 1 : 0,\n                'b-panel-overlay-revealed'                       : revealed\n            },\n\n            children : {\n                topFocusTrap : {\n                    'aria-hidden' : true,\n                    tabIndex      : 0,\n                    class         : {\n                        'b-focus-trap' : 1\n                    }\n                },\n\n                // Note: we always put header before bodyWrap since it is likely (though untested) to be better for\n                // a11y. We use flexbox order to make the right/bottom docking appear correct but it is likely that\n                // the DOM order of the <header> element vs (optional) <footer> is important to screen readers.\n                headerElement : header,\n\n                [key] : body,\n\n                bottomFocusTrap : {\n                    'aria-hidden' : true,\n                    tabIndex      : 0,\n                    class         : {\n                        'b-focus-trap'     : 1,\n                        'b-end-focus-trap' : 1\n                    }\n                }\n            }\n        };\n    }\n\n    composeBody() {\n        const\n            me = this,\n            { bodyCls, bodyConfig, bodyWrapTag, footer, uiClassList } = me,\n            strips = ObjectHelper.values(me.strips, (k, v) => !dockDirection[v?.dock]).sort(me.byWeightSortFn);\n\n        let bar, before, dock, i, name, vertical, wrap;\n\n        if (footer) {\n            dock = footer.dock || 'bottom';\n\n            strips.unshift({\n                dock,\n                element : {\n                    tag       : 'footer',\n                    reference : 'footerElement',\n                    html      : (typeof footer === 'string') ? footer : footer.html,\n                    class     : {\n                        ...uiClassList,\n                        [`b-dock-${dock}`]      : 1,\n                        [`${footer.cls || ''}`] : 1\n                    }\n                }\n            });\n        }\n\n        if (bodyCls) {\n            if (!bodyConfig[name = 'className']) {\n                name = 'class';\n            }\n\n            bodyConfig[name] = new DomClassList(bodyConfig[name]).assign(bodyCls);\n        }\n\n        /*\n            The higher the weight, the closer to the center we place the toolbar. Consider:\n\n                {\n                    tbar : ...,\n                    bbar :...,\n                    strips : {\n                        lbar1 : { weight : 10, ... },\n                        tbar2 : { weight : 20, ... },\n                        lbar2 : { weight : 30, ... },\n                        rbar  : { weight : 40, ... }\n                    }\n                }\n\n                +---------------------------------------------------+\n                | tbar                                              |\n                +---------+-----------------------------------------+\n                |         | tbar2                                   |\n                |         +---------+----------------------+--------+\n                |         |         |                      |        |\n                |  lbar1  |         |                      |        |\n                |         |  lbar2  |                      |  rbar  |\n                |         |         |                      |        |\n                |         |         |                      |        |\n                +---------+---------+----------------------+--------+\n                | bbar                                              |\n                +---------------------------------------------------+\n         */\n        for (i = strips.length; i-- > 0; /* empty */) {\n            bar = strips[i];\n            [vertical, before] = dockDirection[bar.dock];\n\n            if (!wrap) {\n                wrap = wrapBody(bodyConfig, bodyWrapTag, vertical);\n            }\n            else if (wrap.vertical !== vertical) {\n                wrap = wrapBody(finishBodyWrap(wrap, uiClassList), '', vertical);\n            }\n\n            wrap.children[before ? 'unshift' : 'push'](bar.element);\n        }\n\n        const body = finishBodyWrap(wrap || wrapBody(bodyConfig, bodyWrapTag), uiClassList, true);\n\n        body.class['b-panel-body-wrap'] = 1;\n        body.class[`b-${me.$$name.toLowerCase()}-body-wrap`] = 1;\n\n        return body;\n    }\n\n    get hasHeader() {\n        // Shortcut to avoid instantiating tools if header has been configured away\n        if (this.header === false) {\n            return false;\n        }\n        const\n            { header, title, tools, parent } = this,\n            hasVisibleTools                  = this.maximizable || Object.values(tools || {}).some(tool => !tool.hidden);\n\n        // Explicitly declared header should always be shown.\n        // Implicitly created from title or tools can be suppressed by parent.\n        // Explicitly disabled header using false should mean no header at all.\n        return header || (!parent?.suppressChildHeaders && (title || hasVisibleTools));\n    }\n\n    get rootUiClass() {\n        return Panel;\n    }\n\n    composeHeader(force) {\n        const me = this;\n\n        // Dont add a header unless we have one configured, have a title or have visible tools (or are forced to)\n        if (!me.hasHeader && !force) {\n            return;\n        }\n\n        const\n            header          = me.header || {},\n            dock            = header.dock || 'top',\n            [before, after] = me.splitHeaderItems({ dock, as : 'element' }),\n            classes         = me.$meta.hierarchy,\n            title           = me.composeTitle(header),\n            cls             = new DomClassList({\n                [`b-dock-${dock}`] : 1,\n                ...me.uiClassList\n            }, header.cls);\n\n        let i, name;\n\n        for (i = classes.indexOf(Panel); i < classes.length; ++i) {\n            name = classes[i].$$name;\n\n            if (name !== 'Grid') {\n                cls[`b-${name.toLowerCase()}-header`] = 1;\n            }\n        }\n\n        const headerConfig = {\n            tag      : 'header',\n            class    : cls,\n            children : [\n                ...before,\n                title,\n                ...after\n            ]\n        };\n\n        return me.collapsible?.composeHeader(headerConfig) || headerConfig;\n    }\n\n    composeTitle(header) {\n        const\n            title       = (typeof header === 'string') ? header : (this.title || header.title),\n            titleConfig = {\n                reference : 'titleElement',\n                id        : `${this.id}-panel-title`,\n                html      : title ?? '\\xA0',\n                class     : {\n                    [`b-align-${header.titleAlign || 'start'}`] : 1,\n                    'b-header-title'                            : 1,\n                    ...this.uiClassList\n                }\n            };\n\n        if (ObjectHelper.isObject(title)) {\n            delete titleConfig.html;\n            ObjectHelper.merge(titleConfig, title);\n        }\n\n        return this.collapsible?.composeTitle(titleConfig) || titleConfig;\n    }\n\n    // Needed to make title go through recompose\n    updateTitle() {}\n\n    afterRecompose() {\n        super.afterRecompose();\n\n        const\n            me = this,\n            { headerElement } = me;\n\n        me._headerClickDetacher?.();\n        me._headerClickDetacher = headerElement && EventHelper.on({\n            element : headerElement,\n            // Click might have lead to panel being destroyed (clicking close tool with `hideAction : 'destroy'`)\n            click   : ev => me.trigger?.('headerClick', { event : ev })\n        });\n    }\n\n    onHeaderClick(info) {\n        this.collapsible?.onHeaderClick(info);\n    }\n\n    onPaint() {\n        super.onPaint(...arguments);\n\n        this.collapsible?.onPanelPaint(this);\n    }\n\n    splitHeaderItems({ as, overlay, dock } = emptyObject) {\n        const\n            me = this,\n            asElement = as === 'element',\n            { collapsed } = me,\n            endTools = me.getEndTools({ overlay }),\n            startTools = me.getStartTools({ overlay }),\n            strips = ObjectHelper.values(me.strips, (k, v) => !headerDock[v?.dock] && v.isCollapsified(collapsed, overlay));\n\n        let ret = emptySplit,\n            after, before, i;\n\n        if (strips.length + endTools.length + startTools.length) {\n            // The \"natural\" order of equal weight tools/strips is: tool -> strip -> header <- strip <- tool\n            ret = [\n                // the problem w/mixing tools and strips is the strip weight needs to do two jobs (one when docked\n                // in the body and one when docked in the header)\n                before = [\n                    ...startTools,\n                    ...strips.filter(e => e.dock === 'pre-header').sort(me.byWeightSortFn)\n                ],\n                after = [\n                    ...strips.filter(e => e.dock === 'header').sort(me.byWeightReverseSortFn),\n                    ...endTools\n                ]\n            ];\n\n            for (i = 0; i < before.length; ++i) {\n                dock && before[i].syncRotationToDock?.(dock);\n\n                if (asElement) {\n                    before[i] = before[i].element;\n                }\n            }\n\n            for (i = 0; i < after.length; ++i) {\n                dock && after[i].syncRotationToDock?.(dock);\n\n                if (asElement) {\n                    after[i] = after[i].element;\n                }\n            }\n        }\n\n        return ret;\n    }\n\n    set bodyConfig(bodyConfig) {\n        this._bodyConfig = bodyConfig;\n    }\n\n    get bodyConfig() {\n        const\n            me          = this,\n            { bodyTag } = me,\n            result      = ObjectHelper.merge({\n                reference : 'bodyElement',\n                className : {\n                    ...me.getStaticWidgetClasses(Panel, '-content'),\n                    'b-box-center'   : 1,\n                    'b-text-content' : me.textContent && me.hasNoChildren\n                }\n            }, me._bodyConfig);\n\n        if (bodyTag) {\n            result.tag = bodyTag;\n        }\n\n        if (me.initializingElement || !me._element) {\n            // we cannot use the html config since a getter reads innerHTML\n            result.html = me.content || me._html;\n        }\n\n        return result;\n    }\n\n    //endregion\n    //region Configs\n\n    changeBodyCls(cls) {\n        return DomClassList.from(cls);\n    }\n\n    changeTbar(bar) {\n        this.getConfig('strips');\n\n        this.strips = {\n            tbar : bar\n        };\n\n        return this.strips.tbar;\n    }\n\n    changeBbar(bar) {\n        this.getConfig('strips');\n\n        this.strips = {\n            bbar : bar\n        };\n\n        return this.strips.bbar;\n    }\n\n    // Override to iterate docked Toolbars in the correct order around contained widgets.\n    get childItems() {\n        const\n            me     = this,\n            strips = ObjectHelper.values(me.strips, (k, v) => !dockDirection[v?.dock]).sort(me.byWeightSortFn),\n            [before, after] = me.splitHeaderItems(),  // tools and header strips\n            [before2, after2] = me.collapsible?.splitHeaderItems() || emptySplit;\n\n        return [\n            ...before,\n            ...before2,\n            ...after,\n            ...after2,\n            ...strips.filter(b => dockDirection[b.dock][1]),  // the \"before\" strips come before the items\n            ...(me._items || emptyArray),\n            ...strips.filter(b => !dockDirection[b.dock][1]).reverse()\n        ];\n    }\n\n    changeStrips(strips, oldStrips) {\n        const\n            me      = this,\n            manager = me.$strips || (me.$strips = new DynamicObject({\n                configName : 'strips',\n                factory    : Widget,\n                inferType  : false,  // the name of a bar in the strips object is not its type\n                owner      : me,\n\n                created(instance) {\n                    const { dock } = instance;\n\n                    if (!headerDock[dock] && !dockDirection[dock]) {\n                        throw new Error(\n                            `Invalid dock value \"${dock}\"; must be: top, left, right, bottom, header, or pre-header`);\n                    }\n\n                    FunctionHelper.after(instance, 'onConfigChange', (ret, { name }) => {\n                        if (barConfigs[name]) {\n                            me.onConfigChange({\n                                name  : 'strips',\n                                value : manager.target\n                            });\n                        }\n                    });\n\n                    instance.innerItem = false;\n                    me.onChildAdd(instance);\n\n                    instance.parent = me;  // in case we are given an instanced widget\n                    instance.layout?.renderChildren();\n\n                    if (instance.hasItems) {\n                        me.hasItems = true;\n                    }\n                },\n\n                setup(config, name) {\n                    config = ObjectHelper.merge(ObjectHelper.clone(me.stripDefaults['*']), me.stripDefaults[name], config);\n\n                    config.parent = me;  // so parent can be accessed during construction\n                    config.ref    = name;\n\n                    return config;\n                },\n\n                transform(config) {\n                    if (Array.isArray(config)) {\n                        config = {\n                            items : config\n                        };\n                    }\n\n                    return config || null;\n                }\n            }));\n\n        manager.update(strips);\n\n        if (!oldStrips) {\n            // Only return the target once. Further calls are processed above so we need to return undefined to ensure\n            // onConfigChange is called. By returning the same target on 2nd+ call, it passes the === test and won't\n            // trigger onConfigChange.\n            return manager.target;\n        }\n    }\n\n    //endregion\n    //region Collapse/Expand\n\n    /**\n     * This property is `true` if the panel is currently collapsing.\n     * @property {Boolean}\n     * @readonly\n     * @category Layout\n     */\n    get collapsing() {\n        return this.collapsible?.collapsing;\n    }\n\n    /**\n     * This property is `true` if the panel is currently either collapsing or expanding.\n     * @property {Boolean}\n     * @readonly\n     * @internal\n     * @category Layout\n     */\n    get collapsingExpanding() {\n        return this.collapsible?.collapsingExpanding;\n    }\n\n    /**\n     * This property is `true` if the panel is currently expanding.\n     * @property {Boolean}\n     * @readonly\n     * @category Layout\n     */\n    get expanding() {\n        return this.collapsible?.expanding;\n    }\n\n    changeCollapsed(value) {\n        const\n            me = this,\n            { collapsible } = me;\n\n        me.recompose.flush();\n\n        value = Boolean(value);\n\n        if (!collapsible || me.changingCollapse || !me.isPainted) {  // if (the collapser is asking...)\n            return value;\n        }\n\n        collapsible?.collapse({\n            animation : null,\n            collapsed : value\n        });\n    }\n\n    changeCollapsible(collapsible, was) {\n        const me = this;\n\n        me.getConfig('tools');\n\n        if (collapsible) {\n            if (collapsible === true) {\n                collapsible = {};\n            }\n            else if (typeof collapsible === 'string') {\n                collapsible = {\n                    [dockDirection[collapsible] ? 'direction' : 'type'] : collapsible\n                };\n            }\n        }\n\n        return PanelCollapser.reconfigure(was, collapsible, {\n            owner    : me,\n            defaults : {\n                panel : me\n            },\n            cleanup() {\n                if (me.collapsed) {\n                    was.collapse({\n                        animation : null,\n                        collapsed : false\n                    });\n                    me._collapsed = 1;\n                }\n            }\n        });\n    }\n\n    updateCollapsible(collapsible) {\n        const\n            me = this,\n            tools = collapsible?.toolsConfig;\n\n        me.tools = {\n            collapse   : tools?.collapse || null,\n            recollapse : tools?.recollapse || null\n        };\n\n        if (collapsible && me.isPainted && me.collapsed) {\n            me._collapsed = 1;\n        }\n\n        if (me.collapsed === 1) {\n            me.collapsed = true;\n        }\n    }\n\n    _collapse(collapsed, options) {\n        if (options !== true && options !== undefined) {\n            // allow expand(false) to be equivalent to collapse(true)\n            // or collapse(false) to be equivalent to expand(true)\n            if (options === false) {\n                collapsed.collapsed = !collapsed.collapsed;\n            }\n            else if (typeof options === 'number') {\n                collapsed.animation = {\n                    duration : options\n                };\n            }\n            else if (options === null) {\n                collapsed.animation = options;\n            }\n            else if (options === true) {\n                // ignore\n            }\n            // Must be an options object...\n            else if ('animation' in options) {\n                ObjectHelper.merge(collapsed, options);\n            }\n            else {\n                collapsed.animation = options;\n            }\n        }\n\n        return this.collapsible?.collapse(collapsed);\n    }\n\n    collapse(options) {\n        return this._collapse({ collapsed : true }, options);\n    }\n\n    expand(options) {\n        return this._collapse({ collapsed : false }, options);\n    }\n\n    toggleCollapsed(options) {\n        return this.collapsed ? this.expand(options) : this.collapse(options);\n    }\n\n    //endregion\n    //region Misc\n\n    get expandedHeaderDock() {\n        return this._expandedHeaderDock ?? this.initialConfig.header?.dock ?? 'top';\n    }\n\n    set expandedHeaderDock(v) {\n        this._expandedHeaderDock = v?.toLowerCase();\n    }\n\n    updateHeader(header) {\n        if (!this.changingCollapse) {\n            this.expandedHeaderDock = header?.dock;\n        }\n    }\n\n    updateTrapFocus(trapFocus) {\n        const me = this;\n\n        me.element.classList[trapFocus ? 'add' : 'remove']('b-focus-trapped');\n\n        me.focusTrapListener = me.focusTrapListener?.();\n\n        if (trapFocus) {\n            me.focusTrapListener = EventHelper.on({\n                element  : me.element,\n                focusin  : 'onFocusTrapped',\n                delegate : '.b-focus-trap',\n                thisObj  : me\n            });\n\n            // Create a TreeWalker which visits focusable elements.\n            if (!me.treeWalker) {\n                me.treeWalker = this.setupTreeWalker(me.element, DomHelper.NodeFilter.SHOW_ELEMENT, acceptNode);\n            }\n        }\n    }\n\n    setupTreeWalker(root, whatToShow, filter) {\n        return document.createTreeWalker(root, whatToShow, filter);\n    }\n\n    onFocusTrapped(e) {\n        const me         = this,\n            treeWalker = me.treeWalker;\n\n        // The only way of focusing these invisible elements is by TAB-ing to them.\n        // If we hit the bottom one, wrap to the top.\n        if (e.target === me.bottomFocusTrap) {\n            treeWalker.currentNode = me.topFocusTrap;\n            treeWalker.nextNode();\n        }\n        // If we hit the top one, wrap to the bottom.\n        else if (e.target === me.topFocusTrap) {\n            treeWalker.currentNode = me.bottomFocusTrap;\n            treeWalker.previousNode();\n        }\n        // It was the focus trap of a child widget\n        else {\n            return;\n        }\n\n        me.requestAnimationFrame(() => treeWalker.currentNode.focus());\n    }\n\n    get focusElement() {\n        // Either use our Containerness to yield the focus element of\n        // a descendant or fall back to the encapsulating element.\n        return this.hasItems && (super.focusElement || this.element);\n    }\n\n    get contentElement() {\n        return this.element && this.bodyElement;\n    }\n\n    get widgetClassList() {\n        const\n            me         = this,\n            result     = super.widgetClassList;\n\n        if (me.hasHeader) {\n            result.push('b-panel-has-header', `b-header-dock-${me.header?.dock || 'top'}`);\n        }\n\n        if (me.tbar) {\n            result.push('b-panel-has-top-toolbar');\n        }\n\n        if (me.bbar) {\n            result.push('b-panel-has-bottom-toolbar');\n        }\n\n        return result;\n    }\n}\n\n// Register this widget type with its Factory\nPanel.initClass();\n","import Panel from './Panel.js';\nimport EventHelper from '../helper/EventHelper.js';\nimport GlobalEvents from '../GlobalEvents.js';\nimport DomHelper from '../helper/DomHelper.js';\n\n/**\n * @module Core/widget/Popup\n */\n\n/**\n * A floating Popup widget, which can contain child {@link Core.widget.Container#config-items widgets} or plain html. Serves as the base class\n * for Menu / Tooltip.\n *\n * When it contains focus, the `Escape` key {@link #config-closeAction closes} the picker. When it hides,\n * focus is reverted to the element from which it entered the Popup, or, if that is no longer focusable,\n * a close relative of that element.\n *\n * @example\n * let popup = new Popup({\n *   forElement : document.querySelector('button'),\n *   items      : [\n *     { type : 'text', placeholder: 'Text' },\n *     { type: 'button', text: 'Okay', style: 'width: 100%', color: 'b-orange'}\n *   ]\n * });\n *\n * @classType popup\n * @inlineexample Core/widget/Popup.js\n *\n * @extends Core/widget/Panel\n */\nexport default class Popup extends Panel {\n    //region Config\n    static get $name() {\n        return 'Popup';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'popup';\n    }\n\n    static get configurable() {\n        return {\n\n            /**\n             * Auto show flag for Popup.\n             * If truthy then Popup is shown automatically upon hover.\n             * @config {Boolean}\n             * @default\n             */\n            autoShow : true,\n\n            /**\n             * By default a Popup is transient, and will {@link #function-close} when the user clicks or\n             * taps outside its owned widgets and when focus moves outside its owned widgets.\n             *\n             * **Note**: {@link #config-modal Modal} popups won't {@link #function-close} when focus moves outside even if autoClose is `true`.\n             *\n             * Configure as `false` to make a Popup non-transient.\n             * @config {Boolean}\n             * @default\n             */\n            autoClose : true,\n\n            /**\n             * Show popup when user clicks the element that it is anchored to. Cannot be combined with showOnHover\n             * @config {Boolean}\n             * @default\n             */\n            showOnClick : false,\n\n            /**\n             * DOM element to attach popup.\n             * @config {HTMLElement}\n             */\n            forElement : null,\n\n            monitorResize : true,\n\n            floating : true,\n            hidden   : true,\n\n            axisLock : true, // Flip edges if align violates constrainTo\n\n            hideAnimation : {\n                opacity : {\n                    from     : 1,\n                    to       : 0,\n                    duration : '.3s',\n                    delay    : '0s'\n                }\n            },\n\n            showAnimation : {\n                opacity : {\n                    from     : 0,\n                    to       : 1,\n                    duration : '.4s',\n                    delay    : '0s'\n                }\n            },\n\n            stripDefaults : {\n                bbar : {\n                    layout : {\n                        justify : 'flex-end'\n                    }\n                }\n            },\n\n            testConfig : {\n                hideAnimation : null,\n                showAnimation : null\n            },\n\n            /**\n             * The action to take when calling the {@link #function-close} method.\n             * By default, the popup is hidden.\n             *\n             * This may be set to `'destroy'` to destroy the popup upon close.\n             * @config {'hide'|'destroy'}\n             * @default\n             */\n            closeAction : 'hide',\n\n            /**\n             * By default, tabbing within a Popup is circular - that is it does not exit.\n             * Configure this as `false` to allow tabbing out of the Popup.\n             * @config {Boolean}\n             * @default\n             */\n            trapFocus : true,\n\n            /**\n             * By default a Popup is focused when it is shown.\n             * Configure this as `false` to prevent automatic focus on show.\n             * @config {Boolean}\n             * @default\n             */\n            focusOnToFront : true,\n\n            /**\n             * Show a tool in the header to close this Popup, and allow `ESC` close it.\n             * The tool is available in the {@link Core.widget.mixin.Toolable#property-tools} object\n             * under the name `close`. It uses the CSS class `b-popup-close` to apply a\n             * default close icon. This may be customized with your own CSS rules.\n             * @default false\n             * @config {Boolean}\n             */\n            closable : null,\n\n            /**\n             * Show a tool in the header to maximize this popup\n             * @config {Boolean}\n             * @default false\n             */\n            maximizable : null,\n\n            /**\n             * Optionally show an opaque mask below this Popup when shown.\n             * Configure this as `true` to show the mask.\n             *\n             * When a Popup is modal, it defaults to being {@link Core.widget.Widget#config-centered centered}.\n             * Also it won't {@link #function-close} when focus moves outside even if {@link #config-autoClose} is `true`.\n             *\n             * May also be an object containing the following properties:\n             * * `closeOnMaskTap` Specify as `true` to {@link #function-close} when mask is tapped.\n             * The default action is to focus the popup.\n             *\n             * Usage:\n             * ```javascript\n             * new Popup({\n             *     title  : 'I am modal',\n             *     modal  : {\n             *         closeOnMaskTap : true\n             *     },\n             *     height : 100,\n             *     width  : 200\n             * });\n             * ```\n             *\n             * @default false\n             * @config {Boolean}\n             */\n            modal : null,\n\n            /**\n             * Set to `true` to make this widget take all available space in the visible viewport.\n             * @member {Boolean} maximized\n             * @category Float & align\n             */\n            /**\n             * Set to `true` to make this widget take all available space in the visible viewport.\n             * @config {Boolean}\n             * @default false\n             * @category Float & align\n             */\n            maximized : null,\n\n            tools : {\n                close : {\n                    cls       : 'b-popup-close',\n                    handler   : 'close',\n                    weight    : -1000,\n                    ariaLabel : 'L{Popup.close}',\n                    hidden    : true // shown when closable set to true\n                },\n                maximize : {\n                    cls     : 'b-popup-expand',\n                    handler : 'toggleMaximized',\n                    weight  : -999,\n                    hidden  : true // shown when maximizable set to true\n                }\n            },\n\n            highlightReturnedFocus : true,\n\n            role : 'dialog'\n        };\n    }\n\n    //endregion\n\n    //region Init & destroy\n\n    finalizeInit() {\n        const\n            me             = this,\n            { forElement } = me;\n\n        me.anchoredTo    = forElement;\n        me.initialAnchor = me.anchor;\n\n        if (forElement && me.showOnClick) {\n            // disable autoShow if not enabled by config\n            if (!me.initialConfig.autoShow) {\n                me.autoShow = false;\n            }\n            EventHelper.on({\n                element : forElement,\n                click   : 'onElementUserAction',\n                thisObj : me\n            });\n        }\n\n        super.finalizeInit();\n\n        // We must not autoShow if there's a forElement but it's not visible\n        if (me.autoShow && (!forElement || DomHelper.isVisible(forElement))) {\n            if (me.autoShow === true) {\n                me.show();\n            }\n            else {\n                me.setTimeout(() => me.show(), me.autoShow);\n            }\n        }\n    }\n\n    onPaint({ firstPaint }) {\n        super.onPaint?.(...arguments);\n\n        const me = this;\n\n        // Only add the listener the frst time we paint. If we are not maximizable, it does no harm.\n        if (firstPaint && me.headerElement) {\n            EventHelper.on({\n                element  : me.headerElement,\n                dblclick : me.onHeaderDblClick,\n                thisObj  : me\n            });\n        }\n    }\n\n    doDestroy() {\n        this.syncModalMask();\n        super.doDestroy();\n    }\n\n    //endregion\n\n    compose() {\n        const { hasNoChildren, textContent } = this;\n\n        return {\n            class : {\n                // Popup has extra CSS responsibilities at the top level.\n                // The CSS needs to know whether it should impose a max-width.\n                'b-text-popup' : Boolean(textContent && hasNoChildren)\n            }\n        };\n    }\n\n    //region Show/hide\n\n    /**\n     * Performs the configured {@link #config-closeAction} upon this popup.\n     * By default, the popup hides. The {@link #config-closeAction} may be\n     * configured as `'destroy'`.\n     * @fires beforeclose If popup is not hidden\n     */\n    close() {\n        const me = this;\n\n        /**\n         * Fired when the {@link #function-close} method is called and the popup is not hidden.\n         * May be vetoed by returning `false` from a handler.\n         * @event beforeClose\n         * @param {Core.widget.Popup} source - This Popup\n         */\n        if (\n            (!me._hidden && me.trigger('beforeClose') !== false) ||\n            // we should destroy it even if it's hidden just omit beforeclose event\n            (me._hidden && me.closeAction === 'destroy')\n        ) {\n            // Revert focus early when closing a modal popup will lead to destruction, to give listeners a shot at doing\n            // their thing. Without this, focus will be reverted as part of the destruction process, and listeners won't\n            // be called.\n            me.modal && me.closeAction === 'destroy' && me.revertFocus();\n\n            me.unmask();\n\n            // Focus moves unrelated to where the user's attention is upon this gesture.\n            // Go into the keyboard mode where the focused widget gets a rendition so that\n            // it is obvious where focus now is.\n            // Must jump over EventHelper's global mousedown listener which will remove this class.\n            if (me.containsFocus && me.highlightReturnedFocus) {\n                me.setTimeout(() => me.element.classList.add('b-using-keyboard'), 0);\n            }\n\n            return me[me.closeAction]();\n        }\n    }\n\n    toggleMaximized() {\n        this.maximized = !this.maximized;\n    }\n\n    updateMaximized(value) {\n        DomHelper.toggleClasses(this.element, ['b-maximized'], value);\n    }\n\n    //endregion\n\n    //region Events\n\n    onInternalKeyDown(event) {\n        const me = this;\n\n        // Close or collapse/unreveal on escape key\n        if (event.key === 'Escape') {\n            event.stopImmediatePropagation();\n            if (me.floating || me.positioned) {\n                me.close(true);\n            }\n            else if (me.collapsible) {\n                if (me.revealed) {\n                    me.collapsible.toggleReveal();\n                }\n                else {\n                    me.collapse();\n                }\n            }\n        }\n    }\n\n    onDocumentMouseDown({ event }) {\n        const\n            me         = this,\n            { owner }  = me,\n            { target } = event;\n\n        // If mousedown was on our owning Button, it is that button's responsibility to\n        // toggle its pressed state thereby hiding its menu, so prevent the focus move of the mousedown.\n        if (event.type !== 'touchend' && owner?.isButton && owner._menu === me && owner.element.contains(target)) {\n            event.preventDefault();\n            return false;\n        }\n        if (me.modal && target === Popup.modalMask) {\n            event.preventDefault();\n            if (me.modal.closeOnMaskTap) {\n                me.close();\n            }\n            else if (!me.containsFocus) {\n                me.focus();\n            }\n        }\n        // in case of outside click and if popup is focused, focusout will trigger closing\n        else if (!me.owns(target) && me.autoClose && !me.containsFocus) {\n            me.close();\n        }\n    }\n\n    get isTopModal() {\n        return DomHelper.isVisible(Popup.modalMask) && this.element.previousElementSibling === Popup.modalMask;\n    }\n\n    onFocusIn(e) {\n        const activeEl = DomHelper.getActiveElement(this);\n\n        super.onFocusIn(e);\n\n        // No event handler has moved focus, and target is outermost el\n        // then delegate to the focusElement which for a Container\n        // is found by finding the first visible, focusable descendant widget.\n        if (DomHelper.getActiveElement(this) === activeEl && e.target === this.element) {\n            this.focus();\n        }\n    }\n\n    onFocusOut(e) {\n        // For mobile browsers with virtual keyboard, when pressing Done key, focus should move back to the popup\n        // https://github.com/bryntum/support/issues/2903\n        // window.visualViewport.height could be a decimal value. Using 1px threshold for correct comparing\n        const usingVirtualKeyboard = globalThis.visualViewport && globalThis.visualViewport.height < document.documentElement.clientHeight - 1;\n\n        if (!usingVirtualKeyboard && !this.modal && this.autoClose) {\n            this.close();\n        }\n\n        super.onFocusOut(e);\n    }\n\n    onShow() {\n        const me = this;\n\n        if (me.autoClose) {\n            me.addDocumentMouseDownListener();\n        }\n\n        // TODO: It's the floating \"toFront\" operation that should handle\n        // focusing based on config focusOnToFront.\n        if (me.focusOnToFront) {\n            me.focus();\n        }\n\n        super.onShow?.();\n\n        // Insert the modal mask below this Popup if needed\n        me.syncModalMask();\n    }\n\n    addDocumentMouseDownListener() {\n        if (!this.mouseDownRemover) {\n            this.mouseDownRemover = GlobalEvents.ion({\n                globaltap : 'onDocumentMouseDown',\n                thisObj   : this\n            });\n        }\n    }\n\n    updateModal(modal) {\n        // Modal implies that this is floating. Theres no ability for positioned widgets\n        // to acquire a modal mask.\n        if (modal) {\n            this.floating = true;\n        }\n    }\n\n    syncModalMask() {\n        const\n            me = this,\n            {\n                modal,\n                element\n            }  = me;\n\n        // Cast because modal may be specified as an object\n        element.setAttribute('aria-modal', Boolean(modal));\n\n        // Note the difference between Popup.modalMask and this.modalMask.\n        // this.modalMask syncs the position of the element in the DOM\n        // to be below this element. Popup.modalMask just returns the element.\n        if (modal && me.isVisible) {\n            // If we have not been explicitly positioned, a modal is centered.\n            // And if it's centered, it cannot show an anchor arrow.\n            if (typeof me._x !== 'number' && typeof me._y !== 'number') {\n                me.centered = true;\n                me.anchor = false;\n            }\n            me.modalMask.classList.remove('b-hide-display');\n            element.classList.add('b-modal');\n        }\n        else if (me.isPainted) {\n            element.classList.remove('b-modal');\n\n            const\n                remainingModals = me.floatRoot.querySelectorAll('.b-modal'),\n                topModal        = remainingModals.length ? Popup.fromElement(remainingModals[remainingModals.length - 1], 'popup') : null;\n\n            // If there are any other visible modals, drop the mask to just below the new topmost\n            if (topModal) {\n                topModal.syncModalMask();\n            }\n            else {\n                Popup.modalMask.classList.add('b-hide-display');\n            }\n        }\n    }\n\n    onHide() {\n        const me = this;\n\n        me.mouseDownRemover?.();\n        me.mouseDownRemover = null;\n\n        super.onHide?.();\n\n        // Insert the modal mask below the topmost Popup if needed, else hide it\n        me.syncModalMask();\n    }\n\n    onElementUserAction() {\n        this.show();\n    }\n\n    onHeaderDblClick() {\n        if (this.maximizable) {\n            this.toggleMaximized();\n        }\n    }\n\n    //endregion\n\n    updateClosable(closable) {\n        this.tools.close.hidden = !closable;\n    }\n\n    updateMaximizable(maximizable) {\n        this.tools.maximize.hidden = !maximizable;\n    }\n\n    /**\n     * Returns the modal mask element for this Popup correctly positioned just below this Popup.\n     * @internal\n     */\n    get modalMask() {\n        const { modalMask } = Popup;\n\n        if (modalMask.nextElementSibling !== this.element) {\n            this.floatRoot.insertBefore(modalMask, this.element);\n        }\n\n        return modalMask;\n    }\n\n    /**\n     * Returns the modal mask element. It does NOT guarantee its placement in the DOM relative\n     * to any Popup. To get the modal mask for a particular Popup, use the instance property.\n     * @internal\n     */\n    static get modalMask() {\n        if (!this._modalMask) {\n            this._modalMask = DomHelper.createElement({\n                className : 'b-modal-mask b-hide-display'\n            });\n            // Mousewheel should not scroll the body \"through\" a modal mask.\n            EventHelper.on({\n                element : this._modalMask,\n                wheel   : e => e.preventDefault()\n            });\n        }\n        return this._modalMask;\n    }\n}\n\n// Register this widget type with its Factory\nPopup.initClass();\n","import DomClassList from '../helper/util/DomClassList.js';\nimport Menu from './Menu.js';\nimport Widget from './Widget.js';\nimport DomHelper from '../helper/DomHelper.js';\n\n/**\n * @module Core/widget/MenuItem\n */\n\nconst\n    bIcon = /^b-icon-/,\n    bFa   = /^b-fa-/;\n\n/**\n * A widget representing a single menu item in a {@link Core.widget.Menu}. May be configured with a\n * {@link #config-checked} state which creates a checkbox which may be toggled. Can also be\n * {@link Core.widget.Widget#config-disabled}, which affects item appearance and blocks interactions.\n *\n * Fires events when activated which bubble up through the parent hierarchy and may be listened for on an ancestor. See\n * {@link Core.widget.Menu Menu} for more details on usage.\n *\n * To add a border above a menu item, you can set {@link #config-separator} to `true`. The separator is automatically\n * hidden if the menu item is the first visible item in the menu.\n *\n * @extends Core/widget/Widget\n * @classType menuitem\n */\nexport default class MenuItem extends Widget {\n    //region Config\n    static get $name() {\n        return 'MenuItem';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'menuitem';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * If configured with a `Boolean` value, a checkbox is displayed\n             * as the start icon, and the {@link #event-toggle} event is fired\n             * when the checked state changes.\n             * @config {Boolean}\n             */\n            checked : null,\n\n            /**\n             * Set to `true` to display a border above this menu item, if there are other visible menu items before it.\n             * @config {Boolean}\n             * @default false\n             */\n            separator : null,\n\n            /**\n             * Indicates that this menu item is part of a group where only one can be checked. Assigning a value\n             * also sets `toggleable` to `true`.\n             * ```\n             * const yesButton = new Button({\n             *    toggleGroup : 'yesno',\n             *    text        : 'Yes'\n             * });\n             *\n             * const noButton = new Button({\n             *    toggleGroup : 'yesno',\n             *    text        : 'No'\n             * });\n             * ```\n             * @config {String}\n             */\n            toggleGroup : null,\n\n            /**\n             * Returns the instantiated menu widget as configured by {@link #config-menu}.\n             * @member {Core.widget.Widget} menu\n             * @readonly\n             */\n            /**\n             * A submenu configuration object, or an array of MenuItem configuration\n             * objects from which to create a submenu.\n             *\n             * Configuration object example:\n             * ```javascript\n             * new Menu({\n             *     // Menu items\n             *     items : {\n             *         move : {\n             *             text : 'Main item',\n             *             menu : {\n             *                 // Submenu items\n             *                 firstItem : {\n             *                     text : 'Sub-item 1',\n             *                     onItem({ eventRecord }) {}\n             *                 },\n             *                 secondItem : {\n             *                     text : 'Sub-item 2',\n             *                     onItem({ eventRecord }) {}\n             *                 }\n             *             }\n             *         }\n             *     }\n             * });\n             * ```\n             *\n             * Array of items example:\n             * ```javascript\n             * new Menu({\n             *     // Menu items\n             *     items : {\n             *         move : {\n             *             text : 'Main item',\n             *             // Submenu items\n             *             menu : [\n             *                 {\n             *                     text : 'Sub-item 1',\n             *                     onItem({ eventRecord }) {}\n             *                 },\n             *                 {\n             *                     text : 'Sub-item 2',\n             *                     onItem({ eventRecord }) {}\n             *                 }\n             *             ]\n             *         }\n             *     }\n             * });\n             * ```\n             *\n             * Note that this does not have to be a Menu. The `type` config can be used to specify any widget as the submenu.\n             * ```javascript\n             * new Menu({\n             *     // Menu items\n             *     items : {\n             *         move : {\n             *             text : 'Main item',\n             *             // Submenu items\n             *             menu : [\n             *                 {\n             *                     type  : 'textfield',\n             *                     label : 'Type here'\n             *                 },\n             *                 {\n             *                     type : 'button',\n             *                     text : 'Confirm'\n             *                 }\n             *             ]\n             *         }\n             *     }\n             * });\n             * ```\n             *\n             * @config {Object<String,MenuItemConfig|ContainerItemConfig>|Array<MenuItemConfig|ContainerItemConfig>}\n             */\n            menu : {\n                value : null,\n\n                $config : ['lazy', 'nullify']\n            },\n\n            /**\n             * Item icon class.\n             *\n             * All [Font Awesome](https://fontawesome.com/cheatsheet) icons may also be specified as `'b-fa-' + iconName`.\n             *\n             * Otherwise this is a developer-defined CSS class string which results in the desired icon.\n             * @config {String}\n             */\n            icon : null,\n\n            /**\n             * The text to be displayed in the item\n             * @config {String} text\n             */\n\n            /**\n             * By default, upon activate, non-checkbox menu items will collapse\n             * the owning menu hierarchy.\n             *\n             * Configure this as `false` to cause the menu to persist after\n             * activating an item\n             * @config {Boolean}\n             */\n            closeParent : null,\n\n            /**\n             * If provided, turns the menu item into a link\n             * @config {String}\n             */\n            href : null,\n\n            /**\n             * The `target` attribute for the {@link #config-href} config\n             * @config {'_self'|'_blank'|'_parent'|'_top'|null}\n             */\n            target : null,\n\n            localizableProperties : ['text'],\n\n            role : 'menuitem',\n\n            closeMenuDelay : 200\n        };\n    }\n\n    updateElement(element, oldElement) {\n        const result = super.updateElement(element, oldElement);\n\n        if (typeof this.checked === 'boolean') {\n            this.role = 'menuitemcheckbox';\n        }\n        this.ariaHasPopup = this.hasMenu ? 'menu' : false;\n        return result;\n    }\n\n    compose() {\n        const\n            me = this,\n            { checked, href, hasMenu, separator, target, text, toggleGroup } = me,\n            isCheckItem = typeof checked === 'boolean',\n            icon = me.icon || (isCheckItem ? 'b-fw-icon' : ''),\n            checkCls = `b-icon-${toggleGroup ? 'radio-' : ''}`,\n            hasCustomContent = typeof text === 'object';\n\n        return {\n            tag      : href ? 'a' : 'div',\n            tabIndex : -1,\n\n            href,\n            target,\n\n            class : {\n                'b-has-submenu' : hasMenu,\n                'b-checked'     : checked,\n                // Support both separator config and directly setting separator class\n                'b-separator'   : separator || me.cls?.['b-separator']\n            },\n\n            dataset : {\n                group : me.toggleGroup\n            },\n\n            // Only set aria-checked if it's a check item\n            [isCheckItem ? 'aria-checked' : ''] : checked,\n\n            // Only set expanded if there's a submenu to expand\n            [hasMenu ? 'aria-expanded' : ''] : false,\n\n            children : {\n                iconElement : icon && {\n                    // This element is a purely visual cue with no meaning to the A11Y tree\n                    'aria-hidden' : true,\n\n                    tag   : 'i',\n                    class : {\n                        'b-fa'            : bFa.test(icon),\n                        'b-icon'          : bIcon.test(icon),\n                        'b-menuitem-icon' : 1,\n\n                        [`${checkCls}checked`]   : checked === true,\n                        [`${checkCls}unchecked`] : checked === false,\n\n                        ...DomClassList.normalize(icon, 'object')\n                    }\n                },\n\n                textElement : {\n                    tag   : 'span',\n                    html  : hasCustomContent ? null : text,\n                    class : {\n                        'b-menu-text'           : 1,\n                        'b-menu-custom-content' : hasCustomContent\n                    },\n                    children : hasCustomContent ? [text] : null\n                },\n\n                subMenuIcon : hasMenu && {\n                    // This element is a purely visual cue with no meaning to the A11Y tree\n                    'aria-hidden' : true,\n\n                    tag   : 'i',\n                    class : {\n                        'b-fw-icon'       : 1,\n                        'b-icon-sub-menu' : 1\n                    }\n                }\n            }\n        };\n    }\n\n    /**\n     * Actions this item. Fires the {@link #event-item} event, and if this\n     * if a {@link #config-checked} item, toggles the checked state, firing\n     * the {@link #event-toggle} event.\n     */\n    doAction(event) {\n        const\n            item      = this,\n            menu      = this.parent,\n            itemEvent = { menu, item, element : item.element, bubbles : true };\n\n        if (typeof item.checked === 'boolean') {\n            const newCheckedState = !item.checked;\n\n            // Do not allow uncheck in a toggleGroup.\n            // A toggleGroup means that one member must always be checked.\n            if (!item.toggleGroup || newCheckedState) {\n                item.checked = !item.checked;\n            }\n        }\n\n        // Give internal handlers a chance to inject extra information before\n        // user-supplied \"item\" handlers see the event.\n        // Grid's CellMenu feature, HeaderMenu feature and other context menu features do this.\n        item.trigger('beforeItem', itemEvent);\n\n        /**\n         * This menu item has been activated.\n         *\n         * Note that this event bubbles up through parents and can be\n         * listened for on a top level {@link Core.widget.Menu Menu} for convenience.\n         * @event item\n         * @param {Core.widget.MenuItem} item - The menu item which is being actioned.\n         * @param {Core.widget.Menu} menu - Menu containing the menu item\n         */\n        item.trigger('item', itemEvent);\n\n        // Collapse the owning menu hierarchy if configured to do so\n        if (item.closeParent && menu) {\n            menu.rootMenu.close();\n\n            // Don't prevent links doing their thing\n            if (event && !item.href) {\n                event.preventDefault();\n            }\n        }\n    }\n\n    get focusElement() {\n        return this.element;\n    }\n\n    get contentElement() {\n        return this.textElement;\n    }\n\n    get isFocusable() {\n        const { focusElement } = this;\n\n        // We are only focusable if the focusEl is deeply visible, that means\n        // it must have layout - an offsetParent. Body does not have offsetParent.\n        // Disabled menu items are focusable but cannot be activated.\n        // https://www.w3.org/TR/wai-aria-practices/#h-note-17\n        return focusElement && this.isVisible && (focusElement === document.body || focusElement.offsetParent);\n    }\n\n    get hasMenu() {\n        return this.hasConfig('menu');\n    }\n\n    get childItems() {\n        // Do not call Menu into existence\n        const { _menu } = this;\n\n        return _menu ? [_menu] : [];\n    }\n\n    get text() {\n        return this.html;\n    }\n\n    set text(text) {\n        this.html = text;\n    }\n\n    onFocusIn(e) {\n        super.onFocusIn(e);\n\n        if (!this.disabled && this.menu) {\n            // Small delay so that when mousing down a Menu, every item moved over\n            // doesn't instantiate its lazy-create menu and show it.\n            this.delay('openMenu', 200);\n        }\n    }\n\n    onFocusOut(e) {\n        this.clearTimeout('openMenu');\n        super.onFocusOut(e);\n\n        // If this item has as menu, wait a bit before hiding it to allow cursor to move over it\n        // https://github.com/bryntum/support/issues/4080\n        if (this._menu) {\n            this.menu.closeTimer = this.menu.setTimeout(() => this.closeMenu(), this.closeMenuDelay);\n        }\n    }\n\n    openMenu(andFocus) {\n        const { menu } = this;\n\n        if (!this.disabled && menu) {\n            menu.focusOnToFront = andFocus;\n            menu.show();\n        }\n    }\n\n    onChildShow(shown) {\n        super.onChildShow(shown);\n        this.ariaElement.setAttribute('aria-expanded', true);\n    }\n\n    closeMenu() {\n        if (this._menu instanceof Widget) {\n            this.menu.close();\n        }\n    }\n\n    onChildHide(hidden) {\n        super.onChildHide(hidden);\n        this.ariaElement.setAttribute('aria-expanded', false);\n    }\n\n    changeToggleGroup(toggleGroup) {\n        if (toggleGroup && typeof this.checked !== 'boolean') {\n            this.checked = false;\n        }\n        return toggleGroup;\n    }\n\n    /**\n     * Get/sets the checked state of this `MenuItem` and fires the {@link #event-toggle}\n     * event upon change.\n     *\n     * Note that this must be configured as a `Boolean` to enable the checkbox UI.\n     * @member {Boolean} checked\n     */\n\n    changeChecked(checked, old) {\n        if (this.isConfiguring || typeof old === 'boolean') {\n            return Boolean(checked);\n        }\n    }\n\n    updateChecked(checked) {\n        const me = this;\n\n        if (!me.isConfiguring) {\n            if (me.toggleGroup) {\n                me.uncheckToggleGroupMembers();\n            }\n\n            me.element.setAttribute('aria-checked', checked);\n\n            /**\n             * The checked state of this menu item has changed.\n             *\n             * Note that this event bubbles up through parents and can be listened for on a top level\n             * {@link Core.widget.Menu Menu} for convenience.\n             * @event toggle\n             * @param {Core.widget.MenuItem} item - The menu item whose checked state changed.\n             * @param {Core.widget.Menu} menu - Menu containing the menu item\n             * @param {Boolean} checked - The _new_ checked state.\n             */\n            me.trigger('toggle', {\n                menu    : me.owner,\n                item    : me,\n                element : me.element,\n                bubbles : true,\n                checked\n            });\n        }\n    }\n\n    getToggleGroupMembers() {\n        const\n            me = this,\n            { checked, toggleGroup, element } = me,\n            result = [];\n\n        if (checked && toggleGroup) {\n            DomHelper.forEachSelector(me.rootElement, `[data-group=${toggleGroup}]`, otherElement => {\n                if (otherElement !== element) {\n                    const partnerCheckItem = Widget.fromElement(otherElement);\n                    partnerCheckItem && result.push(partnerCheckItem);\n                }\n            });\n        }\n\n        return result;\n    }\n\n    uncheckToggleGroupMembers() {\n        if (this.checked && this.toggleGroup) {\n            this.getToggleGroupMembers().forEach(widget => widget.checked = false);\n        }\n    }\n\n    get closeParent() {\n        const result = (typeof this.checked === 'boolean') ? this._closeParent : (this._closeParent !== false);\n\n        return result && !this.hasMenu;\n    }\n\n    changeMenu(config, existingMenu) {\n        const\n            me = this,\n            { constrainTo, scrollAction } = me.owner;\n\n        // This covers both Array and Object which are valid items config formats.\n        // menu could be { itemRef : { text : 'sub item 1 } }. But if it has\n        // child items or html property in it, it's the main config\n        if (config && typeof config === 'object' && !('items' in config) && !('widgets' in config) && !('html' in config)) {\n            config = {\n                lazyItems : config\n            };\n        }\n\n        return Menu.reconfigure(existingMenu, config, {\n            owner    : me,\n            defaults : {\n                type       : 'menu',\n                align      : 's0-e0',\n                anchor     : true,\n                autoClose  : true,\n                autoShow   : false,\n                cls        : 'b-sub-menu', // Makes the anchor hoverable to avoid mouseleave\n                forElement : me.element,\n                owner      : me,\n                ariaLabel  : me.text,\n\n                constrainTo,\n                scrollAction\n            }\n        });\n    }\n}\n\n// Register this widget type with its Factory\nMenuItem.initClass();\n","import Popup from './Popup.js';\nimport DomHelper from '../helper/DomHelper.js';\nimport EventHelper from '../helper/EventHelper.js';\nimport MenuItem from './MenuItem.js';\nimport Widget from './Widget.js';\n\nconst validKeys = {\n    ArrowUp    : 1,\n    ArrowDown  : 1,\n    ArrowRight : 1,\n    ArrowLeft  : 1,\n    Enter      : 1,\n    Escape     : 1\n};\n\n/**\n * @module Core/widget/Menu\n */\n\n/**\n * Menu widget, displays a list of items which the user can select from using mouse or keyboard. Can have submenus.\n *\n * @example\n * let menu = new Menu({\n *     forElement : btn.element,\n *     items      : [\n *         {\n *             icon : 'b-icon b-icon-add',\n *             text : 'Add'\n *         },\n *         {\n *             icon : 'b-icon b-icon-trash',\n *             text : 'Remove'\n *         },\n *         {\n *             icon     : 'b-icon b-icon-lock',\n *             disabled : true,\n *             text     : 'I am disabled'\n *         },\n *         {\n *             text : 'Sub menu',\n *             menu : [{\n *                 icon : 'b-icon b-fa-play',\n *                 text : 'Play'\n *             }]\n *         }\n *     ],\n *     // Method is called for all ancestor levels\n *     onItem({ item }) {\n *         Toast.show('You clicked ' + item.text);\n *     }\n * });\n *\n * ## Menu item interaction handling in a complex widget\n *\n * In the case of a menu which is part of a complex UI within a larger Bryntum widget, use\n * of the string form for handlers is advised. A handler which starts with `'up.'` will\n * be resolved by looking in owning widgets of the Menu. For example a Calendar may\n * have handlers for its MenuItems configured in:\n *\n * ```javascript\n * new Calendar({\n *     appendTo : document.body,\n *     project  : myProjectConfig,\n *     tbar  : {\n *         items : {\n *             settings : {\n *                 type : 'button',\n *                 text : 'Settings',\n *\n *                 // High weight so it goes at the end\n *                 weight : 800,\n *                 menu   : [{\n *                     text     : 'Hide non working days',\n *                     checked  : false,\n *\n *                      // The Menu's ownership will be traversed to find this function name.\n *                     onToggle : 'up.toggleHideNonWorkingDays'\n *                 }, {\n *                     text    : 'Clear changes',\n *\n *                      // The Menu's ownership will be traversed to find this function name.\n *                     onClick : 'up.clearUncommittedChanges'\n *                 }]\n *             }\n *         }\n *     },\n *\n *     // Menu handlers found here\n *     toggleHideNonWorkingDays({ checked }) {\n *         // Use Calendar API which creates event in the selected date\n *         this.hideNonWorkingDays = checked;\n *     },\n *\n *     clearUncommittedChanges() {\n *         // Clear changes to our event store which are not yet synced to the server\n *         this.eventStore.revertChanges();\n *     }\n * });\n * ```\n *\n * @classType menu\n * @inlineexample Core/widget/Menu.js\n *\n * @extends Core/widget/Popup\n */\nexport default class Menu extends Popup {\n    //region Config\n    static get $name() {\n        return 'Menu';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'menu';\n    }\n\n    static get configurable() {\n        return {\n            focusable : true,\n\n            align : 't-b',\n\n            scrollAction : 'hide',\n\n            /**\n             * Specify false to prevent the menu from getting focus when hovering items\n             * @default\n             * @config {Boolean}\n             */\n            focusOnHover : null,\n\n            // We do need a Scroller so that we can use its API to scroll around.\n            // But the overflow flags default to false.\n            scrollable : false,\n\n            defaultType : 'menuitem',\n\n            tools : {\n                // To get rid of the close tool from Popup\n                close : false\n            },\n\n            role : 'menu',\n\n            ariaElement : 'bodyElement'\n        };\n    }\n\n    /**\n     * Currently open sub menu, if any\n     * @member {Core.widget.Menu} currentSubMenu\n     * @readonly\n     */\n\n    //endregion\n\n    /**\n     * A descendant menu item has been activated.\n     *\n     * Note that this event bubbles up through parents and can be\n     * listened for on a top level {@link Core.widget.Menu Menu} for convenience.\n     * @event item\n     * @param {Core.widget.MenuItem} item - The menu item which is being actioned.\n     * @param {Core.widget.Menu} menu - Menu containing the menu item\n     */\n\n    /**\n     * The checked state of a descendant menu item has changed.\n     *\n     * Note that this event bubbles up through parents and can be\n     * listened for on a top level {@link Core.widget.Menu Menu} for convenience.\n     * @event toggle\n     * @param {Core.widget.MenuItem} item - The menu item whose checked state changed.\n     * @param {Core.widget.Menu} menu - Menu containing the menu item\n     * @param {Boolean} checked - The _new_ checked state.\n     */\n\n    /* break doc comment */\n\n    //region Init\n\n    construct(config) {\n        if (Array.isArray(config)) {\n            config = {\n                lazyItems : config\n            };\n        }\n\n        super.construct(config);\n\n        EventHelper.on({\n            element    : this.element,\n            click      : 'onMouseClick',\n            mouseover  : 'onMouseOver',\n            mouseenter : 'onMouseEnter',\n            mouseleave : 'onMouseLeave',\n            thisObj    : this\n        });\n    }\n\n    afterShow(resolveFn) {\n        // Don't instantiate all our items' subMenus right now.\n        // Use our private _menu property which will still be a config item.\n        const\n            { items, element } = this,\n            hasSubmenu         = items.some(item => Boolean(item._menu));\n\n        // afterShow is called before alignment, so this is the correct time\n        // to mutate things which will change this Widget's size.\n        if (hasSubmenu) {\n            element.classList.add('b-menu-with-submenu');\n        }\n\n        // Add CSS class to menu if any item has an icon, to allow aligning icon-less items\n        const hasIcon = items.some(item => item.icon);\n\n        if (hasIcon) {\n            element.classList.add('b-menu-with-icon');\n        }\n\n        super.afterShow(resolveFn);\n    }\n\n    createWidget(item) {\n        if (typeof item === 'string') {\n            item = {\n                text : item\n            };\n        }\n\n        return super.createWidget(item);\n    }\n\n    get focusElement() {\n        const\n            me          = this,\n            fromParentMenu = me.parentMenu?.element.contains(DomHelper.getActiveElement(me.parentMenu)),\n            firstWidget = me.items[0];\n\n        if (fromParentMenu || DomHelper.usingKeyboard || !(firstWidget instanceof MenuItem)) {\n            return super.focusElement;\n        }\n\n        return me.element;\n    }\n\n    //endregion\n\n    onDocumentMouseDown({ event }) {\n        // It's not a click outside if its a click on our owner Menu\n        if (!this.parentMenu || !this.parentMenu.owns(event.target)) {\n            return super.onDocumentMouseDown(...arguments);\n        }\n    }\n\n    //region Show\n\n    hide(animate) {\n        const me = this;\n\n        // We need to be _hidden when any focused descendants try to revertFocus\n        // so that they continue to fall back through the getFocusRevertTarget upward chain.\n        super.hide(animate);\n\n        if (!me.isVisible) {\n            // Will have no hide method if destroyed\n            me.currentSubMenu?.hide?.(animate);\n\n            if (me.parentMenu) {\n                me.parentMenu.currentSubMenu = null;\n            }\n        }\n    }\n\n    show() {\n        super.show(...arguments);\n\n        const { parentMenu } = this;\n\n        if (this.isVisible && parentMenu) {\n            parentMenu.currentSubMenu = this;\n        }\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Activates a menu item if user clicks on it\n     * @private\n     */\n    onMouseClick(event) {\n        const menuItem = event.target.closest('.b-menuitem');\n\n        if (menuItem) {\n            this.triggerElement(menuItem, event);\n        }\n    }\n\n    /**\n     * Activates menu items on hover. On real mouse hover, not on a touchstart.\n     * @private\n     */\n    onMouseOver(event) {\n        if (this.focusOnHover !== false) {\n            const\n                fromItemElement = event.relatedTarget?.closest('.b-widget'),\n                toItemElement   = event.target.closest('.b-widget'),\n                overItem        = Widget.fromElement(toItemElement);\n\n            // Activate soon in case they're moving fast over items.\n            if (!DomHelper.isTouchEvent && toItemElement && toItemElement !== fromItemElement && overItem.parent === this) {\n                this.setTimeout({\n                    fn                : 'handleMouseOver',\n                    delay             : 30,\n                    args              : [overItem],\n                    cancelOutstanding : true\n                });\n            }\n        }\n    }\n\n    handleMouseOver(overItem) {\n        overItem.focus();\n    }\n\n    onMouseEnter() {\n        // If we entered a submenu, ensure any close timer is cancelled\n        this.clearTimeout(this.closeTimer);\n    }\n\n    // unselect any menu item if mouse leaves the menu element (unless it enters a child menu)\n    onMouseLeave(event) {\n        const\n            me                = this,\n            { relatedTarget } = event,\n            leavingToChild    = relatedTarget && me.owns(relatedTarget);\n\n        let targetCmp = relatedTarget instanceof HTMLElement && Widget.fromElement(relatedTarget),\n            shouldHideMenu = !leavingToChild;\n\n        if (targetCmp) {\n            while (targetCmp.ownerCmp) {\n                targetCmp = targetCmp.ownerCmp;\n            }\n\n            // Or was found and does not belong to current menu DOM tree\n            // This condition will not allow possibly existing picker to hide\n            // Covered by Menu.t.js\n            shouldHideMenu &= !DomHelper.getAncestor(targetCmp.element, [event.target]);\n        }\n\n        if (!leavingToChild && shouldHideMenu) {\n            // Hide menu unless it was already initiated\n            if (me.currentSubMenu && !me.currentSubMenu.closeTimer) {\n                me.currentSubMenu.hide();\n            }\n\n            // Deactivate currently active *menu items* on mouseleave\n            if (me.element.contains(DomHelper.getActiveElement(me)) && DomHelper.getActiveElement(me).matches('.b-menuitem')) {\n                me.focusElement.focus();\n            }\n        }\n    }\n\n    /**\n     * Keyboard navigation. Up/down, close with esc, activate with enter\n     * @private\n     */\n    onInternalKeyDown(event) {\n        const\n            sourceWidget = Widget.fromElement(event),\n            isFromWidget = sourceWidget && sourceWidget !== this && !(sourceWidget instanceof MenuItem);\n\n        if (event.key === 'Escape') {\n            // Only close this menu if the ESC was in a child input Widget\n            (isFromWidget ? this : this.rootMenu).close();\n            return;\n        }\n\n        super.onInternalKeyDown(event);\n\n        // Do not process keys from certain elements\n        if (isFromWidget) {\n            return;\n        }\n\n        if (validKeys[event.key]) {\n            event.preventDefault();\n        }\n\n        const\n            el = this.element,\n            active = DomHelper.getActiveElement(el);\n\n        this.navigateFrom(active !== el && el.contains(active) ? active : null, event.key, event);\n    }\n\n    navigateFrom(active, key, event) {\n        const\n            me             = this,\n            { treeWalker } = me,\n            item           = active && me.getItem(active),\n            enterSubMenu   = me.rtl ? 'ArrowLeft' : 'ArrowRight',\n            exitSubMenu    = me.rtl ? 'ArrowRight' : 'ArrowLeft';\n\n        let toActivate;\n\n        switch (key) {\n            case 'ArrowUp':\n                treeWalker.currentNode = active || (active = me.bottomFocusTrap);\n                treeWalker.previousNode();\n                toActivate = treeWalker.currentNode;\n                break;\n\n            case 'ArrowDown':\n                treeWalker.currentNode = active || (active = me.topFocusTrap);\n                treeWalker.nextNode();\n                toActivate = treeWalker.currentNode;\n                break;\n\n            case ' ':\n                if (active && !active.classList.contains('b-disabled')) {\n                    if (item?.menu) {\n                        me.openSubMenu(active, item);\n                    }\n                    else {\n                        me.triggerElement(active, event);\n                    }\n                }\n                break;\n\n            case enterSubMenu:\n                if (active && item?.menu && !active.classList.contains('b-disabled')) {\n                    // opening with arrow keys highlights first item (as in menus on mac)\n                    const openedMenu = me.openSubMenu(active, item);\n\n                    // If show hs not been vetoed, ask it to focus.\n                    // Container will delegate focus inward if possible.\n                    openedMenu?.focus();\n                }\n                else {\n                    treeWalker.currentNode = active || (active = me.topFocusTrap);\n                    treeWalker.nextNode();\n                    toActivate = treeWalker.currentNode;\n                }\n                break;\n\n            case exitSubMenu:\n                if (me.isSubMenu) {\n                    me.hide();\n                }\n                else if (!active) {\n                    treeWalker.currentNode = active || (active = me.topFocusTrap);\n                    treeWalker.nextNode();\n                    toActivate = treeWalker.currentNode;\n                }\n                break;\n\n            case 'Enter':\n                if (active && !active.classList.contains('b-disabled')) {\n                    me.triggerElement(active, event);\n                }\n                break;\n        }\n\n        // Move focus to wherever we have calculated\n        if (toActivate) {\n            // Previous moved to encapsulating element; wrap from end\n            if (toActivate === me.element) {\n                me.navigateFrom(me.bottomFocusTrap, 'ArrowUp', event);\n            }\n            // Next could not move because we're at the end; wrap from top\n            else if (toActivate === active) {\n                me.navigateFrom(me.topFocusTrap, 'ArrowDown', event);\n            }\n            else {\n                toActivate.focus();\n            }\n        }\n    }\n\n    //endregion\n\n    //region Activate menu item\n\n    getItem(item) {\n        // Cannot use truthiness test because index zero may be passed.\n        if (item != null) {\n            // Access by index\n            if (typeof item === 'number') {\n                return this.items[item];\n            }\n\n            // Access by element\n            if (item.nodeType === Element.ELEMENT_NODE) {\n                return Widget.fromElement(item, 'menuitem', this.contentElement);\n            }\n\n            // Access by id\n            return this.items.find(c => c.id == item);\n        }\n    }\n\n    /**\n     * Activate a menu item (from its element)\n     * @private\n     * @fires item\n     * @param menuItemElement\n     */\n    triggerElement(menuItemElement, event) {\n        const item = this.getItem(menuItemElement);\n\n        // If the trigger gesture happened on a non-MenuItem\n        // item will be undefined. Do not action on a non-MenuItem\n        // or a disabled MenuItem\n        if (item && !item.disabled) {\n            item.doAction(event);\n        }\n    }\n\n    /**\n     * Returns true if this menu is a sub menu.\n     * To find out which menu is the parent, check {@link #property-parentMenu}.\n     * @type {Boolean}\n     * @readonly\n     */\n    get isSubMenu() {\n        return this === this.owner?.menu;\n    }\n\n    /**\n     * Opens a submenu anchored to a menu item\n     * @private\n     * @param element\n     * @param item\n     */\n    openSubMenu(element, item) {\n        const\n            me = this,\n            subMenu = item.menu;\n\n        if (subMenu) {\n            if (!subMenu.isVisible) {\n                const event = { item, element };\n\n                if (me.trigger('beforeSubMenu', event) === false) {\n                    return;\n                }\n                if (item.onBeforeSubMenu?.(event) === false) {\n                    return;\n                }\n                subMenu.show();\n            }\n\n            return me.currentSubMenu = subMenu;\n        }\n    }\n\n    /**\n     * Get/set focused menu item.\n     * Shows submenu if newly focused item has a menu and is not disabled.\n     * @property {HTMLElement}\n     */\n    set selectedElement(element) {\n        const\n            me = this,\n            lastSelected = me._selectedElement;\n\n        if (lastSelected) {\n            const\n                lastItem     = me.getItem(lastSelected),\n                lastItemMenu = lastItem?.menu;\n\n            lastItemMenu?.hide();\n\n            lastSelected.classList.remove('b-active');\n        }\n\n        me._selectedElement = element;\n\n        // might set to null to deselect\n        if (element) {\n            const doFocus = DomHelper.isFocusable(element);\n\n            element.classList.add('b-active');\n            me.scrollable.scrollIntoView(element, {\n                animate : !doFocus,\n                focus   : doFocus\n            });\n        }\n    }\n\n    get selectedElement() {\n        return this._selectedElement;\n    }\n\n    selectFirst() {\n        const treeWalker = this.treeWalker;\n\n        treeWalker.currentNode = this.topFocusTrap;\n        treeWalker.nextNode();\n\n        // If we are under keyboard control, this must happen in the next\n        // animation frame so that the keydown event doesn't fire on the\n        // newly focused node.\n        this.requestAnimationFrame(() => treeWalker.currentNode.focus());\n    }\n\n    //endregion\n\n    //region Close\n\n    /**\n     * Gets the parent Menu if this Menu is a submenu, or `undefined`.\n     * @property {Core.widget.Menu}\n     */\n    get parentMenu() {\n        const result = this.owner;\n\n        return result && (result.isMenu ? result : result.up?.('menu'));\n    }\n\n    /**\n     * Gets this menus root menu, the very first menu shown in a sub menu hierarchy\n     * @property {Core.widget.Menu}\n     * @private\n     */\n    get rootMenu() {\n        let menu = this;\n\n        while (menu.parentMenu instanceof this.constructor) {\n            menu = menu.parentMenu;\n        }\n\n        return menu;\n    }\n\n    //endregion\n}\n\n// Register this widget type with its Factory\nMenu.initClass();\n","import InstancePlugin from '../../mixin/InstancePlugin.js';\nimport Menu from '../../widget/Menu.js';\nimport Objects from '../../helper/util/Objects.js';\nimport BrowserHelper from '../../helper/BrowserHelper.js';\nimport DomHelper from '../../helper/DomHelper.js';\nimport StringHelper from '../../helper/StringHelper.js';\nimport EventHelper from '../../helper/EventHelper.js';\n\n/**\n * @module Core/feature/base/ContextMenuBase\n */\n\nlet contextMenuKeyEvent;\n\n/**\n * Abstract base class used by other context menu features.\n *\n * ## Keyboard shortcuts\n * This base class has the following default keyboard shortcuts:\n *\n * | Keys       | Action               | Action description                               |\n * |------------|----------------------|--------------------------------------------------|\n * | Space      | showContextMenuByKey | Shows context menu for currently focused element |\n * | Ctrl+Space | showContextMenuByKey | Shows context menu for currently focused element |\n *\n *\n * For more information on how to customize keyboard shortcuts, please see our guide\n * (Guides/Customization/Keyboard shortcuts)\n *\n * @extends Core/mixin/InstancePlugin\n * @abstract\n */\nexport default class ContextMenuBase extends InstancePlugin {\n    static get $name() {\n        return 'ContextMenuBase';\n    }\n\n    //region Config\n\n    static get configurable() {\n        return {\n            /**\n             * This is a type of the context menu used to generate correct names for methods and events.\n             * Should be in camel case. Required to be set in subclass.\n             * @config {String}\n             * @readonly\n             */\n            type : null,\n\n            /**\n             * Gets the Menu instance that this feature is using.\n             * @member {Core.widget.Menu} menu\n             * @readonly\n             */\n            /**\n             * A config which will be applied when creating the Menu component.\n             * @config {MenuConfig}\n             */\n            menu : {\n                $config : ['lazy', 'nullify'],\n                value   : {\n                    type         : 'menu',\n                    autoShow     : false,\n                    closeAction  : 'hide',\n                    scrollAction : 'hide',\n                    constrainTo  : globalThis\n                }\n            },\n\n            /**\n             * {@link Core/widget/Menu} items object containing named child menu items to apply to the feature's\n             * provided context menu.\n             *\n             * This may add extra items as below, but may also remove any of the default items by configuring the name\n             * of the item as `null`.\n             *\n             * ```javascript\n             * features : {\n             *     cellMenu : {\n             *         // This object is applied to the Feature's predefined default items\n             *         items : {\n             *             switchToDog : {\n             *                 text : 'Dog',\n             *                 icon : 'b-fa b-fa-fw b-fa-dog',\n             *                 onItem({record}) {\n             *                     record.dog = true;\n             *                     record.cat = false;\n             *                 },\n             *                 weight : 500     // Make this second from end\n             *             },\n             *             switchToCat : {\n             *                 text : 'Cat',\n             *                 icon : 'b-fa b-fa-fw b-fa-cat',\n             *                 onItem({record}) {\n             *                     record.dog = false;\n             *                     record.cat = true;\n             *                 },\n             *                 weight : 510     // Make this sink to end\n             *             },\n             *             add : null // We do not want the \"Add\" submenu to be available\n             *         }\n             *     }\n             * }\n             * ```\n             *\n             * @config {Object<String,MenuItemConfig|Boolean|null>}\n             */\n            items : {},\n\n            /**\n             * Event which is used to show context menu.\n             * Available options are: 'contextmenu', 'click', 'dblclick' or `false` to disable.\n             * Default value is used from {@link Grid/view/GridBase#config-contextMenuTriggerEvent}\n             * @config {String|Boolean}\n             */\n            triggerEvent : false,\n\n            /**\n             * See {@link #keyboard-shortcuts Keyboard shortcuts} for details\n             * @config {Object<String,String>} keyMap\n             */\n            keyMap : {\n                ' '          : { handler : 'showContextMenuByKey', weight : 100 },\n                'Ctrl+Space' : 'showContextMenuByKey'\n            }\n        };\n    }\n\n    // Plugin configuration. This plugin chains some of the functions in Grid.\n    // The contextmenu event is emulated from a taphold gesture on touch platforms.\n    static get pluginConfig() {\n        return {\n            assign : ['showContextMenu'],\n            chain  : [\n                'onElementContextMenu',\n                'onElementClick',\n                'onElementDblClick'\n            ]\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    construct(...args) {\n        super.construct(...args);\n\n        if (!this.type?.length) {\n            throw new Error(`Config 'type' is required to be specified for context menu`);\n        }\n    }\n    //endregion\n\n    //region Events\n\n    /**\n     * This event fires on the owning widget when an item is selected in the context menu.\n     * @event contextMenuItem\n     * @on-owner\n     * @param {Core.widget.Widget} source The owning widget\n     * @param {Core.widget.Menu} menu The menu\n     * @param {Core.widget.MenuItem} item Selected menu item\n     */\n\n    /**\n     * This event fires on the owning widget when a check item is toggled in the context menu.\n     * @event contextMenuToggleItem\n     * @on-owner\n     * @param {Core.widget.Widget} source The owning widget\n     * @param {Core.widget.Menu} menu The menu\n     * @param {Core.widget.MenuItem} item Selected menu item\n     * @param {Boolean} checked Checked or not\n     */\n\n    onElementContextMenu(event) {\n        this.onElementEvent(event);\n    }\n\n    onElementClick(event) {\n        this.onElementEvent(event);\n    }\n\n    onElementDblClick(event) {\n        this.onElementEvent(event);\n    }\n\n    onElementEvent(event) {\n        // Don't show anything if ctrlKey pressed\n        if (event.ctrlKey === true) {\n            event.preventDefault();\n            return;\n        }\n\n        // Check if already handled, to only show one context menu\n        if (!event.handled && this.triggerEvent === event.type) {\n            const originalEvent = event;\n\n            // Point the context menu target at the original invoking key event's target\n            if (contextMenuKeyEvent) {\n                const { target } = contextMenuKeyEvent;\n                // To define properties on the event object in salesforce env first we need to \"fix\" it\n                // https://github.com/bryntum/support/issues/4432\n                event = EventHelper.fixEvent(new MouseEvent(event.type, event));\n                Object.defineProperty(event, 'target', { get : () => target, configurable : true });\n                event.preventDefault = function() {\n                    originalEvent.preventDefault();\n                    // Set handled to let other menus know not to act on this fake event\n                    originalEvent.handled = true;\n                };\n            }\n            this.internalShowContextMenu(event);\n        }\n    }\n\n    showContextMenuByKey(event) {\n        // Convert space on a non-editable element to a contextmenu event\n        if (!DomHelper.isEditable(event.target)) {\n            const target = this.getKeyboardContextMenuTarget(event.target);\n\n            if (target) {\n                contextMenuKeyEvent = event;\n                DomHelper.triggerMouseEvent(target, this.triggerEvent);\n                event.handled = true;\n                event.preventDefault();\n                event.stopImmediatePropagation();\n                contextMenuKeyEvent = null;\n                // Returning true to let KeyMap know that the event is handled.\n                return true;\n            }\n        }\n        // Returning false to let KeyMap know that other actions can be called for this event.\n        return false;\n    }\n\n    // Pick a target child of a keydowned element to fire a contextmenu event through.\n    getKeyboardContextMenuTarget(targetElement) {\n        const targetRect = DomHelper.isInView(targetElement);\n\n        return targetElement.children.length ? DomHelper.childFromPoint(targetElement, targetRect.width / 2, targetRect.height / 2) : targetElement;\n    }\n\n    //endregion\n\n    //region Menu handlers\n\n    internalShowContextMenu(domEvent) {\n        const me = this;\n\n        if (me.disabled) {\n            return;\n        }\n\n        const data = me.getDataFromEvent(domEvent);\n\n        if (!domEvent.handled && data && me.shouldShowMenu(data)) {\n            // CTRL + click in Safari triggers contextmenu + click, prevent click to not immediately close menu\n            if (domEvent.type === 'contextmenu' && BrowserHelper.isSafari && domEvent.ctrlKey && !domEvent.metaKey) {\n                EventHelper.on({\n                    element : domEvent.target,\n                    capture : true,\n                    once    : true,\n                    thisObj : this,\n                    click(e) {\n                        e.preventDefault();\n                        e.stopImmediatePropagation();\n                    }\n                });\n            }\n\n            data.domEvent = domEvent;\n            me.showContextMenu(data);\n        }\n    }\n\n    getDataFromEvent(event) {\n        return {\n            event,\n            targetElement : this.getTargetElementFromEvent(event)\n        };\n    }\n\n    getTargetElementFromEvent(event) {\n        return event.target;\n    }\n\n    /**\n     * Shows the context menu.\n     * @param {Event} event The initiating event.\n     * @param {Object|HTMLElement} [alignSpec] Menu alignment specification, or an element to align to\n     * @param {HTMLElement|Core.helper.util.Rectangle} alignSpec.target The Element or Rectangle to align to.\n     * @param {Boolean} [alignSpec.anchor] True to show a pointer arrow connecting to the target. Defaults to false.\n     * @param {Boolean} [alignSpec.overlap] True to allow this to overlap the target.\n     * @param {String} alignSpec.align The alignment specification string, `[trbl]n-[trbl]n`.\n     * @on-owner\n     */\n    showContextMenu(event, alignSpec) {\n        const\n            me               = this,\n            isDOMEvent       = DomHelper.isDOMEvent(event),\n            menuContext      = isDOMEvent ? me.getDataFromEvent(event) : event,\n            domEvent         = isDOMEvent ? event : menuContext.domEvent;\n\n        // If our menu was visible from last invocation, hide it.\n        // Apps may need the ${type}MenuShow event which is triggered in onShow.\n        me._menu?.hide();\n\n        if (me.disabled) {\n            return;\n        }\n\n        /**\n         * @member {Object} menuContext\n         * An informational object containing contextual information about the last activation\n         * of the context menu. The base properties are listed below. Some subclasses may add extra\n         * contextual information such as `eventRecord` and `resourceRecord` to the block.\n         * @property {Event} menuContext.domEvent The initiating event.\n         * @property {Event} menuContext.event DEPRECATED: The initiating event.\n         * @property {Number[]} menuContext.point The client `X` and `Y` position of the initiating event.\n         * @property {HTMLElement} menuContext.targetElement The target to which the menu is being applied.\n         * @property {Object<String,MenuItemConfig|Boolean|null>} menuContext.items The context menu **configuration** items.\n         * @property {Core.data.Model[]} menuContext.selection The record selection in the client (Grid, Scheduler, Gantt or Calendar).\n         * @readonly\n         */\n        me.menuContext = menuContext;\n\n        const\n            {\n                type,\n                client,\n                processItems\n            }         = me,\n            elCenter  = DomHelper.isInView(menuContext.targetElement).center;\n\n        Objects.assign(menuContext, {\n            feature   : me,\n            point     : domEvent?.clientX ? [domEvent.clientX + 1, domEvent.clientY + 1] : [elCenter.x, elCenter.y],\n            menu      : me,\n            items     : {},\n            selection : client.selectedRecords\n        });\n\n        // Call the chainable method which other features use to add or remove their own menu items.\n        me.callChainablePopulateMenuMethod(menuContext);\n\n        // Merge with user defined items\n        Objects.merge(menuContext.items, me.baseItems);\n\n        // Do not drop through to browser context menu if all our items have been hidden, or processItems\n        // returns false to veto the show.\n        me.preventDefaultEvent(menuContext);\n\n        // Allow user a chance at processing the items and preventing the menu from showing\n        if ((!processItems || me.callback(processItems, client, [menuContext]) !== false) && me.hasActiveMenuItems(menuContext)) {\n            me.populateItemsWithData(menuContext);\n\n            // beforeContextMenuShow is a lifecycle method which may be implemented in subclasses to preprocess the event.\n            if (me.beforeContextMenuShow(menuContext) !== false) {\n                const { menu } = me;\n                // Trigger event that allows preventing menu or manipulating its items.\n                if (client.trigger(`${type}MenuBeforeShow`, menuContext) !== false) {\n                    menu.items = menuContext.items;\n                    menu.showBy(alignSpec || menuContext.point);\n\n                    // Any drag drop type action should hide the menu\n                    me.touchMoveDetacher?.();\n                    me.touchMoveDetacher = EventHelper.on({\n                        element   : client.element,\n                        touchmove : () => menu.hide(),\n                        thisObj   : menu,\n                        once      : true\n                    });\n\n                    // A DOM event will not be present if this is being called programatically\n                    // with a generated eventParams block which has no `domEvent` property.\n                    // ContextMenuBase#internalShowContextMenu injects that property when\n                    // reacting to a contextmenu event.\n                    if (domEvent) {\n                        domEvent.preventDefault();\n                        // Let others know that this event has been handled\n                        domEvent.handled = true;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Returns the base, configured-in menu items set from the configured items, taking into\n     * account the namedItems the feature offers.\n     * @property {Object[]}\n     * @readonly\n     * @internal\n     */\n    get baseItems() {\n        if (!this._baseItems) {\n            const\n                me             = this,\n                { namedItems } = me,\n                baseItems      = (me._baseItems = Objects.assign({}, me.items));\n\n            // Substitute any named items into any of our items that reference them.\n            for (const ref in baseItems) {\n                const item = baseItems[ref];\n\n                if (item) {\n                    // If this class or instance has a \"namedItems\" object\n                    // named by this ref, then use it as the basis for the item\n                    if (namedItems && (ref in namedItems)) {\n                        baseItems[ref] = typeof item === 'object' ? Objects.merge(Objects.clone(namedItems[ref]), item) : namedItems[ref];\n                    }\n                    else if (item === true) {\n                        delete baseItems[ref];\n                    }\n                }\n            }\n        }\n\n        return this._baseItems;\n    }\n\n    /**\n     * Hides the context menu\n     * @internal\n     */\n    hideContextMenu(animate) {\n        this.menu?.hide(animate);\n    }\n\n    callChainablePopulateMenuMethod(eventParams) {\n        // For example `populateCellMenu`\n        this.client[`populate${StringHelper.capitalize(this.type)}Menu`]?.(eventParams);\n    }\n\n    hasActiveMenuItems(eventParams) {\n        // We only have a viable menu if we have some non-null items which are visible.\n        // Some Menu features hide certain menu options under conditions like\n        // client being readOnly. This can result in no menu options being visible.\n        // Under these circumstances, showContextMenu must not attempt to show an empty Menu.\n        return Object.values(eventParams.items).some(item => item && !item.hidden);\n    }\n\n    /**\n     * Override this function and return `false` to prevent the context menu from being shown. Returns `true` by default.\n     * @returns {Boolean}\n     * @internal\n     */\n    shouldShowMenu() {\n        return true;\n    }\n\n    beforeContextMenuShow(eventParams) {}\n\n    populateItemsWithData(eventParams) {}\n\n    preventDefaultEvent(eventParams) {\n        eventParams.event?.preventDefault();\n    }\n\n    //endregion\n\n    //region Configurables\n\n    changeTriggerEvent(triggerEvent) {\n        return triggerEvent || this.client.contextMenuTriggerEvent;\n    }\n\n    changeMenu(menu, oldMenu) {\n        const\n            me = this,\n            {\n                client,\n                type\n            } = me;\n\n        if (menu) {\n            return Menu.reconfigure(oldMenu, menu ? Menu.mergeConfigs({\n                owner       : client,\n                rootElement : client.rootElement,\n                onItem(itemEvent) {\n                    client.trigger(`${type}MenuItem`, itemEvent);\n                },\n                onToggle(itemEvent) {\n                    client.trigger(`${type}MenuToggleItem`, itemEvent);\n                },\n                onDestroy() {\n                    me.menu = null;\n                },\n                // Load up the item event with the contextual info\n                onBeforeItem(itemEvent) {\n                    Object.assign(itemEvent, me.menuContext);\n                },\n                onShow({ source : menu }) {\n                    me.menuContext.menu = menu;\n                    client.trigger(`${type}MenuShow`, me.menuContext);\n                }\n            }, menu) : null, me);\n        }\n        else if (oldMenu?.isWidget) {\n            oldMenu.destroy();\n        }\n    }\n\n    //endregion\n\n}\n","/**\n * @module Core/helper/TemplateHelper\n */\n\nconst\n    tagSpaceRe = />[ \\t\\r\\n]+</g,\n    multiSpaceRe = /\\s\\s+/g;\n\n/**\n * Helper for template strings, use as tag function\n * @example\n * TemplateHelper.tpl`...`\n * @internal\n */\nexport default class TemplateHelper {\n    /**\n     * Tag function for template literals that does some basic cleanup\n     * @private\n     */\n    static tpl(strings, ...values) {\n        let count  = 0,\n            output = values.map((val, i) => {\n                // TODO: pad output nicely instead of just trimming away\n                let ret = strings[i];\n\n                if (Array.isArray(val)) {\n                    ret += val.reduce((ack, item) => ack += (typeof item === 'string' ? item.trim() : item) + '\\n', '');\n                }\n                else {\n                    if (val === undefined) {\n                        val = '';\n                    }\n                    ret += typeof val === 'string' ? val.trim() : val;\n                }\n\n                count++;\n\n                return ret;\n            }).join('');\n\n        if (count <= strings.length) {\n            output += strings[strings.length - 1];\n        }\n\n        // Excise unnecessary *soft* whitespace textNodes. We cannot use \\s because that\n        // matches non-breaking spaces which need to be preserved.\n        // Also reduce any usage of multiple spaces to single, since they have no value in html\n        return output.replace(tagSpaceRe, '><').replace(multiSpaceRe, ' ').trim();\n    }\n\n    /**\n     * Tag function for template literals that does some basic cleanup. Version for docs that do not remove blank space,\n     * to keep code snippets formatting intact.\n     * @private\n     */\n    static docsTpl(strings, ...values) {\n        let count  = 0,\n            output = values.map((val, i) => {\n                // TODO: pad output nicely instead of just trimming away\n\n                let ret = strings[i];\n\n                if (Array.isArray(val)) {\n                    ret += val.reduce((ack, item) => ack += (typeof item === 'string' ? item.trim() : item) + '\\n', '');\n                }\n                else {\n                    if (val === undefined) {\n                        val = '';\n                    }\n                    ret += typeof val === 'string' ? val.trim() : val;\n                }\n\n                count++;\n\n                return ret;\n            }).join('');\n\n        if (count <= strings.length) {\n            output += strings[strings.length - 1];\n        }\n\n        // Excise unnecessary *soft* whitespace textNodes. We cannot use \\s because that\n        // matches non-breaking spaces which need to be preserved.\n        return output.replace(tagSpaceRe, '><').trim();\n    }\n\n    static repeat(times) {\n        return function(...args) {\n            return TemplateHelper.tpl(...args).repeat(times);\n        };\n    }\n\n    static loop(times) {\n\n    }\n}\n","/**\n * @module Core/helper/TimeZoneHelper\n */\n\n// region Internal\n\n// Used internally to save offset info\nclass TimeZoneOffsetInfo extends Array {\n    constructor(timeZone, year) {\n        super();\n        this.timeZone = timeZone;\n        this.year = year;\n    }\n}\n\n// Used internally to handle more info than possible with ordinary Date\nclass TimeZoneDate {\n    constructor(asString, timeZone) {\n        this.asString = asString;\n        this.timeZone = timeZone;\n        this.asArray = parseStringDate(asString);\n    }\n\n    // Lazy, used in TZH.toTimeZone\n    get asLocalDate() {\n        if (!this._asLocalDate) {\n            this._asLocalDate = new Date(...this.asArray);\n        }\n        return this._asLocalDate;\n    }\n\n    // Lazy, used when finding offsets\n    get asTicksUtc() {\n        if (!this._asTicksUtc) {\n            this._asTicksUtc = new Date(Date.UTC(...this.asArray)).getTime();\n        }\n        return this._asTicksUtc;\n    }\n}\n\n// Takes a local date and converts it to a TimeZoneDate by converting to string and parsing it\nconst\n    toTimeZoneInternal = (date, timeZone) => {\n        const tzDateString = date.toLocaleString('sv-SE', { timeZone : timeZone });\n        return new TimeZoneDate(tzDateString, timeZone);\n    },\n\n    // Takes ticks (Date.getTime()) and a timezone and returns the difference\n    getOffsetUtc = (ticks, timeZone) => {\n        const { asTicksUtc, asString }  = toTimeZoneInternal(new Date(ticks), timeZone);\n        return { offset : (ticks - asTicksUtc) / 60000, tzTicksUtc : asTicksUtc, tzString : asString };\n    },\n\n    // Parse a 'YYYY-MM-DD HH:MM' formatted datetime into an array of numbers (month is zero-based)\n    parseStringDate = stringDate => {\n        const parsed = stringDate.split(/[\\s-:]/).map(i => i * 1);\n        parsed[1] -= 1;\n        return parsed;\n    },\n\n    min   = -60000,\n    hour  = 3600000,\n    day   = -86400000,\n    month = 2592000000,\n\n    // This function will take a IANA time zone and any year, and then loop through each month and test for UTC offsets\n    // If it finds more than one, that implies that current time zone has DST that actual year. The function will then go\n    // deeper and find the exact datetimes where DST changes occurs.\n    // All data is cached, so when same year is asked for later it's already calculated\n    findOffsetDates = (timeZone, year) => {\n        const cached = offsetDateCache.get(timeZone, year);\n        if (cached) {\n            return cached;\n        }\n        const\n            offsets        = new TimeZoneOffsetInfo(timeZone, year),\n            // The check runs with UTC ticks\n            startUtcTicks  = new Date(Date.UTC(year, 0, 1)).getTime();\n        let ticks          = startUtcTicks,\n            incr           = month,\n            monthIndex     = 0,\n            previousOffset = [],\n            currentOffset  = null,\n            tzTicksUtc, tzString, offset,  done;\n\n        // Loop is perhaps a bit difficult to understand. Basically, what it does is this:\n        // (1) Go forward month by month looking for changed offsets, if found continue reading (2), else no DST found.\n        // (2) Go backwards from date found in (1) day by day until offset changes back to the first one found.\n        // (3) Go forwards hour by hour from date found in (2) until offset changes again.\n        // (4) Go backwards minute by minute from date found in (3) until offset changes back to the first one found.\n        // (5) The offset we're looking for is the one previous to that found in (4).\n        // (6) Continue loop for next DST change date.\n\n        while (!done) {\n        // Gets UTC offset for current utc ticks\n            ({ offset, tzTicksUtc, tzString } = getOffsetUtc(ticks, timeZone));\n\n            // If first call, add that offset to the list of found offsets.\n            // Also save this offset as the current one found\n            if (currentOffset == null) {\n                currentOffset = offset;\n                offsets.push({ offset });\n            }\n            // If we are looping months or hours and the offset has changed from the one previously found\n            else if (incr > 0 && offset !== currentOffset) {\n            // Change to loop days or minutes\n                incr = incr === month ? day : min;\n            }\n            // If we are looping days or minutes and the offset again equals the one previously found\n            else if (incr < 0 && offset === currentOffset) {\n            // If we are looping days, change to loop hours\n                if (incr === day) {\n                    incr = hour;\n                }\n                // If we are looping minutes, that means that we have found the exact DST change position\n                else {\n                // Just one offset, add another\n                    if (offsets.length === 1) {\n                        offsets.push(previousOffset);\n                        currentOffset = previousOffset.offset;\n                    // Continue to find the ending of offset2/start of offset1\n                    }\n                    // Has two offset, found ending of offset2/start of offset1\n                    else {\n                        offsets[0].startTicks = previousOffset.startTicks;\n                        offsets[0].startDateString = previousOffset.startDateString;\n                        // We are done\n                        done = true;\n                    }\n                    // Change to loop months again\n                    incr = month;\n                }\n            }\n\n            // Always store previous offset as to easily be able to get back to it in loop\n            previousOffset = { offset, startDateString : tzString, startTicks : tzTicksUtc };\n\n            // If we're looping months, we need to ignore the day/hour/minute loop on ticks\n            if (incr === month) {\n                ticks = startUtcTicks;\n                ticks += monthIndex * month;\n                monthIndex += 1;\n            }\n\n            ticks += incr;\n\n            // If now DST, we are done after 12 months\n            if (monthIndex > 11) {\n                done = true;\n            }\n        }\n\n        // Save to cache\n        offsetDateCache.set(offsets);\n\n        return offsets;\n    },\n\n    offsetDateCache = {\n        _cache : {},\n        get(timeZone, year) {\n            return this._cache[timeZone]?.[year];\n        },\n        set(offsetInfo) {\n            const\n                { timeZone } = offsetInfo,\n                { _cache } = this;\n\n            if (!_cache[timeZone]) {\n                _cache[timeZone] = {};\n            }\n            _cache[timeZone][offsetInfo.year] = offsetInfo;\n        }\n    };\n\n// endregion\n\n/**\n * Helper for time zone manipulation.\n */\nexport default class TimeZoneHelper {\n\n    static get $name() {\n        return 'TimeZoneHelper';\n    }\n\n    /**\n     * Adjusts the time of the specified date to match the specified time zone. i.e. \"what time is it now in this\n     * timezone?\"\n     *\n     * JavaScript dates are always in the local time zone. This function adjusts the time to match the time in the\n     * specified time zone, without altering the time zone. Thus, it won't hold the same time as the original date.\n     *\n     * Note that this time zone calculation relies on the browsers built-in functionality to convert a local date to a\n     * string in a given time zone and then converting the string back into a date. If browsers time zone information\n     * or interpretation is inaccurate or lacks data, the conversion will probably be inaccurate as well.\n     *\n     * ```javascript\n     * const localDate = new Date(2020, 7, 31, 7); // UTC+2 ('Europe/Stockholm')\n     * const cstDate   = TimeZoneHelper.toTimezone(localDate, 'America/Chicago'); // 2020, 7, 31, 0 (still UTC+2, but\n     * // appear as UTC-6)\n     * ```\n     *\n     * @static\n     * @param {Date} date\n     * @param {String|Number} timeZone Timezone supported by `Intl.DateFormat` or a UTC offset in minutes\n     * @returns {Date}\n     */\n    static toTimeZone(date, timeZone) {\n        if (typeof timeZone === 'number') {\n            return this.toUtcOffset(date, timeZone);\n        }\n        const tzDate = toTimeZoneInternal(date, timeZone);\n\n        if (tzDate.asArray[3] !== tzDate.asLocalDate.getHours()) {\n            console.error('Incorrect transformation due to local dst');\n        }\n        return tzDate.asLocalDate;\n    }\n\n    /**\n     * Adjusts the time of the specified date to match local system time zone in the specified time zone. i.e. \"what\n     * time in my timezone would match time in this timezone?\"\n     *\n     * JavaScript dates are always in the local time zone. This function adjusts the time to match the time in the\n     * specified time zone, without altering the time zone. Thus, it won't hold the same time as the original date.\n     *\n     * Note that this time zone calculation relies on the browsers built-in functionality to convert a date from a given\n     * timezone into a local date by calculating specified time zone UTC offsets and using those to perform the date\n     * conversion. If browsers time zone information or interpretation is inaccurate or lacks data, the conversion will\n     * probably be inaccurate as well.\n     *\n     * ```javascript\n     * const cstDate   = new Date(2022, 8, 27, 4); // CST 'America/Chicago'\n     * const localDate = TimeZoneHelper.fromTimeZone(cstDate, 'America/Chicago'); // 2022, 8, 27, 11 (UTC+2 Europe/Stockholm)\n     * ```\n     *\n     * @static\n     * @param {Date} date\n     * @param {String|Number} timeZone Timezone supported by Intl.DateFormat or a UTC offset in minutes\n     * @returns {Date}\n     */\n    static fromTimeZone(date, timeZone) {\n        if (typeof timeZone === 'number') {\n            return this.fromUtcOffset(date, timeZone);\n        }\n\n        const\n            dateArr     = this.dateAsArray(date),\n            offsetDates = findOffsetDates(timeZone, date.getUTCFullYear());\n        let useOffset = offsetDates[0].offset;\n\n        if (offsetDates.length === 2) {\n            const utcTicks = Date.UTC(...dateArr);\n            if (utcTicks >= offsetDates[1].startTicks && utcTicks < offsetDates[0].startTicks) {\n                useOffset = offsetDates[1].offset;\n            }\n        }\n\n        // Converting without having to deal with local time\n        dateArr[4] += useOffset; // Adds offset minutes\n\n        return new Date(Date.UTC(...dateArr));\n    }\n\n    /**\n     * Adjusts the time of the specified date with provided UTC offset in minutes\n     *\n     * JavaScript dates are always in the local time zone. This function adjusts the time to match the time in the\n     * specified time zone, without altering the time zone. Thus, it won't hold the same time as the original date.\n     *\n     * ```javascript\n     * const localDate = new Date(2020, 7, 31, 7); // UTC+2\n     * const utcDate   = TimeZoneHelper.toUtcOffset(localDate, 0); // 2020, 7, 31, 5 (still UTC+2, but appear as UTC+0)\n     * ```\n     *\n     * @static\n     * @private\n     * @param {Date} date\n     * @param {Number} utcOffset in minutes\n     * @returns {Date}\n     */\n    static toUtcOffset(date, utcOffset) {\n        const offset = date.getTimezoneOffset() + utcOffset;\n\n        return new Date(date.getTime() + offset * 60 * 1000);\n    }\n\n    /**\n     * Adjusts the time of the specified date by removing the provided UTC offset in minutes.\n     *\n     * JavaScript dates are always in the local time zone. This function adjusts the time to match the time in the\n     * specified time zone, without altering the time zone. Thus, it won't hold the same time as the original date.\n     *\n     * ```javascript\n     * const utcDate = new Date(2020, 7, 31, 7); // UTC\n     * const utcDate = TimeZoneHelper.fromUtcOffset(localDate, 0); // 2020, 7, 31, 9 (matches 2020-08-31 07:00+00:00)\n     * ```\n     *\n     * @static\n     * @private\n     * @param {Date} date\n     * @param {Number} utcOffset in minutes\n     * @returns {Date}\n     */\n    static fromUtcOffset(date, utcOffset) {\n        const offset = -date.getTimezoneOffset() - utcOffset;\n\n        return new Date(date.getTime() + offset * 60 * 1000);\n    }\n\n    // Converts a date into an array of its parts ([year, month, day, etc.]).\n    // Convenient as a date info bearer which is not affected by local time zone\n    static dateAsArray(date) {\n        return [date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()];\n    }\n}\n","import Widget from './Widget.js';\nimport DomClassList from '../helper/util/DomClassList.js';\n\n/**\n * @module Core/widget/Toast\n */\n\n/**\n * Basic toast. Toasts are stacked on top of each other\n * @example\n * // simplest possible\n * Toast.show('Just toasting');\n *\n * // with config\n * Toast.show({\n *   html: 'Well toasted',\n *   showProgress: false\n * });\n *\n * // as instance (instance is also returned from Toast.show()\n * let toast = new Toast({\n *   html: 'Not going away',\n *   timeout: 0\n * });\n *\n * toast.show();\n *\n * @classType toast\n * @extends Core/widget/Widget\n * @inlineexample Core/widget/Toast.js\n */\nexport default class Toast extends Widget {\n\n    static get $name() {\n        return 'Toast';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'toast';\n    }\n\n    static get configurable() {\n        return {\n            testConfig : {\n                destroyTimeout : 1,\n                timeout        : 100\n            },\n\n            floating : true,\n\n            /**\n             * Timeout (in ms) until the toast is automatically dismissed. Set to 0 to never hide.\n             * @config {Number}\n             * @default\n             */\n            timeout : 2500,\n\n            autoDestroy : null,\n\n            // How long to wait after hide before destruction\n            destroyTimeout : 200,\n\n            /**\n             * Show a progress bar indicating the time remaining until the toast is dismissed.\n             * @config {Boolean}\n             * @default\n             */\n            showProgress : true,\n\n            /**\n             * Toast color (should have match in toast.scss or your custom styling).\n             * Valid values in Bryntum themes are:\n             * * b-amber\n             * * b-blue\n             * * b-dark-gray\n             * * b-deep-orange\n             * * b-gray\n             * * b-green\n             * * b-indigo\n             * * b-lime\n             * * b-light-gray\n             * * b-light-green\n             * * b-orange\n             * * b-purple\n             * * b-red\n             * * b-teal\n             * * b-white\n             * * b-yellow\n             *\n             * ```\n             * new Toast({\n             *    color : 'b-blue'\n             * });\n             * ```\n             *\n             * @config {String}\n             */\n            color : null,\n\n            bottomMargin : 20\n        };\n    }\n\n    compose() {\n        const { appendTo, color, html, showProgress, style, timeout } = this;\n\n        return {\n            parent : appendTo || this.floatRoot,\n            class  : {\n                ...DomClassList.normalize(color, 'object'),\n                'b-toast-hide' : 1  // toasts start hidden so we can animate them into view\n            },\n\n            html,\n            style,\n\n            children : {\n                progressElement : showProgress && {\n                    style : `animation-duration:${timeout / 1000}s;`,\n                    class : {\n                        'b-toast-progress' : 1\n                    }\n                }\n            },\n\n            listeners : {\n                click : 'hide'\n            }\n        };\n    }\n\n    doDestroy() {\n        this.untoast();\n\n        super.doDestroy();\n    }\n\n    get nextBottom() {\n        const { bottomMargin, element } = this;\n\n        return parseInt(element.style.bottom, 10) + element.offsetHeight + bottomMargin;\n    }\n\n    /**\n     * Show the toast\n     */\n    async show() {\n        await super.show(...arguments);\n\n        const\n            me = this,\n            { element } = me,\n            { toasts } = Toast;\n\n        if (!toasts.includes(me)) {\n            element.style.bottom = (toasts[0]?.nextBottom ?? me.bottomMargin) + 'px';\n\n            toasts.unshift(me);\n            element.getBoundingClientRect();  // force layout so that removing b-toast-hide runs our transition\n\n            element.classList.remove('b-toast-hide');\n\n            if (me.timeout > 0) {\n                me.hideTimeout = me.setTimeout('hide', me.timeout);\n            }\n        }\n    }\n\n    /**\n     * Hide the toast\n     */\n    async hide() {\n        const me = this;\n\n        me.untoast();\n        me.element.classList.add('b-toast-hide');\n\n        if (me.autoDestroy && !me.destroyTimer) {\n            me.destroyTimer = me.setTimeout('destroy', me.destroyTimeout);\n        }\n    }\n\n    untoast() {\n        const { toasts } = Toast;\n\n        if (toasts.includes(this)) {\n            toasts.splice(toasts.indexOf(this), 1);\n        }\n    }\n\n    /**\n     * Hide all visible toasts\n     */\n    static hideAll() {\n        Toast.toasts.slice().reverse().forEach(toast => toast.hide());\n    }\n\n    /**\n     * Easiest way to show a toast\n     * @example\n     * Toast.show('Hi');\n     * @example\n     * Toast.show({\n     *   html   : 'Read quickly, please',\n     *   timeout: 1000\n     * });\n     * @param {String|ToastConfig} config Message or toast config object\n     * @returns {Core.widget.Toast}\n     */\n    static show(config) {\n        const toast = Toast.new({\n            autoDestroy : true,\n            rootElement : document.body\n        }, (typeof config === 'string') ? { html : config } : config);\n\n        toast.show();\n\n        return toast;\n    }\n}\n\nToast.toasts = [];\n\n// Register this widget type with its Factory\nToast.initClass();\n","import Base from '../../Base.js';\nimport DomHelper from '../DomHelper.js';\nimport EventHelper from '../EventHelper.js';\nimport Events from '../../mixin/Events.js';\nimport Factoryable from '../../mixin/Factoryable.js';\nimport StringHelper from '../StringHelper.js';\n\n/**\n * @module Core/helper/util/Navigator\n */\n\n/**\n * A helper class which allows keyboard navigation within the {@link #config-target} element.\n * @private\n */\nexport default class Navigator extends Base.mixin(Events, Factoryable) {\n    static get $name() {\n        return 'Navigator';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'navigator';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * The owning Widget which is using this Navigator.\n             * @config {Core.widget.Widget}\n             */\n            ownerCmp : null,\n\n            /**\n             * If the items in the owning widget are naturally tabbable, then the Navigator does not\n             * need to listen for navigation keys and move focus. It just reacts to natural focus\n             * movement.\n             * @config {Boolean}\n             */\n            itemsTabbable : null,\n\n            /**\n             * The encapsulating element in which navigation takes place.\n             * @config {HTMLElement}\n             */\n            target : null,\n\n            /**\n             * The element which provides key events for navigation. Optional. Defaults to the {@link #config-target} element.\n             * @config {HTMLElement}\n             */\n            keyEventTarget : null,\n\n            /**\n             * An optional key event processor which may preprocess the key event. Returning `null` prevents processing of the event.\n             * @config {Function}\n             */\n            processEvent : null,\n\n            /**\n             * A query selector which identifies descendant elements within the {@link #config-target} which are navigable.\n             * @config {String}\n             */\n            itemSelector : null,\n\n            /**\n             * The currently focused element within the {@link #config-target}.\n             * @config {HTMLElement}\n             */\n            activeItem : null,\n\n            /**\n             * A CSS class name to add to focused elements.\n             * @config {String}\n             * @default\n             */\n            focusCls : 'b-active',\n\n            /**\n             * An object containing key definitions keyed by the key name eg:\n             *\n             * ```javascript\n             *  keys : {\n             *      \"CTRL+Space\" : 'onCtrlSpace',\n             *      Enter        : 'onEnterKey'\n             *  }\n             * ```\n             *\n             * The {@link #config-ownerCmp} is used as the `this` reference and to resolve string method names.\n             *\n             * Modified key names must be created prepending one or more `'CTRL+'`, `'SHIFT+'`, `'ALT+'`\n             * in that order, for example `\"CTRL+SHIFT+Enter\" : 'showMenu'`\n             * @config {Object<String,String>}\n             * @default\n             */\n            keys : null,\n\n            /**\n             * Configure as `true` to also navigate when the `CTRL` modifier key is used along with\n             * navigation keys.\n             * @config {Boolean}\n             * @default false\n             */\n            allowCtrlKey : null,\n\n            /**\n             * Configure as `true` to also navigate when the `SHIFT` modifier key is used along with\n             * navigation keys.\n             * @config {Boolean}\n             * @default false\n             */\n            allowShiftKey : null,\n\n            scrollDuration : 50,\n\n            /**\n             * Configure as, or set to `true` to disable the processing of keys.\n             * @config {Boolean}\n             */\n            disabled : null,\n\n            datasetIdProperty : 'id',\n\n            testConfig : {\n                scrollDuration : 1\n            }\n        };\n    }\n\n    static get factoryable() {\n        return {\n            defaultType : 'navigator'\n        };\n    }\n\n    get activeItem() {\n        const { _activeItem } = this;\n\n        if (this.target.contains(_activeItem)) {\n            return _activeItem;\n        }\n        this._activeItem = null;\n    }\n\n    updateOwnerCmp(ownerCmp) {\n        if (!this.itemSelector) {\n            this.itemSelector = `.${this.ownerCmp.itemCls}`;\n        }\n\n        DomHelper.setAttributes(this.keyEventTarget, {\n            'aria-activedescendant' : `${this.owner.id}-active-descendant`\n        });\n    }\n\n    set navigationEvent(navigationEvent) {\n        const { owner } = this;\n\n        // Both us and our owning component need to know about the navigation event.\n        // Used by the owning component's navigation to detect what interaction event if any caused\n        // the focus to be moved. If it's a programmatic focus, there won't be one.\n        this._navigationEvent = owner.navigationEvent = navigationEvent;\n\n        // But it's transient. As soon as it has been processed, it goes.\n        if (navigationEvent) {\n            Promise.resolve(1).then(() => this.navigationEvent = null);\n        }\n    }\n\n    get navigationEvent() {\n        return this._navigationEvent;\n    }\n\n    static getComposedKeyName(keyEvent) {\n        const keyName = (keyEvent.key || '').trim() || keyEvent.code;\n\n        return `${keyEvent.ctrlKey ? 'CTRL+' : ''}${keyEvent.shiftKey ? 'SHIFT+' : ''}${keyEvent.altKey ? 'ALT+' : ''}${keyName}`;\n    }\n\n    onKeyDown(keyEvent) {\n        const\n            me              = this,\n            {\n                ownerCmp,\n                itemSelector,\n                activeItem,\n                itemsTabbable\n            } = me,\n            { target }      = keyEvent,\n            firstItem       = me.target.querySelector(itemSelector),\n            // Not all key events have 'key'\n            keyName         = (keyEvent.key || '').trim() || keyEvent.code,\n            composedKeyName = me.constructor.getComposedKeyName(keyEvent),\n            validTarget     = target.matches(itemSelector) || target === me.keyEventTarget;\n\n        // Feed the key event through our configured processor, process the event that returns if any.\n        // We need to do this even if no items because there may be other widgets inside the owner.\n        if (!me.disabled && me.processEvent) {\n            keyEvent = me.processEvent.call(ownerCmp, keyEvent);\n        }\n\n        // Process the key gesture if there are items and we are visible.\n        // Also, if key emanated from a valid target element (Not an owned positioned Widget).\n        if (keyEvent && !me.disabled && firstItem && me.target.offsetParent && validTarget) {\n\n            // Only set navigation key names if we are *not* using tabbing.\n            if (!itemsTabbable) {\n                // Detect whether the navigable items flow inline or downwards.\n                if (me.inlineFlow == null) {\n                    const\n                        itemContainer     = firstItem.parentNode,\n                        itemPositionStyle = DomHelper.getStyleValue(firstItem, 'position'),\n                        itemDisplayStyle  = DomHelper.getStyleValue(firstItem, 'display'),\n                        itemFloatStyle    = DomHelper.getStyleValue(firstItem, 'float');\n\n                    // This is how we know that RIGHT and LEFT arrow should be used for next and previous.\n                    // If inlineFlow is false, we use UP and DOWN. Consider tabs in a tab bar.\n                    me.inlineFlow = (\n                        itemPositionStyle === 'absolute' ||\n                        itemDisplayStyle === 'inline' || itemDisplayStyle === 'inline-block' ||\n                        itemFloatStyle === 'left' || itemFloatStyle === 'right' ||\n                        (DomHelper.getStyleValue(itemContainer, 'display') === 'flex' && DomHelper.getStyleValue(itemContainer, 'flex-direction') === 'row')\n                    );\n                }\n\n                if (!me.prevKey) {\n                    if (me.inlineFlow) {\n                        me.prevKey = 'ArrowLeft';\n                        me.nextKey = 'ArrowRight';\n                    }\n                    else {\n                        me.prevKey = 'ArrowUp';\n                        me.nextKey = 'ArrowDown';\n                    }\n                }\n            }\n\n            // So that we and our owning component know how we are being told to navigate\n            me.navigationEvent = keyEvent;\n\n            if (activeItem) {\n                switch (keyName) {\n                    case me.prevKey:\n                        if (me.disabled || keyEvent.ctrlKey && !me.allowCtrlKey) {\n                            return;\n                        }\n                        if (keyEvent.shiftKey && !me.allowShiftKey) {\n                            return;\n                        }\n                        keyEvent.preventDefault();\n                        /* Flagging the event as handled to let KeyMap know that it should ignore it. Need to do it here\n                         * because navigatePrevious is throttled in Scheduler.\n                         */\n                        keyEvent.handled = true;\n                        me.navigatePrevious(keyEvent);\n                        break;\n                    case me.nextKey:\n                        if (me.disabled || keyEvent.ctrlKey && !me.allowCtrlKey) {\n                            return;\n                        }\n                        if (keyEvent.shiftKey && !me.allowShiftKey) {\n                            return;\n                        }\n                        keyEvent.preventDefault();\n                        /* Flagging the event as handled to let KeyMap know that it should ignore it. Need to do it here\n                         * because navigatePrevious is throttled in Scheduler.\n                         */\n                        keyEvent.handled = true;\n                        me.navigateNext(keyEvent);\n                        break;\n                    default: {\n                        const keyHandler = me.keys?.[composedKeyName];\n\n                        if (keyHandler && !me.disabled) {\n                            if (me.callback(keyHandler, me.thisObj || ownerCmp, [keyEvent]) === false) {\n                                return;\n                            }\n                        }\n\n                        // Note that even if this.disabled, the ownerCmp will expect\n                        // to have its key down handler invoked.\n                        else if (ownerCmp.onInternalKeyDown) {\n                            ownerCmp.onInternalKeyDown(keyEvent);\n                        }\n\n                        // One of the handlers moved focus.\n                        // This KeyDown should not act upon the new target.\n                        // For example popped up a Popup and focused its \"close\" Tool.\n                        if (DomHelper.getActiveElement(target) !== target) {\n                            keyEvent.preventDefault();\n                        }\n\n                        // No navigation must take place when items are tabbable.\n                        if (itemsTabbable) {\n                            return;\n                        }\n                    }\n                }\n            }\n            else {\n                // We don't need to handle navigation into the list if the items are naturally tabbable\n                if (itemsTabbable) {\n                    return;\n                }\n                if (keyName === me.nextKey || keyName === me.prevKey) {\n                    me.activeItem = me.getDefaultNavigationItem(keyEvent);\n                }\n            }\n\n            if (me.activeItem !== activeItem) {\n                /**\n                 * Fired when a user gesture causes the active item to change _or become `null`_.\n                 * @event navigate\n                 * @param {Event} event The browser event which instigated navigation. May be a click or key or focus move event.\n                 * @param {HTMLElement} item The newly active item, or `null` if focus moved out.\n                 * @param {HTMLElement} oldItem The previously active item, or `null` if focus is moving in.\n                 */\n                me.triggerNavigate(keyEvent);\n            }\n        }\n    }\n\n    getDefaultNavigationItem(keyEvent) {\n        const { target, itemSelector, prevKey,  nextKey } = this;\n\n        // Navigating backwards from after the component, we default to last item\n        if (target.compareDocumentPosition(keyEvent.target) & 4 && keyEvent.key === prevKey) {\n            return target.querySelector(`${itemSelector}:last-of-type`);\n        }\n        // Navigating forwards from before the component we default to the first item\n        if (target.compareDocumentPosition(keyEvent.target) & 2 && keyEvent.key === nextKey) {\n            return target.querySelector(`${itemSelector}`);\n        }\n    }\n\n    navigatePrevious(keyEvent) {\n        const me = this,\n            previous = me.previous;\n\n        keyEvent.preventDefault();\n        if (previous) {\n            me.ownerCmp.scrollable.scrollIntoView(previous, { animate : me.scrollDuration }).then(() => {\n                me.activeItem = previous;\n                me.triggerNavigate(keyEvent);\n            });\n        }\n    }\n\n    navigateNext(keyEvent) {\n        const me = this,\n            next = me.next;\n\n        keyEvent.preventDefault();\n        if (next) {\n            me.ownerCmp.scrollable.scrollIntoView(next, { animate : me.scrollDuration }).then(() => {\n                me.activeItem = next;\n                me.triggerNavigate(keyEvent);\n            });\n        }\n    }\n\n    get owner() {\n        return this.ownerCmp;\n    }\n\n    get previous() {\n        return this.getAdjacent(-1);\n    }\n\n    get next() {\n        return this.getAdjacent(1);\n    }\n\n    /**\n     * Returns the next or previous navigable element starting from the passed `from` element,\n     * navigating in the passed direction.\n     * @param {HTMLElement} [from] The start point. Defaults to the current {@link #config-activeItem}\n     * @param {Number} [direction=1] The direction. -1 for backwards, else forwards.\n     */\n    getAdjacent(direction = 1, from = this.activeItem) {\n        const treeWalker = this.treeWalker;\n\n        treeWalker.currentNode = from;\n        treeWalker[direction < 0 ? 'previousNode' : 'nextNode']();\n        if (treeWalker.currentNode !== this.activeItem) {\n            return treeWalker.currentNode;\n        }\n    }\n\n    onTargetFocusIn(focusInEvent) {\n        const\n            me         = this,\n            {\n                target,\n                relatedTarget\n            } = focusInEvent,\n            {\n                owner,\n                itemsTabbable,\n                skipScrollIntoView,\n                previousActiveItem\n            }          = me;\n\n        // Ignore navigating to a focus trap. It will bounce back in\n        if (!target.matches('.b-focus-trap')) {\n            if (target.matches(me.itemSelector)) {\n                // We may need to know this in downstream code.\n                // for example set activeItem must not scrollIntoView on click\n                me.skipScrollIntoView = true;\n\n                me.activeItem = target;\n\n                me.skipScrollIntoView = skipScrollIntoView;\n\n                // If we are using natural, TAB based navigation, trigger the navigate event after it really happens.\n                if (me.activeItem && itemsTabbable) {\n                    me.triggerNavigate(focusInEvent);\n                }\n            }\n            // Focus onto target\n            else if (target === me.target) {\n                const fromWhere = relatedTarget ? target.compareDocumentPosition(relatedTarget) : 0;\n\n                // Upward focusing from within means a SHIFT+TAB, so go to previous sibling\n                if (fromWhere & Node.DOCUMENT_POSITION_CONTAINED_BY) {\n                    owner.previousSibling?.focus();\n                }\n                // From outside means go to last active item or first item\n                else {\n                    me.activeItem = previousActiveItem && me.target.contains(previousActiveItem) ? previousActiveItem : 0;\n                }\n            }\n        }\n    }\n\n    onTargetFocusOut(focusOutEvent) {\n        const\n            me                = this,\n            { relatedTarget } = focusOutEvent;\n\n        // Ignore navigating to a focus trap. It will bounce back in\n        if (!relatedTarget?.matches('.b-focus-trap')) {\n            if (!relatedTarget || !me.target.contains(relatedTarget) || !relatedTarget.matches(me.itemSelector)) {\n                if (me.activeItem) {\n                    me.activeItem = null;\n\n                    // If we are using natural, TAB based navigation, trigger the navigate event after it really happens.\n                    if (me.itemsTabbable) {\n                        me.triggerNavigate(focusOutEvent);\n                    }\n                }\n            }\n        }\n    }\n\n    onTargetMouseDown(mouseDownEvent) {\n        const\n            me     = this,\n            target = mouseDownEvent.target.closest(me.itemSelector);\n\n        me.navigationEvent = mouseDownEvent;\n\n        if (me.itemsTabbable) {\n            // We will already be focused, but selection is driven off navigation\n            // so announce that we have \"renavigated\" to the curremt active item.\n            if (target === me.activeItem) {\n                me.triggerNavigate(mouseDownEvent);\n            }\n        }\n        // Mousedown is the focus gesture.\n        // This holds true even on touch platforms\n        // where the mousedown event is synthesized -\n        // preventing default prevents focus on the upcoming touchend.\n        else if (me.ownerCmp.itemsFocusable === false) {\n            me.onFocusGesture(mouseDownEvent);\n        }\n        // Preempt browser's focusing behaviour which focuses the closest focusable\n        // element, and scrolls it into view.\n        else if (target) {\n            mouseDownEvent.preventDefault();\n            // We attempt to focus the target without scrolling.\n            DomHelper.focusWithoutScrolling(target);\n        }\n    }\n\n    onTargetClick(clickEvent) {\n        const\n            me                     = this,\n            { skipScrollIntoView } = me;\n\n        if (me.skipNextClick || me.navigationEvent?.ignoreNavigation) {\n            me.skipNextClick = false;\n            return;\n        }\n\n        if (me.disabled) {\n            return;\n        }\n\n        // We may need to know this in downstream code.\n        // for example set activeItem must not scrollIntoView on click\n        me.skipScrollIntoView = true;\n\n        // ownerCmp's preprocessing of any navigate event.\n        if (me.processEvent) {\n            clickEvent = me.processEvent.call(me.ownerCmp, clickEvent);\n        }\n\n        if (clickEvent) {\n            me.activeItem = clickEvent.target.closest(me.itemSelector);\n            me.triggerNavigate(clickEvent);\n        }\n        me.skipScrollIntoView = skipScrollIntoView;\n    }\n\n    // We have to prevent focus moving from eg, an input field when we mousedown\n    // or touchtap a non focusable item when ownerCmp has itemsFocusable: false.\n    // If the event was not on an item, we must allow it through to allow Lists\n    // to contain other widgets.\n    onFocusGesture(event) {\n        if (event.target === this.ownerCmp.contentElement || (event.target.closest(this.itemSelector) && this.ownerCmp.itemsFocusable === false)) {\n            event.preventDefault();\n        }\n    }\n\n    acceptNode(node) {\n        return node.offsetParent && node.matches && node.matches(this.itemSelector) ? DomHelper.NodeFilter.FILTER_ACCEPT : DomHelper.NodeFilter.FILTER_SKIP;\n    }\n\n    changeActiveItem(activeItem) {\n        if (activeItem != null) {\n            // List and Menu's getItem API allows number, or node or record or record id to be passed\n            if (this.ownerCmp.getItem) {\n                activeItem = this.ownerCmp.getItem(activeItem);\n            }\n        }\n        return activeItem;\n    }\n\n    updateActiveItem(activeItem, oldActiveItem) {\n        const\n            me           = this,\n            { ownerCmp } = me,\n            isActive     = oldActiveItem && me.target.contains(oldActiveItem),\n            // If we are being called in response to focus movement, it will already be the document.activeElement\n            // so in that case, behave is if we were in non-focusing mode, and just add the focused class.\n            needsFocus   = activeItem && DomHelper.isFocusable(activeItem) && activeItem !== DomHelper.getActiveElement(activeItem);\n\n        if (isActive) {\n            me.previousActiveItem = oldActiveItem;\n        }\n\n        if (oldActiveItem) {\n            oldActiveItem.classList.remove(me.focusCls);\n            oldActiveItem.removeAttribute('id');\n        }\n\n        // This may be set to null on focusout of the target element.\n        // Cannot use truthiness test because index zero may be passed.\n        if (activeItem != null) {\n            // If the user was able to click the event, they will not expect it to attempt to scroll.\n            if (me.skipScrollIntoView) {\n                if (needsFocus) {\n                    DomHelper.focusWithoutScrolling(activeItem);\n                }\n            }\n            else {\n                ownerCmp.scrollable?.scrollIntoView(activeItem, {\n                    block  : 'nearest',\n                    focus  : needsFocus,\n                    silent : me.scrollSilently\n                });\n            }\n\n            // No change in active item, do nothing after we've ensured it's fully in view.\n            if (activeItem === oldActiveItem && isActive) {\n                return;\n            }\n\n            activeItem.classList.add(me.focusCls);\n            activeItem.id = `${me.owner.id}-active-descendant`;\n            me._activeItem = activeItem;\n        }\n        else {\n            me._activeItem = null;\n\n            // We are clearing the activeItem.\n            // If it's focused, keep focus close by actively reverting it.\n            if (oldActiveItem === DomHelper.getActiveElement(oldActiveItem)) {\n                ownerCmp.revertFocus();\n            }\n        }\n    }\n\n    updateTarget(target, oldTarget) {\n        const\n            me        = this,\n            listeners = {\n                element  : target,\n                thisObj  : me,\n                focusin  : 'onTargetFocusIn',\n                focusout : 'onTargetFocusOut',\n\n                // If items are tabbable the mousedown handler will not force the issue by focusing\n                // the closest item. We just need to trigger the method so that it is hookable\n                mousedown : {\n                    handler  : 'onTargetMouseDown',\n                    delegate : me.itemSelector\n                }\n            };\n\n        if (!me.itemsTabbable && !me.itemsFocusable) {\n            // We only need to listen for clicks if the items cannot receive focus.\n            // If focusable in any way, selection is triggered by navigation.\n            listeners.click = 'onTargetClick';\n        }\n\n        if (!Object.prototype.hasOwnProperty.call(me, 'acceptNode')) {\n            me.acceptNode = me.acceptNode.bind(me);\n            // https://github.com/webcomponents/webcomponentsjs/issues/556\n            // Work around Internet Explorer wanting a function instead of an object.\n            // IE also *requires* this argument where other browsers don't.\n            me.acceptNode.acceptNode = me.acceptNode;\n        }\n\n        EventHelper.on(listeners);\n\n        // This Navigator object acts as the filter for the TreeWalker. We must implement acceptNode(node)\n        me.treeWalker = me.setupTreeWalker(target, DomHelper.NodeFilter.SHOW_ELEMENT, me.acceptNode);\n\n        // If we were not configured with an outside key event provider (think the input field providing UP/DOWN keys for the dropdown)\n        // then use the target element as the source.\n        if (!me.keyEventTarget) {\n            me.keyEventTarget = target;\n        }\n\n        //<debug>\n        if (!me.itemSelector) {\n            throw new Error('Element Navigator must be configured with an itemSelector');\n        }\n        if (!me.ownerCmp) {\n            throw new Error('Element Navigator must be configured with an ownerCmp');\n        }\n        //</debug>\n\n        // If the activeItem gets removed, we must know, and deactivate.\n        (me.targetMutationMonitor = new MutationObserver(me.onTargetChildListChange.bind(me))).observe(target, {\n            childList : true,\n            subtree   : true\n        });\n    }\n\n    setupTreeWalker(root, whatToShow, filter) {\n        // This Navigator object acts as the filter for the TreeWalker. We must implement acceptNode(node)\n        return document.createTreeWalker(root, whatToShow, filter);\n    }\n\n    onTargetChildListChange() {\n        const\n            me  = this,\n            {\n                activeItem,\n                datasetIdProperty\n            } = me;\n\n        // On DOM mutation, if the activeItem got changed, pull the one with the same ID out again.\n        if (activeItem) {\n            if (me.target.contains(activeItem)) {\n                // This seeminly redundant hack is important.\n                // Adding an already present class causes DOM mutation and style recalc.\n                if (!activeItem.classList.contains(me.focusCls)) {\n                    activeItem.classList.add(me.focusCls);\n                }\n            }\n            else {\n                // Try to focus the same record id, or if not present, the same item index.\n                // Passing undefined results in the config setter assuming no-change\n                // So we must use null to clear.\n                me.activeItem =\n                    me.target.querySelector(`${me.itemSelector}.${me.focusCls}[data-${StringHelper.hyphenate(datasetIdProperty)}=\"${activeItem.dataset[datasetIdProperty]}\"]`) ||\n                    me.target.querySelector(`${me.itemSelector}.${me.focusCls}`)?.[activeItem.dataset.index] || null;\n            }\n        }\n    }\n\n    changeKeyEventTarget(keyEventTarget) {\n        this._keyEventTarget = keyEventTarget;\n\n        EventHelper.on({\n            element : keyEventTarget,\n            keydown : 'onKeyDown',\n            thisObj : this\n        });\n    }\n\n    triggerNavigate(event, item = this.activeItem) {\n        const navEvent = {\n            event,\n            item,\n            oldItem : this.previousActiveItem\n        };\n\n        this.trigger('navigate', navEvent);\n        this.ownerCmp?.trigger('navigate', navEvent);\n    }\n}\n","import Mask from '../widget/Mask.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\n\n/**\n * @module Core/mixin/LoadMaskable\n */\n\n/**\n * Simple mixin for load masking configs and helper methods.\n * @mixin\n */\nexport default Target => class LoadMaskable extends Target {\n    static get $name() {\n        return 'LoadMaskable';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * A {@link Core.widget.Mask} config object to adjust the {@link Core.widget.Widget#config-maskDefaults}\n             * when data is loading. The message and optional configuration from the\n             * {@link Core.mixin.LoadMaskable#config-loadMask} config take priority over these options, just as they do\n             * for `maskDefaults`, respectively.\n             *\n             * The final mask configuration for a load mask is as if the following were applied:\n             *\n             * ```\n             *  Object.assign({},\n             *      widget.maskDefaults,\n             *      widget.loadMaskDefaults,\n             *      widget.loadMask);\n             * ```\n             * @config {MaskConfig|Core.widget.Mask}\n             * @category Masking\n             */\n            loadMaskDefaults : {\n                useTransition : true,\n                showDelay     : 1000\n            },\n\n            /**\n             * A {@link Core.widget.Mask} config object to adjust the {@link Core.widget.Widget#config-maskDefaults}\n             * when an error occurs loading data.\n             *\n             * Set to `false` to disable showing data loading error mask.\n             *\n             * The final mask configuration for an error mask is as if the following were applied:\n             *\n             * ```\n             *  Object.assign({},\n             *      widget.maskDefaults,\n             *      widget.loadMaskDefaults,\n             *      widget.loadMaskError,\n             *      errorMessage);\n             * ```\n             * @config {MaskConfig|Core.widget.Mask|Boolean}\n             * @category Masking\n             */\n            loadMaskError : {\n                icon      : 'b-icon b-icon-warning',\n                autoClose : 3000,\n                showDelay : 0\n            },\n\n            /**\n             * A {@link Core.widget.Mask} config object, or a message to be shown when a store is performing a remote\n             * operation, or Crud Manager is loading data from the sever. Set to `null` to disable default load mask.\n             *\n             * @config {String|MaskConfig|null}\n             * @default \"Loading...\"\n             * @category Masking\n             */\n            loadMask : {\n                text : 'L{GridBase.loadMask}'\n            },\n\n            /**\n             * A {@link Core.widget.Mask} config object, or a message to be shown when Crud Manager\n             * is persisting changes on the server. Set to `null` to disable default sync mask.\n             *\n             * This config is similar to {@link Core.mixin.LoadMaskable#config-loadMask} but designed for saving data.\n             *\n             * To create a custom sync mask need to subscribe to the Crud Manager events and show\n             * {@link Core.widget.Mask Mask} on `beforeSend` and hide it on `requestDone` and `requestFail`.\n             *\n             * To create a custom sync mask, set this config to `null` and subscribe to the CrudManager's events to\n             * show or hide the {@link Core.widget.Widget#config-masked mask} as desired.\n             *\n             * ```javascript\n             *  widget.crudManager.on({\n             *      loadStart() {\n             *          widget.masked = {\n             *              text : 'Data is loading...'\n             *          };\n             *      },\n             *      load() {\n             *          widget.masked = null;\n             *      },\n             *      loadCanceled() {\n             *          widget.masked = null;\n             *      },\n             *      syncStart() {\n             *          widget.masked = null;\n             *      },\n             *      sync() {\n             *          widget.masked = null;\n             *      },\n             *      syncCanceled() {\n             *          widget.masked = null;\n             *      },\n             *      requestFail({ response }) {\n             *          widget.masked.error = response.message || 'Sync failed';\n             *      }\n             *  });\n             *\n             *  store.load();\n             * ```\n             *\n             * @config {String|MaskConfig|null}\n             * @default \"Saving changes, please wait...\"\n             * @category Masking\n             */\n            syncMask : {\n                text : 'L{GridBase.syncMask}'\n            },\n\n            localizableProperties : ['loadMask.text', 'syncMask.text'],\n\n            testConfig : {\n                loadMaskError : {\n                    icon      : 'b-icon b-icon-warning',\n                    autoClose : 500,\n                    showDelay : 0\n                }\n            }\n        };\n    }\n\n    /**\n     * Applies the {@link Core.mixin.LoadMaskable#config-loadMask} as the {@link Core.widget.Widget#config-masked mask}\n     * for this widget.\n     * @returns {Core.widget.Mask}\n     * @internal\n     */\n    applyLoadMask() {\n        const\n            me = this,\n            { loadMask } = me;\n\n        if (loadMask) {\n            me.masked = Mask.mergeConfigs(me.loadMaskDefaults, loadMask);\n        }\n\n        return me.masked;\n    }\n\n    /**\n     * Updates the current {@link Core.widget.Widget#config-masked mask} for this widget to present the specified\n     * `error`.\n     * @param {String} error The error message to display in the mask.\n     * @returns {Core.widget.Mask}\n     * @internal\n     */\n    applyMaskError(error) {\n        const { loadMaskError, masked } = this;\n\n        if (loadMaskError === false) {\n            masked.hide();\n        }\n        else if (masked) {\n            ObjectHelper.assign(masked.errorDefaults, loadMaskError);\n            masked.error = error;\n        }\n\n        return masked;\n    }\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n","import DH from '../../Core/helper/DateHelper.js';\n\n/**\n * @module Core/util/DayTime\n */\n\nconst\n    MILLIS_PER_MINUTE = 60 * 1000,\n    MILLIS_PER_HOUR   = 60 * MILLIS_PER_MINUTE,\n    MILLIS_PER_DAY    = 24 * MILLIS_PER_HOUR,\n    timeRe            = /(\\d+)?:?(\\d*)/;\n\n/**\n * This class encapsulates time of day calculations.\n *\n * The goal is to describe a \"day\" (a 24-hour period) that starts at a specific time (other than midnight). In a\n * calendar day view, this would look like this:\n * ```\n *              startShift=0                          startShift='12:00'\n *       00:00  +-------+                      12:00  +-------+\n *              |       |                             |       |\n *       01:00  |- - - -|                      13:00  |- - - -|\n *                 ...                                   ...\n *              |       |                             |       |\n *       08:00  |- - - -|   <-- timeStart -->  20:00  |- - - -|\n *              |       |                             |       |\n *       09:00  |- - - -|                      21:00  |- - - -|\n *              |       |                             |       |\n *       10:00  |- - - -|                      22:00  |- - - -|\n *              |       |                             |       |\n *       11:00  |- - - -|                      23:00  |- - - -|\n *              |       |                             |       |\n *       12:00  |- - - -|                      00:00  |- - - -|\n *              |       |                             |       |\n *       13:00  |- - - -|                      01:00  |- - - -|\n *              |       |                             |       |\n *       14:00  |- - - -|                      02:00  |- - - -|\n *              |       |                             |       |\n *       15:00  |- - - -|                      03:00  |- - - -|\n *              |       |                             |       |\n *       16:00  |- - - -|                      04:00  |- - - -|\n *              |       |                             |       |\n *       17:00  |- - - -|    <-- timeEnd -->   05:00  |- - - -|\n *              |       |                             |       |\n *                 ...                                   ...\n *              |       |                             |       |\n *       23:00  |- - - -|                      11:00  |- - - -|\n *              |       |                             |       |\n *       00:00  +-------+                      12:00  +-------+\n * ```\n * In a horizontal format with X for times to render:\n * ```\n *  startShift = 0\n *\n *      +---+---+---  --+---+---+---+--   --+---+---+---+--   --+---+\n *      |   |   |  ...  |   |XXX|XXX|  ...  |XXX|XXX|   |  ...  |   |\n *      +---+---+---  --+---+---+---+--   --+---+---+---+--   --+---+\n *      00  01  02      07  08  09  10      15  16  17  18      23  00\n *                          ^                       ^\n *                      timeStart               timeEnd\n *\n *  startShift = '12:00'\n *\n *      +---+---+---  --+---+---+---+--   --+---+---+---+--   --+---+\n *      |   |   |  ...  |   |XXX|XXX|X ... X|XXX|XXX|   |  ...  |   |\n *      +---+---+---  --+---+---+---+--   --+---+---+---+--   --+---+\n *      12  13  14      19  20  21  22      03  04  05  06      11  12\n *                          ^                       ^\n *                      timeStart               timeEnd\n * ```\n * When the day wraps over midnight, it is describing this (note timeEnd < timeStart):\n * ```\n *      +---+---+---  --+---+---+---+--   --+---+---+---+--   --+---+\n *      |XXX|XXX|X ... X|XXX|   |   |  ...  |   |   |XXX|X ... X|XXX|\n *      +---+---+---  --+---+---+---+--   --+---+---+---+--   --+---+\n *      00  01  02      04  05  06  07      18  19  20  21      23  00\n *                          ^                       ^\n *                      timeEnd                 timeStart\n * ```\n * @internal\n */\nexport default class DayTime {\n    /**\n     * Returns a string of \"HH:MM\" for a given time of day in milliseconds.\n     * @param {Number} timeOfDay The time of day in milliseconds.\n     * @returns {String}\n     * @private\n     */\n    static format(timeOfDay) {\n        const\n            h = Math.floor(timeOfDay / MILLIS_PER_HOUR),\n            m = Math.floor(timeOfDay / MILLIS_PER_MINUTE) % 60;\n\n        return `${h}:${m < 10 ? '0' : ''}${m}`;\n    }\n\n    /**\n     * Parses a time of day which may be a number (0-24 for the hour of the day) or a string in \"H:MM\" format and\n     * returns the time of day as a number of milliseconds.\n     *\n     * If `time` is a `Date` instance, its time of day is returned.\n     * @param {Date|Number|String} time\n     * @returns {Number}\n     * @private\n     */\n    static parse(time) {\n        const type = typeof time;\n\n        if (type === 'string') {\n            const match = timeRe.exec(time);\n\n            time = Number(match[1] || 0) * MILLIS_PER_HOUR + Number(match[2] || 0) * MILLIS_PER_MINUTE;\n        }\n        else if (type !== 'number') {\n            time = DH.getTimeOfDay(time);\n        }\n        else if (time <= 24) {  // if number of hours (as provided during config)\n            time *= MILLIS_PER_HOUR;\n        }\n\n        return Math.min(Math.max(Math.floor(time), 0), MILLIS_PER_DAY);\n    }\n\n    constructor(config) {\n        let startShift = 0,\n            startTime, endTime;\n\n        if (config?.isDayView) {\n            // These are raw configs in hrs or 'HH:MM' on construction and millis after:\n            startShift = config.dayStartShift;\n            startTime = config.dayStartTime;\n            endTime = config.dayEndTime;\n        }\n        else if (typeof config === 'number') {\n            startShift = startTime = endTime = config;\n        }\n        else if (config) {\n            /**\n             * Either the hour number or a *24 hour* `HH:MM` string denoting the start time for the day. This is\n             * midnight by default.\n             * @config {Number|String} startShift\n             * @default 0\n             */\n            startShift = config.startShift;\n\n            /**\n             * Either the hour number or a *24 hour* `HH:MM` string denoting the first visible time of day. You can also\n             * set this value to a ms timestamp representing time from midnight.\n             * @config {Number|String} timeStart\n             * @default 0\n             */\n            startTime = config.timeStart;\n\n            /**\n             * Either the hour number or a *24 hour* `HH:MM` string denoting the last visible time of day. You can also\n             * set this value to a ms timestamp representing time from midnight.\n             * @config {Number|String} timeEnd\n             * @default 24\n             */\n            endTime = config.timeEnd;\n        }\n\n        this.startShift = startShift = DayTime.parse(startShift || 0);\n        this.timeEnd    = ((endTime == null)\n            ? (startShift + MILLIS_PER_DAY) % MILLIS_PER_DAY\n            : DayTime.parse(endTime)) || MILLIS_PER_DAY;\n        this.timeStart  = (startTime == null) ? startShift : DayTime.parse(startTime);\n    }\n\n    get startHour() {\n        return Math.floor(this.timeStart / MILLIS_PER_HOUR);\n    }\n\n    get endHour() {\n        return Math.floor(this.timeEnd / MILLIS_PER_HOUR);\n    }\n\n    /**\n     * The number of milliseconds from the day's `startShift` to its `timeStart`.\n     * @member {Number}\n     */\n    get startTimeOffsetMs() {\n        const { startShift, timeStart } = this;\n\n        return (timeStart < startShift) ? MILLIS_PER_DAY - startShift + timeStart : (timeStart - startShift);\n    }\n\n    /**\n     * The `Date` object for the most recently started, shifted day. The time of this `Date` will be the `startShift`.\n     * It is possible for this date to be yesterday on a midnight-based calendar. For example, if the `startShift` is\n     * 6PM and the current time is 6AM on May 20, this value will be 6PM of May 19 (the most recently started day).\n     * @member {Date}\n     */\n    get today() {\n        return this.startOfDay(new Date());\n    }\n\n    /**\n     * Returns `Date` object for the nearest (shifted) day ending after the given `date`. The time of this `Date` will\n     * be the `startShift`.\n     *\n     * It is possible for this date to be in the next day on a midnight-based calendar. For example, if the `startShift`\n     * is 6PM and `date` is 7PM on May 20, this method will return 6PM of May 21 (the nearest day ending).\n     * @param {Date} date The date for which to find the nearest day ending.\n     * @returns {Date}\n     */\n    ceil(date) {\n        const ret = this.startOfDay(date);\n\n        if (ret < date) {\n            ret.setDate(ret.getDate() + 1);\n        }\n\n        return ret;\n    }\n\n    /**\n     * Returns `true` if the time of day for the given `date` is between `timeStart` and `timeEnd`.\n     * @param {Date|Number|String} date The hour number, 'HH:MM' time or a `Date` instance to test.\n     * @returns {Boolean}\n     */\n    contains(date) {\n        return !this.outside(date);\n    }\n\n    /**\n     * Returns a \"YYYY-MM-DD\" string for the given `date`. This value will match the `date` if the time of day is at or\n     * after `startShift`, but will be the prior date otherwise.\n     * @param {Date|Number} date The date from which to compute the 'YYYY-MM-DD' key.\n     * @returns {String}\n     */\n    dateKey(date) {\n        date = this.shiftDate(date, -1);\n\n        return DH.makeKey(date);\n    }\n\n    /**\n     * Returns a `Date` instance with `startShift` as the time of day and the Y/M/D of the given `date`.\n     * @param {Date} date The date's year, month, and day values.\n     * @returns {Date}\n     */\n    dayOfDate(date) {\n        return this.shiftDate(DH.clearTime(date));  // return the Date w/the matching YYYY-MM-DD value\n    }\n\n    /**\n     * Returns the day of week (0-8) for the given `date`. This value will match the `date` if the time of day is at or\n     * after `startShift`, but will be the prior day otherwise.\n     * @param {Date|Number} date The date from which to compute the day of week.\n     * @returns {Number}\n     */\n    dayOfWeek(date) {\n        date = this.shiftDate(date, -1);\n\n        return date.getDay();\n    }\n\n    /**\n     * Returns the difference between the time of day of the given `date` and `timeStart` in the specified time `unit`.\n     * @param {Date|Number|String} date The hour number, 'HH:MM' time or a `Date` instance.\n     * @param {String} unit The desired unit of time to return (see {@link Core.helper.DateHelper#function-as-static}).\n     * @returns {Number}\n     */\n    delta(date, unit = 'ms') {\n        const\n            { timeStart } = this,\n            time = DayTime.parse(date),\n            t = ((this.startShift && time < timeStart) ? time + MILLIS_PER_DAY : time) - timeStart;\n\n        return (unit === 'ms') ? t : DH.as(unit, t, 'ms');\n    }\n\n    /**\n     * Returns the duration of the visible day (between `timeStart` and `timeEnd`) in the specified time `unit`.\n     * @param {String} unit The desired unit of time to return (see {@link Core.helper.DateHelper#function-as-static}).\n     * @returns {Number}\n     */\n    duration(unit = 'ms') {\n        const\n            { timeStart, timeEnd } = this,\n            millis = (timeStart < timeEnd) ? timeEnd - timeStart : (MILLIS_PER_DAY - timeStart + timeEnd);\n\n        return (unit === 'ms') ? millis : DH.as(unit, millis, 'ms');\n    }\n\n    /**\n     * Returns `true` if this instance describes the same day as the `other`.\n     * @param {Core.util.DayTime} other The other instance to which `this` instance should be tested for equality.\n     * @returns {Boolean}\n     */\n    equals(other) {\n        // we only need on \"?.\" operator since we short-circuit\n        return this.startShift === other?.startShift && this.timeStart === other.timeStart && this.timeEnd === other.timeEnd;\n    }\n\n    /**\n     * Returns `true` if the times of day described by `startDate` and `endDate` intersect the visible time of this day.\n     * @param {Date} startDate The start date of the date range or an event record containing both startDate and endDate\n     * fields.\n     * @param {Date} [endDate] The end date if `startDate` is not an event record.\n     * @returns {Boolean}\n     */\n    intersects(startDate, endDate) {\n        const\n            me                     = this,\n            { timeStart, timeEnd } = me,\n            [date0, date1]         = me._dateRangeArgs(startDate, endDate),\n            [start, end]           = me.timeRange(date0, date1);\n\n        if (timeStart < timeEnd) {\n            if (start < end) {\n                return start < timeEnd && timeStart <= end;\n            }\n\n            return start < timeEnd || timeStart <= end;\n        }\n\n        return !(start < end) || start < timeEnd || timeStart <= end;\n    }\n\n    /**\n     * Returns `true` if the given date range is contained within one day.\n     * @param {Date} startDate The start date of the date range or an event record containing both startDate and endDate\n     * fields.\n     * @param {Date} [endDate] The end date if `startDate` is not an event record.\n     * @returns {Boolean}\n     */\n    isIntraDay(startDate, endDate) {\n        const\n            me             = this,\n            [date0, date1] = me._dateRangeArgs(startDate, endDate),\n            dayStart       = me.startOfDay(date0),\n            diff           = MILLIS_PER_DAY - DH.diff(dayStart, date1, 'ms');\n\n        // Not <= to match isInterDay\n        if (diff < 0) {\n            return false;\n        }\n\n        // diff > 0 means less than 24hrs, so intraDay... diff==0 means date1 was EOD so we are intraDay if date0 is not\n        // also at EOD.\n        return diff > 0 || dayStart < date0;\n    }\n\n    /**\n     * Returns `true` if the given date range or event crosses the day boundary.\n     * @param {Date} startDate The start date of the date range or an event record containing both startDate and endDate\n     * fields.\n     * @param {Date} [endDate] The end date if `startDate` is not an event record.\n     * @returns {Boolean}\n     */\n    isInterDay(timeSpan) {\n        return timeSpan.allDay || !this.isIntraDay(...arguments);\n    }\n\n    /**\n     * Returns -1, 0, or 1 based on whether the time of day for the given `date` is before `timeStart` (-1), or after\n     * `timeEnd` (1), or between these times (0).\n     * @param {Date|Number|String} date The hour number, 'HH:MM' time or a `Date` instance to test.\n     * @returns {Number}\n     */\n    outside(date) {\n        const\n            { startShift, timeStart, timeEnd } = this,\n            time = DayTime.parse(date);\n\n        if (timeStart < timeEnd) {\n            /*\n             *      +---+---+---  --+---+---+---+--   --+---+---+---+--   --+---+\n             *      |   |   |  ...  |   |XXX|XXX|  ...  |XXX|XXX|   |  ...  |   |\n             *      +---+---+---  --+---+---+---+--   --+---+---+---+--   --+---+\n             *      00  01  02      07  08  09  10      15  16  17  18      23  00\n             *                          ^                       ^\n             *                      timeStart               timeEnd\n             */\n            if (time < timeStart) {\n                return (time < startShift) ? 1 : -1;\n            }\n\n            if (time < timeEnd) {\n                return 0;\n            }\n\n            return (time < startShift) ? -1 : 1;\n        }\n\n        /*\n         *      +---+---+---  --+---+---+---+--   --+---+---+---+--   --+---+\n         *      |XXX|XXX|X ... X|XXX|   |   |  ...  |   |   |XXX|X ... X|XXX|\n         *      +---+---+---  --+---+---+---+--   --+---+---+---+--   --+---+\n         *      00  01  02      04  05  06  07      18  19  20  21      23  00\n         *                          ^                       ^\n         *                      timeEnd                 timeStart\n         */\n        if (time < timeEnd || time >= timeStart) {\n            return 0;\n        }\n\n        return (time < startShift) ? 1 : -1;\n    }\n\n    parseKey(key) {\n        return this.dayOfDate(DH.parseKey(key));\n    }\n\n    /**\n     * Returns the given `date` shifted forward (`direction` > 0) or backward (`direction` < 0) by the `startShift`.\n     * @param {Number|Date} date The date as a `Date` or the millisecond UTC epoch.\n     * @param {Number} direction A value > 0 to shift `date` forward, or < 0 to shift it backwards.\n     * @returns {Date}\n     */\n    shiftDate(date, direction = 1) {\n        const\n            { startShift } = this,\n            type = typeof date;\n\n        date = (type === 'number') ? new Date(date) : (type === 'string' ? DH.parse(date) : new Date(date.getTime()));\n\n        // Not this:\n        // return (direction && startShift) ? DH.add(date, (direction > 0) ? startShift : -startShift, 'ms') : date;\n        // the DH.add() goes via UTC timestamp and so will not end on the correct time of day when DST is hit\n\n        if (direction && startShift) {\n            date.setMilliseconds((direction > 0) ? startShift : -startShift);\n        }\n\n        return date;\n    }\n\n    /**\n     * Sorts the given set of `events` by the maximum of `startDate` and `startOfDay` for the given `date`, followed\n     * by `duration` in case of a tie.\n     * @param {Date} date The day for which events are to be sorted.\n     * @param {Object[]} events The events to sort, typically an `Scheduler.model.EventModel[]` but any objects with\n     * both `startDate` and `endDate` fields are acceptable.\n     * @returns {Object[]} The passed `events` array.\n     * @internal\n     */\n    sortEvents(date, events) {\n        const startOfDay = this.startOfDay(date);\n\n        return events?.sort((event1, event2) => {\n            event1 = event1.eventRecord || event1;\n            event2 = event2.eventRecord || event2;\n\n            let { startDate: start1 } = event1,\n                { startDate: start2 } = event2;\n\n            // Unscheduled events sort to the top.\n            if (!start1) {\n                return -1;\n            }\n            if (!start2) {\n                return 1;\n            }\n\n            // Limit startDates to the start of the day. In other words, all events that start before \"midnight\" are\n            // equally considered as starting at midnight:\n            start1 = (start1 < startOfDay) ? startOfDay : start1;\n            start2 = (start2 < startOfDay) ? startOfDay : start2;\n\n            // Sort by start timestamp first, then duration with respect to clipped start dates.\n            return start1 - start2 || (event2.endDate - start2) - (event1.endDate - start1);\n        });\n    }\n\n    /**\n     * Returns `Date` object for the nearest started (shifted) day prior to the given `date`. The time of this `Date`\n     * will be the `startShift`.\n     *\n     * It is possible for this date to be in the prior day on a midnight-based calendar. For example, if the `startShift`\n     * is 6PM and `date` is 6AM on May 20, this method will return 6PM of May 19 (the nearest started day).\n     * @param {Date} date The date for which to find the nearest started day.\n     * @returns {Date}\n     */\n    startOfDay(date) {\n        date = this.shiftDate(date, -1);\n        date = DH.clearTime(date);\n        date = this.shiftDate(date);\n\n        return date;\n    }\n\n    /**\n     * TODO\n     * @param {Date} startDate The start date of the date range or an event record containing both startDate and endDate\n     * fields.\n     * @param {Date} [endDate] The end date if `startDate` is not an event record.\n     * @returns {Number[]}\n     */\n    timeRange(startDate, endDate) {\n        const [start, end] = this._dateRangeArgs(startDate, endDate);\n\n        return [DH.getTimeOfDay(start), DH.getTimeOfDay(end)];\n    }\n\n    toString() {\n        const\n            { startShift, timeEnd, timeStart } = this,\n            suffix = startShift ? `@${DayTime.format(startShift)}` : '',\n            prefix = DayTime.format(timeStart);\n\n        if (timeStart === timeEnd) {\n            return startShift ? suffix : prefix;\n        }\n\n        return `${prefix}-${DayTime.format(timeEnd)}${suffix}`;\n    };\n\n    /**\n     * Decodes the arguments and returns a pair of `Date` objects for the start and end of the date range.\n     * @param {Date} startDate The start date of the date range or an event record containing both startDate and endDate\n     * fields.\n     * @param {Date} [endDate] The end date if `startDate` is not an event record.\n     * @returns {Date[]}\n     * @private\n     */\n    _dateRangeArgs(startDate, endDate) {\n        return startDate.isModel ? [startDate.startDate, startDate.endingDate] : [startDate, endDate];\n    }\n\n}\n\n/**\n * The `DayTime` instance representing a canonical calendar day (starting at midnight).\n * @member {Core.util.DayTime} MIDNIGHT\n * @static\n * @readonly\n */\nDayTime.MIDNIGHT = new DayTime({\n    startShift : 0,\n    timeStart  : 0,\n    timeEnd    : 24\n});\n\nDayTime.MILLIS_PER_MINUTE = MILLIS_PER_MINUTE;\nDayTime.MILLIS_PER_HOUR = MILLIS_PER_HOUR;\nDayTime.MILLIS_PER_DAY = MILLIS_PER_DAY;\n","import Base from '../Base.js';\nimport Delayable from '../mixin/Delayable.js';\nimport EventHelper from '../helper/EventHelper.js';\nimport DomHelper from '../helper/DomHelper.js';\nimport ArrayHelper from '../helper/ArrayHelper.js';\n\n/**\n * @module Core/util/ScrollManager\n */\n\n/**\n * Monitors the mouse position over an element and scrolls the element if the cursor is close to edges. This is used by\n * various features to scroll the grid section element, for example dragging elements close to edges.\n *\n * ```javascript\n * // Instantiate manager for the container element having overflowing content\n * const manager = new ScrollManager({ element : document.querySelector('.container') });\n *\n * // Start monitoring. When pointer approaches 50px region within monitored element edge, scrolling begins\n * manager.startMonitoring();\n *\n * // Stop monitoring.\n * manager.stopMonitoring();\n * ```\n */\nexport default class ScrollManager extends Delayable(Base) {\n    //region Default config\n\n    static get configurable() {\n        return {\n            /**\n             * Default element to use for scrolling. Can be overridden in calls to `startMonitoring()`.\n             * @config {HTMLElement}\n             */\n            element : null,\n\n            /**\n             * Width in pixels of the area at the edges of an element where scrolling should be triggered\n             * @config {Number}\n             * @default\n             */\n            zoneWidth : 50,\n\n            /**\n             * Scroll speed, higher number is slower. Calculated as \"distance from zone edge / scrollSpeed\"\n             * @config {Number}\n             * @default\n             */\n            scrollSpeed : 5,\n\n            /**\n             * The direction(s) to scroll ('horizontal', 'vertical' or 'both')\n             * @config {'horizontal'|'vertical'|'both'}\n             */\n            direction : 'both',\n\n            /**\n             * Number of milliseconds to wait before scroll starts when the mouse is moved close to an edge monitored by this scroll manager\n             * @config {Number}\n             * @default\n             */\n            startScrollDelay : 500,\n\n            /**\n             * Set to true to stop scrolling when pointing device leaves the scrollable element.\n             * @config {Boolean}\n             * @default\n             */\n            // https://github.com/bryntum/support/issues/394\n            stopScrollWhenPointerOut : false,\n\n            testConfig : {\n                scrollSpeed      : 2,\n                startScrollDelay : 100\n            },\n\n            activeScroll : {\n                $config : ['lazy'],\n                value   : {}\n            },\n\n            monitoring : {\n                $config : ['lazy', 'nullify'],\n                value   : true\n            },\n\n            owner : null\n        };\n    }\n\n    changeMonitoring(value, was) {\n        was?.clear();\n\n        return new Map();\n    }\n\n    //endregion\n\n    doDestroy() {\n        this.stopMonitoring();\n        super.doDestroy();\n    }\n\n    /**\n     * Returns true if some of the monitored elements is being scrolled at the moment.\n     * @property {Boolean}\n     * @readonly\n     */\n    get isScrolling() {\n        return Object.keys(this.activeScroll).length !== 0;\n    }\n\n    get rtl() {\n        return this.owner?.rtl;\n    }\n\n    //region Start/stop monitoring\n\n    /**\n     * Starts monitoring an element. It will be scrolled if mouse is pressed and within `zoneWidth` pixels from element\n     * edge. Supports monitoring multiple elements using `scrollables` option:\n     *\n     * ```javascript\n     * new ScrollManager({ element : '.item' }).startMonitoring({\n     *     scrollables : [\n     *         {\n     *             // Applies config to all elements matching `.item .child-item`\n     *             // selector\n     *             element : '.child-item',\n     *             // Only manage vertical scroll\n     *             direction : 'vertical',\n     *             // Specific callback for this scrollable. Shared callback is\n     *             // ignored.\n     *             callback : () => console.log('Specific callback')\n     *         },\n     *         {\n     *             // Instance can be used\n     *             element : document.querySelector('.item .child2')\n     *             // Direction and callback are not provided, so element will\n     *             // be scrollable in horizontal direction and will use shared\n     *             // callback\n     *         }\n     *     ],\n     *     direction : 'horizontal',\n     *     callback  : () => console.log('Shared callback')\n     * })\n     * ```\n     *\n     * @param {Object} config Element which might be scrolled or config { element, callback, thisObj }\n     * @param {'horizontal'|'vertical'|'both'} [config.direction] Direction to scroll. Overrides default scroll direction\n     * @param {Function} [config.callback] Callback to execute on every scroll of the target element.\n     *\n     * ```javascript\n     * startMonitoring({\n     *     callback(monitor) {\n     *         // Current left and top scroll of the monitored element\n     *         console.log(monitor.scrollLeft)\n     *         console.log(monitor.scrollTop)\n     *         // Scroll position relative to the initial position\n     *         console.log(monitor.relativeScrollLeft)\n     *         console.log(monitor.relativeScrollTop)\n     *     }\n     * })\n     * ```\n     *\n     * @param {Object} [config.thisObj] Scope for the callback.\n     * @param {Object[]} [config.scrollables] Array of configs if multiple elements should be monitored.\n     * @param {HTMLElement|String} [config.scrollables.0.element] Element or selector.\n     * @param {'horizontal'|'vertical'|'both'} [config.scrollables.0.direction] Direction to scroll. Overrides upper config object direction.\n     * @param {Function} [config.scrollables.0.callback] Callback to execute on every scroll of the target element.\n     * Overrides upper config object callback.\n     * @returns {Function} Returns function to cleanup instantiated monitors\n     * ```javascript\n     * const detacher = new ScrollManager({ element }).startMonitoring({ ... });\n     * detacher(); // All monitors setup by the previous call are removed\n     * ```\n     */\n    startMonitoring(config = {}) {\n        const\n            me = this,\n            {\n                element,\n                direction : defaultDirection\n            }  = me,\n            {\n                scrollables = [],\n                direction   = defaultDirection,\n                callback\n            }  = config,\n            attachedElements = [];\n\n        if (!scrollables.length) {\n            scrollables.push({ element });\n        }\n\n        scrollables.forEach(scrollable => {\n            const target = scrollable.element;\n\n            if (typeof target === 'string') {\n                DomHelper.forEachSelector(element, target, element => {\n                    me.createMonitor(element, scrollable.direction || direction, scrollable.callback || callback);\n                    attachedElements.push(element);\n                });\n            }\n            else {\n                me.createMonitor(target, scrollable.direction || direction, scrollable.callback || callback);\n                attachedElements.push(target);\n            }\n        });\n\n        return function detacher() {\n            // May have been destroyed when DragContext cleaner is called.\n            me.stopMonitoring?.(attachedElements);\n        };\n    }\n\n    createMonitor(element, direction, callback) {\n        const { monitoring } = this;\n\n        if (!monitoring.has(element)) {\n            monitoring.set(element, new ScrollManagerMonitor({\n                scrollManager : this,\n                element,\n                direction,\n                callback\n            }));\n        }\n    }\n\n    /**\n     * Stops monitoring an element. If no particular element is given, stop monitoring everything.\n     * @param {HTMLElement|HTMLElement[]} [element] Element or array of elements for which monitoring is not desired any\n     * more and should stop as soon as possible.\n     */\n    stopMonitoring(element) {\n        const\n            me             = this,\n            { monitoring } = me;\n\n        element = ArrayHelper.asArray(element);\n\n        if (monitoring) {\n            // Stop all if no element given\n            if (!element) {\n                monitoring.forEach(monitor => me.stopMonitoring(monitor.element));\n                return;\n            }\n\n            element.forEach(element => {\n                const monitor = monitoring.get(element);\n\n                // Ensure the scrolling CSS class is removed immediately\n                element.classList.remove('b-scrolling');\n\n                // cant stop nothing...\n                if (monitor) {\n                    monitor.destroy();\n                    monitoring.delete(element);\n                }\n            });\n        }\n    }\n\n    //endregion\n\n    /*\n     * Attempts to reserve given scrolling direction for the given monitor.\n     * @param {String} direction 'horizontal' or 'vertical'\n     * @param {Object} monitor\n     * @returns {Boolean} Returns true in case scroll direction was reserved for given monitor. False otherwise.\n     * @private\n     */\n    requestScroll(direction, monitor) {\n        const { activeScroll } = this;\n\n        if (direction in activeScroll && activeScroll[direction] !== monitor) {\n            return false;\n        }\n        else {\n            activeScroll[direction] = monitor;\n            return true;\n        }\n    }\n\n    /*\n     * Releases all scroll directions, blocked by given monitor\n     * @param {Object} monitor\n     * @private\n     */\n    releaseScroll(monitor) {\n        const { activeScroll = {} } = this;\n\n        Object.keys(activeScroll).forEach(key => {\n            if (activeScroll[key] === monitor) {\n                delete activeScroll[key];\n            }\n        });\n    }\n\n    //#region Scroll position\n\n    getRelativeScroll(element, direction = 'left') {\n        let result = 0;\n\n        this.monitoring.forEach((monitor, monitoredElement) => {\n            if (DomHelper.isDescendant(monitoredElement, element)) {\n                result += direction === 'left' ? monitor.scrollRelativeLeft : monitor.scrollRelativeTop;\n            }\n        });\n\n        return result;\n    }\n\n    //#endregion\n}\n\nclass ScrollManagerMonitor extends Base {\n    construct(config) {\n        const\n            me              = this,\n            { element }     = config,\n            startScrollLeft = element.scrollLeft,\n            startScrollTop  = element.scrollTop;\n\n        Object.assign(config, { startScrollLeft, startScrollTop });\n\n        super.construct(config);\n\n        // listen to mousemove to determine if scroll needed or not\n        EventHelper.on({\n            element,\n            scroll    : 'onElementScroll',\n            mousemove : 'onMouseMove',\n            touchmove : 'onMouseMove',\n            // Capture pointermove events early to start scrolling from top elements\n            capture   : true,\n            thisObj   : me\n        });\n\n        // `pointerleave` should have `capture: false`, otherwise it works much like `pointerout`\n        EventHelper.on({\n            element,\n            pointerleave : 'onPointerLeave',\n            thisObj      : me\n        });\n    }\n\n    doDestroy() {\n        this.stopScroll();\n        super.doDestroy();\n    }\n\n    /**\n     * Starts scrolling (see #performScroll). Called from onMouseMove.\n     * @private\n     */\n    startScroll() {\n        this.scrolling = true;\n        this.performScroll();\n    }\n\n    /**\n     * Stops scrolling. Called from onMouseMove.\n     * @private\n     */\n    stopScroll() {\n        const me = this;\n\n        me.scrolling = false;\n        if (me.scrollRequested) {\n            me.scrollManager.cancelAnimationFrame(me.frameId);\n            me.scrollRequested = false;\n        }\n        me.scrollManager.clearTimeout(me.scrollTimeout);\n        me.scrollManager.releaseScroll(me);\n        me.scrollTimeout = null;\n    }\n\n    onPointerLeave() {\n        this.scrollManager.stopScrollWhenPointerOut && this.stopScroll();\n    }\n\n    /**\n     * Listener for mouse move on monitored element. Determines if scrolling is needed, and if so how fast to scroll.\n     * See #zoneWidth & #scrollSpeed configs.\n     * @private\n     * @param {MouseEvent} event\n     */\n    onMouseMove(event) {\n        const\n            me    = this,\n            {\n                scrollManager\n            }     = me,\n            box   = me.element.getBoundingClientRect(),\n            width = scrollManager.zoneWidth,\n            speed = scrollManager.scrollSpeed;\n\n        // scroll left, right, up or down?\n        me.scrollDeltaX = me.scrollDeltaY = 0;\n\n        if (me.direction !== 'vertical') {\n            const { scrollLeft, scrollWidth, clientWidth } = me.element;\n\n            if (scrollManager.rtl) {\n                if (event.clientX < box.left + width && scrollWidth + scrollLeft - clientWidth >= 1) {\n                    me.scrollDeltaX = -Math.round((width + (box.left - event.clientX)) / speed) - 1;\n                }\n                else if (event.clientX > box.right - width && scrollLeft < 0) {\n                    me.scrollDeltaX = Math.round((width - (box.right - event.clientX)) / speed) + 1;\n                }\n            }\n            else {\n                // Only start scrolling if it is possible\n                if (event.clientX > box.right - width && scrollWidth - scrollLeft - clientWidth >= 1) {\n                    me.scrollDeltaX = Math.round((width - (box.right - event.clientX)) / speed) + 1;\n                }\n                else if (event.clientX < box.left + width && scrollLeft > 0) {\n                    me.scrollDeltaX = -Math.round((width + (box.left - event.clientX)) / speed) - 1;\n                }\n            }\n        }\n\n        if (me.direction !== 'horizontal') {\n            const { scrollTop, scrollHeight, clientHeight } = me.element;\n\n            // Only start scrolling if it is possible\n            if (event.clientY > box.bottom - width && scrollHeight - scrollTop - clientHeight >= 1) {\n                me.scrollDeltaY = Math.round((width - (box.bottom - event.clientY)) / speed) + 1;\n            }\n            else if (event.clientY < box.top + width && scrollTop > 0) {\n                me.scrollDeltaY = -Math.round((width + (box.top - event.clientY)) / speed) - 1;\n            }\n        }\n\n        if (me.scrollDeltaX !== 0 && !scrollManager.requestScroll('horizontal', me)) {\n            me.scrollDeltaX = 0;\n        }\n\n        if (me.scrollDeltaY !== 0 && !scrollManager.requestScroll('vertical', me)) {\n            me.scrollDeltaY = 0;\n        }\n\n        if (me.scrollDeltaX === 0 && me.scrollDeltaY === 0) {\n            me.stopScroll();\n        }\n        else if (!me.scrollTimeout) {\n            me.scrollTimeout = scrollManager.setTimeout(() => me.startScroll(), scrollManager.startScrollDelay);\n        }\n    }\n\n    /**\n     * Scrolls by an amount determined by config.scrollDeltaX/Y on each frame. Start/stop by calling #startScroll and\n     * #stopScroll.\n     * @private\n     */\n    performScroll() {\n        const\n            me          = this,\n            { element } = me;\n        // this function is called repeatedly on each frame for as long as scrolling is needed\n\n        // check that scrolling is needed\n        if (me.scrolling && !me.scrollRequested) {\n            // Scroll the determined amount of pixels if possible\n            if (me.scrollDeltaX !== 0) {\n                const\n                    oldScrollLeft = element.scrollLeft,\n                    newScrollLeft = Math.min(oldScrollLeft + me.scrollDeltaX, element.scrollWidth - element.clientWidth);\n\n                if (newScrollLeft !== oldScrollLeft) {\n                    element.scrollLeft = newScrollLeft;\n                }\n            }\n\n            if (me.scrollDeltaY !== 0) {\n                const\n                    oldScrollTop = element.scrollTop,\n                    newScrollTop = Math.min(oldScrollTop + me.scrollDeltaY, element.scrollHeight - element.clientHeight);\n\n                if (newScrollTop !== oldScrollTop) {\n                    element.scrollTop = newScrollTop;\n                }\n            }\n\n            // scroll some more on next frame\n            me.scrollRequested = true;\n\n            me.frameId = me.scrollManager.requestAnimationFrame(() => {\n                me.scrollRequested = false;\n                me.performScroll(me);\n            });\n        }\n    }\n\n    onElementScroll() {\n        this.config?.callback?.call(this.thisObj || this.scrollManager, this);\n    }\n\n    get scrollLeft() {\n        return this.element.scrollLeft;\n    }\n\n    get scrollTop() {\n        return this.verticalElement ? this.verticalElement.scrollTop : this.element.scrollTop;\n    }\n\n    get scrollRelativeLeft() {\n        return this.scrollLeft - this.startScrollLeft;\n    }\n\n    get scrollRelativeTop() {\n        return this.scrollTop - this.startScrollTop;\n    }\n\n    // There could be several scrollables controlling different axes. If we want to calculate combined scroll from all\n    // those monitors (e.g. for the case when we drag scheduler event in both directions), we should ask scroll manager\n    // to iterate over monitored elements and aggregate scroll.\n    getRelativeLeftScroll(element) {\n        return this.scrollManager.getRelativeScroll(element, 'left');\n    }\n\n    getRelativeTopScroll(element) {\n        return this.scrollManager.getRelativeScroll(element, 'top');\n    }\n}\n","import Widget from './Widget.js';\nimport Popup from './Popup.js';\nimport Point from '../helper/util/Point.js';\nimport EventHelper from '../helper/EventHelper.js';\nimport Objects from '../helper/util/Objects.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\nimport StringHelper from '../helper/StringHelper.js';\nimport DomHelper from '../helper/DomHelper.js';\n\nconst\n    realignTransitions = {\n        left      : true,\n        right     : true,\n        top       : true,\n        bottom    : true,\n        transform : true\n    },\n    isBoolean          = {\n        true  : 1,\n        false : 1\n    },\n    immediatePromise   = Promise.resolve();\n\n/**\n * @module Core/widget/Tooltip\n */\n\n/**\n * Tooltip. Easiest way of assigning a tooltip to a widget is by setting {@link Core.widget.Widget#config-tooltip}, see example below.\n *\n * ```javascript\n * new Button {\n *     text    : 'Hover me',\n *     tooltip : 'Click me and you wont believe what happens next'\n * });\n * ```\n *\n * By default, tooltips of widgets use a singleton Tooltip instance which may be accessed from the\n * `{@link Core.widget.Widget}` class under the name `Widget.tooltip`.\n * This is configured according to the config object on pointer over.\n *\n * To request a separate instance be created just for this widget, add `newInstance : true`\n * to the configuration:\n *\n * ```javascript\n * new Button {\n *     text    : 'Hover me',\n *     tooltip : {\n *         html        : 'Click me and you wont believe what happens next',\n *         newInstance : true\n *     }\n * });\n * ```\n *\n * You can ask for the singleton instance to display configured tips for your own DOM structure using\n * `data-btip` element attributes:\n *\n * ```html\n * <button class=\"my-button\" data-btip=\"Contextual help for my button\" data-btip-scroll-action=\"realign\">Hover me</button>\n * ```\n *\n * ## Showing async content\n * To load remote content into a simple tooltip, just load your data in the `beforeShow` listener (but ensure that the {@link #property-activeTarget} is the same when the data arrives)\n *\n * ```javascript\n * new Tooltip({\n *     listeners : {\n *         beforeShow : ({ source : tip }) => tip.html = AjaxHelper.get('someurl').then(response => response.text());\n *     }\n * });\n * ```\n *\n * If you have multiple targets that should show a tooltip when hovered over, look at {@link #config-forSelector} and {@link #config-getHtml}.\n *\n * ```javascript\n * new Tooltip({\n *     forSelector : '.myCssClass',\n *     getHtml     : ({ source : tip }) => AjaxHelper.fetch('data').then(response => response.text())\n * });\n * ```\n *\n * @extends Core/widget/Popup\n * @classType tooltip\n * @inlineexample Core/widget/Tooltip.js\n */\nexport default class Tooltip extends Popup {\n    //region Default config\n    static get $name() {\n        return 'Tooltip';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'tooltip';\n    }\n\n    /**\n     * Triggered before tooltip widget is shown. Return `false` to prevent the action.\n     * @preventable\n     * @event beforeShow\n     * @param {Core.widget.Tooltip} source The Tooltip\n     * @param {Event} source.triggeredByEvent The event that triggered this Tooltip to show.\n     */\n\n    static get configurable() {\n        return {\n            /**\n             * Horizontal offset from mouse when {@link #config-anchorToTarget} is `false`.\n             *\n             * Direction independent, the value is internally flipped (by multiplying it with -1) for RTL.\n             *\n             * @config {Number}\n             * @default\n             */\n            mouseOffsetX : 15,\n\n            /**\n             * Vertical offset from mouse when {@link #config-anchorToTarget} is `false`\n             * @config {Number}\n             * @default\n             */\n            mouseOffsetY : 15,\n\n            html : {\n                // Ensure the html setter can never veto the operation as a no-change.\n                // Because of beforeShow listeners augmenting the content.\n                $config : {\n                    equals : () => false\n                }\n            },\n\n            /**\n             * A method, or the *name* of a method called to update the tooltip's content when the\n             * cursor is moved over a target. It receives one argument containing context about the\n             * tooltip and show operation. The function should return a string, or a Promise yielding\n             * a string.\n             *\n             * ```javascript\n             * new Grid({\n             *     title    : 'Client list',\n             *     appendTo : myElement,\n             *     store    : myStore,\n             *     columns  : myColumns,\n             *     tbar     : {\n             *         items : {\n             *             text : 'Reload,\n             *             tooltip : {\n             *                 // Will look in ownership hierarchy for the method\n             *                 // which will be found on the grid.\n             *                 getHtml : 'up.getReloadButtonTip'\n             *             }\n             *         }\n             *     },\n             *     getReloadButtonTip() {\n             *         return `Reload ${this.title}`;\n             *     }\n             * });\n             * ```\n             * @param {Object} context\n             * @param {Core.widget.Tooltip} context.tip The tooltip instance\n             * @param {HTMLElement} context.element The Element for which the Tooltip is monitoring mouse movement\n             * @param {HTMLElement} context.activeTarget The target element that triggered the show\n             * @param {Event} context.event The raw DOM event\n             * @returns {String|Promise}\n             * @config {Function|String}\n             */\n            getHtml : null,\n\n            /**\n             * DOM element to attach tooltip to. By default, the mouse entering this element will kick off a timer\n             * (see {@link #config-hoverDelay}) to show itself.\n             *\n             * If the {@link #config-forSelector} is specified, then mouse entering matching elements within the `forElement`\n             * will trigger the show timer to start.\n             *\n             * Note that when moving from matching element to matching element within the `forElement`, the tooltip\n             * will remain visible for {@link #config-hideDelay} milliseconds after exiting one element, so that rapidly\n             * entering another matching element will not cause hide+show flicker. To prevent this behaviour configure\n             * with `hideDelay: 0`.\n             * @config {HTMLElement}\n             */\n            forElement : null,\n\n            /**\n             * By default, once a tooltip is shown aligned as requested, it stays put.\n             *\n             * Setting this to `true` causes the tooltip to be aligned by the mouse,\n             * offset by `[{@link #config-mouseOffsetX}, {@link #config-mouseOffsetY}]` and\n             * keeps the tooltip aligned to the mouse maintaining the configured offsets\n             * as the mouse moves within its activating element.\n             * @config {Boolean}\n             * @default false\n             */\n            trackMouse : null,\n\n            /**\n             * By default, a tooltip displays static content. In the Scheduler however, there are\n             * plenty of uses cases when the tip content is based on the current mouse position (dragging events, resizing events, schedule hover tip, drag creation of events etc). Set\n             * to `true` to update contents on mouse movement.\n             * @config {Boolean}\n             * @private\n             */\n            updateContentOnMouseMove : false,\n\n            /**\n             * A CSS selector which targets child elements of the {@link #config-forElement} that should produce a\n             * tooltip when hovered over.\n             * @config {String}\n             */\n            forSelector : null,\n\n            /**\n             * By default, when moving rapidly from target to target, if, when mouseovering\n             * a new target, the tip is still visible, the tooltip does not hide, it remains\n             * visible, but updates its content however it is configured to do so.\n             *\n             * Configure `hideOnDelegateChange : true` to have the tip hide, and then trigger\n             * a new show delay upon entry of a new target while still visible.\n             * @config {Boolean}\n             * @default false\n             */\n            hideOnDelegateChange : null,\n\n            /**\n             * Set to true to anchor tooltip to the triggering target. If set to `false`, the tooltip\n             * will align to the mouse position. When set to `false`, it will also set `anchor: false`\n             * to hide anchor arrow.\n             * @config {Boolean}\n             * @default true\n             */\n            anchorToTarget : true,\n\n            /**\n             * Show on hover\n             * @config {Boolean}\n             * @default\n             */\n            showOnHover : false,\n\n            /**\n             * The amount of time to hover before showing\n             * @config {Number}\n             * @default\n             */\n            hoverDelay : 500,\n\n            /**\n             * Show immediately when created\n             * @config {Boolean}\n             * @default\n             */\n            autoShow : false,\n\n            /**\n             * The time (in milliseconds) that the Tooltip should stay visible for when it shows over its\n             * target. If the tooltip is anchored to its target, then moving the mouse during this time\n             * resets the timer so that the tooltip will remain visible.\n             *\n             * Defaults to `0` which means the Tooltip will persist until the mouse leaves the target.\n             * @config {Number}\n             * @default\n             */\n            dismissDelay : 0,\n\n            /**\n             * The time (in milliseconds) for which the Tooltip remains visible when the mouse leaves the target.\n             *\n             * May be configured as `false` to persist visible after the mouse exits the target element. Configure it\n             * as 0 to always retrigger `hoverDelay` even when moving mouse inside `fromElement`\n             * @config {Number}\n             * @default\n             */\n            hideDelay : 500,\n\n            /**\n             * The message to show while an async tooltip is fetching its content.\n             * @config {String}\n             * @default\n             */\n            loadingMsg : 'Loading...',\n\n            /**\n             * Keep the tooltip open if user moves the mouse it.\n             *\n             * If this is *not* explicitly configured as `false`, then this is automatically set\n             * when there are any visible, interactive child items added such as {@link #config-tools}, or\n             * {@link #config-items} which are interactive such as buttons or input fields.\n             * @config {Boolean}\n             * @default false\n             */\n            allowOver : null,\n\n            anchor : true,\n            align  : {\n                align : 'b-t',\n\n                // This signals to the align code that this widget is prepared to shrink\n                // in height in order to comply with alignTo specifications.\n                // Without a minHeight, it is assumed that the height of the widget\n                // is inviolable.\n                minHeight : 300\n            },\n            axisLock : true,\n\n            /**\n             * The HTML element that triggered this Tooltip to show\n             * @readonly\n             * @member {HTMLElement} activeTarget\n             */\n            activeTarget : null,\n\n            testConfig : {\n                hideDelay     : 100,\n                hoverDelay    : 100,\n                showAnimation : null,\n                hideAnimation : null\n            }\n        };\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Triggered when a mouseover event is detected on a potential target element.\n     * Return false to prevent the action\n     * @event pointerOver\n     * @param {Core.widget.Tooltip} sourceThe tooltip instance.\n     * @param {Event} event The mouseover event.\n     */\n\n    //endregion\n\n    //region Properties\n\n    //endregion\n\n    //region Init & destroy\n\n    afterConfigure() {\n        const\n            me              = this,\n            { forSelector } = me;\n\n        if (forSelector) {\n            me.showOnHover = true;\n            if (!me.forElement) {\n                if (!me.anchorToTarget) {\n                    me.trackMouse = true;\n                }\n                me.forElement = me.rootElement.host || me.rootElement;\n            }\n        }\n\n        super.afterConfigure();\n\n        // There's a triggering element, and we're showing on hover, add the mouse listeners\n        if (me.forElement && me.showOnHover) {\n            me.pointerOverOutDetacher = EventHelper.on({\n                element     : me.forElement,\n                // Using pointerover/pointerout since mouseover events are not fired in Chrome when the native `disabled`\n                // attribute is present https://github.com/bryntum/support/issues/3179\n                pointerover : 'internalOnPointerOver',\n                pointerout  : 'internalOnPointerOut',\n                thisObj     : me\n            });\n        }\n    }\n\n    doDestroy() {\n        this.pointerOverOutDetacher?.();\n\n        super.doDestroy();\n    }\n\n    set focusOnToFront(focusOnToFront) {\n        super.focusOnToFront = focusOnToFront;\n    }\n\n    get focusOnToFront() {\n        // Transient things like tooltips should not focus when invoked by pointer events\n        return super.focusOnToFront && DomHelper.usingKeyboard;\n    }\n\n    get focusElement() {\n        const result = super.focusElement;\n\n        if (result !== this.element) {\n            return result;\n        }\n    }\n\n    get anchorToTarget() {\n        // We do not anchor to the target if we are tracking the mouse\n        return this._anchorToTarget && !this.trackMouse;\n    }\n\n    get anchor() {\n        // We do not anchor to the target if we are tracking the mouse\n        return super.anchor && !this.trackMouse;\n    }\n\n    set anchor(anchor) {\n        super.anchor = anchor;\n    }\n    //endregion\n\n    //region Hovering, show and hide\n\n    onDocumentMouseDown({ event }) {\n        const\n            me = this,\n            { triggeredByEvent } = me;\n\n        // If it's a tap that is caused by the touch that was converted into a mouseover we should not hide.\n        // That is if it's a touch and at the same place and within 500ms\n        if (triggeredByEvent && DomHelper.isTouchEvent) {\n            if (event.pageX === triggeredByEvent.pageX && event.pageY === triggeredByEvent.pageY && me.activeTarget.contains(event.target) && (performance.now() - triggeredByEvent.timeStamp < 500)) {\n                return;\n            }\n        }\n\n        me.abortDelayedShow();\n\n        super.onDocumentMouseDown({ event });\n    }\n\n    internalOnPointerOver(event) {\n        const\n            me                                        = this,\n            { target, relatedTarget }                 = event,\n            { forElement, forSelector, activeTarget } = me;\n\n        let newTarget;\n\n        // Respect our owner's wish to not show when it's disabled\n        if (me.disabled || (me.owner && !me.owner.showTooltipWhenDisabled && me.owner.disabled)) {\n            return;\n        }\n\n        // If the mouse moves over this tooltip, it is theoretically a mouseout of its\n        // forElement, but allowOver lets us tolerate this ane remain visible.\n        if (me.allowOver && me.element.contains(target)) {\n            return;\n        }\n\n        // There's been a mouseover. If we have a forSelector, we have to check\n        // if it's an enter of a matching child\n        if (forSelector) {\n            newTarget = target.closest(forSelector);\n\n            // Bail out if moving inside a forSelector matching element, unless nested element matching the selector\n            if (activeTarget?.contains(target) && activeTarget.contains(relatedTarget) && newTarget === activeTarget) {\n                return;\n            }\n\n            // Mouseovers while within a target do nothing\n            if (newTarget && relatedTarget?.closest(forSelector) === newTarget) {\n                return;\n            }\n        }\n        // There's no forSelector, so check if we moved from outside the target\n        else if (!forElement.contains(relatedTarget)) {\n            newTarget = forElement;\n        }\n        // Mouseover caused by moving from child to child inside the target\n        else {\n            return;\n        }\n\n        // If pointer entered the target or a forSelector child, then show.\n        if (newTarget) {\n            me.handleForElementOver(event, newTarget);\n        }\n        // If over a non-forSelector child, behave as in forElement out\n        else if (activeTarget) {\n            me.handleForElementOut();\n        }\n    }\n\n    // Handle a transitioned reposition when the activeTarget moved beneath the pointer.\n    // When it comes to an end, if the mouseout has not hidden, then realign at the new position\n    // if the activeTarget is still beneath the pointer.\n    onTransitionEnd(event) {\n        const\n            me                     = this,\n            { currentOverElement } = Tooltip;\n\n        if (realignTransitions[event.propertyName]) {\n            // Don't realign if the mouse is over this, and is allowed to be over this\n            // If user is interacting with this Tooltip, they won't expect it to move.\n            if (me.allowOver && me.element.contains(currentOverElement)) {\n                return;\n            }\n\n            // If we are still visible, and mouse is still over the activeTarget, realign\n            if (me.activeTarget?.contains(currentOverElement) && !me.trackMouse) {\n                me.realign();\n            }\n        }\n    }\n\n    async handleForElementOver(event, newTarget) {\n        const\n            me          = this,\n            {\n                activeTarget,\n                hideOnDelegateChange,\n                anchorToTarget\n            }           = me,\n            isNewTarget = newTarget !== activeTarget,\n            needsHide   = isNewTarget && hideOnDelegateChange;\n\n        // Vetoed, then behave as if a targetout\n        if (me.trigger('pointerOver', { event, target : newTarget }) === false) {\n            me.internalOnPointerOut(event);\n        }\n        else {\n            me.triggeredByEvent = event;\n\n            // Not actually hidden yet - mouse moved back over a target before the timer hid us.\n            if (me.hasTimeout('hide')) {\n                me.abortDelayedHide();\n\n                // It's back into the same target so basically nothing has happened.\n                if (!isNewTarget) {\n                    return;\n                }\n            }\n\n            // Abort any in-flight animated hide.\n            // This is needed when entering a new delegate immeditely from a previous delegate\n            // or when allowOver is false (which is the default), and mouseovering\n            // hides, but that immediately causes the mouse to be over another delegate.\n            // We need to abort the animation.\n            // This brings us back into full visibility.\n            if (!hideOnDelegateChange && me.element.classList.contains('b-hiding')) {\n                me.cancelHideShowAnimation();\n            }\n\n            // If we have changed targets and we have to hide on delegate change.\n            if (!me._hidden && needsHide) {\n                me.hide(false);\n            }\n\n            me.activeTarget = newTarget;\n\n            // We are visible. This could be if we made an immediate delegate change and the\n            // hide timer has not yet fired and we don't have hide on delegate change, or\n            // the target has not in fact changed.\n            // In this case, we need to ensure the content is corrected before beforeShow\n            // is triggered which is how user code augments content\n            if (me.isVisible) {\n                const result = me.updateContent();\n\n                // Edge case, we have no loadingMsg meaning we're not visible until content has arrived\n                if (Objects.isPromise(result) && !me.loadingMsg) {\n                    await result;\n                }\n\n                // Allow user code to augment in a beforeShow listener even if we have not actually hidden.\n                if (me.trigger('beforeShow') === false) {\n                    return me.hide();\n                }\n                me.alignTo({\n                    [anchorToTarget ? 'target' : 'position'] : anchorToTarget ? newTarget : 'mouse',\n                    overlap                                  : !(anchorToTarget && me.anchor)\n                });\n\n                me.trigger('show');\n                me.afterShowByTarget();\n            }\n            // We are not visible. Either we have never been shown, or the hide timeout\n            // fired, and hid us, or we aborted a hideAnimation and cleaned up to the final state,\n            // or we had to hide on delegate change.\n            else {\n                me.delayShow(newTarget);\n            }\n        }\n    }\n\n    async delayShow(target) {\n        const me = this;\n\n        // Caught in a show animation - cancel it,\n        // If we're fading away, that's fine.\n        if (me.currentAnimation?.showing) {\n            me.cancelHideShowAnimation();\n        }\n\n        if (!me.isVisible && !me.hasTimeout('show')) {\n            // Allow hoverDelay:0 or rapid movement from delegate to delegate to show immediately\n            if (!me.hoverDelay || (me.forSelector && Date.now() - me.lastHidden < me.quickShowInterval)) {\n                const result = me.updateContent();\n\n                // Edge case, we have no loadingMsg meaning we're not visible until content has arrived\n                if (Objects.isPromise(result) && !me.loadingMsg) {\n                    await result;\n                }\n\n                me.showByTarget(target);\n            }\n            else {\n                // If a mouse down happens during the delay period, we cancel the show\n                me.addDocumentMouseDownListener();\n\n                // If we're not going to anchor to the hovered element, then we need to keep track\n                // of mousemoves until the show happens so we can show where the mouse currently is.\n                if (!me.listeningForMouseMove && !me.anchorToTarget) {\n                    me.mouseMoveRemover = EventHelper.on({\n                        element   : me.rootElement,\n                        mousemove : 'onMouseMove',\n                        thisObj   : me\n                    });\n                }\n                // If a tap event triggered, do not wait. Show immediately.\n                me.setTimeout(async() => {\n                    if (!DomHelper.isOrphaned(target)) {\n                        const result = me.updateContent();\n\n                        // Edge case, we have no loadingMsg meaning we're not visible until content has arrived\n                        if (Objects.isPromise(result) && !me.loadingMsg) {\n                            await result;\n                        }\n\n                        me.showByTarget(target);\n                    }\n                }, (!me.triggeredByEvent || me.triggeredByEvent.type === 'pointerover') ? me.hoverDelay : 0, 'show');\n            }\n        }\n        else if (me.isVisible) {\n            me.showByTarget(target);\n        }\n    }\n\n    changeAllowOver(allowOver) {\n        // Only cache it when configured from outside, not when temporarily set upon show.\n        if (!this.inAfterShow) {\n            this.configuredAllowOver = allowOver;\n        }\n        return allowOver;\n    }\n\n    updateAllowOver(allowOver) {\n        const\n            me          = this,\n            { element } = me;\n\n        element.classList.toggle('b-allow-over', Boolean(allowOver));\n\n        if (allowOver) {\n            me.allowOverlisteners = EventHelper.on({\n                element,\n                mouseenter : 'onOwnElementMouseEnter',\n                mouseleave : 'internalOnPointerOut',\n                thisObj    : me\n            });\n        }\n        else {\n            me.allowOverlisteners?.();\n        }\n    }\n\n    updateContent() {\n        const me = this;\n\n        if (me.getHtml) {\n            const result = me.callback(me.getHtml, me, [{\n                tip          : me,\n                element      : me.element,\n                activeTarget : me.activeTarget,\n                event        : me.triggeredByEvent\n            }]);\n            me.html = result;\n\n            return result;\n        }\n    }\n\n    // There are 3 possible scenarios:\n    // - Static content\n    // - Remote content being loaded (meaning we (possibly) set a loading message as the `html`\n    // - Tooltip acts as a Container\n    get hasContent() {\n        return Boolean(DomHelper.isReactElement(this._html) || (this._html !== '' && (typeof this.html === 'string' && this.html.length) || this.items.length));\n    }\n\n    internalBeforeShow() {\n        // In case we update content on mouse move, need to show empty tooltip first\n        return (this.updateContentOnMouseMove || this.hasContent) && !this.disabled;\n    }\n\n    /**\n     * Shows a spinner and a message to indicate an async flow is ongoing\n     * @param {String} message The message, defaults to {@link #config-loadingMsg}\n     */\n    showAsyncMessage(message = this.optionalL(this.loadingMsg)) {\n        // TODO: Load masking should ideally use a general Widget ability.\n        if (message) {\n            this.html = `\n                <div class=\"b-tooltip-loading\">\n                    <i class=\"b-icon b-icon-spinner\"></i>\n                    ${message}\n                </div>\n            `;\n        }\n    }\n\n    // Hook the alignTo process, injecting mouse offsets after RTL has been detected\n    beforeAlignTo(spec) {\n        super.beforeAlignTo(spec);\n\n        const me = this;\n\n        if (!me.anchorToTarget && spec.position === 'mouse') {\n            spec.position = new Point(\n                me.triggeredByEvent.pageX - globalThis.pageXOffset + me.mouseOffsetX * (me.rtl ? -1 : 1),\n                me.triggeredByEvent.pageY - globalThis.pageYOffset + me.mouseOffsetY\n            );\n        }\n    }\n\n    showByTarget(target) {\n        const\n            me                 = this,\n            { anchorToTarget } = me;\n\n        me.mouseMoveRemover = me.mouseMoveRemover?.();\n\n        // Show by the correct thing.\n        // If we are not anchored to the target, then it's the current pointer event, handled in beforeAlignTo() above.\n        // Otherwise it's the activeTarget.\n        me.showBy({\n            [anchorToTarget ? 'target' : 'position'] : anchorToTarget ? target : 'mouse',\n            overlap                                  : !(anchorToTarget && me.anchor)\n        });\n    }\n\n    afterShowByTarget() {\n        const\n            me               = this,\n            { dismissDelay } = me;\n\n        me.abortDelayedShow();\n        if (dismissDelay) {\n            me.setTimeout('hide', dismissDelay);\n        }\n        me.toFront();\n\n        // If we've shown, and are tracking the mouse and not anchored to (aligned to) the target, track the mouse\n        if (!me.mouseMoveRemover && (me.trackMouse || me.updateContentOnMouseMove)) {\n            me.mouseMoveRemover = EventHelper.on({\n                element     : me.rootElement,\n                pointermove : 'onMouseMove',\n                thisObj     : me\n            });\n        }\n\n        // Set allowOver to true if there are things that the user is able to interact with.\n        // Unless it is explicitly configured as false\n        me.inAfterShow = true;\n        me.allowOver = me.allowOver || (me.configuredAllowOver != false && me.childItems.some(w => w.isVisible && !w.disabled && w.focusElement));\n        me.inAfterShow = false;\n    }\n\n    updateActiveTarget(newTarget, lastTarget) {\n        if (newTarget && !this.isConfiguring) {\n            this.trigger('overTarget', { newTarget, lastTarget });\n        }\n    }\n\n    internalOnPointerOut(event) {\n        const\n            me        = this,\n            toElement = event.relatedTarget;\n\n        // Edge case: If there is no space to fit the tooltip, and as a result of showing the tooltip - the mouse is over the tooltip\n        // Make sure we don't end up in an infinite hide/show loop\n        if (me.allowOver && me.element.contains(toElement)) {\n            return;\n        }\n\n        // If we were in an allowOver situation and exited\n        // into the activeTarget, do nothing; in this situation\n        // the tip is treated as if it were part of the target.\n        if (me.element.contains(event.target) && me.activeTarget?.contains(toElement)) {\n            return;\n        }\n\n        // We have exited the active target\n        if (me.activeTarget && !me.activeTarget.contains(toElement)) {\n            me.handleForElementOut();\n        }\n    }\n\n    handleForElementOut() {\n        // Separated from onTargetOut so that subclasses can handle target out in any way.\n        const\n            me            = this,\n            { hideDelay } = me;\n\n        // Allow outside world to veto the hide\n        if (me.trigger('pointerOut') === false) {\n            me.activeTarget = null;\n            return;\n        }\n\n        me.abortDelayedShow();\n\n        // Even if there is a hide timer, it's a *dismiss* timer which hides the tip\n        // after a hover time. We begin a new delay on target out.\n        if (me.isVisible && hideDelay !== false) {\n            me.abortDelayedHide();\n            if (hideDelay > 0) {\n                me.setTimeout('hide', hideDelay);\n            }\n            else {\n                // Hide immediately when configured with `hideDelay: 0`. Used by async cell tooltips that always should\n                // retrigger `hoverDelay`, to not spam the backend\n                me.hide();\n            }\n        }\n    }\n\n    show(spec) {\n        const me = this;\n\n        // If we know what element to show it by, and we are anchoring to it\n        // and there's no ambiguity with a selector for sub elements,\n        // then show it by our forElement (Unless we're being called from showBy)\n        if (!spec && me.forElement && me.anchorToTarget && !me.forSelector) {\n            me.showByTarget(me.forElement);\n        }\n        // All we can do is the basic Widget show.\n        else {\n            super.show(...arguments);\n        }\n\n        me.afterShowByTarget();\n\n        if (me.forElement && !me.transitionEndDetacher && !me._hidden) {\n            me.transitionEndDetacher = EventHelper.on({\n                element       : me.forElement,\n                transitionend : 'onTransitionEnd',\n                thisObj       : me\n            });\n        }\n    }\n\n    hide() {\n        const me = this;\n        // If we are asked to hide, we must always abort any impending show.\n        me.abortDelayedShow();\n\n        // But if we are not hidden, go ahead and hide\n        if (!me._hidden) {\n            me.abortDelayedHide();\n\n            const result = super.hide(...arguments);\n\n            me.lastHidden = Date.now();\n            me.activeTarget = null;\n\n            me.mouseMoveRemover?.();\n            me.mouseMoveRemover = null;\n\n            me.transitionEndDetacher?.();\n            me.transitionEndDetacher = null;\n\n            return result;\n        }\n        else {\n            return immediatePromise;\n        }\n    }\n\n    abortDelayedShow() {\n        const me = this;\n        if (me.hasTimeout('show')) {\n            // This listener is added in delayShow to make a mousedown abort,\n            // So we must remove it here because it's only removed in onHide.\n            me.mouseDownRemover?.();\n            me.mouseDownRemover = null;\n\n            me.clearTimeout('show');\n\n            me.mouseMoveRemover?.();\n            me.mouseMoveRemover = null;\n\n            me.transitionEndDetacher?.();\n            me.transitionEndDetacher = null;\n        }\n    }\n\n    /**\n     * Stops both timers which may hide this tooltip, the one which counts down from mouseout\n     * and the one which counts down from mouseover show for dismissDelay ms\n     * @private\n     */\n    abortDelayedHide() {\n        this.clearTimeout('hide');\n    }\n\n    realign() {\n        const\n            me   = this,\n            spec = me.lastAlignSpec;\n\n        // If we are hidden because our align target scrolled, or otherwise\n        // moved out of its clipping boundaries, then check if it's moved back in.\n        // For example EventDrag might move the element outside of the scheduler\n        // SubGrid, which will cause the tip to hide, but then moving it back in\n        // must reshow it.\n        if (!me.isConfiguring && !me.isVisible && spec?.targetOutOfView) {\n            // If there is an intersecting Rectangle with the forElement, align\n            if (spec.allowTargetOut || DomHelper.isInView(spec.target, false, me)) {\n                me.show();\n                spec.targetOutOfView = false;\n            }\n        }\n\n        super.realign();\n    }\n\n    alignTo(spec) {\n        const me = this;\n\n        if (!me.isVisible) {\n            return;\n        }\n\n        // If mouse pointer is over this, do not attempt\n        // to call the getHtml method.\n        if (spec && !(me.triggeredByEvent && me.element.contains(me.triggeredByEvent.target))) {\n            //<debug>\n            if (!(spec.nodeType || spec.target || spec.position || (spec instanceof Point))) {\n                throw new Error('alignTo must be either passed a target to position by, or a position Point to position at');\n            }\n            //</debug>\n            if (spec.nodeType === Node.ELEMENT_NODE) {\n                spec = {\n                    target : spec\n                };\n            }\n        }\n\n        super.alignTo(spec);\n    }\n\n    //endregion\n\n    //region Tooltip contents\n\n    /**\n     * Get/set the HTML to display. When specifying HTML, this widget's element will also have `b-html` added to its\n     * classList, to allow targeted styling. To create async tooltip and show the {@link #config-loadingMsg}, see code below:\n     * For example:\n     *\n     * ```javascript\n     * new Tooltip({\n     *     listeners : {\n     *         beforeShow : ({ source : tip }) => {\n     *             tip.showAsyncMessage();\n     *             AjaxHelper.get('someurl').then(response => tip.html = 'Done!');\n     *         }\n     *     }\n     * });\n     * ```\n     *\n     * @member {String} html\n     * @category DOM\n     */\n\n    changeHtml(htmlOrPromise) {\n        const me = this;\n\n        if (Objects.isPromise(htmlOrPromise)) {\n            me.showAsyncMessage();\n            htmlOrPromise.target = me.activeTarget;\n\n            htmlOrPromise.then(html => {\n                // Cursor might have exited the element while loading\n                if (htmlOrPromise.target === me.activeTarget) {\n                    me.html = html;\n                }\n            });\n\n            return;\n        }\n\n        // Allow objects to pass through, to be used with DomSync\n        if (typeof htmlOrPromise !== 'object') {\n            // Stringify in case a number was passed in\n            htmlOrPromise = htmlOrPromise != null ? me.optionalL(String(htmlOrPromise)) : '';\n        }\n\n        return htmlOrPromise;\n    }\n\n    updateHtml(value, was) {\n        const me = this;\n\n        let empty = value === '';\n\n        // As setting empty string as content should hide the tooltip, we don't want to actually update the\n        // element innerHTML with blank space during the hide transition, we check _html for emptiness in hasContent\n\n        if (!empty) {\n            super.updateHtml(value, was);\n\n            if (me.hasContent) {\n                if (me.isVisible) {\n                    me.realign();\n                }\n\n                if (!Objects.isPromise(value)) {\n                    me.trigger('innerHtmlUpdate', { value });\n                }\n            }\n            else {\n                empty = true;\n            }\n        }\n\n        if (empty) {\n            // Hide empty tooltips\n            me.hide();\n        }\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Mouse move event listener which updates tooltip\n     * @private\n     */\n    onMouseMove(event) {\n        const\n            me       = this,\n            {\n                forElement,\n                activeTarget\n            }        = me,\n            // If we are trackMouse: true\n            // we must keep out of the way of the mouse by continuing\n            // to track if we are on the way out due to a hide timer.\n            isHiding = me.hasTimeout('hide'),\n            target   = event.target;\n\n        // MouseMove is listened for during the hover show timer wait phase if anchorToTarget is false\n        // so that when the timer fires, it can show near the most recent pointer position.\n        // It's also listened for after show when we are not anchored to the target and so tracking the mouse.\n        /**\n         * The DOM event that triggered this tooltip to show\n         * @member {Event} triggeredByEvent\n         * @readonly\n         */\n        me.triggeredByEvent = event;\n\n        // Check that we are still valid to be visible, and if so, track the mouse.\n        if (!me._hidden) {\n            let hideVetoed;\n\n            const\n                // It's a move within our target\n                isWithinTarget = activeTarget?.contains(target),\n\n                // Work out whether we have just exited our target.\n                // If we are still *inside* the target, do not test the selector.\n                isElementOut = !isWithinTarget && me.forSelector && activeTarget && !isHiding && (target.nodeType === Node.ELEMENT_NODE) && !target.matches(me.forSelector) && !(me.allowOver && me.element.contains(target)),\n\n                // We need an element we can ask the \"contains\" question about our target.\n                // If we are using window, we need to step down to the documentElement.\n                containingElement = forElement?.document ? forElement.document.documentElement : forElement,\n\n                // If the forElement is a ShadowRoot, it won't implement contains\n                // but it does implement compareDocumentPosition.\n                forElementContainsTarget = containingElement && (containingElement.contains ? containingElement.contains(target) : (containingElement.compareDocumentPosition(target) & 16));\n\n            // Check whether the element we are over is still a valid delegate matching the forSelector,\n            // or it's the tip element, and we're allowOver. If not, we have to hide.\n            // nodeType check is for FF on Linux, event.target is sometimes a text node\n            if (isElementOut) {\n                hideVetoed = me.handleForElementOut();\n            }\n            // If we are not hiding due to moving mouse outside our forElement (or hide being vetoed), tooltip stays visible and optionally realigns based on trackMouse setting.\n            if (hideVetoed || !isHiding || forElementContainsTarget) {\n                // Mousemoves restart the dismiss timer.\n                if (me.dismissDelay && !isHiding) {\n                    me.setTimeout('hide', me.dismissDelay);\n                }\n\n                if (me.updateContentOnMouseMove && me.getHtml) {\n                    me.html = me.callback(me.getHtml, me, [{\n                        tip        : me,\n                        element    : me.element,\n                        forElement : activeTarget,\n                        event      : event\n                    }]);\n\n                    if (!me.html) {\n                        // Nothing to display, hide\n                        me.hide();\n                        return;\n                    }\n                }\n\n                // If we're not anchoring to the target, track the mouse\n                if (me.trackMouse) {\n                    me.alignTo({\n                        position         : 'mouse',\n                        ignorePageScroll : true\n                    });\n                }\n            }\n        }\n    }\n\n    onOwnElementMouseEnter(event) {\n        this.abortDelayedHide();\n    }\n    //endregion\n\n    static getSharedTooltip(rootElement, skipCreating) {\n        let sharedTooltip = rootElement.bryntum?.tooltip?.get(Tooltip);\n\n        if (!sharedTooltip && !skipCreating) {\n            // Store shared tooltips in a map on root element,\n            // keyed by the class to work with multiple bundles on page\n            if (!rootElement.bryntum?.tooltip) {\n                ObjectHelper.setPath(rootElement, 'bryntum.tooltip', new Map());\n            }\n\n            const map = rootElement.bryntum.tooltip;\n\n            // Avoid infinite loop as the Tooltip gets created with rootElement too\n            map.set(Tooltip, true);\n\n            sharedTooltip = new Tooltip({\n                forElement        : rootElement,\n                rootElement,\n                forSelector       : '[data-btip]',\n                resetCfg          : {},\n                isShared          : true,\n                cls               : 'b-tooltip-shared',\n                internalListeners : {\n                    // Reconfigure on pointerOver\n                    pointerOver({ source : me, target }) {\n                        // Revert last pointerOver config set to initial setting.\n                        for (const key in me.resetCfg) {\n                            if (key === 'listeners') {\n                                me.un(me.resetCfg[key].set);\n                            }\n                            // Do not reset HTML to \"\". It causes an unwanted inter-delegate hide.\n                            // hideOnDelegateChange defaults to false.\n                            else if (key !== 'html') {\n                                me[key] = me.resetCfg[key].was;\n                            }\n                        }\n                        me.resetCfg = {};\n\n                        const\n                            forComponent = Widget.getById(target.id),\n                            // If it's a component's tooltip, configure from the component,\n                            // Otherwise gather from the dataset\n                            config = forComponent?.tipConfig || me.gatherDataConfigs(target.dataset);\n\n                        // getById might find an entry with same id in different context, or element might belong to a\n                        // widget that could not be resolved since it is in another context -> ignore\n                        if (\n                            (forComponent && forComponent.element !== target) ||\n                            (!forComponent && target.matches('.b-widget')) ||\n                            // Respect our forComponent's wish to not show when it's disabled\n                            (forComponent?.disabled && !forComponent.showTooltipWhenDisabled)\n                        ) {\n                            return false;\n                        }\n\n                        // Tooltip must be linked to an activating owner before it shows\n                        // so that configs which use 'up.propName' will be work as expected.\n                        me.owner = forComponent;\n\n                        for (const key in config) {\n                            me.resetCfg[key] = {\n                                set : config[key],\n                                was : me[key]\n                            };\n\n                            if (key === 'listeners') {\n                                me.ion(config[key]);\n                            }\n                            else {\n                                me[key] = config[key];\n                            }\n                        }\n                    },\n                    hide({ source : me }) {\n                        me.owner = null;\n                    }\n                },\n\n                gatherDataConfigs(dataset) {\n                    const\n                        me = this,\n                        config = {};\n\n                    for (const key in dataset) {\n                        if (key.startsWith('btip')) {\n                            if (key.length > 4) {\n                                const configProp = StringHelper.uncapitalize(key.substr(4)); // Snip off \"btip\" prefix to convert to property name\n\n                                // If we have a config by the name, set it\n                                if (configProp in me.getDefaultConfiguration()) {\n                                    const value = dataset[key];\n\n                                    // gather the found config value\n                                    config[configProp] = isBoolean[value] ? (value === 'true') : isNaN(value) ? value : parseInt(value, 10);\n                                }\n                            }\n                            else {\n                                config.html = dataset[key];\n                            }\n                        }\n                    }\n                    return config;\n                }\n            });\n\n            EventHelper.on({\n                element    : rootElement,\n                mouseenter : event => Tooltip.currentOverElement = event.target,\n                // If mouse is not used for editing cell then Tooltip has no `currentOverElement` and no error tooltip is shown. We use keydown event.target for this\n                keydown    : event => Tooltip.currentOverElement = event.target,\n                capture    : true,\n                thisObj    : sharedTooltip\n            });\n\n            map.set(Tooltip, sharedTooltip);\n        }\n\n        return sharedTooltip;\n    }\n\n    static encodeConfig(tooltip) {\n        const dataset = {};\n\n        if (typeof tooltip === 'string') {\n            dataset.btip = tooltip;\n        }\n        // Encode a full config into data-btip-allow-over etc.\n        else {\n            for (const config in tooltip) {\n                dataset[`btip${config === 'html' ? '' : StringHelper.capitalize(config)}`] = tooltip[config];\n            }\n        }\n        return dataset;\n    }\n}\n\n// Register this widget type with its Factory\nTooltip.initClass();\n\n// This is documented as a member in Widget\nObject.defineProperty(Widget, 'tooltip', {\n    get() {\n        return Tooltip.getSharedTooltip(document.body);\n    }\n});\n\n/**\n * Updated dynamically with the current element that the mouse is over. For use when showing a Tooltip\n * from code which is not triggered by a pointer event so that a tooltip can be positioned.\n * @member {HTMLElement} currentOverElement\n * @readonly\n * @static\n */\n\n// Register this widget type with its Factory\nWidget.Tooltip = Tooltip;\n","import Base from '../../Base.js';\nimport DomHelper from '../../helper/DomHelper.js';\nimport ObjectHelper from '../../helper/ObjectHelper.js';\n\n/**\n * @module Core/widget/mixin/Labelable\n */\n\n/**\n * This mixin provides label functionality to {@link Core.widget.Field} and {@link Core.widget.FieldSet}.\n *\n * Not to be used directly.\n *\n * @mixin\n */\nexport default Target => class Labelable extends (Target || Base) {\n    //region Config\n    static get $name() {\n        return 'Labelable';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Get/set fields label. Please note that the Field needs to have a label specified from start for this to\n             * work, otherwise no element is created.\n             * @member {String} label\n             */\n\n            /**\n             * Label, prepended to field\n             * @config {String}\n             * @category Label\n             */\n            label : null,\n\n            /**\n             * Label position, either 'before' the field or 'above' the field\n             * @config {'before'|'above'}\n             * @default\n             * @category Label\n             */\n            labelPosition : 'before',\n\n            /**\n             * CSS class name or class names to add to any configured {@link #config-label}\n             * @config {String|Object}\n             * @category Label\n             */\n            labelCls : null,\n\n            /**\n             * The width to apply to the `<label>` element. If a number is specified, `px` will be used.\n             * @config {String|Number}\n             * @localizable\n             * @category Label\n             */\n            labelWidth : {\n                value   : null,\n                $config : {\n                    localeKey : 'L{labelWidth}'\n                }\n            }\n        };\n    }\n\n    get hasLabel() {\n        return Boolean(this.label);\n    }\n\n    compose() {\n        const { hasLabel, labelPosition } = this;\n\n        return {\n            class : {\n                [`b-label-${labelPosition}`] : hasLabel,\n                'b-has-label'                : hasLabel\n            }\n        };\n    }\n\n    changeLabel(label) {\n        return label || '';\n    }\n\n    setupLabel(lbl) {\n        return ObjectHelper.assign({\n            tag   : 'label',\n            for   : `${this.id}-input`,\n            class : `b-label b-align-${lbl.align || 'start'}`\n        }, lbl);\n    }\n\n    // updateLabel(label) {\n    //     // since value is used in template it is not certain that element is available\n    //     // TODO: move the code from template here instead\n    //     if (this.labelElement) {\n    //         // using innerHTML since we sometimes use icons as label\n    //         this.labelElement.innerHTML = label;\n    //     }\n    // }\n\n    updateLabelWidth(newValue) {\n        if (this.labelElement) {\n            this.labelElement.style.flex = `0 0 ${DomHelper.setLength(newValue)}`;\n            // If there's a label width, the input must conform with it, and not try to expand to 100%\n            this.inputWrap.style.flexBasis = newValue == null ? '' : 'auto';\n        }\n    }\n\n    //endregion\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n","import Container from './Container.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\nimport Animator from '../util/Animator.js';\n\n/**\n * @module Core/widget/FieldContainer\n */\n\n/**\n * This widget is created by {@link Core.widget.Field#config-container} and is not created directly.\n * @extends Core/widget/Container\n */\nexport default class FieldContainer extends Container {\n    //region Config\n    static get $name() {\n        return 'FieldContainer';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'fieldcontainer';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * An animation config object to use when expanding or collapsing the field's\n             * {@link Core.widget.Field#config-container}.\n             * @config {Object} animation\n             * @property {Number} [animation.duration=300] The duration of the animation (in milliseconds).\n             * @internal\n             */\n            animation : {\n                duration : 300\n            },\n\n            /**\n             * Controls whether the field is collapsed (that is, the field's {@link Core.widget.Field#config-container}\n             * is hidden).\n             * @config {Boolean}\n             * @default false\n             */\n            collapsed : null,\n\n            /**\n             * The animator performing the field's currently running expand or collapse animation.\n             * @config {Core.util.Animator}\n             * @private\n             */\n            collapser : {\n                value   : null,\n                $config : 'nullify'  // to abort animations on destroy\n            },\n\n            /**\n             * A mapping object for config properties of the items in the {@link Core.widget.Field#config-container}.\n             * The keys are the config names and the values are functions that compute the config value when passed\n             * the field instance.\n             *\n             * For example, this is the default:\n             * ```javascript\n             *      syncableConfigs : {\n             *          disabled : field => field.disabled\n             *      }\n             * ```\n             * This indicates that the config property named with the key ('disabled') should be assigned to the result\n             * of the function assigned to that key (`field => field.disabled`). In other words, when the field is\n             * {@link Core.widget.Field#config-disabled}, all of the field's items should also be disabled.\n             *\n             * @config {Object}\n             * @internal\n             */\n            syncableConfigs : null,\n\n            /**\n             * This object holds truthy values for each config property that, when modified, should trigger a sync of\n             * this field's items as defined in {@link #config-syncableConfigs}.\n             * @config {Object}\n             * @internal\n             */\n            syncConfigTriggers : {\n                $config : {\n                    merge : 'classList'\n                },\n\n                value : null\n            },\n\n            testConfig : {\n                animation : {\n                    duration : 10\n                }\n            }\n        };\n    }\n\n    static get delayable() {\n        return {\n            syncChildConfigs : 'raf'\n        };\n    }\n\n    get inline() {\n        return this.owner.inline ?? this.ensureItems().count === 1;\n    }\n\n    changeCollapsed(collapsed) {\n        if (this.togglingCollapse) {\n            this.togglingCollapse = false;\n\n            return collapsed;\n        }\n\n        this.toggleCollapse(Boolean(collapsed));\n    }\n\n    updateCollapsed(collapsed) {\n        this.collapser = this.collapser?.destroy();\n        this.setCollapsedCls(collapsed);\n    }\n\n    updateCollapser(collapser, was) {\n        if (was && was.completed == null) {\n            if (!was.reverting || !collapser) {\n                was.destroy();\n            }\n        }\n\n        this.setOwnerCls('b-collapsing', collapser);\n    }\n\n    //endregion\n\n    /**\n     * This property is `true` if the field container is currently collapsing.\n     * @property {Boolean}\n     * @readonly\n     */\n    get collapsing() {\n        const { collapser } = this;\n\n        return collapser != null && collapser.collapsed;\n    }\n\n    /**\n     * This property is `true` if the field container is currently either collapsing or expanding.\n     * @property {Boolean}\n     * @readonly\n     * @internal\n     */\n    get collapsingExpanding() {\n        return this.collapser != null;\n    }\n\n    /**\n     * This property is `true` if the field container is currently expanding.\n     * @property {Boolean}\n     * @readonly\n     */\n    get expanding() {\n        const { collapser } = this;\n\n        return collapser != null && !collapser.collapsed;\n    }\n\n    collapse(animation) {\n        this.toggleCollapse(true, animation);\n    }\n\n    expand(animation) {\n        this.toggleCollapse(false, animation);\n    }\n\n    setCollapsedCls(collapsed) {\n        this.setOwnerCls('b-collapsed', collapsed);\n    }\n\n    setOwnerCls(cls, state) {\n        this.owner?.element?.classList[state ? 'add' : 'remove'](cls);\n    }\n\n    syncChildConfigs() {\n        const\n            me                         = this,\n            { owner, syncableConfigs } = me;\n\n        if (syncableConfigs) {\n            let destProp, val;\n\n            for (destProp in syncableConfigs) {\n                val = syncableConfigs[destProp](owner);\n\n                me.eachWidget(item => {\n                    item[destProp] = val;\n                }, /* deep = */ false);\n            }\n        }\n\n        owner.afterSyncChildConfigs(me);\n    }\n\n    syncContainer() {\n        const { inline, layout } = this;\n\n        if (this.autoLayout) {\n            layout.horizontal = inline;\n            layout.justify = inline ? 'center' : 'stretch';\n        }\n    }\n\n    toggleCollapse(collapsed, animation) {\n        const\n            me                                                    = this,\n            { animation : collapseAnimation, collapser, inline } = me,\n            { containerWrapElement }                              = me.owner,\n            finalize = complete => {\n                if (complete) {\n                    me.element.style.height = '';\n                    me.togglingCollapse = true;\n                    me.collapsed = collapsed;\n                    me.collapser = null;  // in case we reverted\n                }\n            };\n\n        if (collapsed == null) {\n            collapsed = !me.collapsed;\n        }\n\n        if (animation !== false && animation !== null) {\n            if (!containerWrapElement || !me.isVisible) {\n                animation = null;\n            }\n            else {\n                if (animation === true) {\n                    animation = {};\n                }\n                else if (typeof animation === 'number') {\n                    animation = {\n                        duration : animation\n                    };\n                }\n\n                animation = (collapseAnimation || animation) ? ObjectHelper.merge({}, collapseAnimation, animation) : null;\n            }\n        }\n\n        if (!animation) {\n            me.togglingCollapse = true;\n            me.collapsed = collapsed;\n        }\n        else if (collapser && collapsed !== collapser.collapsed) {\n            me.collapser = collapser.revert({ finalize });\n            me.collapser.collapsed = collapsed;\n        }\n        else if (!collapser && collapsed !== me.collapsed) {\n            // to expand, we need to briefly become expanded in order to get a proper measurement\n            !collapsed && me.setCollapsedCls(false);\n\n            const\n                { element } = me,\n                { height } = element.getBoundingClientRect(),\n                expanded = inline ? 1 : height;\n\n            !collapsed && me.setCollapsedCls(true);\n\n            element.style.height = `${height}px`;\n\n            me.collapser = Animator.run(ObjectHelper.merge({\n                finalize,\n                element                         : containerWrapElement,\n                [inline ? 'opacity' : 'height'] : {\n                    from : collapsed ? expanded : 0,\n                    to   : collapsed ? 0        : expanded\n                }\n            }, animation));\n\n            me.collapser.collapsed = collapsed;\n        }\n    }\n}\n\nFieldContainer.initClass();\n","import Widget from './Widget.js';\nimport Tooltip from './Tooltip.js';\nimport Badge from './mixin/Badge.js';\nimport Labelable from './mixin/Labelable.js';\nimport EventHelper from '../helper/EventHelper.js';\nimport FunctionHelper from '../helper/FunctionHelper.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\nimport DomHelper from '../helper/DomHelper.js';\nimport ClickRepeater from '../util/ClickRepeater.js';\nimport DynamicObject from '../util/DynamicObject.js';\n\nimport './FieldContainer.js';\n\n/**\n * @module Core/widget/Field\n */\n\nconst\n    byWeight        = (l, r) => (l.weight || 0) - (r.weight || 0),\n    byWeightReverse = (l, r) => (r.weight || 0) - (l.weight || 0),\n    emptyArray      = [],\n    triggerConfigs  = {\n        align  : true,\n        weight : true\n    };\n\n/**\n * Base class for {@link Core.widget.TextField} and {@link Core.widget.NumberField}. Not to be used directly.\n *\n * Most subclasses can be used as editors for the {@link Grid.column.Column}. The most popular are:\n * - {@link Core.widget.TextField}\n * - {@link Core.widget.NumberField}\n * - {@link Core.widget.DateField}\n * - {@link Core.widget.TimeField}\n * - {@link Core.widget.Combo}\n *\n * @extends Core/widget/Widget\n * @mixes Core/widget/mixin/Badge\n * @mixes Core/widget/mixin/Labelable\n * @abstract\n */\nexport default class Field extends Widget.mixin(Badge, Labelable) {\n\n    //region Config\n    static get $name() {\n        return 'Field';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'field';\n    }\n\n    static get configurable() {\n        return {\n            defaultBindProperty : 'value',\n\n            /**\n             * @hideconfigs htmlCls, content, tag, scrollable, html\n             */\n\n            /**\n             * Text to display in empty field.\n             * @config {String} placeholder\n             */\n            placeholder : null,\n\n            /**\n             * Gets or sets the value. The returned type will depend upon the Field subclass.\n             *\n             * `TextField` returns a `String`.\n             *\n             * `NumberField` returns a `Number`.\n             *\n             * `DateField` and `TimeField` return a `Date` object, and `null` if the field is empty.\n             *\n             * `Combo` will return a `String` if configured with `items` as a simple string array.\n             * Otherwise it will return the {@link Core.widget.Combo#config-valueField} value from the\n             * selected record, or `null` if no selection has been made.\n             * @member {*} value\n             */\n            /**\n             * Default value\n             * @config {String}\n             */\n            value : '',\n\n            /**\n             * Name of the field which is used as a key to get/set values from/to the field.\n             * Used prior to {@link Core.widget.Widget#config-ref ref} and {@link Core.widget.Widget#config-id id} in\n             * {@link Core.widget.Container#property-values Container.values}.\n             *\n             * The config is useful when the field is used in EventEditor or TaskEditor to load/save values automatically.\n             * @config {String}\n             */\n            name : null,\n\n            /**\n             * The labels to add either before or after the input field.\n             * Each label may have the following properties:\n             * * `html` The label text.\n             * * `align` `'start'` or `'end'` which end of the field the label should go.\n             * @config {Object[]}\n             * @property {String} html Label text\n             * @property {'start'|'end'} align Which end of the file the label should go\n             * @category Label\n             */\n            labels : null,\n\n            /**\n             * Configure as `true` to indicate that a `null` field value is to be marked as invalid.\n             * @config {Boolean}\n             * @default false\n             */\n            required : null,\n\n            /**\n             * Show a trigger to clear field, and allow `SHIFT+BACKSPACE` key to clear field if this field is\n             * not {@link #config-readOnly}. The trigger is available in the {@link #property-triggers} object\n             * under the name `clear`. May also be an object which configures the `clear`\n             * {@link #property-triggers trigger}.\n             * @config {Boolean|FieldTriggerConfig}\n             * @default false\n             */\n            clearable : null,\n\n            /**\n             * If this field is not {@link #config-readOnly}, then setting this option means that pressing\n             * the `ESCAPE` key after editing the field will revert the field to the value it had when\n             * the user focused the field. If the field is _not_ changed from when focused, the {@link #config-clearable}\n             * behaviour will be activated.\n             * @config {Boolean}\n             * @default false\n             */\n            revertOnEscape : null,\n\n            /**\n             * An optional string to display inside the input field as an overlay. This can be useful for displaying\n             * a field's units.\n             *\n             * This config is ignored if {@link #config-hintHtml} is set.\n             *\n             * For example:\n             * ```javascript\n             *  {\n             *      type  : 'numberfield',\n             *      label : 'Temperature',\n             *      hint  : '°C'\n             *  }\n             * ```\n             *\n             * This config can be set to a function to dynamically generate the `hint` text:\n             * ```javascript\n             *  {\n             *      type  : 'numberfield',\n             *      label : 'Duration',\n             *      hint  : ({ value }) => (value === 1) ? 'Day' : 'Days'\n             *  }\n             * ```\n             *\n             * The function is passed an object with the following properties:\n             *\n             *  - `source` A reference to the field instance.\n             *  - `value` The current value of the field.\n             *\n             * A `hint` function will be called when the field changes value.\n             *\n             * @config {String|Function}\n             * @category Label\n             */\n            hint : null,\n\n            /**\n             * This config is similar to {@link #config-hint} except that this config is used to display HTML content.\n             * Since this can allow malicious content to be executed, be sure not to include user-entered data or to\n             * encode such data (see {@link Core.helper.StringHelper#function-encodeHtml-static}).\n             *\n             * If this config is set, {@link #config-hint} is ignored.\n             *\n             * For example:\n             * ```javascript\n             *  {\n             *      type     : 'numberfield',\n             *      label    : 'Temperature',\n             *      hintHtml : '<i>°C</i>'\n             *  }\n             * ```\n             *\n             * This config can be set to a function to dynamically generate the `hintHtml` text:\n             * ```javascript\n             *  {\n             *      type     : 'numberfield',\n             *      label    : 'Duration',\n             *      hintHtml : ({ value }) => (value === 1) ? '<i>Day</i>' : '<i>Days</i>'\n             *  }\n             * ```\n             *\n             * The function is passed an object with the following properties:\n             *\n             *  - `source` A reference to the field instance.\n             *  - `value` The current value of the field.\n             *\n             * A `hintHtml` function will be called when the field changes value.\n             *\n             * @config {String|Function}\n             * @category Label\n             */\n            hintHtml : null,\n\n            /**\n             * The width to apply to the `<input>` element. If a number is specified, `px` will be used.\n             * @config {String|Number}\n             * @category Input element\n             */\n            inputWidth : null,\n\n            /**\n             * The delay in milliseconds to wait after the last keystroke before triggering a change event.\n             * Set to 0 to not trigger change events from keystrokes (listen for input event instead to have\n             * immediate feedback, change will still be triggered on blur).\n             *\n             * If the field is {@link #config-clearable}, the change event fires immediately on receiving\n             * the clear gesture.\n             * @config {Number}\n             * @default\n             */\n            keyStrokeChangeDelay : 0,\n\n            /**\n             * Makes the field unmodifiable by user action. The input area is not editable, and triggers\n             * are unresponsive.\n             *\n             * This is a wider-acting setting than {@link #config-editable} which *only* sets the\n             * `readOnly` attribute of the `<input>` field.\n             *\n             * PickerFields such as `Combo` and `DateField` can be `editable : false`, but still\n             * modifiable through the UI.\n             * @config {Boolean}\n             */\n            readOnly : null,\n\n            /**\n             * Set to false to prevent user from editing the field. For TextFields it is basically the same as setting\n             * {@link #config-readOnly}, but for PickerFields there is a distinction where it allows you to pick a value\n             * but not to type one in the field.\n             *\n             * PickerFields such as `Combo` and `DateField` can be `editable : false`, but still\n             * modifiable through the UI.\n             * @config {Boolean}\n             * @default true\n             */\n            editable : true,\n\n            defaultAction : 'change',\n\n            /**\n             * The trigger Widgets as specified by the {@link #config-triggers} configuration and the\n             * {@link #config-clearable} configuration. Each is a {@link Core.widget.Widget} instance which may\n             * be hidden, shown and observed and styled just like any other widget.\n             * @member {Object<String,Core.widget.Widget>} triggers\n             */\n            /**\n             * The triggers to add either before or after the input field. Each property name is the reference by which\n             * an instantiated Trigger Widget may be retrieved from the live `{@link #property-triggers}` property.\n             *\n             * Each trigger may have the following properties:\n             * * `cls` The CSS class to apply.\n             * * `handler` A method in the field to call upon click\n             * * `align` `'start'` or `'end'` which end of the field the trigger should go.\n             * * `weight` (Optional) Higher weighted triggers gravitate towards the input field.\n             *\n             * ```javascript\n             * const textField = new TextField({\n             *   triggers : {\n             *       check : {\n             *           cls : 'b-fa b-fa-check',\n             *           handler() {\n             *               ...\n             *           }\n             *       },\n             *       ...\n             *   }\n             * })\n             * ```\n             *\n             * @config {Object<String,FieldTriggerConfig>}\n             */\n            triggers : null,\n\n            /**\n             * Specify `false` to prevent field from being highlighted when on external value changes\n             * @config {Boolean}\n             */\n            highlightExternalChange : true,\n\n            localizableProperties : ['label', 'title', 'placeholder', 'labelWidth'],\n\n            /**\n             * Specify `true` to auto select field contents on focus\n             * @config {Boolean}\n             * @default\n             */\n            autoSelect : false,\n\n            /**\n             * Sets the native `autocomplete` property of the underlying input element. For more information, please refer to\n             * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)\n             * @config {String}\n             * @default\n             * @category Input element\n             */\n            autoComplete : 'off',\n\n            /**\n             * Sets the native `spellcheck` property of the underlying input element. For more information, please refer to\n             * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck)\n             * @config {Boolean}\n             * @category Input element\n             */\n            spellCheck : null,\n\n            /**\n             * Set to `false` to not highlight a field as invalid while typing, to instead show it on ENTER key press\n             * or similar.\n             * @config {Boolean}\n             * @category Input element\n             */\n            validateOnInput : true,\n\n            /**\n             * Sets custom attributes of the underlying input element. For more information, please refer to\n             * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes)\n             * @config {Object}\n             * @default\n             * @category Input element\n             */\n            inputAttributes : null,\n\n            /**\n             * Sets the `type` attribute of the underlying input element (password, hidden, date, color, etc).\n             * @config {String}\n             * @category Input element\n             */\n            inputType : 'text',\n\n            /**\n             * Text alignment for the input field.\n             * @config {String}\n             * @category Input element\n             */\n            inputAlign : null,\n\n            /**\n             * A list of property names to be set in the underlying input element from properties\n             * by the same name in this Field object if the value is not `== null`.\n             * @private\n             * @category Input element\n             */\n            attributes : {\n                value : [\n                    'placeholder',\n                    'autoComplete',\n                    'spellCheck',\n                    'minLength',\n                    'maxLength',\n                    'pattern',\n                    'tabIndex',\n                    'min',\n                    'max'\n                ],\n                $config : {\n                    merge : 'distinct'\n                }\n            },\n\n            nullValue : {\n                $config : null,\n                value   : null,\n                default : null    // store _value=null on prototype\n            },\n\n            updatedClsDuration : 500,\n\n            inputReadOnly : false,\n\n            ariaElement : 'input',\n\n            /**\n             * The configuration for additional items associated to this field. This is typically used to add contextual\n             * fields related to a {@link Core.widget.Checkbox checkbox} or {@link Core.widget.Radio radio button}. See\n             * these classes for examples of nested fields.\n             *\n             * This config can be provided as an array of widget config objects, an object with named widgets (see\n             * {@link Core.widget.FieldContainer#config-namedItems}, or a config object for the whole\n             * {@link Core.widget.FieldContainer field container}.\n             *\n             * To determine if the object is a `namedItems` object or a {@link Core.widget.FieldContainer field container}\n             * config, the object is checked for either a `type` or an `items` property. If it has either of these\n             * properties, it is a field container config object. Configuring the container is useful for applying\n             * {@link Core.widget.FieldContainer#config-cls classes} or {@link Core.widget.FieldContainer#config-style styles}\n             * to the container as a whole.\n             *\n             * For example, to add named items:\n             * ```javascript\n             *  new Checkbox({\n             *      text : 'Separate shipping address',\n             *      container : {\n             *          address1 : {\n             *              type : 'textfield'\n             *          },\n             *          address2 : {\n             *              type : 'textfield'\n             *          }\n             *      }\n             *  });\n             * ```\n             *\n             * To style the container as well, move the items to the `items` property and add `cls`:\n             * ```javascript\n             *  new Checkbox({\n             *      text : 'Separate shipping address',\n             *      container : {\n             *          cls   : 'address-form',\n             *          items : {\n             *              address1 : {\n             *                  type : 'textfield'\n             *              },\n             *              address2 : {\n             *                  type : 'textfield'\n             *              }\n             *          }\n             *      }\n             *  });\n             * ```\n             *\n             * @config {Core.widget.FieldContainer}\n             * @accepts {Object<string,ContainerItemConfig>|ContainerItemConfig[]|FieldContainerConfig}\n             * @category Container\n             */\n            container : {\n                $config : 'nullify',\n                value   : null\n            },\n\n            /**\n             * The default configuration for the {@link #config-container}.\n             * @config {Core.widget.FieldContainer}\n             * @accepts {FieldContainerConfig|Core.widget.FieldContainer}\n             * @category Container\n             * @internal\n             */\n            containerDefaults : {\n                type : 'fieldcontainer',\n\n                syncableConfigs : {\n                    disabled : field => field.disabled\n                },\n\n                syncConfigTriggers : {\n                    disabled : 1\n                }\n            },\n\n            /**\n             * The config controls how the value of nested items are handled when a parent container gets or sets its\n             * {@link Core.widget.Container#property-values}.\n             *\n             * The valid values for this config are:\n             *  - `null` (the default) will include the values of this field's items if this field stores its own value.\n             *  - `true` to always include the values of this field's items.\n             *  - `false` to never include the values of this field's items.\n             *  - `'nested'` to include the values of this field's items as a nested object under the field's `name`.\n             *    This field's `value` is stored as the `'value'` property of that object.\n             *  - Any other string is treated as the name of a property on this field. When truthy, the values of this\n             *    field's items will be included.\n             *  - A function can be supplied that must return a value given this field as its sole argument. If that\n             *    value is truthy, this field's items will be included.\n             *\n             * @config {Boolean|String|Function}\n             * @category Container\n             */\n            containValues : null,\n\n            /**\n             * Set this config to `true` to always display items horizontally along with this field. This assigns an\n             * {@link Core.widget.layout.Box hbox} as the {@link Core.widget.Container#config-layout} to the\n             * {@link #config-container}.\n             *\n             * Alternatively, set this config to `false` to wrap this field's items below. This assigns a\n             * {@link Core.widget.layout.VBox} as the {@link Core.widget.Container#config-layout} to the\n             * {@link #config-container}.\n             *\n             * This config defaults to `true` if there is exactly one item, and `false` otherwise.\n             * @config {Boolean}\n             * @category Container\n             */\n            inline : null,\n\n            testConfig : {\n                updatedClsDuration : 10\n            },\n\n            keyMap : {}\n        };\n    }\n\n    static get delayable() {\n        return {\n            highlightChanged : 'raf'\n        };\n    }\n\n    doDestroy() {\n        const\n            me           = this,\n            { triggers } = me,\n            errorTip     = me.isPainted && Field.getSharedErrorTooltip(me.rootElement, true);\n\n        me.inputListenerRemover?.();\n        me.keyListenerRemover?.();\n\n        me.container?.destroy();\n\n        super.doDestroy();\n\n        if (triggers) {\n            for (const t of Object.values(triggers)) {\n                t.destroy();\n            }\n        }\n\n        // The errorTip references this field, hide it when we die.\n        if (errorTip?.field === me) {\n            errorTip.hide();\n        }\n    }\n\n    get childItems() {\n        const\n            { container, triggers } = this,\n            ret = triggers ? Object.values(triggers) : [];\n\n        return container ? [...ret, ...container.childItems] : ret;\n    }\n\n    get invalidValueError() {\n        return 'L{invalidValue}';\n    }\n\n    /**\n     * A singleton error tooltip which activates on hover of invalid fields.\n     * before show, it gets a reference to the field and interrogates its\n     * active error list to display as the tip content.\n     * @member {Core.widget.Tooltip}\n     * @readonly\n     */\n    get errorTip() {\n        return this.constructor.getSharedErrorTooltip(this.rootElement);\n    }\n\n    static getSharedErrorTooltip(rootElement, doNotCreate) {\n        let sharedErrorTooltip = rootElement.bryntum?.errorTooltip;\n\n        if (!sharedErrorTooltip && !doNotCreate) {\n            rootElement.bryntum = rootElement.bryntum || {};\n\n            sharedErrorTooltip = new Tooltip({\n                cls         : 'b-field-error-tip',\n                forSelector : '.b-field.b-invalid .b-field-inner',\n                align       : {\n                    align                 : 'l-r',\n                    monitorTargetMutation : true\n                },\n                scrollAction : 'realign',\n                trapFocus    : false,\n                rootElement,\n\n                onBeforeShow() {\n                    const tip   = this,\n                        field = Widget.fromElement(tip.activeTarget);\n\n                    if (field) {\n                        const errors = field.getErrors();\n\n                        if (errors) {\n                            tip.html = errors.join('<br>');\n                            tip.field = field;\n                            return true;\n                        }\n                    }\n\n                    // Veto show\n                    return false;\n                }\n            });\n            rootElement.bryntum.errorTooltip = sharedErrorTooltip;\n        }\n\n        return sharedErrorTooltip;\n    }\n\n    /**\n     * A singleton error tooltip which activates on hover of invalid fields.\n     * before show, it gets a reference to the field and interrogates its\n     * active error list to display as the tip content.\n     *\n     * Please note: Not applicable when using widgets inside a shadow root\n     * @member {Core.widget.Tooltip}\n     * @readonly\n     * @static\n     */\n    static get errorTip() {\n        return this.getSharedErrorTooltip(document.body);\n    }\n\n    //endregion\n\n    //region Event\n    /**\n     * Fired when the user types into this field.\n     * @event input\n     * @param {Core.widget.Field} source This field.\n     * @param {String} value - This field's value\n     * @param {Event} event - The triggering DOM event.\n     */\n\n    /**\n     * Fired when this field's value changes.\n     * @event change\n     * @param {String} value - This field's value\n     * @param {String} oldValue - This field's previous value\n     * @param {Boolean} valid - True if this field is in a valid state.\n     * @param {Event} [event] - The triggering DOM event if any.\n     * @param {Boolean} userAction - Triggered by user taking an action (`true`) or by setting a value (`false`)\n     * @param {Core.widget.Field} source - This Field\n     */\n\n    /**\n     * User performed default action (typed into this field).\n     * @event action\n     * @param {String} value - This field's value\n     * @param {String} oldValue - This field's previous value\n     * @param {Boolean} valid - True if this field is in a valid state.\n     * @param {Event} [event] - The triggering DOM event if any.\n     * @param {Boolean} userAction - Triggered by user taking an action (`true`) or by setting a value (`false`)\n     * @param {Core.widget.Field} source - This Field\n     */\n\n    /**\n     * Fired when this field is {@link #function-clear cleared}.\n     *\n     * This will be triggered when a user clicks this field's clear {@link #property-triggers trigger}\n     * @event clear\n     * @param {Core.widget.Field} source - This Field\n     */\n\n    /**\n     * User clicked one of this field's {@link #property-triggers}\n     * @event trigger\n     * @param {Core.widget.Field} source This field\n     * @param {Core.widget.Widget} trigger The trigger activated by click or touch tap.\n     */\n\n    //endregion\n\n    //region Init\n\n    construct(config) {\n        super.construct(config);\n\n        const me = this;\n\n        if (me.keyStrokeChangeDelay) {\n            me.changeOnKeyStroke = me.buffer(me.internalOnChange, me.keyStrokeChangeDelay);\n        }\n    }\n\n    // Adding triggers keymap to field keymap with prefix 'triggerName.';\n    changeKeyMap(keyMap) {\n        const me = this;\n        let mergedKeyMap = {};\n\n        if (keyMap) {\n            if (!me._fieldKeyMap) {\n                me._fieldKeyMap = keyMap;\n                ObjectHelper.assign(mergedKeyMap, keyMap);\n            }\n            else {\n                ObjectHelper.assign(mergedKeyMap, me._fieldKeyMap);\n            }\n        }\n\n        for (const triggerName in me.triggers) {\n            if (me.triggers[triggerName]?.keyMap) {\n                mergedKeyMap = me.mergeKeyMaps(mergedKeyMap, me.triggers[triggerName].keyMap, triggerName);\n            }\n        }\n        return mergedKeyMap;\n    }\n\n    get keyMapSubComponents() {\n        return this.triggers;\n    }\n\n    onFocusIn(e) {\n        const me = this;\n\n        me.valueOnFocus = ObjectHelper.clone(me.value);\n        me.validOnFocus = !(me.errors && Object.keys(me.errors).length);\n        super.onFocusIn(e);\n\n        // Inform user about the validity state when they focus on the field.\n        me.focusing = true;\n        me.syncInvalid();\n        me.focusing = false;\n    }\n\n    onFocusOut(e) {\n        super.onFocusOut(e);\n\n        // Required field not flagged with error initially, flag on blur instead for better appearance\n        this.syncRequired();\n\n        // Check field consistency on blur\n        this.onEditComplete();\n    }\n\n    /**\n     * Template function which may be implemented by subclasses to synchronize\n     * input state and validity state upon completion of the edit.\n     * @internal\n     */\n    onEditComplete() {\n\n    }\n\n    get rootUiClass() {\n        return Field;\n    }\n\n    compose() {\n        // Force evaluation of clearable so triggers include the clearable trigger. We can't bury this inside\n        // changeTriggers since there may be no other triggers defined (which would mean changeTriggers would never\n        // be run)\n        this.getConfig('clearable');\n\n        const\n            me = this,\n            { container, innerElements, label, labels, labelCls, readOnly, triggers } = me,\n            triggerInstances = ObjectHelper.values(triggers, (k, v) => !v),\n            // The triggers at each end are sorted \"gravitationally\".\n            // Higher weight sorts towards the center which is the input element.\n            startTriggers = triggerInstances.filter(t => t.align === 'start').sort(byWeight),\n            endTriggers = triggerInstances.filter(t => t.align !== 'start').sort(byWeightReverse),\n            setupLabel = me.setupLabel.bind(me),\n            innerChildren = [\n                ...startTriggers.map(t => t.element),\n                ...innerElements,\n                ...endTriggers.map(t => t.element)\n            ];\n\n        return {\n            class : {\n                'b-has-start-trigger'      : startTriggers.length,\n                'b-no-input'               : !innerElements.length,\n                'b-readonly'               : readOnly,\n                'b-field-container'        : Boolean(container),\n                'b-field-container-inline' : container?.inline\n            },\n            children : [\n                ...(labels || emptyArray).filter(t => t && t.align !== 'end').map(setupLabel),\n                (label || null) && setupLabel({\n                    reference : 'labelElement',\n                    class     : `b-label b-align-start ${labelCls || ''}`,\n                    html      : label\n                }),\n                innerChildren.length ? {\n                    class     : 'b-field-inner',\n                    reference : 'inputWrap',\n                    children  : innerChildren\n                } : null,\n                ...(labels || emptyArray).filter(t => t?.align === 'end').map(setupLabel),\n                ...(container ? [{\n                    reference : 'containerWrapElement',\n                    children  : [container.element],\n                    class     : {\n                        'b-field-container-wrap' : 1\n                    }\n                }] : emptyArray)\n            ]\n        };\n    }\n\n    updateElement(element, was) {\n        const\n            me = this,\n            value = me.initialConfig.value,\n            { input } = me;\n\n        super.updateElement(element, was);\n\n        // Value must be injected into the input element after it has been constructed, not in the\n        // initial template, otherwise the caret position will not be as expected.\n        if (value != null) {\n            me.value = value;\n        }\n\n        me.syncEmpty();\n        me.updateInputReadOnly(me.inputReadOnly);\n        me.syncInvalid();\n\n        const keyEventElement = input || me.focusElement;\n\n        me.keyListenerRemover?.();\n\n        me.keyListenerRemover = keyEventElement && EventHelper.on({\n            element  : keyEventElement,\n            thisObj  : me,\n            keydown  : 'internalOnKeyEvent',\n            keypress : 'internalOnKeyEvent',\n            keyup    : 'internalOnKeyEvent'\n        });\n    }\n\n    // Subclasses may implement this.\n    // Needed because Checkbox produces an array of two elements as its innerElements\n    get innerElements() {\n        return [this.inputElement];\n    }\n\n    /**\n     * The input element at the heart if this field\n     * @member {HTMLElement} input\n     */\n    get inputElement() {\n        const\n            { attributes, inputAttributes, id, inputCls, inputType, name } = this,\n            domConfig = ObjectHelper.assign({\n                reference     : 'input',\n                tag           : 'input',\n                type          : inputType,\n                name          : name || id,\n                id            : `${id}-input`,\n                retainElement : true  // allow the input to be transplanted as in combo/chipView\n            }, inputAttributes);\n\n        if (inputCls) {\n            domConfig.class = inputCls;\n        }\n\n        for (let key, value, i = attributes.length; i-- > 0; /* empty */) {\n            key = attributes[i];\n            value = this[key];\n\n            if (value != null) {  // don't smash properties already in domConfig w/null values...\n                domConfig[key] = value;\n            }\n        }\n\n        return domConfig;\n    }\n\n    //endregion\n\n    //region Focus & select\n\n    get caretPos() {\n        return this.textSelection[0];\n    }\n\n    set caretPos(value) {\n        this.textSelection = value;\n    }\n\n    get focusElement() {\n        return this.input;\n    }\n\n    get textSelection() {\n        const input = this.input;\n\n        let ret;\n\n        try {\n            ret = [input.selectionStart, input.selectionEnd, input.selectionDirection];\n        }\n        catch (e) {\n            // ignore (some input types cannot do this)\n            ret = input.value?.length || 0;\n            ret = [ret, ret];\n        }\n\n        return ret;\n    }\n\n    set textSelection(value) {\n        if (typeof value === 'number') {\n            this.select(value, value);\n        }\n        else {\n            this.select(...value);\n        }\n    }\n\n    get hasTextSelection() {\n        const [selectionStart, selectionEnd] = this.textSelection;\n\n        return selectionStart && selectionEnd - selectionStart > 0;\n    }\n\n    /**\n     * Returns the input value for this field's input element that will be present if\n     * the event carrying the given text is allowed to proceed.\n     * @param {String} text\n     * @returns {String}\n     * @private\n     */\n    getAfterValue(text) {\n        const\n            [begin, end] = this.textSelection,\n            value = this.input.value;\n\n        return `${value.substr(0, begin)}${text}${value.substr(end || begin)}`;\n    }\n\n    /**\n     * Selects the field contents. Optionally may be passed a start and end.\n     * @param {Number} [start] The start index from which to select the input.\n     * @param {Number} [end] The index at which to end the selection of the input.\n     */\n    select(start, end) {\n        // Use focusElement which is the input field in this class\n        // but allows subclasses to use other elements.\n        // See, for example, TextAreaPickerField\n        const input = this.focusElement;\n\n        if (input.value.length) {\n            if (arguments.length === 0) {\n                this.selectAll();\n                return;\n            }\n\n            // Only allowed to select range in certain element / input types\n            if (!this.supportsTextSelection) {\n                return;\n                // throw new Error('Trying to select text on an invalid element type');\n            }\n\n            input.setSelectionRange(start, end);\n        }\n    }\n\n    moveCaretToEnd() {\n        const input = this.input;\n\n        if (input.createTextRange) {\n            const range = input.createTextRange();\n            range.collapse(false);\n            range.select();\n        }\n        else if (this.supportsTextSelection) {\n            // Move caret to the end if possible\n            this.select(input.value.length, input.value.length);\n        }\n\n    }\n\n    selectAll() {\n        this.focusElement.select();\n    }\n\n    // called on value changes to update styling of empty vs non-empty field\n    syncEmpty() {\n        const\n            { isEmptyInput, isEmpty, element } = this,\n            clear                              = this.triggers?.clear,\n            empty                              = isEmptyInput && isEmpty;\n\n        if (element) {\n            if (clear) {\n                clear[empty ? 'hide' : 'show']();\n            }\n            element.classList.toggle('b-empty', empty);\n        }\n    }\n\n    updateHint() {\n        this.syncHint();\n    }\n\n    updateHintHtml() {\n        this.syncHint();\n    }\n\n    syncHint() {\n        const\n            me = this,\n            { input, hint, hintHtml } = me,\n            parent = input?.parentElement;\n\n        if (input) {\n            let hintValue = hintHtml || hint;\n\n            const hintElement = me.hintElement || hintValue && (me.hintElement = DomHelper.createElement({\n                parent,\n                className   : 'b-field-hint',\n                nextSibling : input.nextSibling,\n                children    : [{\n                    className : 'b-field-hint-content'\n                }]\n            }));\n\n            if (hintElement) {\n                if (typeof hintValue === 'function') {\n                    hintValue = hintValue({ source : me, value : me.value });\n                }\n\n                hintElement.firstChild[hintHtml ? 'innerHTML' : 'textContent'] = hintValue || '';\n            }\n\n            me.element.classList[hintValue ? 'remove' : 'add']('b-field-no-hint');\n        }\n    }\n\n    syncInvalid() {\n        const\n            me            = this,\n            { isPainted } = me;\n\n        me.updatingInvalid = true;\n\n        if (isPainted) {\n            const { isValid, element, inputWrap } = me;\n\n            element.classList[isValid ? 'remove' : 'add']('b-invalid');\n\n            // We achieved validity, so ensure the error tip is hidden\n            if (isValid) {\n                const errorTip = me.constructor.getSharedErrorTooltip(me.rootElement, true);\n\n                if (errorTip?.isVisible && errorTip.field === me) {\n                    errorTip.hide();\n                }\n            }\n            // If the mouse is over, the tip should spring into view\n            else {\n                // errorTip needs Tooltip.listenersTarget to be there\n                // otherwise it doesn't setup listeners and cannot notice we mouseover an invalid field\n                const errorTip = me.errorTip;\n\n                // Show the error UI if this field is focused, or if the field is under the mouse pointer\n                if (errorTip && (me.containsFocus || (me.isVisible && inputWrap.contains(Tooltip.currentOverElement)))) {\n                    // Already shown by this field's inputWrap, just update content.\n                    if (errorTip.activeTarget === inputWrap && errorTip.isVisible) {\n                        errorTip.onBeforeShow();\n                    }\n                    else {\n                        errorTip.activeTarget = inputWrap;\n                        errorTip.showBy(inputWrap);\n                    }\n                }\n            }\n        }\n\n        me.updatingInvalid = false;\n    }\n\n    //endregion\n\n    //region Getters/setters\n\n    updateEditable() {\n        this.syncInputReadOnly();\n    }\n\n    syncInputReadOnly() {\n        this.getConfig('readOnly');  // make sure our config is initialized...\n\n        // but since the readOnly getter conflates disabled into it, we ultimately have to look at _readOnly:\n        this.inputReadOnly = this._readOnly || this.editable === false;\n    }\n\n    updateInputReadOnly(readOnly) {\n        const\n            me    = this,\n            { input, inputListenerRemover } = me;\n\n        // Editable refers *ONLY* to the readOnly state of the <input> field within the field.\n        // It does *NOT* imply that the field is not modifiable by user interaction.\n        // For example, a Combo or DateField may be not editable, but may still be set through the UI.\n        // It is the readOnly config which disables user interaction from modifying the field.\n        if (input) {\n            input.readOnly = readOnly ? 'readOnly' : null;\n\n            if (readOnly) {\n                me.inputListenerRemover = inputListenerRemover?.();\n            }\n            else if (!inputListenerRemover) {\n                me.inputListenerRemover = EventHelper.on({\n                    element : input,\n                    thisObj : me,\n                    focus   : 'internalOnInputFocus',\n                    change  : 'internalOnChange',\n                    input   : 'internalOnInput'\n                });\n            }\n        }\n    }\n\n    changeReadOnly(value) {\n        return Boolean(value);\n    }\n\n    updateReadOnly(readOnly) {\n        this.syncInputReadOnly();\n    }\n\n    updateClearable(clearable) {\n        const me = this;\n\n        me.getConfig('triggers');\n\n        me.triggers = {\n            clear : clearable && ObjectHelper.assign({\n                cls    : 'b-icon-remove',\n                weight : 1000,\n                key    : 'Shift+backspace',\n                handler() {\n                    me._isUserAction = true;\n                    me.clear(...arguments);\n                    me._isUserAction = false;\n                }\n            }, clearable) || null\n        };\n    }\n\n    changeTriggers(triggers, was) {\n        const\n            me = this,\n            manager = me.$triggers || (me.$triggers = new DynamicObject({\n                configName : 'triggers',\n                factory    : Field.Trigger,\n                inferType  : false,  // the name of a trigger in the triggers object is not its type\n                owner      : me,\n\n                created(instance) {\n                    FunctionHelper.after(instance, 'onConfigChange', (ret, { name }) => {\n                        if (triggerConfigs[name]) {\n                            me.onConfigChange({\n                                name  : 'triggers',\n                                value : manager.target\n                            });\n                        }\n                    });\n                },\n\n                setup(config, name) {\n                    config.reference = config.ref = name;\n                    config.parent = me;\n                }\n            }));\n\n        if (me.stepTriggers === false && (triggers.back || triggers.forward)) {\n            triggers = ObjectHelper.assign({}, triggers);\n            delete triggers.back;\n            delete triggers.forward;\n        }\n\n        manager.update(triggers);\n\n        if (me.element) {\n            // Force changeKeyMap to be called\n            // eslint-disable-next-line no-self-assign\n            me.keyMap = me.keyMap;\n        }\n\n        if (!was) {\n            // Only return the target once. Further calls are processed above so we need to return undefined to ensure\n            // onConfigChange is called. By returning the same target on 2nd+ call, it passes the === test and won't\n            // trigger onConfigChange.\n            return manager.target;\n        }\n    }\n\n    updateInputWidth(newValue) {\n        this.input.style.width = DomHelper.setLength(newValue);\n\n        this.element.classList.add('b-has-width');\n    }\n\n    updateInputAlign(newValue) {\n        this.input.style.textAlign = newValue;\n    }\n\n    /**\n     * Returns true if the field value is valid\n     * @type {Boolean}\n     * @readonly\n     */\n    get isValid() {\n        const me = this;\n\n        // Disabled fields are considered valid\n        if (!me.disabled) {\n            me.syncRequired();\n\n            if (me.errors && Object.keys(me.errors).length) {\n                return false;\n            }\n\n            const validity = me.validity;\n\n            if (validity) {\n                return validity.valid;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Returns `true` if this field is empty. That is, if it would violate the {@link #config-required}\n     * setting.\n     *\n     * This may have different definitions in subclasses from simple text fields.\n     * @type {Boolean}\n     * @readonly\n     */\n    get isEmpty() {\n        return this.value == null || this.value === '';\n    }\n\n    /**\n     * Returns true if the field's input is empty\n     * @type {Boolean}\n     * @readonly\n     */\n    get isEmptyInput() {\n        return !this.input || this.input.value == null || this.input.value === '';\n    }\n\n    /**\n     * Returns the DOM `ValidityState` for this widget's input element, or `null` if there\n     * isn't one.\n     * @returns {ValidityState}\n     * @private\n     */\n    get validity() {\n        const input = this.input;\n\n        return input?.validity;\n    }\n\n    changeValue(value, was) {\n        if (value == null) {\n            value = this.nullValue;\n        }\n\n        // In cases of arrays, for example, we need to return \"was\" to pass the === check in the setter to convince\n        // the config that, in fact, no change has occurred.\n        if (this.hasChanged(was, value)) {\n            return value;\n        }\n\n        // When loading a record into a form, an empty value might be loaded into a field, which is not detected as a\n        // change. In this scenario it should still be flagged as invalid\n        if (value === '') {\n            this.syncRequired();\n        }\n\n        return was;\n    }\n\n    updateValue(value, oldValue) {\n        const me = this;\n\n        // Do not flag with error if configured empty, looks ugly to have fields start red\n        if (!me.isConfiguring) {\n            me.syncRequired();\n\n            // Do not trigger change event during configuration phase\n            // or during keyboard input\n            if (!me.inputting) {\n                // trigger change event, signaling that origin is from set operation,\n                // makes it easier to ignore such events in applications that set value on load etc\n                me.triggerChange();\n            }\n        }\n\n        // lastValue is used for IE to check if a change event should be triggered when pressing ENTER\n        if (!me.inputting) {\n            me._lastValue = value;\n        }\n\n        me.syncInputFieldValue();\n\n        if (me.overflowTwin && !me._overflowTwinSync) {\n            me._overflowTwinSync = true;\n            me.overflowTwin.value = value;\n            me._overflowTwinSync = false;\n        }\n    }\n\n    /**\n     * Compares this field's value with its previous value. May be overridden in subclasses\n     * which have more complex value types. See, for example, {@link Core.widget.DurationField}.\n     * @param {*} oldValue\n     * @param {*} newValue\n     * @private\n     */\n    hasChanged(oldValue, newValue) {\n        return newValue !== oldValue;\n    }\n\n    /**\n     * Called by the base Field class's `set value` to sync the state of the UI with the field's value.\n     *\n     * Relies upon the class implementation of `get inputValue` to return a string representation of\n     * the value for user consumption and editing.\n     * @private\n     */\n    syncInputFieldValue(skipHighlight = false) {\n        const\n            me        = this,\n            { input, parent, inputValueAttr, inputValue } = me;\n\n        // If we are updating from internalOnInput, we must not update the input field\n        if (input && !me.inputting && input[inputValueAttr] !== inputValue) {\n            // Subclasses may implement their own read only inputValue property.\n            input[inputValueAttr] = inputValue;\n\n            // TODO : This highlighting logic needs extracting/clarifying\n\n            // If it's being manipulated from the outside, highlight it\n            if (!me.isConfiguring && !me.containsFocus && me.highlightExternalChange) {\n                input.classList.remove('b-field-updated');\n\n                me.clearTimeout('removeUpdatedCls');\n\n                if (parent) {\n                    const { assigningValues } = parent;\n\n                    if (assigningValues === true || assigningValues?.highlight === false) {\n                        skipHighlight = true;\n                    }\n                }\n\n                // if (!skipHighlight && (!parent || !(parent.isSettingValues || parent.assigningValues?.preventHighlight))) {\n                if (!skipHighlight) {\n                    me.highlightChanged();\n                }\n            }\n        }\n\n        me.syncEmpty();\n        me.syncInvalid();\n    }\n\n    highlightChanged() {\n        this.input.classList.add('b-field-updated');\n        this.setTimeout('removeUpdatedCls', this.updatedClsDuration);\n    }\n\n    removeUpdatedCls() {\n        this.input.classList.remove('b-field-updated');\n    }\n\n    /**\n     * A String representation of the value of this field for {@link #function-syncInputFieldValue} to use\n     * as the input element's value.\n     *\n     * Subclasses may override this to create string representations.\n     *\n     * For example, {@link Core.widget.DateField}'s implementation will format the field date\n     * value according to its configured {@link Core.widget.DateField#config-format}. And {@link Core.widget.Combo}'s\n     * implementation will return the {@link Core.widget.Combo#config-displayField} of the selected record.\n     * @internal\n     * @readOnly\n     */\n    get inputValue() {\n        // Do not use the _value property. If called during configuration, this\n        // will import the configured value from the config object.\n        return this.value == null ? '' : this.value;\n    }\n\n    get inputValueAttr() {\n        return 'value';\n    }\n\n    get supportsTextSelection() {\n        const input = this.focusElement;\n\n        // Text selection using setSelectionRange is allowed in Chrome for certain elements.\n        return input && (input.tagName.toLowerCase() === 'textarea' || (input.type && (/text|search|password|tel|url/.test(input.type))));\n    }\n\n    //endregion\n\n    //region Events\n\n    internalOnInputFocus() {\n        if (this.autoSelect) {\n            this.selectAll();\n        }\n    }\n\n    /**\n     * Trigger event when fields input changes\n     * @fires change\n     * @private\n     */\n    internalOnChange(event) {\n        const me = this;\n\n        // Don't trigger change if we enter invalid value or if value has not changed (for IE when pressing ENTER)\n        if (me.hasChanged(me._lastValue, me.value) && me.isValid) {\n            me.triggerChange(event, true);\n            me._lastValue = me.value;\n        }\n    }\n\n    triggerChange(event, userAction = Boolean(this._isUserAction)) {\n        const\n            me = this,\n            {\n                value,\n                _lastValue : oldValue,\n                // TODO: The `internalOnChange`-path excludes invalid changes, while the `set value`-path includes them\n                isValid    : valid\n            }  = me;\n\n        me.syncHint();\n        // trigger change event, signaling that origin is from user\n        me.triggerFieldChange({ value, oldValue, event, userAction, valid });\n\n        // per default Field triggers action event on change, but might be reconfigured in subclasses (such as Combo)\n        if (me.defaultAction === 'change') {\n            me.trigger('action', { value, oldValue, event, userAction, valid });\n        }\n\n        // since Widget has Events mixed in configured with 'callOnFunctions' this will also call onClick and onAction\n    }\n\n    fetchInputValue() {\n        this.value = this.input[this.inputValueAttr];\n    }\n\n    /**\n     * Trigger event when user inputs into field\n     * @fires input\n     * @param event\n     * @private\n     */\n    internalOnInput(event) {\n        const me = this;\n\n        if (!me.validateOnInput) {\n            me.errorTip.hide();\n        }\n        // Keep the value synced with the inputValue at all times.\n        me.inputting = true;\n        me.fetchInputValue();\n        me.inputting = false;\n\n        me.trigger('input', { value : me.value, event });\n\n        me.changeOnKeyStroke?.(event);\n\n        // since Widget has Events mixed in configured with 'callOnFunctions' this will also call onInput\n    }\n\n    /**\n     * Returns `true` if the {@link #property-input} field needs to be synced with the internal\n     * {@link #property-value} of this field.\n     *\n     * May be overridden in subclasses where this is more complex such as multiSelect Combo\n     * with a `ChipView` where the input area does not reflect the field's value.\n     * @private\n     */\n    get needsInputSync() {\n        return this.input[this.inputValueAttr] !== String(this.inputValue ?? '');\n    }\n\n    internalOnKeyEvent(event) {\n        const\n            me        = this,\n            { value } = me;\n\n        let stopEvent = false;\n\n        if (event.type === 'keydown') {\n            if (event.key === 'Escape' && !(me.readOnly || me.disabled)) {\n                // We can be started with an initialValue which takes precedence over the valueOnFocus.\n                // Because in some situations focus can move out and back in after a change which needs\n                // to be revertable. For example in cell editing.\n                const\n                    wasValid           = me.isValid,\n                    initialValue       = ('initialValue' in me) ? me.initialValue : me.valueOnFocus,\n                    valueChanged       = me.hasChanged(initialValue, value),\n                    { needsInputSync } = me;\n\n                // We revert on escape if we are configured to do so AND:\n                // We are in an invalid state, or the value has changed, or the displayed value doesn't match the field value.\n                if (me.revertOnEscape && (!wasValid || valueChanged || needsInputSync)) {\n                    if (valueChanged) {\n                        me.value = initialValue;\n                    }\n                    if (needsInputSync) {\n                        me.syncInputFieldValue(true);\n                    }\n                    me.clearError();\n\n                    // If this processing changed the value or input field's value back to valid, or\n                    // the validity state was different to that upon focus\n                    // then this was a revert operation, so prevent further ESC processing.\n                    stopEvent = ((valueChanged || needsInputSync) && me.isValid) || (wasValid !== me.validOnFocus);\n                }\n            }\n        }\n\n        // The above processing might have destructive consequences.\n        if (!me.isDestroyed) {\n            // If the keystroke had the effect of changing the field, prevent other handlers\n            // which may mask that effect. Such as ESC exiting some UI context. Keep it contained.\n            if (stopEvent) {\n                event.stopImmediatePropagation();\n            }\n            me.trigger(event.type, { event });\n        }\n    }\n\n    /**\n     * Clears the value of this Field, and triggers the {@link #event-clear} event.\n     */\n    clear(event) {\n        const\n            me        = this,\n            { value } = me;\n\n        if (value !== me.nullValue || me.input.value.length > 0) {\n            me.value = me.nullValue;\n            me.clearError();\n            me.syncInvalid();\n\n            // event will be present if called from the clearTrigger click\n            me.trigger('clear', { event });\n        }\n    }\n\n    /**\n     * Called when disabled state is changed.\n     * Used to add or remove 'b-invalid' class for the invalid field based on current disabled state.\n     * @private\n     */\n    onDisabled() {\n        this.syncInvalid();\n    }\n\n    //endregion\n\n    //region Error\n\n    syncRequired() {\n        const me = this;\n\n        // Empty valid if any ancestor Container is setting values\n        if (!me.isConfiguring && !me.focusing && me.required && me.isEmpty && !me.parent?.isSettingValues) {\n            me.setError('L{fieldRequired}', me.updatingInvalid);\n        }\n        else {\n            me.clearError('L{fieldRequired}', me.updatingInvalid);\n        }\n    }\n\n    /**\n     * Adds an error message to the list of errors on this field.\n     * By default the field's valid/invalid state is updated; pass\n     * `false` as the second parameter to disable that if multiple\n     * changes are being made to the error state.\n     * @param {String} error A locale string, or message to use as an error message.\n     * @param {Boolean} [silent=false] Pass as `true` to skip updating the field's valid/invalid state.\n     * @privateparam {Boolean} [temporary=false] Pass as `true` to remove the error upon the next user interaction.\n     */\n    setError(error, silent, temporary) {\n        const me = this;\n\n        // Error messages are deduplicated by using them as the property names in an object.\n        (me.errors || (me.errors = {}))[me.optionalL(error)] = 1;\n\n        if (!silent) {\n            me.syncInvalid();\n        }\n        if (temporary) {\n            const\n                clearError = () => {\n                    me.clearError(error);\n                    remover();\n                },\n                remover = me.ion({\n                    keydown  : clearError,\n                    focusOut : clearError\n                });\n        }\n    }\n\n    /**\n     * Removes an error message from the list of errors on this field.\n     * By default the field's valid/invalid state is updated; pass\n     * `false` as the second parameter to disable that if multiple\n     * changes are being made to the error state.\n     * @param {String} [error] A locale string, or message to remove. If not passed, all errors are cleared.\n     * @param {Boolean} [silent=false] Pass as `true` to skip updating the field's valid/invalid state.\n     */\n    clearError(error, silent) {\n        const me = this;\n\n        if (me.errors) {\n            if (error) {\n                delete this.errors[this.optionalL(error)];\n            }\n            else {\n                me.errors = {};\n            }\n        }\n\n        if (!silent) {\n            me.syncInvalid();\n        }\n    }\n\n    /**\n     * Returns an array of error messages as set by {@link #function-setError}, or\n     * `undefined` if there are currently no errors.\n     * @returns {String[]} The errors for this field, or `undefined` if there are no errors.\n     */\n    getErrors() {\n        const me = this;\n\n        if (!me.isValid) {\n            const\n                validity  = me.validity,\n                // See possible state names: https://developer.mozilla.org/en-US/docs/Web/API/ValidityState\n                stateName = ObjectHelper.keys(validity).find(key => key !== 'valid' && key !== 'customError' && validity[key]),\n                errorKeys = me.errors && Object.keys(me.errors);\n\n            let errors;\n\n            if (errorKeys?.length) {\n                errors = errorKeys;\n            }\n            // If custom error message was set using https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/setCustomValidity\n            else if (validity.customError) {\n                errors = [me.input.validationMessage];\n            }\n            // If invalid state found, translate it\n            else if (stateName) {\n                // Do not remove. Assertion strings for Localization sanity check.\n                // 'L{foo}'\n                // 'L{badInput}'\n                // 'L{patternMismatch}'\n                // 'L{rangeOverflow}'\n                // 'L{rangeUnderflow}'\n                // 'L{stepMismatch}'\n                // 'L{tooLong}'\n                // 'L{tooShort}'\n                // 'L{typeMismatch}'\n                // 'L{valueMissing}'\n\n                errors = [me.L(stateName, {\n                    // In case min/max limits are present they will be used in the translation\n                    min : me.min,\n                    max : me.max\n                })];\n            }\n            // If built-in state is 'valid' but me.isValid is false, show our invalid message\n            else {\n                errors = [me.L(me.invalidValueError)];\n            }\n\n            if (errors?.length > 0) {\n                return errors;\n            }\n        }\n    }\n\n    //endregion\n\n    createOverflowTwin(overrides) {\n        const\n            me           = this,\n            overflowTwin = super.createOverflowTwin(overrides);\n\n        // Clone's changes must propagate to original.\n        overflowTwin.ion({\n            change({ value }) {\n                me._overflowTwinSync = true;\n                me.value = value;\n                me._overflowTwinSync = false;\n            }\n        });\n\n        return overflowTwin;\n    }\n\n    //region Container\n\n    get containerCollapsed() {\n        return this.container?.collapsed;\n    }\n\n    set containerCollapsed(collapsed) {\n        const { container } = this;\n\n        if (container) {\n            container.collapsed = collapsed;\n        }\n    }\n\n    afterSyncChildConfigs(container) {\n        //\n    }\n\n    changeContainer(config, existing) {\n        if (config && (Array.isArray(config) || !(('type' in config) || ('items' in config)))) {\n            // When \"container\" is an array or an object that has neither type nor items properties, it is the items\n            // of the container:\n            config = {\n                items : config\n            };\n        }\n\n        const\n            me        = this,\n            defaults  = config && ObjectHelper.merge({\n                owner  : me,\n                layout : 'box'\n            }, me.containerDefaults),\n            container = Widget.reconfigure(existing, config, {\n                owner : me,\n                defaults\n            });\n\n        if (container) {\n            container.autoLayout = defaults?.layout === 'box';\n\n            if (container === existing) {\n                container.syncContainer();\n                // just return to retain the config's value but also call onConfigChange (since we handled the change)\n                return;\n            }\n        }\n\n        return container;\n    }\n\n    onConfigChange(info) {\n        super.onConfigChange(info);\n\n        if (this.container?.syncConfigTriggers?.[info.name]) {\n            this.container.syncChildConfigs();\n        }\n    }\n\n    assignValue(values, options) {\n        const\n            me                           = this,\n            { container, containValues } = me,  // TODO perhaps containValues would be better moved to Container?\n            valueName                    = me.getValueName(options),\n            storedValue                  = values && valueName in values;\n\n        if (container && containValues !== false) {\n            if (values && containValues === 'nested') {\n                if (storedValue) {\n                    values = ObjectHelper.clone(values[valueName]);  // could be null\n\n                    super.assignValue({\n                        // Removing 'value:true' from nested values is a trick done by checkbox (could be done by\n                        // any toggle-like thing) so just put true back in:\n                        [valueName] : values && !('value' in values) || values.value\n                    }, options);\n\n                    if (values) {\n                        delete values.value;\n                    }\n\n                    container.assignValue(values, options);\n                }\n            }\n            else {\n                super.assignValue(values, options);\n\n                container.assignValue(values, options);\n            }\n        }\n        else {\n            super.assignValue(values, options);\n        }\n    }\n\n    gatherValue(values) {\n        super.gatherValue(values);\n\n        this.gatherValues(values);\n    }\n\n    gatherValues(values, storedValue) {\n        const\n            me                                      = this,\n            { container, containValues, valueName } = me,\n            cvt                                     = typeof containValues;\n\n        storedValue = storedValue ?? (valueName in values);\n\n        if (container && containValues !== false) {\n            if (containValues === 'nested') {\n                if (storedValue) {\n                    values[valueName] = {\n                        value : values[valueName],\n                        ...container.values\n                    };\n                }\n            }\n            else if (\n                containValues === true ||\n                (containValues == null && storedValue) ||\n                (cvt === 'string' && me[containValues]) ||\n                (cvt === 'function' && containValues(me))\n            ) {\n                container.gatherValues(values);\n            }\n        }\n    }\n\n    updateContainer(container, was) {\n        was && this.detachListeners(was.id);\n\n        if (container) {\n            if (!container.rendered) {\n                container.render();\n            }\n\n            container.syncContainer();\n            container.syncChildConfigs();\n        }\n    }\n\n    //endregion\n\n}\n\n/**\n * Config object for a field trigger.\n *\n * @typedef {Object} FieldTriggerConfig\n * @property {String} cls The CSS class to apply.\n * @property {Function|String} handler A method in the field to call upon click.\n * @property {'start'|'end'} [align] Which end of the field the trigger should go.\n * @property {Number} [weight] Higher weighted triggers gravitate towards the input field.\n */\n\n/**\n * Base class for field triggers. May be configured with a `cls` and a `handler` which is a function (or name of a\n * function) in the owning Field.\n * @classtype trigger\n * @extends Core/widget/Widget\n */\nField.Trigger = class FieldTrigger extends Widget {\n    static get $name() {\n        return 'FieldTrigger';\n    }\n\n    static get factoryable() {\n        return {\n            defaultType : Field.Trigger,\n            extends     : null\n        };\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'trigger';\n    }\n\n    // Align is a simple string at this level\n    static get configurable() {\n        return {\n            align  : null,\n            weight : null,\n            role   : undefined\n        };\n    }\n\n    get field() {\n        return this.parent;\n    }\n\n    construct() {\n        super.construct(...arguments);\n        if (this.key) {\n            this.keyMap = {\n                [this.key] : 'onClick'\n            };\n        }\n    }\n\n    compose() {\n        return {\n            'aria-hidden' : true,\n            class         : {\n                [`b-align-${this.align || 'end'}`] : 1,\n                'b-icon'                           : 1\n            },\n            listeners : {\n                click     : 'onClick',\n                mousedown : 'onMousedown'\n            }\n        };\n    }\n\n    changeAlign(align) {\n        return align;  // Widget base class converts to an object\n    }\n\n    onClick(e) {\n        const\n            me        = this,\n            { field } = me;\n\n        if (!(field.disabled || field.readOnly)) {\n            // If invoked by a key, don't go ahead with that key's default browser action\n            if (e.key) {\n                e.preventDefault();\n            }\n            if (field.trigger('trigger', { trigger : me }) !== false && me.handler) {\n                field.callback(me.handler, field, [e, me]);\n            }\n        }\n    }\n\n    onMousedown(e) {\n        const\n            field      = this.field,\n            isKeyEvent = ('key' in e);\n\n        // If it's a touch tap on the trigger of an editable, then\n        // avoid the keyboard by setting the field to not be editable\n        // before focusing the field. Reset to be editable after focusing\n        // has happened. Keyboard will not appear.\n        if (!isKeyEvent && DomHelper.isTouchEvent) {\n            if (field.editable) {\n                field.editable = false;\n                field.setTimeout(() => field.editable = true, 500);\n            }\n        }\n\n        e.preventDefault();\n\n        if (DomHelper.getActiveElement(field.input) !== field.input) {\n            field.focus();\n        }\n    }\n};\n\nField.SpinTrigger = class SpinTrigger extends Field.Trigger {\n    static get $name() {\n        return 'SpinTrigger';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'spintrigger';\n    }\n\n    static get configurable() {\n        return {\n            repeat : {\n                $config : ['nullify'],\n                value   : true\n            }\n        };\n    }\n\n    compose() {\n        return {\n            children : {\n                upButton : {\n                    class : {\n                        'b-icon'    : 1,\n                        'b-spin-up' : 1\n                    }\n                },\n                downButton : {\n                    class : {\n                        'b-icon'      : 1,\n                        'b-spin-down' : 1\n                    }\n                }\n            }\n        };\n    }\n\n    updateRepeat(repeat) {\n        this.clickRepeater?.destroy();\n\n        this.clickRepeater = repeat ? ClickRepeater.new({\n            element : this.element\n        }, repeat) : null;\n    }\n\n    onClick(e) {\n        const\n            me        = this,\n            { field } = me;\n\n        if (!(field.disabled || field.readOnly)) {\n            if (e.target === me.upButton) {\n                field.doSpinUp(e.shiftKey);\n            }\n            else if (e.target === me.downButton) {\n                field.doSpinDown(e.shiftKey);\n            }\n        }\n    }\n};\n\n// Register trigger widgets type with their Factory\nField.Trigger.initClass();\nField.SpinTrigger.initClass();\n\nWidget.register(Field.Trigger, 'trigger');\nWidget.register(Field.SpinTrigger, 'spintrigger');\n","import Field from './Field.js';\n\n//TODO: label should be own element\n\n/**\n * @module Core/widget/TextField\n */\n\n/**\n * Textfield widget. Wraps native &lt;input type=\"text\"&gt;\n *\n * This field can be used as an {@link Grid.column.Column#config-editor editor} for the {@link Grid.column.Column Column}.\n * It is used as the default editor for the {@link Grid.column.Column Column}, {@link Grid.column.TemplateColumn TemplateColumn},\n * {@link Grid.column.TreeColumn TreeColumn}, and for other columns if another editor is not specified explicitly,\n * or disabled by setting `false` value.\n *\n * @extends Core/widget/Field\n *\n * @example\n * let textField = new TextField({\n *   placeholder: 'Enter some text'\n * });\n *\n * @classType textfield\n * @inlineexample Core/widget/TextField.js\n * @inputfield\n */\nexport default class TextField extends Field {\n\n    // Factoryable type name\n    static get type() {\n        return 'textfield';\n    }\n\n    // Factoryable type alias\n    static get alias() {\n        return 'text';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * The tab index of the input field\n             * @config {Number} tabIndex\n             * @category Input element\n             */\n\n            /**\n             * The min number of characters for the input field\n             * @config {Number} minLength\n             * @category Field\n             */\n\n            /**\n             * The max number of characters for the input field\n             * @config {Number} maxLength\n             * @category Field\n             */\n\n            nullValue : ''\n        };\n    }\n\n    static get $name() {\n        return 'TextField';\n    }\n\n    construct(config) {\n        if (config?.inputType === 'hidden') {\n            config.hidden = true;\n        }\n\n        super.construct(...arguments);\n    }\n}\n\n// Register this widget type with its Factory\nTextField.initClass();\n","import TextField from './TextField.js';\nimport GlobalEvents from '../GlobalEvents.js';\nimport EventHelper from '../helper/EventHelper.js';\nimport DomHelper from '../helper/DomHelper.js';\n\n/**\n * @module Core/widget/PickerField\n */\n\n/**\n * Base class used for {@link Core.widget.Combo Combo}, {@link Core.widget.DateField DateField}, and {@link Core.widget.TimeField TimeField}.\n * Displays a picker ({@link Core.widget.List List}, {@link Core.widget.DatePicker DatePicker}) anchored to the field.\n * Not intended to be used directly.\n *\n * This field's subclasses can be used as editors for the {@link Grid.column.Column Column}.\n *\n * When focused by means of *touch* tapping on the trigger element (eg, the down arrow on a Combo)\n * on a tablet, the keyboard will not be shown by default to allow for interaction with the dropdown.\n *\n * A second tap on the input area will then show the keyboard if required.\n *\n * @extends Core/widget/TextField\n * @abstract\n */\nexport default class PickerField extends TextField {\n    //region Config\n    static get $name() {\n        return 'PickerField';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'pickerfield';\n    }\n\n    static get configurable() {\n        return {\n\n            /**\n             * User can edit text in text field (otherwise only pick from attached picker)\n             * @config {Boolean}\n             * @default\n             */\n            editable : true,\n\n            /**\n             * The name of the element property to which the picker should size and align itself.\n             * @config {String}\n             * @default element\n             */\n            pickerAlignElement : 'inputWrap',\n\n            // Does not get set, but prevents PickerFields inheriting value:'' from Field.\n            value : null,\n\n            triggers : {\n                expand : {\n                    cls : 'bars'\n                }\n            },\n\n            /**\n             * By default PickerField's picker is transient, and will {@link #function-hidePicker} when the user clicks or\n             * taps outside or when focus moves outside picker.\n             *\n             * Configure as `false` to make picker non-transient.\n             * @config {Boolean}\n             * @default\n             */\n            autoClose : true,\n\n            /**\n             * Configure as `true` to have the picker expand upon focus enter.\n             * @config {Boolean}\n             */\n            autoExpand : null,\n\n            /**\n             * Returns the instantiated picker widget as configured by {@link #config-picker}.\n             * @readonly\n             * @member {Core.widget.Widget} picker\n             */\n            /**\n             * A config object which is merged into the generated picker configuration to allow specific use cases\n             * to override behaviour. For example:\n             *\n             *     picker: {\n             *         align: {\n             *             anchor: true\n             *         }\n             *     }\n             *\n             * @config {Object}\n             */\n            picker : {\n                value : {\n                    floating : true\n                },\n\n                $config : ['lazy', 'nullify']\n            },\n\n            inputType : 'text',\n\n            // We need to realign the picker if we resize (eg a multiSelect Combo's ChipView wrapping)\n            monitorResize : true,\n\n            nullValue : null\n        };\n    }\n\n    //endregion\n\n    //region Init & destroy\n\n    doDestroy() {\n        // Remove touch keyboard showing listener if we added it\n        this.globalTapListener?.();\n\n        super.doDestroy();\n    }\n\n    updateEditable(editable) {\n        const\n            me  = this,\n            {\n                element,\n                ariaElement\n            } = me;\n\n        super.updateEditable(...arguments);\n\n        if (editable === false) {\n            ariaElement.removeAttribute('aria-autocomplete');\n            me.globalTapListener?.();\n            element.classList.add('b-not-editable');\n            EventHelper.on({\n                element : me.nonEditableClickTarget,\n                click   : e => {\n                    // If clicking directly on the input (or chip view in case of non-editable Combo), show the picker\n                    // As label triggers click on its related input, we need to check that we actually clicked the input\n                    const target = document.elementFromPoint(e.clientX, e.clientY);\n\n                    if (e.target === me.nonEditableClickTarget && target === me.nonEditableClickTarget) {\n                        me.onTriggerClick(e);\n                    }\n                },\n                thisObj : me\n            });\n        }\n        else {\n            ariaElement.setAttribute('aria-autocomplete', 'list');\n\n            // In case the field was temporarily set to readOnly=\"true\" to prevent\n            // the intrusive keyboard (This happens when tapping the trigger\n            // and when focused by the container in response to a touch tap),\n            // allow a subsequent touch tap to show the keyboard.\n            me.globalTapListener = GlobalEvents.ion({\n                globaltap : 'showKeyboard',\n                thisObj   : me\n            });\n        }\n    }\n\n    get nonEditableClickTarget() {\n        return this.input;\n    }\n\n    updateElement(element, oldElement) {\n        const\n            result = super.updateElement(element, oldElement),\n            picker = this.peekConfig('picker'),\n            role   = picker ? (picker.isWidget ? picker.role : this.constructor.resolveType(picker.type)?.$meta.config.role) : false;\n\n        this.ariaHasPopup = role;\n        return result;\n    }\n\n    //endregion\n\n    //region Picker\n\n    /* TODO\n    changePicker(picker, was) {\n        if (was) {\n            was.hide();\n            was.destroy();\n        }\n\n        if (picker && !(picker instanceof Widget)) {\n            picker = this.createPicker(picker);\n        }\n\n        return picker;\n    }\n\n    createPicker() {\n        throw new Error('createPicker must be implemented in PickerField subclass implementations');\n    }\n    */\n\n    changePicker(picker, oldPicker) {\n        throw new Error('changePicker(oldPicker, newPicker) must be implemented in PickerField subclass implementations');\n    }\n\n    /**\n     * Iterate over all widgets owned by this widget and any descendants.\n     *\n     * *Note*: Due to this method aborting when the function returns `false`, beware of using short form arrow\n     * functions. If the expression executed evaluates to `false`, iteration will terminate.\n     *\n     * _Due to the {@link #config-picker} config being a lazy config and only being converted to be a\n     * `List` instance just before it's shown, the picker will not be part of the iteration before\n     * it has been shown once_.\n     * @function eachWidget\n     * @param {Function} fn A function to execute upon all descendant widgets.\n     * Iteration terminates if this function returns `false`.\n     * @param {Boolean} [deep=true] Pass as `false` to only consider immediate child widgets.\n     * @returns {Boolean} Returns `true` if iteration was not aborted by a step returning `false`\n     */\n\n    get childItems() {\n        const result = super.childItems;\n\n        if (this._picker) {\n            result.push(this.picker);\n        }\n\n        return result;\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Check if field value is valid\n     * @internal\n     */\n    onEditComplete() {\n        super.onEditComplete();\n        this.autoClosePicker();\n    }\n\n    onElementResize(resizedElement) {\n        const me = this;\n\n        // If the field changes size while the picker is visible, the picker\n        // must be kept in alignment. For example a multiSelect: true\n        // ComboBox with a wrapped ChipView.\n        if (me.pickerVisible) {\n            // Push realignment out to the next AF, because this picker itself may move in\n            // response to the element resize, and the picker must realign *after* that happens.\n            // For example a multiSelect: true ComboBox with a wrapped ChipView inside\n            // a Popup that is aligned *above* an element. When the ChipView gains or\n            // loses height, the Popup must realign first, and then the List must align to the\n            // new position of the ComboBox.\n            me.picker.requestAnimationFrame(me.picker.realign, null, me.picker);\n        }\n\n        super.onElementResize(resizedElement);\n    }\n\n    /**\n     * Allows using arrow keys to open/close list. Relays other keypresses to list if open.\n     * @private\n     */\n    internalOnKeyEvent(event) {\n        const me = this;\n\n        let callSuper = true;\n\n        if (event.type === 'keydown' && !me.disabled && !event.shiftKey && !event.ctrlKey) {\n            if (me.pickerVisible) {\n                const { picker } = me;\n\n                if (event.key === 'Escape') {\n                    event.preventDefault();\n                    event.stopImmediatePropagation();\n                    me.hidePicker();\n\n                    // EC has multiple effects. First stage is hide the picker.\n                    // If we do this, then the superclass's ESC handling must\n                    // not be called.\n                    callSuper = false;\n                }\n                else if (picker.onInternalKeyDown) {\n                    // if picker is visible, give it a shot at the event\n                    picker.onInternalKeyDown(event);\n                }\n                else if (event.key === 'ArrowDown') {\n                    if (picker.focusable) {\n                        picker.focus();\n                    }\n                }\n            }\n            else if (event.key === 'ArrowDown') {\n                // navigator should not react to initial DOWN keypress that triggers the List to show\n                event.stopImmediatePropagation();\n\n                // If we not prevent default handler page might scroll. Siesta cannot reproduce this behavior, have to\n                // leave it untested.\n                // https://github.com/bryntum/support/issues/885\n                event.preventDefault();\n\n                me.onTriggerClick(event);\n            }\n        }\n\n        if (callSuper) {\n            super.internalOnKeyEvent(event);\n        }\n    }\n\n    onFocusIn(e) {\n        const me = this;\n\n        super.onFocusIn(e);\n\n        if (me.autoExpand) {\n            // If expand is configured for focus, minChars should be zero.\n            me.minChars = 0;\n            me.onTriggerClick(e);\n\n            // We should not react twice when the trigger click was the focusin origin\n            me.ignoreTriggerClick = true;\n            me.setTimeout(() => me.ignoreTriggerClick = false, 100);\n        }\n    }\n\n    /**\n     * User clicked trigger icon, toggle list.\n     * @private\n     */\n    onTriggerClick(event) {\n        if (!this.disabled) {\n            // Pass focus flag as true if invoked by a key event\n            this.togglePicker('key' in event);\n        }\n    }\n\n    /**\n     * User clicked on an editable input field. If it's a touch event\n     * ensure that the keyboard is shown.\n     * @private\n     */\n    showKeyboard({ event }) {\n        const input = this.input;\n\n        if (DomHelper.isTouchEvent && DomHelper.getActiveElement(input) === input && event.target === input) {\n            GlobalEvents.suspendFocusEvents();\n            input.blur();\n            input.focus();\n            GlobalEvents.resumeFocusEvents();\n        }\n    }\n\n    //endregion\n\n    //region Toggle picker\n\n    /**\n     * Toggle the {@link #property-picker} visibility\n     * @privateparam {Boolean} [focus] Pass `true` to focus the picker when it gets shown.\n     */\n    togglePicker(focus) {\n        if (this.pickerVisible) {\n            this.hidePicker();\n        }\n        else {\n            this.showPicker(focus);\n        }\n    }\n\n    /**\n     * Show the {@link #property-picker}\n     * @privateparam {Boolean} [focus] Pass `true` to focus the picker when it gets shown.\n     */\n    showPicker(focus) {\n        const\n            me         = this,\n            { picker } = me;\n\n        if (!me.pickerHideShowListenersAdded) {\n            picker.ion({\n                show    : 'onPickerShow',\n                hide    : 'onPickerHide',\n                thisObj : me\n            });\n            me.pickerHideShowListenersAdded = true;\n        }\n\n        DomHelper.setAttributes(me.ariaElement, {\n            'aria-controls' : picker.id,\n            'aria-expanded' : true\n        });\n        picker.autoClose = me.autoClose;\n        picker.show();\n\n        // Not been vetoed\n        if (picker.isVisible) {\n            if (focus) {\n                me.focusPicker();\n            }\n        }\n    }\n\n    onPickerShow() {\n        const me = this;\n\n        me.pickerVisible = true;\n        me.element.classList.add('b-open');\n        me.trigger('togglePicker', { show : true });\n        me.pickerTapOutRemover = GlobalEvents.ion({\n            globaltap : 'onPickerTapOut',\n            thisObj   : me\n        });\n        me.pickerKeyDownRemover = EventHelper.on({\n            element : me.picker.element,\n            keydown : 'onPickerKeyDown',\n            thisObj : me\n        });\n    }\n\n    onPickerHide() {\n        const me = this;\n\n        me.ariaElement.setAttribute('aria-expanded', false);\n        me.pickerVisible = false;\n        me.element.classList.remove('b-open');\n        me.trigger('togglePicker', { show : false });\n        me.pickerTapOutRemover?.();\n        me.pickerKeyDownRemover?.();\n    }\n\n    onPickerTapOut({ event }) {\n        if (!this.containsFocus && !this.owns(event.target)) {\n            this.autoClosePicker();\n        }\n    }\n\n    onPickerKeyDown(event) {\n        if (event.key === 'Tab' && !this.picker.trapFocus) {\n            const\n                activeEl = DomHelper.getActiveElement(this.input),\n                forwardedEvent = new KeyboardEvent('keydown', event);\n\n            // Offer our own element a shot at the TAB event.\n            // Some widgets or plugins may actively navigate.\n            this.input.dispatchEvent(forwardedEvent);\n\n            // Somebody might preventDefault on the synthesized event. We must honour that.\n            // For example if we are the field for a cell Editor, and it started an edit on the adjacent cell.\n            if (forwardedEvent.defaultPrevented) {\n                event.preventDefault();\n            }\n\n            // No listener intervened, point the TAB event at the input,\n            // and user agent default navigation will proceed.\n            if (DomHelper.getActiveElement(this.input) === activeEl) {\n                this.input.focus();\n            }\n            // Some listener *did* navigate, prevent user agent default.\n            else {\n                event.preventDefault();\n            }\n\n            // If listeners have not destroyed us, close our picker.\n            if (!this.isDestroyed) {\n                this.hidePicker();\n            }\n        }\n    }\n\n    //endregion\n\n    //region Visibility\n\n    autoClosePicker() {\n        if (this.autoClose) {\n            this.hidePicker();\n        }\n    }\n\n    /**\n     * Hide picker\n     */\n    hidePicker() {\n        if (this.pickerVisible) {\n            this.picker.hide();\n        }\n    }\n\n    focusPicker() {\n\n    }\n\n    focus() {\n        const input = this.input;\n\n        // If we are focusing an editable PickerField from a touch event, temporarily\n        // set it to readOnly to prevent the showing of the intrusive keyboard.\n        // It's more likely that a user on a touch device will interact with the picker\n        // rather than the input field.\n        // A second touch tap on an already focused input will show the keyboard;\n        // see the showKeyboard method.\n        if (DomHelper.isTouchEvent && this.editable) {\n            input.readOnly = true;\n            this.setTimeout(() => input.readOnly = false, 500);\n        }\n        super.focus();\n    }\n\n    //endregion\n\n}\n","import Widget from './Widget.js';\nimport Store from '../data/Store.js';\nimport TemplateHelper from '../helper/TemplateHelper.js';\nimport DomHelper from '../helper/DomHelper.js';\nimport EventHelper from '../helper/EventHelper.js';\nimport Collection from '../util/Collection.js';\nimport Navigator from '../helper/util/Navigator.js';\nimport StringHelper from '../helper/StringHelper.js';\nimport ArrayHelper from '../helper/ArrayHelper.js';\n\n/**\n * @module Core/widget/List\n */\n\nconst itemRange = document.createRange();\n\n/**\n * Displays a list of items which the user can navigate using the keyboard and select using either pointer gestures or the keyboard.\n * @extends Core/widget/Widget\n *\n * @classType list\n * @inlineexample Core/widget/List.js\n * @widget\n */\nexport default class List extends Widget {\n    //region Config\n    static get $name() {\n        return 'List';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'list';\n    }\n\n    static get configurable() {\n        return {\n            itemCls : 'b-list-item',\n\n            selectedCls : 'b-selected',\n\n            selectIconCls : 'b-icon-check',\n            tag           : 'ul',\n\n            /**\n             * An array of Objects which are converted into records and used to create this\n             * List's {@link #config-store}\n             * @config {Object[]}\n             */\n            items : null,\n\n            /**\n             * The model field to render into each list item\n             * @config {String}\n             * @default\n             */\n            displayField : 'text',\n\n            /**\n             * A {@link Core.data.Store} which provides the records which map to List items. Each record is passed through the\n             * {@link #config-itemTpl} to produce the DOM structure of the List. May be generated from an array of {@link #config-items}.\n             *\n             * The store may also be configured as an array of records, or record data objects from which records may be constructed.\n             * @config {Object|Object[]|Core.data.Store}\n             */\n            store : null,\n\n            navigator : true,\n\n            scrollable : {\n                overflowX : false,\n                overflowY : true\n            },\n\n            itemsFocusable : true,\n\n            /**\n             * Configure as `true` to allow multi select and add checkboxes to the items\n             * @config {Boolean}\n             * @default\n             */\n            multiSelect : false,\n\n            /**\n             * Select/deselect all if `CMD`/`CTRL` is pressed when clicking\n             * @config {Boolean}\n             * @default false\n             */\n            toggleAllIfCtrlPressed : false,\n\n            /**\n             * Set to `true` to add a \"Select all\" item to the list to select/unselect all items at once.\n             * Only applies when {@link #config-multiSelect} mode is enabled.\n             * @config {Boolean|String}\n             * @default false\n             */\n            selectAllItem : false,\n\n            /**\n             * Template function which, when passed a record, returns the textual HTML for that item. Defaults to a\n             * function returning the value of the record´s {@link #config-displayField}\n             * @config {Function} itemTpl\n             * @param {Core.data.Model} record The record\n             */\n            itemTpl(record) {\n                let text = StringHelper.encodeHtml(record[this.displayField]);\n\n                if (text == null || text === '') {\n                    // Make sure we have some content to fill the item element and have equal height for all items\n                    text = '&nbsp;';\n                }\n\n                return text;\n            },\n\n            /**\n             * Configure this as a function or the name of a function, which when passed a record in the\n             * list, returns a style string to apply to its list item.\n             * @config {Function|String} getItemStyle\n             * @param {Core.data.Model} record The record\n             */\n            getItemStyle : null,\n\n            /**\n             * Configure this as a function or the name of a function, which when passed a record in the\n             * list, returns a CSS class name string to apply to its list item.\n             * @config {Function|String} getItemCls\n             * @param {Core.data.Model} record The record\n             */\n            getItemCls : null,\n\n            /**\n             * Template function which is passed a group record and the uppercased group field name. The text returned\n             * will be rendered as the group header.\n             * @config {Function} groupHeaderTpl\n             * @param {Core.data.Model} record The record\n             * @param {String} groupName The current group name\n             */\n            groupHeaderTpl : (record, groupName) => {\n                let name = StringHelper.encodeHtml(groupName);\n\n                if (name == null || name === '') {\n                    // Make sure we have some content to fill the item element and have equal height for all items\n                    name = '&nbsp;';\n                }\n                return name;\n            },\n\n            /**\n             * Configure as `true` to allow selecting groups (all the group child records will be toggled). Only\n             * applicable when the store is grouped.\n             * @config {Boolean}\n             * @default\n             */\n            allowGroupSelect : true,\n\n            /**\n             * A {@link Core.util.Collection}, or Collection config object to use to contain this List's selected\n             * records.\n             *\n             * Or, an array encapsulating the initial selection which this List is to have upon Store load. This may be\n             * an array of `id`s , or an array of objects with an `id` property:\n             *\n             * ```javascript\n             * new List({\n             *     // initially select record IDs 1 and 5 when store loads\n             *     selected : [1, 5]\n             * });\n             * ```\n             * @config {Object[]|Number[]|String[]|Core.util.Collection|CollectionConfig}\n             */\n            selected : {\n                $config : 'nullify',\n                value   : {}\n            },\n\n            /**\n             * Configure as `true` to activate items on mouseover. This is used by the Combo\n             * field when using a List as its dropdown.\n             * @config {Boolean}\n             */\n            activateOnMouseover : null,\n\n            role : 'listbox',\n\n            keyMap : {\n                'Ctrl+a' : 'selectAll'\n            }\n        };\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * User activated an item in the list either by pointer or keyboard.\n     * The active record, list item index, and the triggering event are passed.\n     * @event item\n     * @param {Core.data.Model} record Activated record\n     * @param {Number} index List item index\n     * @param {Event} event Triggering event\n     */\n\n    /**\n     * User going to activate an item in the list either by pointer or keyboard.\n     * The active record, list item index, and the triggering event are passed.\n     * It is preventable by returning `false`\n     * @event beforeItem\n     * @preventable\n     * @param {Core.data.Model} record Activated record\n     * @param {Number} args List item index\n     * @param {Event} event Triggering event\n     */\n\n    //endregion\n\n    construct(config, ...args) {\n        const me = this;\n\n        // We can be created from a raw array. It becomes our items which we translate to a Store.\n        if (Array.isArray(config)) {\n            config = {\n                items : config\n            };\n        }\n\n        super.construct(config, ...args);\n\n        const\n            { element }   = me,\n            { classList } = element;\n\n        if (me.multiSelect) {\n            classList.add('b-multiselect');\n        }\n        if (me.store?.count) {\n            me.refresh();\n        }\n        else {\n            classList.add('b-empty');\n        }\n\n        EventHelper.on({\n            element,\n            delegate  : me.itemSelector,\n            mouseover : 'onMouseOver',\n            click     : 'onClick',\n            thisObj   : me\n        });\n    }\n\n    doDestroy() {\n        this.detachListeners('store');\n        this.navigator?.destroy();\n\n        super.doDestroy();\n    }\n\n    onFocusIn(e) {\n        this.restoreActiveItem(e._target?.closest(this.itemSelector));\n        super.onFocusIn(e);\n    }\n\n    contentTpl() {\n        const\n            me = this,\n            allRecordsTpl = me.store.records.map((record, i) => me.itemWrapperTpl(record, i));\n\n        if (me.multiSelect && me.selectAllItem !== false) {\n            allRecordsTpl.unshift(me.selectAllItemTpl());\n        }\n        return TemplateHelper.tpl`${allRecordsTpl}`;\n    }\n\n    itemWrapperTpl(record, i) {\n        const\n            {\n                selected,\n                getItemStyle\n            }     = this,\n            style = getItemStyle ? `style=\"${this.callback(getItemStyle, this, [record])}\"` : '';\n\n        return TemplateHelper.tpl`<li ${style} class=\"${this.getItemClasses(record, i)}\" role=\"option\" aria-selected=\"${selected.includes(record)}\" data-index=\"${i}\" data-id=\"${StringHelper.encodeHtml(record.id)}\" ${this.itemsFocusable ? 'tabindex=\"-1\"' : ''}>${this.itemContentTpl(record, i)}</li>`;\n    }\n\n    itemContentTpl(record, i) {\n        if ('groupRowFor' in record.meta) {\n            return this.groupHeaderTpl(record, StringHelper.capitalize(record.groupChildren[0][record.meta.groupField]));\n        }\n        return `${this.itemIconTpl(record, i)}${this.itemTpl(record, i)}`;\n    }\n\n    itemIconTpl(record, i) {\n        return this.multiSelect ? `<i class=\"b-selected-icon b-icon ${this.selectIconCls}\"></i>` : '';\n    }\n\n    selectAllItemTpl() {\n        const selectedCls = this.allSelected ? 'b-selected' : '';\n\n        return `<li class=\"${this.itemCls} b-select-all-item ${selectedCls}\" data-noselect data-select-all data-id=\"select-all\">${this.itemIconTpl({})}<div>${this.optionalL('Select All')}</div></li>`;\n    }\n\n    getItemClasses(record) {\n        const\n            me             = this,\n            { getItemCls } = me,\n            activeItem     = me._navigator?.activeItem,\n            isActive       = activeItem?.dataset.id == record.id,\n            groupHeaderCls = 'groupRowFor' in record.meta ? 'b-list-item-group-header' : '',\n            isSelected     = me.selected.includes(record),\n            itemCls        = getItemCls ? this.callback(getItemCls, this, [record]) : ''; ;\n\n        return `${me.itemCls} ${record.cls || ''} ${itemCls} ${isSelected ? me.selectedCls : ''} ${isActive ? me.navigator.focusCls : ''} ${groupHeaderCls}`;\n    }\n\n    onBeforeStoreLoad() {\n        this.mask(this.L('L{loading}'));\n    }\n\n    onAfterStoreRequest() {\n        this.unmask();\n    }\n\n    onStoreChange({ source : store, action, records, record, changes }) {\n        const\n            me           = this,\n            { selected } = me;\n\n        switch (action) {\n            // We must keep the selected Collection in sync with the new dataset.\n            // Some selected items may not be part of the new dataset.\n            // If some items with the same id *are* in the new dataset, the\n            // selected Collection must hold the new instance.\n            case 'dataset':\n            {\n                selected.match(store.storage, !me._externallyOwnedSelection);\n                break;\n            }\n            case 'remove':\n                selected.remove(records);\n                break;\n            case 'clear':\n                me.deselectAll();\n                break;\n            case 'update': {\n                const { id } = changes;\n\n                // update elements data-id when changing id, to allow refreshItem to find correct element\n                if (id) {\n                    DomHelper.setAttributes(\n                        me.contentElement.querySelector(StringHelper.encodeAttributeSelector(`data-id`, id.oldValue)),\n                        {\n                            'data-id' : id.value\n                        });\n                }\n\n                me.refreshItem(record);\n                return;\n            }\n        }\n\n        me.refresh();\n    }\n\n    onStoreRefresh() {\n        this.refresh();\n    }\n\n    refresh() {\n        const me = this;\n\n        if (me.isVisible) {\n            const activeItem = me.navigator?.activeItem;\n\n            // Ensure that the next call to refresh when not visible queues a refresh\n            me.paintListener = null;\n\n            // IMPORTANT! DO NOT INLINE!\n            // This is a fix for issue: https://github.com/bryntum/support/issues/2171\n            // Long story short: DomHelper returns document-fragment and first time we insert node, nothing is actually\n            // inserted if (and only) fragment is not stored as a variable.\n            const node = DomHelper.createElementFromTemplate(me.contentTpl(), { fragment : true });\n            me.clearItems().insertNode(node);\n\n            // The item elements will be all new, so restore the active item.\n            // Navigator will reacquire it by its id.\n            if (activeItem) {\n                me.restoreActiveItem(activeItem);\n            }\n            me.refreshCount = (me.refreshCount || 0) + 1;\n            me.element.classList[me.store.count > 0 ? 'remove' : 'add']('b-empty');\n            me.updateSelectAllState();\n        }\n        // Only queue a refresh if not already queued\n        else if (!me.paintListener) {\n            me.paintListener = me.ion({\n                paint   : 'refresh',\n                thisObj : me,\n                once    : true\n            });\n        }\n    }\n\n    clearItems() {\n        const me = this,\n            firstItem = me.contentElement.querySelector(me.itemSelector),\n            lastChild = me.contentElement.lastChild;\n\n        if (firstItem) {\n            // Can't use :last-of-type when other elements of same type may be present.\n            // Have to pluck the last element of the NodeList.\n            const items = me.contentElement.querySelectorAll(`${me.itemSelector}:not(.b-mask)`);\n\n            itemRange.setStartBefore(firstItem);\n            itemRange.setEndAfter(items[items.length - 1]);\n            itemRange.deleteContents();\n        }\n        else {\n            // Allow a static set of elements to be at the top of the list\n            if (lastChild) {\n                itemRange.setStartAfter(lastChild);\n                itemRange.setEndAfter(lastChild);\n            }\n            else {\n                itemRange.setStart(me.contentElement, 0);\n                itemRange.setEnd(me.contentElement, 0);\n            }\n        }\n        return itemRange;\n    }\n\n    refreshItem(...records) {\n        for (const record of records) {\n            const item = this.getItem(record);\n\n            // Maybe a record which is filtered out announces a change.\n            // There will be no item.\n            if (item) {\n                const index = this.store.indexOf(record),\n                    newItem = DomHelper.createElementFromTemplate(this.itemWrapperTpl(record, index));\n\n                DomHelper.sync(newItem, item);\n            }\n        }\n    }\n\n    getItem(recordOrId) {\n        // Cannot use truthiness test because index zero may be passed.\n        if (recordOrId != null) {\n            if (typeof recordOrId === 'number') {\n                // -ve index means indexing from beyond the end.\n                // So -1 gets the last item, -2 the penultimate etc\n                return this.contentElement.querySelector(`[data-index=\"${recordOrId < 0 ? this.store.count + recordOrId : recordOrId}\"]`);\n            }\n            else if (recordOrId.nodeType === Element.ELEMENT_NODE) {\n                recordOrId = recordOrId.dataset.id;\n            }\n            // TODO: make navigator works for select all list item\n            if (recordOrId?.id != null) {\n                recordOrId = recordOrId.id;\n            }\n            return this.contentElement.querySelector(StringHelper.encodeAttributeSelector(`data-id`, recordOrId));\n        }\n    }\n\n    /**\n     * Searches up from the specified element for a list item and returns the associated record.\n     * @param {HTMLElement} element Element somewhere within a list item element\n     * @returns {Core.data.Model} Record for the item\n     */\n    getRecordFromElement(element) {\n        if (element.target) {\n            element = element.target;\n        }\n        element = element.closest(this.itemSelector);\n\n        return this.store.getAt(parseInt(element.dataset.index));\n    }\n\n    //region getters/setters\n\n    /**\n     * May be *set* as an array of Objects which are converted into records and used to create this\n     * List's {@link #config-store}\n     * @member {Object[]} items\n     */\n    updateItems(items) {\n        const me = this;\n\n        if (me.store && me.store.autoCreated) {\n            me.store.destroy();\n        }\n\n        me.store = Store.getStore(items);\n    }\n\n    updateDisabled(disabled) {\n        super.updateDisabled(...arguments);\n\n        this.navigator && (this.navigator.disabled = disabled);\n    }\n\n    changeSelected(selected, oldSelected) {\n        if (selected) {\n            let initialSelection;\n\n            // We convert incoming selected block to a Collection.\n            // We may be configured with an initial selection array\n            if (selected.isCollection) {\n                this._externallyOwnedSelection = true;\n            }\n            else {\n                if (Array.isArray(selected)) {\n                    initialSelection = selected;\n                    selected = {};\n                }\n                else if (selected.values) {\n                    initialSelection = selected.values;\n                    selected = {\n                        ...selected,\n                        values : []\n                    };\n                }\n                selected = new Collection(selected);\n            }\n            selected.ion({\n                change  : 'onSelectionChange',\n                thisObj : this\n            });\n\n            // We will inject any configured initial selection array only after\n            // the store has been loaded. Set the property even if it's zero length\n            // because it acts as a flag that an initial selection was requested.\n            this.initialSelection = initialSelection;\n        }\n        else {\n            oldSelected?.destroy();\n        }\n        return selected;\n    }\n\n    get itemSelector() {\n        return `.${this.itemCls}`;\n    }\n\n    /**\n     * Get the collection of selected records\n     * @property {Core.util.Collection}\n     * @readonly\n     */\n    get selected() {\n        return this._selected;\n    }\n\n    /**\n     * Get the backing store, a {@link Core.data.Store} holding the records used to generate list items\n     * @property {Core.data.Store}\n     * @readonly\n     */\n    get store() {\n        // Ensure any configured items is processed into a store before we try to return it.\n        this.getConfig('items');\n\n        return this._store;\n    }\n\n    changeStore(store) {\n        const me = this;\n\n        if (!(store instanceof Store)) {\n            if (Array.isArray(store)) {\n                store = {\n                    data : store\n                };\n            }\n            store = new Store(store);\n        }\n\n        me.detachListeners('store');\n\n        if (store) {\n            const storeListeners = {\n                name    : 'store',\n                change  : 'onStoreChange',\n                refresh : 'onStoreRefresh',\n                thisObj : me\n            };\n\n            if (store.readUrl) {\n                storeListeners.beforeLoad   = 'onBeforeStoreLoad';\n                storeListeners.afterRequest = 'onAfterStoreRequest';\n            }\n            if (store.isGrouped) {\n                me.element.classList.add('b-grouped');\n                storeListeners.groupchange = 'onStoreRefresh';\n            }\n\n            store.ion(storeListeners);\n        }\n\n        return store;\n    }\n\n    updateStore(store) {\n        const { initialSelection } = this;\n\n        // If our selected config contained an initial selection array,\n        // apply it when the store is loaded.\n        if (initialSelection?.length) {\n            if (store.count) {\n                this.select(initialSelection);\n            }\n            else {\n                store.ion({\n                    refresh : () => this.select(initialSelection),\n                    once    : true\n                });\n            }\n        }\n\n        this.refresh();\n    }\n\n    changeNavigator(navigator, oldNavigator) {\n        const me = this,\n            { element } = me;\n\n        if (element) {\n            navigator = Navigator.reconfigure(oldNavigator, navigator ? Navigator.mergeConfigs({\n                ownerCmp       : me,\n                disabled       : me.disabled,\n                target         : element,\n                keyEventTarget : element\n            }, navigator) : null, me);\n\n            // This widget is responsible for relaying keyboard events into the navigator\n            // So it must be able to receive focus if its items do not receive focus.\n            if (navigator?.keyEventTarget === element && !me.itemsTabbable) {\n                element.tabIndex = 0;\n            }\n        }\n\n        return navigator;\n    }\n\n    get minAlignHeight() {\n        const lastItem = this.element.lastElementChild,\n            minHeight = this.minHeight;\n\n        // No minHeight specified, always defer to the items height\n        if (minHeight != null) {\n            return lastItem ? Math.min(lastItem.offsetTop + lastItem.offsetHeight, minHeight) : 0;\n        }\n    }\n\n    //endregion\n\n    //region Hide/Show\n\n    alignTo(...args) {\n        // When aligning, if the items total height is less than minHeight, use that.\n        super.minHeight = this.minAlignHeight;\n        super.alignTo(...args);\n    }\n\n    hide(...args) {\n        this.navigator && (this.navigator.activeItem = null);\n        return super.hide(...args);\n    }\n\n    show() {\n        const\n            { refreshCount } = this,\n            { previousActiveItem } = this.navigator;\n\n        // Restore the configured minHeight\n        super.minHeight = this._minHeight;\n\n        const retVal = super.show(...arguments);\n\n        // If no refresh on paint took place, we need to restore the activeItem.\n        // Refresh does that itself.\n        if (this.refreshCount === refreshCount) {\n            this.restoreActiveItem(previousActiveItem, true);\n        }\n\n        return retVal;\n    }\n\n    /**\n     * Sets the passed record as the current focused record for keyboard navigation and selection purposes.\n     * @param {Core.data.Model} activeItem The item to highlight as the active (\"focused\") item.\n     * @param {String|Boolean} [block='nearest'] The block scroll specification to scroll\n     * the item into view. Defaults to `'nearest'` which means a minimal scroll, only if\n     * the item is actually out of view. Passing `true` is for when the List is aligned\n     * to a picker and the selected item should be scrolled to be close to the picker,\n     * however that is aligned. See `Combo.showPicker` for usage.\n     * @internal\n     */\n    restoreActiveItem(activeItem = this.navigator.previousActiveItem, block = 'nearest') {\n        const\n            me = this,\n            { navigator, lastAlignSpec } = me;\n\n        // Zero may be passed to select first item, so cannot use truthiness.\n        // This won't mean *clear* the active item if any. Falsy means\n        // nothing to restore so leave it as is.\n        if (activeItem != null) {\n            if (typeof block !== 'string') {\n                const alignZone = lastAlignSpec ? lastAlignSpec.zone : 1;\n\n                // Scroll item into view appropriately, meaning closest to any align target.\n                // Align zones are T,R,B,L => 0,1,2,3\n                // If 1 or 3 (right or left), align nearest.\n                // if 0 (above) align end.\n                // else, we're below so align start.\n                block = alignZone & 1 ? 'nearest' : alignZone ? 'start' : 'end';\n            }\n\n            activeItem = me.getItem(activeItem);\n\n            if (activeItem && !me.disabled) {\n                // If we are aligned to a target, first, scroll the required item to the optimal\n                // position to avoid Navigator's default minimal scroll to block: 'nearest'.\n                // If we are aligned below a combo, move the point of interest to the top.\n                // If we are aligned above a combo, move the point of interest to the bottom.\n                me.scrollable.scrollIntoView(activeItem, {\n                    block\n                });\n\n                navigator.activeItem = activeItem;\n            }\n        }\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Focuses list items on hover.\n     * @private\n     */\n    onMouseOver(event) {\n        const me        = this,\n            itemElement = event.currentTarget;\n\n        // Activate soon in case they're moving fast over items.\n        if (!DomHelper.isTouchEvent && itemElement && me.navigator && me.activateOnMouseover) {\n            me.setTimeout({\n                fn                : 'handleMouseOver',\n                delay             : 30,\n                args              : [itemElement],\n                cancelOutstanding : true\n            });\n        }\n    }\n\n    handleMouseOver(itemElement) {\n        this.navigator.activeItem = itemElement;\n    }\n\n    /**\n     * Selects list items on click.\n     * @private\n     */\n    onClick(event) {\n        const itemElement = event.target.closest(this.itemSelector);\n\n        if (itemElement) {\n            this.onItemClick(itemElement, event);\n        }\n    }\n\n    /**\n     * Key events which are not navigation are delegated up to here by the Navigator\n     * @private\n     */\n    onInternalKeyDown(event) {\n        const me     = this,\n            active   = me.navigator.activeItem;\n\n        if (me.disabled) {\n            return;\n        }\n\n        switch (event.key) {\n            case ' ':\n                // If it's an input field that's providing events, allow it to process space.\n                // Otherwise, it falls through and is processed the same as ENTER to make a click.\n                if (event.target.nodeName.toUpperCase() === 'INPUT' && !event.target.readOnly) {\n                    break; // eslint-disable-line\n                }\n            case 'Enter': // eslint-disable-line\n                if (active) {\n                    this.onItemClick(active, event);\n\n                    // Stop the keydown from bubbling.\n                    // And stop it from creating a keypress event.\n                    // No further action should be taken after item selection.\n                    event.stopImmediatePropagation();\n                    event.preventDefault();\n                }\n        }\n    }\n\n    //endregion\n\n    onItemClick(item, event) {\n        const\n            me    = this,\n            index = parseInt(item.dataset.index);\n\n        let record = me.store.getAt(index);\n\n        if (me.disabled || me.trigger('beforeItem', { item, record, index, event, userAction : true }) === false) {\n            return;\n        }\n\n        me._isUserAction = true;\n\n        if (me.allowGroupSelect || (record && !record.isSpecialRow)) {\n            // Clicking on any element with the data-noselect attribute means no selection\n            if (!item.contains(event.target.closest('[data-noselect]'))) {\n                const\n                    selected   = me.selected;\n\n                let isSelected = selected.includes(record);\n\n                if (me.multiSelect) {\n                    if (me.toggleAllIfCtrlPressed && event.ctrlKey) {\n                        record = me.store.records;\n                    }\n                    else if (me.allowGroupSelect && record.isSpecialRow) {\n                        isSelected = !record.groupChildren.some(rec => !selected.includes(rec));\n                        record = record.groupChildren;\n                    }\n                    selected[isSelected ? 'remove' : 'add'](record);\n                }\n                else {\n                    selected.splice(0, selected.count, record);\n                }\n            }\n            else if (item.contains(event.target.closest('[data-select-all]'))) {\n                me.onSelectAllClick(item, event);\n            }\n        }\n\n        me.lastClicked = record;\n\n        me.trigger('item', {\n            item,\n            record,\n            index,\n            event,\n            userAction : true\n        });\n\n        me._isUserAction = false;\n    }\n\n    /**\n     * Handles items being added or removed from the selected Collection\n     * @param {Object} changeEvent\n     * @private\n     */\n    onSelectionChange({ action, removed, added, replaced }) {\n        const\n            me = this,\n            {\n                selectedCls,\n                unselectedCls\n            } = me;\n\n        let record, item;\n\n        if (action === 'clear') {\n            for (item of me.element.querySelectorAll(`.${selectedCls}`)) {\n                item.classList.remove(selectedCls);\n                item.setAttribute('aria-selected', false);\n                unselectedCls && item.classList.remove(unselectedCls);\n            }\n        }\n        else if (action !== 'replaceValues') {\n            for (record of removed) {\n                item = me.getItem(record);\n                if (item) {\n                    item.classList.remove(selectedCls);\n                    item.setAttribute('aria-selected', false);\n                }\n            }\n            for (record of added) {\n                item = me.getItem(record);\n                if (item) {\n                    item.classList.add(selectedCls);\n                    item.setAttribute('aria-selected', true);\n                }\n            }\n        }\n\n        me.selectAllItem && me.updateSelectAllState();\n    }\n\n    onSelectAllClick(item) {\n        const checked = item.classList.contains(this.selectedCls);\n\n        if (checked) {\n            this.deselectAll();\n        }\n        else {\n            this.selectAll();\n        }\n    }\n\n    updateSelectAllState() {\n        this.element.querySelector('.b-select-all-item')?.classList.toggle(this.selectedCls, this.allSelected);\n    }\n\n    /**\n     * Yields `true` if all the available items are selected.\n     * @property {Boolean}\n     * @readonly\n     */\n    get allSelected() {\n        const { selected, store } = this;\n\n        return selected.count && (store.isFiltered ? store.records.every(r => selected.includes(r)) : store.count === selected.count);\n    }\n\n    /**\n     * Selects all items in this list.\n     * @category Selection\n     */\n    selectAll(keyEvent) {\n        const me = this;\n\n        // A programmatic selectAll must work. A UI-invoked call must honour multiSelect:false\n        if (me.multiSelect || !keyEvent) {\n            me.selected.add(me.store.records);\n            if (keyEvent && !me.navigator.activeItem) {\n                me.navigator.activeItem = me.getItem(-1);\n            }\n        }\n    }\n\n    /**\n     * Deselects all selected items\n     * @category Selection\n     */\n    deselectAll() {\n        this.selected.clear();\n    }\n\n    /**\n     * Selects the passed item(s).\n     *\n     * An item to select may be the `id` of a record in this List's {@link #config-store}, or\n     * it may be an object with an `id` __property__ which is the `id` of a record in this List's\n     * {@link #config-store} (For example one of the records).\n     * @param {String|String[]|Number|Number[]|Object|Object[]} toSelect\n     * @category Selection\n     */\n    select(toSelect) {\n        const\n            { store }      = this,\n            { modelClass } = store;\n\n        toSelect = ArrayHelper.asArray(toSelect).reduce((v, c) => {\n            c = store.getById(modelClass.asId(c));\n            if (c) {\n                v.push(c);\n            }\n            return v;\n        }, []);\n\n        this.selected.add(toSelect);\n    }\n\n    /**\n     * Deselects the passed item(s).\n     *\n     * An item to deselect may be the `id` of a record in this List's {@link #config-store}, or\n     * it may be an object with an `id` __property__ which is the `id` of a record in this List's\n     * {@link #config-store} (For example one of the records).\n     * @param {String|String[]|Number|Number[]|Object|Object[]} toSelect\n     * @category Selection\n     */\n    deselect(toDeselect) {\n        const { modelClass } = this.store;\n\n        toDeselect = ArrayHelper.asArray(toDeselect).reduce((v, c) => {\n            c = this.selected.get(modelClass.asId(c));\n            if (c) {\n                v.push(c);\n            }\n            return v;\n        }, []);\n\n        this.selected.remove(toDeselect);\n    }\n}\n\n// Register this widget type with its Factory\nList.initClass();\n\nList.prototype.navigatorClass = Navigator;\n","import List from './List.js';\nimport TemplateHelper from '../helper/TemplateHelper.js';\n\n/**\n * @module Core/widget/ChipView\n */\n\n/**\n * Displays an inline series of Chips which may be navigated to, selected and deleted.\n * @extends Core/widget/List\n *\n * @classType chipview\n * @widget\n */\nexport default class ChipView extends List {\n    //region Config\n    static get $name() {\n        return 'ChipView';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'chipview';\n    }\n\n    static get configurable() {\n        return {\n            itemCls : 'b-chip',\n\n            /**\n             * Configure as `true` to allow multi select and allow clicking and key navigation\n             * to select multiple chips.\n             * @config {Boolean}\n             * @default\n             */\n            multiSelect : false,\n\n            /**\n             * Configure as `true` to display a clickable close icon after the {@link Core.widget.List#config-itemTpl}.\n             * When tapped, the configured {@link #config-closeHandler} is called passing the\n             * associated record.\n             *\n             * Chips may also be selected using the `LEFT` and `RIGHT` arrows (And the `Shift` key to\n             * do multiple, contiguous election). Pressing the `DELETE` or `BACKSPACE` key passes the\n             * selected records to the {@link #config-closeHandler}\n             * @config {Boolean}\n             * @default\n             */\n            closable : true,\n\n            /**\n             * A template function, which, when passed a record, returns the markup which\n             * encapsulates a chip's icon to be placed before the {@link Core.widget.List#config-itemTpl}.\n             * @config {Function}\n             */\n            iconTpl : null,\n\n            /**\n             * If {@link #config-closable} is `true`, this is the name of a callback function\n             * to handle what the \"close\" action means.\n             * @config {String|Function}\n             */\n            closeHandler : null\n        };\n    }\n\n    itemContentTpl(record, i) {\n        const me = this;\n\n        return TemplateHelper.tpl`${me.iconTpl ? this.iconTpl(record) : ''}\n            ${me.itemTpl(record, i)}\n            ${me.closable ? '<div class=\"b-icon b-close-icon b-icon-clear\" data-noselect></div>' : ''}`;\n    }\n\n    onInternalKeyDown(event) {\n        const me = this;\n\n        if (me.closable && me.selected.count && (event.key === 'Delete' || event.key === 'Backspace')) {\n            me.callback(me.closeHandler, me.owner, [me.selected.values, { isKeyEvent : true }]);\n        }\n        else {\n            super.onInternalKeyDown(event);\n        }\n    }\n\n    updateClosable(closable) {\n        this.element.classList[closable ? 'add' : 'remove']('b-chips-closable');\n        this.navigator && (this.navigator.disabled = !closable);\n\n        if (!this.isConfiguring) {\n            this.refresh();\n        }\n    }\n\n    onClick(event) {\n        const\n            me   = this,\n            item = event.target.closest(`.${me.itemCls}`);\n\n        if (me.closable && event.target.classList.contains('b-close-icon')) {\n            const record = me.store.getAt(parseInt(item.dataset.index));\n\n            me.callback(me.closeHandler, me.owner, [[record]]);\n        }\n        else {\n            super.onClick(event);\n        }\n    }\n}\n\n// Register this widget type with its Factory\nChipView.initClass();\n","import Store from '../data/Store.js';\nimport AjaxStore from '../data/AjaxStore.js';\nimport Model from '../data/Model.js';\nimport Filter from '../util/CollectionFilter.js';\nimport PickerField from './PickerField.js';\nimport ChipView from './ChipView.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\nimport Collection from '../util/Collection.js';\nimport DomHelper from '../helper/DomHelper.js';\nimport DomSync from '../helper/DomSync.js';\nimport EventHelper from '../helper/EventHelper.js';\nimport Navigator from '../helper/util/Navigator.js';\nimport List from './List.js';\nimport StringHelper from '../helper/StringHelper.js';\nimport ArrayHelper from '../helper/ArrayHelper.js';\n\nconst\n    errorFieldRequired  = 'L{Field.fieldRequired}',\n    errorValidateFilter = 'L{Field.validateFilter}',\n    errorRecordNotCommitted = 'L{Combo.recordNotCommitted}';\n\n/**\n * @module Core/widget/Combo\n */\n\n/**\n * Combo (dropdown) widget. Consists of a text field with a trigger icon, which displays a List. Can be\n * populated from a Store.\n *\n * This field can be used as an {@link Grid/column/Column#config-editor} for the {@link Grid/column/Column}.\n *\n * Please be aware that when populating the Combo with objects or records you have to configure {@link #config-valueField} and {@link #config-displayField}\n * to point to the correct field names in your data.\n *\n * ### Basic scenarios\n * {@inlineexample Core/widget/Combo.js vertical}\n *\n * ### Multiselect + grouped list\n *\n * {@inlineexample Core/widget/ComboMultiselect.js}\n *\n * ## Snippet: Loading data from simple string array\n * ```javascript\n * const combo = new Combo({\n *     items       : ['Small', 'Smaller', 'Really small', 'Tiny'],\n *     placeholder : 'Pick size of diamond for ring'\n * });\n *```\n *\n * ## Snippet: Loading data from array with item configs\n * ```javascript\n * const combo = new Combo({\n *     items : [{ value: 'a', text: 'First' }, { value: 'z', text: 'Last' }]\n * });\n *```\n *\n * ## Snippet: Loading data from store\n * ```javascript\n * const combo = new Combo({\n *     store        : memberStore,\n *     valueField   : 'id',\n *     displayField : 'name'\n * });\n *```\n *\n * ## Snippet: Grouped list\n * To group the list contents, simply group your store using {@link Core.data.mixin.StoreGroup#config-groupers}. You\n * can decide if clicking a header should toggle all group children (or if it should do nothing) with the\n * {@link Core.widget.List#config-allowGroupSelect} flag.\n * ```javascript\n * const combo = new Combo({\n *     width            : 400,\n *     displayField     : 'name',\n *     valueField       : 'id',\n *     multiSelect      : true,\n *     picker : {\n *         allowGroupSelect : false,\n *         // Show icon based on group name\n *         groupHeaderTpl   : (record, groupName) => `\n *             <i class=\"icon-${groupName}\"></i>${groupName}\n *         `\n *     },\n *     value : [1, 4],\n *     store : new Store({\n *         fields : [\n *             'type'\n *         ],\n *         groupers : [\n *             { field : 'type', ascending : true }\n *         ],\n *         data : [\n *             { id : 1, name : 'pizza', type : 'food' },\n *             { id : 2, name : 'bacon', type : 'food' },\n *             { id : 3, name : 'egg', type : 'food' },\n *             { id : 4, name : 'Gin tonic', type : 'drinks' },\n *             { id : 5, name : 'Wine', type : 'drinks' },\n *             { id : 6, name : 'Beer', type : 'drinks' }\n *         ]\n *     })\n * });\n *```\n *\n * ## Shared Stores\n * More than one Combo may share a Store if they are required to draw their values from a shared\n * data set.\n *\n * The only limitation here is that the characteristics of the filter that is applied to the store\n * by typing are inherited from the __first__ combo. So for example, all would be\n * {@link #config-caseSensitive} or all case-insensitve, and all would use the same\n * {@link #config-filterOperator}.\n *\n * In the example below, all three email address inputs use the same store of recipients.\n *\n * {@inlineexample Core/widget/EmailMultiselect.js}\n *\n * This may be operated using the keyboard. `ArrowDown` opens the picker, ann then `ArrowDown` and\n * `ArrowUp` navigate the picker's options. `Enter` selects an active option in the picker. `Escape`\n * closes the picker.\n *\n * @extends Core/widget/PickerField\n * @classType combo\n * @inputfield\n */\nexport default class Combo extends PickerField {\n\n    // Do not remove. Assertion strings for Localization sanity check.\n    // 'L{Field.fieldRequired}'\n    // 'L{Field.validateFilter}'\n    // 'L{recordNotCommitted}\n\n    //region Config\n    static get $name() {\n        return 'Combo';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'combo';\n    }\n\n    // Factoryable type aliases\n    static get alias() {\n        return 'combobox,dropdown';\n    }\n\n    static delayable = {\n        filterOnInput : 0\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Optionally a {@link Core.util.CollectionFilter Filter} config object which the combo should use for\n             * filtering using the typed value.\n             * This may use a `filterBy` property to test its `value` against any field in the passed record.\n             * ```javascript\n             * {\n             *     type          : 'combo',\n             *     store         : myStore,\n             *     primaryFilter : {\n             *         filterBy(record) {\n             *             if (this.value == null) {\n             *                 return true;\n             *             }\n             *             const value = this.value.toLowerCase();\n             *\n             *             // Match typed value with forename or surname\n             *             return record.forename.toLowerCase().startsWith(value)\n             *                 || record.surname.toLowerCase().startsWith(value);\n             *         }\n             *     }\n             * }\n             * ```\n             * @config {CollectionFilterConfig}\n             */\n            primaryFilter : {},\n\n            picker : {\n                type                : 'list',\n                floating            : true,\n                scrollAction        : 'realign',\n                itemsFocusable      : false,\n                activateOnMouseover : true,\n                align               : {\n                    align    : 't0-b0',\n                    axisLock : true\n                },\n                maxHeight  : 324,\n                scrollable : {\n                    overflowY : true\n                },\n                autoShow     : false,\n                focusOnHover : false\n            },\n\n            /**\n             * Configure as `true` to allow selection of multiple values from the dropdown list.\n             *\n             * Each value is displayed as a \"Chip\" to the left of the input area. Chips may be\n             * selected using the `LEFT` and `RIGHT` arrow keys and deleted using the `DELETE` key\n             * to remove values from the field. There is also a clickable close icon in each chip.\n             *\n             * Use {@link Core.widget.List#config-toggleAllIfCtrlPressed} to implement \"select all\" behaviour.\n             *\n             * ```javascript\n             * {\n             *     type   : 'combo',\n             *     store  : myStore,\n             *     picker : {\n             *         toggleAllIfCtrlPressed : true\n             *     }\n             * }\n             * ```\n             *\n             * @config {Boolean}\n             * @default false\n             */\n            multiSelect : null,\n\n            /**\n             * Rows to display in the dropdown (list items).\n             *\n             * If an object, the property names provide the {@link #config-value} for the Combo, and\n             * the property values provide the displayed test in the list and input area eg:\n             *\n             *     items : {\n             *         small  : 'Small',\n             *         medium : 'Medium',\n             *         large  : 'Large'\n             *     }\n             *\n             * If an array, each entry may be\n             *  - an object containing properties which must include\n             * the {@link #config-valueField} and {@link #config-displayField} which populates the dropdown\n             * with text and provides the corresponding field value.\n             *  - An array whose first value provides the {@link #config-value} for the Combo and whose\n             * second value provides the displayed test in the list and input area.\n             *  - An array of values where the {@link #config-valueField} and {@link #config-displayField} are the same.\n             *\n             * eg:\n             *\n             *     items : [\n             *         {value : 'small',  text : 'Small'},\n             *         {value : 'medium', text : 'Medium'},\n             *         {value : 'large',  text : 'Large'},\n             *     ]\n             *\n             * or\n             *\n             *     items : [\n             *         ['small',  'Small'],\n             *         ['medium', 'Medium'],\n             *         ['large',  'Large'],\n             *     ]\n             *\n             * or\n             *\n             *     items : [ 'Small', 'Medium', 'Large' ]\n             *\n             * @config {Object[]|String[]|Object}\n             */\n            items : null,\n\n            /**\n             * Store used to populate items. Also accepts a Store config object\n             * @prp {Core.data.Store|StoreConfig}\n             */\n            store : null,\n\n            /**\n             * Field used for item value when populating from store. Setting this to `null` will\n             * yield the selected record as the Combo's {@link #property-value}.\n             * @config {String|null}\n             */\n            valueField : undefined,\n\n            /**\n             * Field used for item text when populating from store\n             * @config {String}\n             */\n            displayField : 'text',\n\n            /**\n             * Width of picker, defaults to this combo's {@link #config-pickerAlignElement} width\n             * @config {Number}\n             */\n            pickerWidth : null,\n\n            /**\n             * The minimum string length to trigger the filtering, only relevant when {@link #config-editable} is `true`.\n             *\n             * This defaults to `1` in the case of local filtering, but `4` if the\n             * {@link #config-filterParamName} is set to cause remote dropdown loading.\n             *\n             * @config {Number}\n             * @default\n             */\n            minChars : null,\n\n            selected : null,\n\n            /**\n             * Template string used to render the list items in the dropdown list\n             *\n             * ```javascript\n             * new Combo({\n             *     listItemTpl : ({ text }) => `<div class=\"combo-color-box ${text}\"></div>${text}`,\n             *     editable    : false,\n             *     items       : [\n             *         'Black',\n             *         'Green',\n             *         'Orange',\n             *         'Pink',\n             *         'Purple',\n             *         'Red',\n             *         'Teal'\n             *     ]\n             * });\n             * ```\n             *\n             * @config {Function}\n             * @param {Core.data.Model} record The record representing the item being rendered\n             * @returns {String}\n             */\n            listItemTpl : null,\n\n            /**\n             * Template function that can be used to customize the displayed value\n             * @param {Core.data.Model} record The record to provide a textual value for.\n             * @param {Core.widget.Combo} combo A reference to this Combo.\n             * @config {Function}\n             * @returns {String}\n             */\n            displayValueRenderer : null,\n\n            /**\n             * CSS class to add to picker\n             * @config {String}\n             */\n            listCls : null,\n\n            triggers : {\n                expand : {\n                    cls     : 'b-icon-picker',\n                    handler : 'onTriggerClick'\n                }\n            },\n\n            /**\n             * If the dropdown is to be populated with a filtered query to a remote server, specify the\n             * name of the parameter to pass the typed string here. By default, the string is simply sent\n             * as the value of the parameter. For special encoding, configure the combo with {@link #config-encodeFilterParams}\n             * @config {String}\n             */\n            filterParamName : null,\n\n            /**\n             * A function which creates an array of values for the {#config-filterParamName} to pass\n             * any filters to the server upon load.\n             *\n             * The default behaviour is just to set the parameter value to the filter's `value`,\n             * but the filter can be fully encoded for example:\n             *\n             * ```javascript\n             *    {\n             *        encodeFilterParams(filters) {\n             *            const result = [];\n             *\n             *            for (const { property, operator, value, caseSensitive } of filters) {\n             *                result.push(JSON.stringify({\n             *                    field : property,\n             *                    operator,\n             *                    value,\n             *                    caseSensitive\n             *                }));\n             *           }\n             *        return result;\n             *    }\n             * ```\n             * @config {Function}\n             */\n            encodeFilterParams : filters => filters.map(f => f.value),\n\n            /**\n             * If `false`, filtering will be triggered once you exceed {@link #config-minChars}. To filter only when\n             * hitting Enter key, set this to `true`;\n             * @config {Boolean}\n             */\n            filterOnEnter : false,\n\n            /**\n             * Configure as `true` to hide the expand trigger. This is automatically set to `true` if\n             * remote filtering is enabled by setting the {@link #config-filterParamName} config.\n             * @config {Boolean}\n             * @default false\n             */\n            hideTrigger : null,\n\n            /**\n             * This implies that the picker will display an anchor pointer, but also means that the picker will align closer\n             * to the input field so that the pointer pierces the {@link #config-pickerAlignElement}\n             * @config {Boolean}\n             * @default false\n             */\n            overlayAnchor : null,\n\n            /**\n             * The delay in milliseconds to wait after the last keystroke before filtering the list.\n             *\n             * This is a minimum of 300ms for remote filtering to keep network requests manageable, and\n             * defaults to 10ms for locally filtered stores.\n             * @config {Number}\n             * @default\n             */\n            keyStrokeFilterDelay : null,\n\n            defaultAction : 'select',\n\n            /**\n             * How to query the store upon click of the expand trigger. Specify one of these values:\n             *\n             *  - `'all'` - Clear the filter and display the whole dataset in the dropdown.\n             *  - `'last'` - Filter the dataset using the last filter value.\n             *  - `null`/any other - Use the value in the input field to filter the dataset.\n             *\n             * @config {'all'|'last'|null}\n             * @default\n             */\n            triggerAction : 'all',\n\n            /**\n             * Get/sets of the operator type for the combo primary filter.\n             *\n             * @member {'='|'!='|'>'|'>='|'<'|'<='|'*'|'startsWith'|'endsWith'|'isIncludedIn'} filterOperator\n             */\n            /**\n             * The name of an operator type as implemented in {@link Core.util.CollectionFilter#config-operator}\n             * to use when filtering the dropdown list based upon the typed value.\n             *\n             * This defaults to `'startsWith'`, but the `'*'` operator may be used to match all\n             * values which _contain_ the typed value.\n             *\n             * Not used when {@link #config-filterParamName} is set to cause remote dropdown loading.\n             * The exact filtering operation is up to the server.\n             *\n             * @default\n             * @config {'='|'!='|'>'|'>='|'<'|'<='|'*'|'startsWith'|'endsWith'|'isIncludedIn'}\n             */\n            filterOperator : 'startsWith',\n\n            /**\n             * Configure as `true` to force case matching when filtering the dropdown list based upon the typed value.\n             *\n             * @config {Boolean}\n             * @default false\n             */\n            caseSensitive : false,\n\n            /**\n             * By default, the picker is hidden on selection in single select mode, and\n             * remains to allow more selections when {@link #config-multiSelect} is `true`.\n             * Setting this to a `Boolean` value can override that default.\n             * @config {Boolean}\n             */\n            hidePickerOnSelect : null,\n\n            /**\n             * A config object to configure the {@link Core.widget.ChipView} to display the\n             * selected value set when {@link #config-multiSelect} is `true`.\n             *\n             * For example the {@link Core.widget.List#config-itemTpl} or\n             * {@link Core.widget.ChipView#config-iconTpl} might be configured to display\n             * richer chips for selected items.\n             * @config {ChipViewConfig}\n             */\n            chipView : {\n                $config : ['lazy', 'nullify'],\n\n                value : {\n                    type : 'combochipview'\n                }\n            },\n\n            chipStore : {\n                $config : ['lazy', 'nullify'],\n                value   : {}\n            },\n\n            /**\n             * When {@link #config-multiSelect} is `true`, you may configure `filterSelected` as\n             * `true` to hide items in the dropdown when they are added to the selection.\n             * It will appear as if the requested item has \"moved\" into the field's\n             * {@link #config-chipView ChipView}.\n             *\n             * @config {Boolean}\n             * @default false\n             */\n            filterSelected : null,\n\n            /**\n             * Text to display in the drop down when there are no items in the underlying store\n             * @config {String}\n             * @default\n             */\n            emptyText : null,\n\n            /**\n             * Get/sets combo value, selects corresponding item in the list\n             * Setting null clears the field.\n             *\n             * If {@link #config-multiSelect} is `true`, then multiple values may be passed as an array.\n             * If the values are records, these become the selected record set held by {@link #property-valueCollection},\n             * and the `value` yielded by this field is an array of all the {@link #config-valueField}s from the records.\n             * @fires select\n             * @fires action\n             * @member {Object|Number|String} value\n             */\n            /**\n             * The initial value of this Combo box. In single select mode (default) it's a simple string value, for\n             * {@link #config-multiSelect} mode, it should be an array of record ids.\n             * @config {String|Number[]|String[]}\n             * @default\n             */\n            value : null,\n\n            valueCollection : {\n                $config : ['nullify', 'lazy'],\n                value   : {}\n            },\n\n            /**\n             * `true` to cause the field to be in an invalid state while the typed filter string does not match a record in the store.\n             * @config {Boolean}\n             * @default\n             */\n            validateFilter : true,\n\n            /**\n             * `true` to clear value typed to a multiselect combo when picker is collapsed\n             * @config {Boolean}\n             * @default\n             */\n            clearTextOnPickerHide : true,\n\n            // set to true to destroy the old combo store when it is replaced with a new store\n            destroyStore : false,\n\n            /**\n             * A key value which, when typed in a {@link #config-multiSelect} Combo, selects the\n             * currently active item in the picker, and clears the input field ready for another\n             * match to be typed.\n             * @config {String}\n             * @default\n             */\n            multiValueSeparator : ',',\n\n            /**\n             * If configured as `true`, this means that when an unmatched string is typed into the\n             * combo's input field, and `ENTER`, or the {@link #config-multiValueSeparator} is typed,\n             * a new record will be created using the typed string as the {@link #config-displayField}.\n             *\n             * If configured as a function, or the name of a function in the owning component hierarchy, the function\n             * will be called passing the string and combo field instance and should return the record to add (if any).\n             *\n             * The new record will be appended to the store, and the value selected.\n             *\n             * If the Store is an {@link Core.data.AjaxStore}, the new record will be eiligible for\n             * syncing to the database through its {@link Core.data.AjaxStore#config-createUrl createUrl}.\n             *\n             * If the `AjaxStore` is configured to {@link Core.data.AjaxStore#config-autoCommit autoCommit},\n             * the record will be synced immediately. If the server does not accept the new addition,\n             * the field is placed temporarily into an invalid state with a message that explains this.\n             *\n             * For example:\n             *\n             * ```javascript\n             *     new Combo({\n             *         label : 'Employee name',\n             *         store : employees,\n             *         createOnUnmatched(name, combo) {\n             *             name = validateEmployeeName(name);\n             *\n             *             if (name) {\n             *                 return new Employee({\n             *                     name,\n             *                     email : generateEmployeeEmail(name)\n             *                 });\n             *             }\n             *             else {\n             *                 combo.setError('Invalid new employee name');\n             *             }\n             *         }\n             *     });\n             * ```\n             * @config {Function|String|Boolean}\n             */\n            createOnUnmatched : null,\n\n            role : 'combobox',\n\n            /**\n             * Configure this as `true` to render the dropdown list as a permanently visible list\n             * in the document flow immediately below the input area instead of as a popup.\n             *\n             * This also hides the expand trigger since it is not needed.\n             * @config {Boolean}\n             * @default false\n             */\n            inlinePicker : null,\n\n            testConfig : {\n                // So that locally filtered tests do not have to wait after type gestures.\n                // Note that for remote filtering, we set a min of 300ms\n                keyStrokeFilterDelay : 0\n            },\n\n            /**\n             * Configure this as `true` and the items display field values will be localized. The display field values\n             * need to be a locale string.\n             * @config {Boolean}\n             * @private\n             * @default\n             */\n            localizeDisplayFields : false,\n\n            /**\n             * Provide a function that returns items to be shown in the combo's selector.\n             * @config {Function}\n             * @private\n             */\n            buildItems : null\n        };\n    }\n\n    /**\n     * A constant value for the {@link #config-triggerAction} config to indicate that clicking the trigger should\n     * filter the dataset using the last filter query string, *not* the input field value.\n     * @member {String} queryLast\n     * @readonly\n     * @static\n     */\n    static get queryLast() {\n        return 'last';\n    }\n\n    //endregion\n\n    construct(config) {\n        super.construct(...arguments);\n        // Ensure there will always be a store created if Combo is created without items/store\n        if (!this.store) {\n            this.items = [];\n        }\n\n        if (this.filterOnEnter) {\n            this.hideTrigger = true;\n        }\n    }\n\n    startConfigure(config) {\n        this.usingRecordAsValue = config.valueField === null;\n\n        super.startConfigure(...arguments);\n    }\n\n    afterConfigure() {\n        super.afterConfigure();\n\n        const me = this;\n\n        if (!ObjectHelper.hasOwn(me, '_value')) {\n            me._value = me.valueField === me.displayField ? '' : null;\n            // _lastValue should stay keeping an initial value if any\n            me._lastValue = me._lastValue || me._value;\n        }\n    }\n\n    get childItems() {\n        const\n            { _chipView, _picker } = this,\n            result = super.childItems;\n\n        if (_chipView) {\n            result.push(_chipView);\n        }\n\n        if (_picker) {\n            result.push(_picker);\n        }\n\n        return result;\n    }\n\n    get innerElements() {\n        const\n            chipViewElement = this._chipView?.element,  // don't trigger chipView create on first compose()\n            { input, inputElement } = this;\n\n        if (chipViewElement) {\n            // Once the input el is transplanted inside the chipView, normal compose() calls won't sync it, so we\n            // have to do so now:\n            DomSync.sync({\n                targetElement : input,\n                domConfig     : inputElement\n            });\n        }\n\n        return [chipViewElement || inputElement];\n    }\n\n    updateInlinePicker(inlinePicker) {\n        if (inlinePicker) {\n            this.element.classList.add('b-inline-picker');\n\n            // Force eager ingestion of picker\n            this.getConfig('picker');\n\n            // No expand trigger\n            this.triggers.expand = null;\n\n            this.pickerVisible = true;\n        }\n    }\n\n    hidePicker() {\n        if (!this.inlinePicker) {\n            return super.hidePicker(...arguments);\n        }\n    }\n\n    changeChipStore(chipStore) {\n        if (chipStore && !(chipStore instanceof Store)) {\n            chipStore = new Store(Store.mergeConfigs({\n                storage : this.valueCollection\n            }, chipStore));\n        }\n\n        return chipStore;\n    }\n\n    updateChipStore(store, was) {\n        was?.destroy();\n    }\n\n    changeChipView(chipView, oldChipView) {\n        const\n            me = this;\n\n        me.element.classList[chipView ? 'add' : 'remove']('b-uses-chipview');\n\n        if (chipView) {\n            const { input } = me;\n\n            if (!me.chipStore) {\n                me.chipStore = {};\n            }\n\n            return ComboChipView.reconfigure(oldChipView, chipView, {\n                defaults : {\n                    parent       : me,\n                    insertBefore : input,\n                    store        : me.chipStore,\n                    closable     : !me.readOnly,\n\n                    navigator : {\n                        type           : 'combochipnavigator',\n                        keyEventTarget : input\n                    }\n                }\n            });\n        }\n\n        oldChipView?.destroy();\n    }\n\n    updateChipView(chipView) {\n        const me = this;\n\n        me._chipViewEventDetacher  = me._chipViewEventDetacher?.();\n\n        me.chipStore = chipView?.store;\n\n        if (chipView) {\n            // Insert the input field\n            chipView.element.appendChild(me.input);\n\n            // Focus must flow into our field from the ChipView\n            me._chipViewEventDetacher  = EventHelper.on({\n                element   : chipView.element,\n                mousedown : 'onChipViewMousedown',\n                thisObj   : me\n            });\n        }\n    }\n\n    updateMultiSelect(multiSelect, oldMultiSelect) {\n        const\n            me             = this,\n            {\n                input,\n                element\n            }              = me,\n            fixValue       = !me.isConfiguring;\n\n        let { value } = me;\n\n        element.classList[multiSelect ? 'add' : 'remove']('b-multiselect');\n\n        if (multiSelect) {\n            const\n                { chipView }   = me,\n                { parentNode } = input,\n                chipViewEl  = chipView?.element;\n\n            // If the input's parentNode is not the chipView's element, we need to restore that DOM arrangement\n            if (chipViewEl && chipViewEl !== parentNode) {\n                // This is where the chipView is created in the DOM but it may have been removed.\n                parentNode.insertBefore(chipViewEl, input);\n                chipViewEl.appendChild(input);\n                me.chipView.refresh();\n            }\n\n            input.value = '';\n\n            if (fixValue) {\n                value = ArrayHelper.asArray(value);\n            }\n        }\n        // else when !multiSelect, if the input's parentNode is the chipView's element, we need to put things back the\n        // other way\n        else {\n            // avoid triggering lazy config if !multiSelect\n            const\n                chipView   = me._chipView,\n                { parentNode } = input,\n                chipViewEl = chipView?.element;\n\n            if (chipViewEl === parentNode) {\n                // Put the input back in its proper place\n                chipViewEl.parentNode.insertBefore(input, chipViewEl);\n\n                // When no longer multiSelect, remove the chipView from the DOM. We do not destroy it because derived\n                // classes or the instance config may have specified chipView config options. If we destroyed it, we could\n                // not then properly recreate it.\n                chipViewEl.remove();\n                element.classList.remove('b-uses-chipview');\n            }\n\n            if (fixValue && typeof value !== 'string') {\n                value = value?.length ? value[0] : null;\n            }\n        }\n\n        if (fixValue) {\n            me.value = value;\n        }\n    }\n\n    onChipViewMousedown(mousedownEvent) {\n        mousedownEvent.preventDefault();\n        if (!this.containsFocus) {\n            this.focus();\n        }\n    }\n\n    onChipClose(records, options = {}) {\n        // Do not clean value collection if input field is not empty - probably text is selected\n        // and user just wants to remove it, not the picked values\n        if (options.isKeyEvent && this.input.value === '' || !options.isKeyEvent) {\n            this._isUserAction = true;\n            this.valueCollection.remove(records);\n            this._isUserAction = false;\n        }\n    }\n\n    updateFilterParamName(filterParamName) {\n        if (this.hideTrigger !== false) {\n            this.hideTrigger = Boolean(filterParamName);\n        }\n    }\n\n    updateHideTrigger(hideTrigger) {\n        this.element.classList[hideTrigger ? 'add' : 'remove']('b-hide-trigger');\n    }\n\n    //region Getters/setters\n\n    updateKeyStrokeFilterDelay(delay) {\n        this.filterOnInput.delay = delay;\n    }\n\n    updateReadOnly(readOnly) {\n        super.updateReadOnly(...arguments);\n\n        // Disable closing (removing) chips when we are read-only.\n        this._chipView && (this._chipView.closable = !readOnly);\n    }\n\n    updateDisabled(disabled) {\n        super.updateDisabled(...arguments);\n\n        // Disable closing (removing) chips when we are disabled\n        this._chipView && (this._chipView.closable = !disabled);\n    }\n\n    updateFilterOperator(filterOperator) {\n        if (this.primaryFilter) {\n            this.primaryFilter.operator = filterOperator;\n        }\n    }\n\n    get minChars() {\n        const minChars = this._minChars;\n\n        if (minChars != null) {\n            return minChars;\n        }\n\n        // If it's not actually set, default differently for remote filtering.\n        return this.remoteFilter ? 4 : 1;\n    }\n\n    get validateFilter() {\n        // Do not show the error if the user has the opportunity to add the typed filter string\n        return this._validateFilter && !this.createOnUnmatched;\n    }\n\n    get items() {\n        return this.store.allRecords;\n    }\n\n    updateBuildItems(fn) {\n        if (fn) {\n            this.items = fn.call(this);\n        }\n    }\n\n    /**\n     * Prepares items to work in attached menu (converts strings to items)\n     * @private\n     */\n    changeItems(items) {\n        const me = this;\n\n        if (items == null) {\n            if (me.store && !me.store.isItemStore) {\n                return;\n            }\n            items = [];\n        }\n\n        if (me.buildItems && !items?.length) {\n            items = me.buildItems();\n        }\n\n        if (items instanceof Store) {\n            me.store = items;\n            return;\n        }\n\n        const displayField = me.displayField;\n\n        let itemModel,\n            valueField = me.valueField,\n            storeData;\n\n        if (Array.isArray(items)) {\n            storeData = items.map(item => {\n                let result = item;\n\n                if (item instanceof Model) {\n                    itemModel = item.constructor;\n                    if (!valueField) {\n                        me.valueField = valueField = itemModel.idField;\n                    }\n                }\n                else {\n                    if (typeof item === 'string' || typeof item === 'number') {\n                        if (!valueField) {\n                            me.valueField = valueField = me.displayField;\n                        }\n                        result = {\n                            [valueField]   : item,\n                            [displayField] : item\n                        };\n                    }\n                    else {\n                        if (!valueField) {\n                            me.valueField = valueField = 'value';\n                        }\n                        if (Array.isArray(item)) {\n                            result = {\n                                [valueField]   : item[0],\n                                [displayField] : item[1]\n                            };\n                        }\n                    }\n                }\n\n                if (item.selected) {\n                    me.value = result;\n                }\n                return result;\n            });\n        }\n        // Must be a value -> text map\n        else {\n            if (!valueField) {\n                me.valueField = valueField = 'value';\n            }\n\n            storeData = [];\n\n            Object.entries(items).forEach(([key, value]) => {\n                storeData.push({\n                    [valueField]   : key,\n                    [displayField] : value\n                });\n            });\n        }\n\n        // Allow reconfiguring with a new set of items\n        if (me.store) {\n            me.store.data = storeData;\n        }\n        else {\n            const valueFieldDefinition = valueField === displayField ? {\n                name       : 'value',\n                dataSource : displayField\n            } : valueField;\n\n            me.store = new Store({\n                isItemStore          : true,\n                data                 : storeData,\n                idField              : valueField,\n                // We frequently populate combos with data from other stores, don't want warnings for consuming local\n                // records from those stores with generated ids\n                verifyNoGeneratedIds : false,\n                modelClass           : itemModel || class extends Model {\n                    static get idField() {\n                        // Need to use instance var and not rely on closure for cases where valueField changes\n                        // (like first assigning [] and then ['a'] without configured valueField\n                        return me.valueField;\n                    }\n\n                    static set idField(idField) {\n                        super.idField = idField;\n                    }\n\n                    static get fields() {\n                        return [valueFieldDefinition, displayField];\n                    }\n                }\n            });\n        }\n    }\n\n    get value() {\n        const\n            me                              = this,\n            { valueCollection, valueField } = me;\n\n        if (valueField == null) {\n            return me.multiSelect ? valueCollection.values.slice() : valueCollection.first;\n        }\n\n        let value;\n\n        if (me.multiSelect) {\n            value = valueCollection.count ? valueCollection.map(r => r[valueField]) : (me._lastValue || []);\n        }\n        else {\n            value = valueCollection.count ? valueCollection.first[valueField] : me._lastValue;\n        }\n\n        return value;\n    }\n\n    set value(value) {\n        super.value = value;\n    }\n\n    // Documented in superclass.\n    get needsInputSync() {\n        // Syncing the input field to the internal value is only needed in a Combo\n        // if there's no ChipView which reflects the value, and the input field\n        // is *not* being used as a type-to-filter input.\n        return this.usesChipView ? false : !this.editable;\n    }\n\n    changeValue(value, oldValue) {\n        const me = this;\n\n        if (value === oldValue) {\n            // Sync without highlight\n            me.syncInputFieldValue(true);\n            return;\n        }\n\n        if (!me.multiSelect && Array.isArray(value) && value.length > 1) {\n            throw new Error('Multiple values cannot be set to a non-multiSelect Combo');\n        }\n\n        // This forces promotion of the items config into a Store if it has not already been injected\n        me.triggerConfig('items');\n\n        // On programmatic value change, we need to clear the chip view selection.\n        // Use the _property name in order not to call it into existence\n        if (!me.inputting) {\n            me._chipView?.selected.clear();\n        }\n\n        // Set an empty items array if no data or store was given\n        if (!me.store) {\n            me.items = [];\n        }\n\n        const\n            {\n                valueField,\n                displayField,\n                store,\n                valueCollection,\n                _picker\n            }            = me,\n            { storage }  = store,\n            hidePicker   = me.hidePickerOnSelect ?? !me.multiSelect,\n            isUserAction = me._isUserAction || _picker?._isUserAction || hidePicker && me.pickerVisible || false;\n\n        // if not remoteFilter mode and AjaxStore has been used, try again to set a value after first store loading\n        if (!me.remoteFilter && store.isAjaxStore && !store.count) {\n            store.ion({ load : () => me.value = value, once : true, thisObj : me });\n            // save value to make sure getter returns the correct data fot multiSelect while data loading\n            me._lastValue = value;\n            return;\n        }\n        // It's a remote filter store, so we have to do a filter down to just match(es)\n        // and add the result to the valueCollection\n        if (me.remoteFilter) {\n            // The null case will drop through and be processed as for local just by clearing the valueCollection\n            if (value != null) {\n\n                if (ObjectHelper.isObject(value) || value.isModel) {\n                    me.store.data = [value];\n                    me.valueCollection.splice(0, me.valueCollection.count, me.store.first);\n                }\n                else {\n                    const wasConfiguring = me.isConfiguring;\n\n                    me.primaryFilter.setConfig({\n                        value,\n                        disabled : false\n                    });\n\n                    store.performFilter(true).then(() => {\n                        if (me.isDestroyed) {\n                            return;\n                        }\n                        const { isConfiguring } = me;\n\n                        // Carry the wasConfiguring flag from the set value call frame so that\n                        // if it's the configuring set value, we do not now fire the change event.\n                        me.isConfiguring = wasConfiguring;\n                        valueCollection.splice(0, valueCollection.count, store.allRecords);\n                        me.isConfiguring = isConfiguring;\n                    });\n                }\n                return;\n            }\n        }\n        // Else, if it's a *locally* filtered store, then unfilter it, so we can do the value lookup.\n        else if (store.filtered) {\n            me.primaryFilter.disabled = true;\n            store.filter();\n        }\n\n        let record;\n\n        if (value != null) {\n            // If value is set as an array, make sure to slice it to not mutate original array below\n            const\n                arrayPassed = Array.isArray(value),\n                values      = arrayPassed ? value.slice() : [value];\n\n            for (let i = 0, len = values.length; i < len; i++) {\n                let currentValue = values[i];\n\n                if (currentValue instanceof Model) {\n                    // The required record value may not yet be in the store. Add it if not.\n                    // Be sure to look past filters when checking if value is already present.\n                    if (!storage.includes(currentValue, true)) {\n                        store.add(currentValue);\n                    }\n                }\n                else {\n                    const isObject = ObjectHelper.isObject(currentValue);\n\n                    // If they passed a data object, match the valueField\n                    if (isObject) {\n                        currentValue = currentValue[store.modelClass.fieldMap[valueField].dataSource];\n                    }\n\n                    // Use the Store Collection's extra indices to quickly find a match.\n                    // They may not be found if the current valueCollection state and\n                    // filterSelected mean that some are filtered out, so check in\n                    // valueCollection if not found in the Store.\n                    record =\n                        (storage.getBy(displayField, currentValue) ||\n                        storage.getBy(valueField, currentValue)) ||\n                        (valueCollection.getBy(displayField, currentValue) ||\n                        valueCollection.getBy(valueField, currentValue));\n\n                    // If it's a potentially non-unique index (such as the by-displayField index)\n                    // then key lookups yield a Set. Use the first entry as the match.\n                    if (record instanceof Set) {\n                        record = [...record][0];\n                    }\n\n                    if (record) {\n                        // If the incoming value was a matched object, use it to update the record\n                        if (isObject) {\n                            record.set(values[i]);\n                        }\n                        values[i] = record;\n                    }\n                    else {\n                        values.splice(i, 1);\n                        len--;\n                        i--;\n                    }\n                }\n            }\n\n            const noMatches = !values.length;\n\n            // Remove all old values, add new values in one shot.\n            const vcGen = valueCollection.generation;\n            valueCollection.splice(0, valueCollection.count, values);\n\n            // If we got no matches, onValueCollectionChange will set the _value to null.\n            // Tests specify that the _value should be set to the incoming unmatched value.\n            // Handle the case that an array was passed.\n            if (noMatches) {\n                me._value = arrayPassed && value.length === 0 ? null : value;\n                // _lastValue has to be updated here to have an actual value for syncInputFieldValue() and syncEmpty() below\n                me._lastValue = me._value;\n            }\n\n            // If no change has fed through to onValueCollectionChange, just ensure the input matches.\n            // Must be done last so that the fallback of using this._value if the passed value did\n            // not match a record can be used.\n            if (noMatches || valueCollection.generation === vcGen) {\n                me.syncInputFieldValue();\n            }\n\n            me.syncEmpty();\n\n            // If there were matches, onValueCollectionChange would have triggered the change event.\n            // If not, we trigger it here.\n            if (noMatches && !me.isConfiguring) {\n                me.triggerFieldChange({\n                    value,\n                    oldValue,\n                    userAction : isUserAction,\n                    valid      : me.isValid\n                });\n            }\n        }\n        else {\n            if (valueCollection.count) {\n                valueCollection.clear();\n            }\n            else {\n                const oldValue = me._value;\n\n                // Cache the value for use by our change handler next time, and also so that\n                // when get value yields null, the fallback to ._value will be correct\n                me._value = null;\n\n                me.syncInputFieldValue();\n                me.syncEmpty();\n                if (!me.isConfiguring) {\n                    me.triggerFieldChange({\n                        value,\n                        oldValue,\n                        userAction : isUserAction,\n                        valid      : me.isValid\n                    });\n                }\n            }\n        }\n\n        me._lastValue = me._value;\n    }\n\n    hasChanged(oldValue, newValue) {\n        if (this.multiSelect) {\n            return !ObjectHelper.isEqual(oldValue, newValue);\n        }\n\n        return super.hasChanged(...arguments);\n    }\n\n    onComboStoreChange({ action }) {\n        // Local filter-on-type is happening, do not sync the input value.\n        if (action !== 'filter') {\n            this.syncInputFieldValue(true);\n        }\n    }\n\n    syncInputFieldValue(skipHighlight) {\n        // We only sync the input's value if we are not using the chip view (DependencyField).\n        // If we are multiselecting, our value is represented by a ChipView.\n        // The ChipView automatically syncs itself with our valueCollection.\n        // If the valueCollection gets updated silently, we may still need this function.\n        if (this.usesChipView) {\n            this.chipView?.refresh();\n        }\n        else {\n            super.syncInputFieldValue(skipHighlight);\n        }\n    }\n\n    get usesChipView() {\n        return Boolean(this.multiSelect && this._chipView);\n    }\n\n    /**\n     * Returns `true` if this field has no selected records.\n     * @property {Boolean}\n     * @readonly\n     */\n    get isEmpty() {\n        return this.valueCollection.count === 0;\n    }\n\n    get inputValue() {\n        // This must be evaluated first, and NOT moved to be directly used as the\n        // second expression in the ternary. If called during configuration, this\n        // will import the configured value from the config object and ensure the\n        // value is matched against the store, and that the \"selected\" property is set.\n        const me = this;\n\n        let result = me.selected ? me.selected[me.displayField] : me.value;\n\n        if (me.displayValueRenderer) {\n            result = me.callback(me.displayValueRenderer, me, [me.selected, me]);\n        }\n\n        return result == null ? '' : result;\n    }\n\n    get nonEditableClickTarget() {\n        return this.multiSelect && this.chipView?.element || super.nonEditableClickTarget;\n    }\n\n    /**\n     * A {@link Core/util/Collection} which holds the currently selected records\n     * from the store which dictates this field's value.\n     *\n     * Usually, this will contain one record, the record selected.\n     *\n     * When {@link #config-multiSelect} is `true`, there may be several records selected.\n     * @member {Core.util.Collection} valueCollection\n     * @readonly\n     */\n    changeValueCollection(valueCollection, oldValueCollection) {\n        oldValueCollection?.destroy();\n\n        if (valueCollection) {\n            if (!valueCollection.isCollection) {\n                valueCollection = new Collection({\n                    internalListeners : {\n                        noChange : 'onValueCollectionNoChange',\n                        change   : 'onValueCollectionChange',\n                        prio     : -1000, // The ChipView must react to changes first.\n                        thisObj  : this\n                    }\n                });\n            }\n            return valueCollection;\n        }\n    }\n\n    changePrimaryFilter(primaryFilter) {\n        if (primaryFilter.isCollectionFilter) {\n            primaryFilter.setConfig({\n                disabled      : true,\n                property      : this.displayField,\n                operator      : this.filterOperator,\n                caseSensitive : this.caseSensitive\n            });\n        }\n        else {\n            if (typeof primaryFilter === 'function') {\n                primaryFilter = {\n                    filterBy : primaryFilter\n                };\n            }\n\n            // This is the filter that performs filtering on typing.\n            primaryFilter = new Filter({\n                // Need an id to replace any existing combo filter on the store.\n                // Dodge pre-commit hook by quoting property:\n                'id' : 'primary',  // eslint-disable-line quote-props\n\n                disabled      : true,\n                property      : this.displayField,\n                operator      : this.filterOperator,\n                caseSensitive : this.caseSensitive,\n\n                ...primaryFilter\n            });\n        }\n\n        return primaryFilter;\n    }\n\n    changeStore(store) {\n        const\n            me           = this,\n            storeFilters = [],\n            {\n                valueCollection,\n                keyStrokeFilterDelay,\n                filterParamName\n            }            = me;\n\n        if (Array.isArray(store)) {\n            me.items = store;\n            return;\n        }\n\n        let remoteFilter;\n\n        if (store) {\n            // We are using an Store which we do not own.\n            if (store.isStore) {\n                const sharedFilter = store.filters.get('primary');\n\n                if (me.remoteFilter) {\n                    store.filterParamName = filterParamName;\n                }\n                remoteFilter = store.remoteFilter || store.restfulFilter;\n\n                // If the Store is from another combo, we also share the incoming filter\n                if (sharedFilter) {\n                    me.primaryFilter = sharedFilter;\n                }\n                else {\n                    storeFilters.push(me.primaryFilter);\n                }\n            }\n            else {\n                if (typeof store === 'string') {\n                    store = Store.getStore(store);\n                }\n                else {\n                    store = new (store.readUrl ? AjaxStore : Store)(store);\n                    me.destroyStore = true;\n                }\n\n                remoteFilter = me.remoteFilter || store.restfulFilter;\n\n                if (remoteFilter && filterParamName) {\n                    store.filterParamName = filterParamName;\n\n                    if (me.encodeFilterParams) {\n                        store.encodeFilterParams = me.encodeFilterParams;\n                    }\n                }\n\n                // We add our primary filter to stores we own\n                storeFilters.push(me.primaryFilter);\n            }\n\n            // If no value field provided, read it off of the Store's modelClass\n            // Unless we want to use full record as the value\n            if (!me.valueField && !me.usingRecordAsValue) {\n                me.valueField = store.modelClass.idField;\n            }\n\n            // Filtering of already-selected values is always done locally.\n            // So if we are filtering remotely, add filter directly to Store's Collection\n            if (me.filterSelected) {\n                const selectedItemsFilter = r => !me.containsFocus || !valueCollection.includes(r);\n\n                if (remoteFilter) {\n                    store.storage.autoFilter = true;\n                    store.storage.addFilter({\n                        id       : `${me.id}-selected-filter`,\n                        filterBy : selectedItemsFilter\n                    });\n                }\n                else {\n                    storeFilters.push(selectedItemsFilter);\n                    store.reapplyFilterOnAdd = true;\n                }\n            }\n\n            // Allow fast lookup in the valueCollection by value or displayed value.\n            // We add these now because we are now guaranteed to have inferred\n            // displayField and startField from any passed items array items is\n            // promoted to a Store.\n            valueCollection.addIndex({\n                property : me.displayField,\n                unique   : false\n            });\n            valueCollection.addIndex({\n                property : me.valueField,\n                unique   : true\n            });\n\n            // *Add* our filters in case the store already has its own filters\n            storeFilters.forEach(f => store.addFilter(f, true));\n\n            // If there's no configured delay, use sensible defaults.\n            // AjaxStore, we don't want a network request fired off on every single keystroke.\n            // Local store, delay it just a little to save data and DOM churn.\n            if (remoteFilter) {\n                // We enforce at least a 300ms delay when firing off network requests\n                me.keyStrokeFilterDelay = Math.max(300, keyStrokeFilterDelay || 0);\n            }\n            else {\n                me.keyStrokeFilterDelay = keyStrokeFilterDelay ?? 10;\n            }\n        }\n\n        return store;\n    }\n\n    updateStore(store, oldStore) {\n        const\n            me = this,\n            { _picker } = me;\n\n        let storeListeners;\n\n        if (me.destroyStore && oldStore) {\n            oldStore.destroy();\n        }\n\n        if (_picker) {\n            _picker.store = store;\n        }\n\n        // Allow fast lookup by value or displayed value\n        store.storage.addIndex({\n            property : me.displayField,\n            unique   : false\n        });\n        store.storage.addIndex({\n            property : me.valueField,\n            unique   : true\n        });\n\n        storeListeners = {\n            filter : 'onStoreFilter'\n        };\n\n        if (me.displayValueRenderer) {\n            (storeListeners || (storeListeners = {})).change = 'onComboStoreChange';\n        }\n\n        me.detachListeners('store');\n\n        // Update selected records collection to match what is in Store.\n        // Incoming records of the same id will be replaced in the valueCollection.\n        // Records in the valueCollection which are no longer in the Store will\n        // be removed.\n        store?.storage && me.valueCollection.match(store.storage);\n\n        // Ensure UI matches potentiial new record values.\n        me.syncInputFieldValue();\n\n        if (storeListeners) {\n            storeListeners.name = 'store';\n            storeListeners.thisObj = me;\n\n            store.ion(storeListeners);\n        }\n    }\n\n    get remoteFilter() {\n        // Don't use \"this.store\" since we need to run during changeStore()\n        return Boolean(this.filterParamName || this._store?.restfulFilter);\n    }\n\n    /**\n     * Get selected record.\n     * @property {Core.data.Model[]}\n     * @readonly\n     */\n    get record() {\n        return this.selected;\n    }\n\n    /**\n     * Get the selected record(s).\n     * @property {Core.data.Model[]}\n     * @readonly\n     */\n    get records() {\n        return this.valueCollection.values.slice();\n    }\n\n    get selected() {\n        const { store } = this;\n\n        // If multiSelect, choose as a single selected value the item which comes first\n        // in the dropdown.\n        return this.multiSelect ? this.valueCollection.values.slice().sort((l, r) => store.indexOf(l) - store.indexOf(r))[0] : this.valueCollection.first;\n    }\n\n    //endregion\n\n    //region Value handling\n\n    /**\n     * Check if field value is valid\n     * @internal\n     */\n    onEditComplete() {\n        const me             = this,\n            selectionCount = me.valueCollection.count;\n\n        super.onEditComplete();\n\n        // Ensure the input area matches the selected value\n        if (selectionCount) {\n            me.clearError(errorValidateFilter);\n            me.syncInputFieldValue();\n        }\n        if (me.required && !selectionCount) {\n            me.setError(errorFieldRequired);\n        }\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * User clicked trigger icon, toggle list.\n     * @private\n     */\n    onTriggerClick(event) {\n        const\n            me             = this,\n            activatePicker = 'key' in event;\n\n        // Bail out if enter key is required to trigger a filter\n        if (me.ignoreTriggerClick || (me.remoteFilter && me.filterOnEnter)) {\n            return;\n        }\n\n        if (me.pickerVisible) {\n            me.hidePicker();\n        }\n        else if (!me.readOnly && !me.disabled) {\n            switch (me.triggerAction?.toLowerCase()) {\n                case 'all':\n                    me.doFilter(null, activatePicker);\n                    break;\n                case 'last':\n                    me.doFilter(me.lastQuery, activatePicker);\n                    break;\n                default:\n                    me.doFilter(me.input.value, activatePicker);\n            }\n        }\n    }\n\n    /**\n     * User types into input field in editable combo, show list and filter it.\n     * @private\n     */\n    internalOnInput(event) {\n        const me = this;\n\n        me.syncEmpty();\n        me.syncInputWidth();\n\n        // This method may be buffered by keyStrokeFilterDelay milliseconds\n        me.filterOnInput(event);\n\n        /**\n         * User typed into the field. Please note that the value attached to this event is the raw input field value and\n         * not the combos value\n         * @event input\n         * @param {Core.widget.Combo} source The combo\n         * @param {String} value Raw input value\n         */\n        me.trigger('input', { value : me.input.value, event });\n    }\n\n    filterOnInput(event) {\n        const\n            me       = this,\n            value    = event.target.value,\n            inputLen = value.length;\n\n        me.inputting = true;\n\n        // If the picker is inline, as opposed to a floating popup,\n        // or the minChars limit is met (or its a filter on enter gesture)\n        // then perform the filtering.\n        if (me.inlinePicker || (inputLen >= me.minChars && (!me.filterOnEnter || event.key === 'Enter'))) {\n            me.doFilter(value);\n        }\n        else {\n            // During typing, the field is invalid\n            if (me.validateFilter && !me.remoteFilter) {\n                me[inputLen ? 'setError' : 'clearError'](errorValidateFilter);\n            }\n            me.hidePicker();\n        }\n        me.inputting = false;\n\n    }\n\n    syncInputWidth() {\n        const me = this;\n\n        if (me.usesChipView) {\n            const\n                input        = me.input,\n                // padding on the input el won't change, so cache the measurement:\n                inputPadding = me._inputPadding ||\n                    (me._inputPadding = DomHelper.getEdgeSize(input, 'padding', 'lr')),\n                value        = input.value || '',\n                width        =\n                    // +'W' to avoid text getting clipped or horizontal scrolling\n                    DomHelper.measureText(value + 'W', input, false, me.element) +\n                    inputPadding.width;\n\n            // Normally the input is given \"flex: 1 1 0px\" so it will fill the space\n            // so we just need to adjust the flex-basis to ensure the input is at least\n            // as long as the text. Since it is also flex-shrink, it will not become\n            // any larger than one \"row\".\n            input.style.flex = `1 1 ${Math.ceil(width)}px`;\n        }\n    }\n\n    doFilter(queryString, activatePicker) {\n        const\n            me = this,\n            {\n                store,\n                // Force the lazy config to create picker since the List needs to add its beforeLoad listener\n                picker\n            } = me,\n            disableFilter = queryString == null || queryString === '';\n\n        me.lastQuery = queryString;\n\n        me.primaryFilter.setConfig({\n            value    : queryString,\n            disabled : disableFilter\n        });\n\n        if (me.remoteFilter) {\n            store.clear(true);\n        }\n\n        const onAfterFilter = () => {\n            const { navigator, isVisible } = picker;\n\n            if (store.count) {\n                // If we are filtering, activate the first match\n                if (!disableFilter && navigator) {\n                    navigator.activeItem = 0;\n                }\n            }\n            // If we were actively *locally* filtering on a string but there were no matches...\n            //  Ensure there's no orphaned active item in the picker.\n            //  If we are validateFilter: true, then mark as invalid even though we\n            //  may have an underlying valid selected value.\n            else if (!me.remoteFilter && !disableFilter) {\n                if (navigator) {\n                    navigator.activeItem = null;\n                }\n                if (me.validateFilter) {\n                    me.setError(errorValidateFilter);\n                }\n            }\n\n            // filtering will have changed the store count.\n            // If the height was set due to constraining, this may need to be released.\n            isVisible && picker.realign();\n        };\n\n        // We have the property 'filterPromise' while a filter operation is in flight.\n        (me.filterPromise = store.filter())?.then(() => {\n            me.filterPromise = null;\n            onAfterFilter();\n        });\n\n        if (!me.inlinePicker) {\n            if (picker?.isVisible) {\n                // If aligned above, filtering will change its height so will need realigning\n                if (picker.lastAlignSpec.zone === 0) {\n                    picker.realign();\n                }\n            }\n            else {\n                me.showPicker(activatePicker);\n            }\n        }\n\n        if (!me.filterPromise) {\n            onAfterFilter();\n        }\n    }\n\n    onStoreFilter({ source : store }) {\n        const\n            me        = this,\n            picker    = me._picker,\n            dataset   = picker?.element.dataset,\n            { count } = store;\n\n        if (me.remoteFilter) {\n            // If we are filtering, activate the first match\n            if (count) {\n                if (picker) {\n                    picker.navigator.activeItem = 0;\n                }\n            }\n            // Invalid if no matches after filtering\n            else {\n                if (me.validateFilter) {\n                    me.setError(errorValidateFilter);\n                }\n            }\n\n            // If we have selection, evict selected items from the newly remote-filtered list\n            if (me.filterSelected && me.valueCollection.count) {\n                store.storage.onFiltersChanged({ action : 'splice', oldCount : 1 });\n\n                // Store does not react to Collection filtering yet because it does its own filtering and\n                // then fires its own event. So we have to refresh the picker to hide the selected items.\n                if (picker) {\n                    picker.refresh();\n                }\n            }\n        }\n\n        // If createOnUnmatched, we add a hint to add the value\n        if (dataset) {\n            if (me.createOnUnmatched && !count) {\n                dataset.addNewValue = me.L('L{addNewValue}')(me.primaryFilter.value);\n            }\n            else {\n                delete dataset?.addNewValue;\n            }\n        }\n    }\n\n    /**\n     * This reacts to our {@link #property-valueCollection} being mutated in any way.\n     * The `change`, `select` and `action` events are fired here.\n     *\n     * This could happen in four ways:\n     *\n     *  - User selected or deselected an item in the dropdown list.\n     *  - `set value` changes the content.\n     *  - The {@link #config-multiSelect} Chip view (which uses this in its store) deletes a record.\n     *  - The application programmatically mutates the {@link #property-valueCollection}.\n     *\n     * @private\n     */\n    onValueCollectionChange({ source : valueCollection }) {\n        const me              = this,\n            { multiSelect, _picker } = me,\n            hidePicker      = me.hidePickerOnSelect ?? !multiSelect,\n            record          = multiSelect ? valueCollection.values.slice() : valueCollection.first,\n            records         = valueCollection.values.slice(),\n            isUserAction    = me._isUserAction || _picker?._isUserAction || hidePicker && me.pickerVisible || false,\n            oldValue        = me._value;\n\n        if (hidePicker) {\n            me.hidePicker();\n        }\n\n        if (!valueCollection.count && me.required) {\n            me.setError(errorFieldRequired);\n        }\n        else {\n            me.clearError(errorFieldRequired);\n            me.clearError(errorValidateFilter);\n        }\n\n        if (me.validateFilter && record) {\n            me.clearError(errorValidateFilter);\n        }\n\n        // Re-evaluate *local* filtering so that selected items are filtered out of the dropdown.\n        // For remote filtering, we programmatically add a filter to the store's storage\n        if (me.filterSelected) {\n            if (me.remoteFilter) {\n                me.store.storage.onFiltersChanged({ action : 'splice', oldCount : 1 });\n\n                // Store does not react to Collection filtering yet because it does its own filtering and\n                // then fires its own event. So we have to refresh the picker to hide the selected items.\n                if (me._picker) {\n                    me._picker.refresh();\n                }\n            }\n            else {\n                me.store.filter();\n            }\n        }\n\n        // Clear the cached value so that there's no fallback when we read back the value below\n        me._value = null;\n        me._lastValue = null;\n\n        // Cache the value for use by our change handler next time, and also so that\n        // if we just cleared the valueCollection, the fallback to ._value will be correct\n        const value = me.cacheCurrentValue(me.value);\n\n        me.syncInputFieldValue();\n        me.syncEmpty();\n\n        if (!me.isConfiguring) {\n            me.triggerFieldChange({\n                value,\n                oldValue,\n                userAction : isUserAction,\n                valid      : me.isValid\n            });\n\n            /**\n             * An item in the list was selected\n             * @event select\n             * @param {Core.widget.Combo} source The combo\n             * @param {Core.data.Model} record Selected record\n             * @param {Core.data.Model[]} records Selected records as an array if {@link #config-multiSelect} is `true`\n             * @param {Boolean} userAction `true` if the value change is due to user interaction.\n             */\n            me.trigger('select', { record, records, userAction : isUserAction });\n\n            /**\n             * Th default action was performed (an item in the list was selected)\n             * @event action\n             * @param {Core.widget.Combo} source The combo\n             * @param {*} value The {@link #config-valueField value} of the selected record\n             * @param {Core.data.Model} record Selected record\n             * @param {Core.data.Model[]} records Selected records as an array if {@link #config-multiSelect} is `true`\n             * @param {Boolean} userAction `true` if the value change is due to user interaction.\n             */\n            if (me.defaultAction === 'select') {\n                me.trigger('action', { value, record, records, userAction : isUserAction });\n            }\n        }\n    }\n\n    // Caching a copy of current value, which can be changed by subclasses (see AssignmentField for reference)\n    cacheCurrentValue(v) {\n        return this._value = v;\n    }\n\n    /**\n     * This listens for when a record from the list is selected, but is already part of\n     * the selection and so the {@link #property-valueCollection} rejects that as a no-op.\n     * At this point, the user will still expect the picker to hide.\n     * @param {Object} event The noChange event containing the splice parameters\n     * @private\n     */\n    onValueCollectionNoChange({ toAdd }) {\n        if (!this.inlinePicker && !this.multiSelect && toAdd.length && this.pickerVisible) {\n            this.picker.hide();\n        }\n    }\n\n    //endregion\n\n    //region Picker\n\n    showPicker() {\n        const\n            me         = this,\n            { picker } = me;\n\n        if (me.readOnly || me.inlinePicker) {\n            return;\n        }\n\n        picker.multiSelect = me.multiSelect;\n\n        super.showPicker(...arguments);\n\n        // Once we have access to the anchor size, overlay the anchor pointer over the target if configured to do so.\n        if (me.overlayAnchor && !picker.align.offset) {\n            picker.align.offset = -picker.anchorSize[1];\n            picker.realign();\n        }\n\n        // Picker type might have been reconfigured from being a List\n        if (picker.restoreActiveItem) {\n            // Activate and make visible an active item.\n            // If we are multiSelect, only pass the selected value if the user has not\n            // previously navigated to her item of interest.\n            // If single select, it's always value to navigate to the value item.\n            // In either case, if there is no target, navigate to item 0.\n            if (me.multiSelect) {\n                picker.restoreActiveItem(picker.navigator?.previousActiveItem || me.selected || 0, true);\n            }\n            else {\n                picker.restoreActiveItem(me.selected || 0, true);\n            }\n        }\n\n        me.input.focus();\n    }\n\n    /**\n     * Creates default picker widget\n     *\n     * @internal\n     */\n    changePicker(picker, oldPicker) {\n        const\n            me          = this,\n            pickerWidth = me.pickerWidth || picker?.width,\n            config      = List.mergeConfigs({\n                owner        : me,\n                store        : me.store,\n                selected     : me.valueCollection,\n                multiSelect  : me.multiSelect,\n                cls          : me.listCls,\n                displayField : me.displayField,\n                forElement   : me[me.pickerAlignElement],\n                align        : {\n                    matchSize : pickerWidth == null,\n                    anchor    : me.overlayAnchor,\n                    target    : me[me.pickerAlignElement],\n                    // Reasonable minimal height to fit few combo items below the combo.\n                    // When height is not enough, list will appear on top. That works for windows higher than 280px,\n                    // worrying about shorter windows sounds overkill.\n                    // We cannot use relative measures here, each combo list item is ~40px high\n                    minHeight : me.inlinePicker ? null : Math.min(3, me.store.count) * 40\n                },\n                [me.listItemTpl ? 'itemTpl' : undefined] : me.listItemTpl,\n                width                                    : pickerWidth,\n                navigator                                : {\n                    keyEventTarget : me.input\n                }\n            }, picker);\n\n        if (me.inlinePicker) {\n            Object.assign(config, {\n                floating            : false,\n                align               : null,\n                activateOnMouseover : false,\n                maxHeight           : null,\n                appendTo            : me.element\n            });\n        }\n\n        picker = List.reconfigure(oldPicker, picker ? config : null, me);\n\n        if (picker) {\n            picker.element.classList.add('b-combo-picker');\n            picker.element.dataset.emptyText = me.emptyText ? me.L(me.emptyText) : me.L('L{noResults}');\n\n            // We have to handle the click on \"Add new value\" when createOnUnmatched is set\n            // because it's not a real list item, it's a repurposing of the .b-empty:after pseudo el.\n            picker.ion({\n                navigate : 'onPickerNavigate',\n                thisObj  : me\n            });\n        }\n\n        return picker;\n    }\n\n    onPickerNavigate({ event }) {\n        // It's a click on the \"Add new value\" prompt\n        if (event.target.matches('[data-add-new-value]')) {\n            this.addNewRecord(this.primaryFilter.value);\n        }\n    }\n\n    onPickerHide() {\n        const me = this;\n\n        super.onPickerHide();\n\n        // https://app.assembla.com/spaces/bryntum/tickets/7736\n        if (me.multiSelect && me.clearTextOnPickerHide) {\n            me.input.value = '';\n        }\n    }\n\n    //endregion\n\n    async internalOnKeyEvent(keyEvent) {\n        const\n            me       = this,\n            value    = me.input[me.inputValueAttr],\n            inputLen = value.length,\n            { key }  = keyEvent,\n            {\n                store,\n                _picker : picker,\n                multiSelect\n            }        = me;\n\n        // Typing the multiValueSeparator character selects the active list item, or\n        // if there is no active item, and we are creating new records, creates the selected item.\n        // The picker may not be a List with a Navigator.\n        // We can only honour this functionality for normal, unoverridden List Pickers.\n        // Some subclasses use Grids as pickers.\n        if (keyEvent.type === 'keydown' && picker?.isVisible && picker.navigator) {\n            const { activeItem } = picker.navigator;\n\n            // If they type `,` in a multiSelect, it means add the active matched item if any\n            if (activeItem && multiSelect && key === me.multiValueSeparator) {\n                me.input.value = '';\n                me.primaryFilter.setConfig({\n                    value    : '',\n                    disabled : true\n                });\n                store.filter();\n                picker.onItemClick(activeItem, keyEvent);\n                picker.hide();\n                keyEvent.preventDefault();\n                return;\n            }\n\n            // Else, if there's no matched item and we are creating new records for unmatched keys\n            // then `,` and Enter add a new record with the string as the displayField\n            if (!activeItem && me.createOnUnmatched && (multiSelect && key === me.multiValueSeparator || key === 'Enter')) {\n                keyEvent.preventDefault();\n                await me.addNewRecord(value);\n                return;\n            }\n        }\n\n        super.internalOnKeyEvent(...arguments);\n\n        if (keyEvent.type === 'keydown' && key === 'Enter' && me.filterOnEnter && inputLen >= me.minChars) {\n            keyEvent.stopPropagation();\n            me.filterOnInput.now(keyEvent);\n        }\n    }\n\n    async addNewRecord(value) {\n        const\n            me = this,\n            {\n                store,\n                _picker : picker,\n                valueCollection,\n                multiSelect,\n                primaryFilter\n            }  = me,\n            remoteAutoCommit = store.remoteFilter && store.autoCommit;\n\n        // We have to wait for remote filtering to finish before we add a new record to the added Bag\n        // because store load (filter is a load) clears added records, and if the load returned during\n        // the create commit that would invalidate the upcoming create return values by leaving no added\n        // records to update with correct new IDs, and so the new record would appear to still\n        // be a phantom, and therefore we would throw an error that the server has not accepted the addition..\n        if (me.filterPromise) {\n            await me.filterPromise;\n        }\n\n        // We can do this early if it's *NOT* a remote filtered, auto-committing AjaxStore.\n        // If remote filtered and autoCommit, this will instigate a load which cannot be\n        // concurrent with the upcoming auto commit.\n        if (!remoteAutoCommit) {\n            primaryFilter.setConfig({\n                value    : '',\n                disabled : true\n            });\n            store.filter();\n        }\n        const [newRecord] = store.add(me.callback(me.createOnUnmatched, me, [value, me]));\n\n        // It's an AjaxStore which is autoCommitting the new record to its createUrl\n        // We wait to see if it's successful.\n        if (store.isCommitting) {\n            let error;\n\n            try {\n                await store.commitPromise;\n            }\n            catch (exception) {\n                error = exception.response?.parsedJson?.error;\n            }\n\n            // If the sync from the server did not return a concrete id, the record gets\n            // left as phantom, so we have to remove it.\n            if (newRecord.isPhantom) {\n                me.clearError();\n                me.setError(error || errorRecordNotCommitted, false, true);\n                store.remove(newRecord);\n\n                // AjaxStore adds to its removed Bag here because it clears down the addded Bag even\n                // if not all added records were successfully synced, and remove adds to removed Bag\n                // if the  record is *not* in the added Bag.\n                store.removed.remove(newRecord);\n            }\n        }\n\n        // Have to wait until now if its a remote filtered, auto-committing AjaxStore.\n        if (remoteAutoCommit) {\n            primaryFilter.setConfig({\n                value    : '',\n                disabled : true\n            });\n            store.filter();\n        }\n\n        me.input.value = '';\n\n        // If an AjaxStore's sync of the add failed, do not select the new record\n        if (store.includes(newRecord)) {\n            // Append for multiSelect, or replace for non-multiSelect\n            valueCollection.splice(multiSelect ? valueCollection.count : 0, multiSelect ? 0 : valueCollection.count, newRecord);\n        }\n        picker?.hide();\n    }\n\n    changeCreateOnUnmatched(createOnUnmatched) {\n        if (createOnUnmatched === true) {\n            createOnUnmatched = this.defaultRecordCreater;\n        }\n        return createOnUnmatched;\n    }\n\n    defaultRecordCreater(value) {\n        return this.store.createRecord({\n            [this.displayField] : value\n        });\n    }\n\n    updateLocalization() {\n        super.updateLocalization();\n        const\n            me                            = this,\n            { displayField }              = me;\n        let { localizedDisplayFieldsMap } = me;\n\n        if (me.localizeDisplayFields === true) {\n\n            // Create a map in which to save the original locale strings.\n            if (!localizedDisplayFieldsMap) {\n                me.localizedDisplayFieldsMap = localizedDisplayFieldsMap = new Map();\n            }\n\n            if (!me.store && me.buildItems) {\n                me.items = me.buildItems();\n            }\n\n            for (const item of me.items) {\n                // Uses .id an unique identifier\n                if (item.id) {\n                    let localeString = localizedDisplayFieldsMap.get(item.id);\n\n                    // If not already saved, save the locale string in the map\n                    if (!localeString && item[displayField]?.startsWith('L{')) {\n                        localeString = item[displayField];\n                        localizedDisplayFieldsMap.set(item.id, localeString);\n                    }\n\n                    // If a locale string is provided, localize it and set it to items display field\n                    if (localeString) {\n                        item[displayField] = me.L(localeString);\n                    }\n                }\n            }\n            // Update the current value of the combo\n            me.syncInputFieldValue();\n        }\n    }\n}\n\nclass ComboChipView extends ChipView {\n    static get $name() {\n        return 'ComboChipView';\n    }\n\n    static get type() {\n        return 'combochipview';\n    }\n\n    static get defaultConfig() {\n        return {\n            closeHandler : 'up.onChipClose',\n\n            itemsFocusable : false,\n\n            multiSelect : true,\n\n            itemTpl(record) {\n                return StringHelper.encodeHtml(record[this.owner.displayField]);\n            },\n\n            scrollable : {\n                overflowY : 'auto'\n            }\n        };\n    }\n}\n\nclass ComboChipNavigator extends Navigator {\n    static get $name() {\n        return 'ComboChipNavigator';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'combochipnavigator';\n    }\n\n    static get configurable() {\n        return {\n            allowShiftKey : true\n        };\n    }\n\n    onTargetClick(clickEvent) {\n        const\n            me   = this,\n            item = clickEvent.target.closest(me.itemSelector);\n\n        // Only activate the item if the click was not on the close icon\n        if (item && !clickEvent.target.classList.contains('b-close-icon')) {\n            if (!clickEvent.shiftKey && !item.contains(clickEvent.target.closest('[data-noselect]'))) {\n                me.ownerCmp.selected.clear();\n            }\n            // Our own updateActiveItem also selects because on superclass *key* navigation\n            // (which is async on scroll end), it sets activeItem, and we select at that time.\n            // So set a flag which disables this.\n            me.inClickHandler = true;\n            me.activeItem = item;\n            me.inClickHandler = false;\n        }\n    }\n\n    onKeyDown(keyEvent) {\n        // ENTER does not toggle selectedness in a ChipView.\n        // ChipView's selection is bound to navigation.\n        if (keyEvent.key !== 'Enter') {\n            super.onKeyDown(keyEvent);\n        }\n    }\n\n    updateActiveItem(activeItem, oldActiveItem) {\n        const chipView = this.ownerCmp;\n\n        super.updateActiveItem(activeItem, oldActiveItem);\n\n        // Selection simply follows navigation in a ChipView\n        if (activeItem && !this.inClickHandler) {\n            chipView.selected.add(chipView.getRecordFromElement(activeItem));\n        }\n    }\n\n    navigatePrevious(keyEvent) {\n        const chipView = this.ownerCmp;\n\n        if (chipView.navigator.activeItem && !keyEvent.shiftKey) {\n            chipView.selected.clear();\n        }\n        if (this.previous) {\n            super.navigatePrevious(keyEvent);\n        }\n        else {\n            this.activeItem = null;\n        }\n    }\n\n    navigateNext(keyEvent) {\n        const chipView = this.ownerCmp;\n\n        // SHIFT+navigate preserves selection\n        if (chipView.navigator.activeItem && !keyEvent.shiftKey) {\n            chipView.selected.clear();\n        }\n        if (this.next) {\n            super.navigateNext(keyEvent);\n        }\n        else {\n            this.activeItem = null;\n        }\n    }\n}\n\n// Register this widget type and associated classes with their Factories\nCombo.initClass();\nComboChipView.initClass();\nComboChipNavigator.initClass();\n","import Layout from './Layout.js';\n\n/**\n * @module Core/widget/layout/Fit\n */\n\n/**\n * A helper class for containers which must manage a single child widget which must fit the container's\n * {@link Core.widget.Widget#property-contentElement}.\n * @layout\n * @classtype fit\n */\nexport default class Fit extends Layout {\n    static $name = 'Fit';\n\n    static type = 'fit';\n\n    static configurable = {\n        containerCls : 'b-fit-container',\n\n        itemCls : 'b-fit-item'\n    };\n}\n\n// Layouts must register themselves so that the static layout instantiation\n// in Layout knows what to do with layout type names\nFit.initClass();\n","import Widget from './Widget.js';\nimport Container from './Container.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\nimport EventHelper from '../helper/EventHelper.js';\nimport LocaleManager from '../../Core/localization/LocaleManager.js';\nimport Field from '../../Core/widget/Field.js';\nimport './layout/Fit.js';\nimport StringHelper from '../helper/StringHelper.js';\nimport DomHelper from '../helper/DomHelper.js';\nimport ResizeMonitor from '../helper/ResizeMonitor.js';\nimport Rectangle from '../helper/util/Rectangle.js';\n\n/**\n * @module Core/widget/Editor\n */\n\n/**\n * Displays an input field, optionally editing a field of a record at a particular position.\n *\n * Offers events to signal edit completion upon `ENTER` or focus loss (if configured to do so),\n * or edit cancellation on `ESC`, or focus loss if configured that way.\n * @extends Core/widget/Container\n *\n * @classType Editor\n * @widget\n */\nexport default class Editor extends Container {\n    //region Config\n    static $name = 'Editor';\n\n    // Factoryable type name\n    static type = 'editor';\n\n    static configurable = {\n        positioned : true,\n        hidden     : true,\n        layout     : 'fit',\n\n        /**\n         * The alignment config for how this editor aligns to a target when asked to {@link #function-startEdit}\n         * @config {AlignSpec}\n         * @default\n         */\n        align : {\n            align  : 't0-t0',\n            offset : [0, 0]\n        },\n\n        /**\n         * Controls whether to hide the target element when asked to {@link #function-startEdit}\n         * @config {Boolean}\n         * @default\n         */\n        hideTarget : false,\n\n        /**\n         * By default, an Editor matches both dimensions, width and height of the element it is targeted at in the\n         * {@link #function-startEdit} function.\n         *\n         * Configure this as false to allow the editor's configured dimensions, or its CSS-imposed dimensions size it.\n         *\n         * This may also operate with more granularity by specifying both dimensions in an object:\n         *\n         * ```javascript\n         *     // Editor can exceed its target's height\n         *     matchSize : {\n         *         width  : true,\n         *         height : false\n         *     }\n         * ```\n         * @config {Boolean|Object}\n         * @property {Boolean} width `true` to match width\n         * @property {Boolean} height `true`to match height\n         * @default\n         */\n        matchSize : true,\n\n        /**\n         * Controls whether the editor should match target element's font when asked to {@link #function-startEdit}\n         * @config {Boolean}\n         * @default\n         */\n        matchFont : true,\n\n        /**\n         * Controls whether the editor should expand its width if the input field has overflow {@link #function-startEdit}\n         * @config {Boolean}\n         * @default\n         */\n        fitTargetContent : false,\n\n        /**\n         * A config object, or the `type` string of the widget (usually a {@link Core.widget.Field} subclass,\n         * i.e. {@link Core.widget.TextField}) which this editor will encapsulate.\n         * @config {InputFieldConfig|String}\n         * @default\n         */\n        inputField : 'textfield',\n\n        /**\n         * What action should be taken when focus moves out of the editor, either by `TAB` or clicking outside.\n         * May be `'complete'` or `'cancel`'. Any other value results in no action being taken upon focus leaving the editor\n         * leaving the application to listen for the {@link #event-focusOut focusOut} event.\n         * @config {'complete'|'cancel'|null}\n         * @default\n         */\n        blurAction : 'complete',\n\n        /**\n         * The name of the `key` which completes the edit.\n         *\n         * See https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values for key names.\n         * @config {String}\n         * @default\n         */\n        completeKey : 'Enter',\n\n        /**\n         * The name of the `key` which cancels the edit.\n         *\n         * See https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values for key names.\n         * @config {String}\n         * @default\n         */\n        cancelKey : 'Escape',\n\n        /**\n         * How to handle a request to complete the edit if the field is invalid. There are three choices:\n         *  - `block` The default. The edit is not exited, the field remains focused.\n         *  - `allow` Allow the edit to be completed.\n         *  - `revert` The field value is reverted and the edit is completed.\n         * @config {'block'|'allow'|'revert'}\n         * @default\n         */\n        invalidAction : 'block',\n\n        /**\n         * Configure as `true` to have editing complete as soon as the field fires its `change` event.\n         * @config {Boolean}\n         * @default false\n         */\n        completeOnChange : null,\n\n        isolateFields : true\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Fired before the editor is shown to start an edit operation. Returning `false` from a handler vetoes the edit operation.\n     * @event beforeStart\n     * @param {HTMLElement} target The element which the Editor is to overlay to edit its content.\n     * @param {Core.data.Model} [record] The record being edited.\n     * @param {String} [field] The name of the field if a record is being edited.\n     * @param {Object} value - The value to be edited.\n     * @param {String|AlignSpec} align - How to align the editor.\n     * @param {Boolean} hideTarget `true` if the target is to be hidden during the edit.\n     * @param {Boolean|Object} matchSize Whether to match the target size. See {@link #config-matchSize}\n     * @param {Boolean} matchSize.width Match width\n     * @param {Boolean} matchSize.height Match height\n     * @param {Boolean} matchFont Whether to match the target's font. See {@link #config-matchFont}\n     * @param {Boolean} focus Whether to focus the editor's field.\n     * @preventable\n     */\n    /**\n     * Fired when an edit operation has begun.\n     * @event start\n     * @param {Object} value - The starting value of the field.\n     * @param {Core.widget.Editor} source - The Editor that triggered the event.\n     */\n    /**\n     * Fired when an edit completion has been requested, either by `ENTER`, or focus loss (if configured to complete on blur).\n     * The completion may be vetoed, in which case, focus is moved back into the editor.\n     * @event beforeComplete\n     * @param {Object} oldValue - The original value.\n     * @param {Object} value - The new value.\n     * @param {Core.widget.Editor} source - The Editor that triggered the event.\n     * @param {Function} [finalize] An async function may be injected into this property\n     * which performs asynchronous finalization tasks such as complex validation of confirmation. The\n     * value `true` or `false` must be returned.\n     * @param {Object} [finalize.context] An object describing the editing context upon requested completion of the edit.\n     * @preventable\n     */\n    /**\n     * Edit has been completed, and any associated record or element has been updated.\n     * @event complete\n     * @param {Object} oldValue - The original value.\n     * @param {Object} value - The new value.\n     * @param {Core.widget.Editor} source - The Editor that triggered the event.\n     */\n    /**\n     * Fired when cancellation has been requested, either by `ESC`, or focus loss (if configured to cancel on blur).\n     * The cancellation may be vetoed, in which case, focus is moved back into the editor.\n     * @event beforeCancel\n     * @param {Object} oldValue - The original value.\n     * @param {Object} value - The new value.\n     * @param {Event} event - Included if the cancellation was triggered by a DOM event\n     * @param {Core.widget.Editor} source - The Editor that triggered the event.\n     * @preventable\n     */\n    /**\n     * Edit has been canceled without updating the associated record or element.\n     * @event cancel\n     * @param {Object} oldValue - The original value.\n     * @param {Object} value - The value of the field.\n     * @param {Event} event - Included if the cancellation was triggered by a DOM event\n     * @param {Core.widget.Editor} source - The Editor that triggered the event.\n     */\n    /**\n     * Fire to relay a `keypress` event from the field.\n     * @event keypress\n     * @param {Event} event - The key event.\n     */\n\n    //endregion\n\n    afterConfigure() {\n        const me = this;\n\n        super.afterConfigure();\n\n        me.onTargetSizeChange = me.onTargetSizeChange.bind(me);\n\n        EventHelper.on({\n            element     : me.element,\n            keydown     : 'onKeyDown',\n            contextmenu : 'stopMouseEvents',\n            mousedown   : 'stopMouseEvents',\n            mouseover   : 'stopMouseEvents',\n            mouseout    : 'stopMouseEvents',\n            mouseup     : 'stopMouseEvents',\n            click       : 'stopMouseEvents',\n            dblclick    : 'stopMouseEvents',\n            thisObj     : me\n        });\n\n        me.ion({\n            beforeHide : 'beforeEditorHide',\n            hide       : 'afterEditorHide',\n            thisObj    : me\n        });\n\n        LocaleManager.ion({\n            locale  : 'onLocaleChange',\n            thisObj : me\n        });\n    }\n\n    onLocaleChange() {\n        const { inputField } = this;\n\n        if (inputField && !inputField.isDestroyed) {\n            // All Field subclasses have this method, but if `inputField` is a custom widget,\n            // `syncInputFieldValue` has to be implemented\n            if (inputField.syncInputFieldValue) {\n                inputField.syncInputFieldValue(true);\n            }\n            else if (!(inputField instanceof Field)) {\n                //<debug>\n                //It might very well be some kind of widget that is not locale dependent like a thumbs up button or something.\n                console.warn(`\n                    The ${inputField.constructor.name} widget you're using as an editor is not a type of Field.\n                    Please implement 'syncInputFieldValue' method on your widget to be able to update display value\n                    when current locale gets changed.\n                `);\n                //</debug>\n            }\n        }\n    }\n\n    render(renderTo) {\n        const\n            oldParent       = this.element.parentNode,\n            [parentElement] = this.getRenderContext(this, renderTo);\n\n        // Ensure that wherever we are hosted, it gets the correct tag class added/removed\n        parentElement.classList.add('b-editing');\n        super.render(...arguments);\n        if (oldParent?.classList && parentElement !== oldParent) {\n            oldParent.classList.remove('b-editing');\n        }\n    }\n\n    /**\n     * Start editing\n     * @param {Object} editObject An object containing details about what to edit.\n     * @param {HTMLElement|Core.helper.util.Rectangle} editObject.target the element or Rectangle to align to.\n     * @param {String} [editObject.align=t0-t0] How to align to the target.\n     * @param {Boolean} [editObject.matchSize=true] Match editor size to target size.\n     * @param {Boolean} [editObject.matchFont=true] Match editor's font-size size to target's font-size.\n     * @param {Core.data.Model} [editObject.record] The record to edit.\n     * @param {String} [editObject.field] The field name in the record to edit. This defaults to the `name` of the\n     * {@link #config-inputField}. Also if record has method set + capitalized field, method will be called, e.g. if\n     * record has method named `setFoobar` and this config is `foobar`, then instead of `record.foobar = value`,\n     * `record.setFoobar(value)` will be called.\n     * @param {Object} [editObject.value] The value to edit.\n     * @param {Boolean} [editObject.focus=true] Focus the field.\n     * @param {Boolean} [editObject.fitTargetContent] Pass `true` to allow the Editor to expand beyond the width of its\n     * target element if its content overflows horizontally. This is useful if the editor has triggers to display, such\n     * as a combo.\n     * @returns {Promise} Resolved promise returns`true` if editing has been started, `false` if an\n     * {@link #event-beforeStart} listener has vetoed the edit.\n     */\n    async startEdit(editObject) {\n        const me = this;\n\n        editObject = ObjectHelper.assignIf(editObject, {\n            align            : me.align,\n            hideTarget       : me.hideTarget,\n            matchSize        : me.matchSize,\n            matchFont        : me.matchFont,\n            fitTargetContent : me.fitTargetContent,\n            focus            : true\n        });\n\n        if (me.trigger('beforeStart', editObject) !== false) {\n            const\n                {\n                    target,\n                    hideTarget,\n                    matchSize,\n                    matchFont,\n                    fitTargetContent,\n                    record,\n                    field = me.inputField.name,\n                    focus\n                } = editObject,\n                { inputField }   = me,\n                { input }        = inputField,\n                targetFontSize   = DomHelper.getStyleValue(target, 'font-size'),\n                targetFontFamily = DomHelper.getStyleValue(target, 'font-family');\n\n            let { value, align } = editObject;\n\n            if (record && field) {\n                me.record = record;\n                me.dataField = field;\n                if (value === undefined) {\n                    value = record[field];\n                }\n            }\n\n            if (matchSize) {\n                if (target instanceof HTMLElement) {\n                    me.updateSize(target, matchSize);\n                }\n\n                // If we are editing and sizing based on an element,\n                // we need to update editor size if grid cell size changes\n                // Removed in 'hide' listener\n                if (target instanceof HTMLElement) {\n                    ResizeMonitor.addResizeListener(target, me.onTargetSizeChange);\n                }\n            }\n\n            if (input) {\n                if (matchFont) {\n                    input.style.fontSize = targetFontSize;\n                    input.style.fontFamily = targetFontFamily;\n                }\n                else {\n                    input.style.fontSize = input.style.fontFamily = '';\n                }\n            }\n\n            me.assigningValues = true;\n\n            // In case our finalize code set it to invalid, start it clear of errors.\n            inputField.clearError?.();\n\n            inputField.value = value;\n\n            me.assigningValues = false;\n\n            // Simplest form is 't0-t0', but may be passed as full object spec.\n            // It gets expanded below so must be an object.\n            if (typeof align === 'string') {\n                align = { align };\n            }\n\n            // Allow target to be out of view. We always align to it.\n            await me.showBy({\n                target,\n                allowTargetOut : true,\n                ...align\n            });\n\n            if (fitTargetContent) {\n                // Input doesn't fit, so widen it\n                const overflow = input.scrollWidth - input.clientWidth;\n                if (overflow > 0) {\n                    me.width += overflow + DomHelper.scrollBarWidth;\n                }\n            }\n\n            focus && inputField.focus?.();\n\n            if (target.nodeType === Element.ELEMENT_NODE) {\n                if (hideTarget) {\n                    target.classList.add('b-hide-visibility');\n                }\n            }\n\n            me.editing = true;\n\n            // Passed value may have been '10/06/2019', send the live field value to startedit\n            me.trigger('start', { value : inputField.value });\n\n            if (Array.isArray(inputField.value) && inputField.editingRecords && inputField.value[0]?.isModel) {\n                // If this editor is editing model instances, save a cloned copy in case fields\n                // are changed\n                me.oldValue = inputField.value.map(record => record.copy(record.id));\n            }\n            else {\n                me.oldValue = inputField.value;\n\n                // If the value from the value getter is an array, we must clone it because\n                // if it's the same *instance*, the ObjectHelper.isEqual test in completeEdit\n                // will find that there are no changes.\n                if (Array.isArray(me.oldValue)) {\n                    me.oldValue = me.oldValue.slice();\n                }\n            }\n\n            // The initialValue is what the revertOnEscape uses by preference before it uses its valueOnFocus.\n            // In an Editor, it can focus in and out but still need that correct initial value.\n            inputField.initialValue = me.oldValue;\n\n            return true;\n        }\n\n        return false;\n    }\n\n    refreshEdit() {\n        if (this.isVisible) {\n            const { record, dataField, inputField } = this;\n\n            if (record && dataField) {\n                const value = record[dataField];\n\n                // Only update the field if the value has changed\n                if (!ObjectHelper.isEqual(inputField.value, value)) {\n                    inputField.value = value;\n                }\n            }\n        }\n    }\n\n    finishEdit() {\n        const { target, aligningToElement } = this.lastAlignSpec;\n\n        if (aligningToElement) {\n            target.classList.remove('b-editing');\n            target.classList.remove('b-hide-visibility');\n        }\n\n        this.editing = false;\n\n        // Internal event, to be able to destroy etc no matter if completed or cancelled\n        this.trigger('finishEdit');\n    }\n\n    onKeyDown(event) {\n        const me = this;\n\n        switch (event.key) {\n            case me.completeKey:\n                me.completeEdit(null, event);\n                event.stopImmediatePropagation();\n                break;\n            case me.cancelKey:\n                me.cancelEdit(event);\n                event.stopImmediatePropagation();\n                break;\n        }\n\n        // In case destroyed by complete or cancel\n        me.trigger?.('keydown', { event });\n    }\n\n    stopMouseEvents(e) {\n        // React editor wrapper uses this flag to enable mouse events pass through to editor\n        if (!this.allowMouseEvents) {\n            e.stopPropagation();\n        }\n    }\n\n    onFocusOut(event) {\n        super.onFocusOut(event);\n\n        const me = this;\n\n        if (!me.isFinishing && me.editing) {\n            // Calls have different signatures.\n            switch (me.blurAction) {\n                case 'cancel':\n                    me.cancelEdit(event);\n                    break;\n                case 'complete':\n                    me.completeEdit(null, event);\n            }\n        }\n    }\n\n    /**\n     * Complete the edit, and, if associated with a record, update the record if possible.\n     * If editing is completed, the editor is hidden.\n     *\n     * If the field is invalid, the `{@link #config-invalidAction}` config is used to decide\n     * upon the course of action.\n     *\n     * If a {@link #event-beforeComplete} handler returns `false` then editing is not completed.\n     *\n     * If the field's values has not been changed, then editing is terminated through {@link #function-cancelEdit}.\n     *\n     * @returns {Boolean} `true` if editing ceased, `false` if the editor is still active.\n     */\n    async completeEdit(finalize, triggeredByEvent) {\n        const me = this,\n            { inputField, oldValue, record } = me,\n            invalidAction = inputField.invalidAction || (inputField.allowInvalid === false ? 'block' : me.invalidAction),\n            { value } = inputField;\n\n        // If we are not editing, we should manipulated the field or not fire any events\n        if (!me.isVisible) {\n            return;\n        }\n\n        // If we're configured not to allow invalid values, refocus the field in case complete was triggered by focusout.\n        if (!inputField.isValid && invalidAction !== 'allow') {\n            if (invalidAction === 'block') {\n                inputField.focus?.();\n                return false;\n            }\n            else if (invalidAction === 'revert') {\n                me.cancelEdit(triggeredByEvent);\n                return true;\n            }\n        }\n        // No change means a cancel.\n        else if (ObjectHelper.isEqual(value, oldValue)) {\n            me.cancelEdit(triggeredByEvent);\n            return true;\n        }\n        // Allow veto of the completion\n        else {\n            const context = { inputField, record, value, oldValue };\n\n            if (me.trigger('beforeComplete', context) === false) {\n                inputField.focus?.();\n            }\n            else {\n                // CellEdit#onEditorBeforeComplete injects editorContext into the basic context\n                if (!finalize) {\n                    finalize = context.finalize || (context.editorContext?.finalize);\n                }\n\n                // Allow async finalization of the editing, implementer may want to show a confirmation popup etc\n                if (finalize) {\n                    let result = await finalize(context);\n\n                    if (result === true) {\n                        me.onEditComplete();\n                    }\n                    else {\n                        if (inputField.setError) {\n                            const\n                                error = result || inputField.invalidValueError,\n                                clearError = () => {\n                                    listeners();\n                                    inputField.clearError(error);\n                                },\n                                listeners = inputField.ion({\n                                    change : clearError,\n                                    input  : clearError\n                                });\n\n                            // Mark as invalid. Because this is decided upon without the knowledge\n                            // of the field, this state will be rescinded upon the next change of\n                            // input field.\n                            inputField.setError(error);\n                        }\n                        if (invalidAction === 'block') {\n                            inputField.focus?.();\n                        }\n                        else if (invalidAction === 'revert') {\n                            inputField.value = oldValue;\n                            result = true;\n                        }\n                        result = false;\n                    }\n                    return result;\n                }\n                // Successful completion\n                else {\n                    me.onEditComplete();\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Cancel the edit and hide the editor.\n     */\n    cancelEdit(triggeredByEvent) {\n        const me = this,\n            { inputField, oldValue } = me,\n            { value } = inputField;\n\n        if (me.editing && !me.isFinishing && me.trigger('beforeCancel', { value, oldValue, event : triggeredByEvent }) !== false) {\n            // Hiding must not trigger our blurAction\n            me.isFinishing = true;\n            me.hide();\n            me.trigger('cancel', { value, oldValue, event : triggeredByEvent });\n            me.finishEdit();\n            me.isFinishing = false;\n        }\n    }\n\n    // Handle updating what needs to be updated.\n    onEditComplete() {\n        const me = this,\n            { record, dataField, inputField, oldValue } = me,\n            { value } = inputField;\n\n        if (!me.isFinishing) {\n            // Hiding must not trigger our blurAction\n            me.isFinishing = true;\n            me.hide();\n\n            if (record) {\n                const setterName = `set${StringHelper.capitalize(dataField)}`;\n\n                if (record[setterName]) {\n                    record[setterName](value);\n                }\n                else if (dataField.includes('.')) {\n                    record.set(dataField, value);\n                }\n                else {\n                    record[dataField] = value;\n                }\n            }\n\n            me.trigger('complete', { value, oldValue });\n            me.finishEdit();\n            me.isFinishing = false;\n        }\n    }\n\n    doDestroy() {\n        if (this.createdInputField) {\n            this.inputField.destroy();\n        }\n        super.doDestroy();\n    }\n\n    set owner(owner) {\n        this._owner = owner;\n    }\n\n    // This is a positioned widget appended to a Widget's contentElement. It may have no owner link.\n    // Grab the owner by finding what widget it is inside.\n    get owner() {\n        return this._owner || Widget.fromElement(this.element.parentNode);\n    }\n\n    changeInputField(inputField, oldInputField) {\n        const me = this;\n\n        if (oldInputField) {\n            oldInputField.destroy();\n        }\n\n        if (typeof inputField === 'string') {\n            inputField = {\n                type : inputField\n            };\n        }\n\n        if (!(inputField instanceof Widget)) {\n            inputField = Widget.create(inputField);\n            me.createdInputField = true; // So we know we can destroy it\n        }\n\n        if (me.completeOnChange) {\n            inputField.ion({\n                change  : 'onInputFieldChange',\n                thisObj : me\n            });\n        }\n\n        inputField.parent = me;\n        return inputField;\n    }\n\n    updateInputField(inputField) {\n        this.removeAll();\n        this.add(inputField);\n    }\n\n    get inputField() {\n        return this.items[0];\n    }\n\n    onInputFieldChange() {\n        if (this.containsFocus) {\n            this.completeEdit();\n        }\n    }\n\n    onTargetSizeChange(resizedElement, oldRect, newRect) {\n        if (oldRect && newRect) {\n            this.updateSize(resizedElement);\n        }\n    }\n\n    updateSize(targetEl, matchSize = this.lastMatchSize) {\n        const\n            me   = this,\n            rect = Rectangle.inner(targetEl);\n\n        // matchSize is granular allowing either dimension to be matched\n        me.width = matchSize.width === false ? 'auto' : rect.width - me.align.offset[0];\n        me.height = matchSize.height === false ? 'auto' : rect.height;\n\n        me.lastMatchSize = matchSize;\n    }\n\n    beforeEditorHide() {\n        // If we are hidden during an edit, *not as part of our finishing sequence*\n        // then cancel the edit. For example we were scrolled out of view with\n        // align having allowTargetOut : false\n        if (this.editing && !this.isFinishing) {\n            this.cancelEdit();\n\n            // cancelEdit will have hidden. do not allow calling code to\n            // continue to call furether listeners. The Editor will be in an invalid\n            // state because cancelEdit will have triggered those listeners.\n            return false;\n        }\n    }\n\n    afterEditorHide() {\n        // Floating Widgets automatically remove themselves.\n        // Editors which are positioned also need to get out the way of content\n        // to allow content updating to be unobstructed.\n        if (this.positioned) {\n            this.element.remove();\n        }\n        ResizeMonitor.removeResizeListener(this.lastAlignSpec.target, this.onTargetSizeChange);\n    }\n}\n\n// Register this widget type with its Factory\nEditor.initClass();\n"],"names":["BrowserHelper","cacheFlags","platform","navigator","userAgent","me","this","_isLinux","Boolean","match","_isMac","_isWindows","_isWebkit","_firefoxVersion","getVersion","_isFirefox","_chromeVersion","_isChrome","_isSafari","_isMobileSafari","_safariVersion","_isAndroid","supportsOverflowClip","_supportsOverflowClip","div","document","createElement","style","overflow","display","documentElement","appendChild","ownerDocument","defaultView","getComputedStyle","getPropertyValue","remove","supportsSticky","versionRe","parseFloat","isTouchDevice","undefined","_isTouchDevice","globalThis","matchMedia","matches","isHoverableDevice","_isHoverableDevice","isBrowserEnv","window","isMac","isWindows","isLinux","isAndroid","isWebkit","isChrome","chromeVersion","isFirefox","firefoxVersion","isSafari","safariVersion","isMobileSafari","supportsPassive","supportsRandomUUID","_supportsRandomUUID","crypto","randomUUID","length","e","storageAvailable","storage","x","localStorage","setItem","removeItem","DOMException","code","name","setLocalStorageItem","key","value","getLocalStorageItem","getItem","removeLocalStorageItem","searchParam","paramName","defaultValue","search","location","re","RegExp","getCookie","nameEq","encodeURIComponent","cookieItems","cookie","split","i","c","charAt","substring","indexOf","decodeURIComponent","download","filename","url","a","href","cssText","body","click","removeChild","downloadBlob","blob","URL","createObjectURL","revokeObjectURL","queryString","_Object$fromEntries","params","searchParams","Object","fromEntries","call","entries","copyToClipboard","success","textArea","height","width","select","execCommand","isBryntumOnline","searchStrings","_searchStrings","Array","isArray","test","host","some","str","isCSP","bryntum","CSP","querySelector","setupClipboard","clipboard","hasNativeAccess","writeText","text","allowNative","_content","readText","writeToClipboard","readFromClipboard","charsToEncode","entitiesToDecode","htmlEncodeRe","htmlDecodeRe","_defineProperty","PointerEvent","MSPointerEvent","_$name","camelLettersRe","crlfRe","escapeRegExpRe","htmlRe","idRe","whiteSpaceRe","domIdRe","htmlDecoder","m","captured","toLowerCase","String","fromCharCode","parseInt","substr","htmlEncoder","hyphenateCamelLetters","all","g1","g2","separateCamelLetters","replaceNonIdChar","map","ch","charCodeAt","toString","join","hyphenateCache","separatedCache","StringHelper","capitalize","string","toUpperCase","uncapitalize","hyphenate","cached","replace","separate","createId","inString","makeValidDomId","id","replaceValue","escapeRegExp","flags","ret","decodeHtml","encodeHtml","encodeHtmlBR","_StringHelper$encodeH","isHtml","initHtmlEntities","mappings","chars","keys","reduce","prev","val","includes","values","safeJsonParse","parsed","JSON","parse","safeJsonStringify","object","replacer","space","result","stringify","joinPaths","paths","pathSeparator","delimiter","trim","xss","strings","buf","xssBR","toJavaScriptValue","options","type","Objects","typeOf","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","v","toJavaScriptString","contents","startsWith","prototype","hasOwnProperty","$name","obj","_options$level","level","repeat","_objectSpread","encodeAttributeSelector","attr","generateUUID","_globalThis$crypto","getRandomValues","Uint8Array","Date","now","fakeNodeUUIDIndex","isFrozen","afterRe","beforeRe","blendOptions","typeCache","emptyObject","freeze","assign","dest","sources","source","assignIf","blend","clone","merge","forEach","s","destValue","isObject","handler","cloned","skipClone","isDate","getTime","createTruthyKeys","getPath","path","getPathDefault","index","hasPath","every","getTruthyKeys","push","getTruthyValues","isClass","_object$prototype","constructor","getUTCDate","isPromise","Promise","resolve","then","Error","isEmpty","p","C","getPrototypeOf","isInstantiated","mergeItems","src","anchor","delta","indexMap","shuffle","srcVal","Map","k","set","get","size","item","pop","_indexMap","setPath","array","trueType","isBase","slice","defineProperty","hasOwn","property","VersionHelper","setVersion","product","version","VH","isNewerThan","otherVersion","semanticCompareVersion","isOlderThan","bundleFor","productName","globalKey","silenceBundleException","isTestEnv","errorProduct","capitalized","BUNDLE_EXCEPTION","version1","version2","comparison","version1Arr","version2Arr","isLower","normalizeArr","arr","maxLength","states","res","Number","isNaN","compareArr","Math","max","arr1","arr2","checkVersion","operator","deprecate","invalidAsOfVersion","message","console","warn","_globalThis$bryntum","_globalThis$parent","_globalThis$parent$br","parent","isDebug","bind","license","getOwnPropertyDescriptor","Reflect","instancePropertiesSymbol","Symbol","configuringSymbol","lazyConfigValues","DATE_TYPE","whitespace","createClsProps","cls","Config","cache","baseCfg","cfg","makeCacheKey","extend","cap","base","field","capName","changer","initializing","updater","descriptor","_descriptor","makeDescriptor","initDescriptor","_initDescriptor","makeInitter","equal","value1","value2","create","equalityMethods","endsWith","makeArrayEquals","mergeMethods","define","target","existing","defineInitter","properties","lazyValues","prop","lazy","fn","sort","splice","config","_this$configObserver","configObserver","applied","newValue","was","resolvedValue","_me$owner","owner","resolveProperty","_me$updater","onConfigChange","$nullFn","makeLazyInitter","makeBasicInitter","configurable","removeInitter","configDone","isDestroying","instance","instanceProperty","delete","setDefault","writable","currentValue","setConfig","symbols","configuring","instanceProperties","lazyConfigs","date","strict","distinct","oldValue","classList","objects","items","metaNew","metaCurrent","nullify","render","MetaClass","getInherited","_this$super","super","metaSymbol","mixinTagSymbol","originalConfigSymbol","lazyConfigsSymbol","defaultConfigOptions","simple","emptyFn","newMeta","o","setupNames","emptyArray","Base","declarable","args","$meta","class","construct","afterConstruct","isConstructing","new","configs","filter","mergeConfigs","configure","afterConfigure","destroy","shredder","doDestroy","setPrototypeOf","isDestroyed","_thisIsAUsedExpression","getter","$$name","startConfigure","finishConfigure","callback","thisObject","thisObj","resolveCallback","apply","propertyPath","enforceCallability","_handler","bindCallback","inHandler","inThisObj","delay","setTimeout","destroyProperties","propertyValue","_propertyValue","meta","beforeConfigure","fullConfig","getDefaultConfiguration","initialConfig","isConfiguring","getProperties","getConfig","wasConfiguring","_configs$key","hasConfig","_me$lazyConfigsSymbol","peekConfig","lazyConfig","has","triggerConfig","triggered","triggerConfigs","group","myConfig","processConfigValue","visited","getCurrentConfig","HTMLElement","DocumentFragment","getConfigValue","_me$$meta$configs$nam","preProcessCurrentConfigs","Set","depth","add","getConfigString","getTestCase","Product","isGantt","isSchedulerPro","isCalendar","isScheduler","isGrid","isTaskBoard","bundlePath","preamble","postamble","import","downloadTestCase","output","app","escape","initClass","setupClass","onClassMixedIn","baseConfig","classConfigs","mixin","mixins","tag","_base$nullify","names","proto","declarables","forkConfigs","hierarchy","isName","defineIsProperty","decl","setupName","setupConfigs","classConfigValues","superMeta","wasNullify","$config","default","setupConfigurable","setupDefaultConfig","defaultConfig","setupDeclarable","forked","setupProperties","setupPrototypeProperties","prototypeProperties","fork","testConfig","__applyTestConfigs","superclass","classHierarchy","topClass","isOfTypeName","detachListeners","_detachers","detachers","$detachers","trackDetacher","detacher","untrackDetachers","eventer","bucket","ArrayHelper","clean","from","iterable","it","removed","findInsertionIndex","comparatorFn","lexicalCompare","len","beforeCheck","afterCheck","binarySearch","findLast","begin","end","compareFn","middle","Function","magnitudeCompare","lhs","rhs","fill","count","itemOrArray","processedItem","populate","oneBased","include","unique","allowNegative","Proxy","receiver","b","useRelativeNaming","toAdd","toRemove","toKeep","onlyInA","onlyInB","inBoth","bSet","asArray","arrayOrObject","identity","keyBy","keyGetter","valueGetter","getKey","getValue","dict","next","commaSepRe","decompiledSym","fnRe1","fnRe2","fnRe3","FunctionHelper","after","method","named","withReturn","return","hook","origResult","$nextHook","hookResult","hookMethod","before","curry","func","curried","args2","concat","bindAll","createInterceptor","original","interceptor","theThis","createSequence","sequence","sequenceResult","createThrottled","buffer","extraArgs","alt","callArgs","timerId","lastCallTime","MAX_VALUE","invoke","performance","elapsed","clearTimeout","cancel","createBuffered","isPending","decompile","_body","_body2","decompiled","t","exec","async","f","_Object$getPrototypeO","_f","noThrow","returnTrue","animate","duration","easing","start","iterate","progress","min","delayable","easingFunctions","requestAnimationFrame","e1","e2","e3","e4","e5","e6","e7","e8","e9","e12","linear","easeInQuad","pow","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","cos","PI","easeOutSine","sin","easeInOutSine","easeInExpo","easeOutExpo","easeInOutExpo","easeInCirc","sqrt","easeOutCirc","easeInOutCirc","easeOutBounce","easeInBack","easeOutBack","easeInOutBack","v1","elastic","swingFromTo","v2","swingFrom","swingTo","bounce","bouncePast","easeFromTo","easeFrom","easeTo","specialProperties","detachable","once","prio","expires","throttle","$internal","priorityComparator","Target","Events","setupDeprecatedEvents","deprecatedEvents","eventName","listeners","internalListeners","bubbleEvents","trigger","_config","configuredListeners","processConfiguredListeners","removeAllListeners","onListen","onUnlisten","addListener","oldThisObj","deprecatedEvent","events","eventListeners","listenerSpec","listener","catchAll","un","called","isDelayable","cancelOutstanding","$firing","relayAll","attachAutoDetacher","removeListener","_thisObj","listenerName","on","ion","updateInternalListeners","oldInternalListeners","detach","changeListeners","l","updateListeners","oldListeners","listenerToRemove","findListener","detachAutoDetacher","listenerToFind","defaultThisObj","_this$eventListeners","listenerEntry","hasListener","_this$eventListeners2","through","prefix","transformCase","relayAllTargets","beforeDestroy","r","preserveInternal","event","_thisObj2","_thisObj2$untrackDeta","_thisObj3","relayEvents","eventNames","listenerConfig","destructorInterceptor","autoDetachers","oldDestructor","dispatcher","destructorName","$autoDetachers","$oldDestructor","find","await","checkLog","resetLog","_me$_triggered","_triggered","clearLog","param","_me$eventListeners","_me$eventListeners2","_me$bubbleEvents","_handlerPromises","_handlerPromises2","eventsSuspended","callOnFunctions","handlerPromises","shouldQueue","queue","arguments","catchall","isExtensible","bubbles","fnName","_me$pluginFunctionCha","inhibit","pluginFunctionChain","myProto","internalAbort","bufferFn","throttledFn","promiseResults","finalResult","suspendEvents","resumeEvents","suspended","queued","AsyncHelper","animationFrame","sleep","millis","yield","paramValueRegExp","AjaxHelper","fetch","post","payload","FormData","headers","controller","DEFAULT_FETCH_OPTIONS","AbortController","abortController","signal","credentials","queryParams","paramsAdded","addQueryParamsToBody","bodyClass","Headers","URLSearchParams","promise","reject","response","parseJson","json","parsedJson","catch","error","stack","abort","_controller","mockUrl","mockAjaxMap","originalFetch","mockAjaxFetch","urlAndParams","paramString","nameValuePair","decodedName","decodedValue","paramValue","parseParams","responseText","status","ok","statusText","synchronous","LocaleHelper","mergeLocales","locales","locale","trimLocale","toTrim","subKey","normalizeLocale","nameOrConfig","localeName","desc","localeDesc","localeCode","localePath","En","localeCoode","publishLocale","LocaleManager","throwOnMissingLocale","_me$locale","scriptTag","applyLocale","dataset","defaultLocale","registerLocale","extendLocale","ignoreError","localeConfig","triggerLocaleEvent","loadLocale","parseLocale","_throwOnMissingLocale","LocaleManagerSingleton","ObjectProto","localeRe","capturelocaleRe","classMatchRe","unescape","txt","Localizable","localeClass","localizable","localizableProperties","clsName","_cls$prototype","_cls$prototype2","parseLocaleString","_text","lastIndex","classMatch","localeKey","updateLocalization","_localeClass","localizeProperty","_me$$meta$configs$pro","_me$fieldMap","_me$fieldMap$property","fieldMap","localizedValue","localize","isColumn","data","originalLocales","optionalL","_this$localizableProp","_this$trigger","getTranslation","templateData","localeCls","translate","_locale$clsName","translation","localeClasses","_localeClasses","L","_localeClasses2","_localeClasses3","shouldThrow","preventThrow","localeManager","localeHelper","Yes","No","Cancel","Ok","Week","Combo","noResults","recordNotCommitted","addNewValue","FilePicker","file","Field","badInput","patternMismatch","rangeOverflow","rangeUnderflow","stepMismatch","tooLong","tooShort","typeMismatch","valueMissing","invalidValue","minimumValueViolation","maximumValueViolation","fieldRequired","validateFilter","DateField","invalidDate","DatePicker","gotoPrevYear","gotoPrevMonth","gotoNextMonth","gotoNextYear","NumberFormat","currency","DurationField","invalidUnit","TimeField","invalidTime","TimePicker","hour","minute","second","List","loading","GridBase","loadMask","syncMask","PagingToolbar","firstPage","prevPage","page","nextPage","lastPage","reload","noRecords","pageCountTemplate","summaryTemplate","allCount","PanelCollapser","Collapse","Expand","Popup","close","UndoRedo","Undo","Redo","UndoLastAction","RedoLastAction","NoActions","FieldFilterPicker","equals","doesNotEqual","isNotEmpty","contains","doesNotContain","isOneOf","isNotOneOf","isGreaterThan","isLessThan","isGreaterThanOrEqualTo","isLessThanOrEqualTo","isBetween","isNotBetween","isBefore","isAfter","isToday","isTomorrow","isYesterday","isThisWeek","isNextWeek","isLastWeek","isThisMonth","isNextMonth","isLastMonth","isThisYear","isNextYear","isLastYear","isYearToDate","isTrue","isFalse","selectAProperty","selectAnOperator","caseSensitive","and","dateFormat","selectOneOrMoreValues","enterAValue","enterANumber","selectADate","FieldFilterPickerGroup","addFilter","DateHelper","weekStartDay","nonWorkingDays","weekends","unitNames","single","plural","abbrev","unitAbbreviations","parsers","LT","LTS","ordinalSuffix","number","suffix","n","tempDate","defValue","rangeFormatPartRe","enOrdinalSuffix","useIntlFormat","intlFormatterCache","Intl","DateTimeFormat","format","formatTime","isShort","strTime","normalizeDay","day","msRegExp","msReplacer","formatCache","formatRedirects","parserCache","redirectFormat","intlConfig","intlFormatConfigs","fmt","formatToParts","part","intlCfg","year","month","ll","formats","M","Mo","MM","padStart","MMM","MMMM","Q","ceil","Qo","D","Do","DD","DDD","validConversions","millisecond","DDDo","DDDD","d","getDay","do","d1","weekday","dd","ddd","dddd","u","parts","timeZone","uu","hour12","E","W","getWeekNumber","Wo","WW","Wp","WWp","Wp0","WWp0","Y","YY","YYYY","A","H","HH","h","hh","kk","K","KK","mm","ss","S","floor","SS","SSS","z","timeZoneName","zz","Z","DH","getGMTOffset","LST","LL","LLL","lll","LLLL","llll","formatRegexp","parseMilliseconds","numberRegex","isNumber","milliseconds","padEnd","NaN","entry","_monthShortNamesIndex","hours","minutes","seconds","amPm","parser","timeZoneRegEx","getTimezoneOffset","parserKeys","parserRegexp","localeStrRegExp","decade","quarter","week","normalizedUnits","ms","mi","days","w","weeks","mo","mon","months","q","quarters","y","years","dec","decades","withDecimalsDurationRegex","noDecimalsDurationRegex","canonicalUnitNames","canonicalUnitAbbreviations","deltaUnits","dateProperties","unitMagnitudes","snapFns","round","step","keyCache","defaultFormat","_defaultFormat","defaultParseFormat","parseFormat","_defaultParseFormat","buildParser","curr","parserObj","nestedParsers","lastItem","last","pattern","splitter","makeKey","trunc","setTime","parseKey","dateString","splitAt","rest","chunks","definition","def","invalid","useUTC","allNull","UTC","toUTC","getUTCFullYear","getUTCMonth","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","formatter","formatMatch","predefined","formatRange","dates","which","asMilliseconds","amount","unit","as","asMonths","time","monthLength","daysInMonth","fraction","valueOf","startOf","getYear","monthsToDate","intMonths","msInMonth","formatDelta","unitName","deltaObj","getDelta","sep","separator","asString","done","precision","maxUnit","ignoreLocale","normalizeUnit","getUnit","getShortNameOfUnit","getLocalizedNameOfUnit","units","toUnit","fromUnit","parseDuration","magnitude","abs","formatContainsHourInfo","is24HourFormat","setDate","setHours","getLastDateOfMonth","getFirstDateOfMonth","setMonth","setFullYear","diff","fractional","dstDiff","setMinutes","setSeconds","setMilliseconds","endOf","clearTime","midnight","inclusive","getTimeOfDay","setDateToMidday","constrain","copyTimeValues","targetDate","sourceDate","isDSTEnabled","jan","jul","isDST","first","isEqual","compare","clamp","isSameDate","isSameTime","isStartOf","betweenLesser","betweenLesserEqual","intersectSpans","date1Start","date1End","date2Start","date2End","compareUnits","unit1","unit2","sign","timeSpanContains","spanStart","spanEnd","otherSpanStart","otherSpanEnd","_weekStartDay","nonWorkingDaysAsArray","daysInYear","fullYear","hoursInDay","getNormalizedUnitDuration","getNext","increment","dt","isValidDate","getStartOfNextDay","noNeedToClearTime","nextDay","offsetNextDay","offsetDate","getEndOfPreviousDay","dateOnly","getWeekDescription","startDate","endDate","monthDesc","jan01","dec31","firstDay","lastDay","dayNumber","getDayDiff","weekNumber","lastWeekOfLastYear","formatCount","getUnitToBaseUnitRatio","baseUnit","acceptEstimate","parseTimeUnit","unitLookup","unitLower","getUnitByName","getDurationInUnit","doNotRound","doesUnitsAlign","majorUnit","minorUnit","getSmallerUnit","getLargerUnit","snap","operation","snapFn","weekDay","resultMonths","tzChange","offset","allowDecimals","defaultUnit","_match$","parseNumber","unitMatch","durationRegEx","unitOrdinal","offsetInMinutes","fillDayNames","dayNames","_dayNames","dayShortNames","_dayShortNames","getDayNames","getDayName","getDayShortNames","getDayShortName","fillMonthNames","monthNames","_monthNames","monthShortNames","_monthShortNames","monthNamesIndex","monthShortNamesIndex","monthName","monthShortName","_monthNamesIndex","getMonthShortNames","getMonthShortName","getMonthNames","getMonthName","setupDurationRegEx","unitAbbrRegEx","abbreviations","unitNamesCfg","canonicalUnitName","j","canonicalAbbreviations","MS_PER_HOUR","toFixedFix","toFixed","fractionDigits","newNumber","ObjectHelper","transformArrayToNamedObject","arrayOfItems","namedItems","transformNamedObjectToArray","useIsDeeply","typeA","idx","OH","isDeeplyEqual","aKeys","ignore","bKeys","aKey","bKey","aVal","bVal","shouldEvaluate","evaluate","isPartial","isMoreThan","copyProperties","props","copyPropertiesIf","mapper","pathExists","pathifyKeys","deletePath","coerce","to","fromType","toType","isString","wrapProperty","propertyName","newGetter","newSetter","deep","newProperty","existingProperty","hookProperty","getPropertyDescriptor","existingDesc","fieldName","baseDesc","cleanupProperties","keepNull","removeAllProperties","assertType","valueType","assertObject","assertInstance","assertClass","assertFunction","assertNumber","asNumber","assertBoolean","assertString","assertArray","digits","roundTo","factor","getMapPath","keyPath","simpleKey","topKey","topValue","allBorders","allMargins","allPaddings","borderNames","paddingNames","zeroBased","alignSpecRe","alignPointRe","edgeNames","edgeIndices","defaultAlignments","edgeAligments","bt","tb","lr","rl","zeroOffsets","matchDimensions","parseEdges","top","right","bottom","left","parseAlign","alignSpec","rtl","myEdge","targetEdge","mO","tO","myOffset","targetOffset","myAlignmentPoint","targetAlignmentPoint","startZone","edgeAligned","flipAlign","align","Rectangle","isRectangle","element","relativeTo","ignorePageScroll","_element","_relativeTo","nodeType","Node","DOCUMENT_FRAGMENT_NODE","scrollLeft","scrollTop","isViewport","isSFViewport","offsetHeight","sfElRect","getBoundingClientRect","viewRect","parentElement","scrollHeight","innerWidth","innerHeight","scrollOffset","pageXOffset","pageYOffset","fromScreen","inner","borders","DomHelper","getStyleValue","content","padding","client","scrollbarWidth","scrollBarWidth","clientHeight","scrollWidth","clientWidth","outer","margin","union","rectangles","current","roundPx","devicePixelRatio","_x","_y","_width","_height","isAlignRectangle","minHeight","minWidth","other","intersect","useBoolean","allowZeroDimensions","processor","moveTo","center","Point","xDelta","yDelta","getStart","horizontal","getEnd","area","_minWidth","_minHeight","adjust","inflate","deflate","constrainTo","originalHeight","originalY","alignTo","spec","calculatedAnchorPosition","zone","resultZone","constrainingToViewport","constrainPadding","targetOffsets","axisLock","anchorSize","anchorPosition","matchSize","position","targetConstrainRect","constraintZones","zoneOrder","matchDimension","originalSize","pos","edge","centerAligned","offsets","targetPoint","getAlignmentPoint","myPoint","overlap","requestedResult","solutions","largestZone","s1","s2","isLeftOrRight","startValue","anchorStart","anchorEnd","alignmentPoint","margins","edgeOffset","highlight","highlightElement","visualize","asDomConfig","domConfig","pointerEvents","valueSymbol","lengthSymbol","DomClassList","change","normalize","classes","returnEmpty","_returnEmpty","_returnEmpty2","isDomClassList","_cls","Element","ELEMENT_NODE","getAttribute","DOMTokenList","process","clear","className","toJSON","otherClasses","assignTo","temp","toggle","flag","touchPoints","changedTouches","screenX","screenY","pageY","into","toArray","touchProperties","isOption","delegate","capture","passive","throttled","autoDetach","block","returnTrueProp","normalizedKeyNames","Spacebar","Del","Esc","Left","Up","Right","Down","ignoreModifierKeys","Meta","Control","Alt","specialKeys","Shift","specialKeyRe","EventHelper","normalizeEvent","touches","getXY","clientX","clientY","getDistanceBetween","event1","event2","xy1","EH","xy2","getPagePoint","pageX","getClientPoint","handlerDetails","handlerSpec","targetElement","addElementListener","createContextMenuWrapper","removeEventListener","defaults","createHandler","addEventListener","getComposedPathTarget","composedPath","fixEvent","_target$getRootNode","_event$relatedTarget","fixed","shadowRoot","getRootNode","originalTarget","normalizedKeyName","metaKey","ctrlKey","offsetX","offsetY","DOCUMENT_NODE","elementFromPoint","TEXT_NODE","relatedTarget","relatedTargetElement","wrappedFn","rtlSource","playingDemo","isTrusted","originalarget","lastTarget","_event$target$closest","delegatedTarget","closest","onTransitionEnd","animationName","mode","timerSource","runOnDestroy","callbackArgs","doCallback","endedAnimation","waitForTransitionEnd","tapholdStartTouch","tapholdTimer","touchMoveRemover","contextmenuEvent","MouseEvent","browserEvent","contextMenuTouchId","identifier","longPressTime","onMoveOrPointerUp","deltaX","deltaY","touchmove","touchend","pointermove","pointerup","createDblClickWrapper","startId","secondListenerDetacher","touchstart","secondStart","preventDefault","secondClick","targetRect","dblclickEventConfig","dblclickEvent","defineProperties","dblClickTime","toSpecialKey","specialKeyFromEventKey","mousedown","mouseup","dblclick","contextmenu","mouseover","mouseout","keyup","keydown","keypress","globalListenerDetacher","pointerdown","_rootEl$classList","rootEl","getRootElement","usingKeyboard","removeClsGlobally","rootElement","children","node","t0t0","numberRe","numberReSrc","translateMatrix2dRe","translateMatrix3dRe","translateMatrixRe","pxTtranslateXRe","pxTtranslateYRe","semicolonRe","colonRe","digitsRe","elementCreateExpandos","elementData","for","retainElement","elementCreateProperties","html","tooltip","nextSibling","ns","reference","unmatched","onlyChildren","compareHtml","syncOptions","keepChildren","styleIgnoreProperties","parentRule","nativeEditableTags","INPUT","TEXTAREA","nativeFocusableTags","BUTTON","IFRAME","EMBED","OBJECT","SELECT","BODY","win","doc","arraySlice","immediatePromise","fontProps","isHiddenWidget","_hidden","mergeChildren","isVisible","el","parentNode","hasLayout","offsetParent","isInDocument","root","isShadowRoot","elementOrConfigToElement","elementOrConfig","createElementFromTemplate","canonicalStyles","canonicalizeStyle","hasUnit","slideInAnimationName","templateElement","htmlParser","scrollBarMeasureElement","idCounter","themeInfo","slideIn","direction","overflowX","overflowY","isFocusable","skipAccessibilityCheck","Widget","fromElement","nodeName","contentEditable","isEditable","isContentEditable","isInView","whole","caller","positioned","docRect","cOp","cOpR","scrollingElement","getViewportIntersection","peStyle","parentScroll","ownerSVGElement","viewport","isTop","viewportRect","isDOMEvent","Event","normalizeChildren","namedChildren","ignoreRefs","_domConfig$syncOption","child","kids","ref","_child","isWidget","isElement","px","multiplier","floorPx","isCustomElement","childFromPoint","unitize","trueName","hasUnits","activeElement","getActiveElement","_element2","_el","_element$getRootNode","getOutermostElement","_element$getRootNode2","_element3","isValidFloatRootParent","getId","getCommonAncestor","_from","_from2","getElement","elementOrSelector","setAttributes","attributes","removeAttribute","setAttribute","setLength","_element4","_value","percentify","mult","getChild","selector","hasChild","querySelectorAll","getChildElementCount","childElementCount","down","isDescendant","childElement","parentRoot","childRoot","getEventElement","elementName","isNode","isReactElement","$$typeof","forEachSelector","forEachChild","removeEachSelector","isOrphaned","up","getAncestor","possibleAncestorParents","outerElement","ancestor","found","getParents","parents","makeValidId","_options","_options$callback","_config$dataset","ignoreChildRefs","ignoreRefOption","refOwner","refs","syncIdField","returnAll","getElementById","createElementNS","setInnerText","innerHTML","attachTooltip","applyStyle","addChild","$refOwnerId","$reference","attachRef","role","tabIndex","htmlFor","action","syncId","syncIdMap","textNode","createTextNode","_config$syncOptions$i","_config$syncOptions","_child$dataset","ignoreRef","lastDomConfig","template","raw","fragment","supportsTemplate","cloneNode","DOMParser","parseFromString","nodes","childNodes","createDocumentFragment","triggerMouseEvent","dispatchEvent","insertFirst","insertBefore","firstElementChild","beforeElement","insertAt","newElement","siblings","append","docFrag","getTranslateX","transformStyle","transform","getTranslateY","getTranslateXY","getOffsetX","container","offsetLeft","getOffsetY","offsetTop","getOffsetXY","focusWithoutScrolling","focus","preventScroll","scrollHierarchy","resetScroll","getPageX","getPageY","getExtremalSizePX","measure","setScale","scaleX","scaleY","setTranslateX","setTranslateY","setTop","setLeft","setTopLeft","setRect","setTranslateXY","is3d","addTranslateX","addTranslateY","addLeft","addTop","elXY","elRect","propName","inline","pseudo","styles","getEdgeSize","edgeStyle","edges","parseStyle","propVal","overwrite","removeProperty","setProperty","getCSSText","addClasses","removeClasses","toggleClasses","force","addTemporaryClass","getPropertyTransitionDuration","transitionProperty","durations","transitionDuration","getAnimationDuration","offsetWidth","scrollBarPadElement","resetScrollBarWidth","measureText","sourceElement","useHTML","offScreenDiv","getMeasureElement","measureSize","sourceElementStyle","stripTags","htmlString","$domParser","textContent","sync","performSync","outerHTML","syncAttributes","syncContent","syncChildren","getSyncAttributes","specified","sourceAttributes","sourceNames","targetAttributes","targetNames","hasDataset","toSync","innerText","firstChild","sourceNodes","targetNodes","sourceNode","shift","targetNode","tagName","logElement","syncClassList","newClasses","newClsArray","classCount","changed","updateClassList","setTheme","newThemeName","defaultTheme","head","oldThemeName","getThemeInfo","oldThemeLinks","loaded","themeEvent","theme","replaceTheme","oldThemeLink","newThemeLink","rel","bryntumTheme","link","GlobalEvents","testDiv","themeData","transition","addTransition","removeTransition","scrollers","beforeElements","beforeMap","$depth","$scrollTop","globalBounds","localBounds","borderLeftWidth","afterElements","afterMap","styleProps","zIndex","beforeParent","parentChanged","bounds","$initial","$scrollPlaceholder","processed","opacity","afterBounds","loadScript","script","onload","onerror","isNamedColor","color","NodeFilter","sibling","clearTouchTimer","clearTouchEvent","isTouchEvent","setTouchEvent","elementPropKey","elementFilter","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","_this$parentNode","CharacterData","DocumentType","enumerable","isFloatingWidget","floating","suspendFocusEvents","focusEventsSuspended","resumeFocusEvents","setupFocusListenersOnce","observedElements","setupFocusListeners","_detacher","globaltouchStart","stopImmediatePropagation","lastInteractionType","currentMouseDown","hasModifierKey","altKey","shiftKey","currentKeyDown","KeyboardEvent","ev","focusin","resetFloatRootScroll","toElement","fromWidget","toWidget","commonAncestor","backwards","compareDocumentPosition","topVisibleModal","query","isTopVisibleModal","currentFocus","_isRevertingFocus","owns","createWidgetEvent","onFocusOut","focusElement","focusDescendant","_commonAncestor$focus","_target$onFocusIn","_target","onFocusIn","commonAncestorEl","focusout","blur","detachEvents","shiftKeyDown","_currentKeyDown","ctrlKeyDown","_currentKeyDown2","_currentKeyDown3","altKeyDown","_currentKeyDown4","isKeyDown","_currentKeyDown5","isMouseDown","button","_currentMouseDown","isTopModal","CustomEvent","InstancePlugin","clientListeners","disabled","keyMap","updateClient","updateKeyMap","mergeKeyMaps","initPlugins","plugInto","plugins","PluginClass","enabled","getFocusRevertTarget","_this$client","applyPluginConfig","pluginConfig","chain","override","applyAssign","applyChain","applyOverride","fnNames","functions","intoName","overridden","getDescriptor","hookName","chains","hookFn","functionChainRunner","intoFn","$this","$prio","$sorted","returnValue","doDisable","disable","featureClass","_me$client","_me$client$element","updateDisabled","throwOverrideIsMissing","plugIntoName","pluginName","_plugins","addPlugins","hasPlugin","pluginClassOrName","getPlugin","_this$plugins","widgetClass","globalDelays","timeouts","intervals","animationFrames","idleCallbacks","includeIntervals","getFiltered","ignoreTimeouts","maxDelay","scopes","scope","isInteger","makeInvoker","wrapFn","appendArgs","invoker","calls","decorateWrapFn","cancelFn","flush","resume","suspend","immediate","timeoutIds","_globalDelays","timeoutMap","intervalIds","_globalDelays2","clearInterval","animationFrameIds","_globalDelays3","cancelAnimationFrame","idleCallbackIds","_globalDelays4","cancelIdleCallback","hasTimeout","_this$timeoutMap","_globalDelays6","timeoutId","_globalDelays5","idOrName","_this$timeoutIds","_globalDelays7","_this$intervalIds","_globalDelays8","setInterval","_globalDelays9","intervalId","_globalDelays11","frameId","_globalDelays10","requestIdleCallback","_globalDelays13","_globalDelays12","createOnFrame","rafId","handle","_this$animationFrameI","_globalDelays14","_this$idleCallbackIds","_globalDelays15","nextAnimationFrame","bufferWrapFn","raf","rafWrapFn","idle","idleWrapFn","throttleWrapFn","setupDelayable","setupDelayableMethods","statics","static","implName","StateStorage","empty","getKeys","nullStorage","storageTypes","local","stateProvider","isLocal","memory","isMemory","_data","StateProvider","Delayable","writeStatefuls","_instance","inst","nullProvider","setup","self","setValue","changeStorage","saveStateful","stateful","pendingSaves","stateIds","saved","stateId","isSaveStatePending","saveState","primitiveRe","_class","loadState","finalizeInit","isStateful","isStatefulActive","statefulSuspended","isResponsivePending","isResponsiveUpdating","state","_state","getState","applyState","updateStatefulEvents","_me$ion","statefulId","responsiveState","hasGeneratedId","statefulness","_stateProvider","pruneState","_me$initialConfig","statefulLoaded","loadStatefulData","defaultState","_this$stateProvider","resetDefaultState","resumeStateful","full","suspendStateful","onStatefulEvent","pruned","statefulEvents","idCounts","idTypes","setupIdentifiable","identifiable","idMap","unregisterInstance","changeId","generateAutoId","updateId","oldId","registerGeneratedId","registerInstance","generateId","instanceId","disableThrow","getById","registeredInstances","STM_PROP","unrecordedFields","parentIndex","stm","joinStore","store","unjoinStore","_super$unjoinStore","beforeChronoFieldSet","inSetting","nonPersistableFields","getFieldDefinition","newDataCandidate","oldDataCandidate","beforeSet","silent","fromRelationUpdate","_super$beforeSet","preResult","fName","afterChronoFieldSet","beforeResult","afterSet","shouldRecordFieldChange","firstStore","oldIdMap","wasSet","isChronoFieldSet","shouldRecord","newData","oldData","onModelUpdate","beforeInsertChild","childRecords","_super$beforeInsertCh","childRecord","afterInsertChild","inserted","_super$afterInsertChi","context","onModelInsertChild","beforeRemoveChild","isMove","afterRemoveChild","_super$afterRemoveChi","onModelRemoveChild","defaultTraverseOptions","includeFilteredOutRecords","fixTraverseOptions","convertEmptyParentToLeaf","onLoad","onRemove","_convertEmptyParentToLeaf","ingestChildren","stores","inProcessChildren","MyClass","isModel","createRecord","processRecord","sorter","createSorterFn","sorters","processChildren","childrenField","isLeaf","isRoot","ancestorsExpanded","isExpanded","mapMeta","instanceMeta","collapsed","expanded","childLevel","isParent","isLoaded","descendantCount","getDescendantCount","visibleDescendantCount","onlyVisible","allChildren","lastChild","previousSiblingsTotalCount","task","previousSibling","previousOrderedSibling","_this$parent","orderedChildren","orderedParentIndex","nextOrderedSibling","_this$parent2","_this$parent3","parentId","isAutoRoot","newParent","rootNode","isBatchUpdating","batchChanges","parentIdField","_parentIdField","getChildren","unfilteredChildren","useOrderedTree","traverse","skipSelf","traverseBefore","traverseWhile","goOn","bubble","bubbleWhile","childOrId","getTopParent","insertChild","_ref","_before$parentIndex","_before","_me$children2","_me$beforeInsertChild","_me$afterInsertChild","returnArray","_me$children$before","_me$children","records","internalAppendInsert","convertToParent","wasLeaf","isLoading","signalNodeChanged","changes","record","tryInsertChild","recordsToInsert","beforeRecord","rootStore","oldParentIndices","isNoop","newRecordsCloned","newRecord","oldParent","isInserting","oldParentId","addToChildren","isChained","onNodeAddChild","toSet","getDataSource","modified","oldParentIndex","deleteProperty","afterChange","_me$beforeRemoveChild","_me$afterRemoveChild","allRemovedRecords","isLinked","removeFromChildren","isRemoving","onNodeRemoveChild","unfilteredIndex","clearParentId","originalData","replaceChildren","newChildren","clearChildren","unfiltered","_me$children3","removingAll","added","updateChildrenIndices","indexName","setData","newRecords","_options$orderedBefor","orderedBeforeNode","_options$indexName","skip","_options$indexName2","sortOrderedChildren","usePreviousOrder","movedNodes","_a$meta$modified$orde","_b$meta$modified$orde","propertyOverrides","proxyConfig","proxyMeta","setDataOverride","setOverride","proxyRecord","originalRecord","$original","useConfig","linkedRecords","_this$proxyMeta","hasLinks","$links","removeLink","linked","beforeRemove","$originalId","_this$meta$linkedReco","ownerSymbol","typeSplitRe","register","__BRYNTUM_EXAMPLE","factoryable","caseless","registry","types","lower","isA","isType","typeCls","setupAlias","alias","setupFactoryable","superClass","defaultType","extends","typeKey","setupType","replaceType","reconfigure","existingInstance","cleanup","mergeType","prepared","_cleanup","resolveType","_cleanup2","optional","bases","DataField","Factoryable","compareItems","dataSource","alwaysWrite","nullable","nullText","nullValue","persist","readOnly","internal","itemA","itemB","defineAccessor","_getOwnPropertyDescri","complexMapping","complexGet","batching","fields","print","printValue","ArrayDataField","BooleanDataField","convert","_value$toLowerCase","DateDataField","serialize","StringDataField","DurationUnitDataField","IntegerDataField","rounding","ModelDataField","NumberDataField","scale","ObjectDataField","StoreDataField","init","_record","storeName","skipStack","modelClass","storeClass","verifyNoGeneratedIds","usesId","$currentValue","$isSettingStoreFieldData","oldPreserveCurrentDataset","$preserveCurrentDataset","subStore","_record2","_record3","initableValues","allRecords","persistableData","_a","_b","isStore","internalProps","abbreviationFields","fieldDataTypes","boolean","Model","ModelStm","TreeNode","ModelLink","idField","_assignedIdField","_idField","_childrenField","dataField","indexPath","indices","skipExpose","forceUseRaw","rawData","_ArrayHelper$asArray","_me$meta$initableValu","metaConfig","applyConfigs","useRawData","exposeProperties","overriddenIdField","addField","idFieldProcessed","_internalId","_internalIdCounter","unjoinedStores","processData","assignInitables","generation","isCreating","onIsCreatingToggle","defs","subclass","ignoreDefaults","defaultValues","disableDefaultValue","disableTypeConversion","hasSource","complex","sourceExists","useNameForValue","converted","initable","initInitables","setupFields","_base$defs$slice","_base$exposed","_base$ordinals","_base$map","_base$sources","classFields","fieldsInfo","exposedData","exposed","ordinals","exposeRelations","allFields","fieldDataSourceMap","fieldMapProperty","autoExposeFields","dataProperty","fieldDef","fromData","propertiesExposed","definedBy","ordinal","_nonPersistableFields","_alwaysWriteFields","removeField","relations","exposedRelations","relationName","relation","ownKeys","getForeign","setForeign","processedData","laterValues","getFieldDefinitionFromDataSource","fieldNames","getFieldDataSource","processField","initRelations","_store$modelRelations","modelRelations","relatedRecords","related","initRelation","updateRecordRelationCache","foreignId","foreignKey","foreign","foreignStore","relationCache","placeHolder","removeRelation","nullFieldOnRemove","_this$meta$relationCa","asId","getRelationConfig","_this$firstStore","_this$firstStore$mode","flatGet","_field$dataSource","_field$dataSource2","getData","_field$dataSource3","skipAccessors","validOnly","inBatchSet","$silenceBatch","_me$beforeSet","_me$afterSet","inSet","fieldToKeys","cmp","forEachLinked","triggerBeforeUpdate","_field$dataSource4","mapping","useProp","ignoreBag","storeFieldChange","applyValue","cacheRelatedRecord","_field","_field3","_field2","_field4","_field5","nestedName","onModelChange","isPersistable","isModified","hasPersistableChanges","rawModificationData","isFieldModified","getFieldPersistentValue","nameOrField","modifications","rawModifications","keySet","modificationData","modificationDataToWrite","alwaysWriteFields","recordData","isCommitting","committing","clearChanges","includeDescendants","removeFromStoreChanges","noChanges","descendants","collectDescendants","revertChanges","applyChangeset","rawChanges","phantomIdField","remote","rawChangesSimplePaths","ownChangesSimplePaths","idChanged","_field$name","internalId","isPhantom","model","jsonData","nameField","hasBatchedChange","_this$meta","_this$meta$batchChang","beginBatch","silentUpdates","endBatch","cancelBatch","_this$stores","copy","newId","useDeep","originalInternalId","copyData","fromRecord","propertiesAndValues","isSpecialRow","isValid","tree","isReplacing","_ref$forEach","unregister","uncacheRelatedRecord","isPartOfStore","isRemoved","instanceOrId","isGroupHeader","isGroupFooter","_this$meta2","specialRow","calculated","domId","Duration","_magnitude","_unit","useAbbreviation","abbreviationFn","nestedValueReducer","relativeDateUnitRegExp","relativeDateOperators","CollectionFilter","Identifiable","filterBy","_id","onChange","propertyChanged","onFilterChanged","_filterBy","defaultFilterBy","candidate","candidateValue","_propertyItems","updateProperty","_filterValue","filterValue","_operator","_value$valueOf","isIncludedIn","isNotIncludedIn","doesNotInclude","sameTime","sameDay","between","notBetween","notEmpty","setRelativeDateValues","getRelativeDateRange","relativeExpr","todayStart","tomorrowStart","oneTimeUnit","unitStart","timeUnit","generateFiltersFunction","filters","IdHelper","CollectionSorter","sortFn","useLocaleSort","_sortFn","defaultSortFn","localeCompare","generateSortFunction","tieBreaker","isCollection","comp","return0","reverseNumericSortFn","filteredIndicesProperty","sortEvent","replaced","filterEvent","keyTypes","addItemToIndex","doRebuildIndices","keyProps","indexCount","keyProp","_Symbol$iterator","iterator","Collection","idProperty","extraKeys","autoFilter","autoSort","_values","_me$_sorters","isFiltered","_filteredValues","_sorters","totalCount","_indicesInvalid","replaceValues","filteredValues","isNewDataset","replacedValues","replacedFilteredValues","_filterFunction","filterFunction","_addedValues","invalidateIndices","ignoreFilters","allValues","addedValues","allowRemove","newInstance","oldInstance","removeFromIndices","addToIndices","move","beforeItem","itemIndex","beforeIndex","newIds","oldCount","mutated","idIndex","newItem","existingItem","existingIndex","removeIndex","lastIdx","contiguous","removeIndices","isNumeric","unshift","rep","isSorted","onSortersChanged","onFiltersChanged","member","existingMember","removeIndexEntry","addIndexEntry","getBy","getAt","findItem","updateIdProperty","addIndex","changeSorters","addSorter","_this$_sorters","_sortFunction","sortFunction","_filters","removeFilter","isCollectionFilter","clearFilters","gone","oldDataset","changeExtraKeys","updateExtraKeys","indexConfig","_indices","dependentOn","hasCompositeIndex","findIndex","_index$get","rebuildIndices","filteredIndices","filteredIndex","getIndices","removeItemFromIndex","onItemMutation","dependentIndex","_index$dependentOn","keysAndOldValues","_wasSet$o","oldIndex","buildIndexKey","nonPrimitives","WeakMap","safeIndexKey","substitute","Bag","at","nth","countOf","matchFn","StoreBag","autoCommit","suspendCount","isGrouped","recordsInCollapsedGroups","changedGroupParents","rec","groupParent","groupChildren","childCount","removingMultiple","firstRemoved","removeChildArgs","argBlock","isChild","doAutoCommit","_me$rootNode","_me$rootNode$unfilter","registeredRecords","removeAll","_records2","autoTree","parentIdMap","parentIndexField","insert","toInsert","reapplySortersOnAdd","processRecords","onRecordCreated","_records","removedAtIndex","previousIndex","_root$children","isTree","setMultiple","filterFn","reapplyFilterOnUpdate","setAll","acceptChanges","commit","_autoCommit","auto","suspendAutoCommit","resumeAutoCommit","doCommit","applyChangesetFilterSortTarget","applyChangesFromStore","otherStore","transformFn","logChanges","_transformFn","updated","altered","idDataSource","log","allAdded","allAltered","rootUpdated","modifiedParents","_me$add","toUpdate","_data$phantomIdField","addedRecords","phantomId","applyRemovals","afterChangesetApplied","filterChangeset","removals","removedStash","removedEntry","storeSortFunction","groupers","didChange","clearGroupers","sortedLength","findLastIndex","sorted","updatedMatches","newMatch","rawIndex","allInserted","filteredValue","rawValue","nonMatchingAdds","_idMap","reapplyFilterOnAdd","enable","collection","_filtersFunction","Filter","filterConfig","filtersFunction","generatedFilterFunction","traverseFilter","hitsCurrent","traverseClearFilter","latestFilterField","remoteFilter","newFilters","fieldType","wasFiltered","performFilter","newDataset","visible","includeCollapsed","excludeCollapsed","afterPerformFilter","isRemoteDataLoading","resetRelationCache","triggerFilterEvent","filtered","idOrInstance","convertFilterToString","_this$_filters","resortActions","useGroupFooters","collapsedGroups","_groupers","setGroupers","removeHeadersAndFooters","groupRecords","groupId","expand","collapse","onDataChange","_super$onDataChange","prepareGroupRecords","_beforeRecord","getPrev","groupField","newGroupValue","groupRowFor","groupRecord","excludeGroupRecords","updateMap","includeGroupRecords","_me$storage$filteredV","toCollapse","toExpand","groupedRecords","curGroup","curGroupRecord","addFooter","footer","groupFooterFor","_record$groupChildren","_this$groupers","ascending","performSort","newGrouper","_me$groupInfo","_me$groupInfo2","groupInfo","remoteSort","onAfterGrouping","addGrouper","removeGrouper","grouper","isRecordInGroup","groupValue","_this$groupers$","isInCollapsedGroup","parentGroupRec","getGroupRecords","getGroupTitles","getDistinctValues","onDataChanged","internalIncludeExcludeGroupRecords","mapId","hiddenByCollapse","includeChildren","isAvailable","collectGroupRecords","includeHeaders","objectify","initProxy","reset","_relation$storeDetach","storeDetacher","modelRelationConfig","relatedCollectionName","relatedStore","dependentStore","foreignStoreProperty","dependentStoreConfigs","dependentConfigs","existingConfig","initRelationCollection","updateDependentStores","collectionStore","collectionStores","initModelRelationCollection","useName","getCollection","setCollection","getRelationCollection","recordOrId","old","uncacheId","relatedId","oldCache","uncacheIndex","relatedRecord","dependentRecords","dependentRecord","updateDependentRecordIds","_this$dependentStoreC","_cache$oldValue","localRecords","localRecord","sum","_record$field","_record$field2","average","groupSum","findInString","matchFns","formatters","searchAllRecords","getAllDataRecords","_comparison","findByField","usedValues","fieldValue","findRecord","nestedRe","normalizeSorterConfig","updateReapplySortersOnAdd","currentSorters","curSort","currentDir","getCurrentSorterByField","_field$ascending","_me$modelClass","_me$modelClass$$meta$","removeSorter","sorterIndex","clearSorters","storeLocaleSort","nested","lhsValue","rhsValue","sorterFn","afterPerformSort","chainedFilterFn","chainedFields","masterStore","doRelayToMaster","dontRelayToMaster","keepUncommittedChanges","excludeCollapsedRecords","chainedStores","syncOrder","methodNamesToRelay","relayToMaster","getRange","changePreCommit","onMasterDataChangedPreCommit","onMasterDataChanged","fillFromMaster","$master","_chainedFilterFn","doIsArray","dontIsArray","updateChainedStores","isRecordFilter","idRegister","internalIdRegister","doIncludeExclude","commitToMaster","master","$masterEventhandled","$handled","_this$chainedFields","makeChained","syncDataOnLoad","_this$chainedStores","chainedStore","sortParamName","filterParamName","zeroPad","Wbs","_padded","pad","wbs","globLeft","globRight","_this$_padded","leaves","loadChildren","parentRecord","isRootLoad","toAddToUI","storeInsertionPoint","inCollapsedBranch","_me$afterLoadData","rootVisible","afterLoadData","wasMoved","oldParents","toRemoveFromUI","removeUnfiltered","childrenToRemove","fireRemoveEventForMoveAction","internalToggleTreeSubRecords","updateChildrenHiddenState","isExpand","isCollapse","_parentRecord$unfilte","hidden","toggleCollapse","idOrRecord","isLoadingChildren","onNodeCollapse","onNodeExpand","exception","transformToTree","transformed","_data$find","treeify","parentTransform","convertParents","newRoot","lastParent","_lastParent","lastParentPath","nodeMap","generatedParent","lv","rv","numeric","treeifyFlatData","hasParentId","shouldTransform","indent","wbsCode","outdent","transformFlatData","WalkHelper","preWalk","childrenFn","walkStack","reverse","preWalkWithParent","preWalkUnordered","postWalk","prePostWalk","inFn","outFn","syncDataset","isSyncingDataOnLoad","toMove","ids","syncTreeDataset","syncFlatDataset","threshold","surpassed","thresholdSurpassed","unsorted","syncInfo","usedIds","keepMissingValues","hitCount","childrenUpdated","oldChildrenValue","ignoreRemoteChangesInSTM","_me$stm","hasStore","removeStore","addStore","_result","onStoreModelAdd","_result2","onStoreModelInsert","recordsOrIds","fromRemoveChild","_result3","onStoreModelRemove","wasNotEmpty","onStoreRemoveAll","beforeApplyChangeset","crudManager","shouldResume","applyingChangeset","isRecording","stash","startTransaction","afterApplyChangeset","stopTransaction","applyStash","dataAddRemoveActions","includeCollapsedGroupRecords","Store","Pluggable","State","StoreFilter","StoreChanges","StoreCRUD","StoreRelation","StoreSum","StoreSearch","StoreSort","StoreGroup","StoreChained","StoreState","StoreTree","StoreStm","StoreSync","StoreProxy","allowNoId","preventSubClassingModel","storeId","converterFn","getStore","_me$_storage","_me$stm$removeStore","_rec","_storage","newlyPersistable","joinRecordsToStore","isAddRemove","addedCount","removedCount","filtersWereReapplied","sortersWereReapplied","oldRecord","_undoingInsertion","lowest","onDataReplaced","disableDuplicateIdCheck","collisions","batch","committable","updateModifiedBagForRecord","onRecordIdChange","onUpdateRecord","addedToBag","needsRebuild","processedRecords","visibleIndex","changeModelClass","ClassDef","originalModelClass","ClassDefEx","duplicate","_tree","buildRootNode","storeModel","storeData","autoCreated","_rootNode","_rootNode$children","oldRoot","setStoreData","_data2","_remoteSortIndex","loadData","creatingRecord","warnGenerated","_recordData$idField","_recordData$idField$s","_recordData$idField2","isDataset","refreshData","_useRawData","getCount","countProcessed","originalCount","_this$groupRecords","existingRec","getByInternalId","visibleRecords","allExceptFilteredOutRecords","$store","linkedRecord","allIndexOf","primitiveValue","getValueCount","formattedJSON","project","getInlineData","_this$rootNode$childr","_result$modelClass","asyncEvents","initialValue","topNode","skipTopNode","passedFn","wrap","skipSpecialRows","getAdjacent","getNextLeaf","getPrevLeaf","getAdjacentLeaf","processParamEntry","paramArray","prependZeros","num","AjaxStore","fetchOptions","sendAsFormData","writeAllFields","parentIdParamName","responseSuccessProperty","responseDataProperty","responseTotalProperty","restfulFilter","pageParamName","pageStartParamName","pageSizeParamName","pageSize","useRestfulMethods","httpMethods","read","update","autoLoad","load","_isLoading","loadTriggerPromise","commitPromise","_pageParamName","_pageStartParamName","isPaged","remoteTotal","buildQueryString","paramObjects","hasParamsInUrl","internalLoad","_me$loadingPromise","loadingPromise","currentPage","encodeFilterParams","encodeSorterParams","buildReadUrl","readUrl","successFn","loadArgs","sendLoadRequest","Infinity","requestedPage","exceptionType","responseOrError","Response","loadPage","pageParam","previousPage","allPromises","commitState","commitRemoved","commitAdded","commitModified","createUrl","dataToSend","formData","processReturnedData","updateUrl","returnedData","isUpdating","recData","deleteUrl","DomDataStore","_domData","checkEqualityIgnore","makeCheckEqualityOptions","refsFound","classname","simpleTypes","bigint","function","symbol","syncIgnoreAttributes","isReleased","null","DomSync","checkEquality","is","ignoreRefOpt","equalityCache","_syncOptions","_options$refsFound","optionsIn","refsWas","byRef","checkEqualityOptions","affected","detachRef","configEquality","sameConfig","addCls","addAndCacheCls","removeCls","removeAndUncacheCls","currentClasses","keep","sourceSyncAttrs","sourceAttr","targetAttr","syncStyles","didSetTextContent","_lastDomConfig$childr","insertTextNode","newNode","insertElement","_domConfig$html","_syncOptions$ignoreRe","nextNode","releaseThreshold","cleanupNodes","newSyncIdMap","sourceConfigs","releasedIdMap","nextTarget","syncChildOptions","sourceConfig","jsx","isTextNode","syncTargetElement","_callback","cleanupNode","beforeNode","_lastDomConfig$datase","_callback2","lastSyncId","syncChildrenCleanup","releaseCount","syncIds","_element$syncIdMap","Fullscreen","prefixFn","prefixEvt","request","exit","isFullscreen","onFullscreenChange","unFullscreenChange","resizeFireTimer","resizedQueue","isAbsolutelyPositioned","_n$ownerDocument$defa","ResizeMonitor","addResizeListener","_bResizemonitor","handlers","hasWindowResizeListener","onWindowResize","ResizeObserver","resizeObserver","onElementResize","observe","monitors","shrink","onSizeMonitorScroll","targetMutationMonitor","MutationObserver","addedNodes","removedNodes","mr","changedNodes","childList","subtree","monitorElement","removeResizeListener","resizeMonitor","listenerCount","unobserve","disconnect","resizeObserverEntry","resizedElement","newRect","contentRect","rectangle","oldRect","resizeHandler","_document$body","monitorNode","fireResizeEvents","resizedEntry","removeGlobalListeners","scrollLiterals","true","false","clip","defaultScrollOptions","scrollPromise","scroll","xAxis","isScrollable","isScrollableConfig","allScroll","Scroller","widget","contentElement","onScrollEnd","isRTL","_this$rtlSource","syncOverflowState","hasOverflowX","hasOverflowY","hasOverflow","axis","overflowSetting","otherAxis","dimension","hasScrollbar","vertical","clientSize","borderSize","difference","addPartner","otherScroller","axes","partners","scroller","isPartneredWith","eachPartner","removePartner","_this$partners","clearPartners","scrollIntoView","originalRect","getDeltaTo","scrollBy","scrollable","_globalScroller","deltas","totalX","totalY","positionDirty","absX","absY","scrollAnimation","isEnd","lastX","lastY","_me$scrollAnimation","_me$scrollAnimation2","xBefore","yBefore","scrollTo","toX","toY","_me$scrollAnimation3","_me$wheelListenerRemo","scrollHandler","wheelListenerRemover","onElMutation","mutations","scrollEvent","onScroll","onElResize","isAnimating","animationEnd","vetoed","syncPartners","controllingPartner","propagate","elementRect","scrollerRect","_edgeOffset$top","_edgeOffset$bottom","_edgeOffset$start","_edgeOffset$end","normalizeEdgeOffset","xOffset","yOffset","xFactor","maxX","maxY","updateWidget","updateElement","oldElement","_me$mutationObserver","mutationObserver","mutationHandler","updateOverflowX","updateOverflowY","updateX","updateY","changeX","updateContentElement","_this$widget","changeY","lastScrollLeft","oldOverflowX","enableWheel","oldOverflowY","wheel","onWheel","_this$element$scrollW","_this$element","stretcher","widthStretcher","_this$element$scrollH","_this$element2","_this$element3","_this$element4","Promissory","Renderable","refreshDom","renderConfigs","$renderConfigs","$iid","$idSeed","onDraw","initDrawable","renderContext","renderDom","changeElement","fixRefOwnerId","intersector","IntersectionObserver","ent","isIntersecting","drawCounter","Mask","maskName","counter","show","masks","maskElement","errorDefaults","maxProgress","showDelay","useTransition","icon","mask","unmask","getElementMasks","unmaskAll","updateAutoClose","deferredClose","updateCover","syncCover","_this$owner","_this$owner$syncMaskC","syncMaskCover","onOwnerResize","updateOwner","recompose","resize","updateShowDelay","delayedShow","_owner$onMaskAutoClos2","_owner$onMaskAutoClos","onMaskAutoClose","onMaskAutoClosing","hiding","shown","hide","autoClose","cover","keyMapElement","keyMapSubComponents","features","performKeyMapAction","keyEvent","actionHandled","handled","keyCombination","keyString","requireAlt","requireShift","requireCtrl","actualKey","actions","fromKeyMap","_thisObj$isActionAvai","resolveKeyMapAction","isActionAvailable","component","actionName","_this$keyMapDetacher","keyMapDetacher","keyMapOnKeyDown","subPrefix","mergedKeyMap","existingActions","weight","updateRtl","_super$startConfigure","_me$parent","forElement","floatRoot","changeElementRef","getRenderContext","adopt","_this$childItems","childItems","assignValueDefaults","onlyName","floatRoots","isTransparent","textInputTypes","addElementListeners","refName","_listeners","_refListeners","mergeAnim","widgetTriggerPaint","triggerPaint","negationPseudo","nonFlowedPositions","isScaled","alignedClass","returnFalseProp","localizeRE","localizeTooltip","mergeAlign","callbackRe","KeyMap","RTL","mergeCls","ui","collapsify","contentElementCls","defaultCls","dock","forwardTwinEvents","tab","elementAttributes","htmlCls","ignoreParentReadOnly","appendTo","showTooltipWhenDisabled","preventTooltipOnTouch","monitorResize","masked","maskDefaults","draggable","centered","scrollAction","hideAnimation","showAnimation","scrollerClass","defaultBindProperty","defaultAction","overflowable","maxHeight","maxWidth","scaleToFitWidth","allowGrowWidth","flex","alignSelf","ripple","title","requireSize","textAlign","ignoreScrollDuration","recomposeAsync","htmlMutationObserver","ariaLabel","ariaDescription","ariaElement","ariaHasPopup","realignTimeout","innerItem","doHideOrRealign","onAlignConstraintChange","_recomposeAsync","isComposable","setupRenderConfigs","domSyncCallback","configureAriaDescription","_isAnimatingCounter","alignConstrained","onTargetResize","_isUserAction","adoptElement","preExistingElements","_Widget$Tooltip","_me$dragEventDetacher","_me$dragOverEventDeta","sharedTooltip","_tooltip","_rootElement","Tooltip","getSharedTooltip","onExitFullscreen","scrollListenerTimeout","resizeListenerTimeout","removeTransientListeners","revertFocus","onParentElementResize","adoptedElementClassName","adoptedElementCssText","dragEventDetacher","dragOverEventDetacher","dragGhost","valueName","getValueName","assignFieldValue","valueBindProperty","assignValue","hec","gatherValue","gatherValues","eachWidget","_forwardTwinEvents","configureOverflowTwin","overrides","_me$forwardTwinEvents","_overflowTwinOrigin","createOverflowTwin","_me$forwardTwinEvents2","overflowTwin","info","ensureOverflowTwin","onCreate","compose","previousHolder","_contentRange","_listeners$un","addRefAccessor","ownerCmp","afterRecompose","widgetClassList","doCompose","firstTime","composers","childName","hoist","hasChildContent","namedElements","uiClasses","_readOnly","outerCls","_html","updateAriaDescription","descElId","ariaDescEl","_ariaDescEl","updateAriaLabel","updateAriaHasPopup","updateRole","_this$ariaElement","_this$ariaElement2","_ariaElement","isCollapsified","overlay","transitionRecompose","isTransitioningDom","changeAppendTo","updateAppendTo","changeInsertBefore","updateInsertBefore","changeInsertFirst","updateInsertFirst","renderTo","emptyCache","syncElement","currentElement","rendered","updateRecomposeAsync","_this$$meta$$renderCo","_style","changeDataset","_dragGhost","updateParent","_constrainTo","updateCentered","_anchorElement","contentRange","Range","setStart","contentRangeStartOffset","setEnd","contentRangeEndOffset","placement","adjRect","rect","nextElementSibling","previous","previousElementSibling","updateStyle","updateTitle","titleElement","beforeAlignTo","_anchor","lastAlignSpec","monitorIntersection","intersectionObserver","isFinite","releaseSizeConstraints","passedTarget","myPosition","startWidth","startHeight","aligningToElement","realignTarget","SVGElement","allowTargetOut","targetOutOfView","anchoredTo","anchorPathElement","anchorElement","isAligning","configuredHeight","configuredWidth","newResult","setXY","_colourSource","colorMatchPoint","colourSource","DOCUMENT_POSITION_CONTAINED_BY","fillColour","defaultAnchorBackgroundColor","documentScrollListener","monitorTargetMutation","targetObserver","onTargetParentMutation","targetRoot","targetRootScrollListener","targetResizeListener","constrainListeners","mutationRecords","realign","_intersectionObserver","onTargetIntersectionchange","onAlignTargetOutOfView","lastWidth","lastHeight","insideTarget","realignTimout","rectangleOf","toFront","_toFrontRange","createRange","setStartBefore","setEndAfter","lastElementChild","extractContents","updateRef","overflowElement","maxHeightElement","changeAlign","changeScrollable","oldScrollable","isScroller","handleReactElement","reactComponent","processWidgetContent","reactElement","initializingElement","updateHtml","isClearing","updatingHtml","anchorEl","whenVisible","changeHtmlMutationObserver","updateContent","deleteContents","insertNode","startOffset","endOffset","onThemeChange","_this$anchorElement","_anchorSize","borderWidth","borderColour","svgEl","pathElement","backgroundColour","themeChangeListener","useFilter","filterId","dx","dy","stdDeviation","updateAnchor","updateDraggable","_me$dragEventDetacher2","_me$dragOverEventDeta2","_me$dragDetacher","dragstart","dragend","dragDetacher","closestWidget","strips","onWidgetDragStart","_ref2","validateDragStartEvent","myRect","dragStartX","dragStartY","scrollingPageElement","widgetX","widgetY","constrainRect","dragListeners","dragover","setDragImage","dataTransfer","effectAllowed","actualTarget","handleSelector","_negationPseudo$exec","blacklist","setStyle","onWidgetDragEnd","changeFloating","changePositioned","updatePositioned","cx","cy","changeWidth","_lastWidth","_flex","clearWidthCache","updateMaxWidth","updateMinWidth","updateFlex","updateAlignSelf","updateMargin","parseTRBL","updateTextAlign","oldAlign","updatePlaceholder","placeholder","input","changeHeight","_lastHeight","updateMaxHeight","updateMinHeight","_disabled","onDisabled","requestFullscreen","_oldParent","exitFullscreen","_me$_rootElement","_Widget$Tooltip2","activeTarget","changeTooltip","oldTooltip","_tooltip$html","isTooltip","btip","tipConfig","forSelector","showOnHover","innerHtmlUpdate","onTooltipValueChange","tooltipText","containingWidget","isPainted","toCallWhenVisible","styleProp","animProps","internalBeforeShow","cancelHideShowAnimation","_centered","transformOrigin","scaledAncestor","currentAnimation","showing","afterHideShowAnimate","afterShow","showBy","yCoord","xy","showByPoint","resolveFn","_me$owner$onChildShow","_configuredAnchorState","onChildShow","onChildHide","firstPaint","updateScale","hideBryntumDomMessage","isTaskBoardBase","isGridBase","Comment","Ripple","RippleClass","afterHideAnimation","suspendVisibility","_visibilitySuspended","resumeVisibility","takeRecords","afterHide","activeEl","newTarget","newX","newY","_me$owner2","_me$owner2$onChildHid","_me$documentScrollLis","_me$targetRootScrollL","_lastAlignSpec$constr","changeHidden","assignedId","_owner","_this$forElement","owningEl","getSibling","limit","_owner$closest","limitType","numericLimit","selectorLimit","steps","widgetMatches","eachAncestor","changeMonitorResize","oldMonitorResize","updateMonitorResize","changeReadOnly","updateReadOnly","_originalReadOnly","widgets","control","queryAll","getWidgetByRef","_this$widgetMap","widgetMap","containsFocus","focusInEvent","onInternalKeyDown","keyDownListenerRemover","captureFocus","activeElementWas","restore","captureFocusItem","elementOrWidget","_me$focusInEvent","searchDirection","toComponent","_owner$getFocusRevert","myIndex","getStaticWidgetClasses","topMostBase","widgetClassProperty","_widgetClassProperty","rootUiClass","staticClassList","_uiClasses","uiClassList","_uiClassList","changeCls","changeContentElementCls","changeHtmlCls","changeDefaultCls","changeUi","updateUi","fromCache","changeMasked","maskInstance","_this$masked","msg","onInternalResize","oldWidth","oldHeight","lastRect","newWidth","newHeight","onFloatingWidgetResize","suspendResizeMonitor","heightChange","widthChange","failsConstraint","adjustedScale","documentRoot","_this$owner2","_me$owner3","_me$owner4","_DomHelper$getThemeIn","themeName","screen","orientationchange","visualViewport","floatRootMaxZIndex","removeFloatRoot","waitForAnimations","typeOfType","topmost","cmpId","triggerFieldChange","_ancestor$onFieldChan","_ancestor$isolateFiel","onFieldChange","isolateFieldChange","isolateFields","configOrText","changeDock","Layout","onChildAdd","onChildRemove","renderChildren","itemCls","ownerItemCls","itemCount","syncPendingConfigs","syncChildCount","fixChildIndices","indexOfChild","childIndex","_owner$contentElement","syncConfigLater","pendingConfigs","syncConfigStyle","baseCls","containerCls","lastTouchTime","hasRipple","old_element","viewBox","startRadius","radius","onRippleControllingEvent","_me$listenerDetacher","rippleAnimation","circleElement","listenerDetacher","animationend","onMousedown","onTouchStart","handleTriggerEvent","targetWidget","rippleCfg","point","centreDelta","rippleStyle","rippleElement","borderRadius","onAnimationEnd","returnWeight","sortByWeight","MAX_SAFE_INTEGER","isNotHidden","stylesToCheck","boxLayouts","box","Container","lazyItems","layoutStyle","layout","autoUpdateRecord","autoUpdateFields","hideWhenEmpty","contentElMutationObserver","defaultFocus","flexRowCls","flexColCls","initialItems","hasItems","firstItem","ensureItems","_items","childToRemove","childToAdd","_childToAdd","createWidget","newValues","changeLazyItems","changeItems","oldItems","newItems","processItemsArray","processItemsObject","_createdBy","updateItems","temporary","updateHideWhenEmpty","initializingItems","addDescendant","onChildAddLayout","_this$_items","_this$_items2","enforceHideWhenEmpty","visibleItems","visibleLength","visibleChildCount","shouldHide","childItem","updateTextContent","_textContent","syncFlexDirection","_widgetMap","changeRecord","updateRecord","_me$recordUpdateDetac","recordUpdateDetacher","setValues","$highlight","onRecordUpdated","setRecord","highlightChanges","userAction","getValues","hasNoChildren","itemsArray","lazyItemsArray","whichItems","needsClass","updateLayoutStyle","onPaint","_super$onPaint","changeContentElMutationObserver","oldContentElMutationObserver","onContentElMutation","changeLayout","existingLayout","getWidgetById","processWidgetConfig","setupWidgetConfig","widgetConfig","updateDefaults","oldDefaults","firstFocusable","_w$ref","_this$_items3","_widget$destroy","valid","isSettingValues","assigningValues","_assigningValues","nostart","unitRe","getTransitions","$bryntum","transitions","_unitRe$exec","syncTransitions","completed","Anim","_delay","_duration","_retain","_timing","reverting","idSeed","startTime","_this$_delay","_this$_duration","Animator","defaultDuration","remaining","retain","_this$_retain","timing","_this$_timing","_this$owner3","_this$_unit","_this$owner4","AnimatorTransition","promissory","getCurrentStyleValue","finish","clearStyle","_this$promissory","complete","revert","_me$finish","finalize","prefinalize","fx","run","_me$items","anim","specialPropsRe","_me$finish2","_me$prefinalize","_me$finalize","_options$start","Transition","puff","ClickRepeater","startRate","endRate","accelerateDuration","pressedCls","_this$mousedownRemove","mousedownRemover","_me$activeElement","_me$acceleration","_me$activeListenerRem","acceleration","activeListenerRemover","autoRepeatTimer","repeatTimer","_this$mousedownRemove2","onMouseDown","triggerEvent","mousemove","mouseleave","mouseenter","onMouseUp","onTargetMouseLeave","onTargetMouseEnter","buttons","fireClick","onTargetMouseMove","startAutoRepeat","interval","startInterval","accelerationDelta","nextTick","clickEvent","autoRotateRe","inverted","TOP","RIGHT","BOTTOM","LEFT","canonicalDock","DOCK","rotate","invertRotate","syncRotationToDock","Tool","Rotatable","panel","isPanel","onInternalClick","domEvent","bryntumEvent","tool","cancelBubble","stopPropagation","_this$repeat","changeRepeat","oldRepeat","rightRe","autoAlign","collapsing","expandedHeaderDock","collapsible","CollapseTool","changeAutoAlign","syncAutoAlign","updateAutoAlign","updateCollapsed","updateCollapsing","updateDirection","defaultedDirectionRe","dockBeforeRe","emptySplit","headerDockRe","revealerCls","sideDockRe","unflexCls","canonicalDirection","clipByDock","collapseDirectionByPlacement","hl","hr","vb","vt","crossAxis","dockByDirection","dockIsHorz","directionByDock","transverseTransform","animation","collapseTooltip","expandTooltip","supportAxis","_this$collapsible","onCollapseClick","collapsingExpanding","_this$currentOperatio","currentOperation","currentDock","_this$panel$header$do","_this$panel","_this$panel$header","_this$panel$header$do2","header","expanding","collapseTool","_this$panel2","_this$panel2$tools","tools","collapseDim","collapseDir","getCollapseDir","canonical","_panel$header","collapseDock","collapseInfo","headerDock","hasHeader","transverse","toolsConfig","beforeCollapse","changeTool","_collapsed","_currentOperation","_currentOperation$ani","_currentOperation2","_currentOperation2$an","_me$collapseFinalize","collapseFinalize","_me$collapseFinalize2","changingCollapse","onComplete","_me$collapseFinalize3","applyHeaderDock","composeHeader","composeTitle","collapseBegin","_panel$headerElement","collapseToolClasses","unflex","transverseCollapse","panelRect","bodyWrapRect","lockInnerSize","bodyWrapClipRect","clipDir","headerRect","headerElement","collapsedSize","innerElement","collapseEnd","restoreConfiguredSize","collapseRevert","_this$collapseTool","expandBegin","elementClassList","fromRect","toRect","expandEnd","expandRevert","_this$collapseTool2","collapseWrapElement","bodyWrapElement","innerSizeElement","_supportAxis","fullSupport","lock","panelEl","headerEl","innerRect","innerStyle","_this$panel3","onHeaderClick","onRevealerClick","onPanelConfigChange","syncDirection","onPanelPaint","_collapse","_which","splitHeaderItems","updatePanel","_me$panelChangeDetach","panelChangeDetacher","wrapCollapser","_panel$tools","panelHeader","recollapse","titleAlign","collapserHeaderElement","maps","PENDING","DynamicObject","configName","created","factory","inferType","ownerName","proxyable","instances","proxy","instantiated","setDefaults","defineProp","_me$afterConfigureOwn","updating","afterConfigureOwner","inform","_me$created","members","toolConfigs","toolDefaults","byWeightSortFn","byWeightReverseSortFn","gatherTools","alignment","_tool$align$align","_tool","_tool$align","_tool2","asWidget","asRefs","getEndTools","getStartTools","changeTools","oldTools","manager","$tools","_instance$syncRotatio","_me$header","directionCls","syncAlign","syncContentAlign","syncJustify","syncWrap","Box","updateAlign","updateContentAlign","updateHorizontal","_me$contentElement","updateJustify","updateReverse","updateWrap","contentAlign","justify","VBox","badge","bIcon","bFa","defaultToggleable","fullConfigKeys","menuListenersName","Button","Badge","menuIcon","pressedIcon","iconAlign","toggleable","pressed","toggleGroup","menu","menuDefaults","autoShow","_constructor$resolveT","_constructor$resolveT2","_constructor$configur","hasMenu","iconCls","iconElement","label","menuIconElement","onHide","_this$_menu","_menu","_this$menu","changeText","changeToggleable","changeMenu","oldMenu","beforeShow","onMenuBeforeShow","onMenuShow","onMenuHide","updateMenu","updatePressed","_menu$_minHeight","_menu$_minWidth","btnEl","onInternalMousedown","_this$_menu2","asElementRefs","onCreateTwin","isToolbar","itemScoreFn","minifiable","twinOverrides","twinOverridesHorz","_axisProps","clientSizeProp","edgeProp","flexDir","scrollSize","sizeProp","defaultRepeat","nonSyncedConfigs","Toolbar","Toolable","syncOverflowVisibility","overflowMenuButton","overflowScrollEnd","overflowScrollStart","widgetCls","getEvictionList","axisProps","endToolElementRefs","startToolElementRefs","toolbarContent","_this$tools","overflowType","_item$syncRotationToD","processAddedLeafItem","onLeafItemConfigChange","isContainer","updateDock","updateOverflow","_item$syncRotationToD2","oldOverflow","_me$overflowMenuButto","overflowMenu","overflowTools","_me$scrollable","onContentScroll","syncScrollerState","onStartScrollClick","onEndScrollClick","menuOverflow","getAvailSpace","getContentSize","availableSpace","contentSize","eviction","evictionList","itemSize","minifiables","minified","overflowItems","inSyncOverflowVisibility","_toolbarOverflow","_toolbarMinified","_minifiables","_toolbarOverflowWidth","_minified","syncOverflowMenuButton","_overflowMenuButton$_","addToMenu","overflowItemFilter","isMenu","existingMenu","scrollPos","maxScrollPos","overflowingItems","toolbar","isTextField","acceptNode","FILTER_ACCEPT","FILTER_SKIP","finishBodyWrap","final","wrapBody","bodyWrapTag","barConfigs","dockDirection","Panel","bodyCls","bodyTag","trapFocus","stripDefaults","bbar","tbar","revealed","focusable","horz","composeBody","topFocusTrap","bottomFocusTrap","bodyConfig","bar","hasVisibleTools","maximizable","suppressChildHeaders","_me$collapsible","headerConfig","titleConfig","_me$_headerClickDetac","_headerClickDetacher","_me$trigger","_this$collapsible2","_this$collapsible3","asElement","endTools","startTools","_before$i$syncRotatio","_before$i","_after$i$syncRotation","_after$i","_bodyConfig","changeBodyCls","changeTbar","changeBbar","_me$collapsible2","before2","after2","changeStrips","oldStrips","$strips","_instance$layout","_this$collapsible4","_this$collapsible5","_this$collapsible6","changeCollapsed","changeCollapsible","updateCollapsible","_this$collapsible7","toggleCollapsed","_this$_expandedHeader","_this$initialConfig$h","_expandedHeaderDock","updateHeader","updateTrapFocus","_me$focusTrapListener","focusTrapListener","treeWalker","setupTreeWalker","SHOW_ELEMENT","whatToShow","createTreeWalker","onFocusTrapped","currentNode","previousNode","bodyElement","showOnClick","closeAction","focusOnToFront","closable","modal","maximized","maximize","highlightReturnedFocus","initialAnchor","onHeaderDblClick","syncModalMask","toggleMaximized","updateMaximized","toggleReveal","onDocumentMouseDown","isButton","modalMask","closeOnMaskTap","onShow","_super$onShow","addDocumentMouseDownListener","mouseDownRemover","globaltap","updateModal","remainingModals","topModal","_me$mouseDownRemover","_super$onHide","onElementUserAction","updateClosable","updateMaximizable","_modalMask","MenuItem","checked","closeParent","closeMenuDelay","_me$cls","isCheckItem","checkCls","hasCustomContent","textElement","subMenuIcon","doAction","itemEvent","newCheckedState","rootMenu","closeTimer","closeMenu","openMenu","andFocus","changeToggleGroup","changeChecked","updateChecked","uncheckToggleGroupMembers","getToggleGroupMembers","otherElement","partnerCheckItem","_closeParent","Menu","validKeys","ArrowUp","ArrowDown","ArrowRight","ArrowLeft","Enter","Escape","focusOnHover","_me$parentMenu","fromParentMenu","parentMenu","firstWidget","_me$currentSubMenu","_me$currentSubMenu$hi","currentSubMenu","onMouseClick","menuItem","triggerElement","onMouseOver","fromItemElement","toItemElement","overItem","handleMouseOver","onMouseEnter","onMouseLeave","leavingToChild","targetCmp","shouldHideMenu","sourceWidget","isFromWidget","active","navigateFrom","enterSubMenu","exitSubMenu","toActivate","openSubMenu","openedMenu","isSubMenu","menuItemElement","subMenu","_item$onBeforeSubMenu","onBeforeSubMenu","selectedElement","lastSelected","_selectedElement","lastItemMenu","doFocus","selectFirst","_result$up","contextMenuKeyEvent","ContextMenuBase","_this$type","onElementContextMenu","onElementEvent","onElementClick","onElementDblClick","originalEvent","internalShowContextMenu","showContextMenuByKey","getKeyboardContextMenuTarget","getDataFromEvent","shouldShowMenu","showContextMenu","getTargetElementFromEvent","_me$_menu","menuContext","processItems","elCenter","feature","selection","selectedRecords","callChainablePopulateMenuMethod","baseItems","preventDefaultEvent","hasActiveMenuItems","populateItemsWithData","beforeContextMenuShow","_me$touchMoveDetacher","touchMoveDetacher","_baseItems","hideContextMenu","eventParams","_this$client2","_eventParams$event","changeTriggerEvent","contextMenuTriggerEvent","onItem","onToggle","onDestroy","onBeforeItem","tagSpaceRe","multiSpaceRe","TemplateHelper","tpl","ack","docsTpl","times","loop","TimeZoneOffsetInfo","TimeZoneDate","parseStringDate","asLocalDate","_asLocalDate","asTicksUtc","_asTicksUtc","toTimeZoneInternal","tzDateString","toLocaleString","getOffsetUtc","ticks","tzTicksUtc","tzString","stringDate","offsetDateCache","_cache","_this$_cache$timeZone","offsetInfo","TimeZoneHelper","toTimeZone","toUtcOffset","tzDate","fromTimeZone","fromUtcOffset","dateArr","dateAsArray","offsetDates","findOffsetDates","startUtcTicks","incr","monthIndex","previousOffset","currentOffset","startTicks","startDateString","useOffset","utcTicks","utcOffset","Toast","destroyTimeout","timeout","autoDestroy","showProgress","bottomMargin","progressElement","untoast","nextBottom","toasts","_toasts$0$nextBottom","_toasts$","hideTimeout","destroyTimer","hideAll","toast","Navigator","itemsTabbable","keyEventTarget","processEvent","itemSelector","activeItem","focusCls","allowCtrlKey","allowShiftKey","scrollDuration","datasetIdProperty","_activeItem","updateOwnerCmp","navigationEvent","_navigationEvent","getComposedKeyName","keyName","onKeyDown","composedKeyName","validTarget","inlineFlow","itemContainer","itemPositionStyle","itemDisplayStyle","itemFloatStyle","prevKey","nextKey","navigatePrevious","navigateNext","_me$keys","keyHandler","getDefaultNavigationItem","triggerNavigate","onTargetFocusIn","skipScrollIntoView","previousActiveItem","_owner$previousSiblin","onTargetFocusOut","focusOutEvent","onTargetMouseDown","mouseDownEvent","itemsFocusable","onFocusGesture","onTargetClick","_me$navigationEvent","skipNextClick","ignoreNavigation","changeActiveItem","updateActiveItem","oldActiveItem","isActive","needsFocus","_ownerCmp$scrollable","scrollSilently","updateTarget","oldTarget","onTargetChildListChange","_me$target$querySelec","changeKeyEventTarget","_keyEventTarget","_this$ownerCmp","navEvent","oldItem","loadMaskDefaults","loadMaskError","applyLoadMask","applyMaskError","timeRe","DayTime","timeOfDay","endTime","startShift","isDayView","dayStartShift","dayStartTime","dayEndTime","timeStart","timeEnd","startHour","endHour","startTimeOffsetMs","today","startOfDay","outside","dateKey","shiftDate","dayOfDate","dayOfWeek","intersects","date0","date1","_dateRangeArgs","timeRange","isIntraDay","dayStart","isInterDay","timeSpan","allDay","sortEvents","eventRecord","start1","start2","endingDate","MIDNIGHT","MILLIS_PER_MINUTE","MILLIS_PER_HOUR","MILLIS_PER_DAY","ScrollManager","zoneWidth","scrollSpeed","startScrollDelay","stopScrollWhenPointerOut","activeScroll","monitoring","changeMonitoring","stopMonitoring","isScrolling","startMonitoring","defaultDirection","scrollables","attachedElements","createMonitor","_me$stopMonitoring","ScrollManagerMonitor","scrollManager","monitor","requestScroll","releaseScroll","getRelativeScroll","monitoredElement","scrollRelativeLeft","scrollRelativeTop","startScrollLeft","startScrollTop","pointerleave","stopScroll","startScroll","scrolling","performScroll","scrollRequested","scrollTimeout","onPointerLeave","onMouseMove","speed","scrollDeltaX","scrollDeltaY","oldScrollLeft","newScrollLeft","oldScrollTop","newScrollTop","onElementScroll","_this$config","_this$config$callback","verticalElement","getRelativeLeftScroll","getRelativeTopScroll","realignTransitions","isBoolean","mouseOffsetX","mouseOffsetY","getHtml","trackMouse","updateContentOnMouseMove","hideOnDelegateChange","anchorToTarget","hoverDelay","dismissDelay","hideDelay","loadingMsg","allowOver","pointerOverOutDetacher","pointerover","pointerout","_this$pointerOverOutD","_anchorToTarget","triggeredByEvent","timeStamp","abortDelayedShow","internalOnPointerOver","handleForElementOver","handleForElementOut","currentOverElement","_me$activeTarget","isNewTarget","needsHide","internalOnPointerOut","abortDelayedHide","afterShowByTarget","delayShow","_me$currentAnimation","showByTarget","lastHidden","quickShowInterval","listeningForMouseMove","mouseMoveRemover","changeAllowOver","inAfterShow","configuredAllowOver","updateAllowOver","_me$allowOverlistener","allowOverlisteners","tip","hasContent","showAsyncMessage","_me$mouseMoveRemover","updateActiveTarget","_me$activeTarget2","transitionEndDetacher","transitionend","_me$mouseMoveRemover2","_me$transitionEndDeta","_me$mouseMoveRemover3","_me$transitionEndDeta2","changeHtml","htmlOrPromise","isHiding","hideVetoed","isElementOut","containingElement","forElementContainsTarget","onOwnElementMouseEnter","skipCreating","_rootElement$bryntum","_rootElement$bryntum$","_rootElement$bryntum2","resetCfg","isShared","pointerOver","forComponent","gatherDataConfigs","configProp","encodeConfig","labelPosition","labelCls","labelWidth","hasLabel","changeLabel","setupLabel","lbl","updateLabelWidth","labelElement","inputWrap","flexBasis","FieldContainer","collapser","syncableConfigs","syncConfigTriggers","syncChildConfigs","_this$owner$inline","togglingCollapse","_this$collapser","setCollapsedCls","updateCollapser","setOwnerCls","_this$owner$element","destProp","afterSyncChildConfigs","syncContainer","autoLayout","collapseAnimation","containerWrapElement","byWeight","byWeightReverse","Labelable","labels","required","clearable","revertOnEscape","hint","hintHtml","inputWidth","keyStrokeChangeDelay","editable","triggers","highlightExternalChange","autoSelect","autoComplete","spellCheck","validateOnInput","inputAttributes","inputType","inputAlign","updatedClsDuration","inputReadOnly","containerDefaults","containValues","highlightChanged","_me$inputListenerRemo","_me$keyListenerRemove","_me$container","errorTip","getSharedErrorTooltip","inputListenerRemover","keyListenerRemover","invalidValueError","doNotCreate","sharedErrorTooltip","errorTooltip","onBeforeShow","errors","getErrors","changeOnKeyStroke","internalOnChange","changeKeyMap","_fieldKeyMap","triggerName","_me$triggers$triggerN","valueOnFocus","validOnFocus","focusing","syncInvalid","syncRequired","onEditComplete","innerElements","triggerInstances","startTriggers","endTriggers","innerChildren","_me$keyListenerRemove2","syncEmpty","updateInputReadOnly","keyEventElement","inputElement","inputCls","caretPos","textSelection","selectionStart","selectionEnd","selectionDirection","_input$value","hasTextSelection","getAfterValue","selectAll","supportsTextSelection","setSelectionRange","moveCaretToEnd","createTextRange","range","_this$triggers","isEmptyInput","updateHint","syncHint","updateHintHtml","hintValue","hintElement","updatingInvalid","updateEditable","syncInputReadOnly","updateClearable","changeTriggers","$triggers","Trigger","stepTriggers","back","forward","updateInputWidth","updateInputAlign","validity","changeValue","hasChanged","updateValue","inputting","triggerChange","_lastValue","syncInputFieldValue","_overflowTwinSync","skipHighlight","inputValueAttr","inputValue","removeUpdatedCls","internalOnInputFocus","fetchInputValue","internalOnInput","_me$changeOnKeyStroke","needsInputSync","_this$inputValue","internalOnKeyEvent","stopEvent","wasValid","valueChanged","clearError","setError","remover","focusOut","_errors","stateName","errorKeys","customError","validationMessage","containerCollapsed","_this$container","changeContainer","_this$container2","_this$container2$sync","storedValue","_storedValue","cvt","updateContainer","onClick","SpinTrigger","upButton","downButton","updateRepeat","_this$clickRepeater","clickRepeater","doSpinUp","doSpinDown","TextField","PickerField","pickerAlignElement","autoExpand","picker","_this$globalTapListen","globalTapListener","_me$globalTapListener","nonEditableClickTarget","onTriggerClick","_this$constructor$res","changePicker","oldPicker","_picker","autoClosePicker","pickerVisible","callSuper","hidePicker","minChars","ignoreTriggerClick","togglePicker","showKeyboard","showPicker","pickerHideShowListenersAdded","focusPicker","onPickerShow","pickerTapOutRemover","pickerKeyDownRemover","onPickerHide","_me$pickerTapOutRemov","_me$pickerKeyDownRemo","onPickerTapOut","onPickerKeyDown","forwardedEvent","defaultPrevented","itemRange","selectedCls","selectIconCls","displayField","multiSelect","toggleAllIfCtrlPressed","selectAllItem","itemTpl","getItemStyle","getItemCls","groupHeaderTpl","groupName","allowGroupSelect","selected","activateOnMouseover","_me$store","refresh","_this$navigator","_e$_target","restoreActiveItem","contentTpl","allRecordsTpl","itemWrapperTpl","selectAllItemTpl","getItemClasses","itemContentTpl","itemIconTpl","allSelected","_me$_navigator","_navigator","groupHeaderCls","isSelected","onBeforeStoreLoad","onAfterStoreRequest","onStoreChange","_externallyOwnedSelection","deselectAll","refreshItem","onStoreRefresh","_me$navigator","paintListener","clearItems","refreshCount","updateSelectAllState","paint","setStartAfter","_recordOrId","getRecordFromElement","changeSelected","oldSelected","initialSelection","_selected","_store","changeStore","storeListeners","beforeLoad","afterRequest","groupchange","updateStore","changeNavigator","oldNavigator","minAlignHeight","retVal","alignZone","itemElement","currentTarget","onItemClick","onSelectAllClick","lastClicked","onSelectionChange","unselectedCls","_this$element$querySe","toSelect","deselect","toDeselect","navigatorClass","ChipView","iconTpl","closeHandler","isKeyEvent","primaryFilter","valueField","pickerWidth","listItemTpl","displayValueRenderer","listCls","filterOnEnter","hideTrigger","overlayAnchor","keyStrokeFilterDelay","triggerAction","filterOperator","hidePickerOnSelect","chipView","chipStore","filterSelected","emptyText","valueCollection","clearTextOnPickerHide","destroyStore","multiValueSeparator","createOnUnmatched","inlinePicker","localizeDisplayFields","buildItems","queryLast","usingRecordAsValue","_chipView","_this$_chipView","chipViewElement","updateInlinePicker","changeChipStore","updateChipStore","changeChipView","oldChipView","ComboChipView","updateChipView","_me$_chipViewEventDet","_chipViewEventDetacher","updateMultiSelect","oldMultiSelect","fixValue","chipViewEl","onChipViewMousedown","mousedownEvent","onChipClose","updateFilterParamName","updateHideTrigger","updateKeyStrokeFilterDelay","filterOnInput","updateFilterOperator","_minChars","_validateFilter","updateBuildItems","isItemStore","itemModel","valueFieldDefinition","usesChipView","_me$hidePickerOnSelec","_me$_chipView","isUserAction","isAjaxStore","arrayPassed","noMatches","vcGen","onComboStoreChange","_this$chipView","_this$chipView2","changeValueCollection","oldValueCollection","noChange","changePrimaryFilter","storeFilters","sharedFilter","selectedItemsFilter","oldStore","_this$_store","selectionCount","activatePicker","_me$triggerAction","doFilter","lastQuery","syncInputWidth","inputLen","inputPadding","_inputPadding","_me$filterPromise","disableFilter","onAfterFilter","filterPromise","onStoreFilter","onValueCollectionChange","_me$hidePickerOnSelec2","cacheCurrentValue","onValueCollectionNoChange","_picker$navigator","_picker2","navigate","onPickerNavigate","addNewRecord","remoteAutoCommit","_exception$response","_exception$response$p","changeCreateOnUnmatched","defaultRecordCreater","localizedDisplayFieldsMap","_item$displayField","localeString","inClickHandler","Fit","Editor","onTargetSizeChange","beforeHide","onLocaleChange","inputField","startEdit","editObject","hideTarget","matchFont","fitTargetContent","_inputField$clearErro","_inputField$focus","_inputField$value$","targetFontSize","targetFontFamily","updateSize","fontSize","fontFamily","editing","editingRecords","refreshEdit","finishEdit","completeKey","completeEdit","cancelKey","cancelEdit","stopMouseEvents","allowMouseEvents","isFinishing","blurAction","invalidAction","allowInvalid","_context$editorContex","editorContext","_inputField$focus4","_inputField$focus3","_inputField$focus2","setterName","createdInputField","changeInputField","oldInputField","completeOnChange","updateInputField","onInputFieldChange","targetEl","lastMatchSize","beforeEditorHide","afterEditorHide"],"mappings":"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"}