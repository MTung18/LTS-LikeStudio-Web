/*!
 *
 * Bryntum Grid 5.3.0
 *
 * Copyright(c) 2023 Bryntum AB
 * https://bryntum.com/contact
 * https://bryntum.com/license
 *
 */
import{_defineProperty as e,DomHelper as l,InstancePlugin as r,Delayable as n}from"./Editor.js";import{ColumnStore as o,Column as t,GridFeatureManager as s}from"./GridBase.js";let i=!1;class a extends t{static get defaults(){return{tree:!0,hideable:!1,minWidth:150}}static get fields(){return[{name:"expandIconCls",defaultValue:"b-icon b-icon-tree-expand"},{name:"collapseIconCls",defaultValue:"b-icon b-icon-tree-collapse"},{name:"collapsedFolderIconCls"},{name:"expandedFolderIconCls"},{name:"indentSize",defaultValue:1.7},{name:"leafIconCls",defaultValue:"b-icon b-icon-tree-leaf"},{name:"editTargetSelector",defaultValue:".b-tree-cell-value"},"renderer"]}constructor(e,l){super(...arguments);const r=this;r.shouldHtmlEncode=r.htmlEncode,r.setData("htmlEncode",!1),r.renderer&&(r.originalRenderer=r.renderer),r.renderer=r.treeRenderer.bind(r)}treeRenderer(e){const r=this,{grid:n,column:o,cellElement:t,row:s,record:a,isExport:d}=e,c=a.instanceMeta(n.store),g=!a.isLeaf&&c.collapsed,u={className:"b-tree-cell-value"},p=[u],h={className:"b-tree-cell-inner",tag:a.href?"a":"div",href:a.href,target:a.target,children:p},C={"b-tree-parent-row":0,"b-tree-collapsed":0,"b-tree-expanded":0,"b-loading-children":0};let m,f,{value:b}=e;if(r.originalRenderer){var x;const l=r.originalRenderer(e),s=null===(x=n.hasFrameworkRenderer)||void 0===x?void 0:x.call(n,{cellContent:l,column:o});m="object"==typeof l&&!s,b=s?"":!1===l?t.innerHTML:l,e.rendererHtml=l}var y;m||(b=String(null!==(y=b)&&void 0!==y?y:""));if(d)return b;if(a.isLeaf)t.classList.add("b-tree-leaf-cell"),f=e.iconCls||a.iconCls||r.leafIconCls;else{var v;const l=!a.isExpanded(n.store),o=l?r.expandIconCls:r.collapseIconCls,s=l?r.collapsedFolderIconCls:r.expandedFolderIconCls;C["b-tree-parent-row"]=1,C["b-tree-collapsed"]=l,C["b-tree-expanded"]=!l,C["b-loading-children"]=c.isLoadingChildren,t.classList.add("b-tree-parent-cell"),p.unshift({tag:"i",className:{"b-tree-expander":1,[o]:1,"b-empty-parent":!(c.isLoadingChildren||!0===a.children||null!==(v=a.children)&&void 0!==v&&v.length)}}),i=f=e.iconCls||a.iconCls||s}if(f&&p.splice(p.length-1,0,{tag:"i",className:{"b-tree-icon":1,[f]:1}}),s.isRow&&(s.assignCls(C),!a.isLeaf))if(s.setAttribute("aria-expanded",!g),g)s.removeAttribute("aria-owns");else for(const e in n.subGrids){var w,A;const r=s.elements[e];l.setAttributes(r,{"aria-owns":null!==(w=a.children)&&void 0!==w&&w.length?null===(A=a.children)||void 0===A?void 0:A.map((l=>`${n.id}-${e}-${l.id}`)).join(" "):null})}m||r.shouldHtmlEncode||!b.includes("<")?(m&&Object.assign(u,b),u.children=u.children||[],u.children.unshift(m?null:b)):u.html=b;const E=a.childLevel*r.indentSize+(a.isLeaf?i?2:f?.5:.4:0);return h.style=`padding-inline-start:${E}em`,h}getCurrentConfig(e){const l=super.getCurrentConfig(e);return l.renderer=this.originalRenderer,l}}e(a,"$name","TreeColumn"),e(a,"type","tree"),o.registerColumnType(a,!0),a.exposeProperties(),a._$name="TreeColumn";const d=Promise.resolve();class c extends(r.mixin(n)){static get pluginConfig(){return{assign:["collapseAll","expandAll","collapse","expand","expandTo","toggleCollapse"],chain:["onElementPointerUp","onElementClick","bindStore"]}}construct(e,l){super.construct(e,l),this.treeColumn||console.info("To use the tree feature, one column should be configured with `type: 'tree'`"),e.store&&this.bindStore(e.store)}doDisable(e){if(e)throw new Error("Tree feature cannot be disabled")}get store(){return this.client.store}get treeColumn(){const e=this,{columns:l}=e.client;return e._treeColumn&&l.includes(e._treeColumn)||(e._treeColumn=l.find((e=>e.isTreeColumn))),e._treeColumn}bindStore(e){this.detachListeners("store"),e.ion({name:"store",beforeLoadChildren:"onBeforeLoadChildren",loadChildren:"onLoadChildren",loadChildrenException:"onLoadChildrenException",beforeToggleNode:"onBeforeToggleNode",thisObj:this})}async toggleCollapse(e,l,r=!1){if(null==e)throw new Error("Tree#toggleCollapse must be passed a record");const n=this,{store:o,client:t}=n,{rowManager:s}=t,i=o.getById(e),a=i.instanceMeta(o);if(await o.toggleCollapse(i,l)){const e=s.getRowFor(i);if(e&&i.ancestorsExpanded()){const l=n.treeColumn&&!n.treeColumn.subGrid.collapsed&&e.getCell(n.treeColumn.id);l&&e.renderCell(l)}n.isTogglingNode||(t.element.classList.add("b-toggling-node"),n.isTogglingNode=!0,n.requestAnimationFrame((()=>{t.element.classList.remove("b-toggling-node"),n.isTogglingNode=!1}))),t.trigger(a.collapsed?"collapseNode":"expandNode",{record:i}),t.trigger("toggleNode",{record:i,collapse:a.collapsed})}}async collapse(e){return this.toggleCollapse(e,!0)}async expand(e){return this.toggleCollapse(e,!1)}onBeforeToggleNode({record:e,collapse:l}){this.client.trigger("beforeToggleNode",{record:e,collapse:l})}onBeforeLoadChildren({source:e,params:l}){const r=e.getById(l[e.modelClass.idField]),n=this.client.rowManager.getRowFor(r);null==n||n.addCls("b-loading-children")}onLoadChildren({source:e,params:l}){const r=e.getById(l[e.modelClass.idField]),n=this.client.rowManager.getRowFor(r);null==n||n.removeCls("b-loading-children")}onLoadChildrenException({record:e}){const l=this.client.rowManager.getRowFor(e);null==l||l.removeCls("b-loading-children")}async expandOrCollapseAll(e=!0,l=this.store.rootNode){const{client:r,store:n}=this,o=[],t=[];return r.trigger("beforeToggleAllNodes",{collapse:e}),n.suspendEvents(),n.traverse((l=>{const r=l.instanceMeta(n);l.isLeaf||(e&&!r.collapsed?(this.toggleCollapse(l,!0,!0),t.push(...l.children)):!e&&r.collapsed&&(Array.isArray(l.children)&&t.push(...l.children),o.push(this.toggleCollapse(l,!1,!0))))}),l,l===n.rootNode),n.resumeEvents(),(e?d:Promise.all(o)).then((()=>{r.refreshRows(e),t.length&&(e?n.trigger("remove",{records:t,isCollapse:!0,isCollapseAll:!0}):n.trigger("add",{records:t,isExpand:!0,isExpandAll:!0})),r.trigger("toggleAllNodes",{collapse:e})}))}async collapseAll(){return this.expandOrCollapseAll(!0)}async expandAll(){return this.expandOrCollapseAll(!1)}async expandTo(e,l=!0){const r=this,{store:n,client:o}=r;if(Array.isArray(e)){if(e.length>0){o.suspendRefresh();for(let l=e.length-1;l>=0;l--){var t;const i=n.getById(e[l]);var s;if(0===l)null===(s=o.resumeRefresh)||void 0===s||s.call(o),o.rowManager.refresh();await(null===(t=r.expandTo)||void 0===t?void 0:t.call(r,i,0===l))}}return}const i=n.getById(e);if(!1!==i.instanceMeta(r.store).hiddenByCollapse){if(!i.ancestorsExpanded()){var a;const e=[];for(let l=i.parent;l&&!l.isRoot;l=l.parent)l.isExpanded(n)||e.unshift(l);for(const l of e)r.isDestroyed||await r.toggleCollapse(l,!1,!0);null===(a=o.refreshRows)||void 0===a||a.call(o)}!r.isDestroyed&&l&&await o.scrollRowIntoView(i)}}onElementPointerUp(e){const l=this,r=e.target,n=l.client.getCellDataFromEvent(e);(r.closest(".b-tree-expander")||l.expandOnCellClick&&null!=n&&n.record.isParent)&&l.toggleCollapse(n.record)}onElementClick(e){e.target.closest(".b-tree-expander")&&e.preventDefault()}toggleCollapseByKey(){const{focusedCell:e}=this.client;return(null==e?void 0:e.rowIndex)>-1&&!e.isActionable&&(this.toggleCollapse(e.id),!0)}expandIfSingleColumn(){return 1===this.client.columns.count&&this.expandByKey()}expandByKey(){const e=this,{client:l}=e,{focusedCell:r}=l,n=null==r?void 0:r.record;return!!(null!=r&&r.column.tree&&n.isParent&&n.instanceMeta(l.store).collapsed)&&(e.expand(n),!0)}collapseIfSingleColumn(){return 1===this.client.columns.count&&this.collapseByKey()}collapseByKey(){const e=this,{client:l}=e,{focusedCell:r}=l,n=null==r?void 0:r.record;if(null!=r&&r.column.tree){if(n.isParent&&!n.instanceMeta(l.store).collapsed)return e.collapse(n),!0;if(n.parent&&!n.parent.isRoot)return l.deselectAll(),l.focusCell({record:n.parent,column:r.column}),!0}return!1}}e(c,"$name","Tree"),e(c,"configurable",{expandOnCellClick:!1,keyMap:{" ":"toggleCollapseByKey",ArrowRight:"expandIfSingleColumn","Shift+ArrowRight":"expandByKey",ArrowLeft:"collapseIfSingleColumn","Shift+ArrowLeft":"collapseByKey"}}),c.featureClass="b-tree",c._$name="Tree",s.registerFeature(c,!1,"Grid"),s.registerFeature(c,!0,"TreeGrid");export{c as Tree,a as TreeColumn};
//# sourceMappingURL=Tree.js.map
