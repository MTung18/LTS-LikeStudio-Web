{"version":3,"file":"Scale.js","sources":["../../../../Core/lib/Core/widget/graph/Histogram.js","../../../../Core/lib/Core/widget/graph/Scale.js"],"sourcesContent":["import Widget from '../Widget.js';\nimport StringHelper from '../../helper/StringHelper.js';\nimport DomSync from '../../helper/DomSync.js';\nimport Tooltip from '../Tooltip.js';\n\n/**\n * @module Core/widget/graph/Histogram\n */\nconst\n    ns = 'http://www.w3.org/2000/svg',\n    // Outline series must overlay bars\n    typePrio = {\n        bar     : 1,\n        outline : 2,\n        text    : 3\n    },\n    byDatasetOrder = (l, r) => parseInt(l.dataset.order, 10) - parseInt(r.dataset.order, 10),\n    getField = s => s.field,\n    returnFalse = () => false;\n\n/**\n * Displays a simple bar histogram based upon an array of data objects passed in the {@link #config-data} config.\n * @extends Core/widget/Widget\n * @classtype histogram\n */\nexport default class Histogram extends Widget {\n    //region Config\n\n    static get type() {\n        return 'histogram';\n    }\n\n    static get $name() {\n        return 'Histogram';\n    }\n\n    static get defaultConfig() {\n        return {\n            /**\n             * An array of data objects used to drive the histogram. The property/properties used\n             * are defined in the {@link #config-series} option.\n             * @config {Object[]}\n             * @default\n             */\n            data : null,\n\n            /**\n             * The values to represent in bar form.\n             * @config {Number[]}\n             */\n            values : null,\n\n            /**\n             * Each item in the array must contain two properties:\n             *  - `type` A String, either `'bar'` or `'outline'`\n             *  - `field` A String, the name of the property to use from the data objects in the {@link #config-data} option.\n             * @config {Object[]}\n             */\n            series : null,\n\n            /**\n             * By default, the bars are scaled based upon the detected max value across all the series.\n             * A specific top value to represent the 100% height may be configured.\n             * @config {Number}\n             */\n            topValue : null,\n\n            element : {\n                children : [{\n                    ns,\n                    tag                 : 'svg',\n                    reference           : 'svgElement',\n                    width               : '100%',\n                    height              : '100%',\n                    preserveAspectRatio : 'none',\n                    children            : [{\n                        ns,\n                        tag       : 'g',\n                        reference : 'scaledSvgGroup'\n                    }, {\n                        ns,\n                        tag       : 'g',\n                        reference : 'unscaledSvgGroup'\n                    }]\n                }]\n            },\n\n            /**\n             * By default, all bars are rendered, even those with zero height. Configure this as `true`\n             * to omit zero height bars.\n             * @config {Number}\n             */\n            omitZeroHeightBars : null,\n\n            monitorResize : true,\n\n            /**\n             * A Function which returns a CSS class name to add to a rectangle element.\n             * The following parameters are passed:\n             * @param {Object} series - The series being rendered\n             * @param {Object} rectConfig - The rectangle configuration object\n             * @param {Object} datum - The datum being rendered\n             * @param {Number} index - The index of the datum being rendered\n             * @config {Function}\n             */\n            getRectClass : null,\n\n            /**\n             * A Function which returns the tooltip text to display when hovering a bar.\n             * The following parameters are passed:\n             * @param {Object} series - The series being rendered\n             * @param {Object} rectConfig - The rectangle configuration object\n             * @param {Object} datum - The datum being rendered\n             * @param {Number} index - The index of the datum being rendered\n             * @config {Function}\n             */\n            getBarTip : null,\n\n            /**\n             * A Function which returns the text to render inside a bar.\n             * The following parameters are passed:\n             * @param {Object} datum - The datum being rendered\n             * @param {Number} index - The index of the datum being rendered\n             * @config {Function}\n             */\n            getBarText : null,\n\n            getBarTextRenderData : null,\n\n            getBarTextTip : null\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    construct(config) {\n        super.construct(config);\n        this.scheduleRefresh = this.createOnFrame(this.refresh, [], this, true);\n        this.refresh();\n    }\n\n    set tip(tip) {\n        const me = this;\n\n        me.tip?.destroy();\n\n        if (tip) {\n            me._tip = Tooltip.new({\n                owner             : me,\n                forElement        : me.svgElement,\n                forSelector       : 'rect',\n                internalListeners : {\n                    beforeShow : 'up.onBeforeTipShow'\n                }\n            }, tip);\n        }\n        else {\n            me._tip = null;\n        }\n    }\n\n    onElementResize() {\n        super.onElementResize(...arguments);\n\n        const svgRect = this.svgElement.getBoundingClientRect();\n\n        this.scaledSvgGroup.setAttribute('transform', `scale(${svgRect.width} ${svgRect.height})`);\n    }\n\n    onBeforeTipShow({ source : tip }) {\n        const index = parseInt(tip.activeTarget.dataset.index);\n\n        tip.html = tip.contentTemplate({\n            histogram : this,\n            index\n        });\n    }\n\n    set series(value) {\n        const\n            me     = this,\n            series = me._series = {};\n\n        for (const id in value) {\n            // Providing\n            //\n            // \"series\" : {\n            //     \"foo\" : false\n            //     ...\n            //\n            // disables the \"foo\" serie (that could be defined on a prototype level for example)\n\n            if (value[id] !== false) {\n                const data = series[id] = Object.assign({}, value[id]);\n\n                // support type & field provided on config prototype level\n\n                if (!data.type && value[id].type) {\n                    data.type = value[id].type;\n                }\n\n                if (!data.field && value[id].field) {\n                    data.field = value[id].field;\n                }\n\n                if (!('order' in series)) {\n                    data.order = typePrio[data.type];\n                }\n\n                data.id = id;\n            }\n        }\n\n        me.scheduleRefresh();\n    }\n\n    get series() {\n        return this._series;\n    }\n\n    set data(data) {\n        const me = this;\n\n        // TODO:\n        // me.topValue = undefined;\n\n        me._data = data;\n\n        // Calculate the top value from all the series\n        if (!me.topValue) {\n            const fields   = Object.values(me.series).map(getField);\n\n            for (let i = 0, { length } = data; i < length; i++) {\n                for (let j = 0, { length } = fields; j < length; j++) {\n                    me.topValue = Math.max(me.topValue || 0, data[i][fields[j]]);\n                }\n            }\n        }\n\n        me.scheduleRefresh();\n    }\n\n    get data() {\n        return this._data;\n    }\n\n    set topValue(value) {\n        this._topValue = value;\n\n        this.scheduleRefresh();\n    }\n\n    get topValue() {\n        return this._topValue;\n    }\n\n    // Must exist from the start because configuration setters call it.\n    // Once configured, will be replaced with a function which schedules a refresh for the next animation frame.\n    scheduleRefresh() {\n\n    }\n\n    refresh() {\n        const\n            me             = this,\n            {\n                series,\n                _tip\n            }              = me,\n            histogramElements = [];\n\n        for (const id in series) {\n            const\n                data     = series[id],\n                elConfig = me[`draw${StringHelper.capitalize(data.type)}`](data);\n\n            if (Array.isArray(elConfig)) {\n                histogramElements.push.apply(histogramElements, elConfig);\n            }\n            else {\n                histogramElements.push(elConfig);\n            }\n        }\n\n        histogramElements.sort(byDatasetOrder);\n\n        DomSync.syncChildren({\n            domConfig      : { children : histogramElements },\n            configEquality : returnFalse\n        }, me.scaledSvgGroup);\n\n        DomSync.syncChildren({\n            domConfig : { children : me.drawText() }\n        }, me.unscaledSvgGroup);\n\n        if (_tip && _tip.isVisible) {\n            me.onBeforeTipShow({ source : _tip });\n        }\n    }\n\n    drawBar(series) {\n        const\n            me           = this,\n            {\n                topValue,\n                data,\n                omitZeroHeightBars,\n                barStyle\n            }            = me,\n            {\n                field,\n                order\n            }            = series,\n            defaultWidth = 1 / data.length,\n            children     = [];\n\n        let\n            width;\n\n        for (let index = 0, x = 0, { length } = data; index < length; index++, x += width) {\n            const\n                datum = data[index],\n                value = datum[field],\n                // limit height with topValue otherwise the histogram looks fine\n                // yet the bar tooltip picks wrong Y-coordinate and there is an empty space between it and the bar\n                height = datum.height || (value > topValue ? topValue : value) / topValue,\n                y = 1 - height,\n                rectConfig = (datum.rectConfig = {\n                    ns,\n                    tag     : 'rect',\n                    dataset : {}\n                }),\n                barTip = me.callback('getBarTip', me, [series, rectConfig, datum, index]);\n\n            // use either provided width or the calculated value\n            width = datum.width || defaultWidth;\n\n            if (barStyle) {\n                rectConfig.style = barStyle;\n            }\n            else {\n                delete rectConfig.style;\n            }\n            Object.assign(rectConfig.dataset, {\n                index,\n                order\n            });\n            Object.assign(rectConfig, {\n                x,\n                y,\n                width,\n                height,\n                class : me.callback('getRectClass', me, [series, rectConfig, datum, index])\n            });\n\n            if (barTip) {\n                rectConfig.dataset.btip = barTip;\n            }\n            else {\n                delete rectConfig.dataset.btip;\n            }\n\n            if (height || !omitZeroHeightBars) {\n                children.push(rectConfig);\n            }\n        }\n        return children;\n    }\n\n    drawOutline(series) {\n        const\n            me           = this,\n            {\n                topValue,\n                data\n            }            = me,\n            {\n                field,\n                order\n            }            = series,\n            defaultWidth = 1 / data.length,\n            coords       = ['M 0,1'],\n            result       = series.outlineElement || (series.outlineElement = {\n                ns,\n                tag     : 'path',\n                dataset : {\n                    order\n                }\n            });\n\n        let\n            barWidth,\n            command1 = 'M',\n            command2 = 'L';\n\n        for (let i = 0, x = 0, { length } = data; i < length; i++) {\n            const barHeight = 1 - data[i][field] / topValue;\n\n            // use either provided with or the calculated value\n            barWidth = data[i].width || defaultWidth;\n\n            coords.push(`${command1} ${x},${barHeight} ${command2} ${x += barWidth},${barHeight}`);\n            command1 = command2 = '';\n        }\n        // coords.push('1,1');\n\n        result.d = coords.join(' ');\n\n        return result;\n    }\n\n    drawText() {\n        const\n            me                = this,\n            { data }          = me,\n            defaultWidth      = 1 / data.length,\n            defaultY          = '100%',\n            unscaledSvgGroups = [];\n\n        for (let index = 0, width, x = 0, { length } = data; index < length; index++, x += width) {\n            width = data[index].width || defaultWidth;\n\n            const barText = me.callback('getBarText', me, [data[index], index]);\n\n            if (barText) {\n\n                const renderData = me.callback('getBarTextRenderData', me, [{\n                    ns,\n                    tag       : 'text',\n                    className : 'b-bar-legend',\n                    html      : barText,\n                    x         : `${(x + width / 2) * 100}%`,\n                    y         : data[index].y !== undefined ? data[index].y : defaultY,\n                    dataset   : {\n                        index\n                    }\n                }, data[index], index]);\n\n                const barTip = me.callback('getBarTextTip', me, [renderData, data[index], index]);\n                if (barTip) {\n                    renderData.dataset.btip = barTip;\n                }\n                else {\n                    delete renderData.dataset.btip;\n                }\n\n                unscaledSvgGroups.push(renderData);\n            }\n        }\n\n        return unscaledSvgGroups;\n    }\n\n    //endregion\n\n    // Injectable method\n    getBarText(datum, index) {\n        return '';\n    }\n\n    // Injectable method\n    getBarTextRenderData(renderData, datum, index) {\n        return renderData;\n    }\n\n    // Injectable method\n    getBarTip(series, rectConfig, datum, index) {\n\n    }\n\n    // Injectable method\n    getBarTextTip(renderData, datum, index) {\n\n    }\n\n    // Injectable method\n    getRectClass(series, rectConfig, datum, index) {\n        return '';\n    }\n}\n\nHistogram.initClass();\n","import Widget from '../Widget.js';\nimport DomSync from '../../helper/DomSync.js';\n\n/**\n * @module Core/widget/graph/Scale\n */\nconst\n    ns = 'http://www.w3.org/2000/svg';\n\n/**\n * Displays a scale with ticks and labels.\n * @extends Core/widget/Widget\n * @classtype scale\n */\nexport default class Scale extends Widget {\n    //region Config\n\n    static get type() {\n        return 'scale';\n    }\n\n    static get $name() {\n        return 'Scale';\n    }\n\n    static get configurable() {\n        return {\n            scalePoints : null,\n\n            // Padding after the max scale point.\n            // Expressed as the share of the height.\n            scaleMaxPadding : 0.1,\n\n            /**\n             * Configure as `true` to create a horizontal scale. Scales are vertical by default.\n             * @config {Boolean}\n             */\n            horizontal : false,\n\n            /**\n             * Side to align the scale to. Defaults to `bottom` for {@link #config-horizontal} Scales\n             * and `right` for vertical Scales.\n             * @config {String}\n             */\n            align : {\n                value   : false,\n                $config : {\n                    merge : 'replace'\n                }\n            },\n\n            element : {\n                children : [{\n                    ns,\n                    tag                 : 'svg',\n                    reference           : 'svgElement',\n                    width               : '100%',\n                    height              : '100%',\n                    preserveAspectRatio : 'none',\n                    children            : [{\n                        ns,\n                        tag       : 'g',\n                        reference : 'scaledSvgGroup',\n                        children  : [{\n                            ns,\n                            tag       : 'path',\n                            reference : 'pathElement'\n                        }]\n                    }, {\n                        ns,\n                        tag       : 'g',\n                        reference : 'unscaledSvgGroup'\n                    }]\n                }]\n            },\n\n            monitorResize : true\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    construct(config) {\n        super.construct(config);\n        this.scheduleRefresh = this.createOnFrame(this.refresh, [], this, true);\n        this.refresh();\n    }\n\n    changeAlign(align) {\n        if (!align) {\n            align = this.horizontal ? 'bottom' : 'right';\n        }\n        return align;\n    }\n\n    updateAlign(align, oldAlign) {\n        this.element.classList.remove(`b-align-${oldAlign}`);\n        this.element.classList.add(`b-align-${align}`);\n    }\n\n    updateHorizontal(horizontal, oldHorizontal) {\n        this.element.classList.remove(`b-scale-${oldHorizontal ? 'horizontal' : 'vertical'}`);\n        this.element.classList.add(`b-scale-${horizontal ? 'horizontal' : 'vertical'}`);\n    }\n\n    onElementResize() {\n        super.onElementResize(...arguments);\n        this.scheduleRefresh();\n    }\n\n    // Must exist from the start because configuration setters call it.\n    // Once configured, will be replaced with a function which schedules a refresh for the next animation frame.\n    scheduleRefresh() {\n\n    }\n\n    refresh() {\n        const\n            me             = this,\n            {\n                horizontal,\n                width,\n                height,\n                align,\n                scalePoints,\n                scaleMaxPadding\n            }                  = me,\n            scaleMax           = scalePoints[scalePoints.length - 1].value,\n            path               = [],\n            labels             = [];\n\n        const posFactor = 1 / (scaleMax + scaleMaxPadding * scaleMax);\n\n        me.scaledSvgGroup.setAttribute('transform', `scale(${horizontal ? width : 1} ${horizontal ? 1 : height})`);\n\n        for (const point of scalePoints) {\n            const isLabelStep = Boolean(point.text),\n                pos = posFactor * point.value;\n\n            if (isLabelStep) {\n                const label = {\n                    ns,\n                    tag       : 'text',\n                    className : 'b-scale-tick-label',\n                    html      : point.text,\n                    dataset   : {\n                        tick : point.value\n                    }\n                };\n\n                if (horizontal) {\n                    label.x = `${pos * 100}%`;\n                    label.y = align === 'top' ? '1.6em' : height - 12;\n                }\n                else {\n                    label.x = align === 'left' ? '12' : `${width - 12}`;\n                    label.y = `${(1 - pos) * 100}%`;\n                }\n                labels.push(label);\n            }\n\n            if (horizontal) {\n                if (align === 'top') {\n                    path.push(`M${pos},0 L${pos},${isLabelStep ? 10 : 5}`);\n                }\n                else {\n                    path.push(`M${pos},${height} L${pos},${height - (isLabelStep ? 10 : 5)}`);\n                }\n            }\n            else {\n                if (align === 'left') {\n                    path.push(`M0,${1 - pos} L${isLabelStep ? 10 : 5},${1 - pos}`);\n                }\n                else {\n                    path.push(`M${width},${1 - pos} L${width - (isLabelStep ? 10 : 5)},${1 - pos}`);\n                }\n            }\n        }\n        me.pathElement.setAttribute('d', path.join(''));\n        DomSync.syncChildren({\n            domConfig : { children : labels }\n        }, me.unscaledSvgGroup);\n    }\n\n    //endregion\n}\nScale.initClass();\n"],"names":["ns","typePrio","bar","outline","text","byDatasetOrder","l","r","parseInt","dataset","order","getField","s","field","returnFalse","Histogram","Widget","type","$name","defaultConfig","data","values","series","topValue","element","children","tag","reference","width","height","preserveAspectRatio","omitZeroHeightBars","monitorResize","getRectClass","getBarTip","getBarText","getBarTextRenderData","getBarTextTip","construct","config","super","this","scheduleRefresh","createOnFrame","refresh","tip","_me$tip","me","destroy","_tip","Tooltip","new","owner","forElement","svgElement","forSelector","internalListeners","beforeShow","onElementResize","arguments","svgRect","getBoundingClientRect","scaledSvgGroup","setAttribute","onBeforeTipShow","source","index","activeTarget","html","contentTemplate","histogram","value","_series","id","Object","assign","_data","fields","map","i","length","j","Math","max","_topValue","histogramElements","elConfig","StringHelper","capitalize","Array","isArray","push","apply","sort","DomSync","syncChildren","domConfig","configEquality","drawText","unscaledSvgGroup","isVisible","drawBar","barStyle","defaultWidth","x","datum","y","rectConfig","barTip","callback","style","class","btip","drawOutline","coords","result","outlineElement","barWidth","command1","command2","barHeight","d","join","unscaledSvgGroups","barText","renderData","className","undefined","initClass","_$name","Scale","configurable","scalePoints","scaleMaxPadding","horizontal","align","$config","merge","changeAlign","updateAlign","oldAlign","classList","remove","add","updateHorizontal","oldHorizontal","scaleMax","path","labels","posFactor","point","isLabelStep","Boolean","pos","label","tick","pathElement"],"mappings":"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"}