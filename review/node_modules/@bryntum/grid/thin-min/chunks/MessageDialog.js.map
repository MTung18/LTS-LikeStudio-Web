{"version":3,"file":"MessageDialog.js","sources":["../../../../Core/lib/Core/helper/mixin/DragHelperContainer.js","../../../../Core/lib/Core/helper/mixin/DragHelperTranslate.js","../../../../Core/lib/Core/helper/DragHelper.js","../../../../Core/lib/Core/helper/ResizeHelper.js","../../../../Core/lib/Core/helper/WidgetHelper.js","../../../../Core/lib/Core/helper/util/Formatter.js","../../../../Core/lib/Core/helper/util/NumberFormat.js","../../../../Core/lib/Core/util/Month.js","../../../../Core/lib/Core/widget/CalendarPanel.js","../../../../Core/lib/Core/widget/Checkbox.js","../../../../Core/lib/Core/widget/YearPicker.js","../../../../Core/lib/Core/widget/DisplayField.js","../../../../Core/lib/Core/widget/DatePicker.js","../../../../Core/lib/Core/widget/DateField.js","../../../../Core/lib/Core/widget/NumberField.js","../../../../Core/lib/Core/widget/TimePicker.js","../../../../Core/lib/Core/widget/TimeField.js","../../../../Core/lib/Core/widget/DurationField.js","../../../../Core/lib/Core/widget/FieldFilterPicker.js","../../../../Core/lib/Core/widget/Label.js","../../../../Core/lib/Core/widget/FieldFilterPickerGroup.js","../../../../Core/lib/Core/widget/MessageDialog.js"],"sourcesContent":["import Base from '../../Base.js';\nimport GlobalEvents from '../../GlobalEvents.js';\nimport DomHelper from '../../helper/DomHelper.js';\nimport Rectangle from '../../helper/util/Rectangle.js';\n\n// TODO: Use mousedown pos and not center too reposition\n\n/**\n * @module Core/helper/mixin/DragHelperContainer\n */\n\n/**\n * Mixin for DragHelper that handles dragging elements between containers (or rearranging within)\n *\n * @mixin\n * @private\n */\nexport default Target => class DragHelperContainer extends (Target || Base) {\n    static get $name() {\n        return 'DragHelperContainer';\n    }\n\n    //region Init\n\n    /**\n     * Initialize container drag mode.\n     * @private\n     */\n    initContainerDrag() {\n        const me = this;\n        //use container drag as default mode\n        if (!me.mode) {\n            me.mode = 'container';\n        }\n        if (me.mode === 'container' && !me.containers) {\n            throw new Error('Container drag mode must specify containers');\n        }\n    }\n\n    //endregion\n\n    //region Grab, update, finish\n\n    /**\n     * Grab an element which can be dragged between containers.\n     * @private\n     * @param event\n     * @returns {Boolean}\n     */\n    grabContainerDrag(event) {\n        const me = this;\n\n        // allow specified selectors to prevent drag\n        if (!me.ignoreSelector || !event.target.closest(me.ignoreSelector)) {\n            // go up from \"handle\" to draggable element\n            const element = DomHelper.getAncestor(event.target, me.containers, me.outerElement);\n\n            if (element) {\n                const box = element.getBoundingClientRect();\n\n                me.context = {\n                    element,\n                    valid            : true,\n                    action           : 'container',\n                    offsetX          : event.pageX - box.left,\n                    offsetY          : event.pageY - box.top,\n                    originalPosition : {\n                        parent : element.parentElement,\n                        prev   : element.previousElementSibling,\n                        next   : element.nextElementSibling\n                    }\n                };\n            }\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Starts dragging, called when mouse moves first time after grabbing\n     * @private\n     * @param event\n     */\n    startContainerDrag(event) {\n        const\n            me                          = this,\n            { context, floatRootOwner } = me,\n            { element : dragElement }   = context,\n            clonedNode                  = dragElement.cloneNode(true),\n            box                         = dragElement.getBoundingClientRect(),\n            outerWidgetEl               = floatRootOwner?.element.closest('.b-outer');\n\n        // init drag proxy\n        clonedNode.classList.add(me.dragProxyCls);\n        clonedNode.classList.add(me.draggingCls);\n\n        // Append drag proxy to float root, fall back to root context node\n        (floatRootOwner?.floatRoot || DomHelper.getRootElement(dragElement)).appendChild(clonedNode);\n        context.dragProxy = clonedNode;\n\n        // Always set the proxy element width manually, drag target could be sized with flex or % width\n        clonedNode.style.width  = box.width + 'px';\n        clonedNode.style.height = box.height + 'px';\n        DomHelper.setTranslateXY(context.dragProxy, box.left, box.top);\n\n        // style dragged element\n        context.dragging = dragElement;\n        dragElement.classList.add(me.dropPlaceholderCls);\n\n        // If element being dragged is also a child of the float root, add +1 to the cloned node z-index\n        if (outerWidgetEl?.parentElement?.matches('.b-float-root')) {\n            clonedNode.style.zIndex = floatRootOwner.floatRootMaxZIndex + 1;\n        }\n    }\n\n    /**\n     * Move the placeholder element into its new position on valid drag.\n     * @private\n     * @param event\n     */\n    updateContainerDrag(event) {\n        const\n            me          = this,\n            { context } = me;\n\n        if (!context.started || !context.targetElement) {\n            return;\n        }\n\n        const\n            containerElement = DomHelper.getAncestor(context.targetElement, me.containers, 'b-gridbase'),\n            willLoseFocus    = context.dragging?.contains(DomHelper.getActiveElement(context.dragging));\n\n        if (containerElement && DomHelper.isDescendant(context.element, containerElement)) {\n            // dragging over part of self, do nothing\n            return;\n        }\n\n        // The dragging element contains focus, and moving it within the DOM\n        // will cause focus loss which might affect an encapsulating autoClose Popup.\n        // Prevent focus loss handling during the DOM move.\n        if (willLoseFocus) {\n            GlobalEvents.suspendFocusEvents();\n        }\n        if (containerElement && context.valid) {\n            me.moveNextTo(containerElement, event);\n        }\n        else {\n            // dragged outside of containers, revert position\n            me.revertPosition();\n        }\n        if (willLoseFocus) {\n            GlobalEvents.resumeFocusEvents();\n        }\n\n        event.preventDefault();\n    }\n\n    /**\n     * Finalize drag, fire drop.\n     * @private\n     * @param event\n     * @fires drop\n     */\n    finishContainerDrag(event) {\n        const\n            me          = this,\n            { context } = me,\n            // extracting variables to make code more readable\n            { dragging, dragProxy, valid, draggedTo, insertBefore, originalPosition } = context;\n\n        if (dragging) {\n            // needs to have a valid target\n            context.valid = valid && draggedTo &&\n                    // no drop on self or parent\n                    (dragging !== insertBefore || originalPosition.parent !== draggedTo);\n\n            context.finalize = (valid = context.valid) => {\n                // revert if invalid (and context still exists, might have been aborted from outside)\n                if (!valid && me.context) {\n                    me.revertPosition();\n                }\n\n                dragging.classList.remove(me.dropPlaceholderCls);\n                dragProxy.remove();\n\n                me.reset();\n            };\n\n            // allow async finalization by setting async to true on context in drop handler,\n            // requires implementer to call context.finalize later to finish the drop\n            context.async = false;\n\n            me.trigger('drop', { context, event });\n\n            if (!context.async) {\n                // finalize immediately\n                context.finalize();\n            }\n        }\n    }\n\n    /**\n     * Aborts a drag operation.\n     * @private\n     * @param {Boolean} [invalid]\n     * @param {Object} [event]\n     * @param {Boolean} [silent]\n     */\n    abortContainerDrag(invalid = false, event = null, silent = false) {\n        const\n            me          = this,\n            { context } = me;\n\n        if (context.dragging) {\n            context.dragging.classList.remove(me.dropPlaceholderCls);\n            context.dragProxy.remove();\n\n            me.revertPosition();\n        }\n\n        if (!silent) {\n            me.trigger(invalid ? 'drop' : 'abort', { context, event });\n        }\n\n        me.reset();\n    }\n\n    //endregion\n\n    //region Helpers\n\n    /**\n     * Updates the drag proxy position.\n     * @private\n     * @param event\n     */\n    updateContainerProxy(event) {\n        const\n            me          = this,\n            { context } = me,\n            proxy       = context.dragProxy;\n\n        let newX = event.pageX - context.offsetX,\n            newY = event.pageY - context.offsetY;\n\n        if (typeof me.minX === 'number') {\n            newX = Math.max(me.minX, newX);\n        }\n\n        if (typeof me.maxX === 'number') {\n            newX = Math.min(me.maxX - proxy.offsetWidth, newX);\n        }\n\n        if (typeof me.minY === 'number') {\n            newY = Math.max(me.minY, newY);\n        }\n\n        if (typeof me.maxY === 'number') {\n            newY = Math.min(me.maxY  - proxy.offsetHeight, newY);\n        }\n\n        if (me.lockX) {\n            DomHelper.setTranslateY(proxy, newY);\n        }\n        else if (me.lockY) {\n            DomHelper.setTranslateX(proxy, newX);\n        }\n        else {\n            DomHelper.setTranslateXY(proxy, newX, newY);\n        }\n\n        let targetElement;\n\n        if (event.type === 'touchmove') {\n            const touch = event.changedTouches[0];\n            targetElement = DomHelper.elementFromPoint(touch.clientX, touch.clientY);\n        }\n        else {\n            targetElement = event.target;\n        }\n\n        context.targetElement = targetElement;\n    }\n\n    /**\n     * Positions element being dragged in relation to targetElement.\n     * @private\n     * @param targetElement\n     * @param event\n     */\n    moveNextTo(targetElement, event) {\n        const\n            { context } = this,\n            dragElement = context.dragging,\n            parent      = targetElement.parentElement;\n\n        if (targetElement !== dragElement) {\n            // dragged over a container and not over self, calculate where to insert\n\n            const centerX = Rectangle.from(targetElement).center.x;\n\n            if ((this.isRTL && event.pageX > centerX) || (!this.isRTL && event.pageX < centerX)) {\n                // dragged left of target center, insert before\n                parent.insertBefore(dragElement, targetElement);\n                context.insertBefore = targetElement;\n            }\n            else {\n                // dragged right of target center, insert after\n                if (targetElement.nextElementSibling) {\n                    // check that not dragged to the immediate left of self. in such case, position should not change\n                    if (targetElement.nextElementSibling !== dragElement) {\n                        context.insertBefore = targetElement.nextElementSibling;\n                        parent.insertBefore(dragElement, targetElement.nextElementSibling);\n                    }\n                    else if (!context.insertBefore && dragElement.parentElement.lastElementChild !== dragElement) {\n                        // dragged left initially, should stay in place (checked in finishContainerDrag)\n                        // TODO: or flag as invalid drag? since no change...\n                        context.insertBefore = targetElement.nextElementSibling;\n                    }\n                }\n                else {\n                    parent.appendChild(dragElement);\n                    context.insertBefore = null;\n                }\n            }\n\n            context.draggedTo = parent;\n        }\n    }\n\n    /**\n     * Moves element being dragged back to its original position.\n     * @private\n     */\n    revertPosition() {\n        const\n            { context }      = this,\n            { dragging }     = context,\n            { parent, next } = context.originalPosition;\n\n        // revert to correct location\n        if (next) {\n            const isNoop = next.previousSibling === dragging || (!next && dragging === parent.lastChild);\n\n            if (!isNoop) {\n                parent.insertBefore(dragging, next);\n            }\n        }\n        else {\n            parent.appendChild(dragging);\n        }\n\n        // no target container\n        context.draggedTo = null;\n    }\n\n    //endregion\n};\n","import Base from '../../Base.js';\nimport DomHelper from '../DomHelper.js';\nimport EventHelper from '../EventHelper.js';\nimport Delayable from '../../mixin/Delayable.js';\nimport Rectangle from '../util/Rectangle.js';\n\n/**\n * @module Core/helper/mixin/DragHelperTranslate\n */\n\nconst noScroll = { pageXOffset : 0, pageYOffset : 0 };\n\n/**\n * Mixin for DragHelper that handles repositioning (translating) an element within its container\n *\n * @mixin\n * @private\n */\nexport default Target => class DragHelperTranslate extends Delayable(Target || Base) {\n    static get $name() {\n        return 'DragHelperTranslate';\n    }\n\n    static get configurable() {\n        return {\n            positioning : null,\n\n            // Private config that disables updating elements position, for when data is live updated during drag,\n            // leading to element being redrawn\n            skipUpdatingElement : null\n        };\n    }\n\n    //region Init\n\n    /**\n     * Initialize translation drag mode.\n     * @private\n     */\n    initTranslateDrag() {\n        const me = this;\n\n        if (!me.isElementDraggable && me.targetSelector) {\n            me.isElementDraggable = element => element.closest(me.targetSelector);\n        }\n    }\n\n    //endregion\n\n    //region Grab, update, finish\n\n    /**\n     * Grab an element which can be moved using translation.\n     * @private\n     * @param event\n     * @returns {Boolean}\n     */\n    grabTranslateDrag(event) {\n        const element = this.getTarget(event);\n\n        if (element) {\n            this.context = {\n                valid : true,\n                element,\n\n                startPageX   : event.pageX,\n                startPageY   : event.pageY,\n                startClientX : event.clientX,\n                startClientY : event.clientY\n            };\n\n            return true;\n        }\n\n        return false;\n    }\n\n    getTarget(event) {\n        return event.target.closest(this.targetSelector);\n    }\n\n    getX(element) {\n        if (this.positioning === 'absolute') {\n            // Read left style rather than offsetLeft as it is impacted by margin-left style (Gantt milestones)\n            return parseFloat(element.style.left, 10);\n        }\n        else {\n            return DomHelper.getTranslateX(element);\n        }\n    }\n\n    getY(element) {\n        if (this.positioning === 'absolute') {\n            return parseFloat(element.style.top, 10);\n        }\n        else {\n            return DomHelper.getTranslateY(element);\n        }\n    }\n\n    getXY(element) {\n        if (this.positioning === 'absolute') {\n            return [element.offsetLeft, element.offsetTop];\n        }\n        else {\n            return DomHelper.getTranslateXY(element);\n        }\n    }\n\n    setXY(element, x, y) {\n        if (this.skipUpdatingElement) {\n            return;\n        }\n\n        if (this.positioning === 'absolute') {\n            element.style.left = x + 'px';\n            element.style.top  = y + 'px';\n        }\n        else {\n            DomHelper.setTranslateXY(element, x, y);\n        }\n    }\n\n    /**\n     * Start translating, called on first mouse move after dragging\n     * @private\n     * @param event\n     */\n    startTranslateDrag(event) {\n        const\n            me                                       = this,\n            { context, outerElement, proxySelector } = me,\n            // When cloning an element to be dragged, we place it in BODY by default\n            dragWithin                               = me.dragWithin = me.dragWithin || (me.cloneTarget && document.body);\n\n        let element = context.dragProxy || context.element;\n\n        const\n            grabbed       = element,\n            grabbedParent = element.parentElement;\n\n        if (me.cloneTarget) {\n            const\n                elementToClone                            = proxySelector ? element.querySelector(proxySelector) : element,\n                { width, height, x : proxyX, y : proxyY } = Rectangle.from(elementToClone, dragWithin);\n\n            element = me.createProxy(element);\n\n            let x = proxyX, y = proxyY;\n\n            // Match the grabbed element's size and position.\n            if (me.autoSizeClonedTarget) {\n                element.style.width  = `${width}px`;\n                element.style.height = `${height}px`;\n            }\n\n            element.classList.add(me.dragProxyCls, me.draggingCls);\n            // Remove some irrelevant CSS classes\n            element.classList.remove('b-hover', 'b-selected', 'b-focused');\n\n            dragWithin.appendChild(element);\n\n            if (!me.autoSizeClonedTarget || proxySelector) {\n                const\n                    // Center proxy at cursor position, we assume app is applying styles to the element (inline or CSS)\n                    proxyRect                            = element.getBoundingClientRect(),\n                    { x : dragWithinX, y : dragWithinY } = dragWithin.getBoundingClientRect(),\n                    localX                               = event.clientX - dragWithinX,\n                    // Body may have a non-zero top\n                    localY                               = event.clientY - dragWithinY + (dragWithin !== document.body ? document.body.getBoundingClientRect().y : 0);\n\n                x = localX - (proxyRect.width / 2);\n                y = localY - (proxyRect.height / 2);\n\n                // When proxy is centered, update to not use original mousedown coordinates, but the first mouse move triggering the drag\n                context.startPageX = event.pageX;\n                context.startPageY = event.pageY;\n            }\n\n            me.setXY(element, x, y);\n\n            grabbed.classList.add('b-drag-original');\n\n            if (me.hideOriginalElement) {\n                grabbed.classList.add('b-hidden');\n            }\n        }\n\n        element.classList.add(me.draggingCls);\n\n        Object.assign(context, {\n            // The element which we're moving, could be a cloned version of grabbed, or the grabbed element itself\n            element,\n\n            // The original element upon which the mousedown event triggered a drag operation\n            grabbed,\n\n            // The parent of the original element where the pointerdown was detected - to be able to restore after an invalid drop\n            grabbedParent,\n\n            // The next sibling of the original element where the pointerdown was detected - to be able to restore after an invalid drop\n            grabbedNextSibling : element.nextElementSibling,\n\n            // elements position within parent element\n            elementStartX : me.getX(element),\n            elementStartY : me.getY(element),\n            elementX      : DomHelper.getOffsetX(element, dragWithin || outerElement),\n            elementY      : DomHelper.getOffsetY(element, dragWithin || outerElement),\n\n            scrollX : 0,\n            scrollY : 0,\n\n            scrollManagerElementContainsDragProxy : !me.cloneTarget || dragWithin === outerElement\n        });\n\n        if (dragWithin) {\n            context.parentElement = element.parentElement;\n\n            if (dragWithin !== element.parentElement) {\n                dragWithin.appendChild(element);\n            }\n            me.updateTranslateProxy(event);\n        }\n    }\n\n    // When drag has started, create proxy versions (if applicable) and store original positions of all related elements\n    // to be able to animate back to these positions in case of an aborted drag\n    onDragStarted() {\n        const\n            me          = this,\n            { context } = me;\n\n        let { relatedElements } = context;\n\n        // For unified proxy mode - add a CSS class to the 'main' dragging element to be able to have it be on top of related elements with z-index\n        if (me.unifiedProxy) {\n            context.element.classList.add('b-drag-main', 'b-drag-unified-proxy');\n        }\n\n        if (relatedElements?.length > 0) {\n            context.relatedElStartPos    = [];\n            context.relatedElDragFromPos = [];\n\n            const { proxySelector } = me;\n\n            let [elementStartX, elementStartY] = [context.elementStartX, context.elementStartY];\n\n            // Store reference to original elements (may need cleanup to remove CSS classes after drop)\n            context.originalRelatedElements = relatedElements;\n            // Create clone proxy elements of all related elements\n            relatedElements                 = context.relatedElements = relatedElements.map((relatedEl, i) => {\n                const\n                    proxyTemplateElement    = proxySelector ? relatedEl.querySelector(proxySelector) : relatedEl,\n                    { x, y, width, height } = Rectangle.from(proxyTemplateElement, me.dragWithin),\n                    relatedElementToDrag    = me.cloneTarget ? me.createProxy(relatedEl) : relatedEl;\n\n                relatedElementToDrag.classList.add(me.draggingCls);\n                // Remove some irrelevant CSS classes\n                relatedElementToDrag.classList.remove('b-hover', 'b-selected', 'b-focused');\n\n                if (me.cloneTarget) {\n                    // Match the original related element's position.\n                    me.setXY(relatedElementToDrag, x, y);\n                    me.dragWithin.appendChild(relatedElementToDrag);\n                    relatedElementToDrag.classList.add(me.dragProxyCls);\n\n                    // Optionally also match the original related element's size\n                    if (me.autoSizeClonedTarget) {\n                        relatedElementToDrag.style.width  = `${width}px`;\n                        relatedElementToDrag.style.height = `${height}px`;\n                    }\n\n                    if (me.hideOriginalElement) {\n                        relatedEl.classList.add('b-hidden');\n                    }\n                    relatedEl.classList.add('b-drag-original');\n                }\n\n                context.relatedElStartPos[i] = context.relatedElDragFromPos[i] = me.getXY(relatedElementToDrag);\n\n                if (me.unifiedProxy) {\n                    relatedElementToDrag.classList.add('b-drag-unified-animation', 'b-drag-unified-proxy');\n                    // Move into cascade and cache the dragFrom pos\n                    elementStartX += me.unifiedOffset;\n                    elementStartY += me.unifiedOffset;\n                    me.setXY(relatedElementToDrag, elementStartX, elementStartY);\n                    context.relatedElDragFromPos[i]   = [elementStartX, elementStartY];\n                    relatedElementToDrag.style.zIndex = 100 - i;\n                }\n\n                return relatedElementToDrag;\n            });\n\n            // Move the selected events into a unified cascade.\n            if (me.unifiedProxy && relatedElements && relatedElements.length > 0) {\n                // Animate related elements should into the position\n                EventHelper.onTransitionEnd({\n                    element  : relatedElements[0],\n                    property : 'transform',\n                    handler() {\n                        relatedElements.forEach(el => el.classList.remove('b-drag-unified-animation'));\n                    },\n                    thisObj : me,\n                    once    : true\n                });\n            }\n        }\n    }\n\n    /**\n     * Limit translation to outer bounds and specified constraints\n     * @private\n     * @param element\n     * @param x\n     * @param y\n     * @returns {{constrainedX: *, constrainedY: *}}\n     */\n    applyConstraints(element, x, y) {\n        const\n            me                           = this,\n            { constrain, dragWithin }    = me,\n            { pageXOffset, pageYOffset } = dragWithin === document.body ? globalThis : noScroll;\n\n        // limit to outer elements edges\n        if (dragWithin && constrain) {\n            if (x < 0) {\n                x = 0;\n            }\n            if (x + element.offsetWidth > dragWithin.scrollWidth) {\n                x = dragWithin.scrollWidth - element.offsetWidth;\n            }\n\n            if (y < 0) {\n                y = 0;\n            }\n            if (y + element.offsetHeight > dragWithin.scrollHeight) {\n                y = dragWithin.scrollHeight - element.offsetHeight;\n            }\n        }\n\n        // limit horizontally\n        if (typeof me.minX === 'number') {\n            x = Math.max(me.minX + pageXOffset, x);\n        }\n        if (typeof me.maxX === 'number') {\n            x = Math.min(me.maxX + pageXOffset, x);\n        }\n\n        // limit vertically\n        if (typeof me.minY === 'number') {\n            y = Math.max(me.minY + pageYOffset, y);\n        }\n        if (typeof me.maxY === 'number') {\n            y = Math.min(me.maxY + pageYOffset, y);\n        }\n\n        return { constrainedX : x, constrainedY : y };\n    }\n\n    /**\n     * Update elements translation on mouse move.\n     * @private\n     * @param {MouseEvent} event\n     * @param {Object} scrollManagerConfig\n     */\n    updateTranslateProxy(event, scrollManagerConfig) {\n        const\n            me                                        = this,\n            { lockX, lockY, context }                 = me,\n            element                                   = context.dragProxy || context.element,\n            { relatedElements, relatedElDragFromPos } = context;\n\n        // If we are cloning the dragged element outside of the element(s) monitored by the ScrollManager, then no need\n        // to take the scrollManager scroll values into account since it is only relevant when dragProxy is inside\n        // the Grid (where scroll manager operates).\n        if (context.scrollManagerElementContainsDragProxy && scrollManagerConfig) {\n            context.scrollX = scrollManagerConfig.getRelativeLeftScroll(element);\n            context.scrollY = scrollManagerConfig.getRelativeTopScroll(element);\n        }\n\n        context.pageX   = event.pageX;\n        context.pageY   = event.pageY;\n        context.clientX = event.clientX;\n        context.clientY = event.clientY;\n\n        let\n            newX = context.elementStartX + event.pageX - context.startPageX + context.scrollX,\n            newY = context.elementStartY + event.pageY - context.startPageY + context.scrollY;\n\n        // First let outside world apply snapping\n        if (me.snapCoordinates) {\n            const snapped = me.snapCoordinates({ element, newX, newY });\n\n            newX = snapped.x;\n            newY = snapped.y;\n        }\n\n        // Now constrain coordinates\n        const { constrainedX, constrainedY } = me.applyConstraints(element, newX, newY);\n\n        if (context.started || constrainedX !== newX || constrainedY !== newY) {\n            me.setXY(element, lockX ? undefined : constrainedX, lockY ? undefined : constrainedY);\n        }\n\n        if (relatedElements) {\n            const\n                deltaX = lockX ? 0 : constrainedX - context.elementStartX,\n                deltaY = lockY ? 0 : constrainedY - context.elementStartY;\n\n            relatedElements.forEach((r, i) => {\n                const [x, y] = relatedElDragFromPos[i];\n\n                me.setXY(r, x + deltaX, y + deltaY);\n            });\n        }\n\n        context.newX = constrainedX;\n        context.newY = constrainedY;\n    }\n\n    /**\n     * Finalize drag, fire drop.\n     * @private\n     * @param event\n     * @fires drop\n     */\n    async finishTranslateDrag(event) {\n        const\n            me                  = this,\n            context             = me.context,\n            { target }          = event,\n            xChanged            = !me.lockX && Math.round(context.newX) !== Math.round(context.elementStartX),\n            yChanged            = !me.lockY && Math.round(context.newY) !== Math.round(context.elementStartY),\n            element             = context.dragProxy || context.element,\n            { relatedElements } = context;\n\n        if (!me.ignoreSamePositionDrop || xChanged || yChanged) {\n            if (context.valid === false) {\n                await me.abortTranslateDrag(true, event);\n            }\n            else  {\n                const targetRect = !me.allowDropOutside && Rectangle.from(me.dragWithin || me.outerElement);\n\n                if (targetRect && ((typeof me.minX !== 'number' && me.minX !== true && (event.pageX < targetRect.left)) ||\n                    (typeof me.maxX !== 'number' && me.maxX !== true && (event.pageX > targetRect.right)) ||\n                    (typeof me.minY !== 'number' && me.minY !== true && (event.pageY < targetRect.top)) ||\n                    (typeof me.maxY !== 'number' && me.maxY !== true && (event.pageY > targetRect.bottom)))) {\n                    // revert location when dropped outside allowed element\n                    context.valid = false;\n                    await me.abortTranslateDrag(true, event);\n                }\n                else {\n                    context.finalize = async(valid = context.valid) => {\n                        // In case someone tries to finalize twice\n                        if (context.finalized) {\n                            console.warn('DragHelper: Finalizing already finalized drag');\n                            return;\n                        }\n\n                        context.finalized = true;\n\n                        // abort if invalid (and context still exists, might have been aborted from outside)\n                        if (!valid && me.context) {\n                            // abort if flagged as invalid, without triggering abort or drop again\n                            await me.abortTranslateDrag(true, null, true);\n                        }\n\n                        if (!me.isDestroyed) {\n                            me.trigger('dropFinalized', { context, event, target });\n                            me.reset();\n                        }\n\n                        if (!me.cloneTarget && element.parentElement !== context.grabbedParent) {\n                            // If the dragged element was moved to another parent element, remove the transform style\n                            [element, ...(relatedElements || [])].forEach(el => el.style.transform = '');\n\n                        }\n                    };\n\n                    // allow async finalization by setting async to true on context in drop handler,\n                    // requires implementer to call context.finalize later to finish the drop\n                    context.async = false;\n\n                    await me.trigger('drop', { context, event, target });\n\n                    if (!context.async) {\n                        // finalize immediately\n                        await context.finalize();\n                    }\n                }\n            }\n        }\n        else {\n            // no change, abort but not as invalid\n            me.abortTranslateDrag(false, event);\n        }\n    }\n\n    /**\n     * Abort translation\n     * @private\n     * @param invalid\n     * @fires abort\n     */\n    async abortTranslateDrag(invalid = false, event = null, silent = false) {\n        const\n            me                                              = this,\n            {\n                cloneTarget,\n                context,\n                proxySelector,\n                dragWithin,\n                draggingCls\n            }                                               = me,\n            { relatedElements, relatedElStartPos, grabbed } = context,\n            element                                         = context.dragProxy || context.element;\n\n        me.scrollManager?.stopMonitoring();\n\n        if (context.aborted) {\n            console.warn('DragHelper: Aborting already aborted drag');\n            return;\n        }\n\n        let { elementStartX, elementStartY } = context;\n\n        if (element && context.started) {\n            // Put the dragged element back where it was\n            if (!cloneTarget && dragWithin && dragWithin !== context.grabbedParent) {\n                context.grabbedParent.insertBefore(element, context.grabbedNextSibling);\n            }\n\n            // Align the now visible grabbed element with the clone, so that it looks like it's\n            // sliding back into place when the clone is removed\n            if (cloneTarget) {\n                if (proxySelector) {\n                    const\n                        animateTo = grabbed.querySelector(proxySelector) || grabbed,\n                        { x, y }  = Rectangle.from(animateTo);\n\n                    elementStartX = x;\n                    elementStartY = y;\n                }\n\n                // TODO\n                // if (me.hideOriginalElement) {\n                //     [elementStartX, elementStartY] = DomHelper.getTranslateXY(grabbed);\n                //     DomHelper.alignTo(grabbed, element);\n                //\n                //     // The getBoundingClientRect is important. The aligning above must be processed\n                //     // by a forced synchronous layout *before* the b-aborting class is added below.\n                //     me.grabbed.getBoundingClientRect();\n                // }\n            }\n\n            // animated restore of position.\n            element.classList.add('b-aborting');\n\n            // Move the main element back to its original position.\n            me.setXY(element, elementStartX, elementStartY);\n\n            // Move any related elements back to their original positions.\n            relatedElements?.forEach((element, i) => {\n                element.classList.remove(draggingCls);\n                element.classList.add('b-aborting');\n\n                me.setXY(element, relatedElStartPos[i][0], relatedElStartPos[i][1]);\n            });\n\n            if (!silent) {\n                me.trigger(invalid ? 'drop' : 'abort', { context, event });\n            }\n\n            // Element may have been scrolled out of view, or otherwise removed while dragging\n            if (!DomHelper.isOrphaned(element) && !me.isDestroying) {\n                await EventHelper.waitForTransitionEnd({\n                    element,\n                    property     : DomHelper.getPropertyTransitionDuration(element, 'transform') ? 'transform' : 'all',\n                    thisObj      : me,\n                    once         : true,\n                    runOnDestroy : true\n                });\n            }\n\n            if (!me.isDestroyed) {\n                // Trigger event after transition has completed for UIs to redraw with stable DOM\n                me.trigger('abortFinalized', { context, event });\n            }\n        }\n\n        if (me.context?.started) {\n            me.reset();\n        }\n    }\n\n    // Restore state of all mutated elements\n    cleanUp() {\n        const\n            me                                                    = this,\n            { context, cloneTarget, draggingCls, dragProxyCls }   = me,\n            element                                               = context.dragProxy || context.element,\n            { relatedElements, originalRelatedElements, grabbed } = context,\n            removeClonedProxies                                   = cloneTarget && (me.removeProxyAfterDrop || !context.valid),\n            cssClassesToRemove                                    = [draggingCls, 'b-aborting', dragProxyCls, 'b-drag-main', 'b-drag-unified-proxy'];\n\n        element.classList.remove(...cssClassesToRemove);\n\n        if (removeClonedProxies) {\n            element.remove();\n        }\n        relatedElements?.forEach(element => {\n            if (removeClonedProxies) {\n                element.remove();\n            }\n            else {\n                element.classList.remove(...cssClassesToRemove);\n            }\n        });\n\n        // Restore originallly grabbed elements\n        grabbed.classList.remove('b-drag-original', 'b-hidden');\n        originalRelatedElements?.forEach(element => element.classList.remove('b-hidden', 'b-drag-original'));\n    }\n\n    //endregion\n};\n","import Base from '../Base.js';\nimport Events from '../mixin/Events.js';\nimport DragHelperContainer from './mixin/DragHelperContainer.js';\nimport DragHelperTranslate from './mixin/DragHelperTranslate.js';\nimport DomHelper from './DomHelper.js';\nimport EventHelper from './EventHelper.js';\nimport ObjectHelper from './ObjectHelper.js';\nimport Rectangle from './util/Rectangle.js';\n\n/**\n * @module Core/helper/DragHelper\n */\n\nconst rootElementListeners = {\n    move       : 'onMouseMove',\n    up         : 'onMouseUp',\n    docclick   : 'onDocumentClick',\n    touchstart : 'onTouchStart',\n    touchmove  : 'onTouchMove',\n    touchend   : 'onTouchEnd',\n    keydown    : 'onKeyDown'\n};\n\n/**\n * ## Intro\n * A drag drop helper class which lets you move elements in page. It supports:\n *\n *  * Dragging the actual element\n *  * Dragging a cloned version of the element\n *  * Dragging extra `relatedElements` along with the main element\n *  * Firing useful events {@link #event-beforeDragStart}, {@link #event-dragStart}, {@link #event-drag}, {@link #event-drop}, {@link #event-abort}\n *  * Validation by setting a `valid` Boolean on the drag context object provided to event listeners\n *  * Aborting drag with ESCAPE key\n *  * Constraining drag to be only horizontal or vertical using {@link #config-lockX} and {@link #config-lockY}\n *  * Defining X / Y boundaries using {@link #config-minX}, {@link #config-maxX} and {@link #config-minY}, {@link #config-maxY}\n *  * Async finalization (e.g. to show confirmation prompts)\n *  * Animated final transition after mouse up of a valid drop (see {@link #function-animateProxyTo})\n *  * Animated abort transition after an invalid or aborted drop\n *\n * {@inlineexample Core/helper/DragHelper.js}\n *\n * ## Two modes\n *\n * DragHelper supports two {@link #config-mode modes}:\n *\n * * `container` - moving / rearranging elements within and between specified containers\n * * `translateXY` - freely repositioning an element, either using the element or a cloned version of it - a \"drag proxy\" (default mode)\n *\n * ## Container drag mode\n *\n * Container drag should be used when moving or rearranging child elements within and between specified containers\n *\n * Example:\n * ```javascript\n * // dragging element between containers\n * let dragHelper = new DragHelper({\n *   mode       : 'container',\n *   containers : [ container1, container2 ]\n * });\n *```\n *\n * ## Translate drag mode\n *\n * Use translate drag to reposition an element within its container using transform CSS.\n *\n * Example:\n * ```javascript\n * // dragging element within container\n * let dragHelper = new DragHelper({\n *   mode           : 'translateXY',\n *   targetSelector : 'div.movable'\n * });\n * ```\n *\n * ## Observable events\n * In the various events fired by the DragHelper, you will have access to the raw DOM event and some useful `context` about the drag operation:\n *\n * ```javascript\n *  myDrag.on({\n *      drag : ({event , context}) {\n *            // The element which we're moving, could be a cloned version of grabbed, or the grabbed element itself\n *           const element = context.element;\n *\n *           // The original mousedown element upon which triggered the drag operation\n *           const grabbed = context.grabbed;\n *\n *           // The target under the current mouse / pointer / touch position\n *           const target = context.target;\n *       }\n *  });\n * ```\n *\n * ## Simple drag helper subclass with a drop target specified:\n * ```javascript\n * export default class MyDrag extends DragHelper {\n *      static get defaultConfig() {\n *          return {\n *              // Don't drag the actual cell element, clone it\n *              cloneTarget        : true,\n *              mode               : 'translateXY',\n *              // Only allow drops on DOM elements with 'yourDropTarget' CSS class specified\n *              dropTargetSelector : '.yourDropTarget',\n *\n *              // Only allow dragging elements with the 'draggable' CSS class\n *              targetSelector : '.draggable'\n *          };\n *      }\n *\n *      construct(config) {\n *          const me = this;\n *\n *          super.construct(config);\n *\n *          me.on({\n *              dragstart : me.onDragStart\n *          });\n *      }\n *\n *      onDragStart({ event, context }) {\n *          const target = context.target;\n *\n *          // Here you identify what you are dragging (an image of a user, grid row in an order table etc) and map it to something in your\n *          // data model. You can store your data on the context object which is available to you in all drag-related events\n *          context.userId = target.dataset.userId;\n *      }\n *\n *      onEquipmentDrop({ context, event }) {\n *          const me = this;\n *\n *          if (context.valid) {\n *              const userId   = context.userId,\n *                    droppedOnTarget = context.target;\n *\n *              console.log(`You dropped user ${userStore.getById(userId).name} on ${droppedOnTarget}`, droppedOnTarget);\n *\n *              // Dropped on a scheduled event, display toast\n *              WidgetHelper.toast(`You dropped user ${userStore.getById(userId).name} on ${droppedOnTarget}`);\n *          }\n *      }\n *  };\n * ```\n *\n * ## Dragging multiple elements\n *\n * You can tell the DragHelper to also move additional `relatedElements` when a drag operation is starting. Simply\n * provide an array of elements on the context object:\n *\n * ```javascript\n * new DragHelper ({\n *     callOnFunctions : true,\n *\n *     onDragStart({ context }) {\n *          // Let drag helper know about extra elements to drag\n *          context.relatedElements = Array.from(element.querySelectorAll('.b-resource-avatar'));\n *     }\n * });\n * ```\n *\n * ## Creating a custom drag proxy\n *\n * Using the {@link #function-createProxy} you can create any markup structure to use when dragging cloned targets.\n *\n * ```javascript\n * new DragHelper ({\n *    callOnFunctions      : true,\n *    // Don't drag the actual cell element, clone it\n *    cloneTarget          : true,\n *    // We size the cloned element using CSS\n *    autoSizeClonedTarget : false,\n *\n *    mode               : 'translateXY',\n *    // Only allow drops on certain DOM nodes\n *    dropTargetSelector : '.myDropTarget',\n *    // Only allow dragging cell elements in a Bryntum Grid\n *    targetSelector     : '.b-grid-row:not(.b-group-row) .b-grid-cell'\n *\n *    // Here we receive the element where the drag originated and we can choose to return just a child element of it\n *    // to use for the drag proxy (such as an icon)\n *    createProxy(element) {\n *        return element.querySelector('i').cloneNode();\n *    }\n * });\n * ```\n *\n * ## Animating a cloned drag proxy to a point before finalizing\n *\n * To provide users with the optimal user experience, you can set a `transitionTo` object (with `target` element and\n * `align` spec) on the DragHelper´s `context` object inside a {@link #event-drop} listener (only applies to translate\n * {@link #config-mode mode} operations). This will trigger a final animation of the drag proxy which should represent\n * the change of data state that will be triggered by the drop.\n *\n * You can see this in action in Gantt´s `drag-resource-from-grid` demo.\n *\n * ```javascript\n * new DragHelper ({\n *    callOnFunctions      : true,\n *    // Don't drag the actual cell element, clone it\n *    cloneTarget          : true,\n *    // We size the cloned element using CSS\n *    autoSizeClonedTarget : false,\n *\n *    mode               : 'translateXY',\n *    // Only allow drops on certain DOM nodes\n *    dropTargetSelector : '.myDropTarget',\n *    // Only allow dragging cell elements in a Bryntum Grid\n *    targetSelector     : '.b-grid-row:not(.b-group-row) .b-grid-cell'\n *\n *    // Here we receive the element where the drag originated and we can choose to return just a child element of it\n *    // to use for the drag proxy (such as an icon)\n *    createProxy(element) {\n *        return element.querySelector('i').cloneNode();\n *    },\n *\n *    async onDrop({ context, event }) {\n *       // If it's a valid drop, provide a point to animate the proxy to before finishing the operation\n *      if (context.valid) {\n *          await this.animateProxyTo(someElement, {\n *               // align left side of drag proxy to right side of the someElement\n *               align  : 'l0-r0'\n *          });\n *      }\n *      else {\n *          Toast.show(`You cannot drop here`);\n *      }\n *   }\n * });\n * ```\n *\n * @mixes Core/mixin/Events\n * @extends Core/Base\n */\nexport default class DragHelper extends Base.mixin(Events, DragHelperContainer, DragHelperTranslate) {\n    //region Config\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Drag proxy CSS class\n             * @config {String}\n             * @default\n             * @private\n             */\n            dragProxyCls : 'b-drag-proxy',\n\n            /**\n             * CSS class added when drag is invalid\n             * @config {String}\n             * @default\n             */\n            invalidCls : 'b-drag-invalid',\n\n            /**\n             * CSS class added to the source element in Container drag\n             * @config {String}\n             * @default\n             * @private\n             */\n            draggingCls : 'b-dragging',\n\n            /**\n             * CSS class added to the source element in Container drag\n             * @config {String}\n             * @default\n             * @private\n             */\n            dropPlaceholderCls : 'b-drop-placeholder',\n\n            /**\n             * The amount of pixels to move mouse before it counts as a drag operation\n             * @config {Number}\n             * @default\n             */\n            dragThreshold : 5,\n\n            /**\n             * The outer element where the drag helper will operate (attach events to it and use as outer limit when looking for ancestors)\n             * @config {HTMLElement}\n             * @default\n             */\n            outerElement : document.body,\n\n            /**\n             * Outer element that limits where element can be dragged\n             * @config {HTMLElement}\n             */\n            dragWithin : null,\n\n            /**\n             * Set to true to stack any related dragged elements below the main drag proxy element. Only applicable when\n             * using translate {@link #config-mode} with {@link #config-cloneTarget}\n             * @config {Boolean}\n             */\n            unifiedProxy : null,\n\n            monitoringConfig : null,\n\n            /**\n             * Constrain translate drag to dragWithin elements bounds (set to false to allow it to \"overlap\" edges)\n             * @config {Boolean}\n             * @default\n             */\n            constrain : true,\n\n            /**\n             * Smallest allowed x when dragging horizontally.\n             * @config {Number}\n             */\n            minX : null,\n\n            /**\n             * Largest allowed x when dragging horizontally.\n             * @config {Number}\n             */\n            maxX : null,\n\n            /**\n             * Smallest allowed y when dragging horizontally.\n             * @config {Number}\n             */\n            minY : null,\n\n            /**\n             * Largest allowed y when dragging horizontally.\n             * @config {Number}\n             */\n            maxY : null,\n\n            /**\n             * Enabled dragging, specify mode:\n             * <table>\n             * <tr><td>container<td>Allows reordering elements within one and/or between multiple containers\n             * <tr><td>translateXY<td>Allows dragging within a parent container\n             * </table>\n             * @config {'container'|'translateXY'}\n             * @default\n             */\n            mode : 'translateXY',\n\n            /**\n             * A function that determines if dragging an element is allowed. Gets called with the element as argument,\n             * return true to allow dragging or false to prevent.\n             * @config {Function}\n             */\n            isElementDraggable : null,\n\n            /**\n             * A CSS selector used to determine if dragging an element is allowed.\n             * @config {String}\n             */\n            targetSelector : null,\n\n            /**\n             * A CSS selector used to determine if a drop is allowed at the current position.\n             * @config {String}\n             */\n            dropTargetSelector : null,\n\n            /**\n             * A CSS selector added to each drop target element while dragging.\n             * @config {String}\n             */\n            dropTargetCls : null,\n\n            /**\n             * A CSS selector used to target a child element of the mouse down element, to use as the drag proxy element.\n             * Applies to translate {@link #config-mode mode} when using {@link #config-cloneTarget}.\n             * @config {String}\n             */\n            proxySelector : null,\n\n            /**\n             * Set to `true` to clone the dragged target, and not move the actual target DOM node.\n             * @config {Boolean}\n             * @default\n             */\n            cloneTarget : false,\n\n            /**\n             * Set to `false` to not apply width/height of cloned drag proxy elements.\n             * @config {Boolean}\n             * @default\n             */\n            autoSizeClonedTarget : true,\n\n            /**\n             * Set to true to hide the original element while dragging (applicable when `cloneTarget` is true).\n             * @config {Boolean}\n             * @default\n             */\n            hideOriginalElement : false,\n\n            /**\n             * Containers whose elements can be rearranged (and moved between the containers). Used when\n             * mode is set to \"container\".\n             * @config {HTMLElement[]}\n             */\n            containers : null,\n\n            /**\n             * A CSS selector used to exclude elements when using container mode\n             * @config {String}\n             */\n            ignoreSelector : null,\n\n            startEvent : null,\n\n            /**\n             * Configure as `true` to disallow dragging in the `X` axis. The dragged element will only move vertically.\n             * @config {Boolean}\n             * @default\n             */\n            lockX : false,\n\n            /**\n             * Configure as `true` to disallow dragging in the `Y` axis. The dragged element will only move horizontally.\n             * @config {Boolean}\n             * @default\n             */\n            lockY : false,\n\n            /**\n             * The amount of milliseconds to wait after a touchstart, before a drag gesture will be allowed to start.\n             * @config {Number}\n             * @default\n             */\n            touchStartDelay : 300,\n\n            /**\n             * Scroll manager of the target. If specified, scrolling while dragging is supported.\n             * @config {Core.util.ScrollManager}\n             */\n            scrollManager : null,\n\n            /**\n             * A method provided to snap coordinates to fixed points as you drag\n             * @config {Function}\n             * @internal\n             */\n            snapCoordinates : null,\n\n            /**\n             * When using {@link #config-unifiedProxy}, use this amount of pixels to offset each extra element when dragging multiple items\n             * @config {Number}\n             * @default\n             */\n            unifiedOffset : 5,\n\n            /**\n             * Configure as `false` to take ownership of the proxy element after a valid drop (advanced usage).\n             * @config {Boolean}\n             * @default\n             */\n            removeProxyAfterDrop : true,\n\n            clickSwallowDuration : 50,\n\n            ignoreSamePositionDrop : true,\n\n            // true to allow drops outside the dragWithin element\n            allowDropOutside : null,\n            // for container mode\n            floatRootOwner   : null,\n\n            mouseMoveListenerElement : document,\n\n            testConfig : {\n                transitionDuration   : 10,\n                clickSwallowDuration : 50,\n                touchStartDelay      : 100\n            },\n\n            rtlSource : null,\n\n            /**\n             * Creates the proxy element to be dragged, when using {@link #config-cloneTarget}. Clones the original element by default.\n             * Provide your custom {@link #function-createProxy} function to be used for creating drag proxy.\n             * @param {HTMLElement} element The element from which the drag operation originated\n             * @config {Function}\n             * @typings {Function(HTMLElement): HTMLElement}\n             */\n            createProxy : null\n        };\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Fired before dragging starts, return `false` to prevent the drag operation.\n     * @preventable\n     * @event beforeDragStart\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {HTMLElement} context.element The original element upon which the mousedown event triggered a drag operation\n     * @param {MouseEvent|TouchEvent} event\n     */\n\n    /**\n     * Fired when dragging starts. The event includes a `context` object. If you want to drag additional elements you can\n     * provide these as an array of elements assigned to the `relatedElements` property of the context object.\n     * @event dragStart\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {HTMLElement} context.element The element which we're moving, could be a cloned version of grabbed, or the grabbed element itself\n     * @param {HTMLElement} context.grabbed The original element upon which the mousedown event triggered a drag operation\n     * @param {HTMLElement[]} context.relatedElements Array of extra elements to include in the drag.\n     * @param {MouseEvent|TouchEvent} event\n     */\n\n    /**\n     * Fired while dragging, you can signal that the drop is valid or invalid by setting `context.valid = false;`\n     * @event drag\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {HTMLElement} context.element The element which we are moving, could be a cloned version of grabbed, or the grabbed element itself\n     * @param {HTMLElement} context.target The target element below the cursor\n     * @param {HTMLElement} context.grabbed The original element upon which the mousedown event triggered a drag operation\n     * @param {HTMLElement[]} context.relatedElements An array of extra elements dragged with the main dragged element\n     * @param {Boolean} context.valid Set this to true or false to indicate whether the drop position is valid.\n     * @param {MouseEvent} event\n     */\n\n    /**\n     * Fired after a drop at an invalid position\n     * @event abort\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {HTMLElement} context.element The element which we are moving, could be a cloned version of grabbed, or the grabbed element itself\n     * @param {HTMLElement} context.target The target element below the cursor\n     * @param {HTMLElement} context.grabbed The original element upon which the mousedown event triggered a drag operation\n     * @param {HTMLElement[]} context.relatedElements An array of extra elements dragged with the main dragged element\n     * @param {MouseEvent} event\n     */\n\n    /**\n     * Fires after {@link #event-abort} and after drag proxy has animated back to its original position\n     * @private\n     * @event abortFinalized\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {HTMLElement} context.element The element which we are moving, could be a cloned version of grabbed, or the grabbed element itself\n     * @param {HTMLElement} context.target The target element below the cursor\n     * @param {HTMLElement} context.grabbed The original element upon which the mousedown event triggered a drag operation\n     * @param {MouseEvent} event\n     */\n    //endregion\n\n    //region Init\n\n    /**\n     * Initializes a new DragHelper.\n     * @param {DragHelperConfig} config Configuration object, accepts options specified under Configs above\n     * @example\n     * new DragHelper({\n     *   containers: [div1, div2],\n     *   isElementDraggable: element => element.className.contains('handle'),\n     *   outerElement: topParent,\n     *   listeners: {\n     *     drop: onDrop,\n     *     thisObj: this\n     *   }\n     * });\n     * @function constructor\n     */\n    construct(config) {\n        const me = this;\n\n        super.construct(config);\n\n        me.initListeners();\n\n        if (me.isContainerDrag) {\n            me.initContainerDrag();\n        }\n        else {\n            me.initTranslateDrag();\n        }\n\n        me.onScrollManagerScrollCallback = me.onScrollManagerScrollCallback.bind(me);\n    }\n\n    doDestroy() {\n        this.reset(true);\n        super.doDestroy();\n    }\n\n    /**\n     * Initialize listener\n     * @private\n     */\n    initListeners() {\n        const\n            me                 = this,\n            { outerElement }   = me,\n            dragStartListeners = {\n                element     : outerElement,\n                pointerdown : 'onPointerDown',\n                thisObj     : me\n            };\n\n        me.mouseMoveListenerElement = me.getMouseMoveListenerTarget(outerElement);\n\n        // These will be autoDetached upon destroy\n        EventHelper.on(dragStartListeners);\n    }\n\n    // Salesforce hook: we override this method to move listener from the body (which is default root node) to element\n    // inside of LWC\n    getMouseMoveListenerTarget(element) {\n        const root = element.getRootNode();\n\n        let result = this.mouseMoveListenerElement;\n\n        // If we are inside a closed shadow root and we are a child of a Widget, listen to mouse moves only inside outermost el\n        if (root.nodeType === Node.DOCUMENT_FRAGMENT_NODE && root.mode === 'closed') {\n            result = element.closest('.b-outer') || result;\n        }\n\n        return result;\n    }\n\n    get isRTL() {\n        return Boolean(this.rtlSource?.rtl);\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Fires after drop. For valid drops, it exposes `context.async` which you can set to true to signal that additional\n     * processing is needed before finalizing the drop (such as showing some dialog). When that operation is done, call\n     * `context.finalize(true/false)` with a boolean that determines the outcome of the drop.\n     *\n     * You can signal that the drop is valid or invalid by setting `context.valid = false;`\n     *\n     * For translate type drags with {@link #config-cloneTarget}, you can also set `transitionTo` if you want to animate\n     * the dragged proxy to a position before finalizing the operation. See class intro text for example usage.\n     *\n     * @event drop\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {HTMLElement} context.element The element which we are moving, could be a cloned version of grabbed, or the grabbed element itself\n     * @param {HTMLElement} context.target The target element below the cursor\n     * @param {HTMLElement} context.grabbed The original element upon which the mousedown event triggered a drag operation\n     * @param {HTMLElement[]} context.relatedElements An array of extra elements dragged with the main dragged element\n     * @param {Boolean} context.valid true if the drop position is valid\n     */\n\n    /**\n     * Fires after {@link #event-drop} and after drag proxy has animated to its final position (if setting `transitionTo`\n     * on the drag context object).\n     * @private\n     * @event dropFinalized\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {HTMLElement} context.element The element which we are moving, could be a cloned version of grabbed, or the grabbed element itself\n     * @param {HTMLElement} context.target The target element below the cursor\n     * @param {HTMLElement} context.grabbed The original element upon which the mousedown event triggered a drag operation\n     */\n\n    onPointerDown(event) {\n        const me = this;\n\n        if (\n            // Left button or touch allowed\n            event.button !== 0 ||\n            // Visibility check is needed because mousedown on a just-created event element\n            // will cause the EventEdit to cancel the add, remove the record and hide the element\n            // *but* the mousedown event still bubbles to here and that will throw an error.\n            !DomHelper.isVisible(event.target) ||\n            // If a drag is ongoing already, finalize it and don't proceed with new drag (happens if pointerup happened\n            // when current window wasn't focused - tab switch or window switch). Also handles the edge case of trying to\n            // start a new drag while previous is awaiting finalization, in which case it just bails out.\n            me.context\n        ) {\n            return;\n        }\n\n        // Check that element is draggable\n        if (me.isElementDraggable && !me.isElementDraggable(event.target, event)) {\n            return;\n        }\n\n        me.startEvent = event;\n\n        const handled = me.isContainerDrag ? me.grabContainerDrag(event) : me.grabTranslateDrag(event);\n\n        if (handled) {\n            me.blurDetacher = EventHelper.on({\n                element : globalThis,\n                blur    : me.onWindowBlur,\n                thisObj : me\n            });\n\n            const dragListeners = {\n                element : me.mouseMoveListenerElement,\n                thisObj : me,\n                capture : true,\n                keydown : rootElementListeners.keydown\n            };\n\n            if (event.pointerType === 'touch') {\n                me.touchStartTimer = me.setTimeout(() => me.touchStartTimer = null, me.touchStartDelay, 'touchStartDelay');\n\n                dragListeners.touchmove = {\n                    handler : rootElementListeners.touchmove,\n                    passive : false // We need to be able to preventDefault on the touchmove\n                };\n\n                // Touch desktops don't fire touchend event when touch has ended, instead pointerup is fired\n                // iOS do fire touchend\n                dragListeners.touchend = dragListeners.pointerup = rootElementListeners.touchend;\n            }\n            else {\n                dragListeners.pointermove = rootElementListeners.move;\n                dragListeners.pointerup = rootElementListeners.up;\n            }\n\n            // A listener detacher is returned;\n            me.dragListenersDetacher = EventHelper.on(dragListeners);\n\n            if (me.dragWithin && me.dragWithin !== me.outerElement && me.outerElement.contains(me.dragWithin)) {\n                const\n                    box = Rectangle.from(me.dragWithin, me.outerElement);\n\n                me.minY = box.top;\n                me.maxY = box.bottom;\n\n                me.minX = box.left;\n                me.maxX = box.right;\n            }\n        }\n    }\n\n    internalMove(event) {\n        // Ignore events used to mimic pointer movement on scroll, those should not affect dragging\n        if (event.scrollInitiated) {\n            return;\n        }\n\n        const\n            me             = this,\n            { context }    = me,\n            distance       = EventHelper.getDistanceBetween(me.startEvent, event),\n            abortTouchDrag = me.touchStartTimer && distance > me.dragThreshold;\n\n        if (abortTouchDrag) {\n            me.abort(true);\n            return;\n        }\n\n        if (\n            !me.touchStartTimer && context?.element && (context.started || distance >= me.dragThreshold) &&\n            // Ignore text nodes\n            event.target?.nodeType === Node.ELEMENT_NODE\n        ) {\n\n            if (!context.started) {\n                if (me.trigger('beforeDragStart', { context, event }) === false) {\n                    return me.abort();\n                }\n\n                if (me.isContainerDrag) {\n                    me.startContainerDrag(event);\n                }\n                else {\n                    me.startTranslateDrag(event);\n                }\n\n                context.started = true;\n\n                // Now that the drag drop is confirmed to be starting, activate the configured scrollManager if present\n                me.scrollManager?.startMonitoring(ObjectHelper.merge({\n                    scrollables : [\n                        {\n                            element : me.dragWithin || me.outerElement\n                        }\n                    ],\n                    callback : me.onScrollManagerScrollCallback\n                }, me.monitoringConfig));\n\n                // Global informational class for when DragHelper is dragging\n                context.outermostEl = DomHelper.getOutermostElement(event.target);\n                context.outermostEl.classList.add('b-draghelper-active');\n\n                if (me.dropTargetSelector && me.dropTargetCls) {\n                    DomHelper.getRootElement(me.outerElement).querySelectorAll(me.dropTargetSelector).forEach(\n                        el => el.classList.add(me.dropTargetCls)\n                    );\n                }\n\n                // This event signals that the drag is started, observers could then provide relatedElements that should\n                // be dragged along with the mousedowned element\n                me.trigger('dragStart', { context, event });\n\n                me.onDragStarted?.();\n\n                // This event is used to set visibility of the original events in case drag is started\n                // in copy mode\n                me.trigger('afterDragStart', { context, event });\n            }\n\n            me.update(event);\n\n            // to prevent view drag (scroll) on ipad\n            if (event.type === 'touchmove') {\n                event.preventDefault();\n                event.stopImmediatePropagation();\n            }\n        }\n    }\n\n    onScrollManagerScrollCallback(config) {\n        const { lastMouseMoveEvent } = this;\n\n        if (this.context?.element && lastMouseMoveEvent) {\n            // Indicate that this is a 'fake' mousemove event as a result of the scrolling\n            lastMouseMoveEvent.isScroll = true;\n\n            this.update(lastMouseMoveEvent, config);\n        }\n    }\n\n    onTouchMove(event) {\n        this.internalMove(event);\n    }\n\n    /**\n     * Move drag element with mouse.\n     * @param event\n     * @fires beforeDragStart\n     * @fires dragStart\n     * @private\n     */\n    onMouseMove(event) {\n        this.internalMove(event);\n    }\n\n    /**\n     * Updates drag, called when an element is grabbed and mouse moves\n     * @private\n     * @fires drag\n     */\n    update(event, scrollManagerConfig) {\n        const\n            me                   = this,\n            { context }          = me,\n            scrollingPageElement = document.scrollingElement || document.body; // two different modes used\n\n        // In case of scrolling need to update target element based on [X, Y] of the mouse event\n        // Salesforce workaround: we're listening on the document body and salesforce won't report correct target, so\n        // we try to get it from composed path\n        let target = me.getMouseMoveEventTarget(event);\n\n        // \"pointer-events:none\" touchmove has no effect for the touchmove event target, meaning we cannot know\n        // what's under the cursor as easily in touch devices\n        if (event.type === 'touchmove') {\n            const touch = event.changedTouches[0];\n\n            target = DomHelper.elementFromPoint(touch.clientX + scrollingPageElement.scrollLeft, touch.clientY + scrollingPageElement.scrollTop);\n        }\n\n        context.target = target;\n\n        let internallyValid = me.allowDropOutside || !me.dragWithin || me.dragWithin.contains(event.target);\n\n        if (internallyValid && me.dropTargetSelector) {\n            internallyValid = internallyValid && Boolean(target?.closest(me.dropTargetSelector));\n        }\n\n        // Move the drag proxy or dragged element before triggering the drag event\n        if (me.isContainerDrag) {\n            me.updateContainerProxy(event, scrollManagerConfig);\n        }\n        else {\n            // Note, if you drag an element from Container A to Container B which is scrollable (handled by ScrollManager),\n            // and you notice that the proxy element follows the scroll and goes away from the cursor,\n            // make sure you set `outerElement` to the container of the source element (Container A)\n            // and set `constrain` to `false`.\n            me.updateTranslateProxy(event, scrollManagerConfig);\n        }\n\n        context.valid = internallyValid;\n\n        // Allow external code to validate the context before updating a container drag\n        me.trigger('drag', { context, event });\n\n        // Move the placeholder element into its new place.\n        // This will see the new state of context if mutated by a drag listener.\n        if (me.isContainerDrag) {\n            me.updateContainerDrag(event, scrollManagerConfig);\n        }\n\n        context.valid = context.valid && internallyValid;\n\n        for (const element of me.draggedElements) {\n            element.classList.toggle(me.invalidCls, !context.valid);\n        }\n\n        if (event) {\n            me.lastMouseMoveEvent = event;\n        }\n    }\n\n    get draggedElements() {\n        const { context } = this;\n        return [context.dragProxy || context.element, ...(context.relatedElements ?? [])];\n    }\n\n    /**\n     * Abort dragging\n     * @fires abort\n     */\n    async abort(silent = false) {\n        const\n            me          = this,\n            { context } = me;\n\n        me.scrollManager?.stopMonitoring?.();\n        me.removeListeners();\n\n        if (context?.started && !context.aborted) {\n            // Force a synchronous layout so that transitions from this point will work.\n            context.element.getBoundingClientRect();\n\n            // Aborted drag not considered valid\n            context.valid = false;\n\n            if (me.isContainerDrag) {\n                me.abortContainerDrag(undefined, undefined, silent);\n            }\n            else {\n                me.abortTranslateDrag(undefined, undefined, silent);\n            }\n\n            context.aborted = true;\n        }\n        else {\n            me.reset(true);\n        }\n    }\n\n    // Empty class implementation. If listeners *are* added, the detacher is added\n    // as an instance property. So this is always callable.\n    removeListeners() {\n        this.dragListenersDetacher?.();\n        this.blurDetacher?.();\n    }\n\n    // Called when a drag operation is completed, or aborted\n    // Removes DOM listeners and resets context\n    reset(silent) {\n        const\n            me          = this,\n            { context } = me;\n\n        if (context?.started) {\n            for (const element of me.draggedElements) {\n                element.classList.remove(me.invalidCls);\n            }\n\n            context.outermostEl.classList.remove('b-draghelper-active');\n\n            if (me.isContainerDrag) {\n                context.dragProxy.remove();\n            }\n            else {\n                me.cleanUp();\n            }\n\n            if (me.dropTargetSelector && me.dropTargetCls) {\n                DomHelper.getRootElement(me.outerElement).querySelectorAll(me.dropTargetSelector).forEach(\n                    el => el.classList.remove(me.dropTargetCls)\n                );\n            }\n        }\n\n        me.removeListeners();\n\n        /**\n         * Fired after a drag operation is completed or aborted\n         * @event reset\n         * @private\n         * @param {Core.helper.DragHelper} dragHelper\n         */\n        if (!silent) {\n            me.trigger('reset');\n        }\n\n        me.context = me.lastMouseMoveEvent = null;\n    }\n\n    onTouchEnd(event) {\n        this.onMouseUp(event);\n    }\n\n    /**\n     * This is a capture listener, only added during drag, which prevents a click gesture\n     * propagating from the terminating mouseup gesture\n     * @param {MouseEvent} event\n     * @private\n     */\n    onDocumentClick(event) {\n        event.stopPropagation();\n    }\n\n    /**\n     * Drop on mouse up (if dropped on valid target).\n     * @param event\n     * @private\n     */\n    onMouseUp(event) {\n        const\n            me          = this,\n            { context } = me;\n\n        me.removeListeners();\n\n        if (context) {\n            me.scrollManager?.stopMonitoring();\n\n            if (context.started) {\n                // Nobody else must get to process the pointerup event of a drag.\n                // We are using capture : true, so we see it first\n                event.stopPropagation();\n\n                context.finalizing = true;\n                if (me.isContainerDrag) {\n                    me.finishContainerDrag(event);\n                }\n                else {\n                    me.finishTranslateDrag(event);\n                }\n\n                // Prevent the impending document click from the mouseup event from propagating\n                // into a click on our element.\n                EventHelper.on({\n                    element : document,\n                    thisObj : me,\n                    click   : rootElementListeners.docclick,\n                    capture : true,\n                    expires : me.clickSwallowDuration, // In case a click did not ensue, remove the listener\n                    once    : true\n                });\n            }\n            else {\n                me.reset(true);\n            }\n        }\n    }\n\n    /**\n     * Cancel on ESC key\n     * @param event\n     * @private\n     */\n    onKeyDown(event) {\n        if (this.context?.started && event.key === 'Escape') {\n            // Nobody else must get to process the ESCAPE key event of a drag.\n            // We are using capture : true, so we see it first\n            event.stopImmediatePropagation();\n            this.abort();\n        }\n    }\n\n    onWindowBlur() {\n        // If window blur occurs while we are dragging (tab is switched, another window steals focus from browser)\n        // pointer might be released and current window will not know about that. Thus allowing to pointerdown again\n        // when focus comes back. In this case we want to let drag helper know that next pointerdown should be ignored.\n        if (this.context && !this.context.finalizing) {\n            this.abort();\n        }\n    }\n\n    /**\n     * Creates the proxy element to be dragged, when using {@link #config-cloneTarget}. Clones the original element by default.\n     * Override it to provide your own custom HTML element structure to be used as the drag proxy.\n     * @param {HTMLElement} element The element from which the drag operation originated\n     * @returns {HTMLElement}\n     */\n    createProxy(element) {\n        if (this.proxySelector) {\n            element = element.querySelector(this.proxySelector) || element;\n        }\n\n        const proxy = element.cloneNode(true);\n\n        proxy.removeAttribute('id');\n\n        return proxy;\n    }\n\n    //endregion\n\n    get isContainerDrag() {\n        return this.mode === 'container';\n    }\n\n    /**\n     * Animated the proxy element to be aligned with the passed element. Returns a Promise which resolves after the\n     * DOM transition completes. Only applies to 'translateXY' mode.\n     * @param {HTMLElement|Core.helper.util.Rectangle} element The target element or a Rectangle\n     * @param {Object} [alignSpec] An object describing how to the align drag proxy to the target element\n     * @param {String} [alignSpec.align] The alignment specification string, `[trbl]n-[trbl]n`.\n     * @param {Number|Number[]} [alignSpec.offset] The 'x' and 'y' offset values to create an extra margin round the target\n     * to offset the aligned widget further from the target. May be configured as -ve to move the aligned widget\n     * towards the target - for example producing the effect of the anchor pointer piercing the target.\n     */\n    async animateProxyTo(targetElement, alignSpec = { align : 'c-c' }) {\n        const\n            { context, draggedElements } = this,\n            { element }                  = context,\n            targetRect                   = targetElement.isRectangle ? targetElement : Rectangle.from(targetElement);\n\n        draggedElements.forEach(el => {\n            el.classList.add('b-drag-final-transition');\n\n            DomHelper.alignTo(el, targetRect, alignSpec);\n        });\n\n        await EventHelper.waitForTransitionEnd({\n            element,\n            property : 'all',\n            thisObj  : this,\n            once     : true\n        });\n\n        draggedElements.forEach(el => el.classList.remove('b-drag-final-transition'));\n    }\n\n    /**\n     * Returns true if a drag operation is active\n     * @property {Boolean}\n     * @readonly\n     */\n    get isDragging() {\n        return Boolean(this.context?.started);\n    }\n\n    //#region Salesforce hooks\n\n    getMouseMoveEventTarget(event) {\n        return !event.isScroll ? event.target : DomHelper.elementFromPoint(event.clientX, event.clientY);\n    }\n\n    //#endregion\n}\n","import Base from '../Base.js';\nimport Events from '../mixin/Events.js';\nimport BrowserHelper from './BrowserHelper.js';\nimport EventHelper from './EventHelper.js';\nimport DomHelper from './DomHelper.js';\nimport ObjectHelper from './ObjectHelper.js';\nimport Rectangle from './util/Rectangle.js';\n\n//TODO: add pointer events support\n\nconst documentListeners = {\n    down       : 'onMouseDown',\n    move       : 'onMouseMove',\n    up         : 'onMouseUp',\n    docclick   : 'onDocumentClick',\n    touchstart : {\n        handler : 'onTouchStart',\n        // We preventDefault touchstart so as not to scroll. Must not be passive.\n        // https://developers.google.com/web/updates/2017/01/scrolling-intervention\n        passive : false\n    },\n    touchmove : 'onTouchMove',\n    touchend  : 'onTouchEnd',\n    keydown   : 'onKeyDown'\n};\n\n/**\n * @module Core/helper/ResizeHelper\n */\n\n/**\n * Contextual information available during a resize.\n *\n * @typedef {Object} ResizeContext\n * @property {HTMLElement} element Element being resized\n * @property {'top'|'right'|'bottom'|'left'} edge Edge being dragged\n * @property {Boolean} valid `true` if the resize is valid, `false` if it is not\n * @property {Boolean} async Set to `true` in a `resize` listener to allow asynchronous finalization of the resize\n * @property {Function} finalize Call this function to finalize the resize, required if it was flagged as `async` in a\n * `resize` listener\n * @property {Number} newWidth New width of the element\n * @property {Number} newHeight New height of the element\n * @property {Number} newX New x coordinate of the element, when dragging left edge\n * @property {Number} newY New y coordinate of the element, when dragging top edge\n */\n\n/**\n * Handles resizing of elements using handles. Handles can be actual elements or virtual handles specified as a border\n * area on elements left and right edges.\n *\n * ```\n * // enable resizing all elements with class 'resizable'\n * let resizer = new ResizeHelper({\n *   targetSelector: '.resizable'\n * });\n * ```\n *\n * @mixes Core/mixin/Events\n * @internal\n */\nexport default class ResizeHelper extends Events(Base) {\n    //region Config\n\n    static get defaultConfig() {\n        return {\n            /**\n             * CSS class added when resizing\n             * @config {String}\n             * @default\n             */\n            resizingCls : 'b-resizing',\n\n            /**\n             * The amount of pixels to move mouse before it counts as a drag operation\n             * @config {Number}\n             * @default\n             */\n            dragThreshold : 5,\n\n            /**\n             * Resizing handle size\n             * @config {Number}\n             * @default\n             */\n            handleSize : 10,\n\n            /**\n             * Automatically shrink virtual handles when available space < handleSize. The virtual handles will\n             * decrease towards width/height 1, reserving space between opposite handles to for example leave room for\n             * dragging. To configure reserved space, see {@link #config-reservedSpace}.\n             * @config {Boolean}\n             * @default false\n             */\n            dynamicHandleSize : null,\n\n            //\n            /**\n             * Room in px to leave unoccupied by handles when shrinking them dynamically (see\n             * {@link #config-dynamicHandleSize}).\n             * @config {Number}\n             * @default\n             */\n            reservedSpace : 10,\n\n            /**\n             * Resizing handle size on touch devices\n             * @config {Number}\n             * @default\n             */\n            touchHandleSize : 30,\n\n            /**\n             * Minimum width when resizing\n             * @config {Number}\n             * @default\n             */\n            minWidth : 1,\n\n            /**\n             * Max width when resizing.\n             * @config {Number}\n             * @default\n             */\n            maxWidth : 0,\n\n            /**\n             * Minimum height when resizing\n             * @config {Number}\n             * @default\n             */\n            minHeight : 1,\n\n            /**\n             * Max height when resizing\n             * @config {Number}\n             * @default\n             */\n            maxHeight : 0,\n\n            // outerElement, attach events to it and use as outer limit when looking for ancestors\n            outerElement : document.body,\n\n            /**\n             * Optional scroller used to read scroll position. If unspecified, the outer element will be used.\n             * @config {Core.helper.util.Scroller}\n             */\n            scroller : null,\n\n            /**\n             * Assign a function to determine if a hovered element can be resized or not\n             * @config {Function}\n             * @default\n             */\n            allowResize : null,\n\n            /**\n             * Outer element that limits where element can be dragged\n             * @config {HTMLElement}\n             * @default\n             */\n            dragWithin : null,\n\n            /**\n             * A function that determines if dragging an element is allowed. Gets called with the element as argument,\n             * return true to allow dragging or false to prevent.\n             * @config {Function}\n             * @default\n             */\n            isElementResizable : null,\n\n            /**\n             * A CSS selector used to determine if resizing an element is allowed.\n             * @config {String}\n             * @default\n             */\n            targetSelector : null,\n\n            /**\n             * Use left handle when resizing. Only applies when `direction` is 'horizontal'\n             * @config {Boolean}\n             * @default\n             */\n\n            leftHandle : true,\n\n            /**\n             * Use right handle when resizing. Only applies when `direction` is 'horizontal'\n             * @config {Boolean}\n             * @default\n             */\n            rightHandle : true,\n\n            /**\n             * Use top handle when resizing. Only applies when `direction` is 'vertical'\n             * @config {Boolean}\n             * @default\n             */\n\n            topHandle : true,\n\n            /**\n             * Use bottom handle when resizing. Only applies when `direction` is 'vertical'\n             * @config {Boolean}\n             * @default\n             */\n            bottomHandle : true,\n\n            /**\n             * A CSS selector used to determine where handles should be \"displayed\" when resizing. Defaults to\n             * targetSelector if unspecified\n             * @config {String}\n             */\n            handleSelector : null,\n\n            /**\n             * A CSS selector used to determine which inner element contains handles.\n             * @config {String}\n             */\n            handleContainerSelector : null,\n\n            startEvent : null,\n\n            /*\n             * Optional config object, used by EventResize feature: it appends proxy and has to start resizing immediately\n             * @config {Object}\n             * @private\n             */\n            grab : null,\n\n            /**\n             * CSS class added when the resize state is invalid\n             * @config {String}\n             * @default\n             */\n            invalidCls : 'b-resize-invalid',\n\n            // A number that controls whether or not the element is wide enough for it to make sense to show resize handles\n            // e.g. handle width is 10px, so doesn't make sense to show them unless handles on both sides fit\n            handleVisibilityThreshold : null,\n\n            // Private config that disables translation when resizing left edge. Useful for example in cases when element\n            // being resized is part of a flex layout\n            skipTranslate : false,\n\n            /**\n             * Direction to resize in, either 'horizontal' or 'vertical'\n             * @config {'horizontal'|'vertical'}\n             * @default\n             */\n            direction : 'horizontal',\n\n            clickSwallowDuration : 50,\n\n            rtlSource : null\n        };\n    }\n\n    static configurable = {\n        // Private config that disables updating elements width and position, for when data is live updated during\n        // resize, leading to element being redrawn\n        skipUpdatingElement : null\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Fired while dragging\n     * @event resizing\n     * @param {Core.helper.ResizeHelper} source\n     * @param {ResizeContext} context Resize context\n     * @param {MouseEvent} event Browser event\n     */\n\n    /**\n     * Fired when dragging starts.\n     * @event resizeStart\n     * @param {Core.helper.ResizeHelper} source\n     * @param {ResizeContext} context Resize context\n     * @param {MouseEvent|TouchEvent} event Browser event\n     */\n\n    /**\n     * Fires after resize, and allows for asynchronous finalization by setting 'async' to `true` on the context object.\n     * @event resize\n     * @param {Core.helper.ResizeHelper} source\n     * @param {ResizeContext} context Context about the resize operation. Set 'async' to `true` to indicate asynchronous\n     * validation of the resize flow (for showing a confirmation dialog etc)\n     */\n\n    /**\n     * Fires when a resize is canceled (width is unchanged)\n     * @event cancel\n     * @param {Core.helper.ResizeHelper} source\n     * @param {ResizeContext} context Resize context\n     * @param {MouseEvent|TouchEvent} event Browser event\n     */\n    //endregion\n\n    //region Init\n\n    construct(config) {\n        const me = this;\n\n        super.construct(config);\n\n        // Larger draggable zones on pure touch devices with no mouse\n        if (!me.handleSelector && !BrowserHelper.isHoverableDevice) {\n            me.handleSize = me.touchHandleSize;\n        }\n\n        me.handleVisibilityThreshold = me.handleVisibilityThreshold || 2 * me.handleSize;\n\n        me.initListeners();\n\n        me.initResize();\n    }\n\n    doDestroy() {\n        this.abort(true);\n        super.doDestroy();\n    }\n\n    updateSkipUpdatingElement(skip) {\n        if (skip) {\n            this.skipTranslate = true;\n        }\n    }\n\n    /**\n     * Initializes resizing\n     * @private\n     */\n    initResize() {\n        const me = this;\n\n        if (!me.isElementResizable && me.targetSelector) {\n            me.isElementResizable = element => element.closest(me.targetSelector);\n        }\n\n        if (me.grab) {\n            const { edge, element, event } = me.grab;\n\n            me.startEvent = event;\n\n            const cursorOffset = me.getCursorOffsetToElementEdge(event, element, edge);\n\n            // emulates mousedown & grabResize\n            me.context = {\n                element,\n                edge,\n                valid         : true,\n                async         : false,\n                elementStartX : DomHelper.getTranslateX(element) || element.offsetLeft, // extract x from translate\n                elementStartY : DomHelper.getTranslateY(element) || element.offsetTop, // extract x from translate\n                newX          : DomHelper.getTranslateX(element) || element.offsetLeft, // No change yet on start, but info must be present\n                newY          : DomHelper.getTranslateY(element) || element.offsetTop, // No change yet on start, but info must be present\n                elementWidth  : element.offsetWidth,\n                elementHeight : element.offsetHeight,\n                cursorOffset,\n                startX        : event.clientX + cursorOffset.x + me.scrollLeft,\n                startY        : event.clientY + cursorOffset.y + me.scrollTop,\n                finalize      : () => me.reset?.()\n            };\n\n            element.classList.add(me.resizingCls);\n\n            me.internalStartResize(me.isTouch);\n        }\n    }\n\n    /**\n     * Initialize listeners\n     * @private\n     */\n    initListeners() {\n        const\n            me = this,\n            dragStartListeners = {\n                element    : me.outerElement,\n                mousedown  : documentListeners.down,\n                touchstart : documentListeners.touchstart,\n                thisObj    : me\n            };\n\n        if (!me.handleSelector && BrowserHelper.isHoverableDevice) {\n            dragStartListeners.mousemove = {\n                handler : documentListeners.move,\n\n                // Filter events for checkResizeHandles so we only get called if the mouse\n                // is over one of our targets.\n                delegate : me.targetSelector\n            };\n\n            // We need to clean up when we exit one of our targets\n            dragStartListeners.mouseleave = {\n                handler  : 'onMouseLeaveTarget',\n                delegate : me.targetSelector,\n                capture  : true\n            };\n        }\n\n        // These will be autoDetached upon destroy\n        EventHelper.on(dragStartListeners);\n    }\n\n    get isRTL() {\n        return Boolean(this.rtlSource?.rtl);\n    }\n\n    //endregion\n\n    //region Scroll helpers\n\n    get scrollLeft() {\n        if (this.scroller) {\n            return this.scroller.x;\n        }\n\n        return this.outerElement.scrollLeft;\n    }\n\n    get scrollTop() {\n        if (this.scroller) {\n            return this.scroller.y;\n        }\n\n        return this.outerElement.scrollTop;\n    }\n\n    //endregion\n\n    //region Events\n\n    internalStartResize(isTouch) {\n        const dragListeners = {\n            element : document,\n            keydown : documentListeners.keydown,\n            thisObj : this\n        };\n\n        if (isTouch) {\n            dragListeners.touchmove = documentListeners.touchmove;\n            // Touch desktops don't fire touchend event when touch has ended, instead pointerup is fired\n            // iOS do fire touchend\n            dragListeners.touchend = dragListeners.pointerup = documentListeners.touchend;\n        }\n        else {\n            dragListeners.mousemove = documentListeners.move;\n            dragListeners.mouseup = documentListeners.up;\n        }\n\n        // A listener detacher is returned\n        this.removeDragListeners = EventHelper.on(dragListeners);\n    }\n\n    // Empty class implementation. If listeners *are* added, the detacher is added\n    // as an instance property. So this is always callable.\n    removeDragListeners() {}\n\n    reset() {\n        this.removeDragListeners?.();\n        this.context = null;\n        this.trigger('reset');\n    }\n\n    canResize(element, event) {\n        return !this.isElementResizable || this.isElementResizable(element, event);\n    }\n\n    onPointerDown(isTouch, event) {\n        const me = this;\n\n        me.startEvent = event;\n\n        if (me.canResize(event.target, event) && me.grabResizeHandle(isTouch, event)) {\n            // Stop event if resize handle was grabbed (resize started)\n            event.stopImmediatePropagation();\n            if (event.type === 'touchstart') {\n                event.preventDefault();\n            }\n            me.internalStartResize(isTouch);\n        }\n    }\n\n    onTouchStart(event) {\n        // only allowing one finger for now...\n        if (event.touches.length > 1) {\n            return;\n        }\n\n        this.onPointerDown(true, event);\n    }\n\n    /**\n     * Grab draggable element on mouse down.\n     * @private\n     * @param {MouseEvent|PointerEvent} event\n     */\n    onMouseDown(event) {\n        // only dragging with left mouse button\n        if (event.button !== 0) {\n            return;\n        }\n\n        this.onPointerDown(false, event);\n    }\n\n    internalMove(isTouch, event) {\n        const\n            me                     = this,\n            { context, direction } = me;\n\n        if (context?.element && (context.started || EventHelper.getDistanceBetween(me.startEvent, event) >= me.dragThreshold)) {\n            if (!context.started) {\n                me.scrollManager?.startMonitoring(ObjectHelper.merge({\n                    scrollables : [\n                        {\n                            element : me.dragWithin || me.outerElement,\n                            // TODO Update this then when we add support for resizing in both directions simultaneously\n                            direction\n                        }\n                    ],\n                    callback : config => me.context?.element && me.lastMouseMoveEvent && me.update(me.lastMouseMoveEvent, config)\n                }, me.monitoringConfig));\n\n                me.trigger('resizeStart', { context, event });\n\n                context.started = true;\n            }\n\n            me.update(event);\n        }\n        // If a mousemove, and we are using zones, and not handles, we have to\n        // programmatically check whether we are over a handle, and add/remove\n        // classes to change the mouse cursor to resize.\n        // If we are using handles, their CSS will set the mouse cursor.\n        else if (!isTouch && !me.handleSelector) {\n            me.checkResizeHandles(event);\n        }\n    }\n\n    onTouchMove(event) {\n        this.internalMove(true, event);\n    }\n\n    /**\n     * Move grabbed element with mouse.\n     * @param {MouseEvent|PointerEvent} event\n     * @fires resizestart\n     * @private\n     */\n    onMouseMove(event) {\n        this.internalMove(false, event);\n    }\n\n    onPointerUp(isTouch, event) {\n        const\n            me      = this,\n            context = me.context;\n\n        me.removeDragListeners?.();\n\n        if (context) {\n            me.scrollManager?.stopMonitoring();\n\n            if (context.started) {\n                // Prevent the impending document click from the mouseup event from propagating\n                // into a click on our element.\n                EventHelper.on({\n                    element : document,\n                    thisObj : me,\n                    click   : documentListeners.docclick,\n                    expires : me.clickSwallowDuration, // In case a click did not ensue, remove the listener\n                    capture : true,\n                    once    : true\n                });\n            }\n            me.finishResize(event);\n        }\n        else {\n            me.reset?.();\n        }\n    }\n\n    onTouchEnd(event) {\n        this.onPointerUp(true, event);\n    }\n\n    /**\n     * Drop on mouse up (if dropped on valid target).\n     * @param {MouseEvent|PointerEvent} event\n     * @private\n     */\n    onMouseUp(event) {\n        this.onPointerUp(false, event);\n    }\n\n    /**\n     * This is a capture listener, only added during drag, which prevents a click gesture\n     * propagating from the terminating mouseup gesture\n     * @param {MouseEvent} event\n     * @private\n     */\n    onDocumentClick(event) {\n        event.stopPropagation();\n    }\n\n    /**\n     * Cancel on ESC key\n     * @param {KeyboardEvent} event\n     * @private\n     */\n    onKeyDown(event) {\n        if (event.key === 'Escape') {\n            this.abort();\n        }\n    }\n\n    //endregion\n\n    //region Grab, update, finish\n\n    /**\n     * Updates resize, called when an element is grabbed and mouse moves\n     * @private\n     * @fires resizing\n     */\n    update(event) {\n        const\n            me              = this,\n            context         = me.context,\n            parentRectangle = Rectangle.from(me.outerElement);\n\n        // Calculate the current pointer X. Do not allow overflowing either edge\n        context.currentX = Math.max(Math.min(event.clientX + context.cursorOffset.x, parentRectangle.right), parentRectangle.x) + me.scrollLeft;\n        context.currentY = Math.max(Math.min(event.clientY + context.cursorOffset.y, parentRectangle.bottom), parentRectangle.y) + me.scrollTop;\n\n        if (event) {\n            if (me.updateResize(event)) {\n                me.trigger('resizing', { context, event });\n                context.element.classList.toggle(me.invalidCls, context.valid === false);\n            }\n\n            me.lastMouseMoveEvent = event;\n        }\n    }\n\n    /**\n     * Abort dragging\n     */\n    abort(silent = false) {\n        const me = this;\n\n        me.scrollManager?.stopMonitoring?.();\n\n        if (me.context) {\n            me.abortResize(null, silent);\n        }\n        else if (!me.isDestroyed) {\n            me.reset();\n        }\n    }\n\n    /**\n     * Starts resizing, updates ResizeHelper#context with relevant info.\n     * @private\n     * @param {Boolean} isTouch\n     * @param {MouseEvent} event\n     * @returns {Boolean} True if handled, false if not\n     */\n    grabResizeHandle(isTouch, event) {\n        const me = this;\n\n        if (me.allowResize && !me.allowResize(event.target, event)) {\n            return false;\n        }\n\n        const\n            handleSelector = me.handleSelector,\n            coordsFrom = event.type === 'touchstart' ? event.changedTouches[0] : event,\n            clientX = coordsFrom.clientX,\n            clientY = coordsFrom.clientY,\n            // go up from \"handle\" to resizable element\n            element = me.targetSelector ? event.target.closest(me.targetSelector) : event.target;\n\n        if (element) {\n            let edge;\n\n            // Calculate which edge to resize\n            // If there's a handle selector, see if it's anchored on the left or the right\n            if (handleSelector) {\n                if (event.target.matches(handleSelector)) {\n                    if (me.direction === 'horizontal') {\n                        if (event.pageX < DomHelper.getPageX(element) + element.offsetWidth / 2) {\n                            edge = me.isRTL ? 'right' : 'left';\n                        }\n                        else {\n                            edge =  me.isRTL ? 'left' : 'right';\n                        }\n\n                    }\n                    else {\n                        if (event.pageY < DomHelper.getPageY(element) + element.offsetHeight / 2) {\n                            edge = 'top';\n                        }\n                        else {\n                            edge = 'bottom';\n                        }\n                    }\n                }\n                else {\n                    return false;\n                }\n            }\n            // If we're not using handles, but just active zones\n            // then test whether the event position is in an active resize zone.\n            else {\n                if (me.direction === 'horizontal') {\n                    if (me.overLeftHandle(event, element)) {\n                        edge = me.isRTL ? 'right' : 'left';\n                    }\n                    else if (me.overRightHandle(event, element)) {\n                        edge =  me.isRTL ? 'left' : 'right';\n                    }\n                }\n                else {\n                    if (me.overTopHandle(event, element)) {\n                        edge = 'top';\n                    }\n                    else if (me.overBottomHandle(event, element)) {\n                        edge = 'bottom';\n                    }\n                }\n\n                if (!edge) {\n                    me.context = null;\n                    // not over an edge, abort\n                    return false;\n                }\n            }\n\n            // If resizing is initiated by a touch, we must preventDefault on the touchstart\n            // so that scrolling is not invoked when dragging. This is in lieu of a functioning\n            // touch-action style on iOS Safari. When that's fixed, this will not be needed.\n            if (event.type === 'touchstart') {\n                event.preventDefault();\n            }\n\n            const cursorOffset = me.getCursorOffsetToElementEdge(coordsFrom, element, edge);\n\n            if (me.trigger('beforeResizeStart', { element, event }) !== false) {\n                // store initial size\n                me.context = {\n                    element,\n                    edge,\n                    isTouch,\n                    valid         : true,\n                    async         : false,\n                    direction     : me.direction,\n                    elementStartX : DomHelper.getTranslateX(element) || element.offsetLeft, // extract x from translate\n                    elementStartY : DomHelper.getTranslateY(element) || element.offsetTop, // extract y from translate\n                    newX          : DomHelper.getTranslateX(element) || element.offsetLeft, // No change yet on start, but info must be present\n                    newY          : DomHelper.getTranslateY(element) || element.offsetTop, // No change yet on start, but info must be present\n                    elementWidth  : element.offsetWidth,\n                    elementHeight : element.offsetHeight,\n                    cursorOffset,\n                    startX        : clientX + cursorOffset.x + me.scrollLeft,\n                    startY        : clientY + cursorOffset.y + me.scrollTop,\n                    finalize      : () => me.reset?.()\n                };\n\n                element.classList.add(me.resizingCls);\n\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    getCursorOffsetToElementEdge(event, element, edge) {\n        const rectEl = Rectangle.from(element);\n\n        let x = 0,\n            y = 0;\n\n        switch (edge) {\n            case 'left':\n                x = rectEl.x - (this.isRTL ? rectEl.width : 0) - event.clientX; // negative\n                break;\n            case 'right':\n                x = rectEl.x + (this.isRTL ? 0 : rectEl.width) - event.clientX; // positive\n                break;\n            case 'top':\n                y = rectEl.y - event.clientY; // negative\n                break;\n            case 'bottom':\n                y = rectEl.y + rectEl.height - event.clientY; // positive\n                break;\n        }\n\n        return { x, y };\n    }\n\n    /**\n     * Check if mouse is over a resize handle (virtual). If so, highlight.\n     * @private\n     * @param {MouseEvent} event\n     */\n    checkResizeHandles(event) {\n        const\n            me     = this,\n            target = me.targetSelector ? event.target.closest(me.targetSelector) : event.target;\n\n        // mouse over a target element and allowed to resize?\n        if (target && (!me.allowResize || me.allowResize(event.target, event))) {\n            me.currentElement = me.handleContainerSelector ? event.target.closest(me.handleContainerSelector) : event.target;\n\n            if (me.currentElement) {\n                let over;\n\n                if (me.direction === 'horizontal') {\n                    over = me.overLeftHandle(event, target) || me.overRightHandle(event, target);\n                }\n                else {\n                    over = me.overTopHandle(event, target) || me.overBottomHandle(event, target);\n                }\n\n                if (over) {\n                    me.highlightHandle(); // over handle\n                }\n                else {\n                    me.unHighlightHandle(); // not over handle\n                }\n            }\n        }\n        else if (me.currentElement) {\n            me.unHighlightHandle(); // outside element\n        }\n    }\n\n    onMouseLeaveTarget(event) {\n        const me = this;\n\n        me.currentElement = me.handleContainerSelector ? event.target.closest(me.handleContainerSelector) : event.target;\n\n        if (me.currentElement) {\n            me.unHighlightHandle();\n        }\n    }\n\n    /**\n     * Updates size of target (on mouse move).\n     * @private\n     * @param {MouseEvent|PointerEvent} event\n     */\n    updateResize(event) {\n        const\n            me = this,\n            {\n                context,\n                allowEdgeSwitch,\n                skipTranslate,\n                skipUpdatingElement\n            }  = me;\n\n        let updated;\n\n        // flip which edge is being dragged depending on whether we're to the right or left of the mousedown\n        if (allowEdgeSwitch) {\n            if (me.direction === 'horizontal') {\n                context.edge = context.currentX > context.startX ? 'right' : 'left';\n            }\n            else {\n                context.edge = context.currentY > context.startY ? 'bottom' : 'top';\n            }\n        }\n\n        const\n            {\n                element,\n                elementStartX,\n                elementStartY,\n                elementWidth,\n                elementHeight,\n                edge\n            }         = context,\n            { style } = element,\n            // limit to outerElement if set\n            deltaX    = context.currentX - context.startX,\n            deltaY    = context.currentY - context.startY,\n            minWidth  = DomHelper.getExtremalSizePX(element, 'minWidth') || me.minWidth,\n            maxWidth  = DomHelper.getExtremalSizePX(element, 'maxWidth') || me.maxWidth,\n            minHeight = DomHelper.getExtremalSizePX(element, 'minHeight') || me.minHeight,\n            maxHeight = DomHelper.getExtremalSizePX(element, 'maxHeight') || me.maxHeight,\n            // dragging the right edge right increases the width, dragging left edge right decreases width\n            sign      = (edge === 'right' && !me.isRTL) || edge === 'bottom' ? 1 : -1,\n            // new width, not allowed to go below minWidth\n            newWidth  = elementWidth + deltaX * sign,\n            newHeight = elementHeight + deltaY * sign;\n\n        let\n            width  = Math.max(minWidth, newWidth),\n            height = Math.max(minHeight, newHeight);\n\n        if (maxWidth > 0) {\n            width = Math.min(width, maxWidth);\n        }\n\n        if (maxHeight > 0) {\n            height = Math.min(height, maxHeight);\n        }\n\n        // remove flex when resizing\n        if (style.flex) {\n            style.flex = '';\n        }\n\n        if (me.direction === 'horizontal' && elementWidth !== width) {\n            if (!skipUpdatingElement) {\n                style.width = Math.abs(width) + 'px';\n            }\n            context.newWidth = width;\n\n            // when dragging left edge, also update position (so that right edge remains in place)\n            if (edge === 'left' || width < 0) {\n                const newX = Math.max(Math.min(elementStartX + elementWidth - me.minWidth, elementStartX + deltaX), 0);\n\n                if (!skipTranslate) {\n                    DomHelper.setTranslateX(element, Math.round(newX));\n                }\n\n                context.newX = newX;\n            }\n            // When dragging the right edge and we're allowed to flip the drag from left to right\n            // through the start point (eg drag event creation) the element must be at its initial X position\n            else if (edge === 'right' && allowEdgeSwitch && !skipTranslate) {\n                DomHelper.setTranslateX(element, elementStartX);\n            }\n            updated = true;\n        }\n        else if (me.direction === 'vertical' && elementHeight !== newHeight) {\n            if (!skipUpdatingElement) {\n                style.height = Math.abs(height) + 'px';\n            }\n            context.newHeight = height;\n\n            // when dragging top edge, also update position (so that bottom edge remains in place)\n            if (edge === 'top' || height < 0) {\n                context.newY = Math.max(Math.min(elementStartY + elementHeight - me.minHeight, elementStartY + deltaY), 0);\n                if (!skipTranslate) {\n                    DomHelper.setTranslateY(element, context.newY);\n                }\n            }\n            // When dragging the bottom edge and we're allowed to flip the drag from top to bottom\n            // through the start point (eg drag event creation) the element must be at its initial Y position\n            else if (edge === 'bottom' && allowEdgeSwitch && !skipTranslate) {\n                DomHelper.setTranslateY(element, elementStartY);\n            }\n            updated = true;\n        }\n\n        return updated;\n    }\n\n    /**\n     * Finalizes resize, fires drop.\n     * @private\n     * @param {MouseEvent|PointerEvent} event\n     * @fires resize\n     * @fires cancel\n     */\n    finishResize(event) {\n        const\n            me          = this,\n            context     = me.context,\n            eventObject = { context, event };\n\n        context.element.classList.remove(me.resizingCls);\n\n        if (context.started) {\n            let changed = false;\n\n            if (me.direction === 'horizontal') {\n                changed = context.newWidth && context.newWidth !== context.elementWidth;\n            }\n            else {\n                changed = context.newHeight && context.newHeight !== context.elementHeight;\n            }\n            me.trigger(changed ? 'resize' : 'cancel', eventObject);\n\n            if (!context.async) {\n                context.finalize();\n            }\n        }\n        else {\n            me.reset?.();\n        }\n    }\n\n    /**\n     * Abort resizing\n     * @private\n     * @fires cancel\n     */\n    abortResize(event = null, silent = false) {\n        const\n            me      = this,\n            context = me.context;\n\n        context.element.classList.remove(me.resizingCls);\n        if (me.direction === 'horizontal') {\n            // With these statements, no x pos is changed when resizing. Should therefor not reset it when cancelling\n            if (context.edge === 'left' || (context.allowEdgeSwitch && !context.skipTranslate)) {\n                DomHelper.setTranslateX(context.element, context.elementStartX);\n            }\n            context.element.style.width = context.elementWidth + 'px';\n        }\n        else {\n            DomHelper.setTranslateY(context.element, context.elementStartY);\n            context.element.style.height = context.elementHeight + 'px';\n        }\n\n        !silent && me.trigger('cancel', { context, event });\n\n        if (!me.isDestroyed) {\n            me.reset();\n        }\n    }\n\n    //endregion\n\n    //region Handles\n\n    // /**\n    //  * Constrain resize to outerElements bounds\n    //  * @private\n    //  * @param x\n    //  * @returns {*}\n    //  */\n    // constrainResize(x) {\n    //     const me = this;\n    //\n    //     if (me.outerElement) {\n    //         const box = me.outerElement.getBoundingClientRect();\n    //         if (x < box.left) x = box.left;\n    //         if (x > box.right) x = box.right;\n    //     }\n    //\n    //     return x;\n    // }\n\n    /**\n     * Highlights handles (applies css that changes cursor).\n     * @private\n     */\n    highlightHandle() {\n        const\n            me     = this,\n            target = me.targetSelector ? me.currentElement.closest(me.targetSelector) : me.currentElement;\n\n        // over a handle, add cls to change cursor\n        me.currentElement.classList.add('b-resize-handle');\n        target.classList.add('b-over-resize-handle');\n    }\n\n    /**\n     * Unhighlight handles (removes css).\n     * @private\n     */\n    unHighlightHandle() {\n        const\n            me = this,\n            target = me.targetSelector ? me.currentElement.closest(me.targetSelector) : me.currentElement;\n\n        target && target.classList.remove('b-over-resize-handle');\n        me.currentElement.classList.remove('b-resize-handle');\n        me.currentElement = null;\n    }\n\n    overAnyHandle(event, target) {\n        return this.overStartHandle(event, target) || this.overEndHandle(event, target);\n    }\n\n    overStartHandle(event, target) {\n        return this.direction === 'horizontal' ? this.overLeftHandle(event, target) : this.overTopHandle(event, target);\n    }\n\n    overEndHandle(event, target) {\n        return this.direction === 'horizontal' ? this.overRightHandle(event, target) : this.overBottomHandle(event, target);\n    }\n\n    getDynamicHandleSize(opposite, offsetWidth) {\n        const\n            handleCount = opposite ? 2 : 1,\n            { handleSize } = this;\n\n        // Shrink handle size when configured to do so, preserving reserved space between handles\n        if (this.dynamicHandleSize && handleSize * handleCount > offsetWidth - this.reservedSpace) {\n            return Math.max(Math.floor((offsetWidth - this.reservedSpace) / handleCount), 0);\n        }\n\n        return handleSize;\n    }\n\n    /**\n     * Check if over left handle (virtual).\n     * @private\n     * @param {MouseEvent} event MouseEvent\n     * @param {HTMLElement} target The current target element\n     * @returns {Boolean} Returns true if mouse is over left handle, otherwise false\n     */\n    overLeftHandle(event, target) {\n        const\n            me              = this,\n            { offsetWidth } = target;\n\n        if (me.leftHandle && me.canResize(target, event) && (offsetWidth >= me.handleVisibilityThreshold || me.dynamicHandleSize)) {\n            const leftHandle = Rectangle.from(target);\n\n            leftHandle.width = me.getDynamicHandleSize(me.rightHandle, offsetWidth);\n\n            return leftHandle.width > 0 && leftHandle.contains(EventHelper.getPagePoint(event));\n        }\n        return false;\n    }\n\n    /**\n     * Check if over right handle (virtual).\n     * @private\n     * @param {MouseEvent} event MouseEvent\n     * @param {HTMLElement} target The current target element\n     * @returns {Boolean} Returns true if mouse is over left handle, otherwise false\n     */\n    overRightHandle(event, target) {\n        const\n            me              = this,\n            { offsetWidth } = target;\n\n        if (me.rightHandle && me.canResize(target, event) && (offsetWidth >= me.handleVisibilityThreshold || me.dynamicHandleSize)) {\n            const rightHandle = Rectangle.from(target);\n\n            rightHandle.x = rightHandle.right - me.getDynamicHandleSize(me.leftHandle, offsetWidth);\n\n            return rightHandle.width > 0 && rightHandle.contains(EventHelper.getPagePoint(event));\n        }\n        return false;\n    }\n\n    /**\n     * Check if over top handle (virtual).\n     * @private\n     * @param {MouseEvent} event MouseEvent\n     * @param {HTMLElement} target The current target element\n     * @returns {Boolean} Returns true if mouse is over top handle, otherwise false\n     */\n    overTopHandle(event, target) {\n        const\n            me               = this,\n            { offsetHeight } = target;\n\n        if (me.topHandle && me.canResize(target, event) && (offsetHeight >= me.handleVisibilityThreshold  || me.dynamicHandleSize)) {\n            const topHandle = Rectangle.from(target);\n\n            topHandle.height = me.getDynamicHandleSize(me.bottomHandle, offsetHeight);\n\n            return topHandle.height > 0 && topHandle.contains(EventHelper.getPagePoint(event));\n        }\n        return false;\n    }\n\n    /**\n     * Check if over bottom handle (virtual).\n     * @private\n     * @param {MouseEvent} event MouseEvent\n     * @param {HTMLElement} target The current target element\n     * @returns {Boolean} Returns true if mouse is over bottom handle, otherwise false\n     */\n    overBottomHandle(event, target) {\n        const\n            me               = this,\n            { offsetHeight } = target;\n\n        if (me.bottomHandle && me.canResize(target, event) && (offsetHeight >= me.handleVisibilityThreshold  || me.dynamicHandleSize)) {\n            const bottomHandle = Rectangle.from(target);\n\n            bottomHandle.y = bottomHandle.bottom - me.getDynamicHandleSize(me.bottomHandle, offsetHeight);\n\n            return bottomHandle.height > 0 && bottomHandle.contains(EventHelper.getPagePoint(event));\n        }\n        return false;\n    }\n\n    //endregion\n}\n","import ObjectHelper from './ObjectHelper.js';\nimport Widget from '../widget/Widget.js';\nimport Toast from '../widget/Toast.js';\nimport Mask from '../widget/Mask.js';\nimport Point from './util/Point.js';\n\n/**\n * @module Core/helper/WidgetHelper\n */\n\n/**\n * Helper for creating widgets.\n */\nexport default class WidgetHelper {\n    //region Querying\n\n    /**\n     * Returns the widget with the specified id.\n     * @param {String} Id of widget to find\n     * @returns {Core.widget.Widget} The widget if any\n     * @category Querying\n     */\n    static getById(id) {\n        return Widget.getById(id);\n    }\n\n    /**\n     * Returns the Widget which owns the passed element (or event).\n     * @param {HTMLElement|Event} element The element or event to start from\n     * @param {String|Function} [type] The type of Widget to scan upwards for. The lowercase\n     * class name. Or a filter function which returns `true` for the required Widget.\n     * @param {HTMLElement|Number} [limit] The number of components to traverse upwards to find a\n     * match of the type parameter, or the element to stop at.\n     * @returns {Core.widget.Widget} The found Widget or null.\n     * @category Querying\n     */\n    static fromElement(element, type, limit) {\n        return Widget.fromElement(element, type, limit);\n    }\n\n    //endregion\n\n    //region Widgets\n\n    /**\n     * Create a widget.\n     * @example\n     * WidgetHelper.createWidget({\n     *   type: 'button',\n     *   icon: 'user',\n     *   text: 'Edit user'\n     * });\n     * @param {ContainerItemConfig} config Widget config\n     * @returns {Core.widget.Widget} The widget\n     * @category Widgets\n     */\n    static createWidget(config = {}) {\n        return config.isWidget ? config : Widget.create(config);\n    }\n\n    /**\n     * Appends a widget (array of widgets) to the DOM tree. If config is empty, widgets are appended to the DOM. To\n     * append widget to certain position you can pass HTMLElement or its id as config, or as a config, that will be\n     * applied to all passed widgets.\n     *\n     * Usage:\n     *\n     * ```javascript\n     * // Will append button as last item to element with id 'container'\n     * let [button] = WidgetHelper.append({ type : 'button' }, 'container');\n     *\n     * // Same as above, but will add two buttons\n     * let [button1, button2] = WidgetHelper.append([\n     *     { type : 'button' },\n     *     { type : 'button' }\n     *     ], { appendTo : 'container' });\n     *\n     * // Will append two buttons before element with id 'someElement'. Order will be preserved and all widgets will have\n     * // additional class 'my-cls'\n     * let [button1, button2] = WidgetHelper.append([\n     *     { type : 'button' },\n     *     { type : 'button' }\n     *     ], {\n     *         insertBefore : 'someElement',\n     *         cls          : 'my-cls'\n     *     });\n     * ```\n     *\n     * @param {ContainerItemConfig|ContainerItemConfig[]} widget Widget config or array of such configs\n     * @param {HTMLElement|String|Object} [config] Element (or element id) to which to append the widget or config to\n     * apply to all passed widgets\n     * @returns {Core.widget.Widget[]} Array or widgets\n     * @category Widgets\n     */\n    static append(widget, config) {\n        widget = Array.isArray(widget) && widget || [widget];\n\n        if (config instanceof HTMLElement || typeof config === 'string') {\n            config = {\n                appendTo : config\n            };\n        }\n\n        // We want to fix position to insert into to keep order of passed widgets\n        if (config.insertFirst) {\n            const target = typeof config.insertFirst === 'string' ? document.getElementById(config.insertFirst) : config.insertFirst;\n\n            if (target.firstChild) {\n                config.insertBefore = target.firstChild;\n            }\n            else {\n                config.appendTo = target;\n            }\n        }\n\n        return widget.map(item => Widget.create(ObjectHelper.assign({}, config || {}, item)));\n    }\n\n    //endregion\n\n    //region Popups\n\n    /**\n     * Shows a popup (~tooltip) containing widgets connected to specified element.\n     * @example\n     * WidgetHelper.openPopup(element, {\n     *   position: 'bottom center',\n     *   items: [\n     *      { widgetConfig }\n     *   ]\n     * });\n     * @param {HTMLElement} element Element to connect popup to\n     * @param {PopupConfig} config Config object, or string to use as html in popup\n     * @returns {*|{close, widgets}}\n     * @category Popups\n     */\n    static openPopup(element, config) {\n        return Widget.create(ObjectHelper.assign({\n            forElement : element\n        }, typeof config === 'string' ? {\n            html : config\n        } : config), 'popup');\n    }\n\n    /**\n     * Shows a context menu connected to the specified element.\n     * @example\n     * WidgetHelper.showContextMenu(element, {\n     *   items: [\n     *      { id: 'addItem', icon: 'add', text: 'Add' },\n     *      ...\n     *   ],\n     *   onItem: item => alert('Clicked ' + item.text)\n     * });\n     * @param {HTMLElement|Number[]} element Element (or a coordinate) to show the context menu for\n     * @param {MenuItemConfig} config Context menu config, see example\n     * @returns {Core.widget.Menu}\n     * @category Popups\n     */\n    static showContextMenu(element, config) {\n        const me = this;\n\n        if (me.currentContextMenu) {\n            me.currentContextMenu.destroy();\n        }\n\n        if (element instanceof HTMLElement) {\n            config.forElement = element;\n        }\n        else if (Array.isArray(element)) {\n            config.forElement = {\n                target : new Point(...element)\n            };\n        }\n        else if (element instanceof Point) {\n            config.forElement = {\n                target : element\n            };\n        }\n\n        me.currentContextMenu = Widget.create(config, 'menu');\n\n        me.currentContextMenu.ion({\n            destroy : () => {\n                me.currentContextMenu = null;\n            }\n        });\n\n        return me.currentContextMenu;\n    }\n\n    /**\n     * Attached a tooltip to the specified element.\n     * @example\n     * WidgetHelper.attachTooltip(element, {\n     *   text: 'Useful information goes here'\n     * });\n     * @param {HTMLElement} element Element to attach tooltip for\n     * @param {String|TooltipConfig} configOrText Tooltip config or tooltip string, see example and source\n     * @returns {HTMLElement} The passed element\n     * @category Popups\n     */\n    static attachTooltip(element, configOrText) {\n        return Widget.attachTooltip(element, configOrText);\n    }\n\n    /**\n     * Checks if element has tooltip attached\n     *\n     * @param {HTMLElement} element Element to check\n     * @returns {Boolean}\n     * @category Popups\n     */\n    static hasTooltipAttached(element) {\n        return Widget.resolveType('tooltip').hasTooltipAttached(element);\n    }\n\n    /**\n     * Destroys any tooltip attached to an element, removes it from the DOM and unregisters any tip related listeners\n     * on the element.\n     *\n     * @param {HTMLElement} element Element to remove tooltip from\n     * @category Popups\n     */\n    static destroyTooltipAttached(element) {\n        return Widget.resolveType('tooltip').destroyTooltipAttached(element);\n    }\n\n    //endregion\n\n    //region Mask\n\n    /**\n     * Masks the specified element, showing a message in the mask.\n     * @param {HTMLElement} element Element to mask\n     * @param {String} msg Message to show in the mask\n     * @category Mask\n     */\n    static mask(element, msg = 'Loading') {\n        if (element) {\n            // Config object normalization\n            if (element instanceof HTMLElement) {\n                element = {\n                    target : element,\n                    text   : msg\n                };\n            }\n\n            return Mask.mask(element, element.target);\n        }\n    }\n\n    /**\n     * Unmask the specified element.\n     * @param {HTMLElement} element\n     * @category Mask\n     */\n    static unmask(element, close = true) {\n        if (element.mask) {\n            if (close) {\n                element.mask.close();\n            }\n            else {\n                element.mask.hide();\n            }\n        }\n    }\n\n    //endregion\n\n    //region Toast\n\n    /**\n     * Show a toast\n     * @param {String} msg message to show in the toast\n     * @category Mask\n     */\n    static toast(msg) {\n        return Toast.show(msg);\n    }\n\n    //endregion\n}\n","const hasOwnProperty = Object.prototype.hasOwnProperty;\n\nlet cacheKey = null;\n\nfunction setParser(me, parser) {\n    Object.defineProperty(me, 'parser', {\n        value : parser\n    });\n\n    return parser;\n}\n\nclass Default {\n    constructor(formatter) {\n        this.formatter = formatter;\n    }\n\n    format(value) {\n        return this.formatter.defaultFormat(value);\n    }\n\n    parse(value, strict) {\n        return this.formatter.defaultParse(value, strict);\n    }\n\n    resolvedOptions() {\n        return null;\n    }\n}\n\n// This class does not extend Core.Base because instances are not reconfigurable (making\n// setConfig harmful) nor destroyable. Instead, they get frozen and cached according to\n// their \"config\" definition.\n/**\n * Abstract base class for formatters.\n * @private\n */\nexport default class Formatter {\n    static get(format) {\n        if (format == null) {\n            return this.NULL;\n        }\n        if (format instanceof this) {\n            return format;\n        }\n\n        const\n            key = (typeof format === 'string') ? format : JSON.stringify(format),\n            cache = this.cache;\n\n        let fmt = cache.get(key);\n\n        if (!fmt) {\n            cacheKey = key;  // this is grabbed by our constructor below...\n            fmt = new this(format);\n\n            cache.set(key, fmt);\n        }\n\n        return fmt;\n    }\n\n    static get cache() {\n        return (hasOwnProperty.call(this, '_cache') && this._cache) || (this._cache = new Map());\n    }\n\n    static get NULL() {\n        return hasOwnProperty.call(this, '_null') ? this._null : (this._null = new this(null));\n    }\n\n    constructor(config) {\n        const me = this;\n\n        // This is done in a funny way so as not to complicate the derived constructor's\n        // desire to maintain a single argument signature, as well as it's calling of\n        // Object.freeze() to ensure immutability in dev mode.\n        me.cacheKey = cacheKey;\n\n        cacheKey = null;\n\n        me.initialize();\n\n        if (config === null) {\n            me.formatter = new Default(me);\n        }\n        else {\n            me.configure(config);\n\n            // Bring locale and other defaulted options back onto this object:\n            for (const [key, value] of Object.entries(me.resolvedOptions())) {\n                // For some reason (locale-specific perhaps), resolvedOptions returns\n                // with 'undefined' in some keys (e.g., min/maximumFractionDigits) when\n                // we specified 0.\n                //\n                // The second check is to only bring back values that we understand.\n                if (value != null && (key in me.defaults)) {\n                    me[key] = value;\n                }\n            }\n        }\n    }\n\n    get parser() {\n        // Replace this property w/the actual instance:\n        return setParser(this, new this.constructor.Parser(this));\n    }\n\n    defaultFormat(value) {\n        return (value == null) ? value : String(value);\n    }\n\n    defaultParse(value) {\n        return value;\n    }\n\n    format(value) {\n        return (value == null) ? value : this.formatter.format(value);\n    }\n\n    parse(value, strict) {\n        return (value == null) ? value : this.parser.parse(value, strict);\n    }\n\n    parseStrict(value) {\n        return this.parse(value, true);\n    }\n\n    resolvedOptions() {\n        return this.formatter.resolvedOptions();\n    }\n}\n","import Formatter from './Formatter.js';\nimport StringHelper from '../StringHelper.js';\nimport LocaleManager from '../../localization/LocaleManager.js';\nimport '../../localization/En.js';\n\n/**\n * @module Core/helper/util/NumberFormat\n */\n\nconst\n    escapeRegExp = StringHelper.escapeRegExp,\n    digitsRe = /[\\d+-]/g,\n    // We cannot pass locale=null:\n    newFormatter = (locale, config) => new Intl.NumberFormat(locale || undefined, config),\n    numFormatRe = /^(?:([$])\\s*)?(?:(\\d+)>)?\\d+(,\\d+)?(?:\\.((\\d*)(?:#*)|[*]))?(?:\\s*([%])?)?$/,\n    unicodeMinus = '\\u2212';\n\nclass NumberParser {\n    constructor(formatter) {\n        const\n            me = this,\n            locale = formatter.locale,\n            // We need a formatter for this locale that has decimals and grouping:\n            numFmt = newFormatter(locale, {\n                maximumFractionDigits : 3\n            }),\n            currency = formatter.is.currency ? me._decodeStyle(locale, {\n                style           : 'currency',\n                currency        : formatter.currency,\n                currencyDisplay : formatter.currencyDisplay\n            }) : null,\n            percent = formatter.is.percent ? me._decodeStyle(locale, {\n                style : 'percent'\n            }) : null,\n            decimal = numFmt.format(1.2).replace(digitsRe, '')[0],\n            grouper = numFmt.format(1e9).replace(digitsRe, '')[0] || '';\n\n        Object.assign(me, { currency, decimal, formatter, grouper, percent });\n\n        me.decimal = decimal;\n        me.decimalRe = escapeRegExp(decimal, 'g');\n        me.grouper = grouper;\n\n        // The stripRe removes whitespace, currency text, percent text and grouping chars:\n        me.stripRe = new RegExp(\n            `(?:\\\\s+|${escapeRegExp(grouper)})` +\n            (currency ? `|(?:${escapeRegExp(currency.text)})` : '') +\n            (percent ? `|(?:${escapeRegExp(percent.text)})` : ''),\n            'g');\n\n        //<debug>\n        Object.freeze(me);\n        Object.freeze(currency);\n        Object.freeze(percent);\n        //</debug>\n    }\n\n    decimalPlaces(value) {\n        value = value.replace(this.stripRe, '');\n\n        const dot = value.indexOf(this.decimal) + 1;\n\n        return dot && (value.length - dot);\n    }\n\n    parse(value, strict) {\n        if (typeof value === 'string') {\n            value = value.replace(this.stripRe, '').replace(this.decimalRe, '.').replace(unicodeMinus, '-');\n\n            value = strict ? Number(value) : parseFloat(value);\n\n            if (this.formatter.is.percent) {\n                value /= 100;\n            }\n        }\n        // else, a number is already parsed but could be null...\n\n        return value;\n    }\n\n    _decodeStyle(locale, fmtDef) {\n        const\n            fmt = newFormatter(locale, fmtDef),\n            decFmt = newFormatter(locale, Object.assign(\n                fmt.resolvedOptions(),\n                { style : 'decimal' }\n            )),\n            zero = fmt.format(0),  // = '0%' or '$0.00' in en-US\n            zeroDec = decFmt.format(0);  // = '0' or '0.00' in en-US\n\n        return {\n            suffix : zero.startsWith(zeroDec),\n            text   : zero.replace(zeroDec, '').trim()\n        };\n    }\n}\n\n/**\n * This class is an enhancement to `Intl.NumberFormat` that has a more flexible\n * constructor as well as other features such as `parse()`.\n *\n * All constructor forms take a single argument. The most common is to pass a format\n * {@link #config-template} string:\n *```\n *  const formatter = new NumberFormat('9,999.99##');\n *```\n * The above is equivalent to:\n *```\n *  const formatter = new Intl.NumberFormat({\n *      useGrouping           : true,\n *      minimumFractionDigits : 2,\n *      maximumFractionDigits : 4\n *  });\n *```\n * The `formatter` created above is used as follows (in the `en-US` locale):\n *```\n *  console.log(formatter.format(12345.54321));\n *  console.log(formatter.format(42));\n *\n *  // 12,345.5432\n *  // 42.00\n *```\n * When a format template is insufficient, a config object can be provided, similar to\n * `Intl.NumberFormat`'s `options` parameter. While all options from `Intl.NumberFormat`\n * are valid properties for this class's config object, additional properties are\n * supported.\n *\n * For example:\n *```\n *  new NumberFormat({\n *      locale      : 'en-US',\n *      template    : '$9,999',\n *      currency    : 'USD',\n *      significant : 5\n *  });\n *```\n * The `locale` option takes the place of the first positional parameter to the\n * `Intl.NumberFormat` constructor. The `template` config is the same string that can be\n * passed by itself.\n *\n * The shorthand properties `fraction`, `integer`, and `significant` set the standard\n * options `minimumFractionDigits`, `maximumFractionDigits`, `minimumIntegerDigits`,\n * `minimumSignificantDigits`, and `maximumSignificantDigits`.\n *\n * NOTE: Instances of `NumberFormat` are immutable after construction.\n *\n * For details about `Intl.NumberFormat` see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat).\n */\nexport default class NumberFormat extends Formatter {\n\n    static get $name() {\n        return 'NumberFormat';\n    }\n\n    //<debug>\n    constructor(options) {\n        super(options);\n\n        this.parse('0');  // throw away parse just to get us freezable\n\n        Object.freeze(this.is);\n        Object.freeze(this);\n    }\n    //</debug>\n\n    initialize() {\n        this._as = {\n            // cacheKey : cachedInstance\n        };\n\n        this.is = {\n            decimal  : false,\n            currency : false,\n            percent  : false,\n            null     : true,\n            from     : null\n        };\n    }\n\n    get truncator() {\n        const scale = this.maximumFractionDigits;\n\n        return (scale == null)\n            ? null\n            : this.as({ style : 'decimal', maximumFractionDigits : Math.min(20, scale + 1) }, 'truncator');\n    }\n\n    configure(options) {\n        const me = this;\n\n        if (typeof options !== 'string') {\n            Object.assign(me, options);\n        }\n        else {\n            me.template = options;\n        }\n\n        // Do not remove. Assertion strings for Localization sanity check.\n        // 'L{locale}'\n        // 'L{currency}'\n\n        const\n            config = {},\n            loc = me.locale ? LocaleManager.locales[me.locale] : LocaleManager.locale,\n            defaults = loc && loc.NumberFormat,\n            template = me.template;\n\n        if (defaults) {\n            for (const key in defaults) {\n                if (me[key] == null && typeof defaults[key] !== 'function') {\n                    me[key] = defaults[key];\n                }\n            }\n        }\n\n        if (template) {\n            const\n                match = numFormatRe.exec(template),\n                m2 = match[2],\n                m4 = match[4];\n\n            me.useGrouping = !!match[3];\n            me.style = match[1] ? 'currency' : (match[6] ? 'percent' : 'decimal');\n\n            if (m2) {\n                me.integer = +m2;\n            }\n\n            if (m4 === '*') {\n                me.fraction = [0, 20];\n            }\n            else if (m4 != null) {\n                me.fraction = [match[5].length, m4.length];\n            }\n        }\n\n        me._minMax('fraction', true, true);\n        me._minMax('integer', true, false);\n        me._minMax('significant', false, true);\n\n        for (const key in me.defaults) {\n            if (me[key] != null) {\n                config[key] = me[key];\n            }\n        }\n\n        me.is.from = me.from && me.from.is;\n        me.is[me.style] = !(me.is.null = false);\n\n        me.formatter = newFormatter(me.locale, config);\n    }\n\n    /**\n     * Creates a derived `NumberFormat` from this instance, with a different `style`. This is useful for processing\n     * currency and percentage styles without the symbols being injected in the formatting.\n     *\n     * @param {String|Object} change The new style (if a string) or a set of properties to update.\n     * @param {String} [cacheAs] A key by which to cache this derived formatter.\n     * @returns {Core.helper.util.NumberFormat}\n     */\n    as(change, cacheAs = null) {\n        const\n            config = this.resolvedOptions() || { template : '9.*' },\n            cache = this._as;\n\n        let ret = cacheAs && cache[cacheAs];\n\n        if (!ret) {\n            if (typeof change === 'string') {\n                config.style = change;\n            }\n            else {\n                Object.assign(config, change);\n            }\n\n            config.from = this;\n\n            ret = new NumberFormat(config);\n        }\n\n        if (cacheAs) {\n            cache[cacheAs] = ret;\n        }\n\n        return ret;\n    }\n\n    defaultParse(value, strict) {\n        return (value == null) ? value : (strict ? Number(value) : parseFloat(value));\n    }\n\n    /**\n     * Returns the given `value` formatted in accordance with the specified locale and\n     * formatting options.\n     *\n     * @param {Number} value\n     * @returns {String}\n     */\n    format(value) {\n        if (typeof value === 'string') {\n            const v = Number(value);\n\n            value = isNaN(v) ? this.parse(value) : v;\n        }\n\n        return super.format(value);\n    }\n\n    // The parse() method is inherited but the base class implementation\n    // cannot properly document the parameter and return types:\n\n    /**\n     * Returns a `Number` parsed from the given, formatted `value`, in accordance with the\n     * specified locale and formatting options.\n     *\n     * If the `value` cannot be parsed, `NaN` is returned.\n     *\n     * Pass `strict` as `true` to require all text to convert. In essence, the default is\n     * in line with JavaScript's `parseFloat` while `strict=true` behaves like the `Number`\n     * constructor:\n     *```\n     *  parseFloat('1.2xx');  // = 1.2\n     *  Number('1.2xx')       // = NaN\n     *```\n     * @method parse\n     * @param {String} value\n     * @param {Boolean} [strict=false]\n     * @returns {Number}\n     */\n\n    /**\n     * Returns a `Number` parsed from the given, formatted `value`, in accordance with the\n     * specified locale and formatting options.\n     *\n     * If the `value` cannot be parsed, `NaN` is returned.\n     *\n     * This method simply passes the `value` to `parse()` and passes `true` for the second\n     * argument.\n     *\n     * @method parseStrict\n     * @param {String} value\n     * @returns {Number}\n     */\n\n    /**\n     * Returns the given `Number` rounded in accordance with the specified locale and\n     * formatting options.\n     *\n     * @param {Number|String} value\n     * @returns {Number}\n     */\n    round(value) {\n        return this.parse(this.format(value));\n    }\n\n    /**\n     * Returns the given `Number` truncated to the `maximumFractionDigits` in accordance\n     * with the specified locale and formatting options.\n     *\n     * @param {Number|String} value\n     * @returns {Number}\n     */\n    truncate(value) {\n        const\n            me = this,\n            scale = me.maximumFractionDigits,\n            { truncator } = me;\n\n        let v = me.parse(value),\n            dot;\n\n        if (truncator) {\n            v = truncator.format(v);\n            dot = v.indexOf(truncator.parser.decimal);\n\n            if (dot > -1 && v.length - dot  - 1 > scale) {\n                v = v.substr(0, dot + scale + 1);\n            }\n\n            v = truncator.parse(v);\n        }\n\n        return v;\n    }\n\n    resolvedOptions() {\n        const options = super.resolvedOptions();\n\n        for (const key in options) {\n            // For some reason, on TeamCity, tests get undefined for some properties...\n            // maybe a locale issue?\n            if (options[key] === undefined) {\n                options[key] = this[key];\n            }\n        }\n\n        return options;\n    }\n\n    /**\n     * Expands the provided shorthand into the \"minimum*Digits\" and \"maximum*Digits\".\n     * @param {String} name\n     * @param {Boolean} setMin\n     * @param {Boolean} setMax\n     * @private\n     */\n    _minMax(name, setMin, setMax) {\n        const\n            me = this,\n            value = me[name];\n\n        if (value != null) {\n            const\n                capName = StringHelper.capitalize(name),\n                max = `maximum${capName}Digits`,\n                min = `minimum${capName}Digits`;\n\n            if (typeof value === 'number') {\n                if (setMin) {\n                    me[min] = value;\n                }\n\n                if (setMax) {\n                    me[max] = value;\n                }\n            }\n            else {\n                me[min] = value[0];\n                me[max] = value[1];\n            }\n        }\n    }\n}\n\nNumberFormat.Parser = NumberParser;\n\nObject.assign(NumberFormat.prototype, {\n    // This object holds only those properties that Intl.NumberFormat accepts in its\n    // \"options\" parameter. Only these options will be copied from the NumberFormat\n    // and passed to the Intl.NumberFormat constructor and only these will be copied\n    // back from its resolvedOptions:\n    defaults : {\n        /**\n         * The formatting style.\n         *\n         * Valid values are: `'decimal'` (the default), `'currency'`, and `'percent'`.\n         * @config {'decimal'|'currency'|'percent'}\n         * @default\n         */\n        style : 'decimal',\n\n        /**\n         * The currency to use when using `style: 'currency'`. For example, `'USD'` (US dollar)\n         * or `'EUR'` for the euro.\n         *\n         * If not provided, the {@link Core.localization.LocaleManager} default will be used.\n         * @config {Boolean}\n         */\n        currency : null,\n\n        /**\n         * The format in which to display the currency value when using `style: 'currency'`.\n         *\n         * Valid values are: `'symbol'` (the default), `'code'`, and `'name'`.\n         * @config {'symbol'|'code'|'name'}\n         * @default\n         */\n        currencyDisplay : 'symbol',\n\n        /**\n         * The name of the locale. For example, `'en-US'`. This config is the same as the\n         * first argument to the `Intl.NumberFormat` constructor.\n         *\n         * Defaults to the browser's default locale.\n         * @config {String}\n         */\n        locale : null,\n\n        /**\n         * The maximum number of digits following the decimal.\n         *\n         * This is more convenient to specify using the {@link #config-fraction} config.\n         * @config {Number}\n         */\n        maximumFractionDigits : null,\n\n        /**\n         * The minimum number of digits following the decimal.\n         *\n         * This is more convenient to specify using the {@link #config-fraction} config.\n         * @config {Number}\n         */\n        minimumFractionDigits : null,\n\n        /**\n         * The minimum number of digits preceding the decimal.\n         *\n         * This is more convenient to specify using the {@link #config-integer} config.\n         * @config {Number}\n         */\n        minimumIntegerDigits : null,\n\n        /**\n         * The maximum number of significant digits.\n         *\n         * This is more convenient to specify using the {@link #config-significant} config.\n         * @config {Number}\n         */\n        maximumSignificantDigits : null,\n\n        /**\n         * The minimum number of significant digits.\n         *\n         * This is more convenient to specify using the {@link #config-significant} config.\n         * @config {Number}\n         */\n        minimumSignificantDigits : null,\n\n        /**\n         * Specify `false` to disable thousands separators.\n         * @config {Boolean}\n         * @default\n         */\n        useGrouping : true\n    },\n\n    /**\n     * Specifies the `minimumFractionDigits` and `minimumFractionDigits` in a compact\n     * way. If this value is a `Number`, it sets both the minimum and maximum to that\n     * value. If this value is an array, `[0]` sets the minimum and `[1]` sets the\n     * maximum.\n     * @config {Number|Number[]}\n     */\n    fraction : null,\n\n    from : null,\n\n    /**\n     * An alias for `minimumIntegerDigits`.\n     * @config {Number}\n     */\n    integer : null,\n\n    /**\n     * Specifies the `minimumSignificantDigits` and `minimumSignificantDigits` in a compact\n     * format. If this value is a `Number`, it sets only the maximum to that value. If this\n     * value is an array, `[0]` sets the minimum and `[1]` sets the maximum.\n     *\n     * If this value (or `minimumSignificantDigits` or `minimumSignificantDigits`) is set,\n     * `integer` (and `minimumIntegerDigits`) and `fraction` (and `minimumFractionDigits`\n     * and `minimumFractionDigits`) are ignored.\n     *\n     * @config {Number|Number[]}\n     */\n    significant : null,\n\n    /**\n     * A format template consisting of the following parts:\n     *```\n     *  [$] [\\d+:] \\d+ [,\\d+] [.\\d* [#*] | *] [%]\n     *```\n     * If the template begins with a `'$'`, the formatter's `style` option is set to\n     * `'currency'`. If the template ends with `'%'`, `style` is set to `'percent'`.\n     * It is invalid to include both characters. When using `'$'`, the `currency` symbol\n     * defaults to what is provided by the {@link Core.localization.LocaleManager}.\n     *\n     * To set the `minimumIntegerDigits`, the desired minimum comes before the first\n     * digits in the template and is followed by a `'>'` (greater-than). For example:\n     *```\n     *  5>9,999.00\n     *```\n     * The above sets `minimumIntegerDigits` to 5.\n     *\n     * The `useGrouping` option is enabled if there is a `','` (comma) present and is\n     * disabled otherwise.\n     *\n     * If there is a `'.'` (decimal) present, it may be followed by either of:\n     *\n     *  - Zero or more digits which may then be followed by zero or more `'#'` characters.\n     *    The number of digits determines the `minimumFractionDigits`, while the total\n     *    number of digits and `'#'`s determines the `maximumFractionDigits`.\n     *  - A single `'*'` (asterisk) indicating any number of fractional digits (no minimum\n     *    or maximum).\n     *\n     * @config {String}\n     */\n    template : null\n});\n\nObject.assign(NumberFormat.prototype, NumberFormat.prototype.defaults);\n\n// TODO is this the \"right\" way to do this?\nFormatter.number = (format, value) => NumberFormat.format(format, value);\n","import Base from '../Base.js';\nimport DayTime from './DayTime.js';\nimport Events from '../mixin/Events.js';\nimport DH from '../helper/DateHelper.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\n\n/**\n * @module Core/util/Month\n */\n\n/**\n * A class which encapsulates a calendar view of a month, and offers information about\n * the weeks and days within that calendar view.\n * ```\n *   // December 2018 using Monday as week start\n *   const m = new Month({\n *       date         : '2018-12-01',\n *       weekStartDay : 1\n *   });\n *\n *   m.eachWeek((week, dates) => console.log(dates.map(d => d.getDate())))\n * ```\n */\nexport default class Month  extends Events(Base) {\n\n    static $name = 'Month';\n\n    static get configurable() {\n        return {\n            /**\n             * The date which the month should encapsulate. May be a `Date` object, or a\n             * `YYYY-MM-DD` format string.\n             *\n             * Mutating a passed `Date` after initializing a `Month` object has no effect on\n             * the `Month` object.\n             * @config {Date|String}\n             */\n            date : {\n                $config : {\n                    equal : 'date'\n                },\n                value : DH.clearTime(new Date())\n            },\n\n            month : null,\n\n            year : null,\n\n            /**\n             * The week start day, 0 meaning Sunday, 6 meaning Saturday.\n             * Defaults to {@link Core.helper.DateHelper#property-weekStartDay-static}.\n             * @config {Number}\n             */\n            weekStartDay : null,\n\n            /**\n             * Configure as `true` to have the visibleDayColumnIndex and visibleColumnCount properties\n             * respect the configured {@link #config-nonWorkingDays}.\n             * @config {Boolean}\n             */\n            hideNonWorkingDays : null,\n\n            /**\n             * Non-working days as an object where keys are day indices, 0-6 (Sunday-Saturday), and the value is `true`.\n             * Defaults to {@link Core.helper.DateHelper#property-nonWorkingDays-static}.\n             * @config {Object<String,Boolean>}\n             */\n            nonWorkingDays : null,\n\n            /**\n             * Configure as `true` to always have the month encapsulate six weeks.\n             * This is useful for UIs which must be a fixed height.\n             * @prp {Boolean}\n             */\n            sixWeeks : null\n        };\n    }\n\n    //region events\n\n    /**\n     * Fired when setting the {@link #config-date} property causes the encapsulated date to change\n     * in **any** way, date, week, month or year.\n     * @event dateChange\n     * @param {Core.util.Month} source The Month which triggered the event.\n     * @param {Date} newDate The new encapsulated date value.\n     * @param {Date} oldDate The previous encapsulated date value.\n     * @param {Number} changes An object which contains properties which indicate what part of the date changed.\n     * @param {Boolean} changes.d True if the date changed in any way.\n     * @param {Boolean} changes.w True if the week changed (including same week in a different year).\n     * @param {Boolean} changes.m True if the month changed (including same month in a different year).\n     * @param {Boolean} changes.y True if the year changed.\n     * @param {Boolean} changes.r True if the row count (with respect to the {@link #config-sixWeeks} setting) changed.\n     */\n\n    /**\n     * Fired when setting the {@link #config-date} property causes a change of week. Note that\n     * weeks are calculated in the ISO standard form such that if there are fewer than four\n     * days in the first week of a year, then that week is owned by the previous year.\n     *\n     * The {@link #config-weekStartDay} is honoured when making this calculation and this is a\n     * locale-specific value which defaults to the ISO standard of 1 (Monday) in provided European\n     * locales and 0 (Sunday) in the provided US English locale.\n     * @event weekChange\n     * @param {Core.util.Month} source The Month which triggered the event.\n     * @param {Date} newDate The new encapsulated date value.\n     * @param {Date} oldDate The previous encapsulated date value.\n     * @param {Number} changes An object which contains properties which indicate what part of the date changed.\n     * @param {Boolean} changes.d True if the date changed in any way.\n     * @param {Boolean} changes.w True if the week changed (including same week in a different year).\n     * @param {Boolean} changes.m True if the month changed (including same month in a different year).\n     * @param {Boolean} changes.y True if the year changed.\n     * @param {Boolean} changes.r True if the row count (with respect to the {@link #config-sixWeeks} setting) changed.\n     */\n\n    /**\n     * Fired when setting the {@link #config-date} property causes a change of month. This\n     * will fire when changing to the same month in a different year.\n     * @event monthChange\n     * @param {Core.util.Month} source The Month which triggered the event.\n     * @param {Date} newDate The new encapsulated date value.\n     * @param {Date} oldDate The previous encapsulated date value.\n     * @param {Number} changes An object which contains properties which indicate what part of the date changed.\n     * @param {Boolean} changes.d True if the date changed in any way.\n     * @param {Boolean} changes.w True if the week changed (including same week in a different year).\n     * @param {Boolean} changes.m True if the month changed (including same month in a different year).\n     * @param {Boolean} changes.y True if the year changed.\n     * @param {Boolean} changes.r True if the row count (with respect to the {@link #config-sixWeeks} setting) changed.\n     */\n\n    /**\n     * Fired when setting the {@link #config-date} property causes a change of year.\n     * @event yearChange\n     * @param {Core.util.Month} source The Month which triggered the event.\n     * @param {Date} newDate The new encapsulated date value.\n     * @param {Date} oldDate The previous encapsulated date value.\n     * @param {Number} changes An object which contains properties which indicate what part of the date changed.\n     * @param {Boolean} changes.d True if the date changed in any way.\n     * @param {Boolean} changes.w True if the week changed (including same week in a different year).\n     * @param {Boolean} changes.m True if the month changed (including same month in a different year).\n     * @param {Boolean} changes.y True if the year changed.\n     * @param {Boolean} changes.r True if the row count (with respect to the {@link #config-sixWeeks} setting) changed.\n     */\n\n    //endRegion\n\n    /**\n     * For use when this Month's `weekStartDay` is non-zero.\n     *\n     * An array to map the days of the week 0-6 of this Calendar to the canonical day numbers\n     * used by the Javascript [Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object.\n     * @member {Number[]} canonicalDayNumbers\n     * @readonly\n     */\n\n    /**\n     * An array to map a canonical day number to a *visible* column index.\n     * For example, if we have `weekStartDay` as Monday which is 1, and non working days as\n     * Wednesday, and `hideNonWorkingDays : true`, then the calendar would look like\n     *\n     *```\n     * ┌────┬────┬────┬────┬────┬────┐\n     * | Mo | Tu | Th | Fr | Sa | Su |\n     * └────┴────┴────┴────┴────┴────┘\n     *```\n     *\n     * So we'd need this array: `[ 5, 0, 1, undefined, 2, 3, 4]`\n     * @member {Number[]} visibleDayColumnIndex\n     * @readonly\n     */\n\n    /**\n     * An array to map a canonical day number to a 0-6 column index.\n     * For example, if we have `weekStartDay` as Monday which is 1, then the calendar would look like\n     *\n     *```\n     * ┌────┬────┬────┬────┬────┬────┬────┐\n     * | Mo | Tu | We | Th | Fr | Sa | Su |\n     * └────┴────┴────┴────┴────┴────┴────┘\n     *```\n     *\n     * So we'd need this array: `[ 6, 0, 1, 2, 3, 4, 5]`\n     * @member {Number[]} dayColumnIndex\n     * @readonly\n     */\n\n    /**\n     * The number of visible days in the week as defined by the `nonWorkingDays` and\n     * `hideNonWorkingDays` options.\n     * @member {Number} weekLength\n     * @readonly\n     */\n\n    configure(config) {\n        super.configure(config);\n\n        this.updateDayNumbers();\n\n        // The set is rejected during configuration because everything else has to be set up.\n        if (config.date) {\n            this.date = config.date;\n        }\n        this.generation = 0;\n    }\n\n    changeDate(date) {\n        // Date has to be set after we know everything else\n        if (this.isConfiguring) {\n            return;\n        }\n\n        date = typeof date === 'string' ? DH.parse(date, 'YYYY-MM-DD') : new Date(date);\n\n        if (isNaN(date)) {\n            throw new Error('Month date ingestion must be passed a Date, or a valid YYYY-MM-DD date string');\n        }\n\n        return date;\n    }\n\n    updateDate(newDate, oldDate) {\n        const\n            me            = this,\n            {\n                dayColumnIndex,\n                weekCount\n            }             = me,\n            monthStart    = DH.getFirstDateOfMonth(newDate),\n            monthEnd      = DH.getLastDateOfMonth(monthStart),\n            startWeekDay  = dayColumnIndex[monthStart.getDay()],\n            endWeekDay    = dayColumnIndex[monthEnd.getDay()],\n            yearChanged   = !oldDate || (newDate.getFullYear() !== oldDate.getFullYear()),\n            monthChanged  = !oldDate || (newDate.getMonth() !== oldDate.getMonth()),\n            // Collect changes as bitwise flags if we have any listeners:\n            // 0001 = date has changed.\n            // 0010 = week has changed.\n            // 0100 = month has changed.\n            // 1000 = year has changed.\n            // We need this because 10/1/2010 -> 10/1/2011 must fire a dateChange\n            // and a monthChange in addition to the yearChange.\n            // And 10/1/2010 -> 10/2/2010 must fire a dateChange in addition to the monthChange.\n            changes = me.eventListeners && (oldDate ? (newDate.getDate() !== oldDate.getDate()) |\n            (me.getWeekId(newDate) !== me.getWeekId(oldDate)) << 1 |\n            monthChanged << 2 |\n            yearChanged << 3 : 15);\n\n        // Keep our properties in sync with reality.\n        // Access the private properties directly to avoid recursion.\n        me._year = newDate.getFullYear();\n        me._month = newDate.getMonth();\n\n        // These comments assume ISO standard of Monday as week start day.\n        //\n        // This is the date of month that is the beginning of the first week row.\n        // So this may be -ve. Eg: for Dec 2018, Monday 26th Nov is the first\n        // cell on the calendar which is the -4th of December. Note that the 0th\n        // of December was 31st of November, so needs -4 to get back to the 26th.\n        me.startDayOfMonth = 1 - startWeekDay;\n\n        // This is the date of month that is the end of the last week row.\n        // So this may be > month end. Eg: for Dec 2018, Sunday 6th Jan is the last\n        // cell on the calendar which is the 37th of December.\n        me.endDayOfMonth = monthEnd.getDate() + (6 - endWeekDay);\n\n        if (me.sixWeeks) {\n            me.endDayOfMonth += (6 - me.weekCount) * 7;\n        }\n\n        // Calculate the start point of where we calculate weeks from if we need to.\n        // It's either the first \"weekStartDay\" in this year if this year's\n        // first week is last year's, and so should work out as zero,\n        // or the \"weekStartDay\" of the week before, so that dates in the first week\n        // the Math.floor(DH.diff(weekBase, date, 'day') / 7) calculates as 1.\n        if (!me.weekBase || yearChanged) {\n            me.calculateWeekBase();\n        }\n\n        // Allow calling code to detect whether a set date operation resulted in a change\n        // of month.\n        if (monthChanged || yearChanged) {\n            me.generation++;\n        }\n\n        if (changes) {\n            const event = {\n                newDate,\n                oldDate,\n                changes : {\n                    d : true,\n                    w : Boolean(changes & 2),\n                    m : Boolean(changes & 12),\n                    y : Boolean(changes & 8),\n                    r : me.weekCount !== weekCount\n                }\n            };\n\n            // If either date, month or year changes, we fire a dateChange\n            me.trigger('dateChange', event);\n\n            // If the week has changed, fire a weekChange\n            if (changes & 2) {\n                me.trigger('weekChange', event);\n            }\n\n            // If month or year changed, we fire a monthChange\n            if (changes & 12) {\n                me.trigger('monthChange', event);\n            }\n\n            // If the year has changed, fire a yearChange\n            if (changes & 8) {\n                me.trigger('yearChange', event);\n            }\n        }\n    }\n\n    calculateWeekBase() {\n        const\n            me      = this,\n            {\n                dayColumnIndex\n            }       = me,\n            jan1    = new Date(me.year, 0, 1),\n            dec31   = new Date(me.year, 11, 31),\n            january = me.month ? me.getOtherMonth(jan1) : me;\n\n        // First 7 days are in last week of previous year if the year\n        // starts after our 4th day of week.\n        if (me.dayColumnIndex[jan1.getDay()] > 3) {\n            // Week base is calculated from the year start\n            me.weekBase = january.startDate;\n        }\n        // First 7 days are in week 1 of this year\n        else {\n            // Week base is the start of week before\n            me.weekBase = new Date(me.year, 0, january.startDayOfMonth - 7);\n        }\n\n        const dec31Week = Math.floor(DH.diff(me.weekBase, dec31, 'day') / 7);\n\n        // Our year only has a 53rd week if 53rd week ends after our week's 3rd day\n        me.has53weeks = dec31Week === 53 && dayColumnIndex[dec31.getDay()] > 2;\n    }\n\n    /**\n     * Returns the week start date, based on the configured {@link #config-weekStartDay} of the\n     * passed week.\n     * @param {Number| Number[]} week The week number in the current year, or an array containing\n     * `[year, weekOfYear]` for any year.\n     *\n     * Week numbers greater than the number of weeks in the year just wrap into the following year.\n     */\n    getWeekStart(week) {\n        // Week number n of current year\n        if (typeof week === 'number') {\n            return DH.add(this.weekBase, Math.max(week, 1) * 7, 'day');\n        }\n\n        // Week n of year nnnn\n        const\n            me = this,\n            [year, weekOfYear] = week;\n\n        // nnnn is our year, so we know it\n        if (year === me.year) {\n            return me.getWeekStart(weekOfYear);\n        }\n\n        return me.getOtherMonth(new Date(year, 0, 1)).getWeekStart(weekOfYear);\n    }\n\n    getOtherMonth(date) {\n        const\n            me     = this,\n            result = (me === otherMonth) ? new Month(null) : otherMonth;\n\n        result.configure({\n            weekBase           : null,\n            weekStartDay       : me.weekStartDay,\n            nonWorkingDays     : me.nonWorkingDays,\n            hideNonWorkingDays : me.hideNonWorkingDays,\n            sixWeeks           : me.sixWeeks,\n            date               : new Date(date.getFullYear(), 0, 1) // Make it easy to calculate its own weekBase\n        });\n\n        result.date = date;\n\n        // in this case, the date config ignores changes w/=== getTime so we have to force the update because we\n        // also cleared weekBase above\n        result.updateDate(result.date, result.date);\n\n        return result;\n    }\n\n    changeYear(year) {\n        const newDate = new Date(this.date);\n\n        newDate.setFullYear(year);\n\n        // changeDate rejects non-changes, otherwise a change event will be emitted\n        this.date = newDate;\n    }\n\n    changeMonth(month) {\n        const newDate = new Date(this.date);\n\n        newDate.setMonth(month);\n\n        // changeDate rejects non-changes, otherwise a change event will be emitted\n        this.date = newDate;\n    }\n\n    get weekStartDay() {\n        // This trick allows our weekStartDay to float w/the locale even if the locale changes\n        return typeof this._weekStartDay === 'number' ? this._weekStartDay : DH.weekStartDay;\n    }\n\n    updateWeekStartDay() {\n        const me = this;\n\n        me.updateDayNumbers();\n\n        if (!me.isConfiguring && me.date) {\n            me.weekBase = null;  // force a calculateWeekBase\n            me.updateDate(me.date, me.date);\n        }\n        // else date will be set soon and weekBase is null so calculateWeekBase will be called by updateDate\n    }\n\n    get nonWorkingDays() {\n        return this._nonWorkingDays || DH.nonWorkingDays;\n    }\n\n    changeNonWorkingDays(nonWorkingDays) {\n        return ObjectHelper.assign({}, nonWorkingDays);\n    }\n\n    updateNonWorkingDays() {\n        this.updateDayNumbers();\n    }\n\n    updateHideNonWorkingDays() {\n        this.updateDayNumbers();\n    }\n\n    updateSixWeeks() {\n        if (!this.isConfiguring) {\n            this.updateDate(this.date, this.date);\n        }\n    }\n\n    /**\n     * The number of days in the calendar for this month. This will always be\n     * a multiple of 7, because this represents the number of calendar cells\n     * occupied by this month.\n     * @property {Number}\n     * @readonly\n     */\n    get dayCount() {\n        // So for the example month, Dec 2018 has 42 days, from Mon 26th Nov (-4th Dec) 2018\n        // to Sun 6th Jan (37th Dec) 2019\n        return (this.endDayOfMonth + 1) - this.startDayOfMonth;\n    }\n\n    /**\n     * The number of weeks in the calendar for this month.\n     * @property {Number}\n     * @readonly\n     */\n    get weekCount() {\n        return this.dayCount / 7;\n    }\n\n    /**\n     * The date of the first cell in the calendar view of this month.\n     * @property {Date}\n     * @readonly\n     */\n    get startDate() {\n        const me = this;\n\n        if (me.year != null && me.month != null && me.startDayOfMonth != null) {\n            return new Date(me.year, me.month, me.startDayOfMonth);\n        }\n    }\n\n    /**\n     * The date of the last cell in the calendar view of this month.\n     * @property {Date}\n     * @readonly\n     */\n    get endDate() {\n        const me = this;\n\n        if (me.year != null && me.month != null && me.startDayOfMonth != null) {\n            return new Date(me.year, me.month, me.endDayOfMonth);\n        }\n    }\n\n    /**\n     * Iterates through all calendar cells in this month, calling the passed function for each date.\n     * @param {Function} fn The function to call.\n     * @param {Date} fn.date The date for the cell.\n     */\n    eachDay(fn) {\n        for (let dayOfMonth = this.startDayOfMonth; dayOfMonth <= this.endDayOfMonth; dayOfMonth++) {\n            fn(new Date(this.year, this.month, dayOfMonth));\n        }\n    }\n\n    /**\n     * Iterates through all weeks in this month, calling the passed function\n     * for each week.\n     * @param {Function} fn The function to call.\n     * @param {Number[]} fn.week An array containing `[year, weekNumber]`\n     * @param {Date[]} fn.dates The dates for the week.\n     */\n    eachWeek(fn) {\n        const me = this,\n            { weekCount } = me;\n\n        for (let dayOfMonth = me.startDayOfMonth, week = 0; week < weekCount; week++) {\n            const weekDates  = [],\n                weekOfYear = me.getWeekNumber(new Date(me.year, me.month, dayOfMonth));\n\n            for (let day = 0; day < 7; day++, dayOfMonth++) {\n                weekDates.push(new Date(me.year, me.month, dayOfMonth));\n            }\n            fn(weekOfYear, weekDates);\n        }\n    }\n\n    /**\n     * Returns the week of the year for the passed date. This returns an array containing *two* values,\n     * the year **and** the week number are returned.\n     *\n     * The week number is calculated according to ISO rules, meaning that if the first week of the year\n     * contains less than four days, it is considered to be the last week of the preceding year.\n     *\n     * The configured {@link #config-weekStartDay} is honoured in this calculation. So if the weekStartDay\n     * is **NOT** the ISO standard of `1`, (Monday), then the weeks do not coincide with ISO weeks.\n     * @param {Date} date The date to calculate the week for.\n     * @returns {Number[]} A numeric array: `[year, week]`\n     */\n    getWeekNumber(date) {\n        const me = this;\n\n        date = DH.clearTime(date);\n\n        // If it's a date in another year, use our otherMonth to find the answer.\n        if (date.getFullYear() !== me.year) {\n            return me.getOtherMonth(new Date(date.getFullYear(), 0, 1)).getWeekNumber(date);\n        }\n\n        let weekNo = Math.floor(DH.diff(me.weekBase, date, 'day') / 7),\n            year = date.getFullYear();\n\n        // No week 0. It's the last week of last year\n        if (!weekNo) {\n            // Week is the week of last year's 31st Dec\n            return me.getOtherMonth(new Date(me.year - 1, 0, 1)).getWeekNumber(new Date(me.year, 0, 0));\n        }\n        // Only week 53 if year ends before our week's 5th day\n        else if (weekNo === 53 && !me.has53weeks) {\n            weekNo = 1;\n            year++;\n        }\n        // 54 wraps round to 2 of next year\n        else if (weekNo > 53) {\n            weekNo = weekNo % 52;\n        }\n\n        // Return array of year and week number\n        return [year, weekNo];\n    }\n\n    getWeekId(date) {\n        const week = this.getWeekNumber(date);\n\n        return week[0] * 100 + week[1];\n    }\n\n    getCellData(date, ownerMonth, dayTime = DayTime.MIDNIGHT) {\n        const\n            me                 = this,\n            day                = date.getDay(),\n            visibleColumnIndex = me.visibleDayColumnIndex[day],\n            isNonWorking       = me.nonWorkingDays[day],\n            isHiddenDay        = me.hideNonWorkingDays && isNonWorking;\n\n        // Automatically move to required month\n        if (date < me.startDate || date > me.endDate) {\n            me.month = date.getMonth();\n        }\n\n        return  {\n            day,\n            dayTime,\n            visibleColumnIndex,\n            isNonWorking,\n            week        : me.getOtherMonth(date).getWeekNumber(date),\n            key         : DH.format(date, 'YYYY-MM-DD'),\n            columnIndex : me.dayColumnIndex[day],\n            date        : new Date(date),\n            dayEnd      : dayTime.duration('s'),\n            tomorrow    : dayTime.dayOfDate(DH.add(date, 1, 'day')),\n\n            // These two properties are only significant when used by a CalendarPanel which encapsulates\n            // a single month.\n            isOtherMonth : Math.sign((date.getMonth() + date.getFullYear() * 12) - (ownerMonth.month + ownerMonth.year * 12)),\n            visible      : !isHiddenDay && (date >= ownerMonth.startDate && date < DH.add(ownerMonth.endDate, 1, 'day')),\n            isRowStart   : visibleColumnIndex === 0,\n            isRowEnd     : visibleColumnIndex === me.visibleColumnCount - 1\n        };\n    }\n\n    updateDayNumbers() {\n        const\n            me                    = this,\n            {\n                weekStartDay,\n                nonWorkingDays,\n                hideNonWorkingDays\n            }                     = me,\n            dayColumnIndex        = me.dayColumnIndex = [],\n            canonicalDayNumbers   = me.canonicalDayNumbers = [],\n            visibleDayColumnIndex = me.visibleDayColumnIndex = [];\n\n        // So, if they set weekStartDay to 1 meaning Monday which is ISO standard, we will\n        // have mapping of internal day number to canonical day number (as used by Date class)\n        // and to abbreviated day name like this:\n        // canonicalDayNumbers = [1, 2, 3, 4, 5, 6, 0] // Use for translation from our day number to Date class's day number\n        //\n        // Also, we need a map from canonical day number to *visible* cell index.\n        // for example, if we have weekStartDay as Monday which is 1, and non working days as\n        // Wednesday, and hideNonWorkingDays:true, then the calendar would look like\n        // +----+----+----+----+----+----+\n        // | Mo | Tu | Th | Fr | Sa | Su |\n        // +----+----+----+----+----+----+\n        //\n        // So we'd need this array\n        // [ 5, 0, 1, undefined, 2, 3, 4]\n        // Or think of it as this map:\n        // {\n        //      1 : 0,\n        //      2 : 1,\n        //      4 : 2,\n        //      5 : 3,\n        //      6 : 4,\n        //      0 : 5\n        // }\n        // To be able to ascertain the cell index directly from the canonical day number.\n        //\n        // We also need a logical column map which would be\n        // +----+----+----+----+----+----+----+\n        // | Mo | Tu | We | Th | Fr | Sa | Su |\n        // +----+----+----+----+----+----+----+\n        //\n        // So we'd need this array\n        // [ 6, 0, 1, 2, 3, 4, 5]\n        // Or think of it as this map:\n        // {\n        //      1 : 0,\n        //      2 : 1,\n        //      3 : 2\n        //      4 : 3,\n        //      5 : 4,\n        //      6 : 5,\n        //      0 : 6\n        // }\n\n        // We use this to cache the number of visible columns so that cell renderers can tell whether\n        // they are on the last visible column.\n        let visibleColumnIndex = 0;\n\n        for (let columnIndex = 0; columnIndex < 7; columnIndex++) {\n            const canonicalDay = (weekStartDay + columnIndex) % 7;\n\n            canonicalDayNumbers[columnIndex] = canonicalDay;\n            dayColumnIndex[canonicalDay] = columnIndex;\n\n            // If this day is going to have visible representation, we need to\n            // map it to a columnIndex;\n            if (!hideNonWorkingDays || !nonWorkingDays[canonicalDay]) {\n                visibleDayColumnIndex[canonicalDay] = visibleColumnIndex++;\n            }\n        }\n        me.visibleColumnCount = visibleColumnIndex;\n        me.weekLength = hideNonWorkingDays ? 7 - ObjectHelper.keys(nonWorkingDays).length : 7;\n    }\n}\n\n// Instance needed for internal tasks\nconst otherMonth = new Month(null);\n","import Panel from './Panel.js';\nimport ArrayHelper from '../helper/ArrayHelper.js';\nimport DateHelper from '../helper/DateHelper.js';\nimport TimeZoneHelper from '../helper/TimeZoneHelper.js';\nimport Month from '../util/Month.js';\nimport Tooltip from './Tooltip.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\nimport DomHelper from '../helper/DomHelper.js';\n\n/**\n * @module Core/widget/CalendarPanel\n */\n\n/**\n * A Panel which displays a month of date cells.\n *\n * This is a base class for UI widgets like {@link Core.widget.DatePicker} which need to display a calendar layout\n * and should not be used directly.\n * @extends Core/widget/Panel\n */\nexport default class CalendarPanel extends Panel {\n    static get $name() {\n        return 'CalendarPanel';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'calendarpanel';\n    }\n\n    static get configurable() {\n        return {\n            textContent : false,\n\n            /**\n             * Gets or sets the date that orientates the panel to display a particular month.\n             * Changing this causes the content to be refreshed.\n             * @member {Date} date\n             */\n            /**\n             * The date which this CalendarPanel encapsulates.\n             * @config {Date|String}\n             */\n            date : {\n                $config : {\n                    equal : 'date'\n                },\n                value : null\n            },\n\n            /**\n             * A {@link Core.util.Month} Month utility object which encapsulates this Panel's month\n             * and provides contextual information and navigation services.\n             * @config {Core.util.Month|MonthConfig}\n             */\n            month : {},\n\n            year : null,\n\n            /**\n             * The week start day, 0 meaning Sunday, 6 meaning Saturday.\n             * Defaults to {@link Core.helper.DateHelper#property-weekStartDay-static}.\n             * @config {Number}\n             */\n            weekStartDay : null,\n\n            /**\n             * Configure as `true` to always show a six week calendar.\n             * @config {Boolean}\n             * @default\n             */\n            sixWeeks : true,\n\n            /**\n             * Configure as `true` to show a week number column at the start of the calendar block.\n             * @deprecated Since 4.0.0. Use {@link #config-showWeekColumn} instead.\n             * @config {Boolean}\n             */\n            showWeekNumber : null,\n\n            /**\n             * Configure as `true` to show a week number column at the start of the calendar block.\n             * @config {Boolean}\n             */\n            showWeekColumn : null,\n\n            /**\n             * Either an array of `Date` objects which are to be disabled, or\n             * a function (or the name of a function), which, when passed a `Date` returns `true` if the\n             * date is disabled.\n             * @config {Function|Date[]|String}\n             */\n            disabledDates : null,\n\n            /**\n             * A function (or the name of a function) which creates content in, and may mutate a day header element.\n             * The following parameters are passed:\n             *  - cell [HTMLElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement) The header element.\n             *  - day [Number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) The day number conforming to the specified {@link #config-weekStartDay}. Will be in the range 0 to 6.\n             *  - weekDay [Number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) The canonical day number where Monday is 0 and Sunday is.\n             * @config {Function|String}\n             */\n            headerRenderer : null,\n\n            /**\n             * A function (or the name of a function) which creates content in, and may mutate the week cell element at the start of a week row.\n             * The following parameters are passed:\n             *  - cell [HTMLElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement) The header element.\n             *  - week [Number[]](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) An array containing `[year, weekNumber]`.\n             * @config {Function|String}\n             */\n            weekRenderer : null,\n\n            /**\n             * A function (or the name of a function) which creates content in, and may mutate a day cell element.\n             * The following parameters are passed:\n             *  - cell [HTMLElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement) The header element.\n             *  - date [Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) The date for the cell.\n             *  - day [Number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) The day for the cell (0 to 6 for Sunday to Saturday).\n             *  - rowIndex [Number[]](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) The row index, 0 to month row count (6 if {@link #config-sixWeeks} is `true`).\n             *  _ row [HTMLElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement) The row element encapsulating the week which the cell is a part of.\n             *  - cellIndex [Number[]](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) The cell index in the whole panel. May be from 0 to up to 42.\n             *  - columnIndex [Number[]](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) The column index, 0 to 6.\n             *  - visibleColumnIndex [Number[]](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) The visible column index taking hidden non working days into account.\n             * @config {Function|String}\n             */\n            cellRenderer : null,\n\n            /**\n             * Configure as `true` to render weekends as {@link #config-disabledDates}.\n             * @config {Boolean}\n             */\n            disableWeekends : null,\n\n            hideNonWorkingDays : null,\n\n            hideNonWorkingDaysCls : 'b-hide-nonworking-days',\n\n            /**\n             * Non-working days as an object where keys are day indices, 0-6 (Sunday-Saturday), and the value is `true`.\n             * Defaults to {@link Core.helper.DateHelper#property-nonWorkingDays-static}.\n             * @config {Object<Number,Boolean>}\n             */\n            nonWorkingDays : null,\n\n            /**\n             * A config object to create a tooltip which will show on hover of a date cell including disabled, weekend,\n             * and \"other month\" cells.\n             *\n             * It is the developer's responsibility to hook the `beforeshow` event to either veto the show by returning\n             * `false` or provide contextual content for the date.\n             *\n             * The tip instance will be primed with a `date` property.\n             * @config {TooltipConfig}\n             */\n            tip : null,\n\n            dayCellCls   : 'b-calendar-cell',\n            dayHeaderCls : 'b-calendar-day-header',\n\n            /**\n             * The class name to add to disabled calendar cells.\n             * @config {String}\n             * @private\n             */\n            disabledCls : 'b-disabled-date',\n\n            /**\n             * The class name to add to calendar cells which are in the previous or next month.\n             * @config {String}\n             * @private\n             */\n            otherMonthCls : 'b-other-month',\n\n            /**\n             * The class name to add to calendar cells which are weekend dates.\n             * @config {String}\n             * @private\n             */\n            weekendCls : 'b-weekend',\n\n            /**\n             * The class name to add to the calendar cell which contains today's date.\n             * @config {String}\n             * @private\n             */\n            todayCls : 'b-today',\n\n            /**\n             * The class name to add to calendar cells which are {@link #config-nonWorkingDays}.\n             * @config {String}\n             * @private\n             */\n            nonWorkingDayCls : 'b-nonworking-day',\n\n            /**\n             * The {@link Core.helper.DateHelper} format string to format the day names\n             * in the header row above the calendar cells.\n             * @config {String}\n             * @default\n             */\n            dayNameFormat : 'ddd',\n\n            /**\n             * By default, week rows flex to share available Panel height equally.\n             *\n             * Set this config if the available height is too small, and the cell height needs\n             * to be larger to show events.\n             *\n             * Setting this config causes the month grid to become scrollable in the `Y` axis.\n             *\n             * May be specified as a number in which case it will be taken to mean pixels,\n             * or a length in standard CSS units.\n             * @config {Number|String}\n             */\n            minRowHeight : {\n                $config : ['lazy'],\n                value   : null\n            },\n\n            /**\n             * By default, day cells flex to share available Panel width equally.\n             *\n             * Set this config if the available width is too small, and the cell width needs\n             * to be larger to show events.\n             *\n             * Setting this config causes the month grid to become scrollable in the `X` axis.\n             * @config {Number}\n             */\n            minColumnWidth : {\n                $config : ['lazy'],\n                value   : null\n            },\n\n            /**\n             * Configure this as true to disable pointer interaction with cells which are outside the\n             * range of the current month.\n             * @config {Boolean}\n             */\n            disableOtherMonthCells : null,\n\n            disableOtherMonthCellsCls : 'b-disable-othermonth-cells',\n\n            /**\n             * Configure this as `true` to hide cells which are outside the range of the current month.\n             * @config {Boolean}\n             */\n            hideOtherMonthCells : null,\n\n            hideOtherMonthCellsCls : 'b-hide-othermonth-cells',\n\n            /**\n             * By default, when navigating through time, the next time\n             * block will be animated in from the appropriate direction.\n             *\n             * Configure this as `false` to disable this.\n             * @prp {Boolean} animateTimeShift\n             * @default\n             */\n            animateTimeShift : true\n        };\n    }\n\n    construct(config) {\n        super.construct(config);\n\n        if (!this.refreshCount) {\n            this.refresh();\n        }\n    }\n\n    onPaint({ firstPaint }) {\n        super.onPaint?.(...arguments);\n\n        // Invoke the lazy configs when we first hit the visible DOM\n        if (firstPaint) {\n            // The cell structure must exist for the configs to apply to.\n            if (!this.refreshCount) {\n                this.refresh();\n            }\n            this.getConfig('minColumnWidth');\n            this.getConfig('minRowHeight');\n        }\n    }\n\n    get overflowElement() {\n        return this.weeksElement;\n    }\n\n    doDestroy() {\n        this.tip?.destroy();\n\n        super.doDestroy();\n    }\n\n    changeMinRowHeight(minRowHeight) {\n        // Fall back to 75 on platforms that do not support CSS vars\n        const minValue = parseInt(DomHelper.getStyleValue(this.element, '--min-row-height'), 10) || 75;\n\n        return isNaN(minRowHeight) ? minRowHeight : Math.max(parseInt(minRowHeight) || 0, minValue);\n    }\n\n    updateMinRowHeight(minRowHeight) {\n        this.weekElements.forEach(w => DomHelper.setLength(w, 'minHeight', minRowHeight));\n\n        this.scrollable = {\n            overflowY : minRowHeight ? 'auto' : false\n        };\n    }\n\n    changeMinColumnWidth(minColumnWidth) {\n        // Fall back to 75 on platforms that do not support CSS vars\n        const minValue = parseInt(DomHelper.getStyleValue(this.element, '--min-column-width'), 10) || 75;\n\n        return minColumnWidth == null ? minColumnWidth : Math.max(parseInt(minColumnWidth) || 0, minValue);\n    }\n\n    updateMinColumnWidth(minColumnWidth) {\n        const me = this;\n\n        me.weekdayCells.forEach(c => DomHelper.setLength(c, 'minWidth', minColumnWidth));\n        me.cellElements.forEach(c => c.matches(`.${me.dayCellCls}`) && DomHelper.setLength(c, 'minWidth', minColumnWidth));\n\n        me.scrollable = {\n            overflowX : minColumnWidth ? 'auto' : false\n        };\n        me.overflowElement.classList[minColumnWidth ? 'add' : 'remove']('b-min-columnwidth');\n    }\n\n    getDateFromDomEvent(domEvent) {\n        const element = (domEvent.nodeType === Element.ELEMENT_NODE ? domEvent : domEvent.target).closest(`#${this.id} [data-date]`);\n\n        if (element) {\n            return DateHelper.parseKey(element.dataset.date);\n        }\n    }\n\n    changeTip(tip, existingTip) {\n        const me = this;\n\n        return Tooltip.reconfigure(existingTip, tip, {\n            owner    : me,\n            defaults : {\n                type        : 'tooltip',\n                owner       : me,\n                id          : `${me.id}-cell-tip`,\n                forElement  : me.bodyElement,\n                forSelector : `.${me.dayCellCls}`\n            }\n        });\n    }\n\n    updateTip(tip) {\n        this.detachListeners('tip');\n\n        tip?.ion({\n            pointerOver : 'onTipOverCell',\n\n            name    : 'tip',\n            thisObj : this\n        });\n    }\n\n    updateElement(element, was) {\n        const me = this;\n\n        super.updateElement(element, was);\n\n        me.updateHideNonWorkingDays(me.hideNonWorkingDays);\n        me.weekdayCells = Array.from(element.querySelectorAll('.b-calendar-day-header'));\n        me.weekElements = Array.from(element.querySelectorAll('.b-calendar-week'));\n        me.weekDayElements = Array.from(element.querySelectorAll('.b-calendar-days'));\n        me.cellElements = [];\n\n        for (let i = 0, { length } = me.weekDayElements; i < length; i++) {\n            me.cellElements.push(me.weekDayElements[i].previousSibling, ...me.weekDayElements[i].children);\n        }\n    }\n\n    changeDate(date) {\n        date = typeof date === 'string' ? DateHelper.parse(date) : new Date(date);\n        if (isNaN(date)) {\n            throw new Error('CalendarPanel date ingestion must be passed a Date, or a YYYY-MM-DD date string');\n        }\n\n        return DateHelper.clearTime(date);\n    }\n\n    /**\n     * The date which this CalendarPanel encapsulates. Setting this causes the\n     * content to be refreshed.\n     * @property {Date}\n     */\n    updateDate(value) {\n        // We respond to Month change events to update the UI\n        this.month.date = value;\n    }\n\n    updateDayNameFormat() {\n        // 4th June 2000 was a Sunday\n        const d = new Date('2000-06-04T12:00:00');\n\n        this.shortDayNames = [];\n\n        // Collect local shortDayNames in default order.\n        for (let date = 4; date < 11; date++) {\n            d.setDate(date);\n            this.shortDayNames.push(DateHelper.format(d, this.dayNameFormat));\n        }\n    }\n\n    get weekStartDay() {\n        // This trick allows our weekStartDay to float w/the locale even if the locale changes\n        return typeof this._weekStartDay === 'number' ? this._weekStartDay : DateHelper.weekStartDay;\n    }\n\n    /**\n     * Set to 0 for Sunday (the default), 1 for Monday etc.\n     *\n     * Set to `null` to use the default value from {@link Core/helper/DateHelper}.\n     */\n    updateWeekStartDay(weekStartDay) {\n        const me = this;\n\n        if (me._month) {\n            me.month.weekStartDay = weekStartDay;\n\n            me.dayNames = [];\n\n            // So, if they set weekStartDay to 1 meaning Monday which is ISO standard, we will\n            // dayNames = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n            for (let i = 0; i < 7; i++) {\n                me.dayNames[i] = me.shortDayNames[me.canonicalDayNumbers[i]];\n            }\n\n            if (me.refreshCount) {\n                me.refresh();\n            }\n        }\n    }\n\n    updateHideNonWorkingDays(hideNonWorkingDays) {\n        // Undefined must be cast to Boolean, otherwise it will toggle the class *on*.\n        this.contentElement.classList.toggle(this.hideNonWorkingDaysCls, Boolean(hideNonWorkingDays));\n        this.scrollable?.syncOverflowState();\n        if (this._month) {\n            this.month.hideNonWorkingDays = hideNonWorkingDays;\n        }\n        // First/last visible cell might change\n        if (!this.isConfiguring) {\n            this.refresh();\n        }\n    }\n\n    updateHideOtherMonthCells(hideOtherMonthCells) {\n        // Undefined must be cast to Boolean, otherwise it will toggle the class *on*.\n        this.element.classList.toggle(this.hideOtherMonthCellsCls, Boolean(hideOtherMonthCells));\n        this.scrollable?.syncOverflowState();\n    }\n\n    updateDisableOtherMonthCells(disableOtherMonthCells) {\n        // Undefined must be cast to Boolean, otherwise it will toggle the class *on*.\n        this.element.classList.toggle(this.disableOtherMonthCellsCls, Boolean(disableOtherMonthCells));\n        this.scrollable?.syncOverflowState();\n    }\n\n    get nonWorkingDays() {\n        // If we were not configured with non working days, ask the locale for them. Once.\n        // The cached value is cleared on locale change.\n        return this._nonWorkingDays || (this._localeNonWorkingDays || (this._localeNonWorkingDays = DateHelper.nonWorkingDays));\n    }\n\n    get weekends() {\n        // Ask the DateHelper which days are weekend days only once.\n        // The cached value is cleared on locale change.\n        return this._localeWeekends || (this._localeWeekends = DateHelper.weekends);\n    }\n\n    changeNonWorkingDays(nonWorkingDays) {\n        return ObjectHelper.assign({}, nonWorkingDays);\n    }\n\n    updateNonWorkingDays(nonWorkingDays) {\n        if (this._month) {\n            this.month.nonWorkingDays = nonWorkingDays;\n            this.refresh();\n            this.scrollable?.syncOverflowState();\n        }\n    }\n\n    get visibleDayColumnIndex() {\n        return this.month.visibleDayColumnIndex;\n    }\n\n    get dayColumnIndex() {\n        return this.month.dayColumnIndex;\n    }\n\n    get canonicalDayNumbers() {\n        return this.month.canonicalDayNumbers;\n    }\n\n    get visibleColumnCount() {\n        return this.month.visibleColumnCount;\n    }\n\n    get weekLength() {\n        return this.month.weekLength;\n    }\n\n    /**\n     * The date of the first day cell in this panel.\n     * Note that this may *not* be the first of this panel's current month.\n     * @property {Date}\n     * @readonly\n     */\n    get startDate() {\n        return this.month.startDate;\n    }\n\n    get duration() {\n        // The endDate is \"exclusive\" because it means 00:00:00 of that day.\n        return DateHelper.diff(this.month.startDate, this.month.endDate, 'day') + 1;\n    }\n\n    /**\n     * The end date of this view. Note that in terms of full days, this is exclusive,\n     * ie: 2020-01-012 to 2020-01-08 is *seven* days. The end is 00:00:00 on the 8th.\n     *\n     * Note that this may *not* be the last date of this panel's current month.\n     * @property {Date}\n     * @readonly\n     */\n    get endDate() {\n        const { endDate } = this.month;\n\n        if (endDate) {\n            return DateHelper.add(endDate, 1, 'day');\n        }\n    }\n\n    changeMonth(month, currentMonth) {\n        const me = this;\n\n        if (!(month instanceof Month)) {\n\n            // Setting month to a number when we already have a Month means\n            // just updating the month number of our Month\n            if (typeof month === 'number') {\n                if (currentMonth) {\n                    currentMonth.month = month;\n                    return;\n                }\n                const date = me.date || DateHelper.clearTime(new Date());\n\n                date.setMonth(month);\n                month = {\n                    date\n                };\n            }\n            month = Month.new({\n                weekStartDay       : me.weekStartDay,\n                nonWorkingDays     : me.nonWorkingDays,\n                hideNonWorkingDays : me.hideNonWorkingDays,\n                sixWeeks           : me.sixWeeks\n            }, month);\n        }\n\n        month.ion({\n            dateChange : 'onMonthDateChange',\n            thisObj    : me\n        });\n\n        return month;\n    }\n\n    onMonthDateChange({ source : month, newDate, oldDate, changes }) {\n        const me = this;\n\n        // Ensure we're always in sync with the data our Month holds\n        me.year = month.year;\n\n        if (!me.isConfiguring) {\n            // Only refresh if we don't contain a cell for the new date\n            // or if, internally, the Month we are mapping to the UI is different.\n            if (!me.getCell(newDate) || (changes.m || changes.y)) {\n                me.refresh();\n\n                if (me.animateTimeShift && me.isVisible) {\n                    DomHelper.slideIn(me.contentElement, newDate > oldDate ? 1 : -1);\n                }\n            }\n\n            /**\n             * Fires when the date of this CalendarPanel is set.\n             * @event dateChange\n             * @param {Date} value The new date.\n             * @param {Date} oldValue The old date.\n             * @param {Object} changes An object which contains properties which indicate what part of the date changed.\n             * @param {Boolean} changes.d True if the date changed in any way.\n             * @param {Boolean} changes.w True if the week changed (including same week in a different year).\n             * @param {Boolean} changes.m True if the month changed (including same month in a different year).\n             * @param {Boolean} changes.y True if the year changed.\n             */\n            me.trigger('dateChange', {\n                changes,\n                value    : newDate,\n                oldValue : oldDate\n            });\n        }\n    }\n\n    updateYear(year) {\n        this.month.year = year;\n    }\n\n    updateShowWeekNumber(showWeekNumber) {\n        this.updateShowWeekColumn(showWeekNumber);\n    }\n\n    updateShowWeekColumn(showWeekColumn) {\n        const me = this;\n\n        me.element.classList[showWeekColumn ? 'add' : 'remove']('b-show-week-column');\n        if (me.floating) {\n            // Must realign because content change might change dimensions\n            if (!me.isAligning) {\n                me.realign();\n            }\n        }\n    }\n\n    updateSixWeeks(sixWeeks) {\n        if (this.month) {\n            this.month.sixWeeks = sixWeeks;\n            this.refresh();\n        }\n    }\n\n    /**\n     * Refreshes the UI after changing a config that would affect the UI.\n     */\n    refresh() {\n        // This method may be overridden by subclasses to add things like refresh scheduling.\n        this.doRefresh();\n    }\n\n    /**\n     * Implementation of the UI refresh.\n     * @private\n     */\n    doRefresh() {\n        // Ensure sub elements are all present\n        this.getConfig('element');\n        const\n            me       = this,\n            timeZone = me.timeZone != null ? me.timeZone : me.project?.timeZone,\n            today    = timeZone != null ? TimeZoneHelper.toTimeZone(new Date(), timeZone) : new Date(),\n            {\n                weekElements,\n                weekDayElements,\n                date,\n                month,\n                dayCellCls,\n                dayHeaderCls,\n                disabledCls,\n                otherMonthCls,\n                weekendCls,\n                todayCls,\n                nonWorkingDayCls,\n                nonWorkingDays,\n                canonicalDayNumbers,\n                sixWeeks\n            } = me;\n\n        today.setHours(0, 0, 0, 0);\n\n        // If we have not been initialized with a current date, use today\n        if (!date) {\n            me.date = today;\n            return;\n        }\n\n        /**\n         * Fires before this CalendarPanel refreshes in response to changes in its month.\n         * @event beforeRefresh\n         * @param {Core.widget.DatePicker} source This DatePicker.\n         */\n        me.trigger('beforeRefresh');\n\n        // Make sure we've calculated our shortDayNames\n        me.getConfig('dayNameFormat');\n\n        for (let columnIndex = 0; columnIndex < 7; columnIndex++) {\n            const\n                cell          = me.weekdayCells[columnIndex],\n                cellDay       = me.canonicalDayNumbers[columnIndex],\n                cellClassList = {\n                    [dayHeaderCls]     : 1,\n                    [weekendCls]       : DateHelper.weekends[cellDay],\n                    [nonWorkingDayCls] : nonWorkingDays[cellDay]\n                };\n\n            if (me.headerRenderer) {\n                cell.innerHTML = '';\n                me.callback(me.headerRenderer, me, [cell, columnIndex, cellDay]);\n            }\n            else {\n                DomHelper.setInnerText(cell, me.shortDayNames[cellDay]);\n            }\n\n            // Sync day name cell classes with its calculated status\n            DomHelper.syncClassList(cell, cellClassList);\n\n            cell.dataset.columnIndex = columnIndex;\n            cell.dataset.cellDay = cellDay;\n        }\n\n        // Create cell content\n        let rowIndex = 0,\n            cellIndex = 0,\n            lastWorkingColumn = 6;\n\n        // Which column is the last working day so it can be tagged with an identifying class\n        for (let columnIndex = 6; columnIndex >= 0; columnIndex--) {\n            if (!nonWorkingDays[canonicalDayNumbers[columnIndex]]) {\n                lastWorkingColumn = columnIndex;\n                break;\n            }\n        }\n\n        // Hide or show the \"other month\" week row depending on our sixWeeks setting\n        weekElements[4].classList.toggle('b-hide-display', month.weekCount < 5 && !sixWeeks);\n        weekElements[5].classList.toggle('b-hide-display', month.weekCount < 6 && !sixWeeks);\n\n        month.eachWeek((week, dates) => {\n            const\n                weekDayElement = weekDayElements[rowIndex],\n                weekCells = [weekDayElement.previousSibling, ...weekDayElement.children];\n\n            // Stamp week into week row's dataset\n            weekElements[rowIndex].dataset.week = `${week[0]},${week[1]}`;\n\n            if (me.weekRenderer) {\n                me.callback(me.weekRenderer, me, [weekCells[0], week]);\n            }\n            else {\n                weekCells[0].innerText = week[1];\n            }\n\n            for (let columnIndex = 0; columnIndex < 7; columnIndex++) {\n                const\n                    date          = dates[columnIndex],\n                    day           = date.getDay(),\n                    isNonWorking  = nonWorkingDays[day],\n                    cell          = weekCells[columnIndex + 1],\n                    cellClassList = {\n                        [dayCellCls]             : 1,\n                        [disabledCls]            : me.isDisabledDate(date),\n                        [otherMonthCls]          : date.getMonth() !== month.month,\n                        [weekendCls]             : DateHelper.weekends[day],\n                        [todayCls]               : date.getTime() === today.getTime(),\n                        [nonWorkingDayCls]       : isNonWorking,\n                        'b-last-working-day'     : columnIndex === lastWorkingColumn,\n                        'b-first-visible-cell'   : !(date - (me.firstVisibleDate || -1)),\n                        'b-last-visible-cell'    : !(date - (me.lastVisibleDate || -1)),\n                        [`b-day-of-week-${day}`] : 1\n                    };\n\n                // Sync day cell classes with its calculated status\n                DomHelper.syncClassList(cell, cellClassList);\n\n                cell.dataset.date = DateHelper.makeKey(date);\n                cell.dataset.cellIndex = cellIndex;\n                cell.dataset.columnIndex = columnIndex;\n\n                // Since we manipulate the classList/Name directly, we need to trick DomSync's config comparison logic or it\n                // may think the class has not changed.\n                if (cell.lastDomConfig) {\n                    delete cell.lastDomConfig.class;\n                    delete cell.lastDomConfig.className;\n                }\n\n                if (me.cellRenderer) {\n                    me.callback(me.cellRenderer, me, [{\n                        cell,\n                        date,\n                        day,\n                        row                : weekElements[rowIndex],\n                        rowIndex,\n                        cellIndex,\n                        columnIndex,\n                        visibleColumnIndex : me.visibleDayColumnIndex[day],\n                        week\n                    }]);\n                }\n                else {\n                    cell.innerHTML = date.getDate();\n                }\n                cellIndex++;\n            }\n\n            rowIndex++;\n        });\n\n        /**\n         * The number of rows displayed in this month. If {@link #config-sixWeeks} is not set,\n         * this may be from 4 to 6.\n         * @member {Number} visibleWeekCount\n         * @readonly\n         */\n        me.visibleWeekCount = rowIndex;\n\n        if (me.floating) {\n            // Must realign because content change might change dimensions\n            if (!me.isAligning) {\n                me.realign();\n            }\n        }\n\n        me.refreshCount = (me.refreshCount || 0) + 1;\n\n        /**\n         * Fires when this CalendarPanel refreshes.\n         * @event refresh\n         */\n        me.trigger('refresh');\n    }\n\n    isDisabledDate(date) {\n        const\n            day = date.getDay(),\n            {\n                disabledDates,\n                nonWorkingDays\n            }   = this;\n\n        if (this.disableWeekends && nonWorkingDays[day]) {\n            return true;\n        }\n\n        if (disabledDates) {\n            if (Array.isArray(disabledDates)) {\n                date = DateHelper.clearTime(date, true);\n                return disabledDates.some(d => !(DateHelper.clearTime(d, true) - date));\n            }\n            else {\n                return this.callback(this.disabledDates, this, [date]);\n            }\n        }\n    }\n\n    get bodyConfig() {\n        const\n            result = super.bodyConfig,\n            weeksContainerChildren = [];\n\n        result.children = [{\n            tag       : 'div',\n            className : 'b-calendar-row b-calendar-weekdays',\n            reference : 'weekdaysHeader',\n            children  : [\n                { class : 'b-week-number-cell' },\n                ...ArrayHelper.fill(7, { class : this.dayHeaderCls }),\n                DomHelper.scrollBarPadElement\n            ]\n        }, {\n            // `notranslate` prevents google translate messing up the DOM, https://github.com/facebook/react/issues/11538\n            className : 'b-weeks-container notranslate',\n            reference : 'weeksElement',\n            children  : weeksContainerChildren\n        }];\n\n        for (let i = 0; i < 6; i++) {\n            const weekRow = {\n                className : 'b-calendar-row b-calendar-week',\n                dataset   : {\n                    rowIndex : i\n                },\n                children : [{\n                    className : 'b-week-number-cell'\n                }, {\n                    className   : 'b-calendar-days',\n                    children    : [{}, {}, {}, {}, {}, {}, {}],\n                    syncOptions : {\n                        ignoreRefs : true,\n                        strict     : false  // allow complete replacement of classes w/o matching lastDomConfig\n                    }\n                }]\n            };\n\n            weeksContainerChildren.push(weekRow);\n        }\n\n        return result;\n    }\n\n    get firstVisibleDate() {\n        if (this.hideOtherMonthCells) {\n            const { year, month } = this.month;\n\n            return new Date(year, month, 1);\n        }\n        for (const me = this, date = me.month.startDate; ; date.setDate(date.getDate() + 1)) {\n            if (!me.hideNonWorkingDays || !me.nonWorkingDays[date.getDay()]) {\n                return date;\n            }\n        }\n    }\n\n    get lastVisibleDate() {\n        const lastDate = DateHelper.add(this.endDate, -1, 'd');\n\n        if (this.hideOtherMonthCells) {\n            return lastDate;\n        }\n        for (const me = this, date = lastDate; ; date.setDate(date.getDate() - 1)) {\n            if (!me.hideNonWorkingDays || !me.nonWorkingDays[date.getDay()]) {\n                return date;\n            }\n        }\n    }\n\n    /**\n     * Returns the cell associated with the passed date.\n     *\n     * To exclude dates which are outside of the panel's current month, pass the `strict` parameter as `true`\n     * @param {Date|String} date The date to find the element for or a key in the format `YYYY-MM-DD`\n     * @param {Boolean} strict Only return the element if this view *owns* the date.\n     * @returns {HTMLElement} The cell for the passed date if it exists\n     */\n    getCell(date, strict) {\n        if (!(typeof date === 'string')) {\n            date = DateHelper.makeKey(date);\n        }\n        const cell = this.weeksElement.querySelector(`[data-date=\"${date}\"]`);\n\n        if (cell && (!strict || !cell.classList.contains(this.otherMonthCls))) {\n            return cell;\n        }\n    }\n\n    onTipOverCell({ source : tip, target }) {\n        tip.date = DateHelper.parseKey(target.dataset.date);\n    }\n\n    updateLocalization() {\n        // Uncache the cached locale data\n        this._localeNonWorkingDays = this._localeWeekends = null;\n\n        this.updateDayNameFormat();\n        this.updateWeekStartDay(this.weekStartDay);\n        super.updateLocalization();\n    }\n}\n\n// Register this widget type with its Factory\nCalendarPanel.initClass();\n","import Field from './Field.js';\nimport Widget from './Widget.js';\nimport DomHelper from '../helper/DomHelper.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\n\n/**\n * @module Core/widget/Checkbox\n */\n\nconst\n    whenNotChecked = field => !field.value;\n\n/**\n * Checkbox field, wraps <code>&lt;input type=\"checkbox\"&gt;</code>.\n * Color can be specified and you can optionally configure {@link #config-text}\n * to display in a label to the right of the checkbox in addition to a standard\n * field {@link #config-label}.\n *\n * {@inlineexample Core/widget/Checkbox.js vertical}\n *\n * This field can be used as an {@link Grid.column.Column#config-editor} for the {@link Grid.column.Column}.\n *\n * ## Nested Items\n * A checkbox can also have a {@link #config-container} of additional {@link Core.widget.Container#config-items}. These\n * items can be displayed immediately following the field's label (which is the default when there is only one item) or\n * below the checkbox. This can be controlled using the {@link #config-inline} config.\n *\n * In the demo below notice how additional fields are displayed when the checkboxes are checked:\n *\n * {@inlineexample Core/widget/Checkbox-items.js vertical}\n *\n * @extends Core/widget/Field\n * @classType checkbox\n * @inputfield\n */\nexport default class Checkbox extends Field {\n    //region Config\n    static get $name() {\n        return 'Checkbox';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'checkbox';\n    }\n\n    // Factoryable type alias\n    static get alias() {\n        return 'check';\n    }\n\n    static get configurable() {\n        return {\n            inputType : 'checkbox',\n\n            /**\n             * Specify `true` to automatically {@link Core.widget.FieldContainer#config-collapsed collapse} the field's\n             * {@link #config-container} when the field is not {@link #property-checked}.\n             *\n             * Alternatively, this can be a function that returns the desired `collapse` state when passed the field\n             * instance as its one parameter.\n             *\n             * @config {Boolean|Function}\n             * @default false\n             */\n            autoCollapse : null,\n\n            containerDefaults : {\n                syncableConfigs : {\n                    disabled : field => field.disabled || !field.value\n                },\n\n                syncConfigTriggers : {\n                    autoCollapse : 1,\n                    value        : 1\n                }\n            },\n\n            /**\n             * Get/set label\n             * @member {String} name\n             */\n            /**\n             * Text to display on checkbox label\n             * @config {String}\n             */\n            text : '',\n\n            /**\n             * The value to provide for this widget in {@link Core.widget.Container#property-values} when it is\n             * {@link #property-checked}.\n             * A value of `undefined` will cause this widget not to include its value when checked.\n             * @config {*}\n             * @default\n             */\n            checkedValue : true,\n\n            /**\n             * The value to provide for this widget in {@link Core.widget.Container#property-values} when it is not\n             * {@link #property-checked}.\n             *\n             * A value of `undefined` will cause this widget to not include its value when it is unchecked.\n             * @config {*}\n             * @default\n             */\n            uncheckedValue : false,\n\n            /**\n             * The checked state. The same as `value`.\n             * @config {Boolean} checked\n             */\n\n            /**\n             * Checkbox color, must have match in CSS\n             * @config {String}\n             */\n            color : null,\n\n            /**\n             * Get/set value\n             * @member {String} value\n             */\n            /**\n             * Sets input fields value attribute\n             * @config {String}\n             */\n            value : '',\n\n            toggleGroup : null,\n\n            localizableProperties : ['label', 'text']\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    construct(config) {\n        // Convert checked to value so that initializing getter can read it if requested prior to trying to set it.\n        if ('checked' in config) {\n            config = ObjectHelper.assign({}, config);  // copy inherited properties unlike Object.assign()\n            config.value = config.checked;\n            delete config.checked;\n        }\n\n        super.construct(config);\n\n        this.syncHasText();\n    }\n\n    get textLabelCls() {\n        return 'b-checkbox-label';\n    }\n\n    // Implementation needed at this level because it has two inner elements in its inputWrap\n    get innerElements() {\n        return [\n            this.inputElement,\n            {\n                tag       : 'label',\n                class     : this.textLabelCls,\n                for       : `${this.id}-input`,\n                reference : 'textLabel',\n                html      : this.text || ''\n            }\n        ];\n    }\n\n    get inputElement() {\n        const config = super.inputElement;\n\n        if (this.toggleGroup) {\n            config.dataset = {\n                group : this.toggleGroup\n            };\n        }\n\n        config.listeners = {\n            click  : 'internalOnClick',\n            change : 'internalOnChange',\n            input  : 'internalOnInput'\n        };\n\n        return config;\n    }\n\n    //endregion\n\n    //region Toggle\n\n    /**\n     * Get/set checked state. Equivalent to `value` config.\n     * @property {Boolean}\n     */\n    get checked() {\n        return this.value;\n    }\n\n    set checked(value) {\n        this.value = value;\n    }\n\n    syncHasText() {\n        this.element.classList[this.text ? 'add' : 'remove']('b-text');\n    }\n\n    updateText(value) {\n        if (this.textLabel) {\n            this.syncHasText();\n            this.textLabel.innerHTML = value;\n        }\n    }\n\n    afterSyncChildConfigs(container) {\n        super.afterSyncChildConfigs(container);\n\n        let { autoCollapse } = this;\n\n        if (autoCollapse) {\n            autoCollapse = (autoCollapse === true) ? whenNotChecked : autoCollapse;\n\n            container.collapsed = autoCollapse(this);\n        }\n    }\n\n    assignFieldValue(values, key, value) {\n        this.value = (value === this.checkedValue) || (value === this.uncheckedValue ? false : null);\n    }\n\n    fetchInputValue() {\n        if (!this.readOnly) {\n            this.value = this.input.checked;\n        }\n    }\n\n    gatherValue(values) {\n        const\n            me = this,\n            value = me.value ? me.checkedValue : me.uncheckedValue,\n            storedValue = value !== undefined,\n            { valueName } = me;\n\n        if (storedValue) {\n            values[valueName] = value;\n        }\n\n        me.gatherValues(values, storedValue);\n\n        if (value === true && values[valueName]?.value === value) {\n            delete values[valueName].value;\n        }\n    }\n\n    changeValue(value) {\n        return (value === 'false') ? false : Boolean(value);\n    }\n\n    updateValue(value) {\n        const\n            me      = this,\n            changed = me.input.checked !== value;\n\n        me.input.checked = value;\n\n        me.container?.syncChildConfigs();\n\n        if (changed && !me.inputting && !me.isConfiguring) {\n            me.uncheckToggleGroupMembers();\n\n            // The change event does not fire on programmatic change of input.\n            me.triggerChange(false);\n        }\n    }\n\n    get inputValueAttr() {\n        return 'checked';\n    }\n\n    updateColor(value, was) {\n        const classes = this.element.classList;\n\n        if (was) {\n            classes.remove(was);\n        }\n\n        if (value) {\n            classes.add(value);\n        }\n    }\n\n    getToggleGroupMembers() {\n        const\n            me = this,\n            { checked, toggleGroup, input : checkedElement, type } = me,\n            result = [];\n\n        if (checked && toggleGroup) {\n            DomHelper.forEachSelector(me.rootElement, `input[type=${type}][data-group=${toggleGroup}]`, inputEl => {\n                if (inputEl !== checkedElement) {\n                    const partnerCheckbox = Widget.fromElement(inputEl);\n                    partnerCheckbox && result.push(partnerCheckbox);\n                }\n            });\n        }\n\n        return result;\n    }\n\n    uncheckToggleGroupMembers() {\n        if (this.checked && this.toggleGroup) {\n            this.getToggleGroupMembers().forEach(widget => widget.checked = false);\n        }\n    }\n\n    /**\n     * Check the box\n     */\n    check() {\n        this.checked = true;\n    }\n\n    /**\n     * Uncheck the box\n     */\n    uncheck() {\n        this.checked = false;\n    }\n\n    /**\n     * Toggle checked state. If you want to force a certain state, assign to {@link #property-checked} instead.\n     */\n    toggle() {\n        this.checked = !this.checked;\n    }\n\n    //endregion\n\n    //region Events\n\n    internalOnClick(event) {\n        // Native checkboxes has no readonly attribute, we prevent toggling it here instead\n        if (this.readOnly) {\n            event.preventDefault();\n            return false;\n        }\n\n        /**\n         * Fires when the checkbox is clicked\n         * @event click\n         * @param {Core.widget.Checkbox} source The checkbox\n         * @param {Event} event DOM event\n         */\n        return this.trigger('click', { event });\n    }\n\n    /**\n     * Triggers events when user toggles the checkbox\n     * @fires beforeChange\n     * @fires change\n     * @fires action\n     * @private\n     */\n    internalOnChange(event) {\n        const me = this;\n\n        // Chrome somehow sets checked state when re-enabling, have to reset that\n        if (me.readOnly && me.value !== me.input.checked) {\n            me.input.checked = me.value;\n            return;\n        }\n\n        me.value = me.input.checked;\n\n        if (!me.inputting) {\n            me.inputting = true;\n\n            me.triggerChange(true);\n\n            me.inputting = false;\n        }\n    }\n\n    // Need to catch changes even if readOnly, because of chrome behaviour when re-enabling\n    updateInputReadOnly(readOnly) {}\n\n    /**\n     * Triggers events when checked state is changed\n     * @fires beforeChange\n     * @fires change\n     * @fires action\n     * @private\n     */\n    triggerChange(userAction) {\n        const\n            me = this,\n            { checked } = me.input;\n\n        /**\n         * Fired before checkbox is toggled. Returning false from a listener prevents the checkbox from being toggled.\n         * @event beforeChange\n         * @preventable\n         * @param {Core.widget.Checkbox} source Checkbox\n         * @param {Boolean} checked Checked or not\n         */\n\n        /**\n         * Fired when checkbox is toggled\n         * @event change\n         * @param {Core.widget.Checkbox} source Checkbox\n         * @param {Boolean} checked Checked or not\n         */\n        // Prevent uncheck if this checkbox is part of a toggleGroup (radio-button mode) ..also ensure the group has\n        // visible active members\n        const\n            eventObject  = { checked, value : checked, userAction, valid : true },\n            prevented = (!checked && userAction && me.toggleGroup &&\n                me.getToggleGroupMembers().filter(widget => widget.isVisible && !widget.disabled).length) ||\n                // Since Widget has Events mixed in configured with 'callOnFunctions' this will also call onBeforeChange,\n                // onChange and onAction\n                me.trigger('beforeChange', eventObject) === false;\n\n        // If prevented need to rollback the checkbox input\n        if (prevented) {\n            // Input change is not preventable, so need to revert the changes\n            // The change event does not fire on programmatic change of input, so no need to suspend\n            me.input.checked = me._value = !checked;\n        }\n        else {\n            me.triggerFieldChange(eventObject, false);\n\n            if (userAction) {\n                me.uncheckToggleGroupMembers();\n            }\n\n            /**\n             * User performed the default action (toggled the checkbox)\n             * @event action\n             * @param {Core.widget.Checkbox} source Checkbox\n             * @param {Boolean} checked Checked or not\n             */\n            me.trigger('action', eventObject);\n            me.trigger('change', eventObject);\n\n            return true;\n        }\n    }\n\n    //endregion\n}\n\n// Register this widget type with its Factory\nCheckbox.initClass();\n","import Panel from './Panel.js';\nimport EventHelper from '../helper/EventHelper.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\nimport DomHelper from '../helper/DomHelper.js';\n\n/**\n * @module Core/widget/YearPicker\n */\n\n/**\n * A Panel subclass which allows a year to be selected from a range of 12 displayed years.\n *\n * The panel can be configured with {@link #config-startYear} to specify the first year in the\n * displayed range.\n *\n * The {@link #property-year} indicates and sets the currently selected year.\n *\n * The {@link #event-select} event is fired when a new year is selected.\n *\n * {@inlineexample Core/widget/YearPicker.js}\n *\n * @extends Core/widget/Panel\n *\n * @classType yearpicker\n * @widget\n */\nexport default class YearPicker extends Panel {\n    static $name = 'YearPicker'\n\n    // Factoryable type name\n    static type = 'yearpicker'\n\n    static configurable = {\n        textContent : false,\n\n        /**\n         * The definition of the top toolbar which displays the title and \"previous\" and\n         * \"next\" buttons.\n         *\n         * This contains the following predefined `items` which may be reconfigured by\n         * application code:\n         *\n         * - `title` A widget which displays the visible year range. Weight 100.\n         * - `previous` A button which navigates to the previous block. Weight 200.\n         * - `next` A button which navigates to the next block. Weight 300.\n         *\n         * These may be reordered:\n         *\n         * ```javascript\n         * new YearPicker({\n         *     appendTo : targetElement,\n         *     tbar     : {\n         *         items : {\n         *             // Move title to centre\n         *             title : {\n         *                 weight : 250\n         *             }\n         *         }\n         *     },\n         *     width    : '24em'\n         * });\n         * ```\n         * @config {ToolbarConfig}\n         */\n        tbar : {\n            overflow : null,\n            items    : {\n                previous : {\n                    type     : 'tool',\n                    cls      : 'b-icon b-icon-previous',\n                    onAction : 'up.previous',\n                    weight   : 100\n                },\n                title : {\n                    type     : 'button',\n                    cls      : 'b-yearpicker-title',\n                    weight   : 200,\n                    onAction : 'up.handleTitleClick'\n                },\n                next : {\n                    type     : 'tool',\n                    cls      : 'b-icon b-icon-next',\n                    onAction : 'up.next',\n                    weight   : 300\n                }\n            }\n        },\n\n        itemCls : 'b-year-container',\n\n        /**\n         * The number of clickable year buttons to display in the widget.\n         *\n         * It may be useful to change this if a non-standard shape or size is used.\n         * @config {Number}\n         * @default\n         */\n        yearButtonCount : 12,\n\n        /**\n         * The currently selected year.\n         * @member {Number} year\n         */\n        /**\n         * The year to use as the selected year. Defaults to the current year.\n         * @config {Number}\n         */\n        year : null,\n\n        /**\n         * The lowest year to allow.\n         * @config {Number}\n         */\n        minYear : null,\n\n        /**\n         * The highest year to allow.\n         * @config {Number}\n         */\n        maxYear : null,\n\n        /**\n         * The starting year displayed in the widget.\n         * @member {Number} startYear\n         */\n        /**\n         * The year to show at the start of the widget\n         * @config {Number}\n         */\n        startYear : null\n    }\n\n    construct(config) {\n        super.construct({\n            year : new Date().getFullYear(),\n            ...config\n        });\n\n        EventHelper.on({\n            element  : this.contentElement,\n            click    : 'onYearClick',\n            delegate : '.b-yearpicker-year',\n            thisObj  : this\n        });\n    }\n\n    get focusElement() {\n        return this.getYearButton(this.year) || this.getYearButton(this.startYear);\n    }\n\n    getYearButton(y) {\n        return this.contentElement.querySelector(`.b-yearpicker-year[data-year=\"${y}\"]`);\n    }\n\n    /**\n     * The currently selected year.\n     * @member {Number} value\n     */\n    get value() {\n        return this.year;\n    }\n\n    set value(year) {\n        this.year = year;\n    }\n\n    onYearClick({ target }) {\n        const clickedYear = Math.min(Math.max(parseInt(target.innerText), this.minYear || 1), this.maxYear || 9999);\n\n        // The updater won't run, so fire the select event here.\n        if (this.year === clickedYear) {\n            this.trigger('select', { oldValue : clickedYear, value : clickedYear });\n        }\n        else {\n            this.year = clickedYear;\n        }\n    }\n\n    handleTitleClick(e) {\n        this.trigger('titleClick', e);\n    }\n\n    previous() {\n        this.startYear = this.startYear - this.yearButtonCount;\n    }\n\n    next() {\n        this.startYear = this.endYear + 1;\n    }\n\n    ingestYear(year) {\n        if (!isNaN(year)) {\n            return ObjectHelper.isDate(year) ? year.getFullYear() : year;\n        }\n    }\n\n    changeYear(year) {\n        // ingestYear returns undefined if invalid input\n        if ((year = this.ingestYear(year))) {\n            return Math.min(Math.max(year, this.minYear || 1), this.maxYear || 9999);\n        }\n    }\n\n    updateYear(year, oldValue) {\n        const me = this;\n\n        if (!me.startYear || year > me.endYear) {\n            me.startYear = year;\n        }\n        else if (year < me.startYear) {\n            me.startYear = year - (me.yearButtonCount - 1);\n        }\n        if (!me.isConfiguring) {\n            /**\n             * Fired when a year is selected.\n             * @event select\n             * @param {Number} value The previously selected year.\n             * @param {Core.widget.YearPicker} source This YearPicker\n             */\n            me.trigger('select', { oldValue, value : year });\n        }\n    }\n\n    /**\n     * The ending year displayed in the widget.\n     * @member {Number} endYear\n     * @readonly\n     */\n    get endYear() {\n        return this.startYear + this.yearButtonCount - 1;\n    }\n\n    changeStartYear(startYear) {\n        // ingestYear returns undefined if invalid input\n        if ((startYear = this.ingestYear(startYear))) {\n            startYear = this.minYear ? Math.max(startYear, this.minYear) : startYear;\n            return this.maxYear ? Math.min(startYear, this.maxYear - (this.yearButtonCount - 1)) : startYear;\n        }\n    }\n\n    async updateStartYear(startYear, oldStartYear) {\n        if (this.isVisible) {\n            DomHelper.slideIn(this.contentElement, Math.sign(startYear - oldStartYear));\n        }\n    }\n\n    composeBody() {\n        // Must be ingested before first compose.\n        this.getConfig('year');\n\n        const\n            { startYear } = this,\n            result        = super.composeBody(),\n            children      = result.children[this.tbar ? 1 : 0].children = [];\n\n        this.widgetMap.title.text = `${`000${startYear}`.slice(-4)} - ${`000${this.endYear}`.slice(-4)}`;\n\n        for (let i = 0, y = startYear; i < this.yearButtonCount; i++, y++) {\n            children.push({\n                tag     : 'button',\n                dataset : {\n                    year : y\n                },\n                class : {\n                    'b-yearpicker-year' : 1,\n                    'b-selected'        : y === this.year\n                },\n                text : `000${y}`.slice(-4)\n            });\n        }\n\n        return result;\n    }\n}\n\n// Register this widget type with its Factory\nYearPicker.initClass();\n","import TextField from './TextField.js';\nimport StringHelper from '../helper/StringHelper.js';\n\n/**\n * @module Core/widget/DisplayField\n */\n\n/**\n * A widget used to show a read only value. Can also use a {@link #config-template template string} to show custom\n * markup inside a Container.\n *\n * @extends Core/widget/Field\n *\n * @example\n * let displayField = new DisplayField({\n *   appendTo : document.body,\n *   label: 'name',\n *   value : 'John Doe',\n *   // or use a template\n *   // template : name => `${name} is the name`\n * });\n *\n * @classType displayField\n * @inlineexample Core/widget/DisplayField.js\n * @widget\n * @inputfield\n */\nexport default class DisplayField extends TextField {\n    static get $name() {\n        return 'DisplayField';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'displayfield';\n    }\n\n    // Factoryable type alias\n    static get alias() {\n        return 'display';\n    }\n\n    static get configurable() {\n        return {\n            readOnly : true,\n            editable : false,\n            cls      : 'b-display-field',\n\n            /**\n             * A template string used to render the value of this field. Please note you are responsible for encoding\n             * any strings protecting against XSS.\n             *\n             * ```javascript\n             * new DisplayField({\n             *     appendTo : document.body,\n             *     name     : 'age',\n             *     label    : 'Age',\n             *     template : data => `${data.value} years old`\n             * })\n             * ```\n             * @config {Function}\n             */\n            template : null,\n\n            ariaElement : 'displayElement'\n        };\n    }\n\n    get focusElement() {\n        // we're not focusable.\n    }\n\n    changeReadOnly() {\n        return true;\n    }\n\n    changeEditable() {\n        return false;\n    }\n\n    get inputElement() {\n        return {\n            tag       : 'span',\n            id        : `${this.id}-input`,\n            reference : 'displayElement',\n            html      : this.template ? this.template(this.value) : StringHelper.encodeHtml(this.value)\n        };\n    }\n}\n\n// Register this widget type with its Factory\nDisplayField.initClass();\n","import CalendarPanel from './CalendarPanel.js';\nimport YearPicker from './YearPicker.js';\nimport DateHelper from '../helper/DateHelper.js';\nimport EventHelper from '../helper/EventHelper.js';\nimport Combo from './Combo.js';\nimport DomHelper from '../helper/DomHelper.js';\nimport './DisplayField.js';\n\nconst\n    generateMonthNames = () => DateHelper.getMonthNames().map((m, i) => [i, m]),\n    dateSort           = (lhs, rhs) => lhs.valueOf() - rhs.valueOf(),\n    emptyArray         = Object.freeze([]);\n\nclass ReadOnlyCombo extends Combo {\n    static get $name() {\n        return 'ReadOnlyCombo';\n    }\n\n    static get type() {\n        return 'readonlycombo';\n    }\n\n    static get configurable() {\n        return {\n            editable        : false,\n            inputAttributes : {\n                tag      : 'div',\n                tabIndex : -1\n            },\n            inputValueAttr          : 'innerHTML',\n            highlightExternalChange : false,\n            monitorResize           : false,\n            triggers                : {\n                expand : false\n            },\n            picker : {\n                align : {\n                    align     : 't-b',\n                    axisLock  : true,\n                    matchSize : false\n                },\n                cls        : 'b-readonly-combo-list',\n                scrollable : {\n                    overflowX : false\n                }\n            }\n        };\n    }\n}\n\nReadOnlyCombo.initClass();\n\n/**\n * @module Core/widget/DatePicker\n */\n\n/**\n * A Panel which can display a month of date cells, which navigates between the cells, fires events upon user selection\n * actions, optionally navigates to other months in response to UI gestures, and optionally displays information about\n * each date cell.\n *\n * A date is selected (meaning a single value is selected if {@link #config-multiSelect} is not set, or\n * added to the {@link #property-selection} if {@link #config-multiSelect if set}) by clicking a cell\n * or by pressing `ENTER` when focused on a cell.\n *\n * The `SHIFT` and `CTRL` keys modify selection behaviour depending on the value of {@link #config-multiSelect}.\n *\n * This class is used as a {@link Core.widget.DateField#config-picker} by the {@link Core.widget.DateField} class.\n *\n * {@inlineexample Core/widget/DatePicker.js}\n *\n * ## Custom cell rendering\n * You can easily control the content of each date cell using the {@link #config-cellRenderer}. The example below shows\n * a view typically seen when booking hotel rooms or apartments.\n *\n * {@inlineexample Core/widget/DatePickerCellRenderer.js}\n *\n * ## Multi selection\n * You can select multiple date ranges or a single date range using the {@link #config-multiSelect} config.\n *\n * {@inlineexample Core/widget/DatePickerMulti.js}\n *\n * @classtype datepicker\n * @extends Core/widget/CalendarPanel\n * @widget\n */\nexport default class DatePicker extends CalendarPanel {\n    static get $name() {\n        return 'DatePicker';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'datepicker';\n    }\n\n    static get delayable() {\n        return {\n            refresh : 'raf'\n        };\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * The date that the user has navigated to using the UI *prior* to setting the widget's\n             * value by selecting. The initial default is today's date.\n             *\n             * This may be changed using keyboard navigation. The {@link Core.widget.CalendarPanel#property-date} is set\n             * by pressing `ENTER` when the desired date is reached.\n             *\n             * Programmatically setting the {@link Core.widget.CalendarPanel#config-date}, or using the UI to select the date\n             * by clicking it also sets the `activeDate`\n             * @config {Date}\n             */\n            activeDate : {\n                value   : new Date(),\n                $config : {\n                    equal : 'date'\n                }\n            },\n\n            focusable   : true,\n            textContent : false,\n            tbar        : {\n                overflow : null,\n                items    : {\n                    prevYear : {\n                        cls      : 'b-icon b-icon-first',\n                        onAction : 'up.gotoPrevYear',\n                        tooltip  : 'L{DatePicker.gotoPrevYear}'\n                    },\n                    prevMonth : {\n                        cls      : 'b-icon b-icon-previous',\n                        onAction : 'up.gotoPrevMonth',\n                        tooltip  : 'L{DatePicker.gotoPrevMonth}'\n                    },\n                    fields : {\n                        type  : 'container',\n                        cls   : 'b-datepicker-title',\n                        items : {\n                            monthField : {\n                                type              : 'readonlycombo',\n                                cls               : 'b-datepicker-monthfield',\n                                items             : generateMonthNames(),\n                                internalListeners : {\n                                    select : 'up.onMonthPicked'\n                                }\n                            },\n                            yearButton : {\n                                type              : 'button',\n                                cls               : 'b-datepicker-yearbutton',\n                                internalListeners : {\n                                    click : 'up.onYearPickerRequested'\n                                }\n                            }\n                        }\n                    },\n                    nextMonth : {\n                        cls      : 'b-icon b-icon-next',\n                        onAction : 'up.gotoNextMonth',\n                        tooltip  : 'L{DatePicker.gotoNextMonth}'\n                    },\n                    nextYear : {\n                        cls      : 'b-icon b-icon-last',\n                        onAction : 'up.gotoNextYear',\n                        tooltip  : 'L{DatePicker.gotoNextYear}'\n                    }\n                }\n            },\n\n            yearPicker : {\n                value : {\n                    type              : 'YearPicker',\n                    yearButtonCount   : 16,\n                    trapFocus         : true,\n                    positioned        : true,\n                    hidden            : true,\n                    internalListeners : {\n                        titleClick : 'up.onYearPickerTitleClick',\n                        select     : 'up.onYearPicked'\n                    }\n                },\n                $config : 'lazy'\n            },\n\n            /**\n             * The initially selected date.\n             * @config {Date}\n             */\n            date : null,\n\n            /**\n             * The minimum selectable date. Selection of and navigation to dates prior\n             * to this date will not be possible.\n             * @config {Date}\n             */\n            minDate : {\n                value   : null,\n                $config : {\n                    equal : 'date'\n                }\n            },\n\n            /**\n             * The maximum selectable date. Selection of and navigation to dates after\n             * this date will not be possible.\n             * @config {Date}\n             */\n            maxDate : {\n                value   : null,\n                $config : {\n                    equal : 'date'\n                }\n            },\n\n            /**\n             * By default, disabled dates cannot be navigated to, and they are skipped over\n             * during keyboard navigation. Configure this as `true` to enable navigation to\n             * disabled dates.\n             * @config {Boolean}\n             * @default\n             */\n            focusDisabledDates : null,\n\n            /**\n             * Configure as `true` to enable selecting multiple discontiguous date ranges using\n             * click and Shift+click to create ranges and Ctrl+click to select/deselect individual dates.\n             *\n             * Configure as `'range'` to enable selecting a single date range by selecting a\n             * start and end date. Hold \"SHIFT\" button to select date range. Ctrl+click may add\n             * or remove dates to/from either end of the range.\n             * @config {Boolean|'range'}\n             * @default\n             */\n            multiSelect : false,\n\n            /**\n             * If {@link #config-multiSelect} is configured as `true`, this is an array of dates\n             * which are selected. There may be multiple, discontiguous date ranges.\n             *\n             * If {@link #config-multiSelect} is configured as `'range'`, this is a two element array\n             * specifying the first and last selected dates in a range.\n             * @config {Date[]}\n             */\n            selection : {\n                $config : {\n                    equal : (v1, v2) => v1 && v1.equals(v2)\n                },\n                value : null\n            },\n\n            /**\n             * By default, the month and year are editable. Configure this as `false` to prevent that.\n             * @config {Boolean}\n             * @default\n             */\n            editMonth : true,\n\n            /**\n             * The {@link Core.helper.DateHelper} format string to format the day names.\n             * @config {String}\n             * @default\n             */\n            dayNameFormat : 'dd',\n\n            trapFocus : true,\n\n            role : 'grid',\n\n            focusDescendant : true,\n\n            /**\n             * By default, when the {@link #property-date} changes, the UI will only refresh\n             * if it doesn't contain a cell for that date, so as to keep a stable UI when\n             * navigating.\n             *\n             * Configure this as `true` to refresh the UI whenever the month changes, even if\n             * the UI already shows that date.\n             * @config {Boolean}\n             * @internal\n             */\n            alwaysRefreshOnMonthChange : null\n        };\n    }\n\n    static get prototypeProperties() {\n        return {\n            /**\n             * The class name to add to the calendar cell whose date which is outside of the\n             * {@link #config-minDate}/{@link #config-maxDate} range.\n             * @config {String}\n             * @private\n             */\n            outOfRangeCls : 'b-out-of-range',\n\n            /**\n             * The class name to add to the currently focused calendar cell.\n             * @config {String}\n             * @private\n             */\n            activeCls : 'b-active-date',\n\n            /**\n             * The class name to add to selected calendar cells.\n             * @config {String}\n             * @private\n             */\n            selectedCls : 'b-selected-date'\n        };\n    }\n\n    // region Init\n\n    construct(config) {\n        const me = this;\n\n        super.construct(config);\n\n        me.externalCellRenderer = me.cellRenderer;\n        me.cellRenderer         = me.internalCellRenderer;\n\n        me.element.setAttribute('aria-activedescendant', `${me.id}-active-day`);\n        me.weeksElement.setAttribute('role', 'grid');\n        me.weekElements.forEach(w => w.setAttribute('role', 'row'));\n        me.element.setAttribute('ariaLabelledBy', me.widgetMap.fields.id);\n\n        EventHelper.on({\n            element : me.weeksElement,\n            click   : {\n                handler  : 'onCellClick',\n                delegate : `.${me.dayCellCls}:not(.${me.disabledCls}):not(.${me.outOfRangeCls})`\n            },\n            mousedown : {\n                handler  : 'onCellMousedown',\n                delegate : `.${me.dayCellCls}`\n            },\n            thisObj : me\n        });\n\n        me.widgetMap.monthField.readOnly = me.widgetMap.yearButton.disabled = !me.editMonth;\n\n        // Ensure the DatePicker is immediately ready for use.\n        me.refresh.flush();\n    }\n\n    afterHide() {\n        this._yearPicker?.hide();\n        super.afterHide(...arguments);\n    }\n\n    doDestroy() {\n        this.yearButton?.destroy();\n        this.monthField?.destroy();\n        super.doDestroy();\n    }\n\n    // endregion\n\n    get focusElement() {\n        return this.weeksElement.querySelector(`.${this.dayCellCls}[tabIndex=\"0\"]`);\n    }\n\n    doRefresh() {\n        const\n            me             = this,\n            oldActiveCell  = me.focusElement,\n            // Coerce the active date to be in the visible range.\n            // Do not use the setter, the sync is done below\n            activeDate     = DateHelper.betweenLesser(me.activeDate, me.month.startDate, me.month.endDate) ? me.activeDate : (me._activeDate = me.date);\n\n        super.doRefresh(...arguments);\n\n        // The focused cell will have been repurposed for a new date\n        const dateOfOldActiveCell = DateHelper.parseKey(oldActiveCell?.dataset.date);\n\n        // The position of the cell may have changed, so the \"from\" cell must\n        // be identified by the date that is stamped into it *after* the refresh..\n        if (activeDate - dateOfOldActiveCell) {\n            me.syncActiveDate(activeDate, dateOfOldActiveCell);\n        }\n    }\n\n    internalCellRenderer({ cell, date }) {\n        const\n            me            = this,\n            {\n                activeCls,\n                selectedCls,\n                externalCellRenderer\n            }             = me,\n            isSelected    = me.isSelectedDate(date),\n            cellClassList = {\n                [activeCls]        : activeCls && me.isActiveDate(date),\n                [selectedCls]      : isSelected,\n                [me.outOfRangeCls] : (me.minDate && date < me.minDate) || (me.maxDate && date > me.maxDate)\n            };\n\n        if (isSelected) {\n            // Fix up start/inner/end range classes\n            if (me.multiSelect) {\n                const\n                    isStart = !me.isSelectedDate(DateHelper.add(date, -1, 'd')),\n                    isEnd   = !me.isSelectedDate(DateHelper.add(date, 1, 'd'));\n\n                cellClassList['b-range-start'] = isStart;\n                cellClassList['b-range-end'] = isEnd;\n                cellClassList['b-in-range'] = !isStart && !isEnd;\n            }\n        }\n\n        DomHelper.updateClassList(cell, cellClassList);\n\n        // Must replace entire content in case we have an externalCellRenderer\n        cell.innerHTML = `<div class=\"b-datepicker-cell-inner\">${date.getDate()}</div>`;\n        cell.setAttribute('role', 'gridcell');\n        cell.setAttribute('aria-label', DateHelper.format(date, 'MMMM D, YYYY'));\n\n        if (me.isActiveDate(date)) {\n            cell.id = `${me.id}-active-day`;\n        }\n        else {\n            cell.removeAttribute('id');\n        }\n\n        if (externalCellRenderer) {\n            arguments[0].cell = cell.firstChild;\n            me.callback(externalCellRenderer, this, arguments);\n        }\n    }\n\n    onCellMousedown(event) {\n        const cell = event.target.closest('[data-date]');\n\n        event.preventDefault();\n        cell.focus();\n\n        this.activeDate = DateHelper.parseKey(cell.dataset.date);\n    }\n\n    onCellClick(event) {\n        const cell = event.target.closest('[data-date]');\n        this.onUIDateSelect(DateHelper.parseKey(cell.dataset.date), event);\n    }\n\n    onMonthDateChange({ newDate, changes }) {\n        // toolbar widgets must have been instantiated.\n        this.getConfig('tbar');\n\n        super.onMonthDateChange(...arguments);\n\n        // Keep header widgets synced with our month\n        if (changes.m || changes.y) {\n            this.widgetMap.monthField.value = newDate.getMonth();\n            this.widgetMap.yearButton.text  = newDate.getFullYear();\n        }\n    }\n\n    /**\n     * Called when the user uses the UI to select the current activeDate. So ENTER when focused\n     * or clicking a date cell.\n     * @param {Date} date The active date to select\n     * @param {Event} event the instigating event, either a `click` event or a `keydown` event.\n     * @internal\n     */\n    onUIDateSelect(date, event) {\n        const\n            me = this,\n            {\n                lastClickedDate,\n                multiSelect\n            }  = me;\n\n        me.lastClickedDate = date;\n\n        if (!me.isDisabledDate(date)) {\n            me.activatingEvent = event;\n\n            // Handle multi selecting.\n            // * single contiguous date range, eg: an event start and end\n            // * multiple discontiguous ranges\n            if (multiSelect) {\n                me.handleMultiSelect(lastClickedDate, date, event);\n            }\n            else {\n                me.selection = date;\n                if (me.floating) {\n                    me.hide();\n                }\n            }\n\n            me.activatingEvent = null;\n        }\n    }\n\n    // Calls updateSelection if the selection is mutated\n    handleMultiSelect(lastClickedDate, date, event) {\n        const\n            me          = this,\n            {\n                multiSelect,\n                _selection\n            }           = me,\n            selection   = _selection.dates,\n            singleRange = multiSelect === 'range',\n            {\n                size,\n                generation\n            }           = _selection,\n            rangeEnds   = size && {\n                [DateHelper.makeKey(DateHelper.add(selection[0], -1, 'd'))]                   : 1,\n                [DateHelper.makeKey(selection[0])]                                            : 1,\n                [DateHelper.makeKey(selection[selection.length - 1])]                         : 1,\n                [DateHelper.makeKey(DateHelper.add(selection[selection.length - 1], 1, 'd'))] : 1\n            },\n            isSelected  = _selection.has(date),\n            toggleFn    = isSelected ? 'delete' : 'add';\n\n        // If we're allowed to create one range and they they clicked on a togglable date of a range\n        const clickedRangeEnd = singleRange && rangeEnds?.[DateHelper.makeKey(date)];\n\n        // Ctrl+click means toggle the date, leaving remaining selection unchanged\n        if (event.ctrlKey) {\n            // Allow individual date toggling if we are allowing multi ranges\n            // or there's no current selection, or they are on, or adjacent to the range end\n            if (multiSelect === true || !size || clickedRangeEnd) {\n                _selection[toggleFn](date);\n\n                // Check that the start hasn't been deselected\n                if (singleRange && !_selection.has(me.rangeStartDate)) {\n                    me.rangeStartDate.setDate(me.rangeStartDate.getDate() + (date < selection[1] ? 1 : -1));\n                }\n            }\n        }\n        // Shift+click means add a range\n        else if (event.shiftKey && size) {\n            const [start, end] = [\n                new Date(singleRange ? (me.rangeStartDate || (me.rangeStartDate = selection[0])) : lastClickedDate),\n                date\n            ].sort(dateSort);\n\n            // If we can only have one range\n            if (singleRange) {\n                _selection.clear();\n            }\n\n            // Add all dates in the range\n            for (const d = start; d <= end; d.setDate(d.getDate() + 1)) {\n                _selection.add(d);\n            }\n        }\n        // Make the clicked date the only selected date.\n        // Avoid a no-op which would still cause a generation change\n        else if (!(_selection.has(date) && _selection.size === 1)) {\n            _selection.clear();\n            _selection.add(date);\n        }\n\n        const newSize = _selection.size;\n\n        // Keep track of the range start date. The first selected date is the start and the end then\n        // can move to either side of that.\n        if (newSize === 1) {\n            me.rangeStartDate = date;\n        }\n        else if (!newSize) {\n            me.rangeStartDate = null;\n        }\n\n        // Process selection change if we changed the selection.\n        if (_selection.generation !== generation) {\n            me.updateSelection(_selection);\n        }\n    }\n\n    changeSelection(selection) {\n        // We always need a _selection property to be a DateSet.\n        // Falsy selection value means empty DateSet.\n        const me = this;\n\n        let result, rangeStartDate;\n\n        if (selection) {\n            // Convert single Date into Array\n            if (!selection.forEach) {\n                selection = [selection];\n            }\n\n            // Clamp selection into range. May duplicate, but the Set will dedupe.\n            selection.forEach((d, i) => selection[i] = me.changeDate(d));\n\n            // Cache the first date, regardless of sort order for use as the \"clicked date\"\n            // around which the range revolves when shift+click is used.\n            rangeStartDate = selection[0];\n            selection.sort(dateSort);\n\n            // A two element array means a start and end\n            if (me.multiSelect === 'range' && selection.length === 2) {\n                result = new DateSet();\n                for (const d = new Date(selection[0]); d <= selection[1]; d.setDate(d.getDate() + 1)) {\n                    result.add(d);\n                }\n            }\n            else {\n                // Multi dates may be in any order, so use the temporally first date as range start\n                rangeStartDate = selection[0];\n                result = new DateSet(selection);\n            }\n        }\n        else {\n            result = new DateSet();\n        }\n\n        if (rangeStartDate) {\n            me.activeDate = me.rangeStartDate = DateHelper.clearTime(rangeStartDate);\n        }\n\n        return result;\n    }\n\n    updateSelection(dateSet) {\n        const\n            me        = this,\n            { dates } = dateSet,\n            selection = me.multiSelect === 'range' ? [dates[0], dates[dates.length - 1]] : dates;\n\n        // \"date\" property must be seen to be the selected date.\n        dates.length && (me.date = dates[0]);\n\n        if (!me.isConfiguring) {\n            // We're going to announce the change. UI must be up to date\n            me.refresh.now();\n\n            /**\n             * Fires when a date or date range is selected. If {@link #config-multiSelect} is specified,\n             * this will fire upon deselection and selection of dates.\n             * @event selectionChange\n             * @param {Date[]} selection The selected date. If {@link #config-multiSelect} is specified\n             * this may be a two element array specifying start and end dates.\n             * @param {Boolean} userAction This will be `true` if the change was caused by user interaction\n             * as opposed to programmatic setting.\n             */\n            me.trigger('selectionChange', {\n                selection,\n                userAction : Boolean(me.activatingEvent)\n            });\n        }\n    }\n\n    /**\n     * The selected Date(s).\n     *\n     * When {@link #config-multiSelect} is `'range'`, then this yields a two element array\n     * representing the start and end of the selected range.\n     *\n     * When {@link #config-multiSelect} is `true`, this yields an array containing every selected\n     * Date.\n     * @member {Date[]} selection\n     */\n    get selection() {\n        const\n            { _selection } = this,\n            dates          = _selection ? _selection.dates : emptyArray;\n\n        return this.multiSelect === 'range' && dates.length ? [dates[0], dates[dates.length - 1]] : dates;\n    }\n\n    onInternalKeyDown(keyEvent) {\n        const\n            me         = this,\n            keyName    = keyEvent.key.trim() || keyEvent.code,\n            activeDate = me.activeDate;\n\n        let newDate    = new Date(activeDate);\n\n        if (keyName === 'Escape' && me.floating) {\n            return me.hide();\n        }\n\n        // Only navigate if not focused on one of our child widgets.\n        // We have a prevMonth and nextMonth tool and possibly month and year pickers.\n        if (activeDate && me.weeksElement.contains(keyEvent.target)) {\n            do {\n                switch (keyName) {\n                    case 'ArrowLeft':\n                        // Disable browser use of this key.\n                        // Ctrl+ArrowLeft navigates back.\n                        // ArrowLeft scrolls if there is horizontal scroll.\n                        keyEvent.preventDefault();\n\n                        if (keyEvent.ctrlKey) {\n                            newDate = me.gotoPrevMonth();\n                        }\n                        else {\n                            newDate.setDate(newDate.getDate() - 1);\n                        }\n                        break;\n                    case 'ArrowUp':\n                        // Disable browser use of this key.\n                        // ArrowUp scrolls if there is vertical scroll.\n                        keyEvent.preventDefault();\n\n                        newDate.setDate(newDate.getDate() - 7);\n                        break;\n                    case 'ArrowRight':\n                        // Disable browser use of this key.\n                        // Ctrl+ArrowRight navigates forwards.\n                        // ArrowRight scrolls if there is horizontal scroll.\n                        keyEvent.preventDefault();\n\n                        if (keyEvent.ctrlKey) {\n                            newDate = me.gotoNextMonth();\n                        }\n                        else {\n                            newDate.setDate(newDate.getDate() + 1);\n                        }\n                        break;\n                    case 'ArrowDown':\n                        // Disable browser use of this key.\n                        // ArrowDown scrolls if there is vertical scroll.\n                        keyEvent.preventDefault();\n\n                        newDate.setDate(newDate.getDate() + 7);\n                        break;\n                    case 'Enter':\n                        return me.onUIDateSelect(activeDate, keyEvent);\n                }\n            } while (me.isDisabledDate(newDate) && !me.focusDisabledDates);\n\n            // Don't allow navigation to outside of date bounds.\n            if (me.minDate && newDate < me.minDate) {\n                return;\n            }\n            if (me.maxDate && newDate > me.maxDate) {\n                return;\n            }\n            me.activeDate = newDate;\n        }\n    }\n\n    changeMinDate(minDate) {\n        // Avoid changeDate which clamps incoming value into current allowable range\n        return minDate && CalendarPanel.prototype.changeDate.apply(this, arguments);\n    }\n\n    updateMinDate(minDate) {\n        this._yearpicker && (this._yearpicker.minYear = minDate?.getFullYear());\n        this.refresh();\n    }\n\n    changeMaxDate(minDate) {\n        // Avoid changeDate which clamps incoming value into current allowable range\n        return minDate && CalendarPanel.prototype.changeDate.apply(this, arguments);\n    }\n\n    updateMaxDate(maxDate) {\n        this._yearpicker && (this._yearpicker.maxYear = maxDate?.getFullYear());\n        this.refresh();\n    }\n\n    changeDate(date) {\n        return DateHelper.clamp(super.changeDate(date), this.minDate, this.maxDate);\n    }\n\n    updateDate(date) {\n        const me = this;\n\n        // Directly configuring a date creates the selection\n        me.isConfiguring && !me.initializingActiveDate && (me.selection = date);\n\n        // Only change the month's date if it is within our current month\n        // or we have to because we don't have a cell for it.\n        // If it's a date in the \"otherMonth\" part of the grid, do not update.\n        if (!me.month.date || date.getMonth() === me.month.month || !me.getCell(date) || me.alwaysRefreshOnMonthChange || me.isNavigating) {\n            super.updateDate(date);\n        }\n    }\n\n    changeActiveDate(activeDate, oldActiveDate) {\n        if (this.trigger('beforeActiveDateChange', { activeDate, oldActiveDate }) === false) {\n            return;\n        }\n\n        activeDate = activeDate ? this.changeDate(activeDate) : this.date || (this.date = DateHelper.clearTime(new Date()));\n\n        if (isNaN(activeDate)) {\n            throw new Error('DatePicker date ingestion must be passed a Date, or a YYYY-MM-DD date string');\n        }\n\n        return DateHelper.clamp(activeDate, this.minDate, this.maxDate);\n    }\n\n    updateActiveDate(activeDate, wasActiveDate) {\n        const\n            me                = this,\n            { isConfiguring } = me;\n\n        if (isConfiguring || !me.getCell(activeDate)) {\n            me.initializingActiveDate = isConfiguring;\n            me.date = activeDate;\n            me.initializingActiveDate = false;\n        }\n        if (!isConfiguring && !me.refresh.isPending) {\n            me.syncActiveDate(activeDate, wasActiveDate);\n        }\n    }\n\n    syncActiveDate(activeDate, wasActiveDate) {\n        const\n            me            = this,\n            { activeCls } = me,\n            activeCell    = me.getCell(activeDate),\n            wasActiveCell = wasActiveDate && me.getCell(wasActiveDate),\n            activeElement = DomHelper.getActiveElement(me.element);\n\n        activeCell.setAttribute('tabIndex', 0);\n        activeCls && activeCell.classList.add(activeCls);\n        activeCell.id = `${me.id}-active-day`;\n\n        if (me.weeksElement.contains(activeElement) /*|| me.owner?.element.contains(activeElement)*/) {\n            activeCell.focus();\n        }\n\n        if (wasActiveCell && wasActiveCell !== activeCell) {\n            wasActiveCell.removeAttribute('tabIndex');\n            activeCls && wasActiveCell.classList.remove(activeCls);\n            wasActiveCell.removeAttribute('id');\n        }\n    }\n\n    set value(value) {\n        const me = this;\n\n        if (value) {\n            value = me.changeDate(value, me.value);\n\n            // Undefined return value means no change\n            if (value !== undefined) {\n                me.selection = value;\n            }\n        }\n        else {\n            // Clearing the value - go to today's calendar\n            me.date = new Date();\n            me.selection = null;\n        }\n    }\n\n    get value() {\n        return this.selection[this.selection.length - 1];\n    }\n\n    gotoPrevYear() {\n        return this.goto(-1, 'year');\n    }\n\n    gotoPrevMonth() {\n        return this.goto(-1, 'month');\n    }\n\n    gotoNextMonth() {\n        return this.goto(1, 'month');\n    }\n\n    gotoNextYear() {\n        return this.goto(1, 'year');\n    }\n\n    goto(direction, unit) {\n        const\n            me                  = this,\n            { activeDate }      = me,\n            activeCell          = activeDate && me.getCell(activeDate);\n\n        let newDate;\n\n        // If active date is already in the month we're going to, use it\n        if (unit === 'month' && activeCell && activeDate?.getMonth() === me.month.month + direction) {\n            newDate = activeDate;\n        }\n        // Move the date by the requested unit\n        else {\n            newDate = DateHelper.add(activeCell ? activeDate : me.date, direction, unit);\n        }\n        const firstDateOfNewMonth = new Date(newDate);\n\n        firstDateOfNewMonth.setDate(1);\n\n        const lastDateOfNewMonth  = DateHelper.add(DateHelper.add(firstDateOfNewMonth, 1, 'month'), -1, 'day');\n\n        // Don't navigate if month is outside bounds\n        if ((me.minDate && direction < 0 && lastDateOfNewMonth < me.minDate) || (me.maxDate && direction > 0 && firstDateOfNewMonth > me.maxDate)) {\n            return;\n        }\n\n        // We need to force a UI change even if the UI contains the target date.\n        // updateDate always calls super and CalendarPanel will refresh\n        me.isNavigating = true;\n\n        const result = me.date = newDate;\n\n        if (activeCell) {\n            me.activeDate = newDate;\n        }\n        me.isNavigating = false;\n        return result;\n    }\n\n    isActiveDate(date) {\n        return !(date - this.activeDate);\n    }\n\n    isSelectedDate(date) {\n        return this._selection?.has(date);\n    }\n\n    onMonthPicked({ record, userAction }) {\n        if (userAction) {\n            this.activeDate = DateHelper.add(this.activeDate, record.value - this.activeDate.getMonth(), 'month');\n            this.focusElement?.focus();\n        }\n    }\n\n    onYearPickerRequested() {\n        const { yearPicker } = this;\n\n        if (yearPicker.isVisible) {\n            yearPicker.hide();\n        }\n        else {\n            yearPicker.year = yearPicker.startYear = this.activeDate.getFullYear();\n            yearPicker.show();\n            yearPicker.focus();\n        }\n    }\n\n    onYearPickerTitleClick() {\n        this.yearPicker.hide();\n    }\n\n    onYearPicked({ value, source }) {\n        const newDate = new Date(this.activeDate);\n\n        newDate.setFullYear(value);\n        this.activeDate = newDate;\n\n        // Move focus without scroll *before* focus reversion from the hide.\n        // Browser behaviour of scrolling to focused element would break animation.\n        this.focusElement && DomHelper.focusWithoutScrolling(this.focusElement);\n        source.hide();\n    }\n\n    changeYearPicker(yearPicker, oldYearPicker) {\n        return YearPicker.reconfigure(oldYearPicker, yearPicker ? YearPicker.mergeConfigs({\n            owner    : this,\n            appendTo : this.element,\n            minYear  : this.minDate?.getFullYear(),\n            maxYear  : this.maxDate?.getFullYear()\n        }, yearPicker) : null, this);\n    }\n\n    get childItems() {\n        const\n            { _yearPicker } = this,\n            result          = super.childItems;\n\n        if (_yearPicker) {\n            result.push(_yearPicker);\n        }\n\n        return result;\n    }\n\n    updateLocalization() {\n        const\n            {\n                monthField\n            }          = this.widgetMap,\n            newData    = generateMonthNames();\n\n        if (!this.isConfiguring && !newData.every((d, i) => d[1] === monthField.store.getAt(i).text)) {\n            newData[monthField.value].selected = true;\n            monthField.items = newData;\n        }\n\n        super.updateLocalization();\n    }\n}\n\n// Dates are never equal, so raw Set won't work.\nclass DateSet extends Set {\n    add(d) {\n        d = DateHelper.makeKey(d);\n        if (!this.has(d)) {\n            this.generation = (this.generation || 0) + 1;\n        }\n        return super.add(d);\n    }\n\n    delete(d) {\n        d = DateHelper.makeKey(d);\n        if (this.has(d)) {\n            this.generation++;\n        }\n        return super.delete(d);\n    }\n\n    has(d) {\n        return super.has(DateHelper.makeKey(d));\n    }\n\n    clear() {\n        if (this.size) {\n            this.generation++;\n        }\n        return super.clear();\n    }\n\n    equals(other) {\n        Array.isArray(other) && (other = new DateSet(other));\n        return (other.size === this.size) && [...this].every(s => other.has(s));\n    }\n\n    get dates() {\n        return [...this].sort().map(k => DateHelper.parseKey(k));\n    }\n}\n\n// Register this widget type with its Factory\nDatePicker.initClass();\n","//TODO: picker icon (calendar) should show day number\nimport PickerField from './PickerField.js';\nimport DatePicker from './DatePicker.js';\nimport DH from '../helper/DateHelper.js';\n\n/**\n * @module Core/widget/DateField\n */\n\n/**\n * Date field widget (text field + date picker).\n *\n * This field can be used as an {@link Grid.column.Column#config-editor editor} for the {@link Grid.column.Column Column}.\n * It is used as the default editor for the {@link Grid.column.DateColumn DateColumn}.\n *\n * This widget may be operated using the keyboard. `ArrowDown` opens the date picker, which itself\n * is keyboard navigable. `Shift+ArrowDown` activates the {@link #config-step} back trigger.\n * `Shift+ArrowUp` activates the {@link #config-step} forwards trigger.\n *\n * @extends Core/widget/PickerField\n *\n * @example\n * // minimal DateField config with date format specified\n * let dateField = new DateField({\n *   format: 'YYMMDD'\n * });\n *\n * @classType datefield\n * @inlineexample Core/widget/DateField.js\n * @inputfield\n */\nexport default class DateField extends PickerField {\n    //region Config\n    static get $name() {\n        return 'DateField';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'datefield';\n    }\n\n    // Factoryable type alias\n    static get alias() {\n        return 'date';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Get / set format for date displayed in field (see {@link Core.helper.DateHelper#function-format-static}\n             * for formatting options).\n             * @member {String} format\n             */\n            /**\n             * Format for date displayed in field. Defaults to using long date format, as defined by current locale (`L`)\n             * @config {String}\n             * @default\n             */\n            format : 'L',\n\n            /**\n             * A flag which indicates whether the date parsing should be strict - meaning if the date\n             * is missing a year/month/day part - parsing fails.\n             *\n             * Turned off by default, meaning default values are substituted for missing parts.\n             *\n             * @config {Boolean}\n             * @default\n             */\n            strictParsing : false,\n\n            // same for all languages\n            fallbackFormat : 'YYYY-MM-DD',\n            timeFormat     : 'HH:mm:ss:SSS',\n\n            /**\n             * A flag which indicates what time should be used for selected date.\n             * `false` by default which means time is reset to midnight.\n             *\n             * Possible options are:\n             * - `false` to reset time to midnight\n             * - `true` to keep original time value\n             * - `'17:00'` a string which is parsed automatically\n             * - `new Date(2020, 0, 1, 17)` a date object to copy time from\n             * - `'entered'` to keep time value entered by user (in case {@link #config-format} includes time info)\n             *\n             * @config {Boolean|Date|String}\n             * @default\n             */\n            keepTime : false,\n\n            /**\n             * Format for date in the {@link #config-picker}. Uses localized format per default\n             * @config {String}\n             */\n            pickerFormat : null,\n\n            /**\n             * Set to true to first clear time of the field's value before comparing it to the max value\n             * @internal\n             * @config {Boolean}\n             */\n            validateDateOnly : null,\n\n            triggers : {\n                expand : {\n                    cls     : 'b-icon-calendar',\n                    handler : 'onTriggerClick',\n                    weight  : 200\n                },\n\n                back : {\n                    cls     : 'b-icon b-icon-angle-left b-step-trigger',\n                    key     : 'Shift+ArrowDown',\n                    handler : 'onBackClick',\n                    align   : 'start',\n                    weight  : 100\n                },\n\n                forward : {\n                    cls     : 'b-icon b-icon-angle-right b-step-trigger',\n                    key     : 'Shift+ArrowUp',\n                    handler : 'onForwardClick',\n                    align   : 'end',\n                    weight  : 100\n                }\n            },\n\n            // An optional extra CSS class to add to the picker container element\n            calendarContainerCls : '',\n\n            /**\n             * Get/set min value, which can be a Date or a string. If a string is specified, it will be converted using\n             * the specified {@link #config-format}.\n             * @member {Date} min\n             * @accepts {String|Date}\n             */\n            /**\n             * Min value\n             * @config {String|Date}\n             */\n            min : null,\n\n            /**\n             * Get/set max value, which can be a Date or a string. If a string is specified, it will be converted using\n             * the specified {@link #config-format}.\n             * @member {Date} max\n             * @accepts {String|Date}\n             */\n            /**\n             * Max value\n             * @config {String|Date}\n             */\n            max : null,\n\n            /**\n             * The `step` property may be set in object form specifying two properties, `magnitude`, a Number, and\n             * `unit`, a String.\n             *\n             * If a Number is passed, the step's current unit is used (or `day` if no current step set) and just the\n             * magnitude is changed.\n             *\n             * If a String is passed, it is parsed by {@link Core.helper.DateHelper#function-parseDuration-static}, for\n             * example `'1d'`, `'1 d'`, `'1 day'`, or `'1 day'`.\n             *\n             * Upon read, the value is always returned in object form containing `magnitude` and `unit`.\n             * @member {DurationConfig} step\n             * @accepts {String|Number|DurationConfig}\n             */\n            /**\n             * Time increment duration value. If specified, `forward` and `back` triggers are displayed.\n             * The value is taken to be a string consisting of the numeric magnitude and the units.\n             * The units may be a recognised unit abbreviation of this locale or the full local unit name.\n             * For example `'1d'` or `'1w'` or `'1 week'`. This may be specified as an object containing\n             * two properties: `magnitude`, a Number, and `unit`, a String\n             * @config {String|Number|DurationConfig}\n             */\n            step : false,\n\n            stepTriggers : null,\n\n            /**\n             * The week start day in the {@link #config-picker}, 0 meaning Sunday, 6 meaning Saturday.\n             * Uses localized value per default.\n             * @config {Number}\n             */\n            weekStartDay : null,\n\n            /**\n             * A config object used to configure the {@link Core.widget.DatePicker datePicker}.\n             * ```javascript\n             * dateField = new DateField({\n             *      picker    : {\n             *          multiSelect : true\n             *      }\n             *  });\n             * ```\n             * @config {DatePickerConfig}\n             */\n            picker : {\n                type         : 'datepicker',\n                role         : 'dialog',\n                floating     : true,\n                scrollAction : 'realign',\n                align        : {\n                    align    : 't0-b0',\n                    axisLock : true\n                }\n            },\n\n            /**\n             * Get/set value, which can be set as a Date or a string but always returns a Date. If a string is\n             * specified, it will be converted using the specified {@link #config-format}\n             * @member {Date} value\n             * @accepts {String|Date}\n             */\n            /**\n             * Value, which can be a Date or a string. If a string is specified, it will be converted using the\n             * specified {@link #config-format}\n             * @config {String|Date}\n             */\n            value : null\n        };\n    }\n\n    //endregion\n\n    //region Init & destroy\n\n    /**\n     * Creates default picker widget\n     *\n     * @internal\n     */\n    changePicker(picker, oldPicker) {\n        const\n            me       = this,\n            defaults = {\n                owner        : me,\n                forElement   : me[me.pickerAlignElement],\n                minDate      : me.min,\n                maxDate      : me.max,\n                weekStartDay : me._weekStartDay, // need to pass the raw value to let the component to use its default value\n\n                align : {\n                    anchor : me.overlayAnchor,\n                    target : me[me.pickerAlignElement]\n                },\n\n                onSelectionChange : ({ selection, source : picker }) => {\n                    // We only care about what DatePicker does if it has been opened\n                    if (picker.isVisible) {\n                        me._isUserAction = me._isPickerInput = true;\n                        me.value = selection[0];\n                        me._isPickerInput = me._isUserAction = false;\n                        picker.hide();\n                    }\n                }\n            };\n\n        if (me.calendarContainerCls) {\n            defaults.cls = me.calendarContainerCls;\n        }\n\n        // If we are in cleared state, the picker will also have no value.\n        // But have it focused on today as a default.\n        if (me.value) {\n            defaults.value = me.value;\n        }\n        else {\n            defaults.activeDate = new Date();\n        }\n\n        const result = DatePicker.reconfigure(oldPicker, picker, {\n            owner : me,\n            defaults\n        });\n\n        // Cells must exist early\n        result?.refresh.flush();\n\n        return result;\n    }\n\n    //endregion\n\n    //region Click listeners\n\n    get backShiftDate() {\n        return DH.add(this.value, -1 * this._step.magnitude, this._step.unit);\n    }\n\n    onBackClick() {\n        const\n            me      = this,\n            { min } = me;\n\n        if (!me.readOnly && me.value) {\n            const newValue = me.backShiftDate;\n            if (!min || min.getTime() <= newValue) {\n                me._isUserAction = true;\n                me.value = newValue;\n                me._isUserAction = false;\n            }\n        }\n    }\n\n    get forwardShiftDate() {\n        return DH.add(this.value, this._step.magnitude, this._step.unit);\n    }\n\n    onForwardClick() {\n        const\n            me      = this,\n            { max } = me;\n\n        if (!me.readOnly && me.value) {\n            const newValue = me.forwardShiftDate;\n            if (!max || max.getTime() >= newValue) {\n                me._isUserAction = true;\n                me.value = newValue;\n                me._isUserAction = false;\n            }\n        }\n    }\n\n    //endregion\n\n    //region Toggle picker\n\n    showPicker(focusPicker) {\n        if (this.readOnly) {\n            return;\n        }\n\n        const\n            me           = this,\n            { _picker }  = me;\n\n        // If it's already instanced, navigate it to our date, or default of today.\n        // It will be initialized correctly if not.\n        if (_picker) {\n            // In case a subclass uses a min getter (which does not update our min value) - ensure picker is correctly configured\n            const pickerConfig = {\n                minDate : me.min,\n                maxDate : me.max\n            };\n\n            if (me.value) {\n                pickerConfig.value = me.value;\n            }\n            else {\n                pickerConfig.activeDate = new Date();\n            }\n\n            // Config dependencies are correctly processed by setConfig\n            _picker.setConfig(pickerConfig);\n        }\n\n        super.showPicker(focusPicker);\n    }\n\n    focusPicker() {\n        this.picker.focus();\n    }\n\n    //endregion\n\n    // region Validation\n\n    get isValid() {\n        const me  = this;\n\n        me.clearError('L{Field.minimumValueViolation}', true);\n        me.clearError('L{Field.maximumValueViolation}', true);\n\n        let value = me.value;\n\n        if (value) {\n            const { min, max, validateDateOnly } = me;\n\n            // Validation of the date should only care about the date part\n            if (validateDateOnly) {\n                value = DH.clearTime(value, false);\n            }\n\n            if (min && value < min) {\n                me.setError('L{Field.minimumValueViolation}', true);\n                return false;\n            }\n\n            if (max && value > max) {\n                me.setError('L{Field.maximumValueViolation}', true);\n                return false;\n            }\n        }\n\n        return super.isValid;\n    }\n\n    //endregion\n\n    //region Getters/setters\n    transformDateValue(value) {\n        const me = this;\n\n        if (value != null) {\n            if (!DH.isDate(value)) {\n                if (typeof value === 'string') {\n                    // If date cannot be parsed with set format, try fallback - the more general one\n                    value = DH.parse(value, me.format, me.strictParsing) || DH.parse(value, me.fallbackFormat, me.strictParsing);\n                }\n                else {\n                    value = new Date(value);\n                }\n            }\n\n            // We insist on a *valid* Date as the value\n            if (DH.isValidDate(value)) {\n                if ((!me.min || (value - me.min > -DH.MS_PER_DAY)) && (!me.max || value <= me.max)) {\n                    return me.transformTimeValue(value);\n                }\n\n                return value;\n            }\n        }\n        return null;\n    }\n\n    transformTimeValue(value) {\n        const\n            me = this,\n            { keepTime } = me;\n\n        value = DH.clone(value);\n\n        if (!keepTime) {\n            DH.clearTime(value, false);\n        }\n        // change time if keepTime !== 'entered'\n        else if (keepTime !== 'entered') {\n            const timeValue = DH.parse(keepTime, me.timeFormat);\n\n            // if this.keepTime is a valid date or a string describing valid time copy from it\n            if (DH.isValidDate(timeValue)) {\n                DH.copyTimeValues(value, timeValue);\n            }\n            // otherwise try to copy from the current value\n            else if (DH.isValidDate(me.value)) {\n                DH.copyTimeValues(value, me.value);\n            }\n        }\n        // if keepTime === 'entered' and picker is used apply current value time\n        else if (me._isPickerInput && DH.isValidDate(me.value)) {\n            DH.copyTimeValues(value, me.value);\n        }\n        // else don't change time\n\n        return value;\n    }\n\n    changeMin(value) {\n        return this.transformDateValue(value);\n    }\n\n    updateMin(min) {\n        const { input, _picker } = this;\n\n        if (input) {\n            if (min == null) {\n                input.removeAttribute('min');\n            }\n            else {\n                input.min = min;\n            }\n        }\n\n        // See if our lazy config has been realized...\n        if (_picker) {\n            _picker.minDate = min;\n        }\n\n        this.syncInvalid();\n    }\n\n    changeMax(value) {\n        return this.transformDateValue(value);\n    }\n\n    updateMax(max) {\n        const { input, _picker } = this;\n\n        if (input) {\n            if (max == null) {\n                input.removeAttribute('max');\n            }\n            else {\n                input.max = max;\n            }\n        }\n\n        if (_picker) {\n            _picker.maxDate = max;\n        }\n\n        this.syncInvalid();\n    }\n\n    get weekStartDay() {\n        // This trick allows our weekStartDay to float w/the locale even if the locale changes\n        return typeof this._weekStartDay === 'number' ? this._weekStartDay : DH.weekStartDay;\n    }\n\n    updateWeekStartDay(weekStartDay) {\n        if (this._picker) {\n            this._picker.weekStartDay = weekStartDay;\n        }\n    }\n\n    changeValue(value, oldValue) {\n        const\n            me = this,\n            newValue = me.transformDateValue(value);\n\n        // A value we could not parse\n        if (value && !newValue) {\n            // setError uses localization\n            me.setError('L{invalidDate}');\n            return;\n        }\n\n        me.clearError('L{invalidDate}');\n\n        // Reject non-change\n        if (me.hasChanged(oldValue, newValue)) {\n            return super.changeValue(newValue, oldValue);\n        }\n\n        // But we must fix up the display in case it was an unparseable string\n        // and the value therefore did not change.\n        if (!me.inputting) {\n            me.syncInputFieldValue();\n        }\n    }\n\n    updateValue(value, oldValue) {\n        const picker = this._picker;\n\n        if (picker && !this.inputting) {\n            picker.value = value;\n        }\n\n        super.updateValue(value, oldValue);\n    }\n\n    changeStep(value, was) {\n        const type = typeof value;\n\n        if (!value) {\n            return null;\n        }\n\n        if (type === 'number') {\n            value = {\n                magnitude : Math.abs(value),\n                unit      : was ? was.unit : 'day'\n            };\n        }\n        else if (type === 'string') {\n            value = DH.parseDuration(value);\n        }\n\n        if (value && value.unit && value.magnitude) {\n            if (value.magnitude < 0) {\n                value = {\n                    magnitude : -value.magnitude,  // Math.abs\n                    unit      : value.unit\n                };\n            }\n\n            return value;\n        }\n    }\n\n    updateStep(value) {\n        // If a step is configured, show the steppers\n        this.element.classList[value ? 'remove' : 'add']('b-no-steppers');\n\n        this.syncInvalid();\n    }\n\n    hasChanged(oldValue, newValue) {\n        // if both dates are provided and the field does not has time info in its format\n        if (oldValue?.getTime && newValue?.getTime && this.keepTime !== 'entered') {\n            // Only compare date part\n            return !DH.isEqual(DH.clearTime(oldValue), DH.clearTime(newValue));\n        }\n\n        return super.hasChanged(oldValue && oldValue.getTime(), newValue && newValue.getTime());\n    }\n\n    get inputValue() {\n        // Do not use the _value property. If called during configuration, this\n        // will import the configured value from the config object.\n        const date = this.value;\n\n        return date ? DH.format(date, this.format) : '';\n    }\n\n    updateFormat() {\n        if (!this.isConfiguring) {\n            this.syncInputFieldValue(true);\n        }\n    }\n\n    //endregion\n\n    //region Localization\n\n    updateLocalization() {\n        super.updateLocalization();\n        this.syncInputFieldValue(true);\n    }\n\n    //endregion\n\n    //region Other\n\n    internalOnKeyEvent(event) {\n        super.internalOnKeyEvent(event);\n\n        if (event.key === 'Enter' && this.isValid) {\n            this.picker.hide();\n        }\n    }\n\n    //endregion\n}\n\n// Register this widget type with its Factory\nDateField.initClass();\n","import Field from './Field.js';\nimport NumberFormat from '../helper/util/NumberFormat.js';\n\n/**\n * @module Core/widget/NumberField\n */\n\n/**\n * Number field widget. Similar to native `<input type=\"number\">`, but implemented as `<input type=\"text\">` to support\n * formatting.\n *\n * This field can be used as an {@link Grid/column/Column#config-editor} for the {@link Grid/column/Column}.\n * It is used as the default editor for the {@link Grid/column/NumberColumn},\n * {@link Grid/column/PercentColumn}, {@link Grid/column/AggregateColumn}.\n *\n * ```javascript\n * const number = new NumberField({\n *     min   : 1,\n *     max   : 5,\n *     value : 3\n * });\n * ```\n *\n * Provide a {@link Core/helper/util/NumberFormat} config as {@link #config-format} to be able to show currency. For\n * example:\n *\n * ```javascript\n * new NumberField({\n *   format : {\n *      style    : 'currency',\n *      currency : 'USD'\n *   }\n * });\n * ```\n *\n * @extends Core/widget/Field\n * @classType numberfield\n * @inlineexample Core/widget/NumberField.js\n * @inputfield\n */\nexport default class NumberField extends Field {\n\n    //region Config\n\n    static get $name() {\n        return 'NumberField';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'numberfield';\n    }\n\n    // Factoryable type alias\n    static get alias() {\n        return 'number';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Min value\n             * @config {Number}\n             */\n            min : null,\n\n            /**\n             * Max value\n             * @config {Number}\n             */\n            max : null,\n\n            /**\n\n             * Step size for spin button clicks.\n             * @member {Number} step\n             */\n            /**\n             * Step size for spin button clicks. Also used when pressing up/down keys in the field.\n             * @config {Number}\n             * @default\n             */\n            step : 1,\n\n            /**\n             * Large step size, defaults to 10 * `step`. Applied when pressing SHIFT and stepping either by click or\n             * using keyboard.\n             * @config {Number}\n             * @default 10\n             */\n            largeStep : 0,\n\n            /**\n             * Initial value\n             * @config {Number}\n             */\n            value : null,\n\n            /**\n             * The format to use for rendering numbers.\n             *\n             * For example:\n             * ```\n             *  format: '9,999.00##'\n             * ```\n             * The above enables digit grouping and will display at least 2 (but no more than 4) fractional digits.\n             * @config {String|NumberFormatConfig}\n             * @default\n             */\n            format : '',\n\n            /**\n             * The number of decimal places to allow. Defaults to no constraint.\n             *\n             * This config has been replaced by {@link #config-format}. Instead of this:\n             *```\n             *  decimalPrecision : 3\n             *```\n             * Use `format`:\n             *```\n             *  format : '9.###'\n             *```\n             * To set both `decimalPrecision` and `leadingZeroes` (say to `3`), do this:\n             *```\n             *  format : '3>9.###'\n             *```\n             * @config {Number}\n             * @default\n             * @deprecated Since 3.1. Use {@link #config-format} instead.\n             */\n            decimalPrecision : null,\n\n            /**\n             * The maximum number of leading zeroes to show. Defaults to no constraint.\n             *\n             * This config has been replaced by {@link #config-format}. Instead of this:\n             *```\n             *  leadingZeros : 3\n             *```\n             * Use `format`:\n             *```\n             *  format : '3>9'\n             *```\n             * To set both `leadingZeroes` and `decimalPrecision` (say to `2`), do this:\n             *```\n             *  format : '3>9.##'\n             *```\n             * @config {Number}\n             * @default\n             * @deprecated Since 3.1. Use {@link #config-format} instead.\n             */\n            leadingZeroes : null,\n\n            triggers : {\n                spin : {\n                    type : 'spintrigger'\n                }\n            },\n\n            /**\n             * Controls how change events are triggered when stepping the value up or down using either spinners or\n             * arrow keys.\n             *\n             * Configure with:\n             * * `true` to trigger a change event per step\n             * * `false` to not trigger change while stepping. Will trigger on blur/Enter\n             * * A number of milliseconds to buffer the change event, triggering when no steps are performed during that\n             *   period of time.\n             *\n             * @config {Boolean|Number}\n             * @default\n             */\n            changeOnSpin : true,\n\n            // NOTE: using type=\"number\" has several trade-offs:\n            //\n            // Negatives:\n            //   - No access to caretPos/textSelection. This causes anomalies when replacing\n            //     the input value with a formatted version of that value (the caret moves to\n            //     the end of the input el on each character typed).\n            //   - The above also prevents Siesta/synthetic events from mimicking typing.\n            //   - Thousand separators cannot be displayed (input.value = '1,000' throws an\n            //     exception).\n            // Positives:\n            //   - On mobile, the virtual keyboard only shows digits et al.\n            //   - validity property on DOM node that handles min/max checks.\n            //\n            // The above may not be exhaustive, but there is not a compelling reason to\n            // use type=\"number\" except on mobile.\n\n            /**\n             * This can be set to `'number'` to enable the numeric virtual keyboard on\n             * mobile devices. Doing so limits this component's ability to handle keystrokes\n             * and format properly as the user types, so this is not recommended for\n             * desktop applications. This will also limit similar features of automated\n             * testing tools that mimic user input.\n             * @config {String}\n             * @default text\n             */\n            inputType : null\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    construct(config) {\n        super.construct(config);\n\n        const me = this;\n\n        // Support for selecting all by double click in empty input area\n        // Browsers work differently at this case\n        me.input.addEventListener('dblclick', () => {\n            me.select();\n        });\n\n        if (typeof me.changeOnSpin === 'number') {\n            me.bufferedSpinChange = me.buffer(me.triggerChange, me.changeOnSpin);\n        }\n    }\n\n    //endregion\n\n    //region Internal functions\n\n    acceptValue(value, rawValue) {\n        let accept = !isNaN(value);\n\n        // https://github.com/bryntum/support/issues/1349\n        // Pass through if there is a text selection in the field. This fixes the case when\n        // valid value is typed already and we are replacing it by selecting complete string and typing over it.\n        // Cannot be tested in siesta, see ticket for more info.\n        if (accept && !this.hasTextSelection) {\n            accept = false;\n\n            const\n                raw = this.input.value,\n                current = parseFloat(raw);\n\n            if (raw !== rawValue) {\n                // The new value is out of range, but we accept it if the current value\n                // is also problematic. Consider the case where the input is empty and the\n                // minimum value is 100. The user must first type \"1\" and we must accept it\n                // if they are to get the opportunity to type the \"0\"s.\n                accept = !this.acceptValue(current, raw);\n\n                // Also, if we are checking the current value, be sure not to infinitely\n                // recurse here.\n            }\n        }\n\n        return accept;\n    }\n\n    okMax(value) {\n        return isNaN(this.max) || value <= this.max;\n    }\n\n    okMin(value) {\n        return isNaN(this.min) || value >= this.min;\n    }\n\n    internalOnKeyEvent(e) {\n        if (e.type === 'keydown') {\n            const\n                me = this,\n                key = e.key;\n\n            let block;\n\n            // Native arrow key spin behaviour differs between browsers, so we replace\n            // the native spinners w/our own triggers and handle arrows keys as well.\n            if (key === 'ArrowUp') {\n                me.doSpinUp(e.shiftKey);\n                block = true;\n            }\n            else if (key === 'ArrowDown') {\n                me.doSpinDown(e.shiftKey);\n                block = true;\n            }\n            else if (!e.altKey && !e.ctrlKey && key && key.length === 1) {\n                // The key property contains the character or key name... so ignore\n                // keys that aren't a single character.\n                const\n                    after      = me.getAfterValue(key),\n                    afterValue = me.formatter.parseStrict(after),\n                    // no need to check if typing same value or - if negative numbers are allowed\n                    accepted   = afterValue === me.value || (after === '-' && (isNaN(me.min) || me.min < 0));\n\n                block = !accepted && !me.acceptValue(afterValue, after);\n            }\n\n            if (key === 'Enter' && me._changedBySilentSpin) {\n                me.triggerChange(e, true);\n\n                // reset the flag\n                me._changedBySilentSpin = false;\n            }\n\n            if (block) {\n                e.preventDefault();\n            }\n        }\n\n        super.internalOnKeyEvent(e);\n    }\n\n    doSpinUp(largeStep = false) {\n        const me = this;\n\n        if (me.readOnly) {\n            return;\n        }\n\n        let newValue = (me.value || 0) + (largeStep ? me.largeStep : me.step);\n\n        if (!me.okMin(newValue)) {\n            newValue = me.min;\n        }\n\n        if (me.okMax(newValue)) {\n            me.applySpinChange(newValue);\n        }\n    }\n\n    doSpinDown(largeStep = false) {\n        const me = this;\n\n        if (me.readOnly) {\n            return;\n        }\n\n        let newValue = (me.value || 0) - (largeStep ? me.largeStep : me.step);\n\n        if (!me.okMax(newValue)) {\n            newValue = me.max;\n        }\n\n        if (me.okMin(newValue)) {\n            me.applySpinChange(newValue);\n        }\n    }\n\n    applySpinChange(newValue) {\n        const me = this;\n\n        me._isUserAction = true;\n\n        // Should not trigger change immediately?\n        if (me.changeOnSpin !== true) {\n            me._changedBySilentSpin = true;\n            // Silence the change\n            me.silenceChange = true;\n            // Optionally buffer the change\n            me.bufferedSpinChange && me.bufferedSpinChange(null, true);\n        }\n\n        me.value = newValue;\n\n        me._isUserAction = false;\n        me.silenceChange = false;\n    }\n\n    triggerChange() {\n        if (!this.silenceChange) {\n            super.triggerChange(...arguments);\n        }\n    }\n\n    onFocusOut(e) {\n        super.onFocusOut(...arguments);\n\n        const\n            me = this,\n            { input } = me,\n            raw = input.value,\n            value = me.formatter.truncate(raw),\n            formatted = isNaN(value) ? raw : me.formatValue(value);\n\n        // Triggers may have been reconfigured\n        me.triggers?.spin?.clickRepeater?.cancel();\n\n        if (raw !== formatted) {\n            input.value = formatted;\n        }\n\n        if (me._changedBySilentSpin) {\n            me.triggerChange(e, true);\n\n            // reset the flag\n            me._changedBySilentSpin = false;\n        }\n    }\n\n    internalOnInput(event) {\n        const\n            me = this,\n            { formatter, input } = me,\n            { parser } = formatter,\n            raw = input.value,\n            decimals = parser.decimalPlaces(raw);\n\n        if (formatter.truncator && decimals) {\n            let value = raw;\n\n            const trunc = formatter.truncate(raw);\n\n            if (!isNaN(trunc)) {\n                value = me.formatValue(trunc);\n\n                if (parser.decimalPlaces(value) < decimals) {\n                    // If typing has caused truncation or rounding, reset. To best preserve\n                    // the caret pos (which is reset by assigning input.value), we grab and\n                    // restore the distance from the end. This allows special things to format\n                    // into the string (such as thousands separators) since they always go to\n                    // the front of the input.\n                    const pos = raw.length - me.caretPos;\n\n                    input.value = value;\n\n                    me.caretPos = value.length - pos;\n                }\n            }\n        }\n\n        super.internalOnInput(event);\n    }\n\n    formatValue(value) {\n        return this.formatter.format(value);\n    }\n\n    changeFormat(format) {\n        const me = this;\n\n        if (format === '') {\n            const { leadingZeroes, decimalPrecision } = me;\n\n            format = leadingZeroes ? `${leadingZeroes}>9` : null;\n\n            if (decimalPrecision != null) {\n                format = `${format || ''}9.${'#'.repeat(decimalPrecision)}`;\n            }\n            else if (format) {\n                // When we only have leadingZeroes, we'll have a format like \"4>9\", but\n                // that will default to 3 decimal digits. Prior behavior implied no limit\n                // on decimal digits unless decimalPrecision was specified.\n                format += '.*';\n            }\n        }\n\n        return format;\n    }\n\n    get formatter() {\n        const\n            me = this,\n            format = me.format;\n\n        let formatter = me._formatter;\n\n        if (!formatter || me._lastFormat !== format) {\n            formatter = NumberFormat.get(me._lastFormat = format);\n\n            // TODO use this.formatter.is.from.currency/percent visually...\n            // if (!formatter.is.decimal) {\n            //     formatter = formatter.as('decimal');\n            // }\n\n            me._formatter = formatter;\n        }\n\n        return formatter;\n    }\n\n    //endregion\n\n    //region Getters/Setters\n\n    updateStep(step) {\n        this.element.classList[step ? 'remove' : 'add']('b-hide-spinner');\n        this._step = step;\n    }\n\n    changeLargeStep(largeStep) {\n        return largeStep || (this.step * 10);\n    }\n\n    get validity() {\n        const\n            value    = this.value,\n            validity = {};\n\n        // Assert range for non-empty fields, empty fields will turn invalid if `required: true`\n        if (value != null) {\n            validity.rangeUnderflow = !this.okMin(value);\n            validity.rangeOverflow = !this.okMax(value);\n        }\n        validity.valid = !validity.rangeUnderflow && !validity.rangeOverflow;\n\n        return validity;\n    }\n\n    /**\n     * Get/set the NumberField's value, or `undefined` if the input field is empty\n     * @property {Number}\n     */\n    changeValue(value, was) {\n        const me = this;\n\n        if (value || value === 0) {\n            let valueIsNaN;\n\n            // We insist on a number as the value\n            if (typeof value !== 'number') {\n                value = (typeof value === 'string') ? me.formatter.parse(value) : Number(value);\n\n                valueIsNaN = isNaN(value);\n                if (valueIsNaN) {\n                    value = '';\n                }\n            }\n\n            if (!valueIsNaN && me.format) {\n                value = me.formatter.round(value);\n            }\n        }\n        else {\n            value = undefined;\n        }\n\n        return super.changeValue(value, was);\n    }\n\n    get inputValue() {\n        let value = this.value;\n\n        if (value != null && this.format) {\n            value = this.formatValue(value);\n        }\n\n        return value;\n    }\n\n    //endregion\n}\n\n// Register this widget type with its Factory\nNumberField.initClass();\n","import Container from './Container.js';\nimport DateHelper from '../helper/DateHelper.js';\nimport './NumberField.js';\n\n/**\n * @module Core/widget/TimePicker\n */\n\n/**\n * A Container which displays hour and minute number fields and AM/PM switcher buttons for 12 hour time format.\n *\n * ```javascript\n * new TimeField({\n *     label     : 'Time field',\n *     appendTo  : document.body,\n *     // Configure the time picker\n *     picker    : {\n *         items : {\n *             minute : {\n *                 step : 5\n *             }\n *         }\n *     }\n * });\n * ```\n * ## Contained widgets\n *\n * The default widgets contained in this picker are:\n *\n * | Widget ref | Type                                        | Description      |\n * |------------|---------------------------------------------|------------------|\n * | `hour`     | {@link Core.widget.NumberField NumberField} | The hour field   |\n * | `minute`   | {@link Core.widget.NumberField NumberField} | The minute field |\n * | `second`   | {@link Core.widget.NumberField NumberField} | The second field |\n * | `amButton` | {@link Core.widget.Button Button}           | The am button    |\n * | `pmButton` | {@link Core.widget.Button Button}           | The pm button    |\n *\n * This class is not intended for use in applications. It is used internally by the {@link Core.widget.TimeField} class.\n *\n * @classType timepicker\n * @extends Core/widget/Container\n * @widget\n */\nexport default class TimePicker extends Container {\n\n    //region Config\n    static get $name() {\n        return 'TimePicker';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'timepicker';\n    }\n\n    static configurable = {\n        floating : true,\n        items    : {\n            hour : {\n                label                   : 'L{TimePicker.hour}',\n                type                    : 'number',\n                min                     : 0,\n                max                     : 23,\n                highlightExternalChange : false,\n                format                  : '2>9'\n            },\n            minute : {\n                label                   : 'L{TimePicker.minute}',\n                type                    : 'number',\n                min                     : 0,\n                max                     : 59,\n                highlightExternalChange : false,\n                format                  : '2>9'\n            },\n            second : {\n                hidden                  : true,\n                label                   : 'L{TimePicker.second}',\n                type                    : 'number',\n                min                     : 0,\n                max                     : 59,\n                highlightExternalChange : false,\n                format                  : '2>9'\n            },\n            amButton : {\n                type        : 'button',\n                text        : 'AM',\n                toggleGroup : 'am-pm',\n                cls         : 'b-blue',\n                onClick     : 'up.onAmPmButtonClick'\n            },\n            pmButton : {\n                type        : 'button',\n                text        : 'PM',\n                toggleGroup : 'am-pm',\n                cls         : 'b-blue',\n                onClick     : 'up.onAmPmButtonClick'\n            }\n        },\n\n        autoShow : false,\n\n        trapFocus : true,\n\n        /**\n         * By default the seconds field is not displayed. If you require seconds to be visible,\n         * configure this as `true`\n         * @config {Boolean}\n         * @default false\n         */\n        seconds : null,\n\n        /**\n         * Time value, which can be a Date or a string. If a string is specified, it will be converted using the\n         * specified {@link #config-format}\n         * @prp {Date}\n         * @accepts {Date|String}\n         */\n        value : {\n            $config : {\n                equal : 'date'\n            },\n            value : null\n        },\n\n        /**\n         * Time format. Used to set appropriate 12/24 hour format to display.\n         * See {@link Core.helper.DateHelper#function-format-static DateHelper} for formatting options.\n         * @prp {String}\n         */\n        format : null,\n\n        /**\n         * Max value, which can be a Date or a string. If a string is specified, it will be converted using the\n         * specified {@link #config-format}\n         * @prp {Date}\n         * @accepts {Date|String}\n         */\n        max : null,\n\n        /**\n         * Min value, which can be a Date or a string. If a string is specified, it will be converted using the\n         * specified {@link #config-format}\n         * @prp {Date}\n         * @accepts {Date|String}\n         */\n        min : null,\n\n        /**\n         * Initial value, which can be a Date or a string. If a string is specified, it will be converted using the\n         * specified {@link #config-format}. Initial value is restored on Escape click\n         * @member {Date} initialValue\n         * @accepts {Date|String}\n         */\n        initialValue : null // Not documented as config on purpose, API was that way\n    }\n\n    //endregion\n\n    //region Init\n\n    construct(config) {\n        super.construct(config);\n        this.refresh();\n    }\n\n    updateSeconds(seconds) {\n        this.widgetMap.second[seconds ? 'show' : 'hide']();\n    }\n\n    //endregion\n\n    //region Event listeners\n\n    // Automatically called by Widget's triggerFieldChange which announces changes to all ancestors\n    onFieldChange() {\n        if (!this.isConfiguring && !this.isRefreshing) {\n            this.value = this.pickerToTime();\n        }\n    }\n\n    onAmPmButtonClick({ source }) {\n        this._pm = source.ref === 'pmButton';\n        if (this._value) {\n            this.value = this.pickerToTime();\n        }\n    }\n\n    onInternalKeyDown(keyEvent) {\n        const me = this;\n\n        switch (keyEvent.key) {\n            case 'Escape':\n                // Support for undefined initial time\n                me.triggerTimeChange(me._initialValue);\n                me.hide();\n                keyEvent.preventDefault();\n                return;\n            case 'Enter':\n                me.value = me.pickerToTime();\n                me.hide();\n                keyEvent.preventDefault();\n                return;\n        }\n\n        super.onInternalKeyDown?.(keyEvent);\n    }\n\n    //endregion\n\n    //region Internal functions\n\n    pickerToTime() {\n        const\n            me               = this,\n            pm               = me._pm,\n            { hour, minute, second } = me.widgetMap;\n\n        hour.format = me._is24Hour ? '2>9' : null;\n\n        let hours    = hour.value,\n            newValue = new Date(me.value);\n\n        if (!me._is24Hour) {\n            if (pm && hours < 12) hours = hours + 12;\n            if (!pm && hours === 12) hours = 0;\n        }\n\n        newValue.setHours(hours);\n        newValue.setMinutes(minute.value);\n        if (me.seconds) {\n            newValue.setSeconds(second.value);\n        }\n\n        if (me._min) {\n            newValue = DateHelper.max(me._min, newValue);\n        }\n        if (me._max) {\n            newValue = DateHelper.min(me._max, newValue);\n        }\n\n        return newValue;\n    }\n\n    triggerTimeChange(time) {\n        /**\n         * Fires when a time is changed.\n         * @event timeChange\n         * @param {Date} time The selected time.\n         */\n        this.trigger('timeChange', { time });\n    }\n\n    //endregion\n\n    //region Getters / Setters\n\n    updateInitialValue(initialValue) {\n        this.value = initialValue;\n    }\n\n    changeValue(value) {\n        if (value) {\n            value = typeof value === 'string' ? DateHelper.parse(value, this.format) : value;\n        }\n        if (!this.isVisible) {\n            this._initialValue = value;\n        }\n        return value ?? DateHelper.getTime(0);\n    }\n\n    updateValue(value) {\n        if (this.isVisible) {\n            this.triggerTimeChange(value);\n        }\n        this.refresh();\n    }\n\n    updateFormat(format) {\n        this._is24Hour = DateHelper.is24HourFormat(format);\n        this.refresh();\n    }\n\n    changeMin(min) {\n        return typeof min === 'string' ? DateHelper.parse(min, this.format) : min;\n    }\n\n    changeMax(max) {\n        return typeof max === 'string' ? DateHelper.parse(max, this.format) : max;\n    }\n\n    //endregion\n\n    //region Display\n\n    refresh() {\n        const me = this;\n\n        if (!me.isConfiguring && me.value) {\n            me.isRefreshing = true;\n            const\n                { hour, minute, second, amButton, pmButton } = me.widgetMap,\n                time                                 = me.value,\n                is24                                 = me._is24Hour,\n                hours                                = time.getHours(),\n                pm                                   = me._pm = hours >= 12;\n\n            me.element.classList[is24 ? 'add' : 'remove']('b-24h');\n\n            hour.min         = is24 ? 0 : 1;\n            hour.max         = is24 ? 23 : 12;\n            hour.value       = is24 ? hours : (hours % 12) || 12;\n            minute.value     = time.getMinutes();\n            second.value     = time.getSeconds();\n            amButton.pressed = !pm;\n            pmButton.pressed = pm;\n            amButton.hidden  = pmButton.hidden = is24;\n            me.isRefreshing  = false;\n        }\n    }\n\n    //endregion\n\n}\n\n// Register this widget type with its Factory\nTimePicker.initClass();\n","import DH from '../helper/DateHelper.js';\nimport PickerField from './PickerField.js';\nimport TimePicker from './TimePicker.js';\n\n/**\n * @module Core/widget/TimeField\n */\n\n/**\n * The time field widget is a text input field with a time picker drop down. It shows left/right arrows to increase or\n * decrease time by the {@link #config-step step value}.\n *\n * This field can be used as an {@link Grid.column.Column#config-editor editor} for the {@link Grid.column.Column Column}.\n * It is used as the default editor for the {@link Grid.column.TimeColumn TimeColumn}.\n *\n * ## Configuring the picker hour / minute fields\n *\n * You can easily configure the fields in the drop-down picker, to control the increment of the up/down step arrows:\n *\n * ```javascript\n * new TimeField({\n *     label     : 'Time field',\n *     appendTo  : document.body,\n *     picker    : {\n *         items : {\n *             minute : {\n *                 step : 5\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * This widget may be operated using the keyboard. `ArrowDown` opens the time picker, which itself\n * is keyboard navigable. `Shift+ArrowDown` activates the {@link #config-step} back trigger.\n * `Shift+ArrowUp` activates the {@link #config-step} forwards trigger.\n *\n * @extends Core/widget/PickerField\n *\n * @example\n * let field = new TimeField({\n *   format: 'HH'\n * });\n *\n * @classType timefield\n * @inlineexample Core/widget/TimeField.js\n * @inputfield\n */\nexport default class TimeField extends PickerField {\n    //region Config\n    static get $name() {\n        return 'TimeField';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'timefield';\n    }\n\n    // Factoryable type alias\n    static get alias() {\n        return 'time';\n    }\n\n    static get configurable() {\n        return {\n            picker : {\n                type  : 'timepicker',\n                align : {\n                    align    : 't0-b0',\n                    axisLock : true\n                }\n            },\n\n            /**\n             * Get/Set format for time displayed in field (see {@link Core.helper.DateHelper#function-format-static}\n             * for formatting options).\n             * @member {String} format\n             */\n            /**\n             * Format for date displayed in field (see Core.helper.DateHelper#function-format-static for formatting\n             * options).\n             * @config {String}\n             * @default\n             */\n            format : 'LT',\n\n            triggers : {\n                expand : {\n                    align   : 'end',\n                    handler : 'onTriggerClick',\n                    compose : () => ({\n                        children : [{\n                            class : {\n                                'b-icon-clock-live' : 1\n                            }\n                        }]\n                    })\n                },\n\n                back : {\n                    align   : 'start',\n                    cls     : 'b-icon b-icon-angle-left b-step-trigger',\n                    key     : 'Shift+ArrowDown',\n                    handler : 'onBackClick'\n                },\n\n                forward : {\n                    align   : 'end',\n                    cls     : 'b-icon b-icon-angle-right b-step-trigger',\n                    key     : 'Shift+ArrowUp',\n                    handler : 'onForwardClick'\n                }\n            },\n\n            /**\n             * Get/set min value, which can be a Date or a string. If a string is specified, it will be converted using\n             * the specified {@link #config-format}.\n             * @member {Date} min\n             * @accepts {String|Date}\n             */\n            /**\n             * Min time value\n             * @config {String|Date}\n             */\n            min : null,\n\n            /**\n             * Get/set max value, which can be a Date or a string. If a string is specified, it will be converted using\n             * the specified {@link #config-format}.\n             * @member {Date} max\n             * @accepts {String|Date}\n             */\n            /**\n             * Max time value\n             * @config {String|Date}\n             */\n            max : null,\n\n            /**\n             * The `step` property may be set in Object form specifying two properties, `magnitude`, a Number, and\n             * `unit`, a String.\n             *\n             * If a Number is passed, the steps's current unit is used and just the magnitude is changed.\n             *\n             * If a String is passed, it is parsed by {@link Core.helper.DateHelper#function-parseDuration-static}, for\n             * example `'5m'`, `'5 m'`, `'5 min'`, `'5 minutes'`.\n             *\n             * Upon read, the value is always returned in object form containing `magnitude` and `unit`.\n             * @member {DurationConfig} step\n             * @accepts {String|Number|DurationConfig}\n             */\n            /**\n             * Time increment duration value. Defaults to 5 minutes.\n             * The value is taken to be a string consisting of the numeric magnitude and the units.\n             * The units may be a recognised unit abbreviation of this locale or the full local unit name.\n             * For example `\"10m\"` or `\"5min\"` or `\"2 hours\"`\n             * @config {String}\n             */\n            step : '5m',\n\n            stepTriggers : null,\n\n            /**\n             * Get/set value, which can be a Date or a string. If a string is specified, it will be converted using the\n             * specified {@link #config-format}.\n             * @member {Date} value\n             * @accepts {String|Date}\n             */\n            /**\n             * Value, which can be a Date or a string. If a string is specified, it will be converted using the\n             * specified {@link #config-format}\n             * @config {String|Date}\n             */\n            value : null,\n\n            /**\n             * Set to true to not clean up the date part of the passed value. Set to false to reset the date part to\n             * January 1st\n             * @prp {Boolean}\n             * @default\n             */\n            keepDate : false\n        };\n    }\n\n    //endregion\n\n    //region Init & destroy\n\n    changePicker(picker, oldPicker) {\n        const me = this;\n\n        return TimePicker.reconfigure(oldPicker, picker, {\n            owner : me,\n\n            defaults : {\n                value      : me.value,\n                forElement : me[me.pickerAlignElement],\n                owner      : me,\n                align      : {\n                    anchor : me.overlayAnchor,\n                    target : me[me.pickerAlignElement]\n                },\n\n                onTimeChange({ time }) {\n                    me._isUserAction = true;\n                    me.value = time;\n                    me._isUserAction = false;\n                }\n            }\n        });\n    }\n\n    //endregion\n\n    //region Click listeners\n\n    onBackClick() {\n        const\n            me      = this,\n            { min } = me;\n\n        if (!me.readOnly && me.value) {\n            const newValue = DH.add(me.value, -1 * me.step.magnitude, me.step.unit);\n\n            if (!min || min.getTime() <= newValue) {\n                me._isUserAction = true;\n                me.value = newValue;\n                me._isUserAction = false;\n            }\n        }\n    }\n\n    onForwardClick() {\n        const\n            me      = this,\n            { max } = me;\n\n        if (!me.readOnly && me.value) {\n            const newValue = DH.add(me.value, me.step.magnitude, me.step.unit);\n\n            if (!max || max.getTime() >= newValue) {\n                me._isUserAction = true;\n                me.value = newValue;\n                me._isUserAction = false;\n            }\n        }\n    }\n\n    //endregion\n\n    // region Validation\n\n    get isValid() {\n        const me  = this;\n\n        me.clearError('L{Field.minimumValueViolation}', true);\n        me.clearError('L{Field.maximumValueViolation}', true);\n\n        let value = me.value;\n\n        if (value) {\n            value = value.getTime();\n            if (me._min && me._min.getTime() > value) {\n                me.setError('L{Field.minimumValueViolation}', true);\n                return false;\n            }\n\n            if (me._max && me._max.getTime() < value) {\n                me.setError('L{Field.maximumValueViolation}', true);\n                return false;\n            }\n        }\n\n        return super.isValid;\n    }\n\n    hasChanged(oldValue, newValue) {\n        if (oldValue?.getTime && newValue?.getTime) {\n            // Only care about the time part\n            return oldValue.getHours() !== newValue.getHours() ||\n                oldValue.getMinutes() !== newValue.getMinutes() ||\n                oldValue.getSeconds() !== newValue.getSeconds() ||\n                oldValue.getMilliseconds() !== newValue.getMilliseconds();\n        }\n\n        return super.hasChanged(oldValue, newValue);\n    }\n\n    //endregion\n\n    //region Toggle picker\n\n    /**\n     * Show picker\n     */\n    showPicker() {\n        const\n            me = this,\n            {\n                picker,\n                value\n            }  = me;\n\n        if (me.readOnly) {\n            return;\n        }\n\n        picker.value = value;\n        picker.format = me.format;\n        picker.maxTime = me.max;\n        picker.minTime = me.min;\n\n        // If we had no value initially.\n        if (!value) {\n            me.value = picker.value;\n        }\n\n        super.showPicker(true);\n    }\n\n    onPickerShow() {\n        super.onPickerShow();\n\n        // Remove PickerField key listener\n        this.pickerKeyDownRemover = this.pickerKeyDownRemover?.();\n    }\n\n    /**\n     * Focus time picker\n     */\n    focusPicker() {\n        this.picker.focus();\n    }\n\n    //endregion\n\n    //region Getters/setters\n\n    transformTimeValue(value) {\n        if (value != null) {\n            if (typeof value === 'string') {\n                value = DH.parse(value, this.format);\n\n                if (this.keepDate) {\n                    value = DH.copyTimeValues(new Date(this.value), value);\n                }\n            }\n            else {\n                value = new Date(value);\n            }\n\n            // We insist on a *valid* Time as the value\n            if (DH.isValidDate(value)) {\n                if (!this.keepDate) {\n                    // Clear date part back to zero so that all we have is the time part of the epoch.\n                    return DH.getTime(value);\n                }\n                else {\n                    return value;\n                }\n            }\n        }\n        return null;\n    }\n\n    changeMin(value) {\n        return this.transformTimeValue(value);\n    }\n\n    updateMin(value) {\n        const { input } = this;\n\n        if (input) {\n            if (value == null) {\n                input.removeAttribute('min');\n            }\n            else {\n                input.min = value;\n            }\n        }\n\n        this.syncInvalid();\n    }\n\n    changeMax(value) {\n        return this.transformTimeValue(value);\n    }\n\n    updateMax(value) {\n        const { input } = this;\n\n        if (input) {\n            if (value == null) {\n                input.removeAttribute('max');\n            }\n            else {\n                input.max = value;\n            }\n        }\n\n        this.syncInvalid();\n    }\n\n    changeValue(value, was) {\n        const\n            me = this,\n            newValue = me.transformTimeValue(value);\n\n        // A value we could not parse\n        if (value && !newValue || (me.isRequired && value === '')) {\n            // setError uses localization\n            me.setError('L{invalidTime}');\n            return;\n        }\n\n        me.clearError('L{invalidTime}');\n\n        // Reject non-change\n        if (me.hasChanged(was, newValue)) {\n            return super.changeValue(newValue, was);\n        }\n\n        // But we must fix up the display in case it was an unparseable string\n        // and the value therefore did not change.\n        if (!me.inputting) {\n            me.syncInputFieldValue(true);\n        }\n    }\n\n    updateValue(value, was) {\n        const { expand } = this.triggers;\n\n        // This makes to clock icon show correct time\n        if (expand && value) {\n            expand.element.firstElementChild.style.animationDelay =\n                -((value.getHours() * 60 + value.getMinutes()) / 10) + 's';\n        }\n\n        super.updateValue(value, was);\n    }\n\n    changeStep(value, was) {\n        const type = typeof value;\n\n        if (!value) {\n            return null;\n        }\n\n        if (type === 'number') {\n            value = {\n                magnitude : Math.abs(value),\n                unit      : was ? was.unit : 'hour'\n            };\n        }\n        else if (type === 'string') {\n            value = DH.parseDuration(value);\n        }\n\n        if (value?.unit && value?.magnitude) {\n            if (value.magnitude < 0) {\n                value = {\n                    magnitude : -value.magnitude,  // Math.abs\n                    unit      : value.unit\n                };\n            }\n\n            return value;\n        }\n    }\n\n    updateStep(value) {\n        // If a step is configured, show the steppers\n        this.element.classList[value ? 'remove' : 'add']('b-no-steppers');\n\n        this.syncInvalid();\n    }\n\n    updateFormat() {\n        this.syncInputFieldValue(true);\n    }\n\n    get inputValue() {\n        return DH.format(this.value, this.format);\n    }\n\n    //endregion\n\n    //region Localization\n\n    updateLocalization() {\n        super.updateLocalization();\n        this.syncInputFieldValue(true);\n    }\n\n    //endregion\n}\n\n// Register this widget type with its Factory\nTimeField.initClass();\n","import TextField from './TextField.js';\nimport DateHelper from '../helper/DateHelper.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\nimport Duration from '../data/Duration.js';\n\n/**\n * @module Core/widget/DurationField\n */\n\n/**\n * A specialized field allowing a user to also specify duration unit when editing the duration value.\n *\n * This field can be used as an {@link Grid.column.Column#config-editor editor} for the {@link Grid.column.Column Column}.\n * It is used as the default editor for the `DurationColumn`.\n *\n * @extends Core/widget/TextField\n * @classType durationfield\n * @inlineexample Core/widget/DurationField.js\n * @inputfield\n */\nexport default class DurationField extends TextField {\n    static get $name() {\n        return 'DurationField';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'durationfield';\n    }\n\n    // Factoryable type alias\n    static get alias() {\n        return 'duration';\n    }\n\n    static get defaultConfig() {\n        return {\n            /**\n             * The `value` config may be set in Object form specifying two properties,\n             * `magnitude`, a Number, and `unit`, a String.\n             *\n             * If a String is passed, it is parsed in accordance with current locale rules.\n             * The string is taken to be the numeric magnitude, followed by whitespace, then an abbreviation, or name of\n             * the unit.\n             * @config {DurationConfig|String}\n             * @category Common\n             */\n            value : null,\n\n            /**\n             * Step size for spin button clicks.\n             * @config {Number}\n             * @default\n             * @category Common\n             */\n            step : 1,\n\n            /**\n             * The duration unit to use with the current magnitude value.\n             * @config {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'}\n             * @category Common\n             */\n            unit : null,\n\n            defaultUnit : 'day',\n\n            /**\n             * The duration magnitude to use with the current unit value. Can be either an integer or a float value.\n             * Both \",\" and \".\" are valid decimal separators.\n             * @config {Number}\n             * @category Common\n             */\n            magnitude : null,\n\n            /**\n             * When set to `true` the field will use short names of unit durations\n             * (as returned by {@link Core.helper.DateHelper#function-getShortNameOfUnit-static}) when creating the\n             * input field's display value.\n             * @config {Boolean}\n             * @category Common\n             */\n            useAbbreviation : false,\n\n            /**\n             * Set to `true` to allow negative duration\n             * @config {Boolean}\n             * @category Common\n             */\n            allowNegative : false,\n\n            /**\n             * The number of decimal places to allow. Defaults to no constraint.\n             * @config {Number}\n             * @default\n             * @category Common\n             */\n            decimalPrecision : null,\n\n            triggers : {\n                spin : {\n                    type : 'spintrigger'\n                }\n            },\n\n            nullValue : null\n        };\n    }\n\n    /**\n     * Fired when this field's value changes.\n     * @event change\n     * @param {Core.data.Duration} value - This field's value\n     * @param {Core.data.Duration} oldValue - This field's previous value\n     * @param {Boolean} valid - True if this field is in a valid state.\n     * @param {Event} [event] - The triggering DOM event if any.\n     * @param {Boolean} userAction - Triggered by user taking an action (`true`) or by setting a value (`false`)\n     * @param {Core.widget.DurationField} source - This field\n     */\n\n    /**\n     * User performed default action (typed into this field or hit the triggers).\n     * @event action\n     * @param {Core.data.Duration} value - This field's value\n     * @param {Core.data.Duration} oldValue - This field's previous value\n     * @param {Boolean} valid - True if this field is in a valid state.\n     * @param {Event} [event] - The triggering DOM event if any.\n     * @param {Boolean} userAction - Triggered by user taking an action (`true`) or by setting a value (`false`)\n     * @param {Core.widget.DurationField} source - This field\n     */\n\n    static get configurable() {\n        return {\n            /**\n             * Get/set the min value (e.g. 1d)\n             * @member {String} min\n             * @category Common\n             */\n            /**\n             * Minimum duration value (e.g. 1d)\n             * @config {String}\n             * @category Common\n             */\n            min : null,\n\n            /**\n             * Get/set the max value\n             * @member {String} max (e.g. 10d)\n             * @category Common\n             */\n            /**\n             * Max duration value (e.g. 10d)\n             * @config {String}\n             * @category Common\n             */\n            max : null,\n\n            /**\n             * Get/set the allowed units, e.g. \"day,hour,year\".\n             * @member {String} allowedUnits\n             * @category Common\n             */\n            /**\n             * Comma-separated list of units to allow in this field, e.g. \"day,hour,year\". Leave blank to allow all\n             * valid units (the default)\n             * @config {String}\n             * @category Common\n             */\n            allowedUnits : null\n        };\n    }\n\n    changeMin(value) {\n        return typeof value === 'string' ? new Duration(value) : value;\n    }\n\n    changeMax(value) {\n        return typeof value === 'string' ? new Duration(value) : value;\n    }\n\n    changeAllowedUnits(units) {\n        if (typeof units === 'string') {\n            units = units.split(',');\n        }\n\n        return units;\n    }\n\n    updateAllowedUnits(units) {\n        this.allowedUnitsRe = new RegExp(`(${units.join('|')})`, 'i');\n    }\n\n    get inputValue() {\n        // Do not use the _value property. If called during configuration, this\n        // will import the configured value from the config object.\n        return this.value == null ? '' : this.calcValue(true).toString(this.useAbbreviation);\n    }\n\n    /**\n     * Get/Set duration unit to use with the current magnitude value.\n     * Valid values are:\n     * - \"millisecond\" - Milliseconds\n     * - \"second\" - Seconds\n     * - \"minute\" - Minutes\n     * - \"hour\" - Hours\n     * - \"day\" - Days\n     * - \"week\" - Weeks\n     * - \"month\" - Months\n     * - \"quarter\" - Quarters\n     * - \"year\"- Years\n     *\n     * @property {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'}\n     * @category Common\n     */\n    set unit(unit) {\n        this._unit = unit;\n        this.value = this.calcValue();\n    }\n\n    get unit() {\n        return this._unit;\n    }\n\n    get unitWithDefault() {\n        return this._unit || DurationField.defaultConfig.defaultUnit;\n    }\n\n    /**\n     * Get/Set numeric magnitude `value` to use with the current unit value.\n     * @property {Number}\n     * @category Common\n     */\n    set magnitude(magnitude) {\n        this.clearError('L{invalidUnit}');\n\n        this._magnitude = magnitude;\n        super.value = this.calcValue();\n    }\n\n    get magnitude() {\n        return this._magnitude;\n    }\n\n    roundMagnitude(value) {\n        return value && this.decimalPrecision != null ? ObjectHelper.round(value, this.decimalPrecision) : value;\n    }\n\n    get allowDecimals() {\n        return this.decimalPrecision !== 0;\n    }\n\n    get isValid() {\n        const\n            me      = this,\n            isEmpty = me.value == null || (me.value && me.value.magnitude == null);\n\n        return super.isValid && ((isEmpty && !me.required) || !isEmpty && (me.allowNegative || me.value.magnitude >= 0));\n    }\n\n    internalOnChange(event) {\n        const\n            me     = this,\n            value  = me.value,\n            oldVal = me._lastValue;\n\n        if (me.hasChanged(oldVal, value)) {\n            me._lastValue = value;\n            me.triggerFieldChange({ value, event, userAction : true, valid : me.isValid });\n        }\n    }\n\n    onFocusOut(e) {\n        this.syncInputFieldValue(true);\n\n        this.triggers?.spin?.clickRepeater?.cancel();\n\n        return super.onFocusOut(e);\n    }\n\n    /**\n     * The `value` property may be set in Object form specifying two properties, `magnitude`, a Number, and `unit`, a\n     * String.\n     *\n     * If a Number is passed, the field's current unit is used and just the magnitude is changed.\n     *\n     * If a String is passed, it is parsed in accordance with current locale rules. The string is taken to be the\n     * numeric magnitude, followed by whitespace, then an abbreviation, or name of the unit.\n     *\n     * Upon read, the value is always a {@link Core.data.Duration} object containing `magnitude` and `unit`.\n     *\n     * @property {Core.data.Duration}\n     * @accepts {String|Number|DurationConfig|Core.data.Duration}\n     * @category Common\n     */\n    set value(value) {\n        const\n            me = this;\n        let newMagnitude, newUnit;\n\n        this.clearError('L{invalidUnit}');\n\n        if (typeof value === 'number') {\n            // A number means preserving existing unit value\n            newMagnitude = value;\n            newUnit = me._unit;\n        }\n        else if (typeof value === 'string') {\n            if (/^\\s*$/.test(value)) {\n                // special case of \"empty\" (in user meaning) string - set to `null` to allow unscheduling of tasks\n                newMagnitude = null;\n            }\n            else {\n                // Parse as a string\n                const\n                    parsedDuration = DateHelper.parseDuration(value, me.allowDecimals, me.unitWithDefault);\n\n                if (parsedDuration) {\n                    if (!me.allowedUnitsRe || me.allowedUnitsRe.test(parsedDuration.unit)) {\n                        newUnit = parsedDuration.unit;\n                        newMagnitude = parsedDuration.magnitude;\n                    }\n                    else {\n                        me.setError('L{invalidUnit}');\n                    }\n                }\n            }\n        }\n        else {\n            // Using value object with unit and magnitude\n            if (value && 'unit' in value && 'magnitude' in value) {\n                newUnit = value.unit;\n                newMagnitude = value.magnitude;\n            }\n            else {\n                newUnit = null;\n                newMagnitude = null;\n            }\n        }\n\n        if (me._magnitude !== newMagnitude || me._unit != newUnit) {\n            me._magnitude = newMagnitude;\n\n            // Once we have unit, do not clear it if setting clearing value\n            if (newUnit) {\n                me._unit = newUnit;\n            }\n            super.value = me.calcValue();\n        }\n    }\n\n    okMax(value) {\n        if (typeof value === 'number') {\n            value = new Duration({\n                unit      : this.unitWithDefault,\n                magnitude : value\n            });\n        }\n        return this.max == null || value <= this.max;\n    }\n\n    okMin(value) {\n        if (typeof value === 'number') {\n            value = new Duration({\n                unit      : this.unitWithDefault,\n                magnitude : value\n            });\n        }\n\n        return this.min == null || value >= this.min;\n    }\n\n    get validity() {\n        const\n            value    = this.value,\n            validity = {};\n\n        // Assert range for non-empty fields, empty fields will turn invalid if `required: true`\n        if (value != null) {\n            validity.rangeUnderflow = !this.okMin(value);\n            validity.rangeOverflow  = !this.okMax(value);\n        }\n        validity.valid = !validity.rangeUnderflow && !validity.rangeOverflow;\n\n        return validity;\n    }\n\n    get value() {\n        return super.value;\n    }\n\n    calcValue(round = false) {\n        const\n            me = this;\n\n        if ((!me._unit || me._magnitude == null) && me.clearable) {\n            return null;\n        }\n        else {\n            return new Duration(round ? this.roundMagnitude(me._magnitude) : this._magnitude, me.unitWithDefault);\n        }\n    }\n\n    hasChanged(oldValue, newValue) {\n        return newValue && !oldValue ||\n            !newValue && oldValue ||\n            newValue && oldValue && !oldValue.isEqual(newValue);\n    }\n\n    /**\n     * The `milliseconds` property is a read only property which returns the number of milliseconds in this field's\n     * value\n     * @member {Number} milliseconds\n     * @readonly\n     */\n    get milliseconds() {\n        // For reasons unknown documenting as @property did not work\n\n        return this.value ? this.value.milliseconds : 0;\n    }\n\n    onInternalKeyDown(keyEvent) {\n        if (keyEvent.key === 'ArrowUp') {\n            this.doSpinUp();\n        }\n        else if (keyEvent.key === 'ArrowDown') {\n            this.doSpinDown();\n        }\n    }\n\n    doSpinUp() {\n        const me = this;\n\n        if (me.readOnly) {\n            return;\n        }\n\n        let newValue = (me.magnitude || 0) + me.step;\n\n        me._isUserAction = true;\n\n        if (!me.okMin(newValue)) {\n            newValue = me.min;\n        }\n\n        if (me.okMax(newValue)) {\n            me.value = newValue;\n        }\n\n        me._isUserAction = false;\n    }\n\n    doSpinDown() {\n        const me = this;\n\n        if (me.readOnly) {\n            return;\n        }\n\n        let newValue = (me.magnitude || 0) - me.step;\n\n        if (!me.okMax(newValue)) {\n            newValue = me.max;\n        }\n\n        if (me.okMin(newValue) && (me.allowNegative || (me.magnitude || 0) > 0)) {\n            me._isUserAction = true;\n            me.value         = newValue;\n\n            me._isUserAction = false;\n        }\n    }\n}\n\n// Register this widget type with its Factory\nDurationField.initClass();\n","import Container from './Container.js';\nimport ArrayHelper from '../helper/ArrayHelper.js';\nimport DateHelper from '../helper/DateHelper.js';\nimport './Combo.js';\nimport './Checkbox.js';\nimport './NumberField.js';\nimport './TextField.js';\nimport './DateField.js';\nimport './DurationField.js';\nimport DomClassList from '../helper/util/DomClassList.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\nimport Duration from '../data/Duration.js';\nimport VersionHelper from '../helper/VersionHelper.js';\n\n/**\n * @module Core/widget/FieldFilterPicker\n */\n\nexport const SUPPORTED_FIELD_DATA_TYPES = ['number', 'boolean', 'string', 'date', 'duration'];\n\nexport const isSupportedDurationField = field => field.column?.type === 'duration';\n\nconst EMPTY_STRING = '';\n\n/**\n * A field that is available for selection when defining filters.\n *\n * @typedef {Object} FieldOption\n * @property {'string'|'number'|'date'|'boolean'} type The data type of the values in this field in the data source\n * @property {String} title The human-friendly display name for the field, as might be displayed in a data column header\n */\n\n/**\n * A dictionary of value field placeholder strings, keyed by data type.\n *\n * @typedef {Object} ValueFieldPlaceholders\n * @property {String} string Placeholder text for text value fields\n * @property {String} number Placeholder text for number value fields\n * @property {String} date Placeholder text for date value fields\n * @property {String} list Placeholder text for multi-select list values, e.g. for the 'is one of' operator\n */\n\n/**\n * Widget for defining a {@link Core.util.CollectionFilter} for use in filtering a {@link Core.data.Store}.\n * Filters consist of `property` (the name of the data field whose values are checked), `operator`\n * (the type of comparison to use), and `value` (the pre-defined value against which to compare the\n * data field value during filtering).\n *\n * {@inlineexample Core/widget/FieldFilterPicker.js}\n *\n * For example:\n *\n * ```javascript\n * new FieldFilterPicker({\n *     appendTo : domElement,\n *\n *     fields: [\n *         // Allow filters to be defined against the 'age' and 'role' fields in our data\n *         { name: 'age', text: 'Age', type: 'number' },\n *         { name: 'startDate', text: 'Start Date', type: 'date' },\n *     ],\n *\n *     filter : {\n *         property : 'startDate',\n *         operator : '<',\n *         value    : new Date()\n *     }\n * });\n * ```\n *\n * @extends Core/widget/Container\n * @demo Grid/fieldfilters\n * @classtype fieldfilterpicker\n * @widget\n */\nexport default class FieldFilterPicker extends Container {\n\n    //region Config\n    static get $name() {\n        return 'FieldFilterPicker';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'fieldfilterpicker';\n    }\n\n    static operators = {\n        empty           : { value : 'empty', text : 'L{isEmpty}', argCount : 0 },\n        notEmpty        : { value : 'notEmpty', text : 'L{isNotEmpty}', argCount : 0 },\n        '='             : { value : '=', text : 'L{equals}' },\n        '!='            : { value : '!=', text : 'L{doesNotEqual}' },\n        '>'             : { value : '>', text : 'L{isGreaterThan}' },\n        '<'             : { value : '<', text : 'L{isLessThan}' },\n        '>='            : { value : '>=', text : 'L{isGreaterThanOrEqualTo}' },\n        '<='            : { value : '<=', text : 'L{isLessThanOrEqualTo}' },\n        between         : { value : 'between', text : 'L{isBetween}', argCount : 2 },\n        notBetween      : { value : 'notBetween', text : 'L{isNotBetween}', argCount : 2 },\n        isIncludedIn    : { value : 'isIncludedIn', text : 'L{isOneOf}' },\n        isNotIncludedIn : { value : 'isNotIncludedIn', text : 'L{isNotOneOf}' }\n    };\n\n    static defaultOperators = {\n        string : [\n            // In display order\n            this.operators.empty,\n            this.operators.notEmpty,\n            this.operators['='],\n            this.operators['!='],\n            { value : 'includes', text : 'L{contains}' },\n            { value : 'doesNotInclude', text : 'L{doesNotContain}' },\n            { value : 'startsWith', text : 'L{startsWith}' },\n            { value : 'endsWith', text : 'L{endsWith}' },\n            this.operators.isIncludedIn,\n            this.operators.isNotIncludedIn\n        ],\n        number : [\n            this.operators.empty,\n            this.operators.notEmpty,\n            this.operators['='],\n            this.operators['!='],\n            this.operators['>'],\n            this.operators['<'],\n            this.operators['>='],\n            this.operators['<='],\n            this.operators.between,\n            this.operators.notBetween,\n            this.operators.isIncludedIn,\n            this.operators.isNotIncludedIn\n        ],\n        date : [\n            this.operators.empty,\n            this.operators.notEmpty,\n            this.operators['='],\n            this.operators['!='],\n            { value : '<', text : 'L{isBefore}' },\n            { value : '>', text : 'L{isAfter}' },\n            this.operators.between,\n            { value : 'isToday', text : 'L{isToday}', argCount : 0 },\n            { value : 'isTomorrow', text : 'L{isTomorrow}', argCount : 0 },\n            { value : 'isYesterday', text : 'L{isYesterday}', argCount : 0 },\n            { value : 'isThisWeek', text : 'L{isThisWeek}', argCount : 0 },\n            { value : 'isNextWeek', text : 'L{isNextWeek}', argCount : 0 },\n            { value : 'isLastWeek', text : 'L{isLastWeek}', argCount : 0 },\n            { value : 'isThisMonth', text : 'L{isThisMonth}', argCount : 0 },\n            { value : 'isNextMonth', text : 'L{isNextMonth}', argCount : 0 },\n            { value : 'isLastMonth', text : 'L{isLastMonth}', argCount : 0 },\n            { value : 'isThisYear', text : 'L{isThisYear}', argCount : 0 },\n            { value : 'isNextYear', text : 'L{isNextYear}', argCount : 0 },\n            { value : 'isLastYear', text : 'L{isLastYear}', argCount : 0 },\n            { value : 'isYearToDate', text : 'L{isYearToDate}', argCount : 0 },\n            this.operators.isIncludedIn,\n            this.operators.isNotIncludedIn\n        ],\n        boolean : [\n            { value : 'isTrue', text : 'L{isTrue}', argCount : 0 },\n            { value : 'isFalse', text : 'L{isFalse}', argCount : 0 }\n        ],\n        duration : [\n            this.operators.empty,\n            this.operators.notEmpty,\n            this.operators['='],\n            this.operators['!='],\n            this.operators['>'],\n            this.operators['<'],\n            this.operators['>='],\n            this.operators['<='],\n            this.operators.between,\n            this.operators.notBetween,\n            this.operators.isIncludedIn,\n            this.operators.isNotIncludedIn\n        ],\n        relation : [\n            this.operators.isIncludedIn,\n            this.operators.isNotIncludedIn\n        ]\n    };\n\n    static get defaultValueFieldPlaceholders() {\n        return {\n            string   : 'L{enterAValue}',\n            number   : 'L{enterANumber}',\n            date     : 'L{selectADate}',\n            list     : 'L{selectOneOrMoreValues}',\n            duration : 'L{enterAValue}'\n        };\n    };\n\n    static configurable = {\n        /**\n         * Dictionary of {@link #typedef-FieldOption} representing the fields against which filters can be defined,\n         * keyed by field name.\n         *\n         * If filtering a {@link Grid.view.Grid}, consider using {@link Grid.widget.GridFieldFilterPicker}, which can be configured\n         * with an existing {@link Grid.view.Grid} instead of, or in combination with, defining fields manually.\n         *\n         * Example:\n         * ```javascript\n         * fields: {\n         *     // Allow filters to be defined against the 'age' and 'role' fields in our data\n         *     age  : { text: 'Age', type: 'number' },\n         *     role : { text: 'Role', type: 'string' }\n         * }\n         * ```\n         *\n         * @config {Object<String,FieldOption>}\n         * @deprecated 5.3.0 Syntax accepting FieldOption[] was deprecated in favor of dictionary and will be removed in 6.0\n         */\n        fields : null,\n\n        /**\n         * Make the entire picker disabled.\n         *\n         * @config {Boolean}\n         * @default\n         */\n        disabled : false,\n\n        /**\n         * Make the entire picker read-only.\n         *\n         * @config {Boolean}\n         * @default\n         */\n        readOnly : false,\n\n        layout : 'vbox',\n\n        /**\n         * Make only the property selector readOnly.\n         * @private\n         *\n         * @config {Boolean}\n         * @default\n         */\n        propertyLocked : false,\n\n        /**\n         * Make only the operator selector readOnly.\n         * @private\n         *\n         * @config {Boolean}\n         * @default\n         */\n        operatorLocked : false,\n\n        /**\n         * Configuration object for the {@link Core.util.CollectionFilter} displayed\n         * and editable in this picker.\n         *\n         * Example:\n         *\n         * ```javascript\n         * {\n         *     property: 'age',\n         *     operator: '=',\n         *     value: 25\n         * }\n         * ```\n         *\n         * @config {CollectionFilterConfig}\n         */\n        filter : null,\n\n        /**\n         * Optional configuration for the property selector {@link Core.widget.Combo}.\n         *\n         * @config {ComboConfig}\n         */\n        propertyFieldConfig : null,\n\n        /**\n         * Optional configuration for the operator selector {@link Core.widget.Combo}.\n         *\n         * @config {ComboConfig}\n         * @private\n         */\n        operatorFieldConfig : null,\n\n        /**\n         * Optional CSS class to apply to the value field(s).\n         *\n         * @config {String}\n         * @private\n         */\n        valueFieldCls : null,\n\n        /**\n         * @private\n         */\n        items : {\n            propertyAndOperator : {\n                type   : 'container',\n                layout : 'box',\n                items  : {\n                    propertyPicker : {\n                        type        : 'combo',\n                        items       : {},\n                        cls         : `b-${FieldFilterPicker.type}-property`,\n                        placeholder : 'L{FieldFilterPicker.selectAProperty}'\n                    },\n                    operatorPicker : {\n                        type        : 'combo',\n                        items       : {},\n                        cls         : `b-${FieldFilterPicker.type}-operator`,\n                        placeholder : 'L{FieldFilterPicker.selectAnOperator}'\n                    }\n                }\n            },\n            valueFieldRow : {\n                type  : 'container',\n                cls   : `b-${FieldFilterPicker.type}-values`,\n                items : {}\n            },\n            caseSensitive : {\n                type : 'checkbox',\n                text : 'L{FieldFilterPicker.caseSensitive}',\n                cls  : `b-${FieldFilterPicker.type}-case-sensitive`\n            }\n        },\n\n        /**\n         * Overrides the built-in list of operators that are available for selection. Specify operators as\n         * an object with data types as keys and lists of operators as values, like this:\n         *\n         * ```javascript\n         * operators : {\n         *     string : [\n         *         { value : 'empty', text : 'is empty', argCount : 0 },\n         *         { value : 'notEmpty', text : 'is not empty', argCount : 0 }\n         *     ],\n         *     number : [\n         *         { value : '=', text : 'equals' },\n         *         { value : '!=', text : 'does not equal' }\n         *     ],\n         *     date : [\n         *         { value : '<', text : 'is before' }\n         *     ]\n         * }\n         * ```\n         *\n         * Here `value` is what will be stored in the `operator` field in the filter when selected, `text` is the text\n         * displayed in the Combo for selection, and `argCount` is the number of arguments (comparison values) the\n         * operator requires. The default argCount if not specified is 1.\n         *\n         * @config {Object}\n         */\n        operators : FieldFilterPicker.defaultOperators,\n\n        /**\n         * The date format string used to display dates when using the 'is one of' / 'is not one of' operators with a date\n         * field. Defaults to the current locale's `FieldFilterPicker.dateFormat` value.\n         *\n         * @config {String}\n         * @default\n         */\n        dateFormat : 'L{FieldFilterPicker.dateFormat}',\n\n        /**\n         * Optional {Core.data.Store} against which filters are being defined. This is used to supply options to filter against\n         * when using the 'is one of' and 'is not one of' operators.\n         *\n         * @config {Core.data.Store}\n         */\n        store : null,\n\n        /**\n         * Optional {@link ValueFieldPlaceholders} object specifying custom placeholder text for value input fields.\n         *\n         * @config {ValueFieldPlaceholders}\n         */\n        valueFieldPlaceholders : null,\n\n        /**\n         * Optional function that modifies the configuration of value fields shown for a filter. The default configuration\n         * is received as an argument and the returned value will be used as the final configuration. For example:\n         *\n         * ```javascript\n         * getValueFieldConfig : (filter, fieldConfig) => {\n         *     return {\n         *         ...fieldConfig,\n         *         title : fieldName    // Override the `title` config for the field\n         *     };\n         * }\n         * ```\n         *\n         * The supplied function should accept the following arguments:\n         *\n         * @param {Core.util.CollectionFilter} filter The filter being displayed\n         * @param {ContainerItemConfig} fieldConfig Configuration object for the value field\n         *\n         * @config {Function}\n         */\n        getValueFieldConfig : null\n    };\n\n    //endregion\n\n    // Make lookup of operator arity (arg count) by [fieldType][operator]\n    static buildOperatorArgCountLookup = operators =>\n        ArrayHelper.keyBy(Object.entries(operators),\n            ([fieldType])   => fieldType,\n            ([, operators]) => ArrayHelper.keyBy(operators,\n                ({ value }) => value,\n                ({ argCount }) => argCount === undefined ? 1 : argCount\n            ));\n\n    afterConstruct() {\n        const me = this;\n        if (!me._fields) {\n            throw new Error(`${FieldFilterPicker.name} requires 'fields' to be configured.`);\n        }\n        if (!me._filter) {\n            throw new Error(`${FieldFilterPicker.name} requires 'filter' to be configured.`);\n        }\n        super.afterConstruct();\n        const { widgetMap: { propertyPicker, operatorPicker, caseSensitive } } = me;\n        propertyPicker.ion({ select : 'onPropertySelect', thisObj : me });\n        operatorPicker.ion({ select : 'onOperatorSelect', thisObj : me });\n        caseSensitive.ion({ change : 'onCaseSensitiveChange', thisObj : me });\n        me.propertyFieldConfig && propertyPicker.setConfig(me.propertyFieldConfig);\n        me.operatorFieldConfig && operatorPicker.setConfig(me.operatorFieldConfig);\n        propertyPicker.cls = me.allPropertyPickerClasses;\n        operatorPicker.cls = me.allOperatorPickerClasses;\n        me.populateUIFromFilter();\n    }\n\n    changeDateFormat(dateFormat) {\n        return this.L(dateFormat);\n    }\n\n    get allChildInputs() {\n        const { propertyPicker, operatorPicker, caseSensitive } = this.widgetMap;\n        return [propertyPicker, operatorPicker, ...this.valueFields, caseSensitive];\n    }\n\n    updateDisabled(newDisabled) {\n        this.allChildInputs.forEach(field => field.disabled = newDisabled);\n    }\n\n    updateReadOnly(newReadOnly) {\n        const { propertyPicker, operatorPicker } = this.widgetMap;\n        this.allChildInputs.forEach(field => field.readOnly = newReadOnly);\n        // Respect these individual configs when un-setting global readOnly\n        propertyPicker.readOnly = propertyPicker.readOnly || newReadOnly;\n        operatorPicker.readOnly = operatorPicker.readOnly || newReadOnly;\n    }\n\n    updatePropertyLocked(newPropertyLocked) {\n        this.widgetMap.propertyPicker.readOnly = newPropertyLocked || this.readOnly;\n        this.widgetMap.propertyPicker.cls = this.allPropertyPickerClasses;\n    }\n\n    updateOperatorLocked(newOperatorLocked) {\n        this.widgetMap.operatorPicker.readOnly = newOperatorLocked || this.readOnly;\n        this.widgetMap.operatorPicker.cls = this.allOperatorPickerClasses;\n    }\n\n    changeOperators(newOperators) {\n        const operators = (newOperators ?? FieldFilterPicker.defaultOperators);\n        return Object.keys(operators).reduce((outOperators, dataType) => ({\n            ...outOperators,\n            [dataType] : operators[dataType].map(op => ({ ...op, text : this.L(op.text) }))\n        }), {});\n    }\n\n    changeFields(newFields) {\n        let fields = newFields;\n        if (Array.isArray(newFields)) {\n            VersionHelper.deprecate('Core', '6.0.0', 'FieldOption[] deprecated, use Object<String, FieldOption> keyed by field name instead');\n            // Support old array syntax for `fields` during deprecation\n            fields = ArrayHelper.keyBy(fields, 'name');\n        }\n        return fields;\n    }\n\n    get isMultiSelectValueField() {\n        return ['isIncludedIn', 'isNotIncludedIn'].includes(this._filter?.operator);\n    }\n\n    get allPropertyPickerClasses() {\n        return new DomClassList(`b-${FieldFilterPicker.type}-property`, this.propertyFieldConfig?.cls, {\n            [`b-${FieldFilterPicker.type}-combo-locked`] : this.propertyLocked\n        });\n    }\n\n    get allOperatorPickerClasses() {\n        return new DomClassList(`b-${FieldFilterPicker.type}-operator`, this.operatorFieldConfig?.cls, {\n            [`b-${FieldFilterPicker.type}-combo-locked`] : this.operatorLocked\n        });\n    }\n\n    getValueFieldConfigs() {\n        const\n            me = this,\n            {\n                valueFieldCls,\n                fieldType,\n                _filter: { operator },\n                onValueChange,\n                filterValues,\n                isMultiSelectValueField,\n                operatorArgCount,\n                getValueFieldConfig\n            } = me,\n            valueFieldPlaceholders = ObjectHelper.merge(\n                {},\n                FieldFilterPicker.defaultValueFieldPlaceholders,\n                me.valueFieldPlaceholders\n            );\n\n        if (!fieldType || !operator || operatorArgCount === 0) {\n            return [];\n        }\n\n        let valueFieldCfg = {\n            type      : 'textfield', // replaced as needed below\n            listeners : {\n                change  : onValueChange,\n                input   : onValueChange,\n                thisObj : me\n            },\n            cls     : valueFieldCls,\n            dataset : {\n                type : fieldType\n            },\n            placeholder : me.L(valueFieldPlaceholders[isMultiSelectValueField ? 'list' : fieldType])\n        };\n\n        if (isMultiSelectValueField) {\n            valueFieldCfg = {\n                ...valueFieldCfg,\n                type              : 'combo',\n                multiSelect       : true,\n                createOnUnmatched : true,\n                items             : this.getUniqueDataValues(filterValues),\n                value             : filterValues ?? []\n            };\n        }\n        else if (['number', 'date', 'boolean'].includes(fieldType)) {\n            valueFieldCfg.type = `${fieldType}field`;\n        }\n        else if (fieldType === 'duration') {\n            valueFieldCfg.type = 'durationfield';\n        }\n\n        // Allow client to modify value field config\n        if (getValueFieldConfig) {\n            valueFieldCfg = me.callback(getValueFieldConfig, me, [me.filter, valueFieldCfg]);\n        }\n\n        if (isMultiSelectValueField) {\n            // We only support a single multi-select Combo for now\n            return [valueFieldCfg];\n        }\n\n        return ArrayHelper.populate(operatorArgCount, index => ([{\n            type    : 'widget',\n            tag     : 'div',\n            cls     : `b-${FieldFilterPicker.type}-value-separator`,\n            content : me.L('L{FieldFilterPicker.and}')\n        }, {\n            ...valueFieldCfg,\n            value : filterValues[index]\n        }])).flat().slice(1);\n    }\n\n    /**\n     * Return an array of unique values in the data store for the currently selected field. If no store is\n     * configured or no field is selected, returns an empty array.\n     */\n    getUniqueDataValues(extraValuesToInclude = []) {\n        const\n            me            = this,\n            { fieldType } = me;\n\n        if (!me.store || !me._filter?.property) {\n            return [];\n        }\n\n        const { relatedDisplayField } = me.selectedField;\n        let values,\n            sortedValues;\n\n        if (me.fieldIsRelation) {\n            const { foreignStore } = me.currentPropertyRelationConfig;\n            if (relatedDisplayField) {\n                // Display field specified -- sort by text label;\n                // this bypasses the type-specific sorting for raw data values below\n                values = foreignStore.allRecords.reduce((options, record) => {\n                    if (record.id != null) {\n                        options.push({\n                            text  : record[relatedDisplayField],\n                            value : record.id\n                        });\n                    }\n                    return options;\n                }, []);\n\n                // Currently only support getting text from remote field and sorting as text\n                sortedValues = values.sort((a, b) => me.sortStrings(a.text, b.text));\n            }\n            else {\n                // If no display field, fall back to only data values\n                values = foreignStore.allRecords.map(record => record.id);\n            }\n        }\n        else {\n            // Local data field\n            values = me.store.allRecords.map(record => record[me._filter.property]);\n        }\n\n        if (!sortedValues) {\n            values.push(...extraValuesToInclude);\n            const uniqueValues = ArrayHelper.unique(values.reduce((primitiveValues, value) => {\n                if (value != null && String(value).trim() !== '') {\n                    // Get primitive values from complex types, for deduping\n                    if (fieldType === 'date') {\n                        primitiveValues.push(value.valueOf());\n                    }\n                    else if (fieldType === 'duration') {\n                        primitiveValues.push(value.toString());\n                    }\n                    else {\n                        primitiveValues.push(value);\n                    }\n                }\n                return primitiveValues;\n            }, []));\n\n            // Sort\n            if (fieldType === 'string') {\n                sortedValues = uniqueValues.sort(me.sortStrings);\n            }\n            else if (fieldType === 'duration') {\n                sortedValues = uniqueValues\n                    .map(durationStr => new Duration(durationStr))\n                    .filter(duration => duration.isValid)\n                    .sort(me.sortDurations);\n            }\n            else {\n                sortedValues = uniqueValues.sort(me.sortNumerics);\n            }\n\n            // Provide labels for complex value types\n            if (fieldType === 'date') {\n                sortedValues = sortedValues.map(timestamp => {\n                    const date = new Date(timestamp);\n                    return {\n                        text  : DateHelper.format(date, me.dateFormat),\n                        value : timestamp\n                    };\n                });\n            }\n            else if (fieldType === 'duration') {\n                sortedValues = sortedValues.map(duration => duration.toString());\n            }\n        }\n\n        return sortedValues;\n    }\n\n    sortStrings(a, b) {\n        return (a ?? EMPTY_STRING).localeCompare(b ?? EMPTY_STRING);\n    }\n\n    sortNumerics(a, b) {\n        return a - b;\n    }\n\n    sortDurations(a, b) {\n        return a.valueOf() - b.valueOf();\n    }\n\n    get fieldType() {\n        return this.selectedField?.type;\n    }\n\n    get selectedField() {\n        return this.fields?.[this._filter?.property];\n    }\n\n    get propertyOptions() {\n        return Object.entries(this.fields ?? {})\n            .filter(([, fieldDef]) =>\n                SUPPORTED_FIELD_DATA_TYPES.includes(fieldDef.type) ||\n                isSupportedDurationField(fieldDef)\n            )\n            .map(([fieldName, { title }]) => ({ value : fieldName, text : title ?? fieldName }))\n            .sort((a, b) => a.text.localeCompare(b.text));\n    }\n\n    get operatorOptions() {\n        return this.operators[this.fieldIsRelation ? 'relation' : this.fieldType];\n    }\n\n    get fieldIsRelation() {\n        return Boolean(this.currentPropertyRelationConfig);\n    }\n\n    get currentPropertyRelationConfig() {\n        return this.store?.modelRelations?.find(({ foreignKey }) => foreignKey === this._filter?.property);\n    }\n\n    updateOperators() {\n        delete this._operatorArgCountLookup;\n    }\n\n    /**\n     * @internal\n     */\n    get operatorArgCountLookup() {\n        return this._operatorArgCountLookup ||\n            (this._operatorArgCountLookup = FieldFilterPicker.buildOperatorArgCountLookup(this.operators));\n    }\n\n    updateFilter() {\n        if (this._filter) {\n            this.onFilterChange();\n        }\n    }\n\n    updateStore(newStore) {\n        this._store?.un(this);\n        newStore?.ion({ refresh : 'onStoreRefresh', thisObj : this });\n    }\n\n    onStoreRefresh({ action }) {\n        if (this.isMultiSelectValueField && ['dataset', 'create', 'update', 'delete'].includes(action)) {\n            this.valueFields[0].items = this.getUniqueDataValues(this.filterValues);\n        }\n    }\n\n    refreshValueFields() {\n        const\n            me = this,\n            { valueFieldRow } = me.widgetMap;\n        valueFieldRow.removeAll();\n        valueFieldRow.add(me.getValueFieldConfigs());\n        delete me._valueFields;\n        me.refreshCaseSensitive();\n    }\n\n    refreshCaseSensitive() {\n        const\n            me = this,\n            { fieldType, operatorArgCount, isMultiSelectValueField } = me,\n            operator = me._filter?.operator,\n            { caseSensitive } = me.widgetMap;\n        caseSensitive.hidden =\n            fieldType !== 'string' ||\n            !operator ||\n            isMultiSelectValueField ||\n            operatorArgCount === 0;\n        caseSensitive.checked = me._filter?.caseSensitive !== false;\n    }\n\n    onPropertySelect(event) {\n        const\n            me = this,\n            { _filter } = me;\n        _filter.property = event.record?.data.value || null;\n        if (me.fieldType !== me._fieldType) {\n            _filter.operator = null;\n            _filter.value = null;\n        }\n        me._fieldType = _filter.type = me.fieldType;\n        me.refreshOperatorPicker();\n        me.refreshValueFields();\n        me.triggerChange();\n    }\n\n    onCaseSensitiveChange({ checked }) {\n        this._filter.caseSensitive = checked;\n        this.triggerChange();\n    }\n\n    onOperatorSelect(event) {\n        const\n            me = this,\n            wasMultiSelectValueField = me.isMultiSelectValueField;\n        const prevArgCount = this.operatorArgCount;\n        me._filter.operator = event.record?.data.value || null;\n        if (me.operatorArgCount !== prevArgCount) {\n            me._filter.value = null;\n        }\n        if (me.isMultiSelectValueField && !wasMultiSelectValueField) {\n            me._filter.value = [];\n        }\n        me.refreshValueFields();\n        me.triggerChange();\n    }\n\n    triggerChange() {\n        const { filter, isValid } = this;\n        /**\n         * Fires when the filter is modified.\n         * @event change\n         * @param {Core.widget.FieldFilterPicker} source The FieldFilterPicker instance that fired the event.\n         * @param {Array} filter The {@link Core.util.CollectionFilter} configuration object for the filter represented by this\n         *                       {@link Core.widget.FieldFilterPicker}.\n         * @param {Boolean} isValid Whether the current configuration object represents a complete and valid filter\n         */\n        this.trigger('change', {\n            filter,\n            isValid\n        });\n    }\n\n    onValueChange() {\n        const\n            me = this,\n            { isMultiSelectValueField, fieldType, _filter } = me,\n            values = this.valueFields.map(field => field.value);\n        if (isMultiSelectValueField && fieldType === 'date') {\n            _filter.value = values[0].map(timestamp => new Date(timestamp));\n        }\n        else if (isMultiSelectValueField && fieldType === 'duration') {\n            _filter.value = values[0].map(durationStr => new Duration(durationStr));\n        }\n        else {\n            // Treat end date as inclusive by setting time to end of day\n            if (fieldType === 'date' && _filter.operator === 'between' && DateHelper.isValidDate(values[1])) {\n                values[1].setHours(23, 59, 59, 999);\n            }\n            _filter.value = values.length === 1 ? values[0] : values;\n        }\n        me.triggerChange();\n    }\n\n    refreshOperatorPicker() {\n        const\n            { operatorPicker } = this.widgetMap,\n            { _filter: { operator, property }, operatorOptions } = this;\n        operatorPicker.items = operatorOptions;\n        operatorPicker.value = operator;\n        operatorPicker.hidden = property === null;\n    }\n\n    populateUIFromFilter(forceRefreshValueFields = false) {\n        const\n            me = this,\n            {\n                filterValues,\n                widgetMap: { propertyPicker, operatorPicker },\n                _filter: { property, operator, disabled },\n                propertyOptions,\n                operatorOptions,\n                isMultiSelectValueField\n            } = me;\n        propertyPicker.items = propertyOptions;\n        operatorPicker.items = operatorOptions;\n        operatorPicker.hidden = property === null;\n        let refreshValueFields = forceRefreshValueFields;\n        if (propertyPicker.value !== property) {\n            propertyPicker.value = property;\n            me.refreshOperatorPicker();\n            refreshValueFields = true;\n        }\n        if (operatorPicker.value !== operator) {\n            if (operator === null) {\n                operatorPicker.clear();\n            }\n            else {\n                operatorPicker.value = operator;\n            }\n            refreshValueFields = true;\n        }\n        if (refreshValueFields) {\n            me.refreshValueFields();\n        }\n        me.refreshCaseSensitive();\n        me.valueFields.forEach((valueField, fieldIndex) => {\n            if (isMultiSelectValueField && (valueField.value.length > 0 || filterValues.length > 0)) {\n                if (me.fieldType === 'date') {\n                    valueField.value = filterValues.map(date => date?.valueOf());\n                }\n                else if (me.fieldType === 'duration') {\n                    valueField.value = filterValues.map(duration => duration?.toString());\n                }\n                else {\n                    valueField.value = filterValues;\n                }\n            }\n            else if (fieldIndex >= filterValues.length) {\n                valueField.clear();\n            }\n            else {\n                valueField.value = filterValues[fieldIndex];\n            }\n        });\n        // Grey out all inputs if filter is disabled\n        me.allChildInputs.forEach(widget => widget.disabled = me.disabled || disabled);\n    }\n\n    get valueFields() {\n        return this._valueFields ||\n            (this._valueFields = this.widgetMap.valueFieldRow.queryAll(\n                w => ['textfield', 'datefield', 'numberfield', 'durationfield', 'combo'].includes(w.type)));\n    }\n\n    get filterValues() {\n        if (this._filter?.value == null) {\n            return [];\n        }\n        return ArrayHelper.asArray(this._filter.value);\n    }\n\n    // Must be called manually when filter modified externally\n    onFilterChange() {\n        const\n            me = this,\n            newFieldType = me.fieldType,\n            forceRefreshValueFields = newFieldType !== me._fieldType;\n        me._fieldType = me._filter.type = newFieldType;\n        me.populateUIFromFilter(forceRefreshValueFields);\n    }\n\n    get operatorArgCount() {\n        const { fieldType, filter: { operator }, operatorArgCountLookup } = this;\n        return (fieldType && operator) ? operatorArgCountLookup[fieldType][operator] : 1;\n    }\n\n    get isValid() {\n        const\n            me = this,\n            { filter, fieldType, filterValues, isMultiSelectValueField, operatorArgCount } = me,\n            { operator } = filter,\n            missingValue = operatorArgCount > 0 && filter?.value == null;\n        return (\n            // fieldType here validates that we have a matching field\n            fieldType &&\n            operator &&\n            !missingValue &&\n            (\n                (isMultiSelectValueField && filterValues.length > 0) ||\n                (filterValues.length === operatorArgCount)\n            ) &&\n            filterValues.every(value => value != null &&\n                (fieldType !== 'duration' || value.isValid))\n        );\n    }\n}\n\nFieldFilterPicker.initClass();\n","import Widget from './Widget.js';\n\nexport default class Label extends Widget {\n    static $name = 'Label';\n    static type = 'label';\n\n    static configurable = {\n        text : null,\n\n        localizableProperties : ['text']\n    }\n\n    compose() {\n        const { text, html } = this;\n\n        return {\n            tag : 'label',\n            text,\n            html\n        };\n    }\n}\n\nLabel.initClass();\n","import './Checkbox.js';\nimport Container from './Container.js';\nimport './Label.js';\nimport './FieldFilterPicker.js';\n\n/**\n * @module Core/widget/FieldFilterPickerGroup\n */\n\n/**\n * A set of {@link Core.widget.FieldFilterPicker}s, representing an array\n * of {@link Core.util.CollectionFilter}s. The filters are provided to the\n * picker as an array of filter configuration objects.\n *\n * {@inlineexample Core/widget/FieldFilterPickerGroup.js}\n *\n * When {@link #config-store} is provided in the configuration, the picker group will\n * read filters from the store and monitor for filter changes, and reflect any changes. It is\n * possible to synchronize multiple {@link Core.widget.FieldFilterPickerGroup}s by configuring\n * them with the same store.\n *\n * Does not support modifying filters defined as custom functions.\n *\n * @classtype fieldfilterpickergroup\n * @extends Core/widget/Container\n * @widget\n */\nexport default class FieldFilterPickerGroup extends Container {\n    //region Config\n    static get $name() {\n        return 'FieldFilterPickerGroup';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'fieldfilterpickergroup';\n    }\n\n    /**\n     * @private\n     */\n    static addFilterButtonDefaultText = 'L{FieldFilterPickerGroup.addFilter}';\n\n    static configurable = {\n        /**\n         * Array of {@link Core.util.CollectionFilter} configuration objects. One\n         * {@link Core.widget.FieldFilterPicker} will be created\n         * for each object in the array.\n         *\n         * When {@link #config-store} is provided, any filters in the store will\n         * be automatically added and do not need to be provided explicitly.\n         *\n         * Example:\n         * ```javascript\n         * filters: [{\n         *     // Filter properties should exist among field names configured\n         *     // via `fields` or `store`\n         *     property: 'age',\n         *     operator: '<',\n         *     value: 30\n         * },{\n         *     property: 'title',\n         *     operator: 'startsWith',\n         *     value: 'Director'\n         * }]\n         * ```\n         *\n         * @config\n         * @type {CollectionFilterConfig[]}\n         */\n        filters : [],\n\n        /**\n         * Dictionary of {@link Core.widget.FieldFilterPicker#typedef-FieldOption} representing the fields against which filters can be defined,\n         * keyed by field name.\n         *\n         * If filtering a {@link Grid.view.Grid}, consider using {@link Grid.widget.GridFieldFilterPicker}, which can be configured\n         * with an existing {@link Grid.view.Grid} instead of, or in combination with, defining fields manually.\n         *\n         * Example:\n         * ```javascript\n         * fields: {\n         *     // Allow filters to be defined against the 'age' and 'role' fields in our data\n         *     age  : { text: 'Age', type: 'number' },\n         *     role : { text: 'Role', type: 'string' }\n         * }\n         * ```\n         *\n         * @config {Object<String,FieldOption>}\n         * @deprecated 5.3.0 Syntax accepting FieldOptions[] was deprecated in favor of dictionary and will be removed in 6.0\n         */\n        fields : null,\n\n        /**\n         * Whether the picker group is disabled.\n         *\n         * @config {Boolean}\n         * @default\n         */\n        disabled : false,\n\n        /**\n         * Whether the picker group is read-only.\n         *\n         * Example:\n         * fields: [\n         *    { name: 'age', type: 'number' },\n         *    { name: 'title', type: 'string' }\n         * ]\n         *\n         * @config {Boolean}\n         * @default\n         */\n        readOnly : false,\n\n        layout : 'vbox',\n\n        /**\n         * The {@link Core.data.Store} whose records will be filtered. The store's {@link Core.data.Store#property-modelClass}\n         * will be used to determine field types.\n         *\n         * This store will be kept in sync with the filters defined in the picker group, and new filters added to the store\n         * via other means will appear in this filter group when they are able to be modified by it. (Some types of filters,\n         * like arbitrary filter functions, cannot be managed through this widget.)\n         *\n         * As a corollary, multiple `FieldFilterPickerGroup`s configured with the same store will stay in sync, showing the\n         * same filters as the store's filters change.\n         *\n         * @config {Core.data.Store}\n         */\n        store : null,\n\n        /**\n         * When `limitToProperty` is set to the name of an available field (as specified either\n         * explicitly in {@link #config-fields} or implicitly in the\n         * {@link #config-store}'s model), it has the following effects:\n         *\n         * - the picker group will only show filters defined on the specified property\n         * - it will automatically set the `property` to the specified property for all newly added\n         *   filters where the property is not already set\n         * - the property selector is made read-only\n         *\n         * @config {String}\n         */\n        limitToProperty : null,\n\n        /**\n         * Optional CSS class to apply to the value field(s).\n         *\n         * @config {String}\n         * @private\n         */\n        valueFieldCls : null,\n\n        /**\n         * Show a button at the bottom of the group that adds a new, blank filter to the group.\n         *\n         * @config {Boolean}\n         * @default\n         */\n        showAddFilterButton : true,\n\n        /**\n         * Optional predicate that returns whether a given filter can be deleted. When `canDeleteFilter` is provided,\n         * it will be called for each filter and will not show the delete button for those for which the\n         * function returns false.\n         *\n         * @config {Function}\n         */\n        canDeleteFilter : null,\n\n        /**\n         * Optional function that returns {@link Core.widget.FieldFilterPicker} configuration properties for\n         * a given filter. When `getFieldFilterPickerConfig` is provided, it will be called for each filter and the returned\n         * object will be merged with the configuration properties for the individual\n         * {@link Core.widget.FieldFilterPicker} representing that filter.\n         *\n         * The supplied function should accept a single argument, the {@link Core.util.CollectionFilter} whose picker\n         * is being created.\n         *\n         * @config {Function}\n         */\n        getFieldFilterPickerConfig : null,\n\n        /**\n         * Optional predicate that returns whether a given filter can be managed by this widget. When `canManageFilter`\n         * is provided, it will be used to decide whether to display filters found in the configured\n         * {@link #config-store}.\n         *\n         * @config {Function}\n         */\n        canManageFilter : null,\n\n        /**\n         * Sets the text displayed in the 'add filter' button if one is present.\n         *\n         * @config {String}\n         */\n        addFilterButtonText : null,\n\n        /**\n         * @private\n         */\n        items : {\n            pickers : {\n                type       : 'container',\n                layout     : 'vbox',\n                scrollable : true,\n                items      : {}\n            },\n            addFilterButton : {\n                type   : 'button',\n                text   : FieldFilterPickerGroup.addFilterButtonDefaultText,\n                cls    : `b-${FieldFilterPickerGroup.type}-add-button`,\n                hidden : true\n            }\n        },\n\n        /**\n         * When specified, overrides the built-in list of available operators. See\n         * {@link Core.widget.FieldFilterPicker#config-operators}.\n         *\n         * @config {Object}\n         */\n        operators : null,\n\n        /**\n         * The date format string used to display dates when using the 'is one of' / 'is not one of' operators with a date\n         * field. Defaults to the current locale's `FieldFilterPicker.dateFormat` value.\n         *\n         * @config {String}\n         * @default\n         */\n        dateFormat : 'L{FieldFilterPicker.dateFormat}'\n    };\n\n    // endregion\n\n    static childPickerType = 'fieldfilterpicker';\n\n    afterConstruct() {\n        const me = this;\n        me.validateConfig();\n        const { addFilterButton } = me.widgetMap;\n        addFilterButton.ion({ click : 'addFilter', thisObj : me });\n        // TODO not sure why we have to do this. Not doing L() in the static initializer because then the localization sanity test\n        // doesn't find it\n        addFilterButton.text = me.L(addFilterButton.text);\n        me.store && me.updateStore(me.store);\n        super.afterConstruct();\n    }\n\n    changeDateFormat(dateFormat) {\n        return this.L(dateFormat);\n    }\n\n    validateConfig() {\n        if (!this.fields && !this.store) {\n            throw new Error(\n                `FieldFilterPickerGroup requires either a 'fields' or 'store' config property.`\n            );\n        }\n    }\n\n    /**\n     * @private\n     */\n    get someFiltersNotShown() {\n        return this.store && this.store.filters.count > this.filters.length;\n    }\n\n    updateFields(newFields) {\n        this.widgetMap.pickers.childItems.forEach(picker => picker.fields = newFields);\n    }\n\n    updateFilters(newFilters, oldFilters) {\n        const me = this;\n        if (oldFilters) {\n            oldFilters\n                .filter(filter => !newFilters.find(newFilter => newFilter.id === filter.id))\n                .forEach(filter => me.store?.removeFilter(filter.id));\n        }\n        newFilters.forEach(filter => filter.id = filter.id || me.nextFilterId);\n        me.widgetMap.pickers.items = newFilters?.map(filter => me.getPickerRowConfig(filter)) || [];\n    }\n\n    changeFilters(newFilters) {\n        const { canManageFilter } = this;\n        return (newFilters && canManageFilter)\n            ? newFilters.filter(filter => this.callback(canManageFilter, this, [filter]))\n            : newFilters;\n    }\n\n    updateStore(newStore) {\n        const me = this;\n        me.detachListeners('store');\n        if (newStore) {\n            // Make sure the store has all of our configured filters\n            me.widgetMap.pickers.childItems.forEach(({ widgetMap: { filterPicker: { filter, isValid } } }) => {\n                newStore.removeFilter(filter.id, true);\n                if (isValid) {\n                    newStore.addFilter(filter, true);\n                }\n            });\n            newStore.filter();\n            me.appendFiltersFromStore();\n            newStore.ion({\n                name    : 'store',\n                filter  : 'onStoreFilter',\n                thisObj : me\n            });\n        }\n        me.widgetMap.pickers.childItems.forEach(picker => picker.store = newStore);\n    }\n\n    updateShowAddFilterButton(newShow) {\n        this.widgetMap.addFilterButton.hidden = !newShow;\n    }\n\n    updateAddFilterButtonText(newText) {\n        this.widgetMap.addFilterButton.text = newText ?? FieldFilterPickerGroup.addFilterButtonDefaultText;\n    }\n\n    /**\n     * Find any filters the store has that we don't know about yet, and add to our list\n     * @private\n     */\n    appendFiltersFromStore() {\n        const\n            me = this;\n        me.store.filters.forEach(filter => {\n            const\n                canManage = me.canManage(filter),\n                { property, operator, value, id, disabled = false, caseSensitive } = filter;\n            if (canManage && property && operator &&\n                !me.filters?.find(filter => filter.id === id)\n            ) {\n                me.appendFilter({\n                    id,\n                    property,\n                    operator,\n                    value,\n                    disabled,\n                    caseSensitive\n                });\n            }\n        });\n    }\n\n    /**\n     * @private\n     */\n    canManage(filter) {\n        const me = this;\n        return !me.canManageFilter || (me.callback(me.canManageFilter, me, [filter]) === true);\n    }\n\n    /**\n     * Get the configuration object for one child FieldFilterPicker.\n     * @param {Core.util.CollectionFilter} filter The filter represented by the child FieldFilterPicker\n     * @returns {Object} The FieldFilterPicker configuration\n     */\n    getFilterPickerConfig(filter) {\n        const\n            me = this,\n            {\n                fields, store, disabled, readOnly, valueFieldCls, operators, limitToProperty, dateFormat,\n                getFieldFilterPickerConfig\n            } = me;\n        return {\n            type              : me.constructor.childPickerType,\n            fields            : fields ?? me.getFieldsFromStore(store),\n            filter,\n            store,\n            disabled,\n            readOnly,\n            propertyLocked    : Boolean(limitToProperty),\n            valueFieldCls,\n            operators,\n            dateFormat,\n            internalListeners : {\n                change  : 'onFilterPickerChange',\n                thisObj : me\n            },\n            flex : 1,\n            ...(getFieldFilterPickerConfig ? me.callback(getFieldFilterPickerConfig, me, [filter]) : undefined)\n        };\n    }\n\n    /**\n     * Get store fields as {@link Core.widget.FieldFilterPicker#typedef-FieldOption}s in a dictionary keyed by name.\n     * @private\n     */\n    getFieldsFromStore(store) {\n        return Object.fromEntries(store.fields?.map(({ name, type }) => [name, { type }]) ?? []);\n    }\n\n    getPickerRowConfig(filter) {\n        const\n            me = this,\n            { disabled, readOnly, canDeleteFilter } = me;\n        return {\n            type        : 'container',\n            layout      : 'box',\n            layoutStyle : {\n                alignItems : 'start'\n            },\n            cls     : `b-${FieldFilterPickerGroup.type}-row`,\n            dataset : {\n                separatorText : me.L('L{FieldFilterPicker.and}')\n            },\n            items : {\n                activeCheckbox : {\n                    type      : 'checkbox',\n                    disabled,\n                    readOnly,\n                    checked   : !Boolean(filter.disabled),\n                    listeners : {\n                        change  : 'onFilterActiveChange',\n                        thisObj : me\n                    },\n                    cls : `b-${FieldFilterPickerGroup.type}-filter-active`\n                },\n                filterPicker : me.getFilterPickerConfig(filter),\n                removeButton : {\n                    type              : 'button',\n                    ref               : 'removeButton',\n                    disabled,\n                    readOnly,\n                    hidden            : canDeleteFilter && (me.callback(canDeleteFilter, me, [filter]) === false),\n                    cls               : `b-transparent b-${FieldFilterPickerGroup.type}-remove`,\n                    icon              : 'b-fa-trash',\n                    internalListeners : {\n                        click   : 'removeFilter',\n                        thisObj : me\n                    }\n                }\n            }\n        };\n    }\n\n    get allInputs() {\n        const childInputTypes = [this.constructor.childPickerType, 'button', 'checkbox'];\n        return this.queryAll(w => childInputTypes.includes(w.type));\n    }\n\n    updateDisabled(newDisabled) {\n        this.allInputs.forEach(input => input.disabled = newDisabled);\n    }\n\n    updateReadOnly(newReadOnly) {\n        this.allInputs.forEach(input => input.readOnly = newReadOnly);\n    }\n\n    onFilterActiveChange({ source, checked }) {\n        const\n            me = this,\n            filterIndex = me.getFilterIndex(source),\n            filter = me.filters[filterIndex],\n            filterPicker = me.getFilterPicker(filterIndex);\n        filter.disabled = !checked;\n        filterPicker.onFilterChange();\n        if (me.store && filterPicker.isValid) {\n            me.store.addFilter(filter, true);\n        }\n        me.updateStoreFilter();\n        me.triggerChange();\n    }\n\n    onFilterPickerChange({ source, filter, isValid }) {\n        const\n            me = this,\n            { store } = me,\n            filterIndex = me.getFilterIndex(source);\n        if (store) {\n            store.removeFilter(filter.id, true);\n            if (isValid) {\n                store.addFilter(filter, true);\n            }\n            me.updateStoreFilter();\n        }\n        Object.assign(me.filters[filterIndex], filter);\n        me.triggerChange();\n    }\n\n    getFilterIndex(eventSource) {\n        return this.widgetMap.pickers.childItems.indexOf(\n            eventSource.containingWidget\n        );\n    }\n\n    getPickerRow(index) {\n        return this.widgetMap.pickers.childItems[index];\n    }\n\n    /**\n     * Return the {@link Core.widget.FieldFilterPicker} for the filter at the specified index.\n     * @param {Number} filterIndex\n     * @returns {Core.widget.FieldFilterPicker}\n     */\n    getFilterPicker(filterIndex) {\n        return this.getPickerRow(filterIndex).widgetMap.filterPicker;\n    }\n\n    get nextFilterId() {\n        this._nextId = (this._nextId || 0) + 1;\n        return `${this.id}-filter-${this._nextId}`;\n    }\n\n    removeFilter({ source }) {\n        const\n            me = this,\n            filterIndex = me.getFilterIndex(source),\n            filter = me.filters[filterIndex],\n            pickerRow = me.getPickerRow(filterIndex),\n            // TODO Would like a better solution than this. Setting focus to any other element in the group\n            // to prevent a containing popup from closing due to focusOut (in the Grid Filter feature)\n            newFocusWidget = me.query(w => w.isFocusable && w.type !== 'container' && !pickerRow.contains(w));\n\n        if (newFocusWidget) {\n            newFocusWidget.focus();\n        }\n        me.removeFilterAt(filterIndex);\n        if (me.store) {\n            me.store.removeFilter(filter.id, true);\n            me.updateStoreFilter();\n        }\n        me.trigger('remove', { filter });\n        me.triggerChange();\n    }\n\n    /**\n     * Appends a filter at the bottom of the list\n     * @param {CollectionFilterConfig} [filter={}] Configuration object for the {@link Core.util.CollectionFilter} to\n     * add. Defaults to an empty filter.\n     */\n    addFilter({ property = null, operator = null, value = null } = {}) {\n        const\n            me = this,\n            { filters } = me,\n            newFilter = {\n                property      : me.limitToProperty || property,\n                operator,\n                value,\n                disabled      : false,\n                id            : me.nextFilterId,\n                caseSensitive : false\n            };\n        me.appendFilter(newFilter);\n        if (me.getFilterPicker(filters.length - 1).isValid) {\n            me.store?.addFilter(newFilter, true);\n            me.store && me.updateStoreFilter();\n        }\n        me.trigger('add', { filter : newFilter });\n        me.triggerChange();\n    }\n\n    /**\n     * @private\n     */\n    appendFilter(filter) {\n        const me = this;\n        if (!me.limitToProperty || filter.property === me.limitToProperty) {\n            me.filters.push(filter);\n            me.widgetMap.pickers.add(\n                me.getPickerRowConfig(filter, me.filters.length - 1)\n            );\n        }\n    }\n\n    onStoreFilter(event) {\n        const me = this;\n        if (me._isUpdatingStore) {\n            return;\n        }\n        const\n            { filters } = event,\n            storeFiltersById = filters.values.reduce((byId, filter) =>\n                ({ ...byId, [filter.id] : filter }), {});\n        for (\n            let filterIndex = me.filters.length - 1;\n            filterIndex >= 0;\n            filterIndex--\n        ) {\n            const\n                filter = me.filters[filterIndex],\n                storeFilter = storeFiltersById[filter.id],\n                filterRow = me.getPickerRow(filterIndex);\n            if (filterRow) {\n                const { filterPicker, activeCheckbox } = filterRow.widgetMap;\n                if (!storeFilter && filterPicker.isValid) {\n                    me.removeFilterAt(filterIndex);\n                }\n                else if (storeFilter !== undefined) {\n                    const\n                        { operator, value, property, disabled, caseSensitive } = storeFilter;\n                    if (filter !== storeFilter) {\n                        Object.assign(filter, { operator, value, property, disabled, caseSensitive });\n                    }\n                    filterPicker.filter = filter;\n                    filterPicker.onFilterChange();\n                    activeCheckbox.checked = !disabled;\n                }\n            }\n        }\n        me.appendFiltersFromStore();\n        me.triggerChange();\n    }\n\n    /**\n     * Remove the filter at the given index.\n     * @param {Number} filterIndex The index of the filter to remove\n     */\n    removeFilterAt(filterIndex) {\n        const { widgetMap: { pickers }, filters } = this;\n        pickers.remove(pickers.childItems[filterIndex]);\n        filters.splice(filterIndex, 1);\n        this.triggerChange();\n    }\n\n    /**\n     * Trigger a store re-filter after filters have been silently modified.\n     * @private\n     */\n    updateStoreFilter() {\n        this._isUpdatingStore = true;\n        this.store.filter();\n        this._isUpdatingStore = false;\n    }\n\n    /**\n     * Returns the array of filter configuration objects currently represented by this picker group.\n     * @type {CollectionFilterConfig[]}\n     */\n    get value() {\n        return this.filters;\n    }\n\n    triggerChange() {\n        /**\n         * Fires when any filter in the group is added, removed, or modified.\n         * @event change\n         * @param {Core.widget.FieldFilterPickerGroup} source The FieldFilterPickerGroup instance that fired the event.\n         * @param {CollectionFilterConfig[]} filters The array of {@link Core.util.CollectionFilter} configuration\n         * objects currently represented by the FieldFilterPickerGroup.\n         */\n        this.trigger('change', {\n            filters : this.value\n        });\n    }\n\n    /**\n     * Sets all current filters to enabled and checks their checkboxes.\n     */\n    activateAll() {\n        this.setAllActiveStatus(true);\n    }\n\n    /**\n     * Sets all current filters to disabled and clears their checkboxes.\n     */\n    deactivateAll() {\n        this.setAllActiveStatus(false);\n    }\n\n    /**\n     * @private\n     */\n    setAllActiveStatus(newActive) {\n        const\n            me = this,\n            { _filters, store } = me;\n        _filters.forEach((filter, filterIndex) => {\n            // Only do anything if status is changing\n            if (newActive === filter.disabled) {\n                const { filterPicker, activeCheckbox } = me.getPickerRow(filterIndex).widgetMap;\n                filter.disabled = !newActive;\n                filterPicker.onFilterChange();\n                activeCheckbox.checked = newActive;\n                if (newActive && store && filterPicker.isValid) {\n                    store.addFilter(filter, true);\n                }\n            }\n        });\n        me.updateStoreFilter();\n    }\n\n}\n\nFieldFilterPickerGroup.initClass();\n","import Popup from './Popup.js';\nimport './Button.js';\nimport './TextField.js';\nimport Widget from './Widget.js';\nimport BrowserHelper from '../helper/BrowserHelper.js';\nimport DomHelper from '../helper/DomHelper.js';\n\n/**\n * @module Core/widget/MessageDialog\n */\n\nconst items = [\n    {\n        ref     : 'cancelButton',\n        cls     : 'b-messagedialog-cancelbutton b-gray',\n        text    : 'L{Object.Cancel}',\n        onClick : 'up.onCancelClick'\n    },\n    {\n        ref     : 'okButton',\n        cls     : 'b-messagedialog-okbutton b-raised b-blue',\n        text    : 'L{Object.Ok}',\n        onClick : 'up.onOkClick'\n    }\n];\n\n// Windows has OK button to the left, Mac / Ubuntu to the right\nif (BrowserHelper.isWindows) {\n    items.reverse();\n}\n\nclass MessageDialogConstructor extends Popup {\n\n    static get $name() {\n        return 'MessageDialog';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'messagedialog';\n    }\n\n    static get configurable() {\n        return {\n            centered    : true,\n            modal       : true,\n            hidden      : true,\n            autoShow    : false,\n            closeAction : 'hide',\n            title       : '\\xa0',\n\n            lazyItems : {\n                $config : ['lazy'],\n                value   : [{\n                    cls : 'b-messagedialog-message',\n                    ref : 'message'\n                }, {\n                    type : 'textfield',\n                    cls  : 'b-messagedialog-input',\n                    ref  : 'input'\n                }]\n            },\n\n            showClass : null,\n\n            bbar : {\n                overflow : null,\n                items\n            }\n        };\n    }\n\n    construct() {\n        /**\n         * The enum value for the OK button\n         * @member {Number} okButton\n         * @readOnly\n         */\n        this.okButton = this.yesButton = 1;\n\n        /**\n         * The enum value for the Cancel button\n         * @member {Number} cancelButton\n         * @readOnly\n         */\n        this.cancelButton = 3;\n\n        super.construct(...arguments);\n    }\n\n    // Protect from queryAll -> destroy\n    destroy() {}\n\n    /**\n     * Shows a confirm dialog with \"Ok\" and \"Cancel\" buttons. The returned promise resolves passing the button identifier\n     * of the button that was pressed ({@link #property-okButton} or {@link #property-cancelButton}).\n     * @function confirm\n     * @param {Object} options An options object for what to show.\n     * @param {String} [options.title] The title to show in the dialog header.\n     * @param {String} [options.message] The message to show in the dialog body.\n     * @param {String} [options.rootElement] The root element of this widget, defaults to document.body. Use this\n     * if you use the MessageDialog inside a web component ShadowRoot\n     * @param {String|ButtonConfig} [options.cancelButton] A text or a config object to apply to the Cancel button.\n     * @param {String|ButtonConfig} [options.okButton] A text or config object to apply to the OK button.\n     * @returns {Promise} A promise which is resolved when the dialog is closed\n     */\n    async confirm() {\n        return this.showDialog('confirm', ...arguments);\n    }\n\n    /**\n     * Shows an alert popup with a message. The returned promise resolves when the button is clicked.\n     * @function alert\n     * @param {Object} options An options object for what to show.\n     * @param {String} [options.title] The title to show in the dialog header.\n     * @param {String} [options.message] The message to show in the dialog body.\n     * @param {String} [options.rootElement] The root element of this widget, defaults to document.body. Use this\n     * if you use the MessageDialog inside a web component ShadowRoot\n     * @param {String|ButtonConfig} [options.okButton] A text or config object to apply to the OK button.\n     * @returns {Promise} A promise which is resolved when the dialog is closed\n     */\n    async alert() {\n        return this.showDialog('alert', ...arguments);\n    }\n\n    /**\n     * Shows a popup with a basic {@link Core.widget.TextField} along with a message. The returned promise resolves when\n     * the dialog is closed and yields an Object with a `button` ({@link #property-okButton} or {@link #property-cancelButton})\n     * and a `text` property with the text the user provided\n     * @function prompt\n     * @param {Object} options An options object for what to show.\n     * @param {String} [options.title] The title to show in the dialog header.\n     * @param {String} [options.message] The message to show in the dialog body.\n     * @param {String} [options.rootElement] The root element of this widget, defaults to document.body. Use this\n     * if you use the MessageDialog inside a web component ShadowRoot\n     * @param {TextFieldConfig} [options.textField] A config object to apply to the TextField.\n     * @param {String|ButtonConfig} [options.cancelButton] A text or a config object to apply to the Cancel button.\n     * @param {String|ButtonConfig} [options.okButton] A text or config object to apply to the OK button.\n     * @returns {Promise} A promise which is resolved when the dialog is closed. The promise yields an Object with\n     * a `button` ({@link #property-okButton} or {@link #property-cancelButton}) and a `text` property with the text the\n     * user provided\n     */\n    async prompt({\n        textField\n    }) {\n        const field = this.widgetMap.input;\n\n        Widget.reconfigure(field, textField);\n        field.value = '';\n\n        return this.showDialog('prompt', ...arguments);\n    }\n\n    showDialog(mode, {\n        message = '',\n        title = '\\xa0',\n        cancelButton,\n        okButton,\n        rootElement = document.body\n    }) {\n        const me = this;\n\n        me.rootElement = rootElement;\n\n        // Ensure our child items are instanced\n        me.getConfig('lazyItems');\n\n        me.title                  = me.optionalL(title);\n        me.widgetMap.message.html = me.optionalL(message);\n        me.showClass              = `b-messagedialog-${mode}`;\n\n        // Normalize string input to config object\n        if (okButton) {\n            okButton = typeof okButton === 'string' ? { text : okButton } : okButton;\n        }\n\n        if (cancelButton) {\n            cancelButton = typeof cancelButton === 'string' ? { text : cancelButton } : cancelButton;\n        }\n\n        // Ensure default configs are applied\n        okButton = Object.assign({}, me.widgetMap.okButton.initialConfig, okButton);\n        cancelButton = Object.assign({}, me.widgetMap.cancelButton.initialConfig, cancelButton);\n\n        // Ensure strings are localized\n        okButton.text = me.optionalL(okButton.text);\n        cancelButton.text = me.optionalL(cancelButton.text);\n\n        Widget.reconfigure(me.widgetMap.okButton, okButton);\n        Widget.reconfigure(me.widgetMap.cancelButton, cancelButton);\n\n        me.show();\n\n        return me.promise = new Promise(resolve => {\n            me.resolve = resolve;\n        });\n    }\n\n    show() {\n        const activeElement = DomHelper.getActiveElement(this.element);\n\n        // So that when we focus, we don't close an autoClose popup, but temporarily become\n        // part of its ownership tree.\n        this.owner = this.element.contains(activeElement) ? null : MessageDialogConstructor.fromElement(document.activeElement);\n\n        return super.show(...arguments);\n    }\n\n    updateShowClass(showClass, oldShowClass) {\n        const { classList } = this.element;\n\n        if (oldShowClass) {\n            classList.remove(oldShowClass);\n        }\n        if (showClass) {\n            classList.add(showClass);\n        }\n    }\n\n    doResolve(value) {\n        const\n            me          = this,\n            { resolve } = me;\n\n        if (resolve) {\n            const isPrompt = me.showClass === 'b-messagedialog-prompt';\n\n            if (isPrompt && value === me.okButton && !me.widgetMap.input.isValid) {\n                return;\n            }\n\n            me.resolve = me.reject = me.promise = null;\n            resolve(isPrompt ? { button : value, text : me.widgetMap.input.value } : value);\n            me.hide();\n        }\n    }\n\n    onInternalKeyDown(event) {\n        // Cancel on escape key\n        if (event.key === 'Escape') {\n            event.stopImmediatePropagation();\n            this.onCancelClick();\n        }\n        if (event.key === 'Enter') {\n            event.stopImmediatePropagation();\n            event.preventDefault(); // Needed to not spill over into next MessageDialog if closing this opens another\n            this.onOkClick();\n        }\n        super.onInternalKeyDown(event);\n    }\n\n    onOkClick() {\n        this.doResolve(MessageDialog.okButton);\n    }\n\n    onCancelClick() {\n        this.doResolve(MessageDialog.cancelButton);\n    }\n}\n\n// Register this widget type with its Factory\nMessageDialogConstructor.initClass();\n\n// Instantiate MessgeDialog Widget on first use.\nconst MessageDialog = new Proxy({}, {\n    get(target, prop) {\n        const\n            instance = target.instance || (target.instance = new MessageDialogConstructor({\n                rootElement : document.body\n            })),\n            result = instance[prop];\n\n        return typeof result === 'function' ? result.bind(instance) : result;\n    }\n});\n\n/**\n * A singleton class which shows common dialogs, similar to the native browser APIs (though these methods do not block the UI thread):\n * - {@link Core.widget.MessageDialog#function-confirm} shows a confirmation dialog with Ok / Cancel buttons\n * - {@link Core.widget.MessageDialog#function-alert} shows an dialog with a message\n * - {@link Core.widget.MessageDialog#function-prompt} shows a dialog with a text input field\n *\n * @class\n * @singleton\n * @inlineexample Core/widget/MessageDialog.js\n * @extends Core/widget/Popup\n */\nexport default MessageDialog;\n"],"names":["Target","Base","$name","initContainerDrag","me","this","mode","containers","Error","grabContainerDrag","event","ignoreSelector","target","closest","element","DomHelper","getAncestor","outerElement","box","getBoundingClientRect","context","valid","action","offsetX","pageX","left","offsetY","pageY","top","originalPosition","parent","parentElement","prev","previousElementSibling","next","nextElementSibling","startContainerDrag","_outerWidgetEl$parent","floatRootOwner","dragElement","clonedNode","cloneNode","outerWidgetEl","classList","add","dragProxyCls","draggingCls","floatRoot","getRootElement","appendChild","dragProxy","style","width","height","setTranslateXY","dragging","dropPlaceholderCls","matches","zIndex","floatRootMaxZIndex","updateContainerDrag","_context$dragging","started","targetElement","containerElement","willLoseFocus","contains","getActiveElement","isDescendant","GlobalEvents","suspendFocusEvents","moveNextTo","revertPosition","resumeFocusEvents","preventDefault","finishContainerDrag","draggedTo","insertBefore","finalize","remove","reset","async","trigger","abortContainerDrag","invalid","silent","updateContainerProxy","proxy","newX","newY","minX","Math","max","maxX","min","offsetWidth","minY","maxY","offsetHeight","lockX","setTranslateY","lockY","setTranslateX","type","touch","changedTouches","elementFromPoint","clientX","clientY","centerX","Rectangle","from","center","x","isRTL","lastElementChild","previousSibling","lastChild","noScroll","pageXOffset","pageYOffset","Delayable","configurable","positioning","skipUpdatingElement","initTranslateDrag","isElementDraggable","targetSelector","grabTranslateDrag","getTarget","startPageX","startPageY","startClientX","startClientY","getX","parseFloat","getTranslateX","getY","getTranslateY","getXY","offsetLeft","offsetTop","getTranslateXY","setXY","y","startTranslateDrag","proxySelector","dragWithin","cloneTarget","document","body","grabbed","grabbedParent","elementToClone","querySelector","proxyX","proxyY","createProxy","autoSizeClonedTarget","proxyRect","dragWithinX","dragWithinY","localX","localY","hideOriginalElement","Object","assign","grabbedNextSibling","elementStartX","elementStartY","elementX","getOffsetX","elementY","getOffsetY","scrollX","scrollY","scrollManagerElementContainsDragProxy","updateTranslateProxy","onDragStarted","_relatedElements","relatedElements","unifiedProxy","length","relatedElStartPos","relatedElDragFromPos","originalRelatedElements","map","relatedEl","i","proxyTemplateElement","relatedElementToDrag","unifiedOffset","EventHelper","onTransitionEnd","property","handler","forEach","el","thisObj","once","applyConstraints","constrain","globalThis","scrollWidth","scrollHeight","constrainedX","constrainedY","scrollManagerConfig","getRelativeLeftScroll","getRelativeTopScroll","snapCoordinates","snapped","undefined","deltaX","deltaY","r","finishTranslateDrag","xChanged","round","yChanged","ignoreSamePositionDrop","abortTranslateDrag","targetRect","allowDropOutside","right","bottom","finalized","console","warn","isDestroyed","transform","_me$scrollManager","_me$context","scrollManager","stopMonitoring","aborted","animateTo","isOrphaned","isDestroying","waitForTransitionEnd","getPropertyTransitionDuration","runOnDestroy","cleanUp","removeClonedProxies","removeProxyAfterDrop","cssClassesToRemove","rootElementListeners","DragHelper","mixin","Events","DragHelperContainer","DragHelperTranslate","defaultConfig","invalidCls","dragThreshold","monitoringConfig","dropTargetSelector","dropTargetCls","startEvent","touchStartDelay","clickSwallowDuration","mouseMoveListenerElement","testConfig","transitionDuration","rtlSource","construct","config","super","initListeners","isContainerDrag","onScrollManagerScrollCallback","bind","doDestroy","dragStartListeners","pointerdown","getMouseMoveListenerTarget","on","root","getRootNode","result","nodeType","Node","DOCUMENT_FRAGMENT_NODE","_this$rtlSource","Boolean","rtl","onPointerDown","button","isVisible","blurDetacher","blur","onWindowBlur","dragListeners","capture","keydown","pointerType","touchStartTimer","setTimeout","touchmove","passive","touchend","pointerup","pointermove","dragListenersDetacher","internalMove","_event$target","scrollInitiated","distance","getDistanceBetween","abort","ELEMENT_NODE","_me$onDragStarted","startMonitoring","ObjectHelper","merge","scrollables","callback","outermostEl","getOutermostElement","querySelectorAll","call","update","stopImmediatePropagation","_this$context","lastMouseMoveEvent","isScroll","onTouchMove","onMouseMove","scrollingPageElement","scrollingElement","getMouseMoveEventTarget","scrollLeft","scrollTop","internallyValid","_target","draggedElements","toggle","_context$relatedEleme","_me$scrollManager2","_me$scrollManager2$st","removeListeners","_this$dragListenersDe","_this$blurDetacher","onTouchEnd","onMouseUp","onDocumentClick","stopPropagation","_me$scrollManager3","finalizing","click","expires","onKeyDown","_this$context2","key","removeAttribute","animateProxyTo","alignSpec","align","isRectangle","alignTo","isDragging","_this$context3","_$name","documentListeners","down","move","up","docclick","touchstart","ResizeHelper","resizingCls","handleSize","dynamicHandleSize","reservedSpace","touchHandleSize","minWidth","maxWidth","minHeight","maxHeight","scroller","allowResize","isElementResizable","leftHandle","rightHandle","topHandle","bottomHandle","handleSelector","handleContainerSelector","grab","handleVisibilityThreshold","skipTranslate","direction","BrowserHelper","isHoverableDevice","initResize","updateSkipUpdatingElement","skip","edge","cursorOffset","getCursorOffsetToElementEdge","elementWidth","elementHeight","startX","startY","_me$reset","internalStartResize","isTouch","mousedown","mousemove","delegate","mouseleave","mouseup","removeDragListeners","_this$removeDragListe","canResize","grabResizeHandle","onTouchStart","touches","onMouseDown","checkResizeHandles","onPointerUp","_me$removeDragListene","_me$reset2","finishResize","parentRectangle","currentX","currentY","updateResize","_me$scrollManager3$st","abortResize","coordsFrom","getPageX","getPageY","overLeftHandle","overRightHandle","overTopHandle","overBottomHandle","_me$reset3","rectEl","currentElement","unHighlightHandle","over","highlightHandle","onMouseLeaveTarget","allowEdgeSwitch","updated","getExtremalSizePX","sign","newWidth","newHeight","flex","abs","eventObject","changed","_me$reset4","overAnyHandle","overStartHandle","overEndHandle","getDynamicHandleSize","opposite","handleCount","floor","getPagePoint","_defineProperty","WidgetHelper","getById","id","Widget","fromElement","limit","createWidget","isWidget","create","append","widget","Array","isArray","HTMLElement","appendTo","insertFirst","getElementById","firstChild","item","openPopup","forElement","html","showContextMenu","currentContextMenu","destroy","Point","ion","attachTooltip","configOrText","hasTooltipAttached","resolveType","destroyTooltipAttached","mask","msg","text","Mask","unmask","close","hide","toast","Toast","show","hasOwnProperty","prototype","cacheKey","Default","constructor","formatter","format","value","defaultFormat","parse","strict","defaultParse","resolvedOptions","Formatter","get","NULL","JSON","stringify","cache","fmt","set","_cache","Map","_null","initialize","configure","entries","defaults","parser","Parser","defineProperty","String","parseStrict","escapeRegExp","StringHelper","digitsRe","newFormatter","locale","Intl","NumberFormat","numFormatRe","_as","is","decimal","currency","percent","null","truncator","scale","maximumFractionDigits","as","options","template","loc","LocaleManager","locales","match","exec","m2","m4","useGrouping","integer","fraction","_minMax","change","cacheAs","ret","Number","v","isNaN","truncate","dot","indexOf","substr","name","setMin","setMax","capName","capitalize","numFmt","_decodeStyle","currencyDisplay","replace","grouper","decimalRe","stripRe","RegExp","decimalPlaces","fmtDef","decFmt","zero","zeroDec","suffix","startsWith","trim","minimumFractionDigits","minimumIntegerDigits","maximumSignificantDigits","minimumSignificantDigits","significant","number","Month","date","$config","equal","DH","clearTime","Date","month","year","weekStartDay","hideNonWorkingDays","nonWorkingDays","sixWeeks","updateDayNumbers","generation","changeDate","isConfiguring","updateDate","newDate","oldDate","dayColumnIndex","weekCount","monthStart","getFirstDateOfMonth","monthEnd","getLastDateOfMonth","startWeekDay","getDay","endWeekDay","yearChanged","getFullYear","monthChanged","getMonth","changes","eventListeners","getDate","getWeekId","_year","_month","startDayOfMonth","endDayOfMonth","weekBase","calculateWeekBase","d","w","m","jan1","dec31","january","getOtherMonth","startDate","dec31Week","diff","has53weeks","getWeekStart","week","weekOfYear","otherMonth","changeYear","setFullYear","changeMonth","setMonth","_weekStartDay","updateWeekStartDay","_nonWorkingDays","changeNonWorkingDays","updateNonWorkingDays","updateHideNonWorkingDays","updateSixWeeks","dayCount","endDate","eachDay","fn","dayOfMonth","eachWeek","weekDates","getWeekNumber","day","push","weekNo","getCellData","ownerMonth","dayTime","DayTime","MIDNIGHT","visibleColumnIndex","visibleDayColumnIndex","isNonWorking","isHiddenDay","columnIndex","dayEnd","duration","tomorrow","dayOfDate","isOtherMonth","visible","isRowStart","isRowEnd","visibleColumnCount","canonicalDayNumbers","canonicalDay","weekLength","keys","CalendarPanel","Panel","textContent","showWeekNumber","showWeekColumn","disabledDates","headerRenderer","weekRenderer","cellRenderer","disableWeekends","hideNonWorkingDaysCls","tip","dayCellCls","dayHeaderCls","disabledCls","otherMonthCls","weekendCls","todayCls","nonWorkingDayCls","dayNameFormat","minRowHeight","minColumnWidth","disableOtherMonthCells","disableOtherMonthCellsCls","hideOtherMonthCells","hideOtherMonthCellsCls","animateTimeShift","refreshCount","refresh","onPaint","firstPaint","_super$onPaint","arguments","getConfig","overflowElement","weeksElement","_this$tip","changeMinRowHeight","minValue","parseInt","getStyleValue","updateMinRowHeight","weekElements","setLength","scrollable","overflowY","changeMinColumnWidth","updateMinColumnWidth","weekdayCells","c","cellElements","overflowX","getDateFromDomEvent","domEvent","Element","DateHelper","parseKey","dataset","changeTip","existingTip","Tooltip","reconfigure","owner","bodyElement","forSelector","updateTip","detachListeners","pointerOver","updateElement","was","weekDayElements","children","updateDayNameFormat","shortDayNames","setDate","dayNames","_this$scrollable","contentElement","syncOverflowState","updateHideOtherMonthCells","_this$scrollable2","updateDisableOtherMonthCells","_this$scrollable3","_localeNonWorkingDays","weekends","_localeWeekends","_this$scrollable4","currentMonth","new","dateChange","onMonthDateChange","source","getCell","slideIn","oldValue","updateYear","updateShowWeekNumber","updateShowWeekColumn","floating","isAligning","realign","doRefresh","_me$project","timeZone","project","today","TimeZoneHelper","toTimeZone","setHours","cell","cellDay","cellClassList","innerHTML","setInnerText","syncClassList","rowIndex","cellIndex","lastWorkingColumn","dates","weekDayElement","weekCells","innerText","isDisabledDate","getTime","firstVisibleDate","lastVisibleDate","makeKey","lastDomConfig","class","className","row","visibleWeekCount","some","bodyConfig","weeksContainerChildren","tag","reference","ArrayHelper","fill","scrollBarPadElement","weekRow","syncOptions","ignoreRefs","lastDate","onTipOverCell","updateLocalization","initClass","whenNotChecked","field","Checkbox","Field","alias","inputType","autoCollapse","containerDefaults","syncableConfigs","disabled","syncConfigTriggers","checkedValue","uncheckedValue","color","toggleGroup","localizableProperties","checked","syncHasText","textLabelCls","innerElements","inputElement","for","group","listeners","input","updateText","textLabel","afterSyncChildConfigs","container","collapsed","assignFieldValue","values","fetchInputValue","readOnly","gatherValue","_values$valueName","storedValue","valueName","gatherValues","changeValue","updateValue","_me$container","syncChildConfigs","inputting","uncheckToggleGroupMembers","triggerChange","inputValueAttr","updateColor","classes","getToggleGroupMembers","checkedElement","forEachSelector","rootElement","inputEl","partnerCheckbox","check","uncheck","internalOnClick","internalOnChange","updateInputReadOnly","userAction","filter","triggerFieldChange","_value","YearPicker","_objectSpread","focusElement","getYearButton","startYear","onYearClick","clickedYear","minYear","maxYear","handleTitleClick","e","previous","yearButtonCount","endYear","ingestYear","isDate","changeStartYear","updateStartYear","oldStartYear","composeBody","tbar","widgetMap","title","slice","overflow","items","cls","onAction","weight","itemCls","DisplayField","TextField","editable","ariaElement","changeReadOnly","changeEditable","encodeHtml","generateMonthNames","getMonthNames","dateSort","lhs","rhs","valueOf","emptyArray","freeze","Combo","inputAttributes","tabIndex","highlightExternalChange","monitorResize","triggers","expand","picker","axisLock","matchSize","DatePicker","delayable","activeDate","focusable","prevYear","tooltip","prevMonth","fields","monthField","internalListeners","select","yearButton","nextMonth","nextYear","yearPicker","trapFocus","positioned","hidden","titleClick","minDate","maxDate","focusDisabledDates","multiSelect","selection","v1","v2","equals","editMonth","role","focusDescendant","alwaysRefreshOnMonthChange","prototypeProperties","outOfRangeCls","activeCls","selectedCls","externalCellRenderer","internalCellRenderer","setAttribute","flush","afterHide","_this$_yearPicker","_yearPicker","_this$yearButton","_this$monthField","oldActiveCell","betweenLesser","_activeDate","dateOfOldActiveCell","syncActiveDate","isSelected","isSelectedDate","isActiveDate","isStart","isEnd","updateClassList","onCellMousedown","focus","onCellClick","onUIDateSelect","lastClickedDate","activatingEvent","handleMultiSelect","_selection","singleRange","size","rangeEnds","toggleFn","has","clickedRangeEnd","ctrlKey","rangeStartDate","shiftKey","start","end","sort","clear","newSize","updateSelection","changeSelection","DateSet","dateSet","now","onInternalKeyDown","keyEvent","keyName","code","gotoPrevMonth","gotoNextMonth","changeMinDate","apply","updateMinDate","_yearpicker","changeMaxDate","updateMaxDate","clamp","initializingActiveDate","isNavigating","changeActiveDate","oldActiveDate","updateActiveDate","wasActiveDate","isPending","activeCell","wasActiveCell","activeElement","gotoPrevYear","goto","gotoNextYear","unit","firstDateOfNewMonth","lastDateOfNewMonth","_this$_selection","onMonthPicked","record","_this$focusElement","onYearPickerRequested","onYearPickerTitleClick","onYearPicked","focusWithoutScrolling","changeYearPicker","oldYearPicker","_this$minDate","_this$maxDate","mergeConfigs","childItems","newData","every","store","getAt","selected","Set","delete","other","s","k","DateField","PickerField","strictParsing","fallbackFormat","timeFormat","keepTime","pickerFormat","validateDateOnly","back","forward","calendarContainerCls","step","stepTriggers","scrollAction","changePicker","oldPicker","pickerAlignElement","anchor","overlayAnchor","onSelectionChange","_isUserAction","_isPickerInput","backShiftDate","_step","magnitude","onBackClick","newValue","forwardShiftDate","onForwardClick","showPicker","focusPicker","_picker","pickerConfig","setConfig","isValid","clearError","setError","transformDateValue","isValidDate","MS_PER_DAY","transformTimeValue","clone","timeValue","copyTimeValues","changeMin","updateMin","syncInvalid","changeMax","updateMax","hasChanged","syncInputFieldValue","changeStep","parseDuration","updateStep","isEqual","inputValue","updateFormat","internalOnKeyEvent","NumberField","largeStep","decimalPrecision","leadingZeroes","spin","changeOnSpin","addEventListener","bufferedSpinChange","buffer","acceptValue","rawValue","accept","hasTextSelection","raw","current","okMax","okMin","block","doSpinUp","doSpinDown","altKey","after","getAfterValue","afterValue","_changedBySilentSpin","applySpinChange","silenceChange","onFocusOut","_me$triggers","_me$triggers$spin","_me$triggers$spin$cli","formatted","formatValue","clickRepeater","cancel","internalOnInput","decimals","trunc","pos","caretPos","changeFormat","repeat","_formatter","_lastFormat","changeLargeStep","validity","rangeUnderflow","rangeOverflow","valueIsNaN","TimePicker","Container","updateSeconds","seconds","second","onFieldChange","isRefreshing","pickerToTime","onAmPmButtonClick","_pm","ref","_super$onInternalKeyD","triggerTimeChange","_initialValue","pm","hour","minute","_is24Hour","hours","setMinutes","setSeconds","_min","_max","time","updateInitialValue","initialValue","is24HourFormat","amButton","pmButton","is24","getHours","getMinutes","getSeconds","pressed","label","onClick","autoShow","TimeField","compose","keepDate","onTimeChange","getMilliseconds","maxTime","minTime","onPickerShow","_this$pickerKeyDownRe","pickerKeyDownRemover","isRequired","firstElementChild","animationDelay","_value2","DurationField","defaultUnit","useAbbreviation","allowNegative","nullValue","allowedUnits","Duration","changeAllowedUnits","units","split","updateAllowedUnits","allowedUnitsRe","join","calcValue","toString","_unit","unitWithDefault","_magnitude","roundMagnitude","allowDecimals","isEmpty","required","oldVal","_lastValue","_this$triggers","_this$triggers$spin","_this$triggers$spin$c","newMagnitude","newUnit","test","parsedDuration","clearable","milliseconds","SUPPORTED_FIELD_DATA_TYPES","isSupportedDurationField","_field$column","column","FieldFilterPicker","defaultValueFieldPlaceholders","string","list","afterConstruct","_fields","_filter","propertyPicker","operatorPicker","caseSensitive","propertyFieldConfig","operatorFieldConfig","allPropertyPickerClasses","allOperatorPickerClasses","populateUIFromFilter","changeDateFormat","dateFormat","L","allChildInputs","valueFields","updateDisabled","newDisabled","updateReadOnly","newReadOnly","updatePropertyLocked","newPropertyLocked","updateOperatorLocked","newOperatorLocked","changeOperators","newOperators","operators","defaultOperators","reduce","outOperators","dataType","op","changeFields","newFields","VersionHelper","deprecate","keyBy","isMultiSelectValueField","_this$_filter","includes","operator","_this$propertyFieldCo","DomClassList","propertyLocked","_this$operatorFieldCo","operatorLocked","getValueFieldConfigs","valueFieldCls","fieldType","onValueChange","filterValues","operatorArgCount","getValueFieldConfig","valueFieldPlaceholders","valueFieldCfg","placeholder","createOnUnmatched","getUniqueDataValues","populate","index","content","flat","extraValuesToInclude","_me$_filter","relatedDisplayField","selectedField","sortedValues","fieldIsRelation","foreignStore","currentPropertyRelationConfig","allRecords","a","b","sortStrings","uniqueValues","unique","primitiveValues","durationStr","sortDurations","sortNumerics","timestamp","localeCompare","_this$selectedField","_this$fields","_this$_filter2","propertyOptions","_this$fields2","fieldDef","fieldName","operatorOptions","_this$store","_this$store$modelRela","modelRelations","find","foreignKey","_this$_filter3","updateOperators","_operatorArgCountLookup","operatorArgCountLookup","buildOperatorArgCountLookup","updateFilter","onFilterChange","updateStore","newStore","_this$_store","_store","un","onStoreRefresh","refreshValueFields","valueFieldRow","removeAll","_valueFields","refreshCaseSensitive","_me$_filter2","_me$_filter3","onPropertySelect","_event$record","data","_fieldType","refreshOperatorPicker","onCaseSensitiveChange","onOperatorSelect","_event$record2","wasMultiSelectValueField","prevArgCount","forceRefreshValueFields","valueField","fieldIndex","queryAll","_this$_filter4","asArray","newFieldType","missingValue","empty","argCount","notEmpty","between","notBetween","isIncludedIn","isNotIncludedIn","boolean","relation","layout","propertyAndOperator","Label","FieldFilterPickerGroup","validateConfig","addFilterButton","someFiltersNotShown","filters","count","updateFields","pickers","updateFilters","newFilters","oldFilters","newFilter","_me$store","removeFilter","nextFilterId","getPickerRowConfig","changeFilters","canManageFilter","filterPicker","addFilter","appendFiltersFromStore","updateShowAddFilterButton","newShow","updateAddFilterButtonText","newText","addFilterButtonDefaultText","_me$filters","canManage","appendFilter","getFilterPickerConfig","limitToProperty","getFieldFilterPickerConfig","childPickerType","getFieldsFromStore","_store$fields$map","_store$fields","fromEntries","canDeleteFilter","layoutStyle","alignItems","separatorText","activeCheckbox","removeButton","icon","allInputs","childInputTypes","onFilterActiveChange","filterIndex","getFilterIndex","getFilterPicker","updateStoreFilter","onFilterPickerChange","eventSource","containingWidget","getPickerRow","_nextId","pickerRow","newFocusWidget","query","isFocusable","removeFilterAt","_me$store2","onStoreFilter","_isUpdatingStore","storeFiltersById","byId","storeFilter","filterRow","splice","activateAll","setAllActiveStatus","deactivateAll","newActive","_filters","showAddFilterButton","addFilterButtonText","isWindows","reverse","MessageDialogConstructor","Popup","centered","modal","closeAction","lazyItems","showClass","bbar","okButton","yesButton","cancelButton","confirm","showDialog","alert","prompt","textField","message","optionalL","initialConfig","promise","Promise","resolve","updateShowClass","oldShowClass","doResolve","isPrompt","reject","onCancelClick","onOkClick","MessageDialog","Proxy","prop","instance"],"mappings":"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"}