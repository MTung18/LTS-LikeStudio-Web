{"version":3,"file":"TreeGroup.js","sources":["../../../lib/Grid/feature/RowReorder.js","../../../lib/Grid/feature/TreeGroup.js"],"sourcesContent":["/**\n * @module Grid/feature/RowReorder\n */\n\nimport GridFeatureManager from './GridFeatureManager.js';\nimport DragHelper from '../../Core/helper/DragHelper.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\n\n/**\n * Object with information about a tree position\n * @typedef {Object} RecordPositionContext\n * @property {Core.data.Model} record Tree node\n * @property {Number} parentIndex Index among parents children\n * @property {String|Number} parentId Parent node's id\n */\n\n/**\n * Allows user to reorder rows by dragging them. To get notified about row reorder listen to `change` event\n * on the grid {@link Core.data.Store store}.\n *\n * This feature is **off** by default. For info on enabling it, see {@link Grid.view.mixin.GridFeatures}.\n * This feature is **enabled** by default for Gantt.\n *\n * {@inlineexample Grid/feature/RowReorder.js}\n *\n * If the grid is set to {@link Grid.view.Grid#config-readOnly}, reordering is disabled. Inside all event listeners you\n * have access a `context` object which has a `record` property (the dragged record).\n *\n * ## Validation\n * You can validate the drag drop flow by listening to the `gridrowdrag` event. Inside this listener you have access to\n * the `index` property which is the target drop position. For trees you get access to the `parent` record and `index`,\n * where index means the child index inside the parent.\n *\n * You can also have an async finalization step using the {@link #event-gridRowBeforeDropFinalize}, for showing a\n * confirmation dialog or making a network request to decide if drag operation is valid (see code snippet below)\n *\n * ```javascript\n * features : {\n *     rowReorder : {\n *         listeners : {\n *             gridRowDrag : ({ context }) => {\n *                // Here you have access to context.insertBefore, and additionally context.parent for trees\n *             },\n *\n *             gridRowBeforeDropFinalize : async ({ context }) => {\n *                const result = await MessageDialog.confirm({\n *                    title   : 'Please confirm',\n *                    message : 'Did you want the row here?'\n *                });\n *\n *                // true to accept the drop or false to reject\n *                return result === MessageDialog.yesButton;\n *             }\n *         }\n *     }\n * }\n * ```\n *\n * Note, that this feature uses the concept of \"insert before\" when choosing a drop point in the data. So the dropped\n * record's position is *before the visual next record's position*.\n *\n * This may look like a pointless distinction, but consider the case when a Store is filtered. The record *above* the\n * drop point may have several filtered out records below it. When unfiltered, the dropped record will be *below* these\n * because of the \"insert before\" behaviour.\n *\n * ## Behavior with multiple subgrids\n *\n * For grids with multiple subgrids, row reordering is only enabled for the first subgrid.\n *\n * NOTE: This feature cannot be used simultaneously with the `enableTextSelection` config.\n *\n * @extends Core/mixin/InstancePlugin\n * @demo Grid/rowreordering\n * @classtype rowReorder\n * @feature\n */\nexport default class RowReorder extends Delayable(InstancePlugin) {\n    //region Events\n    /**\n     * Fired before dragging starts, return false to prevent the drag operation.\n     * @preventable\n     * @event gridRowBeforeDragStart\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {Core.data.Model[]} context.records The dragged row records\n     * @param {MouseEvent|TouchEvent} event\n     */\n\n    /**\n     * Fired when dragging starts.\n     * @event gridRowDragStart\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {Core.data.Model[]} context.records The dragged row records\n     * @param {MouseEvent|TouchEvent} event\n     */\n\n    /**\n     * Fired while the row is being dragged, in the listener function you have access to `context.insertBefore` a grid /\n     * tree record, and additionally `context.parent` (a TreeNode) for trees. You can signal that the drop position is\n     * valid or invalid by setting `context.valid = false;`\n     * @event gridRowDrag\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {Boolean} context.valid Set this to true or false to indicate whether the drop position is valid.\n     * @param {Core.data.Model} context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)\n     * @param {Core.data.Model} context.parent The parent record of the current drop position (only applicable for trees)\n     * @param {Core.data.Model[]} context.records The dragged row records\n     * @param {MouseEvent} event\n     */\n\n    /**\n     * Fired before the row drop operation is finalized. You can return false to abort the drop operation, or a\n     * Promise yielding `true` / `false` which allows for asynchronous abort (e.g. first show user a confirmation dialog).\n     * @event gridRowBeforeDropFinalize\n     * @preventable\n     * @async\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {Boolean} context.valid Set this to true or false to indicate whether the drop position is valid\n     * @param {Core.data.Model} context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)\n     * @param {Core.data.Model} context.parent The parent record of the current drop position (only applicable for trees)\n     * @param {Core.data.Model[]} context.records The dragged row records\n     * @param {RecordPositionContext[]} context.oldPositionContext An array of objects with information about the previous tree position.\n     * Objects contain the `record`, and its original `parentIndex` and `parentId` values\n     * @param {MouseEvent} event\n     */\n\n    /**\n     * Fired after the row drop operation has completed, regardless of validity\n     * @event gridRowDrop\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {Boolean} context.valid true or false depending on whether the drop position was valid\n     * @param {Core.data.Model} context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)\n     * @param {Core.data.Model} context.parent The parent record of the current drop position (only applicable for trees)\n     * @param {Core.data.Model} context.record [DEPRECATED] The dragged row record\n     * @param {Core.data.Model[]} context.records The dragged row records\n     * @param {RecordPositionContext[]} context.oldPositionContext An array of objects with information about the previous tree position.\n     * Objects contain the record, and its original `parentIndex` and `parentId` values\n     * @param {MouseEvent} event\n     */\n\n    /**\n     * Fired when a row drag operation is aborted\n     * @event gridRowAbort\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {MouseEvent} event\n     */\n    //endregion\n\n    //region Init\n\n    static $name = 'RowReorder';\n\n    static configurable = {\n        /**\n         * Set to `true` to show a grip icon on the left side of each row.\n         * @config {Boolean}\n         */\n        showGrip : null,\n\n        /**\n         * Set to `true` to only allow reordering by the {@link #config-showGrip} config\n         * @config {Boolean}\n         */\n        gripOnly : null,\n\n        /**\n         * If hovering over a parent node for this period of a time in a tree, the node will expand\n         * @config {Number}\n         */\n        hoverExpandTimeout : 1000,\n\n        /**\n         * The amount of milliseconds to wait after a touchstart, before a drag gesture will be allowed to start.\n         * @config {Number}\n         * @default\n         */\n        touchStartDelay : 300,\n\n        /**\n         * Enables creation of parents by dragging a row and dropping it onto a leaf row. Only works in a Grid with\n         * a tree store.\n         * @config {Boolean}\n         */\n        dropOnLeaf : false,\n\n        /**\n         * An object used to configure the internal {@link Core.helper.DragHelper} class\n         * @config {DragHelperConfig}\n         */\n        dragHelperConfig : null\n    };\n\n    construct(grid, config) {\n        this.grid = grid;\n\n        super.construct(...arguments);\n    }\n\n    doDestroy() {\n        this.dragHelper?.destroy();\n\n        super.doDestroy();\n    }\n\n    /**\n     * Initialize drag & drop (called on first paint)\n     * @private\n     */\n    init() {\n        const\n            me       = this,\n            { grid } = me;\n\n        me.dragHelper = DragHelper.new({\n            name               : 'rowReorder',\n            cloneTarget        : true,\n            dragThreshold      : 10,\n            proxyTopOffset     : 10,\n            targetSelector     : '.b-grid-row',\n            lockX              : true,\n            dragWithin         : grid.bodyContainer,\n            allowDropOutside   : true,\n            scrollManager      : grid.scrollManager,\n            outerElement       : me.targetSubGridElement,\n            touchStartDelay    : me.touchStartDelay,\n            isElementDraggable : me.isElementDraggable.bind(me),\n            monitoringConfig   : {\n                scrollables : [\n                    {\n                        element   : grid.scrollable.element,\n                        direction : 'vertical'\n                    }\n                ]\n            },\n            setXY(element, x, y) {\n                const { context } = this;\n\n                if (!context.started) {\n                    const\n                        elementRect       = Rectangle.from(context.element, this.dragWithin),\n                        pointerDownOffset = context.startPageY - window.pageYOffset - context.element.getBoundingClientRect().top;\n\n                    // manually position the row a bit below the cursor\n                    y = elementRect.top + pointerDownOffset + this.proxyTopOffset;\n                }\n                DomHelper.setTranslateXY(element, x, y);\n            },\n            // Since parent nodes can expand after hovering, meaning original drag start position now refers to a different point in the tree\n            ignoreSamePositionDrop : false,\n            createProxy(element) {\n                const\n                    clone     = element.cloneNode(true),\n                    container = document.createElement('div');\n\n                container.classList.add('b-row-reorder-proxy');\n\n                clone.removeAttribute('id');\n                // The containing element will be positioned instead\n                clone.style.transform = '';\n\n                container.appendChild(clone);\n\n                if (grid.selectedRecords.length > 1) {\n                    const clone2 = clone.cloneNode(true);\n\n                    clone2.classList.add('b-row-dragging-multiple');\n\n                    container.appendChild(clone2);\n                }\n\n                DomHelper.removeClsGlobally(container, 'b-selected', 'b-hover', 'b-focused');\n\n                return container;\n            },\n\n            internalListeners : {\n                beforedragstart : 'onBeforeDragStart',\n                dragstart       : 'onDragStart',\n                drag            : 'onDrag',\n                drop            : 'onDrop',\n                reset           : 'onReset',\n                prio            : 10000, // To ensure our listener is run before the relayed listeners (for the outside world)\n                thisObj         : me\n            }\n        }, me.dragHelperConfig);\n\n        me.relayEvents(me.dragHelper, ['beforeDragStart', 'dragStart', 'drag', 'abort'], 'gridRow');\n\n        me.dropIndicator = DomHelper.createElement({\n            className : 'b-row-drop-indicator'\n        });\n\n        me.dropOverTargetCls = ['b-row-reordering-target', 'b-hover'];\n    }\n\n    //endregion\n\n    //region Plugin config\n\n    static pluginConfig = {\n        after : ['onPaint']\n    }\n\n    get targetSubGridElement() {\n        const targetSubGrid = this.grid.regions[0];\n\n        return this.grid.subGrids[targetSubGrid].element;\n    }\n\n    //endregion\n\n    //region Events (drop)\n\n    isElementDraggable(el, event) {\n        if (!el.closest('.b-grid-cell .b-widget')) {\n            if (this.gripOnly) {\n                const firstCell = el.closest('.b-grid-cell:first-child');\n\n                // Event is in the first cell. Now check if it's on the handle\n                if (firstCell) {\n                    const\n                        gripperStyle = getComputedStyle(firstCell, ':before'),\n                        offsetX      = this.grid.rtl ? firstCell.getBoundingClientRect().width - event.borderOffsetX : event.borderOffsetX;\n\n                    return DomHelper.roundPx(offsetX) <= DomHelper.roundPx(parseFloat(gripperStyle.width));\n                }\n            }\n            else {\n                return true;\n            }\n        }\n    }\n\n    onBeforeDragStart({ event, source, context }) {\n        const\n            me        = this,\n            { grid }  = me,\n            subGridEl = me.targetSubGridElement;\n\n        // Only dragging enabled in the leftmost grid section\n        if (me.disabled || grid.readOnly || grid.isTreeGrouped || !subGridEl.contains(context.element)) {\n            return false;\n        }\n\n        const startRecord = context.startRecord = grid.getRecordFromElement(context.element);\n\n        // Dont allow starting drag on a readOnly record nor on special rows\n        if (startRecord.readOnly || startRecord.isSpecialRow) {\n            return false;\n        }\n\n        context.originalRowTop = grid.rowManager.getRowFor(startRecord).top;\n\n        // Don't select row if checkboxOnly is set\n        if (!grid.selectionMode.checkboxOnly) {\n            if (source.startEvent.pointerType === 'touch') {\n                // Touchstart doesn't focus/navigate on its own, so we do it at the last moment before drag start\n                if (!grid.isSelected(startRecord)) {\n                    grid.selectRow({\n                        record         : startRecord,\n                        addToSelection : false\n                    });\n                }\n            }\n            else if (!grid.isSelected(startRecord) && !event.shiftKey && !event.ctrlKey) {\n                // If record is not selected and shift/ctrl is not pressed then select single row\n                grid.selectRow({\n                    record : startRecord\n                });\n            }\n        }\n\n        // Read-only records will not be moved\n        const selectedRecords = grid.selectedRecords.filter(r => !r.readOnly);\n        context.records       = [startRecord];\n\n        // If clicked record is selected, move all selected records\n        if (selectedRecords.includes(startRecord)) {\n            context.records.push(...selectedRecords.filter(r => r !== startRecord));\n            context.records.sort((r1, r2) => grid.store.indexOf(r1) - grid.store.indexOf(r2));\n        }\n\n        return true;\n    }\n\n    onDragStart({ context }) {\n        const\n            me                                 = this,\n            { grid }                           = me,\n            { cellEdit, cellMenu, headerMenu } = grid.features;\n\n        if (cellEdit) {\n            me.cellEditDisabledState = cellEdit.disabled;\n            cellEdit.disabled        = true; // prevent editing from being started through keystroke during row reordering\n        }\n\n        cellMenu?.hideContextMenu?.(false);\n        headerMenu?.hideContextMenu?.(false);\n\n        grid.element.classList.add('b-row-reordering');\n\n        const focusedCell = context.element.querySelector('.b-focused');\n        focusedCell?.classList.remove('b-focused');\n\n        context.element.firstElementChild.classList.remove('b-selected', 'b-hover');\n\n        grid.bodyContainer.appendChild(me.dropIndicator);\n    }\n\n    onDrag({ context, event }) {\n        const\n            me                    = this,\n            { grid }              = me,\n            { store, rowManager } = grid,\n            { clientY }           = event;\n\n        let valid = true,\n            row   = rowManager.getRowAt(clientY),\n            overRecord,\n            dataIndex,\n            after,\n            over,\n            insertBefore;\n\n        if (row) {\n            const\n                rowTop        = row.top + grid._bodyRectangle.y - grid.scrollable.y,\n                quarter       = row.height / 4,\n                topQuarter    = rowTop + quarter,\n                middleY       = rowTop + row.height / 2,\n                bottomQuarter = rowTop + quarter * 3;\n\n            dataIndex  = row.dataIndex;\n            overRecord = store.getAt(dataIndex);\n\n            // If Tree and pointer is in quarter 2 and 3, add as child of hovered row\n            if (store.tree) {\n                over = (overRecord.isParent || me.dropOnLeaf) && clientY > topQuarter && clientY < bottomQuarter;\n            }\n            else if (store.isGrouped) {\n                over = overRecord.isGroupHeader && overRecord.meta.collapsed;\n            }\n\n            // Else, drop after row below if mouse is in bottom half of hovered row\n            after = !over && event.clientY >= middleY;\n        }\n        // User dragged below last row or above the top row.\n        else {\n            if (event.pageY < grid._bodyRectangle.y) {\n                dataIndex  = 0;\n                overRecord = store.first;\n                after      = false;\n            }\n            else {\n                dataIndex  = store.count - 1;\n                overRecord = store.last;\n                after      = true;\n            }\n            row = grid.rowManager.getRow(dataIndex);\n        }\n\n        if (overRecord === me.overRecord && me.after === after && me.over === over) {\n            context.valid = me.reorderValid;\n            // nothing's changed\n            return;\n        }\n\n        if (me.overRecord !== overRecord) {\n            rowManager.getRowById(me.overRecord)?.removeCls(me.dropOverTargetCls);\n        }\n\n        me.overRecord = overRecord;\n        me.after      = after;\n        me.over       = over;\n\n        if (\n            // Hovering the dragged record. This is a no-op.\n            // But still gather the contextual data.\n            overRecord === context.startRecord ||\n            // Not allowed to drop above topmost group header or below a collapsed header\n            (!after && !over && dataIndex === 0 && store.isGrouped) ||\n            // Not allowed to drop after last collapsed group\n            (after && overRecord.isGroupHeader && overRecord.meta.collapsed && store.indexOf(overRecord) === store.count - 1)\n        ) {\n            valid = false;\n        }\n\n        if (store.tree) {\n            insertBefore = after ? overRecord.nextSibling : overRecord;\n\n            // For trees, prevent moving a parent into its own hierarchy\n            if (context.records.some(rec => rec.contains(overRecord))) {\n                valid = false;\n            }\n\n            context.parent = valid && over ? overRecord : overRecord.parent;\n\n            me.clearTimeout(me.hoverTimer);\n\n            if (overRecord && overRecord.isParent && !overRecord.isExpanded(store)) {\n                me.hoverTimer = me.setTimeout(() => grid.expand(overRecord), me.hoverExpandTimeout);\n            }\n        }\n        else {\n            insertBefore = after ? store.getAt(dataIndex + 1) : overRecord;\n        }\n\n        row.toggleCls(me.dropOverTargetCls, valid && over);\n\n        // If hovering results in same dataIndex, regardless of what row is hovered, and parent has not changed\n        if (!over && dataIndex === store.indexOf(context.startRecord) + (after ? -1 : 1) &&\n            context.parent && context.startRecord.parent === context.parent) {\n            valid = false;\n        }\n\n        // Provide visual clue to user of the drop position\n        // In FF (in tests) it might not have had time to redraw rows after scroll before getting here\n        row && DomHelper.setTranslateY(me.dropIndicator, Math.max(row.top + (after ? row.element.getBoundingClientRect().height : 0), 1));\n\n        // Don't show dropIndicator if holding over a row\n        me.dropIndicator.style.visibility = over ? 'hidden' : 'visible';\n        me.dropIndicator.classList.toggle('b-drag-invalid', !valid);\n\n        // Public property used for validation\n        context.insertBefore = insertBefore;\n\n        context.valid = me.reorderValid = valid;\n    }\n\n    /**\n     * Handle drop\n     * @private\n     */\n    async onDrop(event) {\n        const\n            me          = this,\n            { context } = event;\n\n        context.valid = context.valid && me.reorderValid;\n\n        if (context.valid) {\n            context.async = true;\n\n            if (me.client.store.tree) {\n                // For tree scenario, add context about previous positions of dragged tree nodes\n                context.oldPositionContext = context.records.map((record) => ({\n                    record,\n                    parentId    : record.parent?.id,\n                    parentIndex : record.parentIndex\n                }));\n            }\n\n            // Outside world provided us one or more Promises to wait for\n            const result = await me.trigger('gridRowBeforeDropFinalize', event);\n\n            if (result === false) {\n                context.valid = false;\n            }\n\n            await me.dragHelper.animateProxyTo(me.dropIndicator, { align : 'l0-l0' });\n\n            await me.finalizeReorder(context);\n        }\n\n        // already dropped the node, don't have to expand any node hovered anymore\n        // (cancelling expand action after timeout)\n        me.clearTimeout(me.hoverTimer);\n\n        me.overRecord = me.after = me.over = null;\n\n        me.trigger('gridRowDrop', event);\n    }\n\n    async finalizeReorder(context) {\n        const\n            me                     = this,\n            { grid }               = me,\n            { store, focusedCell } = grid;\n\n        let { records } = context;\n\n        context.valid = context.valid && !records.some(rec => !store.includes(rec));\n\n        if (context.valid) {\n            let result;\n\n            if (store.tree) {\n                // Remove any selected child records of parent nodes\n                records = records.filter(record => !record.parent || record.bubbleWhile(parent => !records.includes(parent), true));\n\n                result = await context.parent.tryInsertChild(records, me.over ? context.parent.children?.[0] : context.insertBefore);\n                // remove reorder cls from preview parent element dropped\n                grid.rowManager.forEach(r => r.removeCls(me.dropOverTargetCls));\n\n                // If parent wasn't expanded, expand it if it now has children\n                if (!context.parent.isExpanded() && context.parent.children?.length) {\n                    grid.expand(context.parent);\n                }\n\n                context.valid = result !== false;\n            }\n            else if (store.isGrouped && me.over) {\n                store.move(records, store.getAt(store.indexOf(context.insertBefore) + 1));\n            }\n            else {\n                store.move(records, context.insertBefore);\n            }\n\n            if (focusedCell?._rowIndex >= 0) {\n                grid._focusedCell = null;\n                // Refresh focused cell\n                grid.focusCell({\n                    grid,\n                    record   : focusedCell.record,\n                    columnId : focusedCell.columnId\n                });\n            }\n\n            store.clearSorters();\n        }\n\n        context.finalize(context.valid);\n\n        grid.element.classList.remove('b-row-reordering');\n    }\n\n    /**\n     * Clean up on reset\n     * @private\n     */\n    onReset() {\n        const\n            me       = this,\n            { grid } = me,\n            cellEdit = grid.features.cellEdit;\n\n        grid.element.classList.remove('b-row-reordering');\n\n        if (cellEdit) {\n            cellEdit.disabled = me.cellEditDisabledState;\n        }\n\n        me.dropIndicator.remove();\n\n        DomHelper.removeClsGlobally(\n            grid.element,\n            ...me.dropOverTargetCls\n        );\n    }\n\n    //endregion\n\n    //region Render\n\n    onPaint({ firstPaint }) {\n        // columns shown, hidden or reordered\n        if (firstPaint) {\n            this.init();\n        }\n    }\n\n    //endregion\n\n    updateShowGrip(show) {\n        this.grid.element.classList.toggle('b-row-reorder-with-grip', show);\n    }\n}\n\nRowReorder.featureClass = '';\n\nGridFeatureManager.registerFeature(RowReorder, false);\nGridFeatureManager.registerFeature(RowReorder, true, 'Gantt');\n","import TreeColumn from '../column/TreeColumn.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from './GridFeatureManager.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\n\n/**\n * @module Grid/feature/TreeGroup\n */\n\n/**\n * A feature that allows transforming a flat dataset (or the leaves of a hierarchical) into a tree by specifying a\n * record field per parent level. Parents are generated based on each leaf's value for those fields.\n *\n * {@inlineexample Grid/feature/TreeGroup.js}\n *\n * This feature can be used to mimic multi grouping or to generate another view for hierarchical data. The actual\n * transformation happens in a new store, that contains links to the original records. The original stores structure is\n * kept intact and will be plugged back in when calling {@link #function-clearGroups}.\n *\n * Any modification of the links is relayed to the original store. So cell editing etc. will work as expected and the\n * original data will be updated.\n *\n * <div class=\"note\">\n * Please note that this feature requires using a {@link Grid.view.TreeGrid} or having the {@link Grid.feature.Tree}\n * feature enabled.\n * </div>\n *\n * This snippet shows how the sample dataset used in the demo above is transformed:\n *\n * ```javascript\n * const grid = new TreeGrid({\n *     // Original data\n *     data : [\n *         { id : 1, name : 'Project 1', children : [\n *             { id : 11, name : 'Task 11', status : 'wip', prio : 'high' },\n *             { id : 12, name : 'Task 12', status : 'done', prio : 'low' },\n *             { id : 13, name : 'Task 13', status : 'done', prio : 'high' }\n *         ]},\n *         { id : 2, name : 'Project 2', children : [\n *             { id : 21, name : 'Task 21', status : 'wip', prio : 'high' },\n *         ]}\n *     ],\n *\n *     features : {\n *         treeGroup : {\n *             // Fields to build a new tree from\n *             levels : [ 'prio', 'status' ]\n *         }\n *     }\n * });\n *\n * // Resulting data\n * [\n *     { name : 'low', children : [\n *         { name : 'done', children : [\n *             { id : 12, name : 'Task 12', status : 'done', prio : 'low' }\n *         ]}\n *     ]},\n *     { name : 'high', children : [\n *         { name : 'done', children : [\n *             { id : 13, name : 'Task 13', status : 'done', prio : 'high' }\n *         ]},\n *         { name : 'wip', children : [\n *             { id : 11, name : 'Task 11', status : 'wip', prio : 'high' },\n *             { id : 21, name : 'Task 21', status : 'wip', prio : 'low' }\n *         ]}\n *     ]}\n * ]\n * ```\n *\n * ## Important information\n *\n * Using the TreeGroup feature comes with some caveats:\n *\n * * Generated parents are read-only, they cannot be edited using the default UI.\n * * Moving nodes manually in the tree is not supported while it is grouped. The linked records have their own\n *   `parentId` fields, not linked to the original records value.\n * * The generated structure is not meant to be persisted.\n *\n * <div class=\"note\">\n * Please note that this feature is not supported in vertical mode in Scheduler.\n * </div>\n *\n * This feature is <strong>disabled</strong> by default.\n *\n * @extends Core/mixin/InstancePlugin\n *\n * @classtype treeGroup\n * @feature\n */\nexport default class TreeGroup extends InstancePlugin {\n    static $name = 'TreeGroup';\n\n    static configurable = {\n        /**\n         * An array of model field names or functions used to determine the levels in the resulting tree.\n         *\n         * When supplying a function, it will be called for each leaf in the original data, and it is expected to return\n         * an atomic value used to determine which parent the leaf will be added to at that level.\n         *\n         * ```javascript\n         * const grid = new TreeGrid({\n         *     features : {\n         *         treeGroup : {\n         *             levels : [\n         *                 // First level is determined by the value of the status field\n         *                 'status',\n         *                 // Second level by the result of this function\n         *                 // (which puts percentdone 0-9 in one group, 10-19 into another and so on)\n         *                 record => (record.percentDone % 10) * 10\n         *             ]\n         *         }\n         *     }\n         * });\n         * ```\n         *\n         * The function form can also be used as a formatter/renderer of sorts, simply by returning a string:\n         *\n         * ```javascript\n         * const grid = new TreeGrid({\n         *     features : {\n         *         treeGroup : {\n         *             levels : [\n         *                 record => `Status: ${record.status}`\n         *             ]\n         *         }\n         *     }\n         * });\n         * ```\n         *\n         * Assigning `null` restores data to its original state.\n         *\n         * @prp {Array<String|Function(Core.data.Model) : any>} levels\n         */\n        levels : null,\n\n        /**\n         * CSS class to apply to the generated parents.\n         *\n         * @config {String}\n         * @default\n         */\n        parentCls : 'b-generated-parent'\n    };\n\n    static pluginConfig = {\n        assign : ['group', 'clearGroups']\n    }\n\n    static properties = {\n        isApplying    : 0,\n        originalStore : null\n    }\n\n    construct(grid, config) {\n        super.construct(grid, config);\n\n        if (!grid.hasFeature('tree')) {\n            throw new Error('The TreeGroup feature requires the Tree feature to be enabled');\n        }\n    }\n\n    processParentData(parentData) {\n        // Apply cls to allow custom styling of generated parents\n        if (this.parentCls) {\n            parentData.cls = this.parentCls;\n        }\n    }\n\n    processTransformedData(transformedData) {}\n\n    async waitForReadiness() {\n        // Wait for store to finish loading before transforming the data\n        if (this.originalStore.isLoading) {\n            await this.originalStore.await('load', false);\n\n            if (this.isDestroyed) {\n                return;\n            }\n        }\n\n        // For Scheduler, Pro & Gantt, to not have to implement a TreeGroup in Scheduler just to add this\n        const { crudManager } = this.client;\n\n        if (crudManager) {\n            if (crudManager.isLoadingOrSyncing) {\n                await crudManager.await('requestDone');\n\n                if (this.isDestroyed) {\n                    return;\n                }\n            }\n\n            await this.client.project.commitAsync();\n        }\n    }\n\n    async applyLevels(levels) {\n        const\n            me         = this,\n            { client } = me,\n            treeColumn = client.columns.find(col => col instanceof TreeColumn);\n\n        let { store } = client,\n            result    = null;\n\n        me._levels = levels;\n\n        me.isApplying++;\n\n        client.suspendRefresh();\n\n        if (levels && !me.originalStore) {\n            me.originalStore = store;\n            store = new store.constructor({\n                tree       : true,\n                modelClass : store.modelClass\n            });\n            client.store = store;\n        }\n\n        await me.waitForReadiness();\n\n        if (me.isDestroyed) {\n            return;\n        }\n\n        // Applying custom levels\n        if (levels) {\n            // Plug links in to allow transforming them below\n            store.data = me.originalStore.allRecords.flatMap(record => record.isLeaf ? [record.link()] : []);\n\n            // Transform it according to levels\n            result = store.treeify(levels, parentData => {\n                // Use group key as tree columns content\n                ObjectHelper.setPath(parentData, store.modelClass.getFieldDataSource(treeColumn.field), parentData.key);\n\n                // Let the outside world manipulate generated parents data before turning it into a record\n                me.processParentData(parentData);\n            });\n\n            me.processTransformedData(result);\n\n            // Load the transformed result into the \"display store\"\n            store.data = result.children;\n        }\n        // Clearing custom levels\n        else {\n            client.store = me.originalStore;\n            me.originalStore = null;\n        }\n\n        me.isApplying--;\n\n        client.resumeRefresh();\n        client.rowManager.reinitialize();\n\n        return result;\n    }\n\n    updateLevels(levels) {\n        if (levels || !this.isConfiguring) {\n            this.applyLevels(levels);\n        }\n    }\n\n    /**\n     * Transforms the data according to the supplied levels.\n     *\n     * Yields the same result as assigning to {@link #property-levels}.\n     *\n     * ```javascript\n     * // Transform into a tree with two parent levels\n     * grid.group('status', record => (record.percentDone % 10) * 10);\n     * ```\n     *\n     * @param {Array<String|Function(Core.data.Model) : any>} levels Field names or functions use to generate parents in resulting tree.\n     * @on-owner\n     * @category Common\n     */\n    async group(levels) {\n        ObjectHelper.assertArray(levels, 'group()');\n\n        await this.applyLevels(levels);\n    }\n\n    /**\n     * Clears the previously applied transformation, restoring data to its initial state.\n     *\n     * Yields the same result as assigning `null` to {@link #property-levels}.\n     *\n     * ```javascript\n     * // Restore original data\n     * grid.clearGroupers();\n     * ```\n     * @on-owner\n     * @category Common\n     */\n    async clearGroups() {\n        if (this.isGrouped) {\n            await this.applyLevels(null);\n        }\n    }\n\n    get isGrouped() {\n        return Boolean(this._levels);\n    }\n}\n\nGridFeatureManager.registerFeature(TreeGroup);\n"],"names":["RowReorder","Delayable","InstancePlugin","construct","grid","config","this","super","arguments","doDestroy","_this$dragHelper","dragHelper","destroy","init","me","DragHelper","new","name","cloneTarget","dragThreshold","proxyTopOffset","targetSelector","lockX","dragWithin","bodyContainer","allowDropOutside","scrollManager","outerElement","targetSubGridElement","touchStartDelay","isElementDraggable","bind","monitoringConfig","scrollables","element","scrollable","direction","setXY","x","y","context","started","elementRect","Rectangle","from","pointerDownOffset","startPageY","window","pageYOffset","getBoundingClientRect","top","DomHelper","setTranslateXY","ignoreSamePositionDrop","createProxy","clone","cloneNode","container","document","createElement","classList","add","removeAttribute","style","transform","appendChild","selectedRecords","length","clone2","removeClsGlobally","internalListeners","beforedragstart","dragstart","drag","drop","reset","prio","thisObj","dragHelperConfig","relayEvents","dropIndicator","className","dropOverTargetCls","targetSubGrid","regions","subGrids","el","event","closest","gripOnly","firstCell","gripperStyle","getComputedStyle","offsetX","rtl","width","borderOffsetX","roundPx","parseFloat","onBeforeDragStart","source","subGridEl","disabled","readOnly","isTreeGrouped","contains","startRecord","getRecordFromElement","isSpecialRow","originalRowTop","rowManager","getRowFor","selectionMode","checkboxOnly","startEvent","pointerType","isSelected","selectRow","record","addToSelection","shiftKey","ctrlKey","filter","r","records","includes","push","sort","r1","r2","store","indexOf","onDragStart","_cellMenu$hideContext","_headerMenu$hideConte","cellEdit","cellMenu","headerMenu","features","cellEditDisabledState","hideContextMenu","call","focusedCell","querySelector","remove","firstElementChild","onDrag","clientY","overRecord","dataIndex","after","over","insertBefore","valid","row","getRowAt","rowTop","_bodyRectangle","quarter","height","topQuarter","middleY","bottomQuarter","getAt","tree","isParent","dropOnLeaf","isGrouped","isGroupHeader","meta","collapsed","pageY","first","count","last","getRow","_rowManager$getRowByI","getRowById","removeCls","nextSibling","some","rec","parent","clearTimeout","hoverTimer","isExpanded","setTimeout","expand","hoverExpandTimeout","toggleCls","setTranslateY","Math","max","visibility","toggle","reorderValid","onDrop","async","client","oldPositionContext","map","_record$parent","parentId","id","parentIndex","trigger","animateProxyTo","align","finalizeReorder","result","_context$parent$child","_context$parent$child2","bubbleWhile","tryInsertChild","children","forEach","move","_rowIndex","_focusedCell","focusCell","columnId","clearSorters","finalize","onReset","onPaint","firstPaint","updateShowGrip","show","_defineProperty","showGrip","featureClass","_$name","GridFeatureManager","registerFeature","TreeGroup","hasFeature","Error","processParentData","parentData","parentCls","cls","processTransformedData","transformedData","waitForReadiness","originalStore","isLoading","await","isDestroyed","crudManager","isLoadingOrSyncing","project","commitAsync","applyLevels","levels","treeColumn","columns","find","col","TreeColumn","_levels","isApplying","suspendRefresh","constructor","modelClass","data","allRecords","flatMap","isLeaf","link","treeify","ObjectHelper","setPath","getFieldDataSource","field","key","resumeRefresh","reinitialize","updateLevels","isConfiguring","group","assertArray","clearGroups","Boolean","assign"],"mappings":"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"}