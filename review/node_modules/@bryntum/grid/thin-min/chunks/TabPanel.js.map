{"version":3,"file":"TabPanel.js","sources":["../../../../Core/lib/Core/util/WebSocketManager.js","../../../../Core/lib/Core/widget/FieldSet.js","../../../../Core/lib/Core/widget/Radio.js","../../../../Core/lib/Core/widget/RadioGroup.js","../../../../Core/lib/Core/widget/Tab.js","../../../../Core/lib/Core/widget/TabBar.js","../../../../Core/lib/Core/widget/TabPanel.js"],"sourcesContent":["import Base from '../Base.js';\nimport Events from '../mixin/Events.js';\n\n/**\n * @module Core/helper/WebSocketManager\n */\n\n/**\n * This class allows to send and receive messages from websocket server passing responses via events. This helper is\n * meant to be used with a demo websocket server. It sends messages that are JSON strings including \"command\" key and\n * arbitrary data keys. For example:\n *\n * ```\n * // request string to notify other clients that new client is connected\n * \"{ \\\"command\\\": \\\"hello\\\", \\\"userName\\\": \\\"new user\\\" }\"\n *\n * // response message from the websocket server with list of connected users\n * \"{ \\\"command\\\": \\\"users\\\", \\\"users\\\": [\\\"new user\\\"] }\"\n * ```\n *\n * Usage:\n * ```javascript\n * connector = new WebSocketManager({\n *     address     : 'ws://localhost:8080',\n *     userName    : 'Test client',\n *     autoConnect : false\n * });\n *\n * const opened = await connector.open();\n *\n * if (!opened) {\n *     console.log('Could not open connection');\n * }\n *\n * connector.on({\n *     message({ data }) {\n *         console.log(data);\n *     }\n * });\n *\n * // Sends \"{ \\\"command\\\": \\\"hello\\\", \\\"userName\\\": \\\"mark\\\" }\" string to the websocket server\n * // When response arrives helper will log following message: \"{ command: 'users', users: ['mark'] }\"\n * connector.send('hello', { userName : 'mark' });\n * ```\n * @class\n * @extends Core/Base\n * @mixes Core/mixin/Events\n * @private\n */\nexport default class WebSocketManager extends Events(Base) {\n    // This allows to hook into for testing purposes\n    static webSocketImplementation = typeof WebSocket === 'undefined' ? null : WebSocket\n\n    static configurable = {\n        /**\n         * WebSocket server address\n         * @config {String}\n         */\n        address : '',\n\n        /**\n         * User name allowing to identify client\n         * @config {String}\n         */\n        userName : 'User',\n\n        /**\n         * Connect to websocket server immediately after instantiation\n         * @config {Boolean}\n         */\n        autoConnect : true\n    }\n\n    construct(config = {}) {\n        const me = this;\n\n        super.construct(config);\n\n        me.onWsOpen = me.onWsOpen.bind(me);\n        me.onWsClose = me.onWsClose.bind(me);\n        me.onWsMessage = me.onWsMessage.bind(me);\n        me.onWsError = me.onWsError.bind(me);\n\n        if (me.autoConnect && me.address) {\n            me.open();\n        }\n    }\n\n    doDestroy() {\n        const me = this;\n\n        if (me.connector) {\n            me.detachSocketListeners(me.connector);\n            me.connector.close();\n            me.connector = null;\n        }\n        super.doDestroy();\n    }\n\n    //#region Websocket state\n\n    get isConnecting() {\n        return this.connector?.readyState === this.constructor.webSocketImplementation.CONNECTING;\n    }\n\n    get isOpened() {\n        return this.connector?.readyState === this.constructor.webSocketImplementation.OPEN;\n    }\n\n    get isClosing() {\n        return this.connector?.readyState === this.constructor.webSocketImplementation.CLOSING;\n    }\n\n    get isClosed() {\n        return this.connector?.readyState === this.constructor.webSocketImplementation.CLOSED;\n    }\n\n    //#endregion\n\n    //#region Websocket init\n\n    createWebSocketConnector() {\n        const connector = this.connector = new this.constructor.webSocketImplementation(this.address);\n\n        this.attachSocketListeners(connector);\n    }\n\n    destroyWebSocketConnector() {\n        this.detachSocketListeners(this.connector);\n\n        this.connector.close();\n\n        this.connector = null;\n    }\n\n    attachSocketListeners(connector) {\n        const me = this;\n\n        connector.addEventListener('open', me.onWsOpen);\n        connector.addEventListener('close', me.onWsClose);\n        connector.addEventListener('message', me.onWsMessage);\n        connector.addEventListener('error', me.onWsError);\n    }\n\n    detachSocketListeners(connector) {\n        const me = this;\n\n        connector.removeEventListener('open', me.onWsOpen);\n        connector.removeEventListener('close', me.onWsClose);\n        connector.removeEventListener('message', me.onWsMessage);\n        connector.removeEventListener('error', me.onWsError);\n    }\n\n    //#endregion\n\n    //#region Websocket methods\n\n    /**\n     * Connect to the server and start listening for messages\n     * @returns {Promise} Returns true if connection was successful and false otherwise\n     */\n    async open() {\n        const me = this;\n\n        if (me._openPromise) {\n            return me._openPromise;\n        }\n\n        if (!me.address) {\n            console.warn('Server me.address cannot be empty');\n            return;\n        }\n\n        if (me.isOpened) {\n            return true;\n        }\n\n        me.createWebSocketConnector();\n\n        let detacher;\n\n        // Wait for `open` or `close` event\n        me._openPromise = new Promise(resolve => {\n            detacher = me.ion({\n                open() {\n                    resolve(true);\n                },\n                error() {\n                    resolve(false);\n                }\n            });\n        }).then(value => {\n            // Detach listeners\n            detacher();\n\n            // Cleanup the promise\n            me._openPromise = null;\n\n            // If quit early with a timeout then remove reference to the WebSocket instance\n            if (!value) {\n                me.destroyWebSocketConnector();\n            }\n\n            return value;\n        }).catch(() => {\n            me._openPromise = null;\n            me.destroyWebSocketConnector();\n        });\n\n        return me._openPromise;\n    }\n\n    /**\n     * Close socket and disconnect from the server\n     */\n    close() {\n        if (this.connector) {\n            this.destroyWebSocketConnector();\n            this.trigger('close');\n        }\n    }\n\n    /**\n     * Send data to the websocket server\n     * @param {String} command\n     * @param {*} data\n     */\n    send(command, data = {}) {\n        this.connector?.send(JSON.stringify({ command, ...data }));\n    }\n\n    //#endregion\n\n    //#region websocket event listeners\n\n    onWsOpen(event) {\n        this.trigger('open', { event });\n    }\n\n    onWsClose(event) {\n        this.trigger('close', { event });\n    }\n\n    onWsMessage(message) {\n        try {\n            const data = JSON.parse(message.data);\n            this.trigger('message', { data });\n        }\n        catch (error) {\n            this.trigger('error', { error });\n        }\n    }\n\n    onWsError(error) {\n        this.trigger('error', { error });\n    }\n\n    //#endregion\n}\n","import Panel from './Panel.js';\nimport Labelable from './mixin/Labelable.js';\nimport DomHelper from '../helper/DomHelper.js';\n\n/**\n * @module Core/widget/FieldSet\n */\n\n/**\n * The `FieldSet` widget wraps an <code>&lt;fieldset&gt;</code> element. A fieldset is a specially styled\n * {@link Core.widget.Panel} intended to hold form fields.\n *\n * @extends Core/widget/Panel\n * @mixes Core/widget/mixin/Labelable\n * @classType fieldset\n * @widget\n */\nexport default class FieldSet extends Panel.mixin(Labelable) {\n    //region Config\n    static get $name() {\n        return 'FieldSet';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'fieldset';\n    }\n\n    static get configurable() {\n        return {\n            bodyTag   : 'fieldset',\n            focusable : false,\n\n            /**\n             * Setting this config to `true` assigns a horizontal box layout (`flex-flow: row`) to the items in this\n             * container, while `false` assigns a vertical box layout (`flex-flow: column`).\n             *\n             * By default, this value is automatically determined based on the {@link #config-label} and\n             * {@link #config-labelPosition} configs.\n             * @config {Boolean}\n             */\n            inline : null,\n\n            inlineInternal : null,\n\n            layout : {\n                type       : 'box',\n                horizontal : false\n            }\n        };\n    }\n\n    static get prototypeProperties() {\n        return {\n            flexRowCls : 'b-hbox',\n            flexColCls : 'b-vbox'\n        };\n    }\n\n    //endregion\n\n    //region Composition\n\n    get bodyConfig() {\n        const\n            result = super.bodyConfig,\n            { className } = result,\n            { inlineInternal: inline, hasLabel, title } = this;\n\n        delete result.html;\n\n        className['b-inline'] = inline;\n        className['b-fieldset-has-label'] = hasLabel;\n\n        if (title) {\n            result.children = {\n                // We render the <legend> element for a11y (not 100% sure it is needed)\n                legendElement : {\n                    tag   : 'legend',\n                    text  : title,\n                    class : {\n                        'b-fieldset-legend' : 1\n                    }\n                }\n            };\n        }\n\n        return result;\n    }\n\n    compose() {\n        const { inlineInternal: inline, label, labelCls, labelWidth } = this;\n\n        return {\n            class : {\n                'b-field' : label,\n                'b-vbox'  : !inline  // override panel\n            },\n            children : {\n                'labelElement > headerElement' : (label || null) && {\n                    tag   : 'label',\n                    html  : label,\n                    class : {\n                        'b-label'       : 1,\n                        'b-align-start' : 1,\n                        [labelCls]      : labelCls\n                    },\n                    style : {\n                        width : DomHelper.unitize('width', labelWidth)[1]\n                    }\n                }\n            }\n        };\n    }\n\n    //endregion\n\n    syncInlineInternal() {\n        this.inlineInternal = this.inline ?? (this.label != null && this.labelPosition === 'before');\n    }\n\n    updateDisabled(value, was) {\n        super.updateDisabled(value, was);\n\n        // Needs {}'s to avoid a \"return false\" that ends iteration\n        this.eachWidget(item => {\n            item.disabled = value;\n        }, /* deep = */false);\n    }\n\n    updateInline() {\n        this.syncInlineInternal();\n    }\n\n    updateInlineInternal(inline) {\n        this.layout.horizontal = inline;\n    }\n\n    updateLabel() {\n        this.syncInlineInternal();\n    }\n\n    updateLabelPosition() {\n        this.syncInlineInternal();\n    }\n}\n\n// Register this widget type with its Factory\nFieldSet.initClass();\n","import Checkbox from './Checkbox.js';\n\n/**\n * @module Core/widget/Radio\n */\n\n/**\n * The `Radio` widget wraps an <code>&lt;input type=\"radio\"&gt;</code> element.\n *\n * Color can be specified and you can optionally configure {@link #config-text} to display in a label to the right of\n * the radio button instead of, or in addition to, a standard field {@link #config-label}.\n *\n * {@inlineexample Core/widget/Radio.js vertical}\n *\n * ## Nested Items\n * A radio button can also have a {@link #config-container} of additional {@link Core.widget.Container#config-items}.\n * These items can be displayed immediately following the field's label (which is the default when there is only one\n * item) or below the radio button. This can be controlled using the {@link #config-inline} config.\n *\n * In the demo below notice how additional fields are displayed for the checked radio button:\n *\n * {@inlineexample Core/widget/Radio-items.js vertical}\n *\n * For a simpler way to create a set of radio buttons, see the {@link Core.widget.RadioGroup} widget.\n *\n * @extends Core/widget/Checkbox\n * @classType radio\n * @widget\n */\nexport default class Radio extends Checkbox {\n    //region Config\n    static get $name() {\n        return 'Radio';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'radio';\n    }\n\n    // Factoryable type alias\n    static get alias() {\n        return 'radiobutton';\n    }\n\n    static get configurable() {\n        return {\n            inputType : 'radio',\n\n            /**\n             * Set this to `true` so that clicking a checked radio button will clear its checked state.\n             * @config {Boolean}\n             * @default false\n             */\n            clearable : null,\n\n            uncheckedValue : undefined  // won't store to Container#values when unchecked\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    get textLabelCls() {\n        return super.textLabelCls + ' b-radio-label';\n    }\n\n    //endregion\n\n    internalOnClick(info) {\n        if (super.internalOnClick(info) !== false) {\n            if (this.checked && this.clearable) {\n                this.checked = false;\n            }\n        }\n    }\n\n    updateName(name) {\n        this.toggleGroup = name;\n    }\n\n    // Empty override to get rid of clear trigger\n    updateClearable() {}\n}\n\n// Register this widget type with its Factory\nRadio.initClass();\n","import ObjectHelper from '../helper/ObjectHelper.js';\nimport FieldSet from './FieldSet.js';\nimport Widget from './Widget.js';\n\nimport './Radio.js';\nimport './layout/Box.js';\n\n/**\n * @module Core/widget/RadioGroup\n */\n\n/**\n * The `RadioGroup` widget contains a set of related `{@link Core/widget/Radio}` button widgets.\n *\n * For example, to present three choices and have the user select one of them:\n *\n * ```javascript\n *  {\n *      type    : 'radiogroup',\n *      title   : 'Resolve Conflict',\n *      name    : 'resolution',\n *      value   : 'A',  // the default choice\n *      options : {\n *          A : 'Keep the original version',\n *          B : 'Use the new version',\n *          C : 'Reconcile individual conflicts'\n *      }\n *  }\n * ```\n *\n * {@inlineexample Core/widget/RadioGroup.js}\n *\n * The {@link #config-name} config is required for this widget and it will be assigned to all radio buttons created by\n * processing the {@link #config-options} config.\n *\n * ## Nested Items\n * Radio buttons can also have a {@link Core.widget.Radio#config-container} of additional\n * {@link Core.widget.Container#config-items}. These items can be displayed immediately following the field's label\n * (which is the default when there is only one item) or below the radio button. This can be controlled using the\n * {@link Core.widget.Radio#config-inline} config.\n *\n * In the demo below notice how additional fields are displayed for the checked radio button:\n *\n * {@inlineexample Core/widget/RadioGroupNested.js vertical}\n *\n * @extends Core/widget/FieldSet\n * @classType radiogroup\n * @widget\n */\nexport default class RadioGroup extends FieldSet {\n    //region Config\n    static get $name() {\n        return 'RadioGroup';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'radiogroup';\n    }\n\n    static get configurable() {\n        return {\n            defaultType : 'radio',\n\n            /**\n             * Set this to `true` so that clicking the currently checked radio button will clear the check from all\n             * radio buttons in the group.\n             * @config {Boolean}\n             * @default false\n             */\n            clearable : null,\n\n            /**\n             * The name by which this widget's {@link #property-value} is accessed using the parent container's\n             * {@link Core.widget.Container#property-values}.\n             *\n             * The config must be provided as it is used to set the {@link Core.widget.Radio#config-name} of the\n             * child {@link Core.widget.Radio radio buttons}.\n             * @config {String}\n             */\n            name : null,\n\n            /**\n             * The set of radio button options for this radio button group. This is a shorthand for defining these in\n             * the {@link Core.widget.Container#config-items}. The keys of this object hold the radio button's\n             * {@link Core.widget.Radio#config-checkedValue} while the object values are a string for the radio button's\n             * {@link Core.widget.Radio#config-text} or a config object for that radio button.\n             *\n             * The {@link #property-value} of this radio button group will be one of the keys in this object or `null`\n             * if no radio button is checked.\n             *\n             * For example, consider the following configuration:\n             * ```javascript\n             *  {\n             *      type    : 'radiogroup',\n             *      name    : 'resolution',\n             *      value   : 'A',\n             *      options : {\n             *          A : 'Keep the original version',\n             *          B : 'Use the new version',\n             *          C : 'Reconcile individual conflicts'\n             *      }\n             *  }\n             * ```\n             *\n             * The above is equivalent to this configuration below using {@link #config-items}:\n             * ```javascript\n             *  {\n             *      type  : 'radiogroup',\n             *      items : [{\n             *          text         : 'Keep the original version',\n             *          name         : 'resolution',\n             *          ref          : 'resolution_A',\n             *          checked      : true,\n             *          checkedValue : 'A'\n             *      }, {\n             *          text         : 'Use the new version',\n             *          name         : 'resolution',\n             *          ref          : 'resolution_B',\n             *          checkedValue : 'B'\n             *      }, {\n             *          text         : 'Reconcile individual conflicts',\n             *          name         : 'resolution',\n             *          ref          : 'resolution_C',\n             *          checkedValue : 'C'\n             *      }]\n             *  }\n             * ```\n             * @config {Object<String,String|RadioConfig>} options\n             */\n            options : {\n                value : null,\n\n                $config : {\n                    merge : 'items'\n                }\n            },\n\n            defaultBindProperty : 'value'\n        };\n    }\n\n    get existingOptions() {\n        const { name } = this;\n\n        return this.ensureItems().filter(c => c.name === name);\n    }\n\n    get refPrefix() {\n        return `${this.name || this.ref || this.id}_`;\n    }\n\n    get selected() {\n        return this.existingOptions.filter(c => c.input.checked)[0] || null;\n    }\n\n    /**\n     * This property corresponds to the {@link Core.widget.Radio#config-checkedValue} of the currently\n     * {@link Core.widget.Radio#property-checked} radio button.\n     * @property {String}\n     */\n    get value() {\n        const { selected } = this;\n\n        return selected ? selected.checkedValue : null;\n    }\n\n    set value(v) {\n        this.existingOptions.forEach(c => {\n            c.isConfiguring = this.isConfiguring;\n            c.checked = c.checkedValue === v;\n            c.isConfiguring = false;\n        });\n    }\n\n    ensureItems() {\n        this.getConfig('options');\n\n        return super.ensureItems();\n    }\n\n    changeOptions(options, was) {\n        if (!(options && was && ObjectHelper.isDeeplyEqual(was, options))) {\n            return options;\n        }\n    }\n\n    convertOption(key, option, existing) {\n        const\n            me       = this,\n            { name } = me,\n            ret      = {\n                name,\n                type         : 'radio',\n                value        : key === me.value,\n                ref          : `${me.refPrefix}${key}`,\n                checkedValue : key\n            };\n\n        if (typeof option === 'string') {\n            ret.text = option;\n        }\n        else {\n            ObjectHelper.assign(ret, option);\n        }\n\n        return existing ? Widget.reconfigure(existing, ret) : ret;\n    }\n\n    isOurRadio(item) {\n        // Radio groups could be nested using field containers, so we need isRadio and name equality check:\n        return item.isRadio && item.name === this.name;\n    }\n\n    isolateFieldChange(field) {\n        // if this is one of our radio buttons, swallow the field change:\n        return this.isOurRadio(field);\n    }\n\n    onChildAdd(item) {\n        super.onChildAdd(item);\n\n        if (this.isOurRadio(item)) {\n            item.ion({\n                name         : item.id,\n                beforeChange : 'onRadioItemBeforeChange',\n                change       : 'onRadioItemChange',\n                click        : 'onRadioClick',\n                thisObj      : this\n            });\n        }\n    }\n\n    onChildRemove(item) {\n        if (this.isOurRadio(item)) {\n            this.detachListeners(item.id);\n        }\n\n        super.onChildRemove(item);\n    }\n\n    onRadioClick(ev) {\n        const { source } = ev;\n\n        if (source.checked && this.clearable && source.clearable == null) {\n            source.checked = false;\n        }\n    }\n\n    onRadioItemBeforeChange(ev) {\n        if (ev.checked) {\n            const\n                me = this,\n                { lastValue } = me;\n\n            if (!me.reverting && me.trigger('beforeChange', me.wrapRadioEvent(ev)) === false) {\n                if (lastValue != null && lastValue !== me.value) {\n                    me.reverting = true;\n\n                    ev.source.uncheckToggleGroupMembers();\n                    me.value = lastValue;\n                    me.lastValue = lastValue;\n\n                    me.reverting = false;\n\n                    return false;\n                }\n            }\n        }\n    }\n\n    onRadioItemChange(ev) {\n        const me = this;\n\n        if (ev.checked && !me.reverting) {\n            me.triggerFieldChange(me.wrapRadioEvent(ev));\n            me.lastValue = me.value;\n        }\n    }\n\n    wrapRadioEvent(ev) {\n        return {\n            from       : ev,\n            item       : ev.source,\n            userAction : ev.userAction,\n            lastValue  : this.lastValue,\n            value      : this.value\n        };\n    }\n\n    updateOptions() {\n        const\n            me                     = this,\n            { options, refPrefix } = me,\n            existingOptions        = me.existingOptions.reduce((m, c) => {\n                m[c.ref.substring(refPrefix.length)] = c;\n                return m;\n            }, {});\n\n        let index = 0,\n            key, option;\n\n        if (options) {\n            for (key in options) {\n                option = me.convertOption(key, options[key], existingOptions[key]);\n\n                delete existingOptions[key];\n                me.insert(option, index++);\n            }\n        }\n\n        const existing = Object.values(existingOptions);\n\n        if (existing?.length) {\n            me.remove(existing);\n            existing.forEach(c => c.destroy());\n        }\n    }\n\n    //endregion\n}\n\n// Register this widget type with its Factory\nRadioGroup.initClass();\n","import DomClassList from '../helper/util/DomClassList.js';\nimport FunctionHelper from '../helper/FunctionHelper.js';\nimport Button from './Button.js';\n\n/**\n * @module Core/widget/Tab\n */\n\n/**\n * This widget class is used to present items in a {@link Core.widget.TabPanel} on its {@link Core.widget.TabBar tabBar}.\n * A reference to this widget is stored via the {@link Core.widget.Widget#config-tab} config on the tab panel's items.\n *\n * ```javascript\n * let tabPanel = new TabPanel({\n *  items: [\n *      {\n *          title: 'Settings',\n *          // Tab configs\n *          tab : {\n *              // Show an icon in the tab\n *              icon : 'b-fa b-fa-cog'\n *          },\n *          items: [\n *              ...\n *          ]\n *      }\n *  ]\n * });\n * ```\n * @extends Core/widget/Button\n * @classType tab\n */\nexport default class Tab extends Button {\n    //region Config\n    static get $name() {\n        return 'Tab';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'tab';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * This config is set to `true` when this tab represents the `activeTab` of a {@link Core.widget.TabPanel}. It\n             * is managed by the tab panel is not set directly.\n             * @config {Boolean} active\n             * @default false\n             */\n            active : null,\n\n            /**\n             * This config is set to the ordinal position of this tab in the {@link Core.widget.TabPanel}. It is managed\n             * by the tab panel is not set directly.\n             * @config {Number} index\n             */\n            index : null,\n\n            /**\n             * This config is set to `true` when this tab represents the first tab of a {@link Core.widget.TabPanel}. It\n             * is managed by the tab panel is not set directly.\n             * @config {Boolean} isFirst\n             */\n            isFirst : null,\n\n            /**\n             * This config is set to `true` when this tab represents the last tab of a {@link Core.widget.TabPanel}. It\n             * is managed by the tab panel is not set directly.\n             * @config {Boolean} isLast\n             */\n            isLast : null,\n\n            /**\n             * The {@link Core.widget.Widget} in the {@link Core.widget.TabPanel} corresponding to this tab. This is\n             * managed by the tab panel is not set directly.\n             * @config {Core.widget.Widget} item\n             */\n            item : {\n                value : null,\n\n                $config : 'nullify'\n            },\n\n            itemCls : null,\n\n            /**\n             * The tab panel that owns this tab.\n             * @config {Core.widget.TabPanel} tabPanel\n             */\n            tabPanel : null,\n\n            /**\n             * The config property on this tab that will be set to the value of the {@link #config-titleSource} property\n             * of this tab's {@link #config-item}.\n             *\n             * By default, the {@link #config-text} property of the tab is set to the {@link Core.widget.Widget#config-title}\n             * property of its {@link #config-item}.\n             * @config {String} titleProperty\n             * @default\n             */\n            titleProperty : 'text',\n\n            /**\n             * The config property on this tab's {@link #config-item} that is used to set the value of the\n             * {@link #config-titleProperty} of this tab.\n             *\n             * By default, the {@link #config-text} property of the tab is set to the {@link Core.widget.Widget#config-title}\n             * property of its {@link #config-item}.\n             * @config {String} titleSource\n             * @default\n             */\n            titleSource : 'title',\n\n            role : 'tab'\n        };\n    }\n\n    compose() {\n        const\n            { active, cls, index, isFirst, isLast } = this,\n            setSize = this.owner.visibleChildCount;\n\n        return {\n            tabindex : 0,\n\n            'aria-selected' : active,\n            'aria-setsize'  : setSize,\n            'aria-posinset' : index + 1,\n\n            class : {\n                'b-tabpanel-tab' : 1,\n                'b-active'       : active,\n                'b-tab-first'    : isFirst,\n                'b-tab-last'     : isLast,\n\n                ...cls   // cls is a DomClassList\n            },\n\n            dataset : {\n                index\n            }\n        };\n    }\n\n    //endregion\n\n    updateIndex(index) {\n        this.isFirst = !index;\n    }\n\n    updateItem(item, was) {\n        const me = this;\n\n        if (was?.tab === me) {\n            was.tab = null;\n        }\n\n        if (item) {\n            item.tab = me;\n\n            me[me.titleProperty] = item[me.titleSource];\n            me.itemCls = item.cls;\n            me.ariaElement.setAttribute('aria-controls', item.id);\n            item.role = 'tabpanel';\n        }\n\n        me.itemChangeDetacher?.();\n        me.itemChangeDetacher = item && FunctionHelper.after(item, 'onConfigChange', 'onItemConfigChange', me, {\n            return : false\n        });\n\n        me.itemHideDetacher?.();\n        me.itemHideDetacher = item?.ion({\n            beforeChangeHidden   : 'onItemBeforeChangeHidden',\n            beforeHide           : 'onItemBeforeHide',\n            beforeUpdateDisabled : 'onItemBeforeUpdateDisabled',\n            thisObj              : me,\n            prio                 : 1000 // We must know before the layout intercepts and activates a sibling\n        });\n\n        me.syncMinMax();\n    }\n\n    updateItemCls(cls, was) {\n        const\n            { element } = this,\n            classList = element && DomClassList.from(element?.classList, /* returnEmpty= */true);\n\n        if (element) {\n            classList.remove(was).add(cls);\n            element.className = classList.value;\n        }\n    }\n\n    updateRotate(rotate, was) {\n        if (!rotate !== !was) {\n            this.syncMinMax();\n        }\n    }\n\n    syncMinMax() {\n        const\n            me = this,\n            { rotate, tabPanel } = me;\n\n        // We have to read the configs directly since there are getters that read the DOM styles:\n        let { _minWidth : minWidth, _minHeight : minHeight, _maxWidth : maxWidth, _maxHeight : maxHeight } = me;\n\n        // When a tab rotation changes, we need to pivot the min/max width values with the height values\n        if (tabPanel) {\n            const { tabMinWidth, tabMaxWidth } = tabPanel;\n\n            if (tabMinWidth != null) {\n                if (rotate) {\n                    // if we were previously not rotated, the tabMinWidth may be effecting our minWidth:\n                    if (minWidth === tabMinWidth) {\n                        minWidth = null;\n                    }\n\n                    // noinspection JSSuspiciousNameCombination\n                    minHeight = tabMinWidth;\n                }\n                else {\n                    // if we were previously rotated, the tabMinWidth may be effecting our minHeight:\n                    if (minHeight === tabMinWidth) {\n                        minHeight = null;\n                    }\n\n                    minWidth = tabMinWidth;\n                }\n            }\n\n            if (tabMaxWidth != null) {\n                if (rotate) {\n                    if (maxWidth === tabMaxWidth) {\n                        maxWidth = null;\n                    }\n\n                    // noinspection JSSuspiciousNameCombination\n                    maxHeight = tabMaxWidth;\n                }\n                else {\n                    if (maxHeight === tabMaxWidth) {\n                        maxHeight = null;\n                    }\n\n                    maxWidth = tabMaxWidth;\n                }\n            }\n\n            me.minWidth = minWidth;\n            me.minHeight = minHeight;\n            me.maxWidth = maxWidth;\n            me.maxHeight = maxHeight;\n        }\n    }\n\n    onItemBeforeChangeHidden({ source : hidingChild, hidden }) {\n        // If it's a hide/show that is not part of the layout's deactivating/activating, we must hide/show the tab\n        if (!hidingChild.$isDeactivating && !hidingChild.$isActivating) {\n            const { tabPanel } = this;\n\n            this.hidden = hidden;\n\n            // if tab to hide is active, let's active previous visible and enabled tab\n            if (hidden && hidingChild === tabPanel.activeItem) {\n                tabPanel.activateAvailableTab(hidingChild);\n            }\n        }\n    }\n\n    onItemBeforeHide() {\n        // If it's a hide that is not part of the layout's deactivating, we hide the tab\n        if (!this.item.$isDeactivating) {\n            this.hide();\n        }\n    }\n\n    onItemBeforeUpdateDisabled({ source : disablingChild, disabled }) {\n        const { tabPanel } = this;\n\n        this.disabled = disabled;\n\n        // if tab to disable is active, let's active previous visible and enabled tab\n        if (disablingChild === tabPanel.activeItem) {\n            tabPanel.activateAvailableTab(disablingChild);\n        }\n    }\n\n    onItemConfigChange({ name, value }) {\n        if (name === this.titleSource) {\n            this[this.titleProperty] = value;\n        }\n    }\n}\n\n// Register this widget type with its Factory\nTab.initClass();\n","import Toolbar from './Toolbar.js';\nimport ArrayHelper from '../helper/ArrayHelper.js';\n\nimport './Tab.js';\n\n/**\n * @module Core/widget/TabBar\n */\n\nconst isTab = t => t.isTab;\n\n/**\n * A special toolbar used by {@link Core.widget.TabPanel} to present {@link Core.widget.Tab tabs} for the container's\n * items.\n *\n * The {@link Core.widget.Container#config-items} of a tab bar are typically managed by the tab panel, however,\n * items can be added that do not correspond to items in the tab panel. The {@link Core.widget.Widget#config-weight}\n * config of each tab defaults to 0 or the weight of its corresponding item.\n *\n * @extends Core/widget/Toolbar\n * @classType tabbar\n */\nexport default class TabBar extends Toolbar {\n    static get $name() {\n        return 'TabBar';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'tabbar';\n    }\n\n    static get configurable() {\n        return {\n            defaultType : 'tab',\n\n            overflow : 'scroll',\n\n            role : 'tablist',\n\n            ignoreParentReadOnly : true\n        };\n    }\n\n    get firstTab() {\n        return this.tabAt(0);\n    }\n\n    get lastTab() {\n        return this.tabAt(-1);\n    }\n\n    get tabCount() {\n        return this._items.countOf(isTab);\n    }\n\n    get tabs() {\n        return ArrayHelper.from(this._items, isTab);\n    }\n\n    compose() {\n        return {\n            children : {\n                toolbarContent : {\n                    class : {\n                        'b-tabpanel-tabs' : 1\n                    }\n                }\n            }\n        };\n    }\n\n    indexOfTab(tab) {\n        return this._items.indexOf(tab, isTab);\n    }\n\n    onChildAdd(child) {\n        super.onChildAdd(child);\n\n        if (child.index == null) {\n            this.syncTabs();\n        }\n    }\n\n    onChildRemove(child) {\n        super.onChildRemove(child);\n\n        this.syncTabs();\n    }\n\n    onFocusIn() {\n        const { activeIndex } = this.owner;\n\n        // It must have a numeric active index set up\n        if (!isNaN(activeIndex)) {\n            this.tabs[activeIndex].focus();\n        }\n    }\n\n    syncTabs() {\n        const { tabs } = this;\n\n        for (let i = 0, n = tabs.length; i < n; ++i) {\n            tabs[i].index = i;\n            tabs[i].isFirst = !i;\n            tabs[i].isLast = i === n - 1;\n        }\n    }\n\n    tabAt(index) {\n        return this._items.find(isTab, index) || null;\n    }\n}\n\n// Register this widget type with its Factory\nTabBar.initClass();\n","import ArrayHelper from '../helper/ArrayHelper.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\nimport Panel from './Panel.js';\nimport Tab from './Tab.js';\n\nimport './TabBar.js';\nimport './layout/Card.js';\nimport GlobalEvents from '../GlobalEvents.js';\n\n/**\n * @module Core/widget/TabPanel\n */\n\n/**\n * A tab panel widget which displays a collection of tabs, each of which can contain other widgets (or simple HTML). This\n * widget has a {@link Core.widget.TabBar tab bar} on top of its contents, and each {@link Core.widget.Tab tab} can be\n * customized using the {@link Core.widget.Tab#config-tab} config.\n *\n * @extends Core/widget/Container\n * @example\n * let tabPanel = new TabPanel({\n *  items: [\n *      {\n *          title: 'First',\n *          items: [\n *              { type: 'textfield', label: 'Name' },\n *              ...\n *          ]\n *      }, {\n *          title: 'Settings',\n *          tab : {\n *              // Show an icon in the tab\n *              icon : 'b-fa b-fa-cog'\n *          },\n *          items: [\n *              ...\n *          ]\n *      }\n *  ]\n * });\n *\n * The tab selector buttons are focusable elememts. `Enter` or `Space` activates a tab, and moves\n * focus into the newly visible tab item.\n *\n * @classType tabpanel\n * @inlineexample Core/widget/TabPanel.js\n * @widget\n */\nexport default class TabPanel extends Panel {\n    //region Config\n    static get $name() {\n        return 'TabPanel';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'tabpanel';\n    }\n\n    // Factoryable type alias\n    static get alias() {\n        return 'tabs';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * The index of the initially active tab.\n             * @member {Number} activeTab\n             */\n            /**\n             * The index of the initially active tab.\n             * @config {Number}\n             * @default\n             */\n            activeTab : 0,\n\n            /**\n             * Specifies whether to slide tabs in and out of visibility.\n             * @config {Boolean}\n             * @default\n             */\n            animateTabChange : true,\n\n            /**\n             * Set the height of all tabs to match the tab with the highest content.\n             * @config {Boolean}\n             * @default\n             */\n            autoHeight : false,\n\n            defaultType : 'container',\n\n            focusable : false,\n\n            itemCls : 'b-tabpanel-item',\n\n            layout : {\n                type : 'card'\n            },\n\n            // Prevent child panels from displaying a header unless explicitly configured with one\n            suppressChildHeaders : true,\n\n            tabBar : {\n                type   : 'tabbar',\n                weight : -2000\n            },\n\n            /**\n             * Min width of a tab title. 0 means no minimum width. This is default.\n             * @config {Number}\n             * @default\n             */\n            tabMinWidth : null,\n\n            /**\n             * Max width of a tab title. 0 means no maximum width. This is default.\n             * @config {Number}\n             * @default\n             */\n            tabMaxWidth : null\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    /**\n     * The active tab index. Setting must be done through {@link #property-activeTab}\n     * @property {Number}\n     * @readonly\n     */\n    get activeIndex() {\n        return this.layout.activeIndex;\n    }\n\n    /**\n     * The active child widget. Setting must be done through {@link #property-activeTab}\n     * @property {Core.widget.Widget}\n     * @readonly\n     */\n    get activeItem() {\n        return this.layout.activeItem;\n    }\n\n    get activeTabItemIndex() {\n        const { activeTab, items, tabBar } = this;\n\n        return items.indexOf(tabBar.tabs[activeTab]?.item);\n    }\n\n    get bodyConfig() {\n        return ObjectHelper.merge({\n            className : {\n                'b-tabpanel-body' : 1\n            }\n        }, super.bodyConfig);\n    }\n\n    get focusElement() {\n        const activeTab = this.items[this.activeTab || 0];\n\n        return activeTab?.focusElement || activeTab?.tab?.focusElement;\n    }\n\n    get tabPanelBody() {\n        return this.bodyElement;\n    }\n\n    finalizeInit() {\n        super.finalizeInit();\n\n        const\n            me                    = this,\n            { activeTab, layout } = me,\n            { activeIndex }       = layout,\n            { tabs }              = me.tabBar,\n            activeTabItemIndex    = activeTab >= 0 && activeTab < tabs.length && me.items.indexOf(tabs[activeTab].item);\n\n        if (tabs.length > 0 && (activeTabItemIndex === false || activeTabItemIndex < 0)) {\n            throw new Error(`Invalid activeTab ${activeTab} (${tabs.length} tabs)`);\n        }\n\n        if (activeTabItemIndex !== activeIndex) {\n            // Since we are responding to configuration, we need to sync activeIndex to activeTab as if it were the\n            // initial value of activeIndex. This cannot be done (reasonably) during initialization of the card layout\n            // because of the possibility of tabless items, so we wait until the dust settles on the items, the tabBar\n            // and all other configs, but we must do the tab change silently (since the the initial active item is set\n            // without such ceremony) and without animation (to avoid the appearance of the initial tab animating in)\n            layout.setActiveItem(activeTabItemIndex, activeIndex, {\n                animation : false,\n                silent    : true\n            });\n        }\n\n        layout.animateCardChange = me.animateTabChange;\n    }\n\n    onChildAdd(child) {\n        // The layout will hide inactive new items.\n        // And we must add our beforeHide listener *after* call super.\n        super.onChildAdd(child);\n\n        if (!this.initialItems) {\n            const\n                me          = this,\n                { tabBar }  = me,\n                config      = me.makeTabConfig(child),\n                // if child.tab === false, config will be null... no tab for this one\n                firstTab    = config && tabBar?.firstTab,\n                // if there are no tabs yet, this will be the first so we can skip all the indexing...\n                tabBarItems = firstTab && tabBar._items,\n                // not all items have tabs but the new child won't have one yet:\n                tabItems    = firstTab && ArrayHelper.from(me._items, it => it.tab || it === child),\n                // non-tabs could be in the tabBar, but the tabs must be contiguous:\n                index       = firstTab ? tabItems.indexOf(child) + tabBarItems.indexOf(firstTab) : 0;\n\n            if (config && tabBar) {\n                if (firstTab && child.weight == null && index < tabBarItems.count - 1) {\n                    tabBar.insert(config, index);\n                }\n                else {\n                    tabBar.add(config);\n                }\n            }\n        }\n    }\n\n    onChildRemove(child) {\n        const\n            { tab }   = child,\n            { items } = this;\n\n        if (tab) {\n            this.tabBar.remove(tab);\n            tab.destroy();\n        }\n\n        // Removing the active item, then show a sibling if any are left\n        if (child === this.activeItem) {\n            this._activeTab = null;\n            if (items.length) {\n                this.activeTab = items[Math.min(this.activeIndex, items.length - 1)];\n            }\n        }\n\n        super.onChildRemove(child);\n    }\n\n    //endregion\n\n    //region Tabs\n\n    isDisabledOrHiddenTab(tabIndex) {\n        const\n            { tabs } = this.tabBar,\n            tab      = tabs?.[tabIndex];\n        return tab && (tab.disabled || tab.hidden);\n    }\n\n    findAvailableTab(item, delta = 1) {\n        const\n            { tabs }  = this.tabBar,\n            tabCount  = tabs.length,\n            itemIndex = Math.max(0, tabs.indexOf(item.tab));\n\n        if (itemIndex) {\n            delta = -delta;\n        }\n\n        let activeTab;\n\n        for (let n = 1; n <= tabCount; ++n) {\n            //  itemIndex=2, tabCount=5:\n            //               n : 1, 2, 3, 4, 5\n            //      delta =  1 : 3, 4, 0, 1, 2\n            //      delta = -1 : 1, 0, 4, 3, 2\n            activeTab = (itemIndex + ((delta < 0) ? tabCount : 0) + n * delta) % tabCount;\n            if (!this.isDisabledOrHiddenTab(activeTab)) {\n                break;\n            }\n        }\n        return activeTab;\n    }\n\n    activateAvailableTab(item, delta = 1) {\n        this.activeTab = this.findAvailableTab(item, delta);\n    }\n\n    changeActiveTab(activeTab, oldActiveTab) {\n        const\n            me           = this,\n            {\n                tabBar,\n                layout\n            }            = me,\n            { tabCount } = tabBar;\n\n        if (activeTab.isWidget || ObjectHelper.isObject(activeTab)) {\n            // Must be a child widget, so add if it's not already in our items.\n            if (me.items.indexOf(activeTab) === -1) {\n                activeTab = me.add(activeTab);\n            }\n\n            activeTab = tabBar.indexOfTab(activeTab.tab);\n        }\n        else {\n            activeTab = parseInt(activeTab, 10);\n        }\n\n        if (!me.initialItems && tabCount > 0 && (activeTab < -1 || activeTab >= tabCount)) {\n            throw new Error(`Invalid activeTab ${activeTab} (${tabCount} tabs)`);\n        }\n\n        if (me.isDisabledOrHiddenTab(activeTab)) {\n            activeTab = me.findAvailableTab(activeTab);\n        }\n\n        // If we are animating, we must wait until any animation is finished\n        // before we can go ahead and apply the change.\n        if (layout.animateCardChange && layout.cardChangeAnimation) {\n            layout.cardChangeAnimation.then(cardChange => {\n                // If the animation resulted in not where we want, update the activeTab\n                if (cardChange?.activeIndex !== activeTab) {\n                    me._activeTab = activeTab;\n                    me.updateActiveTab(activeTab, oldActiveTab);\n                }\n            });\n        }\n        else {\n            return activeTab;\n        }\n    }\n\n    async updateActiveTab() {\n        if (!this.initialItems) {\n            const { activeTabItemIndex, layout } = this;\n\n            if (activeTabItemIndex > -1) {\n                if (layout.animateCardChange) {\n                    await this.tabSelectionPromise;\n                }\n\n                // A no-change returns no chage event object\n                this.tabSelectionPromise = layout.setActiveItem(this.items[activeTabItemIndex])?.promise;\n            }\n        }\n    }\n\n    changeTabBar(bar) {\n        this.getConfig('strips');\n\n        this.strips = {\n            tabBar : bar\n        };\n\n        return this.strips.tabBar;\n    }\n\n    makeTabConfig(item) {\n        const\n            { tab } = item,\n            config  = {\n                item,\n\n                type              : 'tab',\n                tabPanel          : this,\n                disabled          : Boolean(item.disabled),\n                hidden            : item.initialConfig.hidden,\n                weight            : item.weight || 0,\n                internalListeners : {\n                    click   : 'onTabClick',\n                    thisObj : this\n                },\n                localizableProperties : {\n                    // our tabs copy their text from the item's title and so are not directly localized\n                    text : false\n                }\n            };\n\n        if (tab === false) {\n            return null;\n        }\n\n        return ObjectHelper.isObject(tab) ? Tab.mergeConfigs(config, tab) : config;\n    }\n\n    updateItems(items, was) {\n        const\n            me                          = this,\n            { activeTab, initialItems } = me;\n\n        let index = 0,\n            tabs;\n\n        super.updateItems(items, was);\n\n        if (initialItems) {\n            tabs = Array.from(items, it => me.makeTabConfig(it)).filter(it => {\n                if (it) {\n                    it.index = index++;\n                    return true;\n                }\n            });\n\n            if (index) {\n                tabs[0].isFirst = true;\n                tabs[index - 1].isLast = true;\n                tabs[activeTab].active = true;\n\n                me.tabBar.add(tabs);\n                me.activeTab = activeTab;  // now we can validate the activeTab value\n            }\n        }\n    }\n\n    updateTabMinWidth(tabMinWidth) {\n        this.tabBar?.items.forEach(tab => {\n            if (tab.isTab) {\n                tab.minWidth = tabMinWidth;\n            }\n        });\n    }\n\n    updateTabMaxWidth(tabMaxWidth) {\n        this.tabBar?.items.forEach(tab => {\n            if (tab.isTab) {\n                tab.maxWidth = tabMaxWidth;\n            }\n        });\n    }\n\n    //endregion\n\n    //region Auto height\n\n    updateAutoHeight(autoHeight) {\n        this.detachListeners('themeAutoHeight');\n\n        autoHeight && GlobalEvents.ion({\n            name    : 'themeAutoHeight',\n            theme   : 'internalOnThemeChange',\n            thisObj : this\n        });\n\n        this.$measureHeight = autoHeight;\n    }\n\n    applyAutoHeight() {\n        const\n            me                             = this,\n            { layout, activeTab, element } = me,\n            { animateCardChange }          = layout;\n\n        // stop animate to change tabs on back stage.\n        layout.animateCardChange = false;\n\n        // override any previously applied height when measuring\n        me.height = null;\n\n        // get the max height comparing all tabs and apply to the tab\n        me.height = Math.max(...me.items.map(tab => {\n            me.activeTab = tab;\n            return element.clientHeight;\n        })) + 1;\n\n        // Go back to initial configs\n        me.activeTab = activeTab;\n        layout.animateCardChange = animateCardChange;\n\n        me.$measureHeight = false;\n    }\n\n    internalOnThemeChange() {\n        if (this.isVisible) {\n            this.applyAutoHeight();\n        }\n        else {\n            this.$measureHeight = true;\n        }\n    }\n\n    //endregion\n\n    //region Events\n\n    // Called after beforeActiveItemChange has fired and not been vetoed before animation and activeItemChange\n    onBeginActiveItemChange(activeItemChangeEvent) {\n        const\n            tabs                           = this.tabBar.tabs,\n            { activeItem, prevActiveItem } = activeItemChangeEvent;\n\n        // Our UI changes immediately, our state must be accurate\n        this.activeTab = tabs.indexOf(activeItem?.tab);\n\n        // Deactivate previous active tab\n        if (prevActiveItem?.tab) {\n            prevActiveItem.tab.active = false;\n        }\n\n        if (activeItem?.tab) {\n            activeItem.tab.active = true;\n            activeItem.tab.show();\n        }\n    }\n\n    // Auto called because Card layout triggers the beforeActiveItemChange on its owner\n    onBeforeActiveItemChange(activeItemChangeEvent) {\n        /**\n         * The active tab is about to be changed. Return `false` to prevent this.\n         * @event beforeTabChange\n         * @preventable\n         * @param {Number} activeIndex - The new active index.\n         * @param {Core.widget.Widget} activeItem - The new active child widget.\n         * @param {Number} prevActiveIndex - The previous active index.\n         * @param {Core.widget.Widget} prevActiveItem - The previous active child widget.\n         */\n        return this.trigger('beforeTabChange', activeItemChangeEvent);\n    }\n\n    // Auto called because Card layout triggers the activeItemChange on its owner\n    onActiveItemChange(activeItemChangeEvent) {\n        /**\n         * The active tab has changed.\n         * @event tabChange\n         * @param {Number} activeIndex - The new active index.\n         * @param {Core.widget.Widget} activeItem - The new active child widget.\n         * @param {Number} prevActiveIndex - The previous active index.\n         * @param {Core.widget.Widget} prevActiveItem - The previous active child widget.\n         */\n        this.trigger('tabChange', activeItemChangeEvent);\n    }\n\n    onTabClick(event) {\n        this.activeTab = event.source.item;\n    }\n\n    onPaint() {\n        super.onPaint(...arguments);\n\n        // Measure tabs on first paint if configured to do so\n        if (this.$measureHeight) {\n            this.applyAutoHeight();\n        }\n    }\n\n    //endregion\n}\n\n// Register this widget type with its Factory\nTabPanel.initClass();\n"],"names":["WebSocketManager","Events","Base","construct","config","me","this","super","onWsOpen","bind","onWsClose","onWsMessage","onWsError","autoConnect","address","open","doDestroy","connector","detachSocketListeners","close","isConnecting","_this$connector","readyState","constructor","webSocketImplementation","CONNECTING","isOpened","_this$connector2","OPEN","isClosing","_this$connector3","CLOSING","isClosed","_this$connector4","CLOSED","createWebSocketConnector","attachSocketListeners","destroyWebSocketConnector","addEventListener","removeEventListener","_openPromise","console","warn","detacher","Promise","resolve","ion","error","then","value","catch","trigger","send","command","data","_this$connector5","JSON","stringify","_objectSpread","event","message","parse","_defineProperty","WebSocket","userName","_$name","FieldSet","Panel","mixin","Labelable","$name","type","configurable","bodyTag","focusable","inline","inlineInternal","layout","horizontal","prototypeProperties","flexRowCls","flexColCls","bodyConfig","result","className","hasLabel","title","html","children","legendElement","tag","text","class","compose","label","labelCls","labelWidth","style","width","DomHelper","unitize","syncInlineInternal","_this$inline","labelPosition","updateDisabled","was","eachWidget","item","disabled","updateInline","updateInlineInternal","updateLabel","updateLabelPosition","initClass","Radio","Checkbox","alias","inputType","clearable","uncheckedValue","undefined","textLabelCls","internalOnClick","info","checked","updateName","name","toggleGroup","updateClearable","RadioGroup","defaultType","options","$config","merge","defaultBindProperty","existingOptions","ensureItems","filter","c","refPrefix","ref","id","selected","input","checkedValue","v","forEach","isConfiguring","getConfig","changeOptions","ObjectHelper","isDeeplyEqual","convertOption","key","option","existing","ret","assign","Widget","reconfigure","isOurRadio","isRadio","isolateFieldChange","field","onChildAdd","beforeChange","change","click","thisObj","onChildRemove","detachListeners","onRadioClick","ev","source","onRadioItemBeforeChange","lastValue","reverting","wrapRadioEvent","uncheckToggleGroupMembers","onRadioItemChange","triggerFieldChange","from","userAction","updateOptions","reduce","m","substring","length","index","insert","Object","values","remove","destroy","Tab","Button","active","isFirst","isLast","itemCls","tabPanel","titleProperty","titleSource","role","cls","tabindex","owner","visibleChildCount","dataset","updateIndex","updateItem","_me$itemChangeDetache","_me$itemHideDetacher","tab","ariaElement","setAttribute","itemChangeDetacher","call","FunctionHelper","after","return","itemHideDetacher","beforeChangeHidden","beforeHide","beforeUpdateDisabled","prio","syncMinMax","updateItemCls","element","classList","DomClassList","add","updateRotate","rotate","_minWidth","minWidth","_minHeight","minHeight","_maxWidth","maxWidth","_maxHeight","maxHeight","tabMinWidth","tabMaxWidth","onItemBeforeChangeHidden","hidingChild","hidden","$isDeactivating","$isActivating","activeItem","activateAvailableTab","onItemBeforeHide","hide","onItemBeforeUpdateDisabled","disablingChild","onItemConfigChange","isTab","t","TabBar","Toolbar","overflow","ignoreParentReadOnly","firstTab","tabAt","lastTab","tabCount","_items","countOf","tabs","ArrayHelper","toolbarContent","indexOfTab","indexOf","child","syncTabs","onFocusIn","activeIndex","isNaN","focus","i","n","find","TabPanel","activeTab","animateTabChange","autoHeight","suppressChildHeaders","tabBar","weight","activeTabItemIndex","_tabBar$tabs$activeTa","items","focusElement","_activeTab$tab","tabPanelBody","bodyElement","finalizeInit","Error","setActiveItem","animation","silent","animateCardChange","initialItems","makeTabConfig","tabBarItems","tabItems","it","count","_activeTab","Math","min","isDisabledOrHiddenTab","tabIndex","findAvailableTab","delta","itemIndex","max","changeActiveTab","oldActiveTab","isWidget","isObject","parseInt","cardChangeAnimation","cardChange","updateActiveTab","_layout$setActiveItem","tabSelectionPromise","promise","changeTabBar","bar","strips","Boolean","initialConfig","internalListeners","localizableProperties","mergeConfigs","updateItems","Array","updateTabMinWidth","_this$tabBar","updateTabMaxWidth","_this$tabBar2","updateAutoHeight","GlobalEvents","theme","$measureHeight","applyAutoHeight","height","map","clientHeight","internalOnThemeChange","isVisible","onBeginActiveItemChange","activeItemChangeEvent","prevActiveItem","show","onBeforeActiveItemChange","onActiveItemChange","onTabClick","onPaint","arguments"],"mappings":"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"}