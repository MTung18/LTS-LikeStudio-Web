{"version":3,"file":"Grid.js","sources":["../../../lib/Grid/feature/ColumnAutoWidth.js","../../../lib/Grid/feature/RowCopyPaste.js","../../../lib/Grid/view/Grid.js"],"sourcesContent":["import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\n\nconst storeListenerName = 'store';\n\n/**\n * @module Grid/feature/ColumnAutoWidth\n */\n\n/**\n * Enables the {@link Grid.column.Column#config-autoWidth} config for a grid's columns.\n *\n * This feature is <strong>enabled</strong> by default.\n *\n * @extends Core/mixin/InstancePlugin\n * @mixes Core/mixin/Delayable\n * @classtype columnAutoWidth\n * @feature\n */\nexport default class ColumnAutoWidth extends Delayable(InstancePlugin) {\n    static get $name() {\n        return 'ColumnAutoWidth';\n    }\n\n    //region Config\n\n    static get configurable() {\n        return {\n            /**\n             * The default `autoWidth` option for columns with `autoWidth: true`. This can\n             * be a single number for the minimum column width, or an array of two numbers\n             * for the `[minWidth, maxWidth]`.\n             * @config {Number|Number[]}\n             */\n            default : null,\n\n            /**\n             * The amount of time (in milliseconds) to delay after a store modification\n             * before synchronizing `autoWidth` columns.\n             * @config {Number}\n             * @default\n             */\n            delay : 0\n        };\n    }\n\n    //endregion\n\n    //region Internals\n\n    static get pluginConfig() {\n        return {\n            after : {\n                bindStore        : 'bindStore',\n                unbindStore      : 'unbindStore',\n                renderRows       : 'syncAutoWidthColumns',\n                onInternalResize : 'onInternalResize'\n            },\n\n            assign : [\n                'columnAutoWidthPending',\n                'syncAutoWidthColumns'\n            ]\n        };\n    }\n\n    construct(config) {\n        super.construct(config);\n\n        const { store } = this.client;\n\n        // The initial bindStore can come super early such that our hooks won't catch it:\n        store && this.bindStore(store);\n    }\n\n    doDestroy() {\n        this.unbindStore();\n\n        super.doDestroy();\n    }\n\n    bindStore(store) {\n        this.lastSync = null;\n\n        store.ion({\n            name : storeListenerName,\n\n            [`change${this.client.asyncEventSuffix}`] : 'onStoreChange',\n\n            thisObj : this\n        });\n    }\n\n    unbindStore() {\n        this.detachListeners(storeListenerName);\n    }\n\n    get columnAutoWidthPending() {\n        return this.lastSync === null || this.hasTimeout('syncAutoWidthColumns');\n    }\n\n    onStoreChange({ action }) {\n        if (action !== 'move') {\n            const\n                me           = this,\n                { cellEdit } = me.client.features;\n\n            ++me.storeGeneration;\n\n            // If we are editing, sync right away so cell editing can align correctly to next cell\n            // unless editing is finished/canceled by tapping outside of grid body\n            if (cellEdit?.isEditing && !cellEdit.editingStoppedByTapOutside) {\n                me.syncAutoWidthColumns();\n            }\n            else if (!me.hasTimeout('syncAutoWidthColumns')) {\n                me.setTimeout('syncAutoWidthColumns', me.delay);\n            }\n        }\n    }\n\n    // Handle scenario with Grid being inside DIV with display none, and no width. Sync column widths after being shown\n    onInternalResize(element, newWidth, newHeight, oldWidth) {\n        if (oldWidth === 0) {\n            // Force remeasure after we get a width\n            this.lastSync = null;\n            this.syncAutoWidthColumns();\n        }\n    }\n\n    syncAutoWidthColumns() {\n        const\n            me = this,\n            grid = me.client,\n            storeGeneration = me.storeGeneration;\n\n        if (me.lastSync !== storeGeneration) {\n            me.lastSync = storeGeneration;\n\n            let autoWidth, resizingColumns;\n\n            for (const column of grid.columns.visibleColumns) {\n                autoWidth = column.autoWidth;\n\n                if (autoWidth) {\n                    if (autoWidth === true) {\n                        autoWidth = me.default;\n                    }\n\n                    grid.resizingColumns = resizingColumns = true;\n                    column.resizeToFitContent(autoWidth);\n                }\n            }\n\n            if (resizingColumns) {\n                grid.resizingColumns = false;\n                grid.afterColumnsResized();\n            }\n        }\n\n        if (me.hasTimeout('syncAutoWidthColumns')) {\n            me.clearTimeout('syncAutoWidthColumns');\n        }\n    }\n\n    //endregion\n}\n\nColumnAutoWidth.prototype.storeGeneration = 0;\n\nGridFeatureManager.registerFeature(ColumnAutoWidth, true);\n","import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\n\n/**\n * @module Grid/feature/RowCopyPaste\n */\n\n/**\n * Allow using [Ctrl/CMD + C/X] and [Ctrl/CMD + V] to copy/cut and paste rows. Also makes cut, copy and paste actions\n * available via the cell context menu.\n *\n * You can configure how a newly pasted record is named using {@link #function-generateNewName}\n *\n * This feature is **enabled** by default\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         rowCopyPaste : true\n *     }\n * });\n * ```\n *\n * {@inlineexample Grid/feature/RowCopyPaste.js}\n *\n * This feature will work alongside with CellCopyPaste but there is differences on functionality.\n * * When used together, context menu options will be detailed so the user will know to copy the cell or the row.\n * * They will also detect what type of selection is present at the moment. If there is only rows selected, only row\n *   alternatives are shown in the context menu and the keyboard shortcuts will be processed by RowCopyPaste.\n * * If there is only cells selected, there will be context menu options for both row and cell but keyboard shortcuts\n *   will be handled by CellCopyPaste.\n * * They do not share clipboard, so it is possible to have rows and cells copied or cut at the same time.\n *\n * ## Keyboard shortcuts\n * The feature has the following default keyboard shortcuts:\n *\n * | Keys   | Action | Action description                                                                      |\n * |--------|--------|-----------------------------------------------------------------------------------------|\n * | Ctrl+C | copy   | Calls {@link #function-copyRows} which copies selected row(s) into the clipboard.       |\n * | Ctrl+X | cut    | Calls {@link #function-copyRows} which cuts out selected row(s) and saves in clipboard. |\n * | Ctrl+V | paste  | Calls {@link #function-pasteRows} which inserts copied or cut row(s) from the clipboard.|\n *\n * For more information on how to customize keyboard shortcuts, please see\n * [our guide](#Grid/guides/customization/keymap.md).\n *\n * @extends Core/mixin/InstancePlugin\n * @classtype rowCopyPaste\n * @feature\n */\nexport default class RowCopyPaste extends InstancePlugin {\n\n    static $name = 'RowCopyPaste';\n    static type  = 'rowCopyPaste';\n\n    static pluginConfig = {\n        assign : [\n            'copyRows',\n            'pasteRows'\n        ],\n        chain : [\n            'populateCellMenu'\n        ]\n    };\n\n    static properties = {\n        clipboardRecords : []\n    };\n\n    static configurable = {\n        /**\n         * The field to use as the name field when updating the name of copied records\n         * @config {String}\n         * @default\n         */\n        nameField : 'name',\n\n        /**\n         * See {@link #keyboard-shortcuts Keyboard shortcuts} for details\n         * @config {Object<String,String>}\n         */\n        keyMap : {\n            'Ctrl+C' : 'copy',\n            'Ctrl+X' : 'cut',\n            'Ctrl+V' : 'paste'\n        },\n\n        copyRecordText         : 'L{copyRecord}',\n        cutRecordText          : 'L{cutRecord}',\n        pasteRecordText        : 'L{pasteRecord}',\n        rowSpecifierText       : 'L{row}',\n        rowSpecifierTextPlural : 'L{rows}',\n        localizableProperties  : [\n            'copyRecordText',\n            'cutRecordText',\n            'pasteRecordText',\n            'rowSpecifierText',\n            'rowSpecifierTextPlural'\n        ]\n\n    };\n\n    construct(grid, config) {\n        super.construct(grid, config);\n\n        grid.rowManager.ion({\n            beforeRenderRow : 'onBeforeRenderRow',\n            thisObj         : this\n        });\n\n        this.grid = grid;\n    }\n\n    // Used in events to separate events from different features from each other\n    entityName = 'row';\n\n    onBeforeRenderRow({ row, record }) {\n        row.cls['b-cut-row'] = this._isCut && this.clipboardRecords.includes(record);\n    }\n\n    isActionAvailable(key, action, event) {\n        const\n            { grid }     = this,\n            { cellEdit } = grid.features,\n            { target }   = event;\n        // No action if\n        // 1. there is selected text on the page\n        // 2. cell editing is active\n        // 3. cursor is not in the grid (filter bar etc)\n        return !this.disabled &&\n            globalThis.getSelection().toString().length === 0 &&\n            (!cellEdit || !cellEdit.isEditing) &&\n            grid.selectedRecords?.length > 0 && // No key action when no selected records\n            (!target || Boolean(target.closest('.b-gridbase:not(.b-schedulerbase) .b-grid-subgrid,.b-grid-subgrid:not(.b-timeaxissubgrid)')));\n    }\n\n    copy() {\n        this.copyRows();\n    }\n\n    cut() {\n        this.copyRows(true);\n    }\n\n    paste(referenceRecord) {\n        this.pasteRows(referenceRecord?.isModel ? referenceRecord : null);\n    }\n\n    /**\n     * Copy or cut rows to clipboard to paste later\n     *\n     * @fires beforeCopy\n     * @param {Boolean} [isCut] Copies by default, pass `true` to cut\n     * @category Common\n     * @on-owner\n     */\n    copyRows(isCut = false) {\n        const\n            me                     = this,\n            { client, entityName } = me,\n            // Dont cut readOnly records\n            records                = me.selectedRecords.filter(r => !r.readOnly || !isCut);\n\n        /**\n         * Fires on the owning Grid before a copy action is performed, return `false` to prevent the action\n         * @event beforeCopy\n         * @preventable\n         * @on-owner\n         * @param {Grid.view.Grid} source Owner grid\n         * @param {Core.data.Model[]} records The records about to be copied\n         * @param {Boolean} isCut `true` if this is a cut action\n         * @param {String} entityName 'row' to distinguish this event from other beforeCopy events\n         */\n        if (!records.length || client.readOnly ||\n            client.trigger('beforeCopy', { records, isCut, entityName }) === false\n        ) {\n            return;\n        }\n\n        me._isCut = isCut;\n\n        me.clipboardRecords.forEach(rec => client.rowManager.getRowById(rec)?.removeCls('b-cut-row'));\n\n        me.clipboardRecords = records.slice();\n\n        client.store.forEach(rec => {\n            rec.meta.isCut = me._isCut && me.clipboardRecords.includes(rec);\n        });\n\n        // refresh to call reapply the cls for records where the cut was canceled\n        records.forEach(record => this.onRowCutOrCopy(record, isCut));\n        /**\n         * Fires on the owning Grid after a copy action is performed.\n         * @event copy\n         * @on-owner\n         * @param {Grid.view.Grid} source Owner grid\n         * @param {Core.data.Model[]} records The records that were copied\n         * @param {Boolean} isCut `true` if this is a cut action\n         * @param {String} entityName 'row' to distinguish this event from other copy events\n         */\n        client.trigger('copy', { records, isCut, entityName });\n    }\n\n    onRowCutOrCopy(record, isCut) {\n        this.client.rowManager.getRowById(record)?.toggleCls('b-cut-row', isCut);\n    }\n\n    /**\n     * Paste rows below selected or passed record\n     *\n     * @fires beforePaste\n     * @param {Core.data.Model} [record] Paste below this record, or currently selected record if left out\n     * @category Common\n     * @on-owner\n     */\n    pasteRows(record) {\n        const\n            me                     = this,\n            records                = me.clipboardRecords,\n            { client, entityName } = me, { store }       = client,\n            referenceRecord        = record || client.selectedRecord;\n\n        /**\n         * Fires on the owning Grid before a paste action is performed, return `false` to prevent the action\n         * @event beforePaste\n         * @preventable\n         * @on-owner\n         * @param {Grid.view.Grid} source Owner grid\n         * @param {Core.data.Model} referenceRecord The reference record, the clipboard records will be pasted below\n         * this record\n         * @param {Core.data.Model[]} records The records about to be pasted\n         * @param {Boolean} isCut `true` if this is a cut action\n         * @param {String} entityName 'row' to distinguish this event from other beforePaste events\n         */\n        if (client.readOnly || client.isTreeGrouped || !records.length ||\n            (store.tree && me._isCut && records.some(rec => rec.contains(referenceRecord, true))) || client.trigger('beforePaste', {\n            records, referenceRecord, isCut : me._isCut, entityName\n        }) === false) {\n            return [];\n        }\n\n        // sort selected to move records to make sure it will be added in correct order independent of how it was selected.\n        // Should be done with real records in the clipboard, after records are copied, all indexes will be changed\n        me.sortByIndex(records);\n\n        const\n            idMap            = {},\n            // We need to go over selected records, find all top level nodes and reassemble the tree\n            recordsToProcess = me.extractParents(records, idMap);\n\n        me.insertCopiedRecords(recordsToProcess, referenceRecord);\n\n        if (me._isCut) {\n            // reset clipboard\n            me.clearClipboard();\n        }\n        else {\n            client.selectedRecords = recordsToProcess;\n        }\n\n        /**\n         * Fires on the owning Grid after a paste action is performed.\n         * @event paste\n         * @on-owner\n         * @param {Grid.view.Grid} source Owner grid\n         * @param {Core.data.Model} referenceRecord The reference record, below which the records were pasted\n         * @param {Core.data.Model[]} records Pasted records\n         * @param {Core.data.Model[]} originalRecords For a copy action, these are the records that were copied.\n         * For cut action, this is same as the `records` param.\n         * @param {Boolean} isCut `true` if this is a cut action\n         * @param {String} entityName 'row' to distinguish this event from other paste events\n         */\n        client.trigger('paste', {\n            records         : recordsToProcess,\n            originalRecords : records,\n            isCut           : me._isCut,\n            referenceRecord,\n            entityName\n        });\n\n        // Focus first cell of last copied or cut row\n        client.getRowFor(recordsToProcess[recordsToProcess.length - 1])?.cells?.[0].focus();\n\n        return recordsToProcess;\n    }\n\n    /**\n     * Clears the clipboard and refreshes the UI\n     *\n     * @category Common\n     */\n    clearClipboard() {\n        if (this._isCut) {\n            this.clipboardRecords.forEach(rec => this.client.rowManager.getRowById(rec)?.removeCls('b-cut-row'));\n        }\n        this._isCut           = false;\n        this.clipboardRecords = [];\n    }\n\n    /**\n     * A method used to generate the name for a copy-pasted record. By defaults appends \"- 2\", \"- 3\" as a suffix. Override\n     * it to provide your own naming of pasted records.\n     *\n     * @param {Core.data.Model} record The new record being pasted\n     * @returns {String}\n     */\n    generateNewName(record) {\n        const originalName = record[this.nameField];\n\n        let counter = 2;\n\n        while (this.client.store.findRecord(this.nameField, `${originalName} - ${counter}`)) {\n            counter++;\n        }\n\n        return `${originalName} - ${counter}`;\n    }\n\n    insertCopiedRecords(toInsert, recordReference) {\n        const\n            { store } = this.client,\n            insertAt  = store.indexOf(recordReference) + 1;\n\n        if (store.tree) {\n            return recordReference.parent.insertChild(toInsert, recordReference.nextSibling, false, {\n                // Specify node to insert before in the ordered tree. It allows to paste to a\n                // correct place both ordered and visual.\n                // Covered by TaskOrderedWbs.t.js\n                orderedBeforeNode : recordReference.nextOrderedSibling\n            });\n        }\n        else if (this._isCut) {\n            store.move(toInsert, store.getAt(insertAt));\n        }\n        else {\n            return store.insert(insertAt, toInsert);\n        }\n    }\n\n    get selectedRecords() {\n        const records = [...this.client.selectedRecords];\n\n        // Add eventual selected cells records\n        this.client.selectedCells.forEach(cell => {\n            if (!records.includes(cell.record)) {\n                records.push(cell.record);\n            }\n        });\n\n        return records;\n    }\n\n    getMenuItemText(action) {\n        const me = this;\n        let text = me[action + 'RecordText'];\n\n        // If cellCopyPaste is enabled and there is selected cells, add a row specifier text to menu options\n        if (me.client.features.cellCopyPaste?.enabled === true && me.client.selectedCells.length) {\n            text += ` (${me.selectedRecords.length > 1 ? me.rowSpecifierTextPlural : me.rowSpecifierText})`;\n        }\n\n        return text;\n    }\n\n    populateCellMenu({ record, items }) {\n        const\n            me         = this,\n            { client } = me;\n\n        if (!client.readOnly &&\n            !client.isTreeGrouped &&\n            record?.isSpecialRow === false &&\n            me.selectedRecords.length\n        ) {\n            items.cut = {\n                text        : me.getMenuItemText('cut'),\n                localeClass : me,\n                icon        : 'b-icon b-icon-cut',\n                weight      : 135,\n                disabled    : record.readOnly,\n                onItem      : () => me.cut()\n            };\n\n            items.copy = {\n                text        : me.getMenuItemText('copy'),\n                localeClass : me,\n                cls         : 'b-separator',\n                icon        : 'b-icon b-icon-copy',\n                weight      : 120,\n                onItem      : () => me.copy()\n            };\n\n            items.paste = {\n                text        : me.getMenuItemText('paste'),\n                localeClass : me,\n                icon        : 'b-icon b-icon-paste',\n                weight      : 140,\n                disabled    : !me.clipboardRecords.length,\n                onItem      : () => me.paste(record)\n            };\n        }\n    }\n\n    /**\n     * Sort array of records ASC by its indexes stored in indexPath\n     * @param {Core.data.Model[]} array array to sort\n     * @private\n     */\n    sortByIndex(array) {\n        const { store } = this.client;\n\n        return array.sort((rec1, rec2) => {\n            const\n                idx1 = rec1.indexPath,\n                idx2 = rec2.indexPath;\n\n            // When a record is copied without its parent, its index in the visible tree should be used\n            if (!array.includes(rec1.parent) && !array.includes(rec2.parent)) {\n                // For row copy-paste feature both records are normally in store. Unless someone wants\n                // to include invisible records. Which does not happen yet.\n                return store.indexOf(rec1) - store.indexOf(rec2);\n            }\n\n            if (idx1.length === idx2.length) {\n                for (let i = 0; i < idx1.length; i++) {\n                    if (idx1[i] < idx2[i]) {\n                        return -1;\n                    }\n                    if (idx1[i] > idx2[i]) {\n                        return 1;\n                    }\n                }\n                return 0;\n            }\n            else {\n                return idx1.length - idx2.length;\n            }\n        });\n    }\n\n    /**\n     * Iterates over passed pre-sorted list of records and reassembles hierarchy of records.\n     * @param {Core.data.Model[]} taskRecords array of records to extract parents from\n     * @param {Object} idMap Empty object which will contain map linking original id with copied record\n     * @returns {Core.data.Model[]} Returns array of new top-level nodes with children filled\n     * @private\n     */\n    extractParents(taskRecords, idMap) {\n        const\n            me                         = this,\n            { client, _isCut : isCut } = me;\n\n        // Unwrap children to pass them all through `generateNewName` function\n        if (client.store.tree) {\n            taskRecords.forEach(node => {\n                node.traverse(n => {\n                    const parents = n.getTopParent(true);\n                    if (!taskRecords.includes(n) && (!isCut || !taskRecords.some(rec => parents.includes(rec)))) {\n                        taskRecords.push(n);\n                    }\n                });\n            });\n        }\n\n        const result = taskRecords.reduce((parents, node) => {\n            let copy;\n            // Fallback is for when the node was removed from the tree\n            const parentId = node.parentId || node.meta.modified;\n\n            if (isCut) {\n                copy = node;\n\n                // reset record cut state\n                copy.meta.isCut = false;\n            }\n            else {\n                copy               = node.copy();\n                copy[me.nameField] = me.generateNewName(copy);\n\n                if (node.expanded) {\n                    copy.data.expanded = node.expanded;\n                }\n            }\n\n            idMap[node.id] = copy;\n\n            // If we're copying top level node, add it directly\n            if (node.parent === client.store.rootNode) {\n                parents.push(copy);\n            }\n            // If node parent is also copied, append copy to the copied parent. Parents\n            // are always at the beginning of the array, so we know if there is a parent\n            // it was already copied\n            else if (parentId in idMap) {\n                idMap[parentId].appendChild(copy);\n            }\n            // If parent is not copied and record is not top level, then append it as a\n            // sibling.\n            else {\n                parents.push(copy);\n            }\n            return parents;\n        }, []);\n\n        // Now when tree is assembled we want to restore ordered tree. Traverse the tree, sort children\n        // by previous value of `orderedParentIndex`\n        result.forEach(parent => {\n            parent.sortOrderedChildren(true, true);\n        });\n\n        return result;\n    }\n\n}\n\nRowCopyPaste.featureClass = 'b-row-copypaste';\n\nGridFeatureManager.registerFeature(RowCopyPaste, true, 'Grid');\nGridFeatureManager.registerFeature(RowCopyPaste, false, 'Gantt');\nGridFeatureManager.registerFeature(RowCopyPaste, false, 'SchedulerPro');\nGridFeatureManager.registerFeature(RowCopyPaste, false, 'ResourceHistogram');\n","//region Import\n\nimport GridBase from './GridBase.js';\n\n// import default features (might be able to skip this when draft on dynamic import is implemented)\nimport '../feature/CellEdit.js';\nimport '../feature/CellMenu.js';\nimport '../feature/ColumnAutoWidth.js';\nimport '../feature/ColumnDragToolbar.js';\nimport '../feature/ColumnPicker.js';\nimport '../feature/ColumnReorder.js';\nimport '../feature/ColumnResize.js';\nimport '../feature/Filter.js';\nimport '../feature/FilterBar.js';\nimport '../feature/Group.js';\nimport '../feature/HeaderMenu.js';\nimport '../feature/RowCopyPaste.js';\nimport '../feature/Sort.js';\nimport '../feature/Stripe.js';\n\n// To enable using checkbox selection mode, moved here to not be dragged into GridBase automatically\nimport '../column/CheckColumn.js';\n\n//endregion\n\n/**\n * @module Grid/view/Grid\n */\n\n/**\n * The Grid component is a very powerful and performant UI component that shows tabular data (or tree data using the\n * {@link Grid.view.TreeGrid}).\n *\n * <h2>Intro</h2>\n * The Grid widget has a wide range of features and a large API to allow users to work with data efficiently in the\n * browser. The two most important configs are {@link #config-store} and {@link #config-columns}. With the store config,\n * you decide which data to load into the grid. You can work with both in-memory arrays or load data using ajax. See the\n * {@link Core.data.Store} class to learn more about loading data into stores.\n *\n * The columns config accepts an array of {@link Grid.column.Column Column} descriptors defining which fields that will\n * be displayed in the grid. The {@link Grid.column.Column#config-field} property in the column descriptor maps to a\n * field in your dataset. The simplest grid configured with inline data and two columns would look like this:\n *\n * {@frameworktabs}\n * {@js}\n * ```javascript\n *  const grid = new Grid({\n *       appendTo : document.body,\n *\n *       columns: [\n *           { field: 'name', text: 'Name' },\n *           { field: 'job', text: 'Job', renderer: ({value}) => value || 'Unemployed' }\n *       ],\n *\n *       data: [\n *           { name: 'Bill', job: 'Retired' },\n *           { name: 'Elon', job: 'Visionary' },\n *           { name: 'Me' }\n *       ]\n * });\n * ```\n * {@endjs}\n * {@react}\n * ```jsx\n * const App = props => {\n *     const [columns, setColumns] = useState([\n *          { field: 'name', text: 'Name' },\n *          { field: 'job', text: 'Job', renderer: ({value}) => value || 'Unemployed' }\n *     ]);\n *\n *     const [data, setData] = useState([\n *          { name: 'Bill', job: 'Retired' },\n *          { name: 'Elon', job: 'Visionary' },\n *          { name: 'Me' }\n *     ]);\n *\n *     return <BryntumGrid column={columns} data={data} />\n * }\n * ```\n * {@endreact}\n * {@vue}\n * ```html\n * <bryntum-grid :columns=\"columns\" :data=\"data\" />\n * ```\n * ```javascript\n * export default {\n *    setup() {\n *      return {\n *        columns : [\n *          { field: 'name', text: 'Name' },\n *          { field: 'job', text: 'Job', renderer: ({value}) => value || 'Unemployed' }\n *        ]\n *        data : reactive([\n *          { name: 'Bill', job: 'Retired' },\n *          { name: 'Elon', job: 'Visionary' },\n *          { name: 'Me' }\n *        ])\n *      };\n *    }\n * }\n * ```\n * {@endvue}\n * {@angular}\n * ```html\n * <bryntum-grid [columns]=\"columns\" [data]=\"data\"></bryntum-grid>\n * ```\n * ```typescript\n * export class AppComponent {\n *      columns = [\n *          { field: 'name', text: 'Name' },\n *          { field: 'job', text: 'Job', renderer: ({value}) => value || 'Unemployed' }\n *      ]\n *\n *      data = [\n *          { name: 'Bill', job: 'Retired' },\n *          { name: 'Elon', job: 'Visionary' },\n *          { name: 'Me' }\n *      ]\n *  }\n * ```\n * {@endangular}\n * {@endframeworktabs}\n *\n * {@inlineexample Grid/view/Grid.js}\n *\n * <h2>Features</h2>\n * To avoid the Grid core being bloated, its main features are implemented in separate `feature` classes. These can be\n * turned on and off based on your requirements. To configure (or disable) a feature, use the {@link #config-features}\n * object to provide your desired configuration for the features you want to use. Each feature has an ´id´ that you use\n * as a key in the features object:\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         cellEdit     : false,\n *         regionResize : true,\n *         cellTooltip  : {\n *             tooltipRenderer : (data) => {\n *             }\n *         },\n *         ...\n *     }\n * });\n * ```\n *\n * {@region Column configuration options}\n * A grid contains a number of columns that control how your data is rendered. The simplest option is to simply point a\n * Column to a field in your dataset, or define a custom {@link Grid.column.Column#config-renderer}. The renderer\n * function receives one object parameter containing rendering data for the current cell being rendered.\n *\n * ```javascript\n * const grid = new Grid({\n *     columns: [\n *         {\n *             field: 'task',\n *             text: 'Task',\n *             renderer(renderData) {\n *                 const record = renderData.record;\n *\n *                 if (record.percentDone === 100) {\n *                     renderData.cellElement.classList.add('taskDone');\n *                     renderData.cellElement.style.background = 'green';\n *                 }\n *\n *                 return renderData.value;\n *             }\n *         }\n *     ]\n * });\n * ```\n *\n * {@endregion}\n * {@region Grid sections (aka \"locked\" or \"frozen\" columns)}\n * The grid can be divided horizontally into individually scrollable sections. This is great if you have lots of columns\n * that don't fit the available width of the screen. To enable this feature, simply mark the columns you want to `lock`.\n * Locked columns are then displayed in their own section to the left of the other columns:\n *\n * ```javascript\n * const grid = new Grid({\n *     width    : 500,\n *     subGridConfigs : {\n *         // set a fixed locked section width if desired\n *         locked : { width: 300 }\n *     },\n *     columns : [\n *         { field : 'name', text : 'Name', width : 200, locked : true },\n *         { field : 'firstName', text : 'First name', width : 100, locked : true },\n *         { field : 'surName', text : 'Last name', width : 100, locked : true },\n *         { field : 'city', text : 'City', width : 100 },\n *         { type : 'number', field : 'age', text : 'Age', width : 200 },\n *         { field : 'food', text : 'Food', width : 200 }\n *     ]\n * });\n * ```\n *\n * {@inlineexample Grid/view/LockedGrid.js}\n * You can also move columns between sections by using drag and drop, or use the built-in header context menu. If you\n * want to be able to resize the locked grid section, enable the {@link Grid.feature.RegionResize} feature.\n * {@endregion}\n * {@region Filtering}\n * One important requirement of a good Grid component is the ability to filter large datasets to quickly find what you\n * are looking for. To enable filtering (through the context menu), add the {@link Grid.feature.Filter} feature:\n *\n * ```javascript\n * const grid = new Grid({\n *     features: {\n *         filter: true\n *     }\n * });\n * ```\n *\n * Or activate a default filter at initial rendering:\n *\n * ```javascript\n * const grid = new Grid({\n *     features: {\n *         filter: { property : 'city', value : 'New York' }\n *     }\n * });\n * ```\n *\n * {@inlineexample Grid/feature/Filter.js}\n * {@endregion}\n * {@region Tooltips}\n * If you have a data models with many fields, and you want to show\n * additional data when hovering over a cell, use the {@link Grid.feature.CellTooltip} feature. To show a\n * tooltip for all cells:\n *\n * ```javascript\n * const grid = new Grid({\n *     features: {\n *         cellTooltip: ({value}) => value\n *     }\n * });\n * ```\n *\n * {@inlineexample Grid/feature/CellTooltip.js}\n * {@endregion}\n * {@region Inline Editing (default <strong>on</strong>)}\n * To enable inline cell editing in the grid, simply add the {@link Grid.feature.CellEdit} feature:\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         cellEdit : true\n *     },\n *     columns: [\n *         {\n *             field: 'task',\n *             text: 'Task'\n *         }\n *     ]\n * });\n * ```\n *\n * {@inlineexample Grid/feature/CellEdit.js}\n * {@endregion}\n * {@region Context Menu}\n * Use {@link Grid.feature.CellMenu} and {@link Grid.feature.HeaderMenu} features if you want your users to be able to\n * interact with the data through the context menu:\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         headerMenu : {\n *             items : {\n *                 showInfo : {\n *                     text   : 'Show info',\n *                     icon   : 'fa fa-info-circle',\n *                     weight : 200,\n *                     onItem : ({ item }) => console.log(item.text)\n *                 }\n *             }\n *         },\n *         cellMenu :  {\n *             items : {\n *                 showOptions : {\n *                     text   : 'Show options',\n *                     icon   : 'fa fa-gear',\n *                     weight : 200\n *                 }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * {@inlineexample Grid/feature/CellMenu.js}\n * {@endregion}\n * {@region Grouping}\n * To group rows by a field in your dataset, use the {@link Grid.feature.Group} feature.\n * {@inlineexample Grid/feature/Group.js}\n * {@endregion}\n * {@region Searching}\n * When working with lots of data, a quick alternative to filtering is the {@link Grid.feature.Search} feature.\n * It highlights matching values in the grid as you type.\n * {@inlineexample Grid/feature/Search2.js}\n * {@endregion}\n * {@region Loading and saving data}\n * The grid keeps all its data in a {@link Core.data.Store}, which is essentially an Array of {@link Core.data.Model}\n * items. You define your own Model representing your data entities and use the Model API to get and set values.\n *\n * ```javascript\n * class Person extends Model {}\n *\n * const person = new Person({\n *     name: 'Steve',\n *     age: 38\n * });\n *\n * person.name = 'Linda'; // person object is now `dirty`\n *\n * const store = new Store({\n *     data : [\n *         { name : 'Don', age : 40 }\n *     ]\n * });\n *\n * store.add(person);\n *\n * console.log(store.count()); // === 2\n *\n * store.remove(person); // Remove from store\n * ```\n *\n * When you update a record in a store, it's considered dirty, until you call {@link Core.data.mixin.StoreCRUD#function-commit}\n * on the containing Store. You can also configure your Store to commit automatically (like Google docs). If you use an\n * AjaxStore, it will send changes to your server when commit is called.\n *\n * Any changes you make to the Store or its records are immediately reflected in the Grid, so there is no need to tell\n * it to refresh manually.\n *\n * To create a custom load mask, subscribe to the grid's store events and {@link Core.widget.Widget#config-masked mask}\n * on {@link Core.data.AjaxStore#event-beforeRequest} and unmask on {@link Core.data.AjaxStore#event-afterRequest}. The\n * mask can also be used to display error messages if an {@link Core.data.AjaxStore#event-exception} occurs.\n *\n * ```javascript\n *  const grid = new Grid({\n *      loadMask : null\n *  });\n *\n *  grid.store.on({\n *      beforeRequest() {\n *          grid.masked = {\n *              text : 'Data is loading...'\n *          };\n *      },\n *      afterRequest() {\n *          grid.masked = null;\n *      },\n *      exception({ response }) {\n *          grid.masked.error = response.message || 'Load failed';\n *      }\n *  });\n *\n *  store.load();\n * ```\n *\n * To learn more about loading and saving data, please refer to [this guide](#Grid/guides/data/displayingdata.md).\n * {@endregion}\n * {@region Default configs}\n * There is a myriad of configs and features available for Grid, some of them on by default and some of them requiring\n * extra configuration. The code below tries to illustrate the major things that are used by default:\n *\n * ```javascript\n * const grid = new Grid({\n *    // The following features are enabled by default:\n *    features : {\n *        cellEdit      : true,\n *        columnPicker  : true,\n *        columnReorder : true,\n *        columnResize  : true,\n *        cellMenu      : true,\n *        headerMenu    : true,\n *        group         : true,\n *        rowCopyPaste  : true, // Allow using [Ctrl/CMD + C/X] and [Ctrl/CMD + V] to copy/cut and paste rows\n *        sort          : true\n *    },\n *\n *    animateRemovingRows       : true,  // Rows will slide out on removal\n *    autoHeight                : false, // Grid needs to have a height supplied through CSS (strongly recommended) or by specifying `height`\n *    columnLines               : true,  // Themes might override it to hide lines anyway\n *    emptyText                 : 'No rows to display',\n *    enableTextSelection       : false, // Not allowed to select text in cells by default,\n *    fillLastColumn            : true,  // By default the last column is stretched to fill the grid\n *    fullRowRefresh            : true,  // Refreshes entire row when a cell value changes\n *    loadMask                  : 'Loading...',\n *    resizeToFitIncludesHeader : true,  // Also measure header when auto resizing columns\n *    responsiveLevels : {\n *      small : 400,\n *      medium : 600,\n *      large : '*'\n *    },\n *    rowHeight                  : null,  // Determined using CSS, it will measure rowHeight\n *    showDirty                  : false, // No indicator for changed cells\n * });\n * ```\n * {@endregion}\n * {@region Keyboard shortcuts}\n * Grid has the following default keyboard shortcuts:\n *\n * | Keys             | Action               | Weight ¹ | Action description                                                                                 |\n * |------------------|----------------------|----------|----------------------------------------------------------------------------------------------------|\n * | ArrowUp          | navigateUp           | 10       | Focuses the cell above currently focused cell.                                                     |\n * | ArrowRight       | navigateRight        | 10       | Focuses the cell to the right of currently focused cell                                            |\n * | ArrowDown        | navigateDown         | 10       | Focuses the cell below currently focused cell                                                      |\n * | ArrowLeft        | navigateLeft         | 10       | Focuses the cell to the left of currently focused cell                                             |\n * | Shift+ArrowUp    | extendSelectionUp    |          | Extends the selection one row up from currently focused cell                                       |\n * | Shift+ArrowRight | extendSelectionRight |          | Extends the selection one column to the right from currently focused cell                          |\n * | Shift+ArrowDown  | extendSelectionDown  |          | Extends the selection one row down from currently focused cell                                     |\n * | Shift+ArrowLeft  | extendSelectionLeft  |          | Extends the selection one column to the left from currently focused cell                           |\n * | Space            | toggleSelection      | 10       | Toggles selection of currently focused cell if selectionMode.selectOnKeyboardNavigation is `false` |\n * | Ctrl+Home        | navigateFirstCell    |          | Focuses the first cell at the first row (including header)                                         |\n * | Home             | navigateFirstColumn  |          | Focuses the first cell of current focused row                                                      |\n * | Ctrl+End         | navigateLastCell     |          | Focuses the last cell of the last row                                                              |\n * | End              | navigateLastColumn   |          | Focuses the last cell of current focused row                                                       |\n * | PageUp           | navigatePrevPage     |          | Displays previous page                                                                             |\n * | PageDown         | navigateNextPage     |          | Displays next page                                                                                 |\n * | Enter            | activateHeader       |          | Equals to a header click                                                                           |\n * | Space            | clickCellByKey       | 1000     | Equals to a cell click                                                                             |\n * | Ctrl+z           | undoRedoKeyPress     |          | Undo/redo (when using {@link Core.data.stm.StateTrackingManager})                                  |\n * | Ctrl+Shift+z ²   | undoRedoKeyPress     |          | Undo/redo (when using {@link Core.data.stm.StateTrackingManager})                                  |\n *\n * **¹** Customization of keyboard shortcuts that has a `weight` should only be performed by advanced users.\n *\n * The following Grid features has their own keyboard shortcuts. Follow the links for details.\n * * {@link Grid.feature.CellCopyPaste#keyboard-shortcuts CellCopyPaste}\n * * {@link Grid.feature.CellEdit#keyboard-shortcuts CellEdit}\n * * {@link Grid.feature.CellMenu#keyboard-shortcuts CellMenu}\n * * {@link Grid.feature.ColumnRename#keyboard-shortcuts ColumnRename}\n * * {@link Grid.feature.Filter#keyboard-shortcuts Filter}\n * * {@link Grid.feature.Group#keyboard-shortcuts Group}\n * * {@link Grid.feature.HeaderMenu#keyboard-shortcuts HeaderMenu}\n * * {@link Grid.feature.QuickFind#keyboard-shortcuts QuickFind}\n * * {@link Grid.feature.CellCopyPaste#keyboard-shortcuts CellCopyPaste}\n * * {@link Grid.feature.RowCopyPaste#keyboard-shortcuts RowCopyPaste}\n * * {@link Grid.feature.Search#keyboard-shortcuts Search}\n * * {@link Grid.feature.Tree#keyboard-shortcuts Tree}\n *\n * For more information on how to customize keyboard shortcuts, please see\n * [our guide](#Grid/guides/customization/keymap.md)\n *\n * {@endregion}\n * {@region Performance}\n * In general the Grid widget has very good performance and you can try loading any amount of data in the\n * <a target=\"_blank\" href=\"../examples/bigdataset/\">bigdataset</a> demo.\n * The overall rendering performance is naturally affected by many other things than the data volume. Other important\n * factors that can impact performance: number of columns, complex cell renderers, locked columns, the number of\n * features enabled and of course the browser (Chrome fastest).\n * {@endregion}\n * {@region Accessibility}\n * As far as possible, the grid is accessible to WAI-ARIA standards. Every cell, including column header cells is\n * visitable. The arrow keys navigate, and if a cell contains focusable content, navigating to that cell focuses the\n * content. `Escape` will exit from that and focus the encapsulating cell.\n *\n * When tabbing back into a grid that has previously been entered, focus moves to the last focused cell.\n *\n * The column menu is invoked using the `Space` key when focused on a column header.\n *\n * The cell menu is invoked using the `Space` key when focused on a data cell.\n * {@endregion}\n *\n * @extends Grid/view/GridBase\n * @classType grid\n * @widget\n */\nexport default class Grid extends GridBase {\n    static get $name() {\n        return 'Grid';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'grid';\n    }\n}\n\n// Register this widget type with its Factory\nGrid.initClass();\n"],"names":["ColumnAutoWidth","Delayable","InstancePlugin","$name","configurable","default","delay","pluginConfig","after","bindStore","unbindStore","renderRows","onInternalResize","assign","construct","config","super","store","this","client","doDestroy","lastSync","ion","name","asyncEventSuffix","thisObj","detachListeners","columnAutoWidthPending","hasTimeout","onStoreChange","action","me","cellEdit","features","storeGeneration","isEditing","editingStoppedByTapOutside","syncAutoWidthColumns","setTimeout","element","newWidth","newHeight","oldWidth","grid","autoWidth","resizingColumns","column","columns","visibleColumns","resizeToFitContent","afterColumnsResized","clearTimeout","prototype","_$name","GridFeatureManager","registerFeature","RowCopyPaste","constructor","args","_defineProperty","rowManager","beforeRenderRow","onBeforeRenderRow","row","record","cls","_isCut","clipboardRecords","includes","isActionAvailable","key","event","_grid$selectedRecords","target","disabled","globalThis","getSelection","toString","length","selectedRecords","Boolean","closest","copy","copyRows","cut","paste","referenceRecord","pasteRows","isModel","isCut","entityName","records","filter","r","readOnly","trigger","forEach","rec","_client$rowManager$ge","getRowById","removeCls","slice","meta","onRowCutOrCopy","_this$client$rowManag","toggleCls","_client$getRowFor","_client$getRowFor$cel","selectedRecord","isTreeGrouped","tree","some","contains","sortByIndex","recordsToProcess","extractParents","insertCopiedRecords","clearClipboard","originalRecords","getRowFor","cells","focus","_this$client$rowManag2","generateNewName","originalName","nameField","counter","findRecord","toInsert","recordReference","insertAt","indexOf","parent","insertChild","nextSibling","orderedBeforeNode","nextOrderedSibling","move","getAt","insert","selectedCells","cell","push","getMenuItemText","_me$client$features$c","text","cellCopyPaste","enabled","rowSpecifierTextPlural","rowSpecifierText","populateCellMenu","items","isSpecialRow","localeClass","icon","weight","onItem","array","sort","rec1","rec2","idx1","indexPath","idx2","i","taskRecords","idMap","node","traverse","n","parents","getTopParent","result","reduce","parentId","modified","expanded","data","id","rootNode","appendChild","sortOrderedChildren","chain","keyMap","copyRecordText","cutRecordText","pasteRecordText","localizableProperties","featureClass","Grid","GridBase","type","initClass"],"mappings":"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"}