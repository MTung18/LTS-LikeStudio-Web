.btn-block {
  width: 100%;
}
.input-group {
  &>.form-range {

    position: relative;
    flex: 1 1 auto;
    width: 1%;
    margin-bottom: 0;

    padding: 0 0.75rem;
    background-color: #fff;
    background-clip: padding-box;
    border: 1px solid #ced4da;
    height: calc(1.5em + 0.75rem + 2px);
    border-radius: 0.25rem;
    transition: border-color .15s ease-in-out, box-shadow .15s ease-in-out;

    &:not(:first-child) {
      border-top-left-radius: 0;
      border-bottom-left-radius: 0;
    }

    &:not(:last-child) {
      border-top-right-radius: 0;
      border-bottom-right-radius: 0;
    }
  }
  .dropdown {
    &:first-child {
      .btn {
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;      
      }

    }

    &:last-child {
      .btn {
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;          
      }

    }
    &:not(:first-child) {
      &:not(:last-child) {
        .btn {
          border-radius: 0;

        }
      }
    }
  }
}

.form-check {
  &.fs-custom-control-sm {
    font-size: .875rem;
    line-height: 1.5;
    padding-left: 1.3125rem;

    .custom-control-label {
      &::before {
        top: 0.21875rem;
        left: -1.3125rem;
        width: 0.875rem;
        height: 0.875rem;
        border-radius: 50%;
      }

      &::after {
        top: 0.21875rem;
        left: -1.3125rem;
        width: 0.875rem;
        height: 0.875rem;
        background: no-repeat 50%/50% 50%;
      }
    }
  }

  &.fs-custom-control-lg {
    font-size: 1.25rem;
    line-height: 1.5;
    padding-left: 1.875rem;

    .custom-control-label {
      &::before {
        top: 0.3125rem;
        left: -1.875rem;
        width: 1.25rem;
        height: 1.25rem;
        border-radius: 50%;
      }

      &::after {
        top: 0.3125rem;
        left: -1.875rem;
        width: 1.25rem;
        height: 1.25rem;
        background: no-repeat 50%/50% 50%;
      }
    }
  }
}

.dropdown-toggle-no-caret {
  &::after {
    content: none !important;
  }
}

//TODO: Roger to review
.card-img-left {
  border-top-left-radius: calc(0.25rem - 1px);
  border-bottom-left-radius: calc(0.25rem - 1px);
}

.card-img-right {
  border-top-right-radius: calc(0.25rem - 1px);
  border-bottom-right-radius: calc(0.25rem - 1px);
}

.fs-dropdown-form {
  display: inline-block;
  padding: 0.25rem 1.5rem;
  width: 100%;
  clear: both;
  font-weight: 400;
}

.fs-sidebar-outer {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  height: 0;
  overflow: visible;
  z-index: 1045;
}

.fs-sidebar, .fs-sidebar-backdrop {
  position: fixed;
  top: 0;
  height: 100vh;
}

.fs-sidebar {
  display: flex;
    flex-direction: column;
    width: 320px;
    max-width: 100%;
    max-height: 100%;
    margin: 0;
    outline: 0;
    transform: translateX(0);

  &.slide {
    transition: transform 0.3s ease-in-out;

    @media (prefers-reduced-motion: reduce) {
      transition: none;
    }
  }

  &:not(.fs-sidebar-right) {
    left: 0;
    right: auto;

    &.slide:not(.show) {
      transform: translateX(-100%);
    }

    >.fs-sidebar-header .close {
      margin-left: auto;
    }
  }

  &.fs-sidebar-right {
    left: auto;
    right: 0;

    &.slide:not(.show) {
      transform: translateX(100%);
    }

    >.fs-sidebar-header .close {
      margin-right: auto;
    }
  }

  >.fs-sidebar-header {
    font-size: 1.125rem;
    padding: 0.5rem 1rem;
    display: flex;
    flex-direction: row;
    flex-grow: 0;
    align-items: center;

    strong {
      flex: 1;
    }

    @at-root {

      // Keep the buttons on the correct end when in RTL mode
      [dir="rtl"] & {
        flex-direction: row-reverse;
      }
    }

    .btn-close {
      float: none;
      font-size: .75rem;
    }
  }

  >.fs-sidebar-body {
    flex-grow: 1;
    height: 100%;
    overflow-y: auto;
  }

  >.fs-sidebar-footer {
    flex-grow: 0;
  }
}

.page-link {
  position: relative;
  display: block;
  padding: 0.5rem 0.75rem;
  margin-left: -1px;
  line-height: 1.25;
  color: #007bff;
  background-color: #fff;
  border: 1px solid #dee2e6;
}

.page-item.active .page-link {
  z-index: 3;
  color: #fff;
  background-color: #007bff;
  border-color: #007bff;
}


.b-pagination-pills {
  .page-item {
    .page-link {
      border-radius: 50rem !important;
      margin-left: 0.25rem;
      line-height: 1;
    }

    &:first-child {
      .page-link {
        margin-left: 0;
      }
    }
  }
}

.page-item.disabled .page-link {
  color: #6c757d;
  pointer-events: none;
  cursor: auto;
  background-color: #fff;
  border-color: #dee2e6;
}

.form-group {
  margin-bottom: 1rem;
}
// --- General styling ---

.table.fs-table {
  // Table fixed header width layout
  &.fs-table-fixed {
    // Fixed width columns
    table-layout: fixed;
  }

  // Disabled border-collapse
  // Mainly for use with sticky headers and columns
  &.fs-table-no-border-collapse {
    border-collapse: separate;
    border-spacing: 0;
  }

  // Table busy styling
  &[aria-busy="true"] {
    opacity: $fs-table-busy-opacity;
  }

  // Details row styling
  > tbody > tr.fs-table-details > td {
    border-top: none !important;
  }

  // Caption positioning
  > caption {
    caption-side: bottom;
  }

  &.fs-table-caption-top {
    > caption {
      caption-side: top !important;
    }
  }

  // Re-declare `table-active` class here so that it can take
  // precedence over row variants when used on selectable rows
  // Class can only be applied to rows and not individual cells
  > tbody > .table-active {
    &,
    > th,
    > td {
      background-color: $table-active-bg;
    }
  }

  // Add special hover styling for `table-active` row variant
  &.table-hover > tbody > tr.table-active:hover {
    td,
    th {
      color: $table-hover-color;
      // `$table-hover-bg` default is a very transparent black
      // We overlay it over the background color to achieve the
      // same color effect while keeping the background solid
      background-image: linear-gradient($table-hover-bg, $table-hover-bg);
      background-repeat: no-repeat;
    }
  }

  // Add in missing `bg-active` class for table tbody rows
  // Bootstrap v4.3 is missing this for dark tables
  // `bg-active` class cannot be applied to individual cells
  > tbody > .bg-active {
    &,
    > th,
    > td {
      // Important is needed to override the standard `bg-variants`
      // as the also use `!important`
      //background-color: $table-dark-active-bg !important;
    }
  }

  // Add special hover styling for `bg-active` row variant (dark tables)
  &.table-hover.table-dark > tbody > tr.bg-active:hover {
    td,
    th {
      //color: $table-dark-hover-color;
      // `$table-dark-hover-bg` default is a very transparent white
      // We overlay it over the background color to achieve the
      // same color effect while keeping the background solid
      //background-image: linear-gradient($table-dark-hover-bg, $table-dark-hover-bg);
      background-repeat: no-repeat;
    }
  }
  > tbody > .empty-row {
    text-align: center;
  }
}

// --- Table sticky header styling ---

@if $fsv-enable-table-sticky {
  .fs-table-sticky-header,
  .table-responsive,
  [class*="table-responsive-"] {
    // Move the table bottom margin to the wrapper
    margin-bottom: $spacer;

    > .table {
      // Reset `margin-bottom` to we don't get a space after
      // the table inside the scroll area
      margin-bottom: 0;
    }
  }

  .fs-table-sticky-header {
    overflow-y: auto;
    // Annoyingly, when overflow-y is set, browsers convert
    // 'overflow-x: visible' to 'overflow-x: auto' - so it becomes
    // responsive in the x axis automatically
    // Default `max-height` before a scrollbar will show
    // We don't use `height` as table could be shorter than this value
    max-height: $fs-table-sticky-header-max-height;
  }

  @media print {
    // Override any styles (including inline styles)
    // when printing
    .fs-table-sticky-header {
      overflow-y: visible !important;
      max-height: none !important;
    }
  }

  @supports (position: sticky) {
    // Positioning of sticky headers
    .fs-table-sticky-header > .table.fs-table > thead > tr > th {
      // Header cells need to be sticky on top
      position: sticky;
      top: 0;
      z-index: 2;
    }

    // Positioning of sticky columns
    // Sticky columns only work when table has sticky
    // headers and/or is responsive
    .fs-table-sticky-header,
    .table-responsive,
    [class*="table-responsive-"] {
      > .table.fs-table {
        > thead,
        > tbody,
        > tfoot {
          > tr > .fs-table-sticky-column {
            position: sticky;
            left: 0;
          }
        }

        > thead {
          > tr > .fs-table-sticky-column {
            // z-index needs to be higher than sticky columns and
            // sticky headers for correct layering
            z-index: 5;
          }
        }

        > tbody,
        > tfoot {
          > tr > .fs-table-sticky-column {
            // z-index needs to be lower than sticky header that
            // is also a sticky column
            z-index: 2;
          }
        }
      }
    }

    // Default theme color background for table cells that are sticky
    // Applied only when no variant is applied to the rows, or no head-variant
    // Needed because Bootstrap v4 does not have table child elements set up
    // to inherit their background color from parent element by default
    //
    // An issue made at twbs/bootstrap repo for table
    // background color inheritance:
    //   https://github.com/twbs/bootstrap/issues/29244
    // If implemented, would negate the need for all the below SCSS
    .table.fs-table {
      > thead,
      > tbody,
      > tfoot {
        > tr > .table-fs-table-default {
          // Default cell color
          color: $table-color;
          // `$table-bg` is null by default in Bootstrap v4 variables
          // but could have a value set by the consumer
          background-color: if($table-bg, $table-bg, $body-bg);
        }
      }

      &.table-dark {
        > thead,
        > tbody,
        > tfoot {
          > tr > .bg-fs-table-default {
            // Default cell color in table dark mode
           // color: $table-dark-color;
            // Default cell background color in table dark mode
           // background-color: $table-dark-bg;
          }
        }
      }

      // Handle case of zebra striping
      &.table-striped {
        // "fake" zebra striping via use of a transparent background image
        > tbody > tr:nth-of-type(#{$table-striped-order}) > .table-fs-table-default {
          // `$table-accent-bg` (used for striping) default is a very transparent black
          // We overlay it over the background color to achieve the same color
          // effect while keeping the background solid.
          background-image: linear-gradient($table-accent-bg, $table-accent-bg);
          background-repeat: no-repeat;
        }

        &.table-dark {
          > tbody > tr:nth-of-type(#{$table-striped-order}) > .bg-fs-table-default {
            // `$table-dark-accent-bg` (used for striping) default is a very transparent white
            // We overlay it over the background color to achieve the same color
            // effect while keeping the background solid.
            // background-image: linear-gradient($table-dark-accent-bg, $table-dark-accent-bg);
            background-repeat: no-repeat;
          }
        }
      }

      // Handle case of hover
      &.table-hover {
        // "fake" hover via use of a transparent background image
        > tbody > tr:hover > .table-fs-table-default {
          color: $table-hover-color;
          // `$table-hover-bg` default is a very transparent black
          // We overlay it over the background color to achieve the same color
          // effect while keeping the background solid.
          background-image: linear-gradient($table-hover-bg, $table-hover-bg);
          background-repeat: no-repeat;
        }

        &.table-dark {
          > tbody > tr:hover > .bg-fs-table-default {
            // color: $table-dark-hover-color;
            // `$table-dark-hover-bg` default is a very transparent white
            // We overlay it over the background color to achieve the same color
            // effect while keeping the background solid.
            // background-image: linear-gradient($table-dark-hover-bg, $table-dark-hover-bg);
            background-repeat: no-repeat;
          }
        }
      }
    }
  }
}


// Bootstrap v4.4 will include this variable as `$escaped-characters`
// But if we want to preserve backwards compatibility with v4.3, we leave this in
$fsv-escaped-characters: (("<", "%3c"), (">", "%3e"), ("#", "%23"));


@function fsv-escape-svg($string) {
  @if str-index($string, "data:image/svg+xml") {
    @each $char, $encoded in $fsv-escaped-characters {
      $string: str-replace($string, $char, $encoded);
    }
  }

  @return $string;
}

.table.fs-table {
  > thead,
  > tfoot {
    > tr {
      > [aria-sort] {
        cursor: pointer;
        background-image: none;
        background-repeat: no-repeat;
        background-size: $fs-table-sort-icon-bg-width $fs-table-sort-icon-bg-height;

        &:not(.fs-table-sort-icon-left) {
          // Default is icon on the right
          background-position: right calc(#{$table-cell-padding} / 2) center;
          padding-right: calc(#{$table-cell-padding} + #{$fs-table-sort-icon-bg-width});
        }

        &.fs-table-sort-icon-left {
          // Left aligned sort icon
          background-position: left calc(#{$table-cell-padding} / 2) center;
          padding-left: calc(#{$table-cell-padding} + #{$fs-table-sort-icon-bg-width});
        }
      }

      > [aria-sort="none"] {
        background-image: fsv-escape-svg($fs-table-sort-icon-bg-not-sorted);
      }

      > [aria-sort="ascending"] {
        background-image: fsv-escape-svg($fs-table-sort-icon-bg-ascending);
      }

      > [aria-sort="descending"] {
        background-image: fsv-escape-svg($fs-table-sort-icon-bg-descending);
      }
    }
  }

  // Sort icons for dark tables, headers, footers
  &.table-dark > thead > tr,
  &.table-dark > tfoot > tr,
  > .thead-dark > tr {
    > [aria-sort="none"] {
      background-image: fsv-escape-svg($fs-table-sort-icon-bg-dark-not-sorted);
    }

    > [aria-sort="ascending"] {
      background-image: fsv-escape-svg($fs-table-sort-icon-bg-dark-ascending);
    }

    > [aria-sort="descending"] {
      background-image: fsv-escape-svg($fs-table-sort-icon-bg-dark-descending);
    }
  }

  // Sort icons when header cell has `table-dark` class
  > thead > tr > .table-dark,
  > tfoot > tr > .table-dark {
    &[aria-sort="none"] {
      background-image: fsv-escape-svg($fs-table-sort-icon-bg-dark-not-sorted);
    }

    &[aria-sort="ascending"] {
      background-image: fsv-escape-svg($fs-table-sort-icon-bg-dark-ascending);
    }

    &[aria-sort="descending"] {
      background-image: fsv-escape-svg($fs-table-sort-icon-bg-dark-descending);
    }
  }

  // Padding and position adjustment for small tables
  &.table-sm {
    > thead,
    > tfoot {
      > tr > [aria-sort] {
        &:not(.fs-table-sort-icon-left) {
          // Default is icon on the right
          background-position: right calc(#{$table-cell-padding-sm} / 2) center;
          padding-right: calc(#{$table-cell-padding-sm} + #{$fs-table-sort-icon-bg-width});
        }

        &.fs-table-sort-icon-left {
          // Left aligned sort icon
          background-position: left calc(#{$table-cell-padding-sm} / 2) center;
          padding-left: calc(#{$table-cell-padding-sm} + #{$fs-table-sort-icon-bg-width});
        }
      }
    }
  }
}

// --- Selectable rows ---
.table.fs-table {
  &.fs-table-selectable:not(.fs-table-selectable-no-click) {
    & > tbody > tr {
      cursor: pointer;
    }

    &.fs-table-selecting {
      // Disabled text-selection when in range mode when
      // at least one row selected
      &.fs-table-select-range > tbody > tr {
        user-select: none;
      }
    }
  }
}

// --- Stacked tables ---
@if $fsv-enable-table-stacked {
  .table.fs-table {
    &.fs-table-stacked {
      @each $breakpoint in map-keys($grid-breakpoints) {
        $next: breakpoint-next($breakpoint, $grid-breakpoints);
        $infix: breakpoint-infix($next, $grid-breakpoints);

        &#{$infix} {
          @include media-breakpoint-down($breakpoint) {
            display: block;
            width: 100%;

            // Convert to blocks when stacked
            > caption,
            > tbody,
            > tbody > tr,
            > tbody > tr > td,
            > tbody > tr > th {
              display: block;
            }

            // Hide when stacked
            > thead,
            > tfoot {
              display: none;

              > tr.fs-table-top-row,
              > tr.fs-table-bottom-row {
                display: none;
              }
            }

            // Caption positioning
            > caption {
              caption-side: top !important;
            }

            > tbody {
              > tr {
                // Turn cells with labels into micro-grids
                > [data-label] {
                  // Cell header label pseudo element
                  &::before {
                    content: attr(data-label);
                    width: $fs-table-stacked-heading-width;
                    float: left;
                    text-align: right;
                    overflow-wrap: break-word;
                    font-weight: bold;
                    font-style: normal;
                    padding: 0 calc(#{$fs-table-stacked-gap} / 2) 0 0;
                    margin: 0;
                  }

                  // Add clearfix in-case field label wraps
                  &::after {
                    display: block;
                    clear: both;
                    content: "";
                  }

                  // Cell value (we wrap the cell value in a div when stacked)
                  > div {
                    display: inline-block;
                    width: calc(100% - #{$fs-table-stacked-heading-width});
                    // Add "gap" between "cells"
                    padding: 0 0 0 calc(#{$fs-table-stacked-gap} / 2);
                    margin: 0;
                  }
                }

                // Dont show the fixed top/bottom rows
                &.top-row,
                &.bottom-row {
                  display: none;
                }

                // Give the top cell of each "row" a heavy border
                > :first-child {
                  border-top-width: calc(3 * #{$table-border-width});
                }

                // Give any cell after a rowspan'ed cell a heavy top border
                > [rowspan] + td,
                > [rowspan] + th {
                  border-top-width: calc(3 * #{$table-border-width});
                }
              }
            }
          }
        }
      }
    }
  }
}

button {
  &.close {
    padding: 0;
    background-color: transparent;
    border: 0;
  }
}

.modal {
  &-header {
    &.text-light {
      .close {
        @extend .text-light
      }
    }

    .close {
      padding: 1rem;
      margin: -1rem -1rem -1rem auto;
    }
  }
}
.close {
  float: right;
    font-size: 1.25rem;
    line-height: 1;
    color: #000;
    text-shadow: 0 1px 0 #fff;
    opacity: .5;
    &:not(:disabled):not(.disabled):hover {
      opacity: .75;
    }
    &:hover {
      color: #000;
    text-decoration: none;
    }
}

.modal-dialog {
  z-index: 1051;
}
// // // // // Popper Styles

.inline-block {
  display: inline-block;
}

.popper:not(.fs-tooltip) {
  // scss-docs-start popover-css-vars
  --bs-popover-zindex: #{$zindex-popover};
  --bs-popover-max-width: #{$popover-max-width};
  @include rfs($popover-font-size, --bs-popover-font-size);
  --bs-popover-bg: #{$popover-bg};
  --bs-popover-border-width: #{$popover-border-width};
  --bs-popover-border-color: #{$popover-border-color};
  --bs-popover-border-radius: #{$popover-border-radius};
  --bs-popover-inner-border-radius: #{$popover-inner-border-radius};
  --bs-popover-box-shadow: #{$popover-box-shadow};
  --bs-popover-header-padding-x: #{$popover-header-padding-x};
  --bs-popover-header-padding-y: #{$popover-header-padding-y};
  @include rfs($popover-header-font-size, --bs-popover-header-font-size);
  --bs-popover-header-color: #{$popover-header-color};
  --bs-popover-header-bg: #{$popover-header-bg};
  --bs-popover-body-padding-x: #{$popover-body-padding-x};
  --bs-popover-body-padding-y: #{$popover-body-padding-y};
  --bs-popover-body-color: #{$popover-body-color};
  --bs-popover-arrow-width: #{$popover-arrow-width};
  --bs-popover-arrow-height: #{$popover-arrow-height};
  --bs-popover-arrow-border: var(--bs-popover-border-color);
  // scss-docs-end popover-css-vars
  z-index: var(--bs-popover-zindex);
  display: block;
  max-width: var(--bs-popover-max-width);
  font-family: var(--bs-font-sans-serif);
  font-style: normal;
  font-weight: 400;
  line-height: 1.5;
  text-align: left;
  text-align: start;
  text-decoration: none;
  text-shadow: none;
  text-transform: none;
  letter-spacing: normal;
  word-break: normal;
  white-space: normal;
  word-spacing: normal;
  line-break: auto;
  font-size: var(--bs-popover-font-size);
  word-wrap: break-word;
  background-color: var(--bs-popover-bg);
  background-clip: padding-box;
  border: var(--bs-popover-border-width) solid var(--bs-popover-border-color);
  border-radius: var(--bs-popover-border-radius);

  .popper-body {
    padding: var(--bs-popover-body-padding-y) var(--bs-popover-body-padding-x);
    color: var(--bs-popover-body-color);
  }

  .popper-header {
    padding: var(--bs-popover-header-padding-y) var(--bs-popover-header-padding-x);
    margin-bottom: 0;
    font-size: var(--bs-popover-header-font-size);
    color: var(--bs-popover-header-color);
    background-color: var(--bs-popover-header-bg);
    border-bottom: var(--bs-popover-border-width) solid var(--bs-popover-border-color);
    border-top-left-radius: var(--bs-popover-inner-border-radius);
    border-top-right-radius: var(--bs-popover-inner-border-radius);
  }

  .popper-arrow {
    display: block;
    width: var(--bs-popover-arrow-width);
    height: var(--bs-popover-arrow-height);

    &::before,
    &::after {
      position: absolute;
      display: block;
      content: "";
      border-color: transparent;
      border-style: solid;
      border-width: 0;
    }
  }
}

.popper:not(.fs-tooltip) {

  &[data-popper-placement^="top"] {
    >.popper-arrow {
      bottom: calc(-1 * (var(--bs-popover-arrow-height)) - var(--bs-popover-border-width)); // stylelint-disable-line function-disallowed-list

      &::before,
      &::after {
        border-width: var(--bs-popover-arrow-height) calc(var(--bs-popover-arrow-width) * .5) 0; // stylelint-disable-line function-disallowed-list
      }

      &::before {
        bottom: 0;
        border-top-color: var(--bs-popover-arrow-border);
      }

      &::after {
        bottom: var(--bs-popover-border-width);
        border-top-color: var(--bs-popover-bg);
      }
    }
  }

  /* rtl:begin:ignore */
  &[data-popper-placement^="right"] {
    >.popper-arrow {
      left: calc(-1 * (var(--bs-popover-arrow-height)) - var(--bs-popover-border-width)); // stylelint-disable-line function-disallowed-list
      width: var(--bs-popover-arrow-height);
      height: var(--bs-popover-arrow-width);

      &::before,
      &::after {
        border-width: calc(var(--bs-popover-arrow-width) * .5) var(--bs-popover-arrow-height) calc(var(--bs-popover-arrow-width) * .5) 0; // stylelint-disable-line function-disallowed-list
      }

      &::before {
        left: 0;
        border-right-color: var(--bs-popover-arrow-border);
      }

      &::after {
        left: var(--bs-popover-border-width);
        border-right-color: var(--bs-popover-bg);
      }
    }
  }

  /* rtl:end:ignore */

  &[data-popper-placement^="bottom"] {
    >.popper-arrow {
      top: calc(-1 * (var(--bs-popover-arrow-height)) - var(--bs-popover-border-width)); // stylelint-disable-line function-disallowed-list

      &::before,
      &::after {
        border-width: 0 calc(var(--bs-popover-arrow-width) * .5) var(--bs-popover-arrow-height); // stylelint-disable-line function-disallowed-list
      }

      &::before {
        top: 0;
        border-bottom-color: var(--bs-popover-arrow-border);
      }

      &::after {
        top: var(--bs-popover-border-width);
        border-bottom-color: var(--bs-popover-bg);
      }
    }

    // This will remove the popover-header's border just below the arrow
    .popover-header::before {
      position: absolute;
      top: 0;
      left: 50%;
      display: block;
      width: var(--bs-popover-arrow-width);
      margin-left: calc(-.5 * var(--bs-popover-arrow-width)); // stylelint-disable-line function-disallowed-list
      content: "";
      border-bottom: var(--bs-popover-border-width) solid var(--bs-popover-header-bg);
    }
  }

  /* rtl:begin:ignore */
  &[data-popper-placement^="left"] {
    >.popper-arrow {
      right: calc(-1 * (var(--bs-popover-arrow-height)) - var(--bs-popover-border-width)); // stylelint-disable-line function-disallowed-list
      width: var(--bs-popover-arrow-height);
      height: var(--bs-popover-arrow-width);

      &::before,
      &::after {
        border-width: calc(var(--bs-popover-arrow-width) * .5) 0 calc(var(--bs-popover-arrow-width) * .5) var(--bs-popover-arrow-height); // stylelint-disable-line function-disallowed-list
      }

      &::before {
        right: 0;
        border-left-color: var(--bs-popover-arrow-border);
      }

      &::after {
        right: var(--bs-popover-border-width);
        border-left-color: var(--bs-popover-bg);
      }
    }
  }
}

/* rtl:end:ignore */

// .popper-auto {
//   &[data-popper-placement^="top"] {
//     @extend .popper-top;
//   }
//   &[data-popper-placement^="right"] {
//     @extend .popper-end;
//   }
//   &[data-popper-placement^="bottom"] {
//     @extend .popper-bottom;
//   }
//   &[data-popper-placement^="left"] {
//     @extend .popper-start;
//   }
// }

// Offset the popover to account for the popover arrow
// .popover-header {
//   padding: var(--bs-popover-header-padding-y) var(--bs-popover-header-padding-x);
//   margin-bottom: 0; // Reset the default from Reboot
//   @include font-size(var(--bs-popover-header-font-size));
//   color: var(--bs-popover-header-color);
//   background-color: var(--bs-popover-header-bg);
//   border-bottom: var(--bs-popover-border-width) solid var(--bs-popover-border-color);
//   @include border-top-radius(var(--bs-popover-inner-border-radius));

//   &:empty {
//     display: none;
//   }
// }

.popover-body {
  padding: var(--bs-popover-body-padding-y) var(--bs-popover-body-padding-x);
  color: var(--bs-popover-body-color);
}

// Base class
.fs-tooltip {
  // scss-docs-start tooltip-css-vars
  --bs-tooltip-zindex: #{$zindex-tooltip};
  --bs-tooltip-max-width: #{$tooltip-max-width};
  --bs-tooltip-padding-x: #{$tooltip-padding-x};
  --bs-tooltip-padding-y: #{$tooltip-padding-y};
  --bs-tooltip-margin: #{$tooltip-margin};
  @include rfs($tooltip-font-size, --bs-tooltip-font-size);
  --bs-tooltip-color: #{$tooltip-color};
  --bs-tooltip-bg: #{$tooltip-bg};
  --bs-tooltip-border-radius: #{$tooltip-border-radius};
  --bs-tooltip-opacity: #{$tooltip-opacity};
  --bs-tooltip-arrow-width: #{$tooltip-arrow-width};
  --bs-tooltip-arrow-height: #{$tooltip-arrow-height};
  // scss-docs-end tooltip-css-vars

  z-index: var(--bs-tooltip-zindex);
  display: block;
  padding: 0px !important; //var(--bs-tooltip-arrow-height);
  margin: var(--bs-tooltip-margin);
  @include deprecate("`$tooltip-margin`", "v5", "v5.x", true);
  // Our parent element can be arbitrary since tooltips are by default inserted as a sibling of their target element.
  // So reset our font and text properties to avoid inheriting weird values.
  @include reset-text();
  @include font-size(var(--bs-tooltip-font-size));
  // Allow breaking very long words so they don't overflow the tooltip's bounds
  word-wrap: break-word;
  //opacity: 0;

  //&.show { opacity: var(--bs-tooltip-opacity); }

  .fs-tooltip-arrow {
    display: block;
    width: var(--bs-tooltip-arrow-width);
    height: var(--bs-tooltip-arrow-height);

    &::before {
      position: absolute;
      content: "";
      border-color: transparent;
      border-style: solid;
    }
  }
}

.fs-tooltip {
  &[data-popper-placement^="top"] {
    .fs-tooltip-arrow {
      bottom: -6px;

      &::before {
        top: -1px;
        border-width: var(--bs-tooltip-arrow-height) calc(var(--bs-tooltip-arrow-width) * .5) 0; // stylelint-disable-line function-disallowed-list
        border-top-color: var(--bs-tooltip-bg);
      }
    }
  }

  &[data-popper-placement^="right"] {
    .fs-tooltip-arrow {
      left: -6px;
      width: var(--bs-tooltip-arrow-height);
      height: var(--bs-tooltip-arrow-width);

      &::before {
        right: -1px;
        border-width: calc(var(--bs-tooltip-arrow-width) * .5) var(--bs-tooltip-arrow-height) calc(var(--bs-tooltip-arrow-width) * .5) 0; // stylelint-disable-line function-disallowed-list
        border-right-color: var(--bs-tooltip-bg);
      }
    }
  }


  &[data-popper-placement^="bottom"] {
    .fs-tooltip-arrow {
      top: -6px;

      &::before {
        bottom: -1px;
        border-width: 0 calc(var(--bs-tooltip-arrow-width) * .5) var(--bs-tooltip-arrow-height); // stylelint-disable-line function-disallowed-list
        border-bottom-color: var(--bs-tooltip-bg);
      }
    }
  }

  &[data-popper-placement^="left"] {
    .fs-tooltip-arrow {
      right: -6px;
      width: var(--bs-tooltip-arrow-height);
      height: var(--bs-tooltip-arrow-width);

      &::before {
        left: -1px;
        border-width: calc(var(--bs-tooltip-arrow-width) * .5) 0 calc(var(--bs-tooltip-arrow-width) * .5) var(--bs-tooltip-arrow-height); // stylelint-disable-line function-disallowed-list
        border-left-color: var(--bs-tooltip-bg);
      }
    }
  }
}

// Wrapper for the tooltip content
.fs-tooltip-inner {
  max-width: var(--bs-tooltip-max-width);
  padding: var(--bs-tooltip-padding-y) var(--bs-tooltip-padding-x);
  color: var(--bs-tooltip-color);
  text-align: center;
  background-color: var(--bs-tooltip-bg);
  @include border-radius(var(--bs-tooltip-border-radius));
}



.inline-block {
  display: inline-block;
}

.fade-enter-active,
.fade-leave-active {
  transition: opacity 0.2s ease;
}

.fade-enter-from,
.fade-leave-to {
  opacity: 0;
}