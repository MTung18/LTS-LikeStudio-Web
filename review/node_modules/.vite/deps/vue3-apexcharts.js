import {
  require_apexcharts_common
} from "./chunk-3PSGO6P3.js";
import {
  require_vue
} from "./chunk-W3TL672D.js";
import "./chunk-EBQ43PD5.js";
import {
  __commonJS
} from "./chunk-S5KM4IGW.js";

// node_modules/vue3-apexcharts/dist/vue3-apexcharts.common.js
var require_vue3_apexcharts_common = __commonJS({
  "node_modules/vue3-apexcharts/dist/vue3-apexcharts.common.js"(exports, module) {
    module.exports = function(modules) {
      var installedModules = {};
      function __webpack_require__(moduleId) {
        if (installedModules[moduleId]) {
          return installedModules[moduleId].exports;
        }
        var module2 = installedModules[moduleId] = {
          i: moduleId,
          l: false,
          exports: {}
        };
        modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
        module2.l = true;
        return module2.exports;
      }
      __webpack_require__.m = modules;
      __webpack_require__.c = installedModules;
      __webpack_require__.d = function(exports2, name, getter) {
        if (!__webpack_require__.o(exports2, name)) {
          Object.defineProperty(exports2, name, { enumerable: true, get: getter });
        }
      };
      __webpack_require__.r = function(exports2) {
        if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
          Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
        }
        Object.defineProperty(exports2, "__esModule", { value: true });
      };
      __webpack_require__.t = function(value, mode) {
        if (mode & 1)
          value = __webpack_require__(value);
        if (mode & 8)
          return value;
        if (mode & 4 && typeof value === "object" && value && value.__esModule)
          return value;
        var ns = /* @__PURE__ */ Object.create(null);
        __webpack_require__.r(ns);
        Object.defineProperty(ns, "default", { enumerable: true, value });
        if (mode & 2 && typeof value != "string")
          for (var key in value)
            __webpack_require__.d(ns, key, function(key2) {
              return value[key2];
            }.bind(null, key));
        return ns;
      };
      __webpack_require__.n = function(module2) {
        var getter = module2 && module2.__esModule ? function getDefault() {
          return module2["default"];
        } : function getModuleExports() {
          return module2;
        };
        __webpack_require__.d(getter, "a", getter);
        return getter;
      };
      __webpack_require__.o = function(object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
      };
      __webpack_require__.p = "";
      return __webpack_require__(__webpack_require__.s = "fb15");
    }({
      "8875": function(module2, exports2, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(root, factory) {
          if (true) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = factory, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === "function" ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports2, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== void 0 && (module2.exports = __WEBPACK_AMD_DEFINE_RESULT__));
          } else {
          }
        })(typeof self !== "undefined" ? self : this, function() {
          function getCurrentScript() {
            var descriptor = Object.getOwnPropertyDescriptor(document, "currentScript");
            if (!descriptor && "currentScript" in document && document.currentScript) {
              return document.currentScript;
            }
            if (descriptor && descriptor.get !== getCurrentScript && document.currentScript) {
              return document.currentScript;
            }
            try {
              throw new Error();
            } catch (err) {
              var ieStackRegExp = /.*at [^(]*\((.*):(.+):(.+)\)$/ig, ffStackRegExp = /@([^@]*):(\d+):(\d+)\s*$/ig, stackDetails = ieStackRegExp.exec(err.stack) || ffStackRegExp.exec(err.stack), scriptLocation = stackDetails && stackDetails[1] || false, line = stackDetails && stackDetails[2] || false, currentLocation = document.location.href.replace(document.location.hash, ""), pageSource, inlineScriptSourceRegExp, inlineScriptSource, scripts = document.getElementsByTagName("script");
              if (scriptLocation === currentLocation) {
                pageSource = document.documentElement.outerHTML;
                inlineScriptSourceRegExp = new RegExp("(?:[^\\n]+?\\n){0," + (line - 2) + "}[^<]*<script>([\\d\\D]*?)<\\/script>[\\d\\D]*", "i");
                inlineScriptSource = pageSource.replace(inlineScriptSourceRegExp, "$1").trim();
              }
              for (var i = 0; i < scripts.length; i++) {
                if (scripts[i].readyState === "interactive") {
                  return scripts[i];
                }
                if (scripts[i].src === scriptLocation) {
                  return scripts[i];
                }
                if (scriptLocation === currentLocation && scripts[i].innerHTML && scripts[i].innerHTML.trim() === inlineScriptSource) {
                  return scripts[i];
                }
              }
              return null;
            }
          }
          ;
          return getCurrentScript;
        });
      },
      "8bbf": function(module2, exports2) {
        module2.exports = require_vue();
      },
      "95e6": function(module2, exports2) {
        module2.exports = require_apexcharts_common();
      },
      "fb15": function(module2, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        if (typeof window !== "undefined") {
          var currentScript = window.document.currentScript;
          if (true) {
            var getCurrentScript = __webpack_require__("8875");
            currentScript = getCurrentScript();
            if (!("currentScript" in document)) {
              Object.defineProperty(document, "currentScript", { get: getCurrentScript });
            }
          }
          var src = currentScript && currentScript.src.match(/(.+\/)[^/]+\.js(\?.*)?$/);
          if (src) {
            __webpack_require__.p = src[1];
          }
        }
        var setPublicPath = null;
        var external_commonjs_vue_commonjs2_vue_root_Vue_ = __webpack_require__("8bbf");
        var external_root_ApexCharts_commonjs_apexcharts_commonjs2_apexcharts_ = __webpack_require__("95e6");
        var external_root_ApexCharts_commonjs_apexcharts_commonjs2_apexcharts_default = __webpack_require__.n(external_root_ApexCharts_commonjs_apexcharts_commonjs2_apexcharts_);
        const events = [
          "animationEnd",
          "beforeMount",
          "mounted",
          "updated",
          "click",
          "mouseMove",
          "legendClick",
          "markerClick",
          "selection",
          "dataPointSelection",
          "dataPointMouseEnter",
          "dataPointMouseLeave",
          "beforeZoom",
          "beforeResetZoom",
          "zoomed",
          "scrolled",
          "scrolled"
        ];
        const vueApexcharts = Object(external_commonjs_vue_commonjs2_vue_root_Vue_["defineComponent"])({
          name: "apexchart",
          props: {
            options: {
              type: Object
            },
            type: {
              type: String
            },
            series: {
              type: Array,
              required: true
            },
            width: {
              default: "100%"
            },
            height: {
              default: "auto"
            }
          },
          emits: events,
          setup(props, { emit }) {
            const __el = Object(external_commonjs_vue_commonjs2_vue_root_Vue_["ref"])(null);
            const chart = Object(external_commonjs_vue_commonjs2_vue_root_Vue_["ref"])(null);
            const isObject = (item) => {
              return item && typeof item === "object" && !Array.isArray(item) && item != null;
            };
            const extend = (target, source) => {
              if (typeof Object.assign !== "function") {
                (function() {
                  Object.assign = function(target2) {
                    if (target2 === void 0 || target2 === null) {
                      throw new TypeError("Cannot convert undefined or null to object");
                    }
                    let output2 = Object(target2);
                    for (let index = 1; index < arguments.length; index++) {
                      let source2 = arguments[index];
                      if (source2 !== void 0 && source2 !== null) {
                        for (let nextKey in source2) {
                          if (source2.hasOwnProperty(nextKey)) {
                            output2[nextKey] = source2[nextKey];
                          }
                        }
                      }
                    }
                    return output2;
                  };
                })();
              }
              let output = Object.assign({}, target);
              if (isObject(target) && isObject(source)) {
                Object.keys(source).forEach((key) => {
                  if (isObject(source[key])) {
                    if (!(key in target)) {
                      Object.assign(output, {
                        [key]: source[key]
                      });
                    } else {
                      output[key] = extend(target[key], source[key]);
                    }
                  } else {
                    Object.assign(output, {
                      [key]: source[key]
                    });
                  }
                });
              }
              return output;
            };
            const init = async () => {
              await Object(external_commonjs_vue_commonjs2_vue_root_Vue_["nextTick"])();
              const newOptions = {
                chart: {
                  type: props.type || props.options.chart.type || "line",
                  height: props.height,
                  width: props.width,
                  events: {}
                },
                series: props.series
              };
              events.forEach((event) => {
                let callback = (...args) => emit(event, ...args);
                newOptions.chart.events[event] = callback;
              });
              const config = extend(props.options, newOptions);
              chart.value = new external_root_ApexCharts_commonjs_apexcharts_commonjs2_apexcharts_default.a(__el.value, config);
              return chart.value.render();
            };
            const refresh = () => {
              destroy();
              return init();
            };
            const destroy = () => {
              chart.value.destroy();
            };
            const updateSeries = (newSeries, animate) => {
              return chart.value.updateSeries(newSeries, animate);
            };
            const updateOptions = (newOptions, redrawPaths, animate, updateSyncedCharts) => {
              return chart.value.updateOptions(newOptions, redrawPaths, animate, updateSyncedCharts);
            };
            const toggleSeries = (seriesName) => {
              return chart.value.toggleSeries(seriesName);
            };
            const showSeries = (seriesName) => {
              chart.value.showSeries(seriesName);
            };
            const hideSeries = (seriesName) => {
              chart.value.hideSeries(seriesName);
            };
            const appendSeries = (newSeries, animate) => {
              return chart.value.appendSeries(newSeries, animate);
            };
            const resetSeries = () => {
              chart.value.resetSeries();
            };
            const toggleDataPointSelection = (seriesIndex, dataPointIndex) => {
              chart.value.toggleDataPointSelection(seriesIndex, dataPointIndex);
            };
            const appendData = (newData) => {
              return chart.value.appendData(newData);
            };
            const zoomX = (start, end) => {
              return chart.value.zoomX(start, end);
            };
            const dataURI = () => {
              return chart.value.dataURI();
            };
            const setLocale = (localeName) => {
              return chart.value.setLocale(localeName);
            };
            const addXaxisAnnotation = (options, pushToMemory) => {
              chart.value.addXaxisAnnotation(options, pushToMemory);
            };
            const addYaxisAnnotation = (options, pushToMemory) => {
              chart.value.addYaxisAnnotation(options, pushToMemory);
            };
            const addPointAnnotation = (options, pushToMemory) => {
              chart.value.addPointAnnotation(options, pushToMemory);
            };
            const removeAnnotation = (id, options) => {
              chart.value.removeAnnotation(id, options);
            };
            const clearAnnotations = () => {
              chart.value.clearAnnotations();
            };
            Object(external_commonjs_vue_commonjs2_vue_root_Vue_["onBeforeMount"])(() => {
              window.ApexCharts = external_root_ApexCharts_commonjs_apexcharts_commonjs2_apexcharts_default.a;
            });
            Object(external_commonjs_vue_commonjs2_vue_root_Vue_["onMounted"])(() => {
              __el.value = Object(external_commonjs_vue_commonjs2_vue_root_Vue_["getCurrentInstance"])().proxy.$el;
              init();
            });
            Object(external_commonjs_vue_commonjs2_vue_root_Vue_["onBeforeUnmount"])(() => {
              if (!chart.value) {
                return;
              }
              destroy();
            });
            const reactiveProps = Object(external_commonjs_vue_commonjs2_vue_root_Vue_["toRefs"])(props);
            Object(external_commonjs_vue_commonjs2_vue_root_Vue_["watch"])(reactiveProps.options, () => {
              if (!chart.value && props.options) {
                init();
              } else {
                chart.value.updateOptions(props.options);
              }
            });
            Object(external_commonjs_vue_commonjs2_vue_root_Vue_["watch"])(
              reactiveProps.series,
              () => {
                if (!chart.value && props.series) {
                  init();
                } else {
                  chart.value.updateSeries(props.series);
                }
              },
              { deep: true }
            );
            Object(external_commonjs_vue_commonjs2_vue_root_Vue_["watch"])(reactiveProps.type, () => {
              refresh();
            });
            Object(external_commonjs_vue_commonjs2_vue_root_Vue_["watch"])(reactiveProps.width, () => {
              refresh();
            });
            Object(external_commonjs_vue_commonjs2_vue_root_Vue_["watch"])(reactiveProps.height, () => {
              refresh();
            });
            return {
              chart,
              init,
              refresh,
              destroy,
              updateOptions,
              updateSeries,
              toggleSeries,
              showSeries,
              hideSeries,
              resetSeries,
              zoomX,
              toggleDataPointSelection,
              appendData,
              appendSeries,
              addXaxisAnnotation,
              addYaxisAnnotation,
              addPointAnnotation,
              removeAnnotation,
              clearAnnotations,
              dataURI
            };
          },
          render() {
            return Object(external_commonjs_vue_commonjs2_vue_root_Vue_["h"])("div", {
              class: "vue-apexcharts"
            });
          }
        });
        var vue3_apexcharts = vueApexcharts;
        const install = (app) => {
          app.component(vue3_apexcharts.name, vue3_apexcharts);
        };
        vue3_apexcharts.install = install;
        var src_0 = vue3_apexcharts;
        var entry_lib = __webpack_exports__["default"] = src_0;
      }
    });
  }
});

// dep:vue3-apexcharts
var vue3_apexcharts_default = require_vue3_apexcharts_common();
export {
  vue3_apexcharts_default as default
};
//# sourceMappingURL=vue3-apexcharts.js.map
